<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>用 VPS 搭建一个自己的 SSR 服务器</title>
      <link href="/2020/01/10/A61-build-a-SSR-server-with-VPS/"/>
      <url>/2020/01/10/A61-build-a-SSR-server-with-VPS/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>俗话说得好：预先善其事，必先利其器，作为一个程序员，经常会用到 GitHub、Google、Stack Overflow 啥的，由于国内政策原因，想要访问国外网站就得科学上网，最常见的工具就是 ShadowsocksR，又被称为酸酸乳、SSR、小飞机，目前市面上有很多很多的机场，价格也不是很高，完全可以订阅别人的，但是订阅别人的，数据安全没有保障，有可能你的浏览历史啥的别人都能掌握，别人也有随时跑路的可能，总之，只有完全属于自己的东西才是最香的！</p><a id="more"></a><hr><h1 id="购买-VPS"><a href="#购买-VPS" class="headerlink" title="购买 VPS"></a><font color="#FF0000">购买 VPS</font></h1><p>VPS（Virtual Private Server）即虚拟专用服务器技术，在购买 VPS 服务器的时候要选择国外的，推荐 <a href="https://www.vultr.com/" target="_blank" rel="noopener">Vultr</a>，国际知名，性价比比较高，最低有$2.5/月、$3.5/月的，个人用的话应该足够了。</p><fancybox><br><img src="https://cdn.jsdelivr.net/gh/TRHX/ImageHosting/ITRHX-PIC/A61/01.png" alt="01"><br></fancybox><p>点击链接注册 Vultr 账号：<a href="https://www.vultr.com/?ref=8367048" target="_blank" rel="noopener">https://www.vultr.com/?ref=8367048</a>，目前新注册用户充值10刀可以赠送50刀，注册完毕之后来到充值页面，最低充值10刀，可以选择支付宝或者微信支付。</p><fancybox><br><img src="https://cdn.jsdelivr.net/gh/TRHX/ImageHosting/ITRHX-PIC/A61/02.png" alt="02"><br></fancybox><p>充值完毕之后，点击左侧 Products，选择服务器，一共有16个地区的，选择不同地区的服务器，最后的网速也有差别，那如何选择一个速度最优的呢？很简单，你可以一次性选择多个服务器，都部署上去，搭建完毕之后，测试其速度，选择最快的，最后再把其他的都删了，可能你会想，部署多个，那费用岂不是很贵，这里注意，虽然写的是多少钱一个月，而实际上它是按照小时计费的，从你部署之后开始计费，$5/月 ≈ $0.00694/小时，你部署完毕再删掉，这段时间的费用很低，可以忽略不计，一般来说，日本和新加坡的比较快一点，也有人说日本和新加坡服务器的端口封得比较多，容易搭建失败，具体可以自己测试一下，还有就是，只有部分地区的服务器有$2.5/月、$3.5/月的套餐，其中$2.5/月的只支持 IPv6，可以根据自己情况选择，<font color="#FF0000">最后操作系统建议选择 CentOS 7 x64 的，不然有可能搭建失败，</font>后面还有个 Enable IPv6 的选项，对 IPv6 有需求的话可以勾上，其他选项就可以不用管了。</p><fancybox><br><img src="https://cdn.jsdelivr.net/gh/TRHX/ImageHosting/ITRHX-PIC/A61/03.png" alt="03"><br></fancybox><fancybox><br><img src="https://cdn.jsdelivr.net/gh/TRHX/ImageHosting/ITRHX-PIC/A61/04.png" alt="04"><br></fancybox><p>部署成功后，点 Server Details 可以看到服务器的详细信息，其中有 IP、用户名、密码等信息，后面搭建 SSR 的时候会用到，此时你可以 ping 一下你的服务器 IP，如果 ping 不通的话，可以删掉再重新开一个服务器。</p><fancybox><br><img src="https://cdn.jsdelivr.net/gh/TRHX/ImageHosting/ITRHX-PIC/A61/05.png" alt="05"><br></fancybox><hr><h1 id="搭建-SSR"><a href="#搭建-SSR" class="headerlink" title="搭建 SSR"></a><font color="#FF0000">搭建 SSR</font></h1><p>我们购买的是虚拟的服务器，因此需要工具远程连接到 VPS，如果是 Mac/Linux 系统，可以直接在终端用 SSH 连接 VPS：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh root@你VPS的IP -p 22 (22是你VPS的SSH端口)</span><br></pre></td></tr></table></figure><p>如果是 Windows 系统，可以用第三方工具连接到 VPS，如：Xshell、Putty 等，可以百度下载，以下以 Xshell 为例：</p><p>点击文件，新建会话，名称可以随便填，协议为 SSH，主机为你服务器的 IP 地址，点击确定，左侧双击这个会话开始连接，最开始会出现一个 SSH安全警告，点击接受并保存即可，然后会让你输入服务器的用户名和密码，直接在 Vultr 那边复制过来即可，最后看到 <code>[root@vultr ~]#</code> 字样表示连接成功。</p><fancybox><br><img src="https://cdn.jsdelivr.net/gh/TRHX/ImageHosting/ITRHX-PIC/A61/06.png" alt="06"><br></fancybox><fancybox><br><img src="https://cdn.jsdelivr.net/gh/TRHX/ImageHosting/ITRHX-PIC/A61/07.png" alt="07"><br></fancybox><fancybox><br><img src="https://cdn.jsdelivr.net/gh/TRHX/ImageHosting/ITRHX-PIC/A61/08.png" alt="08"><br></fancybox><fancybox><br><img src="https://cdn.jsdelivr.net/gh/TRHX/ImageHosting/ITRHX-PIC/A61/09.png" alt="09"><br></fancybox><fancybox><br><img src="https://cdn.jsdelivr.net/gh/TRHX/ImageHosting/ITRHX-PIC/A61/10.png" alt="10"><br></fancybox><p>连接成功后执行以下命令开始安装 SSR：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget --no-check-certificate https://freed.ga/github/shadowsocksR.sh; bash shadowsocksR.sh</span><br></pre></td></tr></table></figure><p>如果提示 <code>wget :command not found</code>，可先执行 <code>yum -y install wget</code>，再执行上述命令即可。</p><p>执行完毕后会让你设置 SSR 连接密码和端口，然后按任意键开始搭建。</p><fancybox><br><img src="https://cdn.jsdelivr.net/gh/TRHX/ImageHosting/ITRHX-PIC/A61/11.png" alt="11"><br></fancybox><p>搭建成功后会显示你服务器 IP，端口，连接密码，协议等信息，这些信息要记住，后面使用 ShadowsocksR 的时候要用到。</p><fancybox><br><img src="https://cdn.jsdelivr.net/gh/TRHX/ImageHosting/ITRHX-PIC/A61/12.png" alt="12"><br></fancybox><hr><h1 id="安装锐速"><a href="#安装锐速" class="headerlink" title="安装锐速"></a><font color="#FF0000">安装锐速</font></h1><p>由于我们购买的服务器位于国外，如果遇到上网高峰期，速度就会变慢，而锐速就是一款专业的连接加速器，可以充分利用服务器带宽，提升带宽吞吐量，其他还有类似的程序如 Google BBR 等，可以自行比较其加速效果，以下以操作系统为 CentOS 6&amp;7 锐速的安装为例。</p><p>如果你服务器操作系统选择的是 CentOS 6 x64，则直接执行以下命令，一直回车即可：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget --no-check-certificate -O appex.sh https://raw.githubusercontent.com/hombo125/doubi/master/appex.sh &amp;&amp; bash appex.sh install <span class="string">'2.6.32-642.el6.x86_64'</span></span><br></pre></td></tr></table></figure><p>如果你服务器操作系统选择的是 CentOS 7 x64，则需要先执行以下命令更换内核：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget --no-check-certificate -O rskernel.sh https://raw.githubusercontent.com/hombo125/doubi/master/rskernel.sh &amp;&amp; bash rskernel.sh</span><br></pre></td></tr></table></figure><p>如下图所示表示内核更换完毕，此时已经断开与服务器的连接，我们需要重新连接到服务器，再执行后面的操作：</p><fancybox><br><img src="https://cdn.jsdelivr.net/gh/TRHX/ImageHosting/ITRHX-PIC/A61/13.png" alt="13"><br></fancybox><p>重新连接到服务器后，再执行以下命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install net-tools -y &amp;&amp; wget --no-check-certificate -O appex.sh https://raw.githubusercontent.com/0oVicero0/serverSpeeder_Install/master/appex.sh &amp;&amp; bash appex.sh install</span><br></pre></td></tr></table></figure><p>然后一直回车即可，系统会自动安装锐速。</p><fancybox><br><img src="https://cdn.jsdelivr.net/gh/TRHX/ImageHosting/ITRHX-PIC/A61/14.png" alt="14"><br></fancybox><fancybox><br><img src="https://cdn.jsdelivr.net/gh/TRHX/ImageHosting/ITRHX-PIC/A61/15.png" alt="15"><br></fancybox><p>出现以下信息表示安装成功：</p><fancybox><br><img src="https://cdn.jsdelivr.net/gh/TRHX/ImageHosting/ITRHX-PIC/A61/16.png" alt="16"><br></fancybox><hr><h1 id="使用-SSR"><a href="#使用-SSR" class="headerlink" title="使用 SSR"></a><font color="#FF0000">使用 SSR</font></h1><p>常见的工具有 ShadowsocksR、SSTap（原本是个游戏加速器，现在已经停止维护，但 GitHub 上仍然可以找到）等。</p><p>Shadowsocks 官网：<a href="https://shadowsocks.org/" target="_blank" rel="noopener">https://shadowsocks.org/</a><br>ShadowsocksR 下载地址：<a href="https://github.com/Anankke/SSRR-Windows" target="_blank" rel="noopener">https://github.com/Anankke/SSRR-Windows</a><br>SSTap GitHub 地址：<a href="https://github.com/FQrabbit/SSTap-Rule" target="_blank" rel="noopener">https://github.com/FQrabbit/SSTap-Rule</a></p><p>不管什么工具，用法都是一样的，添加一个新的代理服务器，服务器 IP、端口、密码、加密方式等等这些信息保持一致就行了。然后就可以愉快地科学上网了！</p><fancybox><br><img src="https://cdn.jsdelivr.net/gh/TRHX/ImageHosting/ITRHX-PIC/A61/16.png" alt="17"><br></fancybox><fancybox><br><img src="https://cdn.jsdelivr.net/gh/TRHX/ImageHosting/ITRHX-PIC/A61/18.png" alt="18"><br></fancybox><hr><h1 id="多端口配置"><a href="#多端口配置" class="headerlink" title="多端口配置"></a><font color="#FF0000">多端口配置</font></h1><p>经过以上步骤我们就可以科学上网了，但是目前为止只有一个端口，只能一个人用，那么如何实现多个端口多人使用呢？事实上端口、密码等信息是储存在一个叫做 <code>shadowsocks.json</code> 文件里的，如果要添加端口或者更改密码，只需要修改此文件即可。</p><p>连接到自己的 VPS，输入以下命令，使用 vim 编辑文件：<code>vi /etc/shadowsocks.json</code></p><p>原文件内容大概如下：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"server"</span>: <span class="string">"0.0.0.0"</span>,</span><br><span class="line">    <span class="attr">"server_port"</span>: <span class="number">8686</span>,</span><br><span class="line">    <span class="attr">"server_ipv6"</span>: <span class="string">"::"</span>,</span><br><span class="line">    <span class="attr">"local_address"</span>: <span class="string">"127.0.0.1"</span>,</span><br><span class="line">    <span class="attr">"local_port"</span>: <span class="number">1081</span>,</span><br><span class="line">    <span class="attr">"password"</span>:<span class="string">"SSR12345"</span>,</span><br><span class="line">    <span class="attr">"timeout"</span>: <span class="number">120</span>,</span><br><span class="line">    <span class="attr">"udp_timeout"</span>: <span class="number">60</span>,</span><br><span class="line">    <span class="attr">"method"</span>: <span class="string">"aes-256-cfb"</span>,</span><br><span class="line">    <span class="attr">"protocol"</span>: <span class="string">"auth_sha1_v4_compatible"</span>,</span><br><span class="line">    <span class="attr">"protocol_param"</span>: <span class="string">""</span>,</span><br><span class="line">    <span class="attr">"obfs"</span>: <span class="string">"http_simple_compatible"</span>,</span><br><span class="line">    <span class="attr">"obfs_param"</span>: <span class="string">""</span>,</span><br><span class="line">    <span class="attr">"dns_ipv6"</span>: <span class="literal">false</span>,</span><br><span class="line">    <span class="attr">"connect_verbose_info"</span>: <span class="number">1</span>,</span><br><span class="line">    <span class="attr">"redirect"</span>: <span class="string">""</span>,</span><br><span class="line">    <span class="attr">"fast_open"</span>: <span class="literal">false</span>,</span><br><span class="line">    <span class="attr">"workers"</span>: <span class="number">1</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>增加端口，我们将其修改为如下内容：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"server"</span>: <span class="string">"0.0.0.0"</span>,</span><br><span class="line">    <span class="attr">"server_ipv6"</span>: <span class="string">"::"</span>,</span><br><span class="line">    <span class="attr">"local_address"</span>: <span class="string">"127.0.0.1"</span>,</span><br><span class="line">    <span class="attr">"local_port"</span>: <span class="number">1081</span>,</span><br><span class="line">    <span class="attr">"port_password"</span>:</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="attr">"8686"</span>:<span class="string">"SSR1"</span>,</span><br><span class="line">        <span class="attr">"8687"</span>:<span class="string">"SSR2"</span>,</span><br><span class="line">        <span class="attr">"8688"</span>:<span class="string">"SSR3"</span>,</span><br><span class="line">        <span class="attr">"8689"</span>:<span class="string">"SSR4"</span>,</span><br><span class="line">        <span class="attr">"8690"</span>:<span class="string">"SSR5"</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">"timeout"</span>: <span class="number">120</span>,</span><br><span class="line">    <span class="attr">"udp_timeout"</span>: <span class="number">60</span>,</span><br><span class="line">    <span class="attr">"method"</span>: <span class="string">"aes-256-cfb"</span>,</span><br><span class="line">    <span class="attr">"protocol"</span>: <span class="string">"auth_sha1_v4_compatible"</span>,</span><br><span class="line">    <span class="attr">"protocol_param"</span>: <span class="string">""</span>,</span><br><span class="line">    <span class="attr">"obfs"</span>: <span class="string">"http_simple_compatible"</span>,</span><br><span class="line">    <span class="attr">"obfs_param"</span>: <span class="string">""</span>,</span><br><span class="line">    <span class="attr">"dns_ipv6"</span>: <span class="literal">false</span>,</span><br><span class="line">    <span class="attr">"connect_verbose_info"</span>: <span class="number">1</span>,</span><br><span class="line">    <span class="attr">"redirect"</span>: <span class="string">""</span>,</span><br><span class="line">    <span class="attr">"fast_open"</span>: <span class="literal">false</span>,</span><br><span class="line">    <span class="attr">"workers"</span>: <span class="number">1</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>也就是删除原来的 <code>server_port</code> 和 <code>password</code> 这两项，然后增加 <code>port_password</code> 这一项，前面是端口号，后面是密码，注意不要把格式改错了！！！修改完毕并保存！！！</p><p>接下来配置一下防火墙，同样的，输入以下命令，用 vim 编辑文件：<code>vi /etc/firewalld/zones/public.xml</code></p><p>初始的防火墙只开放了最初配置 SSR 默认的那个端口，现在需要我们手动加上那几个新加的端口，<font color="#FF0000"><strong>注意：一个端口需要复制两行，一行是 tcp，一行是 udp。</strong></font></p><p>原文件内容大概如下：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version="1.0" encoding="utf-8"?&gt;</span><br><span class="line"><span class="tag">&lt;<span class="name">zone</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">short</span>&gt;</span>Public<span class="tag">&lt;/<span class="name">short</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">service</span> <span class="attr">name</span>=<span class="string">"dhcpv6-client"</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">service</span> <span class="attr">name</span>=<span class="string">"ssh"</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">port</span> <span class="attr">protocol</span>=<span class="string">"tcp"</span> <span class="attr">port</span>=<span class="string">"8686"</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">port</span> <span class="attr">protocol</span>=<span class="string">"udp"</span> <span class="attr">port</span>=<span class="string">"8686"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">zone</span>&gt;</span></span><br></pre></td></tr></table></figure><p>修改后的内容如下：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version="1.0" encoding="utf-8"?&gt;</span><br><span class="line"><span class="tag">&lt;<span class="name">zone</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">short</span>&gt;</span>Public<span class="tag">&lt;/<span class="name">short</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">service</span> <span class="attr">name</span>=<span class="string">"dhcpv6-client"</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">service</span> <span class="attr">name</span>=<span class="string">"ssh"</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">port</span> <span class="attr">protocol</span>=<span class="string">"tcp"</span> <span class="attr">port</span>=<span class="string">"8686"</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">port</span> <span class="attr">protocol</span>=<span class="string">"udp"</span> <span class="attr">port</span>=<span class="string">"8686"</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">port</span> <span class="attr">protocol</span>=<span class="string">"tcp"</span> <span class="attr">port</span>=<span class="string">"8687"</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">port</span> <span class="attr">protocol</span>=<span class="string">"udp"</span> <span class="attr">port</span>=<span class="string">"8687"</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">port</span> <span class="attr">protocol</span>=<span class="string">"tcp"</span> <span class="attr">port</span>=<span class="string">"8688"</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">port</span> <span class="attr">protocol</span>=<span class="string">"udp"</span> <span class="attr">port</span>=<span class="string">"8688"</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">port</span> <span class="attr">protocol</span>=<span class="string">"tcp"</span> <span class="attr">port</span>=<span class="string">"8689"</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">port</span> <span class="attr">protocol</span>=<span class="string">"udp"</span> <span class="attr">port</span>=<span class="string">"8689"</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">port</span> <span class="attr">protocol</span>=<span class="string">"tcp"</span> <span class="attr">port</span>=<span class="string">"8690"</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">port</span> <span class="attr">protocol</span>=<span class="string">"udp"</span> <span class="attr">port</span>=<span class="string">"8690"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">zone</span>&gt;</span></span><br></pre></td></tr></table></figure><p>修改完毕并保存，最后重启一下 shadowsocks，然后重新载入防火墙即可，两条命令如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/etc/init.d/shadowsocks restart</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">firewall-cmd --reload</span><br></pre></td></tr></table></figure><p>完成之后，我们新加的这几个端口就可以使用了</p><p>另外还可以将配置转换成我们常见的链接形式，如：<code>ss://xxxxx</code> 或 <code>ssr://xxxxx</code>，其实这种链接就是把 IP，端口，密码等信息按照一定的格式拼接起来，然后经过 Base64 编码后实现的，有兴趣或者有需求的可以自行百度。</p><hr><h1 id="扩展命令"><a href="#扩展命令" class="headerlink" title="扩展命令"></a><font color="#FF0000">扩展命令</font></h1><p>SSR 常用命令：<br>启动：<code>/etc/init.d/shadowsocks start</code><br>停止：<code>/etc/init.d/shadowsocks stop</code><br>重启：<code>/etc/init.d/shadowsocks restart</code><br>状态：<code>/etc/init.d/shadowsocks status</code><br>卸载：<code>./shadowsocks-all.sh uninstall</code><br>更改配置参数：<code>vim /etc/shadowsocks-r/config.json</code></p>]]></content>
      
      
      <categories>
          
          <category> VPS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> VPS </tag>
            
            <tag> SSR </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2019年总结【跨越今天，更不平凡】</title>
      <link href="/2019/12/31/A60-2019-summary/"/>
      <url>/2019/12/31/A60-2019-summary/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><fancybox><br><img src="https://cdn.jsdelivr.net/gh/TRHX/ImageHosting/ITRHX-PIC/A60/1.png" alt="1"><br></fancybox><a id="more"></a><hr><p>还记得小时候写作文，畅想2020会怎样怎样，光阴似箭，2020真的来了，度过了艰难的考试周，抽了个晚上，回想了一下，决定写一写总结吧，似乎以前都没写过呢，那干脆连带2017、2018也写写吧，重点写一写2019的，以后争取每年都做一下总结。</p><hr><h1 id="【2017】"><a href="#【2017】" class="headerlink" title="【2017】"></a><font color="#FF000">【2017】</font></h1><p>2017年高三，上半年就不用说了，所有高三考生都一个样吧，下半年考进了武汉的某二本院校，软件工程专业，现在回想起来，当时把时间浪费得太多了，最开始加了一个部门，后来退了（<del>事实上啥也学不到，浪费时间</del> ），然后除了完成学校的课程以外，其他啥也没搞，剩下的时间基本上全拿来骑车了，从高一开始就热爱单车运动，刚上大学肯定得放飞自我了，没课的时候就天天和学长到处跑，都快把武汉跑了个遍了，当时还定了个计划，大学四年骑车去一次西藏或者青海湖，其他的什么都没想，也没有对以后具体干哪方面做过规划，这一年收获最多的应该就是路上的风景了。</p><fancybox><br><img src="https://cdn.jsdelivr.net/gh/TRHX/ImageHosting/ITRHX-PIC/A60/2.png" alt="2"><br></fancybox><h1 id="【2018】"><a href="#【2018】" class="headerlink" title="【2018】"></a><font color="#FF000">【2018】</font></h1><p>2018上半年，大一下学期，学习方面就过了个英语四级，然后依旧热衷于我的单车，暑假的时候疯狂了一把，7天干了700多公里，从学校骑回家了，那个时候正是热的时候，白天基本上在三十度，从武汉往西边走，后面全是爬山，上山爬不动，下山刹不住，路上也遇到了不少牛逼人物，有徒步西藏的，有环游中国的，直播平台有好几十万粉丝的……遇到的人都很善良，很硬汉，这次经历从某种程度上来说也是一次成长吧，一次很有意义的骑行。</p><p>下半年，也就是大二开始，才慢慢开始重视专业知识的学习，大二上学期搭建了个人博客，开始尝试写博客，其实就是把博客当做笔记吧，记性不好，学了的东西容易忘记，忘记了可以经常翻自己博客再复习复习，自己踩过的坑也记录记录，后来没想到有些文章访问量还挺高的，在博客搭建方面也帮到了一些网友，最重要的是结识了不少博友，有各行各业的大佬，下半年也定了方向，开始专注Python的学习，从此开始慢慢熬夜，也渐渐地不怎么出去骑车了。</p><fancybox><br><img src="https://cdn.jsdelivr.net/gh/TRHX/ImageHosting/ITRHX-PIC/A60/3.png" alt="3"><br></fancybox><fancybox><br><img src="https://cdn.jsdelivr.net/gh/TRHX/ImageHosting/ITRHX-PIC/A60/4.png" alt="4"><br></fancybox><h1 id="【2019】"><a href="#【2019】" class="headerlink" title="【2019】"></a><font color="#FF000">【2019】</font></h1><p>2019 总的来说，还比较满意吧，主要是感觉过得很充实，大三基本上每天一整天都是上机课，没有太多时间搞自己的，自己倾向于Python、网络爬虫、数据分析方面，然而这些课程学校都没有，每天晚上以及周六周日都是自己在学，找了不少视频在看，有时候感觉自己还是差点火候，感觉一个简单的东西人家看一遍就会，但是我要看好几遍，不管怎样，我还是相信勤能补拙的。</p><h5 id="【学习方面】"><a href="#【学习方面】" class="headerlink" title="【学习方面】"></a>【学习方面】</h5><ul><li>[√] 通过软考中级软件设计师</li><li>[√] 成为入党积极分子</li><li>[√] 学校大课基金结题</li><li style="list-style: none"><input type="checkbox"> 英语六级未通过</li><li style="list-style: none"><input type="checkbox"> 国家专利未通过</li></ul><h5 id="【看完或者大部分看完的书籍】"><a href="#【看完或者大部分看完的书籍】" class="headerlink" title="【看完或者大部分看完的书籍】"></a>【看完或者大部分看完的书籍】</h5><ul><li>[√] 《软件设计师考试》</li><li>[√] 《Python 编程从入门到实践》</li><li>[√] 《Python 编程从零基础到项目实战》</li><li>[√] 《Python3 网络爬虫开发实战》</li><li>[√] 《Python 网络爬虫从入门到实践》</li><li>[√] 《精通 Python 爬虫框架 Scrapy》</li><li>[√] 《Python 程序员面试宝典(算法+数据结构)》</li><li>[√] 《Selenium 自动化测试 — 基于 Python 语言》</li><li>[√] 《重构，改善既有代码的设计》</li></ul><h5 id="【生活方面】"><a href="#【生活方面】" class="headerlink" title="【生活方面】"></a>【生活方面】</h5><p>暑假受家族前辈的邀请，为整个姓氏家族编写族谱，感觉这是今年收获最大的一件事情吧，当时背着电脑跟着前辈下乡，挨家挨户统计资料，纯手工录入电脑（感觉那是我活了二十年打字打得最多的一个月，祖宗十八代都搞清楚了），最后排版打印成书，一个月下来感受到了信息化时代和传统文化的碰撞，见了很多古书，古迹，当然还领略到了古繁体字的魅力，前辈一路上给我讲述了很多书本上学不到的东西，一段很有意义的体验，感触颇深。</p><p>个人爱好上面，今年就基本上没有骑车了，没有经常骑车，开学骑了两次就跟不上别人了，后面就洗干净用布遮起来放在寝室了，按照目前情况来看，多半是要“退役”了，不知道何时才会又一次踩上脚踏，不过偶尔还是在抖音上刷刷关注的单车大佬，看看别人的视频，看到友链小伙伴 <a href="https://shan333.cn/" target="_blank" rel="noopener">Shan San</a> 在今年总结也写了他一年没有跳舞了，抛弃了曾经热爱的 Breaking，真的是深有感触啊。</p><p>有个遗憾就是大一的愿望实现不了了，恐怕大学四年也不会去西藏或者青海湖了，此处放一个到目前为止的骑行数据，以此纪念一下我的单车生涯吧。</p><fancybox><br><img src="https://cdn.jsdelivr.net/gh/TRHX/ImageHosting/ITRHX-PIC/A60/5.png" alt="5"><br></fancybox><h5 id="【技术交流-amp-实践】"><a href="#【技术交流-amp-实践】" class="headerlink" title="【技术交流&amp;实践】"></a>【技术交流&amp;实践】</h5><p>自从搭建了博客之后，认识了不少大佬，经常会去大佬博客逛逛，涨涨知识</p><p>截止目前，个人博客 PV：4万+，UV：1万+，知乎：400+赞同，CSDN：43万+访问量，400+赞同</p><p>此外今年第一次为开源做了一点儿微不足道的贡献，为 <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a> 博客主题 <a href="https://github.com/xaoxuu/hexo-theme-material-x" target="_blank" rel="noopener">Material X</a> 添加了文章字数统计和阅读时长的功能，提交了人生当中第一个 <a href="https://github.com/xaoxuu/hexo-theme-material-x/pull/117" target="_blank" rel="noopener">PR</a>。第一次嘛，还是值得纪念一下的。</p><fancybox><br><img src="https://cdn.jsdelivr.net/gh/TRHX/ImageHosting/ITRHX-PIC/A60/6.png" alt="6"><br></fancybox><p>我 GitHub 上虽然有一些小绿点，但是很大一部分都是推送的博客相关的东西，剩下的有几个仓库也就是 Python 相关的了，一些实战的代码放在了上面，很多时候是拿 GitHub 围观一些牛逼代码或者资源，还需要努力学习啊！</p><fancybox><br><img src="https://cdn.jsdelivr.net/gh/TRHX/ImageHosting/ITRHX-PIC/A60/7.png" alt="7"><br></fancybox><fancybox><br><img src="https://cdn.jsdelivr.net/gh/TRHX/ImageHosting/ITRHX-PIC/A60/8.png" alt="8"><br></fancybox><p>实战方面，爬虫自己也爬了很多网站，遇到一些反爬网站还不能解决，也刷了一些 <a href="https://checkio.org/" target="_blank" rel="noopener">Checkio</a> 上面的题，做了题，和其他大佬相比才会发现自己的代码水平有多低，最直接的感受就是我用了很多行代码，而大神一行代码就解决了，只能说自己的水平还有很大的增进空间，新的一年继续努力吧！</p><fancybox><br><img src="https://cdn.jsdelivr.net/gh/TRHX/ImageHosting/ITRHX-PIC/A60/9.png" alt="9"><br></fancybox><h1 id="【2020】"><a href="#【2020】" class="headerlink" title="【2020】"></a><font color="#FF000">【2020】</font></h1><p><strong>1024 + 996 = 2020</strong>，2020注定是不平凡的一年，定下目标，努力实现，只谈技术，莫问前程！</p><h5 id="【计划目标】"><a href="#【计划目标】" class="headerlink" title="【计划目标】"></a>【计划目标】</h5><ul><li style="list-style: none"><input type="checkbox"> 4月蓝桥杯拿奖</li><li style="list-style: none"><input type="checkbox"> 5月通过软考高级信息系统项目管理师</li><li style="list-style: none"><input type="checkbox"> 6月通过英语六级</li><li style="list-style: none"><input type="checkbox"> 坚持记笔记、写博客</li><li style="list-style: none"><input type="checkbox"> 学习 JavaScript 逆向</li><li style="list-style: none"><input type="checkbox"> 研究网站常用反爬策略，掌握反反爬虫技术</li><li style="list-style: none"><input type="checkbox"> 掌握两到三个主流爬虫框架</li><li style="list-style: none"><input type="checkbox"> 加深 Python 算法和数据结构的学习</li><li style="list-style: none"><input type="checkbox"> 学习 Python 数据可视化和数据分析</li><li style="list-style: none"><input type="checkbox"> 做一个 Python 相关的优秀开源项目（爬虫类最好）</li><li style="list-style: none"><input type="checkbox"> 向优秀爬虫工程师方向迈进</li><li style="list-style: none"><input type="checkbox"> 参加 PyCon China 2020</li></ul><h5 id="【计划要看的书籍】"><a href="#【计划要看的书籍】" class="headerlink" title="【计划要看的书籍】"></a>【计划要看的书籍】</h5><ul><li style="list-style: none"><input type="checkbox"> 《JavaScript 从入门到精通》</li><li style="list-style: none"><input type="checkbox"> 《Python3 反爬虫原理与绕过实战》</li><li style="list-style: none"><input type="checkbox"> 《Python 数据可视化编程实战》</li><li style="list-style: none"><input type="checkbox"> 《Python 数据可视化之 matplotlib 实践》</li><li style="list-style: none"><input type="checkbox"> 《Python 数据可视化之 matplotlib 精进》</li><li style="list-style: none"><input type="checkbox"> 《基于 Python的大数据分析基础及实战》</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>pip uninstall <span class="number">2019</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>pip install <span class="number">2020</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(<span class="string">'Live a good life, write some good code !!!'</span>)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> BLOG </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 年终总结 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python3 爬虫实战 — 瓜子全国二手车</title>
      <link href="/2019/11/15/A59-pyspider-guazi/"/>
      <url>/2019/11/15/A59-pyspider-guazi/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><blockquote><p>爬取时间：2019-11-14<br>爬取难度：★★☆☆☆☆<br>请求链接：<a href="https://www.guazi.com/www/buy/" target="_blank" rel="noopener">https://www.guazi.com/www/buy/</a><br>爬取目标：爬取瓜子全国二手车信息，包括价格、上牌时间、表显里程等；保存车辆图片<br>涉及知识：请求库 requests、解析库 lxml、Xpath 语法、数据库 MongoDB 的操作<br>完整代码：<a href="https://github.com/TRHX/Python3-Spider-Practice/tree/master/guazi" target="_blank" rel="noopener">https://github.com/TRHX/Python3-Spider-Practice/tree/master/guazi</a><br>其他爬虫实战代码合集（持续更新）：<a href="https://github.com/TRHX/Python3-Spider-Practice" target="_blank" rel="noopener">https://github.com/TRHX/Python3-Spider-Practice</a><br>爬虫实战专栏（持续更新）：<a href="https://itrhx.blog.csdn.net/article/category/9351278" target="_blank" rel="noopener">https://itrhx.blog.csdn.net/article/category/9351278</a></p></blockquote><hr><a id="more"></a><h1 id="【1x00】提取所有二手车详情页URL"><a href="#【1x00】提取所有二手车详情页URL" class="headerlink" title="【1x00】提取所有二手车详情页URL"></a><font color="#FF0000">【1x00】提取所有二手车详情页URL</font></h1><p>分析页面，按照习惯，最开始在 headers 里面只加入 User-Agent 字段，向主页发送请求，然而返回的东西并不是主页真正的源码，因此我们加入 Cookie，再次发起请求，即可得到真实数据。</p><p>获取 Cookie：打开浏览器访问网站，打开开发工具，切换到 Network 选项卡，筛选 Doc 文件，在 Request Headers 里可以看到 Cookie 值。</p><font color="#FF0000"><strong>注意在爬取瓜子二手车的时候，User-Agent 与 Cookie 要对应一致，也就是直接复制 Request Headers 里的 User-Agent 和 Cookie，不要自己定义一个 User-Agent，不然有可能获取不到信息！</strong></font><fancybox><br><img src="https://cdn.jsdelivr.net/gh/TRHX/ImageHosting/ITRHX-PIC/A59/01.png" alt="01"><br></fancybox><p>分析页面，请求地址为：<a href="https://www.guazi.com/www/buy/" target="_blank" rel="noopener">https://www.guazi.com/www/buy/</a></p><p>第一页：<a href="https://www.guazi.com/www/buy/" target="_blank" rel="noopener">https://www.guazi.com/www/buy/</a></p><p>第二页：<a href="https://www.guazi.com/www/buy/o2c-1/" target="_blank" rel="noopener">https://www.guazi.com/www/buy/o2c-1/</a></p><p>第三页：<a href="https://www.guazi.com/www/buy/o3c-1/" target="_blank" rel="noopener">https://www.guazi.com/www/buy/o3c-1/</a></p><p>一共有50页数据，利用 for 循环，每次改变 URL 中 <code>o2c-1</code> 参数里面的数字即可实现所有页面的爬取，由于我们是想爬取每台二手车详情页的数据，所以定义一个 <code>parse_index()</code> 函数，提取每一页的所有详情页的 URL，保存在列表 <code>url_list</code> 中</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 必须要有 Cookie 和 User-Agent，且两者必须对应（用浏览器访问网站后控制台里面复制）</span></span><br><span class="line">headers = &#123;</span><br><span class="line">    <span class="string">'Cookie'</span>: <span class="string">'uuid=06ce7520-ebd1-45bc-f41f-a95f2c9b2283; ganji_uuid=7044571161649671972745; lg=1; clueSourceCode=%2A%2300; user_city_id=-1; sessionid=fefbd4f8-0a06-4e8a-dc49-8856e1a02a07; Hm_lvt_936a6d5df3f3d309bda39e92da3dd52f=1573469368,1573541270,1573541964,1573715863; close_finance_popup=2019-11-14; cainfo=%7B%22ca_a%22%3A%22-%22%2C%22ca_b%22%3A%22-%22%2C%22ca_s%22%3A%22seo_baidu%22%2C%22ca_n%22%3A%22default%22%2C%22ca_medium%22%3A%22-%22%2C%22ca_term%22%3A%22-%22%2C%22ca_content%22%3A%22-%22%2C%22ca_campaign%22%3A%22-%22%2C%22ca_kw%22%3A%22-%22%2C%22ca_i%22%3A%22-%22%2C%22scode%22%3A%22-%22%2C%22keyword%22%3A%22-%22%2C%22ca_keywordid%22%3A%22-%22%2C%22display_finance_flag%22%3A%22-%22%2C%22platform%22%3A%221%22%2C%22version%22%3A1%2C%22client_ab%22%3A%22-%22%2C%22guid%22%3A%2206ce7520-ebd1-45bc-f41f-a95f2c9b2283%22%2C%22ca_city%22%3A%22wh%22%2C%22sessionid%22%3A%22fefbd4f8-0a06-4e8a-dc49-8856e1a02a07%22%7D; _gl_tracker=%7B%22ca_source%22%3A%22-%22%2C%22ca_name%22%3A%22-%22%2C%22ca_kw%22%3A%22-%22%2C%22ca_id%22%3A%22-%22%2C%22ca_s%22%3A%22self%22%2C%22ca_n%22%3A%22-%22%2C%22ca_i%22%3A%22-%22%2C%22sid%22%3A56473912809%7D; cityDomain=www; preTime=%7B%22last%22%3A1573720945%2C%22this%22%3A1573469364%2C%22pre%22%3A1573469364%7D; Hm_lpvt_936a6d5df3f3d309bda39e92da3dd52f=1573720946; rfnl=https://www.guazi.com/www/chevrolet/i2c-1r18/; antipas=675i0t513a7447M2L9y418Qq869'</span>,</span><br><span class="line">    <span class="string">'User-Agent'</span>: <span class="string">'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/78.0.3904.70 Safari/537.36'</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取所有二手车详情页URL</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">parse_index</span><span class="params">()</span>:</span></span><br><span class="line">    response = requests.get(url=url, headers=headers)</span><br><span class="line">    tree = etree.HTML(response.text)</span><br><span class="line">    url_list = tree.xpath(<span class="string">'//li/a[@class="car-a"]/@href'</span>)</span><br><span class="line">    <span class="comment"># print(len(url_list))</span></span><br><span class="line">    <span class="keyword">return</span> url_list</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>, <span class="number">51</span>):</span><br><span class="line">        url = <span class="string">'https://www.guazi.com/www/buy/o%sc-1/'</span> % i</span><br><span class="line">        detail_urls = parse_index()</span><br></pre></td></tr></table></figure><hr><h1 id="【2x00】获取二手车详细信息并保存图片"><a href="#【2x00】获取二手车详细信息并保存图片" class="headerlink" title="【2x00】获取二手车详细信息并保存图片"></a><font color="#FF0000">【2x00】获取二手车详细信息并保存图片</font></h1><p>前面的第一步我们已经获取到了二手车详情页的 URL，现在定义一个 <code>parse_detail()</code> 函数，向其中循环传入每一条 URL，利用 Xpath 语法匹配每一条信息，所有信息包含：<strong>标题、二手车价格、新车指导价、车主、上牌时间、表显里程、上牌地、排放标准、变速箱、排量、过户次数、看车地点、年检到期、交强险、商业险到期</strong>。</p><p>其中有部分信息可能包含空格，可以用 strip() 方法将其去掉。</p><p>需要注意的是，<strong>上牌地</strong>对应的是一个 <code>class=&quot;three&quot;</code> 的 <code>li</code> 标签，有些二手车没有上牌地信息，匹配的结果将是空，在数据储存时就有可能出现数组越界的错误信息，所以这里可以加一个判断，如果没有上牌地信息，可以将其赋值为：未知。</p><p>保存车辆图片时，为了节省时间和空间，避免频繁爬取被封，所以只保存第一张图片，同样利用 Xpath 匹配到第一张图片的地址，以标题为图片的名称，定义储存路径后，以二进制形式保存图片。</p><p>最后整个函数返回的是一个列表 <code>data</code>，这个列表包含每辆二手车的所有信息</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 获取二手车详细信息</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">parse_detail</span><span class="params">(content)</span>:</span></span><br><span class="line">    detail_response = requests.get(url=content, headers=headers)</span><br><span class="line">    tree = etree.HTML(detail_response.text)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 标题</span></span><br><span class="line">    title = tree.xpath(<span class="string">'//h2[@class="titlebox"]/text()'</span>)</span><br><span class="line">    <span class="comment"># 移除字符串头尾空格</span></span><br><span class="line">    title = [t.strip() <span class="keyword">for</span> t <span class="keyword">in</span> title]</span><br><span class="line">    <span class="comment"># 匹配到两个元素，只取其中一个为标题</span></span><br><span class="line">    title = title[:<span class="number">1</span>]</span><br><span class="line">    <span class="comment"># print(title)</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 价格</span></span><br><span class="line">    price_old = tree.xpath(<span class="string">'//span[@class="pricestype"]/text()'</span>)</span><br><span class="line">    <span class="comment"># 移除字符串头尾空格</span></span><br><span class="line">    price_old = [p.strip() <span class="keyword">for</span> p <span class="keyword">in</span> price_old]</span><br><span class="line">    <span class="comment"># 加入单位</span></span><br><span class="line">    price_old = [<span class="string">''</span>.join(price_old + [<span class="string">'万'</span>])]</span><br><span class="line">    <span class="comment"># print(price_old)</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 新车指导价</span></span><br><span class="line">    price_new = tree.xpath(<span class="string">'//span[@class="newcarprice"]/text()'</span>)</span><br><span class="line">    <span class="comment"># 移除字符串头尾空格</span></span><br><span class="line">    price_new = [p.strip() <span class="keyword">for</span> p <span class="keyword">in</span> price_new]</span><br><span class="line">    <span class="comment"># 对字符串进行切片，只取数字多少万</span></span><br><span class="line">    price_new = [<span class="string">'¥'</span> + price_new[<span class="number">0</span>].split(<span class="string">'价'</span>)[<span class="number">1</span>]]</span><br><span class="line">    <span class="comment"># print(price_new)</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 车主</span></span><br><span class="line">    owner = tree.xpath(<span class="string">'//dl/dt/span/text()'</span>)</span><br><span class="line">    owner = [owner[<span class="number">0</span>].replace(<span class="string">'车主：'</span>, <span class="string">''</span>)]</span><br><span class="line">    <span class="comment"># print(owner)</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 上牌时间</span></span><br><span class="line">    spsj = tree.xpath(<span class="string">'//li[@class="one"]/div/text()'</span>)</span><br><span class="line">    <span class="comment"># print(spsj)</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 表显里程</span></span><br><span class="line">    bxlc = tree.xpath(<span class="string">'//li[@class="two"]/div/text()'</span>)</span><br><span class="line">    <span class="comment"># print(bxlc)</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 上牌地</span></span><br><span class="line">    spd = tree.xpath(<span class="string">'//li[@class="three"]/div/text()'</span>)</span><br><span class="line">    <span class="comment"># 某些二手车没有上牌地，没有的将其赋值为：未知</span></span><br><span class="line">    <span class="keyword">if</span> len(spd) == <span class="number">0</span>:</span><br><span class="line">        spd = [<span class="string">'未知'</span>]</span><br><span class="line">    <span class="comment"># print(spd)</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 排放标准</span></span><br><span class="line">    pfbz = tree.xpath(<span class="string">'//li[@class="four"]/div/text()'</span>)</span><br><span class="line">    pfbz = pfbz[:<span class="number">1</span>]</span><br><span class="line">    <span class="comment"># print(pfbz)</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 变速箱</span></span><br><span class="line">    bsx = tree.xpath(<span class="string">'//li[@class="five"]/div/text()'</span>)</span><br><span class="line">    <span class="comment"># print(bsx)</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 排量</span></span><br><span class="line">    pl = tree.xpath(<span class="string">'//li[@class="six"]/div/text()'</span>)</span><br><span class="line">    <span class="comment"># print(pl)</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 过户次数</span></span><br><span class="line">    ghcs = tree.xpath(<span class="string">'//li[@class="seven"]/div/text()'</span>)</span><br><span class="line">    ghcs = [g.strip() <span class="keyword">for</span> g <span class="keyword">in</span> ghcs]</span><br><span class="line">    ghcs = ghcs[:<span class="number">1</span>]</span><br><span class="line">    <span class="comment"># print(ghcs)</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 看车地点</span></span><br><span class="line">    kcdd = tree.xpath(<span class="string">'//li[@class="eight"]/div/text()'</span>)</span><br><span class="line">    <span class="comment"># print(kcdd)</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 年检到期</span></span><br><span class="line">    njdq = tree.xpath(<span class="string">'//li[@class="nine"]/div/text()'</span>)</span><br><span class="line">    <span class="comment"># print(njdq)</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 交强险</span></span><br><span class="line">    jqx = tree.xpath(<span class="string">'//li[@class="ten"]/div/text()'</span>)</span><br><span class="line">    <span class="comment"># print(jqx)</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 商业险到期</span></span><br><span class="line">    syxdq = tree.xpath(<span class="string">'//li[@class="last"]/div/text()'</span>)</span><br><span class="line">    syxdq = [s.strip() <span class="keyword">for</span> s <span class="keyword">in</span> syxdq]</span><br><span class="line">    syxdq = syxdq[:<span class="number">1</span>]</span><br><span class="line">    <span class="comment"># print(syxdq)</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 保存车辆图片</span></span><br><span class="line">    <span class="comment"># 获取图片地址</span></span><br><span class="line">    pic_url = tree.xpath(<span class="string">'//li[@class="js-bigpic"]/img/@data-src'</span>)[<span class="number">0</span>]</span><br><span class="line">    pic_response = requests.get(pic_url)</span><br><span class="line">    <span class="comment"># 定义图片名称以及保存的文件夹</span></span><br><span class="line">    pic_name = title[<span class="number">0</span>] + <span class="string">'.jpg'</span></span><br><span class="line">    dir_name = <span class="string">'guazi_pic'</span></span><br><span class="line">    <span class="comment"># 如果没有该文件夹则创建该文件夹</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(dir_name):</span><br><span class="line">        os.mkdir(dir_name)</span><br><span class="line">    <span class="comment"># 定义储存路径</span></span><br><span class="line">    pic_path = dir_name + <span class="string">'/'</span> + pic_name</span><br><span class="line">    <span class="keyword">with</span> open(pic_path, <span class="string">"wb"</span>)<span class="keyword">as</span> f:</span><br><span class="line">        f.write(pic_response.content)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 将每辆二手车的所有信息合并为一个列表</span></span><br><span class="line">    data = title + price_old + price_new + owner + spsj + bxlc + spd + pfbz + bsx + pl + ghcs + kcdd + njdq + jqx + syxdq</span><br><span class="line">    <span class="keyword">return</span> data</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>, <span class="number">51</span>):</span><br><span class="line">        url = <span class="string">'https://www.guazi.com/www/buy/o%sc-1/'</span> % i</span><br><span class="line">        detail_urls = parse_index()</span><br><span class="line">        <span class="keyword">for</span> detail_url <span class="keyword">in</span> detail_urls:</span><br><span class="line">            car_url = <span class="string">'https://www.guazi.com'</span> + detail_url</span><br><span class="line">            car_data = parse_detail(car_url)</span><br></pre></td></tr></table></figure><hr><h1 id="【3x00】将数据储存到-MongoDB"><a href="#【3x00】将数据储存到-MongoDB" class="headerlink" title="【3x00】将数据储存到 MongoDB"></a><font color="#FF0000">【3x00】将数据储存到 MongoDB</font></h1><p>定义数据储存函数 <code>save_data()</code></p><p>使用 <code>MongoClient()</code> 方法，向其传入地址参数 <code>host</code> 和 端口参数 <code>port</code>，指定数据库为 <code>guazi</code>，集合为 <code>esc</code></p><p>传入第二步 <code>parse_detail()</code> 函数返回的二手车信息的列表，依次读取其中的元素，每一个元素对应相应的信息名称</p><p>最后调用 <code>insert_one()</code> 方法，每次插入一辆二手车的数据</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 将数据储存到 MongoDB</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">save_data</span><span class="params">(data)</span>:</span></span><br><span class="line">    client = pymongo.MongoClient(host=<span class="string">'localhost'</span>, port=<span class="number">27017</span>)</span><br><span class="line">    db = client.guazi</span><br><span class="line">    collection = db.esc</span><br><span class="line">    esc = &#123;</span><br><span class="line">        <span class="string">'标题'</span>: data[<span class="number">0</span>],</span><br><span class="line">        <span class="string">'二手车价格'</span>: data[<span class="number">1</span>],</span><br><span class="line">        <span class="string">'新车指导价'</span>: data[<span class="number">2</span>],</span><br><span class="line">        <span class="string">'车主'</span>: data[<span class="number">3</span>],</span><br><span class="line">        <span class="string">'上牌时间'</span>: data[<span class="number">4</span>],</span><br><span class="line">        <span class="string">'表显里程'</span>: data[<span class="number">5</span>],</span><br><span class="line">        <span class="string">'上牌地'</span>: data[<span class="number">6</span>],</span><br><span class="line">        <span class="string">'排放标准'</span>: data[<span class="number">7</span>],</span><br><span class="line">        <span class="string">'变速箱'</span>: data[<span class="number">8</span>],</span><br><span class="line">        <span class="string">'排量'</span>: data[<span class="number">9</span>],</span><br><span class="line">        <span class="string">'过户次数'</span>: data[<span class="number">10</span>],</span><br><span class="line">        <span class="string">'看车地点'</span>: data[<span class="number">11</span>],</span><br><span class="line">        <span class="string">'年检到期'</span>: data[<span class="number">12</span>],</span><br><span class="line">        <span class="string">'交强险'</span>: data[<span class="number">13</span>],</span><br><span class="line">        <span class="string">'商业险到期'</span>: data[<span class="number">14</span>]</span><br><span class="line">    &#125;</span><br><span class="line">    collection.insert_one(esc)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>, <span class="number">51</span>):</span><br><span class="line">        url = <span class="string">'https://www.guazi.com/www/buy/o%sc-1/'</span> % i</span><br><span class="line">        detail_urls = parse_index()</span><br><span class="line">        <span class="keyword">for</span> detail_url <span class="keyword">in</span> detail_urls:</span><br><span class="line">            car_url = <span class="string">'https://www.guazi.com'</span> + detail_url</span><br><span class="line">            car_data = parse_detail(car_url)</span><br><span class="line">            save_data(car_data)</span><br><span class="line">            <span class="comment"># 在3-10秒之间随机暂停</span></span><br><span class="line">            time.sleep(random.randint(<span class="number">3</span>, <span class="number">10</span>))</span><br><span class="line">        time.sleep(random.randint(<span class="number">5</span>, <span class="number">60</span>))</span><br><span class="line">    print(<span class="string">'所有数据爬取完毕！'</span>)</span><br></pre></td></tr></table></figure><hr><h1 id="【4x00】完整代码"><a href="#【4x00】完整代码" class="headerlink" title="【4x00】完整代码"></a><font color="#FF0000">【4x00】完整代码</font></h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># =============================================</span></span><br><span class="line"><span class="comment"># --*-- coding: utf-8 --*--</span></span><br><span class="line"><span class="comment"># @Time    : 2019-11-14</span></span><br><span class="line"><span class="comment"># @Author  : TRHX</span></span><br><span class="line"><span class="comment"># @Blog    : www.itrhx.com</span></span><br><span class="line"><span class="comment"># @CSDN    : https://blog.csdn.net/qq_36759224</span></span><br><span class="line"><span class="comment"># @FileName: guazi.py</span></span><br><span class="line"><span class="comment"># @Software: PyCharm</span></span><br><span class="line"><span class="comment"># =============================================</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> lxml <span class="keyword">import</span> etree</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> pymongo</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line"><span class="comment"># 必须要有 Cookie 和 User-Agent，且两者必须对应（用浏览器访问网站后控制台里面复制）</span></span><br><span class="line">headers = &#123;</span><br><span class="line">    <span class="string">'Cookie'</span>: <span class="string">'uuid=06ce7520-ebd1-45bc-f41f-a95f2c9b2283; ganji_uuid=7044571161649671972745; lg=1; clueSourceCode=%2A%2300; user_city_id=-1; sessionid=fefbd4f8-0a06-4e8a-dc49-8856e1a02a07; Hm_lvt_936a6d5df3f3d309bda39e92da3dd52f=1573469368,1573541270,1573541964,1573715863; close_finance_popup=2019-11-14; cainfo=%7B%22ca_a%22%3A%22-%22%2C%22ca_b%22%3A%22-%22%2C%22ca_s%22%3A%22seo_baidu%22%2C%22ca_n%22%3A%22default%22%2C%22ca_medium%22%3A%22-%22%2C%22ca_term%22%3A%22-%22%2C%22ca_content%22%3A%22-%22%2C%22ca_campaign%22%3A%22-%22%2C%22ca_kw%22%3A%22-%22%2C%22ca_i%22%3A%22-%22%2C%22scode%22%3A%22-%22%2C%22keyword%22%3A%22-%22%2C%22ca_keywordid%22%3A%22-%22%2C%22display_finance_flag%22%3A%22-%22%2C%22platform%22%3A%221%22%2C%22version%22%3A1%2C%22client_ab%22%3A%22-%22%2C%22guid%22%3A%2206ce7520-ebd1-45bc-f41f-a95f2c9b2283%22%2C%22ca_city%22%3A%22wh%22%2C%22sessionid%22%3A%22fefbd4f8-0a06-4e8a-dc49-8856e1a02a07%22%7D; _gl_tracker=%7B%22ca_source%22%3A%22-%22%2C%22ca_name%22%3A%22-%22%2C%22ca_kw%22%3A%22-%22%2C%22ca_id%22%3A%22-%22%2C%22ca_s%22%3A%22self%22%2C%22ca_n%22%3A%22-%22%2C%22ca_i%22%3A%22-%22%2C%22sid%22%3A56473912809%7D; cityDomain=www; preTime=%7B%22last%22%3A1573720945%2C%22this%22%3A1573469364%2C%22pre%22%3A1573469364%7D; Hm_lpvt_936a6d5df3f3d309bda39e92da3dd52f=1573720946; rfnl=https://www.guazi.com/www/chevrolet/i2c-1r18/; antipas=675i0t513a7447M2L9y418Qq869'</span>,</span><br><span class="line">    <span class="string">'User-Agent'</span>: <span class="string">'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/78.0.3904.70 Safari/537.36'</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取所有二手车详情页URL</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">parse_index</span><span class="params">()</span>:</span></span><br><span class="line">    response = requests.get(url=url, headers=headers)</span><br><span class="line">    tree = etree.HTML(response.text)</span><br><span class="line">    url_list = tree.xpath(<span class="string">'//li/a[@class="car-a"]/@href'</span>)</span><br><span class="line">    <span class="comment"># print(len(url_list))</span></span><br><span class="line">    <span class="keyword">return</span> url_list</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取二手车详细信息</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">parse_detail</span><span class="params">(content)</span>:</span></span><br><span class="line">    detail_response = requests.get(url=content, headers=headers)</span><br><span class="line">    tree = etree.HTML(detail_response.text)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 标题</span></span><br><span class="line">    title = tree.xpath(<span class="string">'//h2[@class="titlebox"]/text()'</span>)</span><br><span class="line">    <span class="comment"># 移除字符串头尾空格</span></span><br><span class="line">    title = [t.strip() <span class="keyword">for</span> t <span class="keyword">in</span> title]</span><br><span class="line">    <span class="comment"># 匹配到两个元素，只取其中一个为标题</span></span><br><span class="line">    title = title[:<span class="number">1</span>]</span><br><span class="line">    <span class="comment"># print(title)</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 价格</span></span><br><span class="line">    price_old = tree.xpath(<span class="string">'//span[@class="pricestype"]/text()'</span>)</span><br><span class="line">    <span class="comment"># 移除字符串头尾空格</span></span><br><span class="line">    price_old = [p.strip() <span class="keyword">for</span> p <span class="keyword">in</span> price_old]</span><br><span class="line">    <span class="comment"># 加入单位</span></span><br><span class="line">    price_old = [<span class="string">''</span>.join(price_old + [<span class="string">'万'</span>])]</span><br><span class="line">    <span class="comment"># print(price_old)</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 新车指导价</span></span><br><span class="line">    price_new = tree.xpath(<span class="string">'//span[@class="newcarprice"]/text()'</span>)</span><br><span class="line">    <span class="comment"># 移除字符串头尾空格</span></span><br><span class="line">    price_new = [p.strip() <span class="keyword">for</span> p <span class="keyword">in</span> price_new]</span><br><span class="line">    <span class="comment"># 对字符串进行切片，只取数字多少万</span></span><br><span class="line">    price_new = [<span class="string">'¥'</span> + price_new[<span class="number">0</span>].split(<span class="string">'价'</span>)[<span class="number">1</span>]]</span><br><span class="line">    <span class="comment"># print(price_new)</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 车主</span></span><br><span class="line">    owner = tree.xpath(<span class="string">'//dl/dt/span/text()'</span>)</span><br><span class="line">    owner = [owner[<span class="number">0</span>].replace(<span class="string">'车主：'</span>, <span class="string">''</span>)]</span><br><span class="line">    <span class="comment"># print(owner)</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 上牌时间</span></span><br><span class="line">    spsj = tree.xpath(<span class="string">'//li[@class="one"]/div/text()'</span>)</span><br><span class="line">    <span class="comment"># print(spsj)</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 表显里程</span></span><br><span class="line">    bxlc = tree.xpath(<span class="string">'//li[@class="two"]/div/text()'</span>)</span><br><span class="line">    <span class="comment"># print(bxlc)</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 上牌地</span></span><br><span class="line">    spd = tree.xpath(<span class="string">'//li[@class="three"]/div/text()'</span>)</span><br><span class="line">    <span class="comment"># 某些二手车没有上牌地，没有的将其赋值为：未知</span></span><br><span class="line">    <span class="keyword">if</span> len(spd) == <span class="number">0</span>:</span><br><span class="line">        spd = [<span class="string">'未知'</span>]</span><br><span class="line">    <span class="comment"># print(spd)</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 排放标准</span></span><br><span class="line">    pfbz = tree.xpath(<span class="string">'//li[@class="four"]/div/text()'</span>)</span><br><span class="line">    pfbz = pfbz[:<span class="number">1</span>]</span><br><span class="line">    <span class="comment"># print(pfbz)</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 变速箱</span></span><br><span class="line">    bsx = tree.xpath(<span class="string">'//li[@class="five"]/div/text()'</span>)</span><br><span class="line">    <span class="comment"># print(bsx)</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 排量</span></span><br><span class="line">    pl = tree.xpath(<span class="string">'//li[@class="six"]/div/text()'</span>)</span><br><span class="line">    <span class="comment"># print(pl)</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 过户次数</span></span><br><span class="line">    ghcs = tree.xpath(<span class="string">'//li[@class="seven"]/div/text()'</span>)</span><br><span class="line">    ghcs = [g.strip() <span class="keyword">for</span> g <span class="keyword">in</span> ghcs]</span><br><span class="line">    ghcs = ghcs[:<span class="number">1</span>]</span><br><span class="line">    <span class="comment"># print(ghcs)</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 看车地点</span></span><br><span class="line">    kcdd = tree.xpath(<span class="string">'//li[@class="eight"]/div/text()'</span>)</span><br><span class="line">    <span class="comment"># print(kcdd)</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 年检到期</span></span><br><span class="line">    njdq = tree.xpath(<span class="string">'//li[@class="nine"]/div/text()'</span>)</span><br><span class="line">    <span class="comment"># print(njdq)</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 交强险</span></span><br><span class="line">    jqx = tree.xpath(<span class="string">'//li[@class="ten"]/div/text()'</span>)</span><br><span class="line">    <span class="comment"># print(jqx)</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 商业险到期</span></span><br><span class="line">    syxdq = tree.xpath(<span class="string">'//li[@class="last"]/div/text()'</span>)</span><br><span class="line">    syxdq = [s.strip() <span class="keyword">for</span> s <span class="keyword">in</span> syxdq]</span><br><span class="line">    syxdq = syxdq[:<span class="number">1</span>]</span><br><span class="line">    <span class="comment"># print(syxdq)</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 保存车辆图片</span></span><br><span class="line">    <span class="comment"># 获取图片地址</span></span><br><span class="line">    pic_url = tree.xpath(<span class="string">'//li[@class="js-bigpic"]/img/@data-src'</span>)[<span class="number">0</span>]</span><br><span class="line">    pic_response = requests.get(pic_url)</span><br><span class="line">    <span class="comment"># 定义图片名称以及保存的文件夹</span></span><br><span class="line">    pic_name = title[<span class="number">0</span>] + <span class="string">'.jpg'</span></span><br><span class="line">    dir_name = <span class="string">'guazi_pic'</span></span><br><span class="line">    <span class="comment"># 如果没有该文件夹则创建该文件夹</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(dir_name):</span><br><span class="line">        os.mkdir(dir_name)</span><br><span class="line">    <span class="comment"># 定义储存路径</span></span><br><span class="line">    pic_path = dir_name + <span class="string">'/'</span> + pic_name</span><br><span class="line">    <span class="keyword">with</span> open(pic_path, <span class="string">"wb"</span>)<span class="keyword">as</span> f:</span><br><span class="line">        f.write(pic_response.content)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 将每辆二手车的所有信息合并为一个列表</span></span><br><span class="line">    data = title + price_old + price_new + owner + spsj + bxlc + spd + pfbz + bsx + pl + ghcs + kcdd + njdq + jqx + syxdq</span><br><span class="line">    <span class="keyword">return</span> data</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 将数据储存到 MongoDB</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">save_data</span><span class="params">(data)</span>:</span></span><br><span class="line">    client = pymongo.MongoClient(host=<span class="string">'localhost'</span>, port=<span class="number">27017</span>)</span><br><span class="line">    db = client.guazi</span><br><span class="line">    collection = db.esc</span><br><span class="line">    esc = &#123;</span><br><span class="line">        <span class="string">'标题'</span>: data[<span class="number">0</span>],</span><br><span class="line">        <span class="string">'二手车价格'</span>: data[<span class="number">1</span>],</span><br><span class="line">        <span class="string">'新车指导价'</span>: data[<span class="number">2</span>],</span><br><span class="line">        <span class="string">'车主'</span>: data[<span class="number">3</span>],</span><br><span class="line">        <span class="string">'上牌时间'</span>: data[<span class="number">4</span>],</span><br><span class="line">        <span class="string">'表显里程'</span>: data[<span class="number">5</span>],</span><br><span class="line">        <span class="string">'上牌地'</span>: data[<span class="number">6</span>],</span><br><span class="line">        <span class="string">'排放标准'</span>: data[<span class="number">7</span>],</span><br><span class="line">        <span class="string">'变速箱'</span>: data[<span class="number">8</span>],</span><br><span class="line">        <span class="string">'排量'</span>: data[<span class="number">9</span>],</span><br><span class="line">        <span class="string">'过户次数'</span>: data[<span class="number">10</span>],</span><br><span class="line">        <span class="string">'看车地点'</span>: data[<span class="number">11</span>],</span><br><span class="line">        <span class="string">'年检到期'</span>: data[<span class="number">12</span>],</span><br><span class="line">        <span class="string">'交强险'</span>: data[<span class="number">13</span>],</span><br><span class="line">        <span class="string">'商业险到期'</span>: data[<span class="number">14</span>]</span><br><span class="line">    &#125;</span><br><span class="line">    collection.insert_one(esc)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>, <span class="number">51</span>):</span><br><span class="line">        num = <span class="number">0</span></span><br><span class="line">        print(<span class="string">'正在爬取第'</span> + str(i) + <span class="string">'页数据...'</span>)</span><br><span class="line">        url = <span class="string">'https://www.guazi.com/www/buy/o%sc-1/'</span> % i</span><br><span class="line">        detail_urls = parse_index()</span><br><span class="line">        <span class="keyword">for</span> detail_url <span class="keyword">in</span> detail_urls:</span><br><span class="line">            car_url = <span class="string">'https://www.guazi.com'</span> + detail_url</span><br><span class="line">            car_data = parse_detail(car_url)</span><br><span class="line">            save_data(car_data)</span><br><span class="line">            num += <span class="number">1</span></span><br><span class="line">            print(<span class="string">'第'</span> + str(num) + <span class="string">'条数据爬取完毕！'</span>)</span><br><span class="line">            <span class="comment"># 在3-10秒之间随机暂停</span></span><br><span class="line">            time.sleep(random.randint(<span class="number">3</span>, <span class="number">10</span>))</span><br><span class="line">        print(<span class="string">'第'</span> + str(i) + <span class="string">'页数据爬取完毕！'</span>)</span><br><span class="line">        print(<span class="string">'====================='</span>)</span><br><span class="line">        time.sleep(random.randint(<span class="number">5</span>, <span class="number">60</span>))</span><br><span class="line">    print(<span class="string">'所有数据爬取完毕！'</span>)</span><br></pre></td></tr></table></figure><hr><h1 id="【5x00】数据截图"><a href="#【5x00】数据截图" class="headerlink" title="【5x00】数据截图"></a><font color="#FF0000">【5x00】数据截图</font></h1><p><strong><font color="#1BC3FB">爬取的汽车图片：</font></strong></p><fancybox><br><img src="https://cdn.jsdelivr.net/gh/TRHX/ImageHosting/ITRHX-PIC/A59/02.png" alt="02"><br></fancybox><p><strong><font color="#1BC3FB">储存到 MongoDB 的数据：</font></strong></p><fancybox><br><img src="https://cdn.jsdelivr.net/gh/TRHX/ImageHosting/ITRHX-PIC/A59/03.png" alt="03"><br></fancybox><p><strong><font color="#1BC3FB">数据导出为 CSV 文件：</font></strong></p><fancybox><br><img src="https://cdn.jsdelivr.net/gh/TRHX/ImageHosting/ITRHX-PIC/A59/04.png" alt="04"><br></fancybox><hr><h1 id="【6x00】程序不足的地方"><a href="#【6x00】程序不足的地方" class="headerlink" title="【6x00】程序不足的地方"></a><font color="#FF0000">【6x00】程序不足的地方</font></h1><p>Cookie 过一段时间就会失效，数据还没爬取完就失效了，导致无法继续爬取；爬取效率不高，可以考虑多线程爬取</p>]]></content>
      
      
      <categories>
          
          <category> Python3 学习笔记 </category>
          
          <category> 爬虫实战 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 爬虫 </tag>
            
            <tag> 瓜子二手车 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python3 爬虫实战 — 58同城武汉出租房【加密字体对抗】</title>
      <link href="/2019/10/21/A58-pyspider-58tongcheng/"/>
      <url>/2019/10/21/A58-pyspider-58tongcheng/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><blockquote><p>爬取时间：2019-10-21<br>爬取难度：★★★☆☆☆<br>请求链接：<a href="https://wh.58.com/chuzu/" target="_blank" rel="noopener">https://wh.58.com/chuzu/</a><br>爬取目标：58同城武汉出租房的所有信息<br>涉及知识：网站加密字体的攻克、请求库 requests、解析库 Beautiful Soup、数据库 MySQL 的操作<br>完整代码：<a href="https://github.com/TRHX/Python3-Spider-Practice/tree/master/58tongcheng" target="_blank" rel="noopener">https://github.com/TRHX/Python3-Spider-Practice/tree/master/58tongcheng</a><br>其他爬虫实战代码合集（持续更新）：<a href="https://github.com/TRHX/Python3-Spider-Practice" target="_blank" rel="noopener">https://github.com/TRHX/Python3-Spider-Practice</a><br>爬虫实战专栏（持续更新）：<a href="https://itrhx.blog.csdn.net/article/category/9351278" target="_blank" rel="noopener">https://itrhx.blog.csdn.net/article/category/9351278</a></p></blockquote><hr><a id="more"></a><h1 id="【1x00】加密字体攻克思路"><a href="#【1x00】加密字体攻克思路" class="headerlink" title="【1x00】加密字体攻克思路"></a><font color="#ff0000">【1x00】加密字体攻克思路</font></h1><p>F12 打开调试模板，通过页面分析，可以观察到，网站里面凡是涉及到有数字的地方，都是显示为乱码，这种情况就是字体加密了，那么是通过什么手段实现字体加密的呢？</p><p>CSS 中有一个 <code>@font-face</code> 规则，它允许为网页指定在线字体，也就是说可以引入自定义字体，这个规则本意是用来消除对电脑字体的依赖，现在不少网站也利用这个规则来实现反爬</p><p>右侧可以看到网站用的字体，其他的都是常见的微软雅黑，宋体等，但是有一个特殊的：<code>fangchan-secret</code> ，不难看出这应该就是58同城的自定义字体了</p><fancybox><br><img src="https://cdn.jsdelivr.net/gh/TRHX/ImageHosting/ITRHX-PIC/A58/01.png" alt="01"><br></fancybox><p>我们通过控制台看到的乱码事实上是由于 unicode 编码导致，查看网页源代码，我们才能看到他真正的编码信息</p><fancybox><br><img src="https://cdn.jsdelivr.net/gh/TRHX/ImageHosting/ITRHX-PIC/A58/02.png" alt="02"><br></fancybox><p>要攻克加密字体，那么我们肯定要分析他的字体文件了，先想办法得到他的加密字体文件，同样查看源代码，在源代码中搜索 <code>fangchan-secret</code> 的字体信息</p><fancybox><br><img src="https://cdn.jsdelivr.net/gh/TRHX/ImageHosting/ITRHX-PIC/A58/03.png" alt="03"><br></fancybox><p>选中的蓝色部分就是 base64 编码的加密字体字符串了，我们将其解码成二进制编码，写进 <code>.woff</code> 的字体文件，这个过程可以通过以下代码实现：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"></span><br><span class="line">headers = &#123;</span><br><span class="line">    <span class="string">'User-Agent'</span>: <span class="string">'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/75.0.3770.142 Safari/537.36'</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">url = <span class="string">'https://wh.58.com/chuzu/'</span></span><br><span class="line"></span><br><span class="line">response = requests.get(url=url, headers=headers)</span><br><span class="line"><span class="comment"># 匹配 base64 编码的加密字体字符串</span></span><br><span class="line">base64_string = response.text.split(<span class="string">"base64,"</span>)[<span class="number">1</span>].split(<span class="string">"'"</span>)[<span class="number">0</span>].strip()</span><br><span class="line"><span class="comment"># 将 base64 编码的字体字符串解码成二进制编码</span></span><br><span class="line">bin_data = base64.decodebytes(base64_string.encode())</span><br><span class="line"><span class="comment"># 保存为字体文件</span></span><br><span class="line"><span class="keyword">with</span> open(<span class="string">'58font.woff'</span>, <span class="string">'wb'</span>) <span class="keyword">as</span> f:</span><br><span class="line">    f.write(bin_data)</span><br></pre></td></tr></table></figure><p>得到字体文件后，我们可以通过 <font color="#ff0000">FontCreator</font> 这个软件来看看字体对应的编码是什么：</p><fancybox><br><img src="https://cdn.jsdelivr.net/gh/TRHX/ImageHosting/ITRHX-PIC/A58/04.png" alt="04"><br></fancybox><p>观察我们在网页源代码中看到的编码：类似于 <code>&amp;#x9fa4;</code>、<code>&amp;#x9f92;</code></p><p>对比字体文件对应的编码：类似于 <code>uni9FA4</code>、<code>nui9F92</code></p><p>可以看到除了前面三个字符不一样以外，后面的字符都是一样的，只不过英文大小写有所差异</p><p>现在我们可能会想到，直接把编码替换成对应的数字不就OK了？然而并没有这么简单</p><p>尝试刷新一下网页，可以观察到 base64 编码的加密字体字符串会改变，也就是说编码和数字并不是一一对应的，再次获取几个字体文件，通过对比就可以看出来</p><fancybox><br><img src="https://cdn.jsdelivr.net/gh/TRHX/ImageHosting/ITRHX-PIC/A58/05.png" alt="05"><br></fancybox><p>可以看到，虽然每次数字对应的编码都不一样，但是编码总是这10个，是不变的，那么编码与数字之间肯定存在某种对应关系，，我们可以将字体文件转换为 xml 文件来观察其中的对应关系，改进原来的代码即可实现转换功能：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"><span class="keyword">from</span> fontTools.ttLib <span class="keyword">import</span> TTFont</span><br><span class="line"></span><br><span class="line">headers = &#123;</span><br><span class="line">    <span class="string">'User-Agent'</span>: <span class="string">'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/75.0.3770.142 Safari/537.36'</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">url = <span class="string">'https://wh.58.com/chuzu/'</span></span><br><span class="line"></span><br><span class="line">response = requests.get(url=url, headers=headers)</span><br><span class="line"><span class="comment"># 匹配 base64 编码的加密字体字符串</span></span><br><span class="line">base64_string = response.text.split(<span class="string">"base64,"</span>)[<span class="number">1</span>].split(<span class="string">"'"</span>)[<span class="number">0</span>].strip()</span><br><span class="line"><span class="comment"># 将 base64 编码的字体字符串解码成二进制编码</span></span><br><span class="line">bin_data = base64.decodebytes(base64_string.encode())</span><br><span class="line"><span class="comment"># 保存为字体文件</span></span><br><span class="line"><span class="keyword">with</span> open(<span class="string">'58font.woff'</span>, <span class="string">'wb'</span>) <span class="keyword">as</span> f:</span><br><span class="line">    f.write(bin_data)</span><br><span class="line"><span class="comment"># 获取字体文件，将其转换为xml文件</span></span><br><span class="line">font = TTFont(<span class="string">'58font.woff'</span>)</span><br><span class="line">font.saveXML(<span class="string">'58font.xml'</span>)</span><br></pre></td></tr></table></figure><p>打开 <code>58font.xml</code> 文件并分析，在 <code>&lt;cmap&gt;</code> 标签内可以看到熟悉的类似于 <code>0x9476</code>、<code>0x958f</code> 的编码，其后四位字符恰好是网页字体的加密编码，可以看到每一个编码后面都对应了一个 <code>glyph</code> 开头的编码</p><p>将其与 <code>58font.woff</code> 文件对比，可以看到 code 为 <code>0x958f</code> 这个编码对应的是数字 <code>3</code>，对应的 name 编码是 <code>glyph00004</code></p><fancybox><br><img src="https://cdn.jsdelivr.net/gh/TRHX/ImageHosting/ITRHX-PIC/A58/06.png" alt="06"><br></fancybox><p>我们再次获取一个字体文件作为对比分析</p><fancybox><br><img src="https://cdn.jsdelivr.net/gh/TRHX/ImageHosting/ITRHX-PIC/A58/07.png" alt="07"><br></fancybox><p>依然是 <code>0x958f</code> 这个编码，两次对应的 name 分别是 <code>glyph00004</code> 和 <code>glyph00007</code>，两次对应的数字分别是 <code>3</code> 和 <code>6</code>，那么结论就来了，每次发送请求，code 对应的 name 会随机发生变化，而 name 对应的数字不会发生变化，<code>glyph00001</code> 对应数字 <code>0</code>、<code>glyph00002</code> 对应数字 <code>1</code>，以此类推</p><p>那么以 <code>glyph</code> 开头的编码是如何对应相应的数字的呢？在 xml 文件里面，每个编码都有一个 <code>TTGlyph</code> 的标签，标签里面是一行一行的类似于 x,y 坐标的东西，这个其实就是用来绘制字体的，用 matplotlib 根据坐标画个图，就可以看到是一个数字</p><fancybox><br><img src="https://cdn.jsdelivr.net/gh/TRHX/ImageHosting/ITRHX-PIC/A58/08.png" alt="08"><br></fancybox><p>此时，我们就知道了编码与数字的对应关系，下一步，我们可以查找 xml 文件里，编码对应的 name 的值，也就是以 <code>glyph</code> 开头的编码，然后返回其对应的数字，再替换掉网页源代码里的编码，就能成功获取到我们需要的信息了！</p><p>总结一下攻克加密字体的大致思路：</p><ul><li><p>分析网页，找到对应的加密字体文件</p></li><li><p>如果引用的加密字体是一个 base64 编码的字符串，则需要转换成二进制并保存到 woff 字体文件中</p></li><li><p>将字体文件转换成 xml 文件</p></li><li><p>用 FontCreator 软件观察字体文件，结合 xml 文件，分析其编码与真实字体的关系</p></li><li><p>搞清楚编码与字体的关系后，想办法将编码替换成正常字体 </p></li></ul><hr><h1 id="【2x00】思维导图"><a href="#【2x00】思维导图" class="headerlink" title="【2x00】思维导图"></a><font color="#ff0000">【2x00】思维导图</font></h1><fancybox><br><img src="https://cdn.jsdelivr.net/gh/TRHX/ImageHosting/ITRHX-PIC/A58/09.png" alt="09"><br></fancybox><hr><h1 id="【3x00】加密字体处理模块"><a href="#【3x00】加密字体处理模块" class="headerlink" title="【3x00】加密字体处理模块"></a><font color="#ff0000">【3x00】加密字体处理模块</font></h1><h2 id="【3x01】获取字体文件并转换为xml文件"><a href="#【3x01】获取字体文件并转换为xml文件" class="headerlink" title="【3x01】获取字体文件并转换为xml文件"></a><font color="#1BC3FB">【3x01】获取字体文件并转换为xml文件</font></h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_font</span><span class="params">(page_url, page_num)</span>:</span></span><br><span class="line">    response = requests.get(url=page_url, headers=headers)</span><br><span class="line">    <span class="comment"># 匹配 base64 编码的加密字体字符串</span></span><br><span class="line">    base64_string = response.text.split(<span class="string">"base64,"</span>)[<span class="number">1</span>].split(<span class="string">"'"</span>)[<span class="number">0</span>].strip()</span><br><span class="line">    <span class="comment"># print(base64_string)</span></span><br><span class="line">    <span class="comment"># 将 base64 编码的字体字符串解码成二进制编码</span></span><br><span class="line">    bin_data = base64.decodebytes(base64_string.encode())</span><br><span class="line">    <span class="comment"># 保存为字体文件</span></span><br><span class="line">    <span class="keyword">with</span> open(<span class="string">'58font.woff'</span>, <span class="string">'wb'</span>) <span class="keyword">as</span> f:</span><br><span class="line">        f.write(bin_data)</span><br><span class="line">    print(<span class="string">'第'</span> + str(page_num) + <span class="string">'次访问网页，字体文件保存成功！'</span>)</span><br><span class="line">    <span class="comment"># 获取字体文件，将其转换为xml文件</span></span><br><span class="line">    font = TTFont(<span class="string">'58font.woff'</span>)</span><br><span class="line">    font.saveXML(<span class="string">'58font.xml'</span>)</span><br><span class="line">    print(<span class="string">'已成功将字体文件转换为xml文件！'</span>)</span><br><span class="line">    <span class="keyword">return</span> response.text</span><br></pre></td></tr></table></figure><p>由主函数传入要发送请求的 url，利用字符串的 <code>split()</code> 方法，匹配 base64 编码的加密字体字符串，利用 <code>base64</code> 模块的 <code>base64.decodebytes()</code> 方法，将 base64 编码的字体字符串解码成二进制编码并保存为字体文件，利用 <code>FontTools</code> 库，将字体文件转换为 xml 文件</p><hr><h2 id="【3x02】将加密字体编码与真实字体进行匹配"><a href="#【3x02】将加密字体编码与真实字体进行匹配" class="headerlink" title="【3x02】将加密字体编码与真实字体进行匹配"></a><font color="#1BC3FB">【3x02】将加密字体编码与真实字体进行匹配</font></h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">find_font</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="comment"># 以glyph开头的编码对应的数字</span></span><br><span class="line">    glyph_list = &#123;</span><br><span class="line">        <span class="string">'glyph00001'</span>: <span class="string">'0'</span>,</span><br><span class="line">        <span class="string">'glyph00002'</span>: <span class="string">'1'</span>,</span><br><span class="line">        <span class="string">'glyph00003'</span>: <span class="string">'2'</span>,</span><br><span class="line">        <span class="string">'glyph00004'</span>: <span class="string">'3'</span>,</span><br><span class="line">        <span class="string">'glyph00005'</span>: <span class="string">'4'</span>,</span><br><span class="line">        <span class="string">'glyph00006'</span>: <span class="string">'5'</span>,</span><br><span class="line">        <span class="string">'glyph00007'</span>: <span class="string">'6'</span>,</span><br><span class="line">        <span class="string">'glyph00008'</span>: <span class="string">'7'</span>,</span><br><span class="line">        <span class="string">'glyph00009'</span>: <span class="string">'8'</span>,</span><br><span class="line">        <span class="string">'glyph00010'</span>: <span class="string">'9'</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment"># 十个加密字体编码</span></span><br><span class="line">    unicode_list = [<span class="string">'0x9476'</span>, <span class="string">'0x958f'</span>, <span class="string">'0x993c'</span>, <span class="string">'0x9a4b'</span>, <span class="string">'0x9e3a'</span>, <span class="string">'0x9ea3'</span>, <span class="string">'0x9f64'</span>, <span class="string">'0x9f92'</span>, <span class="string">'0x9fa4'</span>, <span class="string">'0x9fa5'</span>]</span><br><span class="line">    num_list = []</span><br><span class="line">    <span class="comment"># 利用xpath语法匹配xml文件内容</span></span><br><span class="line">    font_data = etree.parse(<span class="string">'./58font.xml'</span>)</span><br><span class="line">    <span class="keyword">for</span> unicode <span class="keyword">in</span> unicode_list:</span><br><span class="line">        <span class="comment"># 依次循环查找xml文件里code对应的name</span></span><br><span class="line">        result = font_data.xpath(<span class="string">"//cmap//map[@code='&#123;&#125;']/@name"</span>.format(unicode))[<span class="number">0</span>]</span><br><span class="line">        <span class="comment"># print(result)</span></span><br><span class="line">        <span class="comment"># 循环字典的key，如果code对应的name与字典的key相同，则得到key对应的value</span></span><br><span class="line">        <span class="keyword">for</span> key <span class="keyword">in</span> glyph_list.keys():</span><br><span class="line">            <span class="keyword">if</span> key == result:</span><br><span class="line">                num_list.append(glyph_list[key])</span><br><span class="line">    print(<span class="string">'已成功找到编码所对应的数字！'</span>)</span><br><span class="line">    <span class="comment"># print(num_list)</span></span><br><span class="line">    <span class="comment"># 返回value列表</span></span><br><span class="line">    <span class="keyword">return</span> num_list</span><br></pre></td></tr></table></figure><p>由前面的分析，我们知道 name 的值（即以 glyph 开头的编码）对应的数字是固定的，<code>glyph00001</code> 对应数字 <code>0</code>、<code>glyph00002</code> 对应数字 <code>1</code>，以此类推，所以可以将其构造成为一个字典 <code>glyph_list</code></p><p>同样将十个 code（即类似于 <code>0x9476</code> 的加密字体编码）构造成一个列表</p><p>循环查找这十个 <code>code</code> 在 xml 文件里对应的 <code>name</code> 的值，然后将 <code>name</code> 的值与字典文件的 <code>key</code> 值进行对比，如果两者值相同，则获取这个 <code>key</code> 的 <code>value</code> 值，最终得到的列表 <code>num_list</code>，里面的元素就是 <code>unicode_list</code> 列表里面每个加密字体的真实值</p><hr><h2 id="【3x03】替换掉网页中所有的加密字体编码"><a href="#【3x03】替换掉网页中所有的加密字体编码" class="headerlink" title="【3x03】替换掉网页中所有的加密字体编码"></a><font color="#1BC3FB">【3x03】替换掉网页中所有的加密字体编码</font></h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">replace_font</span><span class="params">(num, page_response)</span>:</span></span><br><span class="line">    <span class="comment"># 9476 958F 993C 9A4B 9E3A 9EA3 9F64 9F92 9FA4 9FA5</span></span><br><span class="line">    result = page_response.replace(<span class="string">'&amp;#x9476;'</span>, num[<span class="number">0</span>]).replace(<span class="string">'&amp;#x958f;'</span>, num[<span class="number">1</span>]).replace(<span class="string">'&amp;#x993c;'</span>, num[<span class="number">2</span>]).replace(<span class="string">'&amp;#x9a4b;'</span>, num[<span class="number">3</span>]).replace(<span class="string">'&amp;#x9e3a;'</span>, num[<span class="number">4</span>]).replace(<span class="string">'&amp;#x9ea3;'</span>, num[<span class="number">5</span>]).replace(<span class="string">'&amp;#x9f64;'</span>, num[<span class="number">6</span>]).replace(<span class="string">'&amp;#x9f92;'</span>, num[<span class="number">7</span>]).replace(<span class="string">'&amp;#x9fa4;'</span>, num[<span class="number">8</span>]).replace(<span class="string">'&amp;#x9fa5;'</span>, num[<span class="number">9</span>])</span><br><span class="line">    print(<span class="string">'已成功将所有加密字体替换！'</span>)</span><br><span class="line">    <span class="keyword">return</span> result</span><br></pre></td></tr></table></figure><p>传入由上一步 <code>find_font()</code> 函数得到的真实字体的列表，利用 <code>replace()</code> 方法，依次将十个加密字体编码替换掉</p><hr><h1 id="【4x00】租房信息提取模块"><a href="#【4x00】租房信息提取模块" class="headerlink" title="【4x00】租房信息提取模块"></a><font color="#FF0000">【4x00】租房信息提取模块</font></h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">parse_pages</span><span class="params">(pages)</span>:</span></span><br><span class="line">    num = <span class="number">0</span></span><br><span class="line">    soup = BeautifulSoup(pages, <span class="string">'lxml'</span>)</span><br><span class="line">    <span class="comment"># 查找到包含所有租房的li标签</span></span><br><span class="line">    all_house = soup.find_all(<span class="string">'li'</span>, class_=<span class="string">'house-cell'</span>)</span><br><span class="line">    <span class="keyword">for</span> house <span class="keyword">in</span> all_house:</span><br><span class="line">        <span class="comment"># 标题</span></span><br><span class="line">        title = house.find(<span class="string">'a'</span>, class_=<span class="string">'strongbox'</span>).text.strip()</span><br><span class="line">        <span class="comment"># print(title)</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># 价格</span></span><br><span class="line">        price = house.find(<span class="string">'div'</span>, class_=<span class="string">'money'</span>).text.strip()</span><br><span class="line">        <span class="comment"># print(price)</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># 户型和面积</span></span><br><span class="line">        layout = house.find(<span class="string">'p'</span>, class_=<span class="string">'room'</span>).text.replace(<span class="string">' '</span>, <span class="string">''</span>)</span><br><span class="line">        <span class="comment"># print(layout)</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># 楼盘和地址</span></span><br><span class="line">        address = house.find(<span class="string">'p'</span>, class_=<span class="string">'infor'</span>).text.replace(<span class="string">' '</span>, <span class="string">''</span>).replace(<span class="string">'\n'</span>, <span class="string">''</span>)</span><br><span class="line">        <span class="comment"># print(address)</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># 如果存在经纪人</span></span><br><span class="line">        <span class="keyword">if</span> house.find(<span class="string">'div'</span>, class_=<span class="string">'jjr'</span>):</span><br><span class="line">            agent = house.find(<span class="string">'div'</span>, class_=<span class="string">'jjr'</span>).text.replace(<span class="string">' '</span>, <span class="string">''</span>).replace(<span class="string">'\n'</span>, <span class="string">''</span>)</span><br><span class="line">        <span class="comment"># 如果存在品牌公寓</span></span><br><span class="line">        <span class="keyword">elif</span> house.find(<span class="string">'p'</span>, class_=<span class="string">'gongyu'</span>):</span><br><span class="line">            agent = house.find(<span class="string">'p'</span>, class_=<span class="string">'gongyu'</span>).text.replace(<span class="string">' '</span>, <span class="string">''</span>).replace(<span class="string">'\n'</span>, <span class="string">''</span>)</span><br><span class="line">        <span class="comment"># 如果存在个人房源</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            agent = house.find(<span class="string">'p'</span>, class_=<span class="string">'geren'</span>).text.replace(<span class="string">' '</span>, <span class="string">''</span>).replace(<span class="string">'\n'</span>, <span class="string">''</span>)</span><br><span class="line">        <span class="comment"># print(agent)</span></span><br><span class="line"></span><br><span class="line">        data = [title, price, layout, address, agent]</span><br><span class="line">        save_to_mysql(data)</span><br><span class="line">        num += <span class="number">1</span></span><br><span class="line">        print(<span class="string">'第'</span> + str(num) + <span class="string">'条数据爬取完毕，暂停3秒！'</span>)</span><br><span class="line">        time.sleep(<span class="number">3</span>)</span><br></pre></td></tr></table></figure><p>利用 BeautifulSoup 解析库很容易提取到相关信息，这里要注意的是，租房信息来源分为三种：经纪人、品牌公寓和个人房源，这三个的元素节点也不一样，因此匹配的时候要注意</p><fancybox><br><img src="https://cdn.jsdelivr.net/gh/TRHX/ImageHosting/ITRHX-PIC/A58/10.png" alt="10"><br></fancybox><hr><h1 id="【5x00】MySQL数据储存模块"><a href="#【5x00】MySQL数据储存模块" class="headerlink" title="【5x00】MySQL数据储存模块"></a><font color="#FF0000">【5x00】MySQL数据储存模块</font></h1><h2 id="【5x01】创建MySQL数据库的表"><a href="#【5x01】创建MySQL数据库的表" class="headerlink" title="【5x01】创建MySQL数据库的表"></a><font color="#1BC3FB">【5x01】创建MySQL数据库的表</font></h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">create_mysql_table</span><span class="params">()</span>:</span></span><br><span class="line">    db = pymysql.connect(host=<span class="string">'localhost'</span>, user=<span class="string">'root'</span>, password=<span class="string">'000000'</span>, port=<span class="number">3306</span>, db=<span class="string">'58tc_spiders'</span>)</span><br><span class="line">    cursor = db.cursor()</span><br><span class="line">    sql = <span class="string">'CREATE TABLE IF NOT EXISTS 58tc_data (title VARCHAR(255) NOT NULL, price VARCHAR(255) NOT NULL, layout VARCHAR(255) NOT NULL, address VARCHAR(255) NOT NULL, agent VARCHAR(255) NOT NULL)'</span></span><br><span class="line">    cursor.execute(sql)</span><br><span class="line">    db.close()</span><br></pre></td></tr></table></figure><p>首先指定数据库为 58tc_spiders，需要事先使用 MySQL 语句创建，也可以通过 MySQL Workbench 手动创建</p><p>然后使用 SQL 语句创建 一个表：58tc_data，表中包含 title、price、layout、address、agent 五个字段，类型都为 varchar</p><p>此创建表的操作也可以事先手动创建，手动创建后就不需要此函数了</p><hr><h2 id="【5x02】将数据储存到MySQL数据库"><a href="#【5x02】将数据储存到MySQL数据库" class="headerlink" title="【5x02】将数据储存到MySQL数据库"></a><font color="#1BC3FB">【5x02】将数据储存到MySQL数据库</font></h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">save_to_mysql</span><span class="params">(data)</span>:</span></span><br><span class="line">    db = pymysql.connect(host=<span class="string">'localhost'</span>, user=<span class="string">'root'</span>, password=<span class="string">'000000'</span>, port=<span class="number">3306</span>, db=<span class="string">'58tc_spiders'</span>)</span><br><span class="line">    cursor = db.cursor()</span><br><span class="line">    sql = <span class="string">'INSERT INTO 58tc_data(title, price, layout, address, agent) values(%s, %s, %s, %s, %s)'</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        cursor.execute(sql, (data[<span class="number">0</span>], data[<span class="number">1</span>], data[<span class="number">2</span>], data[<span class="number">3</span>], data[<span class="number">4</span>]))</span><br><span class="line">        db.commit()</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        db.rollback()</span><br><span class="line">    db.close()</span><br></pre></td></tr></table></figure><p><code>commit()</code> 方法的作用是实现数据插入，是真正将语句提交到数据库执行的方法，使用 <code>try except</code> 语句实现异常处理，如果执行失败，则调用 <code>rollback()</code> 方法执行数据回滚，保证原数据不被破坏</p><hr><h1 id="【6x00】完整代码"><a href="#【6x00】完整代码" class="headerlink" title="【6x00】完整代码"></a><font color="#FF0000">【6x00】完整代码</font></h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># =============================================</span></span><br><span class="line"><span class="comment"># --*-- coding: utf-8 --*--</span></span><br><span class="line"><span class="comment"># @Time    : 2019-10-21</span></span><br><span class="line"><span class="comment"># @Author  : TRHX</span></span><br><span class="line"><span class="comment"># @Blog    : www.itrhx.com</span></span><br><span class="line"><span class="comment"># @CSDN    : https://blog.csdn.net/qq_36759224</span></span><br><span class="line"><span class="comment"># @FileName: 58tongcheng.py</span></span><br><span class="line"><span class="comment"># @Software: PyCharm</span></span><br><span class="line"><span class="comment"># =============================================</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"><span class="keyword">import</span> pymysql</span><br><span class="line"><span class="keyword">from</span> lxml <span class="keyword">import</span> etree</span><br><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line"><span class="keyword">from</span> fontTools.ttLib <span class="keyword">import</span> TTFont</span><br><span class="line"></span><br><span class="line">headers = &#123;</span><br><span class="line">    <span class="string">'User-Agent'</span>: <span class="string">'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/75.0.3770.142 Safari/537.36'</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取字体文件并转换为xml文件</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_font</span><span class="params">(page_url, page_num)</span>:</span></span><br><span class="line">    response = requests.get(url=page_url, headers=headers)</span><br><span class="line">    <span class="comment"># 匹配 base64 编码的加密字体字符串</span></span><br><span class="line">    base64_string = response.text.split(<span class="string">"base64,"</span>)[<span class="number">1</span>].split(<span class="string">"'"</span>)[<span class="number">0</span>].strip()</span><br><span class="line">    <span class="comment"># print(base64_string)</span></span><br><span class="line">    <span class="comment"># 将 base64 编码的字体字符串解码成二进制编码</span></span><br><span class="line">    bin_data = base64.decodebytes(base64_string.encode())</span><br><span class="line">    <span class="comment"># 保存为字体文件</span></span><br><span class="line">    <span class="keyword">with</span> open(<span class="string">'58font.woff'</span>, <span class="string">'wb'</span>) <span class="keyword">as</span> f:</span><br><span class="line">        f.write(bin_data)</span><br><span class="line">    print(<span class="string">'第'</span> + str(page_num) + <span class="string">'次访问网页，字体文件保存成功！'</span>)</span><br><span class="line">    <span class="comment"># 获取字体文件，将其转换为xml文件</span></span><br><span class="line">    font = TTFont(<span class="string">'58font.woff'</span>)</span><br><span class="line">    font.saveXML(<span class="string">'58font.xml'</span>)</span><br><span class="line">    print(<span class="string">'已成功将字体文件转换为xml文件！'</span>)</span><br><span class="line">    <span class="keyword">return</span> response.text</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 将加密字体编码与真实字体进行匹配</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">find_font</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="comment"># 以glyph开头的编码对应的数字</span></span><br><span class="line">    glyph_list = &#123;</span><br><span class="line">        <span class="string">'glyph00001'</span>: <span class="string">'0'</span>,</span><br><span class="line">        <span class="string">'glyph00002'</span>: <span class="string">'1'</span>,</span><br><span class="line">        <span class="string">'glyph00003'</span>: <span class="string">'2'</span>,</span><br><span class="line">        <span class="string">'glyph00004'</span>: <span class="string">'3'</span>,</span><br><span class="line">        <span class="string">'glyph00005'</span>: <span class="string">'4'</span>,</span><br><span class="line">        <span class="string">'glyph00006'</span>: <span class="string">'5'</span>,</span><br><span class="line">        <span class="string">'glyph00007'</span>: <span class="string">'6'</span>,</span><br><span class="line">        <span class="string">'glyph00008'</span>: <span class="string">'7'</span>,</span><br><span class="line">        <span class="string">'glyph00009'</span>: <span class="string">'8'</span>,</span><br><span class="line">        <span class="string">'glyph00010'</span>: <span class="string">'9'</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment"># 十个加密字体编码</span></span><br><span class="line">    unicode_list = [<span class="string">'0x9476'</span>, <span class="string">'0x958f'</span>, <span class="string">'0x993c'</span>, <span class="string">'0x9a4b'</span>, <span class="string">'0x9e3a'</span>, <span class="string">'0x9ea3'</span>, <span class="string">'0x9f64'</span>, <span class="string">'0x9f92'</span>, <span class="string">'0x9fa4'</span>, <span class="string">'0x9fa5'</span>]</span><br><span class="line">    num_list = []</span><br><span class="line">    <span class="comment"># 利用xpath语法匹配xml文件内容</span></span><br><span class="line">    font_data = etree.parse(<span class="string">'./58font.xml'</span>)</span><br><span class="line">    <span class="keyword">for</span> unicode <span class="keyword">in</span> unicode_list:</span><br><span class="line">        <span class="comment"># 依次循环查找xml文件里code对应的name</span></span><br><span class="line">        result = font_data.xpath(<span class="string">"//cmap//map[@code='&#123;&#125;']/@name"</span>.format(unicode))[<span class="number">0</span>]</span><br><span class="line">        <span class="comment"># print(result)</span></span><br><span class="line">        <span class="comment"># 循环字典的key，如果code对应的name与字典的key相同，则得到key对应的value</span></span><br><span class="line">        <span class="keyword">for</span> key <span class="keyword">in</span> glyph_list.keys():</span><br><span class="line">            <span class="keyword">if</span> key == result:</span><br><span class="line">                num_list.append(glyph_list[key])</span><br><span class="line">    print(<span class="string">'已成功找到编码所对应的数字！'</span>)</span><br><span class="line">    <span class="comment"># print(num_list)</span></span><br><span class="line">    <span class="comment"># 返回value列表</span></span><br><span class="line">    <span class="keyword">return</span> num_list</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 替换掉网页中所有的加密字体编码</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">replace_font</span><span class="params">(num, page_response)</span>:</span></span><br><span class="line">    <span class="comment"># 9476 958F 993C 9A4B 9E3A 9EA3 9F64 9F92 9FA4 9FA5</span></span><br><span class="line">    result = page_response.replace(<span class="string">'&amp;#x9476;'</span>, num[<span class="number">0</span>]).replace(<span class="string">'&amp;#x958f;'</span>, num[<span class="number">1</span>]).replace(<span class="string">'&amp;#x993c;'</span>, num[<span class="number">2</span>]).replace(<span class="string">'&amp;#x9a4b;'</span>, num[<span class="number">3</span>]).replace(<span class="string">'&amp;#x9e3a;'</span>, num[<span class="number">4</span>]).replace(<span class="string">'&amp;#x9ea3;'</span>, num[<span class="number">5</span>]).replace(<span class="string">'&amp;#x9f64;'</span>, num[<span class="number">6</span>]).replace(<span class="string">'&amp;#x9f92;'</span>, num[<span class="number">7</span>]).replace(<span class="string">'&amp;#x9fa4;'</span>, num[<span class="number">8</span>]).replace(<span class="string">'&amp;#x9fa5;'</span>, num[<span class="number">9</span>])</span><br><span class="line">    print(<span class="string">'已成功将所有加密字体替换！'</span>)</span><br><span class="line">    <span class="keyword">return</span> result</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 提取租房信息</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">parse_pages</span><span class="params">(pages)</span>:</span></span><br><span class="line">    num = <span class="number">0</span></span><br><span class="line">    soup = BeautifulSoup(pages, <span class="string">'lxml'</span>)</span><br><span class="line">    <span class="comment"># 查找到包含所有租房的li标签</span></span><br><span class="line">    all_house = soup.find_all(<span class="string">'li'</span>, class_=<span class="string">'house-cell'</span>)</span><br><span class="line">    <span class="keyword">for</span> house <span class="keyword">in</span> all_house:</span><br><span class="line">        <span class="comment"># 标题</span></span><br><span class="line">        title = house.find(<span class="string">'a'</span>, class_=<span class="string">'strongbox'</span>).text.strip()</span><br><span class="line">        <span class="comment"># print(title)</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># 价格</span></span><br><span class="line">        price = house.find(<span class="string">'div'</span>, class_=<span class="string">'money'</span>).text.strip()</span><br><span class="line">        <span class="comment"># print(price)</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># 户型和面积</span></span><br><span class="line">        layout = house.find(<span class="string">'p'</span>, class_=<span class="string">'room'</span>).text.replace(<span class="string">' '</span>, <span class="string">''</span>)</span><br><span class="line">        <span class="comment"># print(layout)</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># 楼盘和地址</span></span><br><span class="line">        address = house.find(<span class="string">'p'</span>, class_=<span class="string">'infor'</span>).text.replace(<span class="string">' '</span>, <span class="string">''</span>).replace(<span class="string">'\n'</span>, <span class="string">''</span>)</span><br><span class="line">        <span class="comment"># print(address)</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># 如果存在经纪人</span></span><br><span class="line">        <span class="keyword">if</span> house.find(<span class="string">'div'</span>, class_=<span class="string">'jjr'</span>):</span><br><span class="line">            agent = house.find(<span class="string">'div'</span>, class_=<span class="string">'jjr'</span>).text.replace(<span class="string">' '</span>, <span class="string">''</span>).replace(<span class="string">'\n'</span>, <span class="string">''</span>)</span><br><span class="line">        <span class="comment"># 如果存在品牌公寓</span></span><br><span class="line">        <span class="keyword">elif</span> house.find(<span class="string">'p'</span>, class_=<span class="string">'gongyu'</span>):</span><br><span class="line">            agent = house.find(<span class="string">'p'</span>, class_=<span class="string">'gongyu'</span>).text.replace(<span class="string">' '</span>, <span class="string">''</span>).replace(<span class="string">'\n'</span>, <span class="string">''</span>)</span><br><span class="line">        <span class="comment"># 如果存在个人房源</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            agent = house.find(<span class="string">'p'</span>, class_=<span class="string">'geren'</span>).text.replace(<span class="string">' '</span>, <span class="string">''</span>).replace(<span class="string">'\n'</span>, <span class="string">''</span>)</span><br><span class="line">        <span class="comment"># print(agent)</span></span><br><span class="line"></span><br><span class="line">        data = [title, price, layout, address, agent]</span><br><span class="line">        save_to_mysql(data)</span><br><span class="line">        num += <span class="number">1</span></span><br><span class="line">        print(<span class="string">'第'</span> + str(num) + <span class="string">'条数据爬取完毕，暂停3秒！'</span>)</span><br><span class="line">        time.sleep(<span class="number">3</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建MySQL数据库的表：58tc_data</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">create_mysql_table</span><span class="params">()</span>:</span></span><br><span class="line">    db = pymysql.connect(host=<span class="string">'localhost'</span>, user=<span class="string">'root'</span>, password=<span class="string">'000000'</span>, port=<span class="number">3306</span>, db=<span class="string">'58tc_spiders'</span>)</span><br><span class="line">    cursor = db.cursor()</span><br><span class="line">    sql = <span class="string">'CREATE TABLE IF NOT EXISTS 58tc_data (title VARCHAR(255) NOT NULL, price VARCHAR(255) NOT NULL, layout VARCHAR(255) NOT NULL, address VARCHAR(255) NOT NULL, agent VARCHAR(255) NOT NULL)'</span></span><br><span class="line">    cursor.execute(sql)</span><br><span class="line">    db.close()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 将数据储存到MySQL数据库</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">save_to_mysql</span><span class="params">(data)</span>:</span></span><br><span class="line">    db = pymysql.connect(host=<span class="string">'localhost'</span>, user=<span class="string">'root'</span>, password=<span class="string">'000000'</span>, port=<span class="number">3306</span>, db=<span class="string">'58tc_spiders'</span>)</span><br><span class="line">    cursor = db.cursor()</span><br><span class="line">    sql = <span class="string">'INSERT INTO 58tc_data(title, price, layout, address, agent) values(%s, %s, %s, %s, %s)'</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        cursor.execute(sql, (data[<span class="number">0</span>], data[<span class="number">1</span>], data[<span class="number">2</span>], data[<span class="number">3</span>], data[<span class="number">4</span>]))</span><br><span class="line">        db.commit()</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        db.rollback()</span><br><span class="line">    db.close()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    create_mysql_table()</span><br><span class="line">    print(<span class="string">'MySQL表58tc_data创建成功！'</span>)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>, <span class="number">71</span>):</span><br><span class="line">        url = <span class="string">'https://wh.58.com/chuzu/pn'</span> + str(i) + <span class="string">'/'</span></span><br><span class="line">        response = get_font(url, i)</span><br><span class="line">        num_list = find_font()</span><br><span class="line">        pro_pages = replace_font(num_list, response)</span><br><span class="line">        parse_pages(pro_pages)</span><br><span class="line">        print(<span class="string">'第'</span> + str(i) + <span class="string">'页数据爬取完毕！'</span>)</span><br><span class="line">        time.sleep(random.randint(<span class="number">3</span>, <span class="number">60</span>))</span><br><span class="line">    print(<span class="string">'所有数据爬取完毕！'</span>)</span><br></pre></td></tr></table></figure><hr><h1 id="【7x00】数据截图"><a href="#【7x00】数据截图" class="headerlink" title="【7x00】数据截图"></a><font color="#FF0000">【7x00】数据截图</font></h1><fancybox><br><img src="https://cdn.jsdelivr.net/gh/TRHX/ImageHosting/ITRHX-PIC/A58/11.png" alt="11"><br></fancybox>]]></content>
      
      
      <categories>
          
          <category> Python3 学习笔记 </category>
          
          <category> 爬虫实战 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 爬虫 </tag>
            
            <tag> 58同城 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python3 爬虫实战 — 模拟登陆12306【点触验证码对抗】</title>
      <link href="/2019/10/21/A57-pyspider-12306-login/"/>
      <url>/2019/10/21/A57-pyspider-12306-login/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><blockquote><p>登陆时间：2019-10-21<br>实现难度：★★★☆☆☆<br>请求链接：<a href="https://kyfw.12306.cn/otn/resources/login.html" target="_blank" rel="noopener">https://kyfw.12306.cn/otn/resources/login.html</a><br>实现目标：模拟登陆中国铁路12306，攻克点触验证码<br>涉及知识：点触验证码的攻克、自动化测试工具 Selenium 的使用、对接在线打码平台<br>完整代码：<a href="https://github.com/TRHX/Python3-Spider-Practice/tree/master/12306-login" target="_blank" rel="noopener">https://github.com/TRHX/Python3-Spider-Practice/tree/master/12306-login</a><br>其他爬虫实战代码合集（持续更新）：<a href="https://github.com/TRHX/Python3-Spider-Practice" target="_blank" rel="noopener">https://github.com/TRHX/Python3-Spider-Practice</a><br>爬虫实战专栏（持续更新）：<a href="https://itrhx.blog.csdn.net/article/category/9351278" target="_blank" rel="noopener">https://itrhx.blog.csdn.net/article/category/9351278</a></p></blockquote><hr><a id="more"></a><h1 id="【1x00】思维导图"><a href="#【1x00】思维导图" class="headerlink" title="【1x00】思维导图"></a><font color="#ff0000">【1x00】思维导图</font></h1><fancybox><br><img src="https://cdn.jsdelivr.net/gh/TRHX/ImageHosting/ITRHX-PIC/A57/01.png" alt="01"><br></fancybox><ul><li><p>利用自动化测试工具 Selenium 直接模拟人的行为方式来完成验证</p></li><li><p>发送请求，出现验证码后，剪裁并保存验证码图片</p></li><li><p>选择在线打码平台，获取其API，以字节流格式发送图片</p></li><li><p>打码平台人工识别验证码，返回验证码的坐标信息</p></li><li><p>解析返回的坐标信息，模拟点击验证码，完成验证后点击登陆</p></li></ul><fancybox><br><img src="https://cdn.jsdelivr.net/gh/TRHX/ImageHosting/ITRHX-PIC/A57/02.png" alt="02"><br></fancybox><hr><h1 id="【2x00】打码平台选择"><a href="#【2x00】打码平台选择" class="headerlink" title="【2x00】打码平台选择"></a><font color="#ff0000">【2x00】打码平台选择</font></h1><p>关于打码平台：在线打码平台全部都是人工在线识别，准确率非常高，原理就是先将验证码图片提交给平台，平台会返回识别结果在图片中的坐标位置，然后我们再解析坐标模拟点击即可，常见的打码平台有超级鹰、云打码等，打码平台是收费的，拿超级鹰来说，1元 = 1000题分，识别一次验证码将花费一定的题分，不同类型验证码需要的题分不同，验证码越复杂所需题分越高，比如 7 位中文汉字需要 70 题分，常见 4 ~ 6 位英文数字只要 10 题分，其他打码平台价格也都差不多，本次实战使用<a href="http://www.chaojiying.com/" target="_blank" rel="noopener">超级鹰打码平台</a></p><p>使用打码平台：在超级鹰打码平台注册账号，官网：<a href="http://www.chaojiying.com/" target="_blank" rel="noopener">http://www.chaojiying.com/</a> ，充值一块钱得到 1000 题分，在用户中心里面申请一个软件 ID  ，在<a href="http://www.chaojiying.com/price.html" target="_blank" rel="noopener">价格体系</a>里面确定验证码的类型，先观察 12306 官网，发现验证码是要我们点击所有满足条件的图片，一般有 1 至 4 张图片满足要求，由此可确定在超级鹰打码平台的验证码类型为 9004（坐标多选,返回1~4个坐标,如:x1,y1|x2,y2|x3,y3）， 然后在<a href="http://www.chaojiying.com/api.html" target="_blank" rel="noopener">开发文档</a>里面获取其 <a href="http://www.chaojiying.com/download/Chaojiying_Python.rar" target="_blank" rel="noopener">Python API</a>，下载下来以备后用</p><hr><h1 id="【3x00】初始化模块"><a href="#【3x00】初始化模块" class="headerlink" title="【3x00】初始化模块"></a><font color="#ff0000">【3x00】初始化模块</font></h1><h2 id="【3x01】初始化函数"><a href="#【3x01】初始化函数" class="headerlink" title="【3x01】初始化函数"></a><font color="#1BC3FB">【3x01】初始化函数</font></h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 12306账号密码</span></span><br><span class="line">USERNAME = <span class="string">'155********'</span></span><br><span class="line">PASSWORD = <span class="string">'***********'</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 超级鹰打码平台账号密码</span></span><br><span class="line">CHAOJIYING_USERNAME = <span class="string">'*******'</span></span><br><span class="line">CHAOJIYING_PASSWORD = <span class="string">'*******'</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 超级鹰打码平台软件ID</span></span><br><span class="line">CHAOJIYING_SOFT_ID = <span class="string">'********'</span></span><br><span class="line"><span class="comment"># 验证码类型</span></span><br><span class="line">CHAOJIYING_KIND = <span class="string">'9004'</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CrackTouClick</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.url = <span class="string">'https://kyfw.12306.cn/otn/resources/login.html'</span></span><br><span class="line">        <span class="comment"># path是谷歌浏览器驱动的目录，如果已经将目录添加到系统变量，则不用设置此路径</span></span><br><span class="line">        path = <span class="string">r'F:\PycharmProjects\Python3爬虫\chromedriver.exe'</span></span><br><span class="line">        chrome_options = Options()</span><br><span class="line">        chrome_options.add_argument(<span class="string">'--start-maximized'</span>)</span><br><span class="line">        self.browser = webdriver.Chrome(executable_path=path, chrome_options=chrome_options)</span><br><span class="line">        self.wait = WebDriverWait(self.browser, <span class="number">20</span>)</span><br><span class="line">        self.username = USERNAME</span><br><span class="line">        self.password = PASSWORD</span><br><span class="line">        self.chaojiying = ChaojiyingClient(CHAOJIYING_USERNAME, CHAOJIYING_PASSWORD, CHAOJIYING_SOFT_ID)</span><br></pre></td></tr></table></figure><p>定义 12306 账号（<code>USERNAME</code>）、密码（<code>PASSWORD</code>）、超级鹰用户名（<code>CHAOJIYING_USERNAME</code>）、超级鹰登录密码（<code>CHAOJIYING_PASSWORD</code>）、超级鹰软件 ID（<code>CHAOJIYING_SOFT_ID</code>）、验证码类型（<code>CHAOJIYING_KIND</code>），登录页面 url ，谷歌浏览器驱动的目录（<code>path</code>），浏览器启动参数等，将超级鹰账号密码等相关参数传递给超级鹰 API</p><hr><h2 id="【3x02】账号密码输入函数"><a href="#【3x02】账号密码输入函数" class="headerlink" title="【3x02】账号密码输入函数"></a><font color="#1BC3FB">【3x02】账号密码输入函数</font></h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_input_element</span><span class="params">(self)</span>:</span></span><br><span class="line">    <span class="comment"># 登录页面发送请求</span></span><br><span class="line">    self.browser.get(self.url)</span><br><span class="line">    <span class="comment"># 登录页面默认是扫码登录，所以首先要点击账号登录</span></span><br><span class="line">    login = self.wait.until(EC.presence_of_element_located((By.CSS_SELECTOR, <span class="string">'.login-hd-account'</span>)))</span><br><span class="line">    login.click()</span><br><span class="line">    time.sleep(<span class="number">3</span>)</span><br><span class="line">    <span class="comment"># 查找到账号密码输入位置的元素</span></span><br><span class="line">    username = self.wait.until(EC.presence_of_element_located((By.CSS_SELECTOR, <span class="string">'input#J-userName'</span>)))</span><br><span class="line">    password = self.wait.until(EC.presence_of_element_located((By.CSS_SELECTOR, <span class="string">'input#J-password'</span>)))</span><br><span class="line">    <span class="comment"># 输入账号密码</span></span><br><span class="line">    username.send_keys(self.username)</span><br><span class="line">    password.send_keys(self.password)</span><br></pre></td></tr></table></figure><p>分析页面可知，登陆页面默认出现的是扫描二维码登陆，所以要先点击账号登录，找到该 CSS 元素为 <code>login-hd-account</code>，调用 <code>click()</code> 方法实现模拟点击，此时出现账号密码输入框，同样找到其 ID 分别为 <code>J-userName</code> 和 <code>J-password</code>，调用 <code>send_keys()</code> 方法输入账号密码</p><hr><h1 id="【4x00】验证码处理模块"><a href="#【4x00】验证码处理模块" class="headerlink" title="【4x00】验证码处理模块"></a><font color="#ff0000">【4x00】验证码处理模块</font></h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">crack</span><span class="params">(self)</span>:</span></span><br><span class="line">    <span class="comment"># 调用账号密码输入函数</span></span><br><span class="line">    self.get_input_element()</span><br><span class="line">    <span class="comment"># 调用验证码图片剪裁函数</span></span><br><span class="line">    image = self.get_touclick_image()</span><br><span class="line">    bytes_array = BytesIO()</span><br><span class="line">    image.save(bytes_array, format=<span class="string">'PNG'</span>)</span><br><span class="line">    <span class="comment"># 利用超级鹰打码平台的 API PostPic() 方法把图片发送给超级鹰后台，发送的图像是字节流格式，返回的结果是一个JSON</span></span><br><span class="line">    result = self.chaojiying.PostPic(bytes_array.getvalue(), CHAOJIYING_KIND)</span><br><span class="line">    print(result)</span><br><span class="line">    <span class="comment"># 调用验证码坐标解析函数</span></span><br><span class="line">    locations = self.get_points(result)</span><br><span class="line">    <span class="comment"># 调用模拟点击验证码函数</span></span><br><span class="line">    self.touch_click_words(locations)</span><br><span class="line">    <span class="comment"># 调用模拟点击登录函数</span></span><br><span class="line">    self.login()</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="comment"># 查找是否出现用户的姓名，若出现表示登录成功</span></span><br><span class="line">        success = self.wait.until(EC.text_to_be_present_in_element((By.CSS_SELECTOR, <span class="string">'.welcome-name'</span>), <span class="string">'谭先生'</span>))</span><br><span class="line">        print(success)</span><br><span class="line">        cc = self.browser.find_element(By.CSS_SELECTOR, <span class="string">'.welcome-name'</span>)</span><br><span class="line">        print(<span class="string">'用户'</span> + cc.text + <span class="string">'登录成功'</span>)</span><br><span class="line">        <span class="comment"># 若没有出现表示登录失败，继续重试，超级鹰会返回本次识别的分值</span></span><br><span class="line">    <span class="keyword">except</span> TimeoutException:</span><br><span class="line">        self.chaojiying.ReportError(result[<span class="string">'pic_id'</span>])</span><br><span class="line">        self.crack()</span><br></pre></td></tr></table></figure><p><code>crack()</code>  为验证码处理模块的主函数</p><p>调用账号密码输入函数 <code>get_input_element()</code>，等待账号密码输入完毕</p><p>调用验证码图片剪裁函数 <code>get_touclick_image()</code>，得到验证码图片</p><p>利用超级鹰打码平台的 API <code>PostPic()</code> 方法把图片发送给超级鹰后台，发送的图像是字节流格式，返回的结果是一个JSON，如果识别成功，典型的返回结果类似于：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#123;<span class="string">'err_no'</span>: <span class="number">0</span>, <span class="string">'err_str'</span>: <span class="string">'OK'</span>, <span class="string">'pic_id'</span>: <span class="string">'6002001380949200001'</span>, <span class="string">'pic_str'</span>: <span class="string">'132,127|56,77'</span>, <span class="string">'md5'</span>: </span><br><span class="line"><span class="string">'1f8e1d4bef8b11484cb1f1f34299865b'</span>&#125;</span><br></pre></td></tr></table></figure><p>其中，<code>pic_str</code> 就是识别的文字的坐标，是以字符串形式返回的，每个坐标都以 <code>|</code> 分隔</p><p>调用 <code>get_points()</code> 函数解析超级鹰识别结果</p><p>调用 <code>touch_click_words()</code> 函数对符合要求的图片进行点击</p><p>调用模拟点击登录函数 <code>login()</code>，点击登陆按钮模拟登陆</p><p>使用 <code>try-except</code> 语句判断是否出现了用户信息，判断依据是是否有用户姓名的出现，出现的姓名和实际姓名一致则登录成功，如果失败了就重试，超级鹰会返回该分值</p><hr><h2 id="【4x01】验证码图片剪裁函数"><a href="#【4x01】验证码图片剪裁函数" class="headerlink" title="【4x01】验证码图片剪裁函数"></a><font color="#1BC3FB">【4x01】验证码图片剪裁函数</font></h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_touclick_image</span><span class="params">(self, name=<span class="string">'12306.png'</span>)</span>:</span></span><br><span class="line">    <span class="comment"># 获取验证码的位置</span></span><br><span class="line">    element = self.wait.until(EC.presence_of_element_located((By.CSS_SELECTOR, <span class="string">'.login-pwd-code'</span>)))</span><br><span class="line">    time.sleep(<span class="number">3</span>)</span><br><span class="line">    location = element.location</span><br><span class="line">    size = element.size</span><br><span class="line">    top, bottom, left, right = location[<span class="string">'y'</span>], location[<span class="string">'y'</span>] + size[<span class="string">'height'</span>], location[<span class="string">'x'</span>], location[<span class="string">'x'</span>] + size[<span class="string">'width'</span>]</span><br><span class="line">    <span class="comment"># 先对整个页面截图</span></span><br><span class="line">    screenshot = self.browser.get_screenshot_as_png()</span><br><span class="line">    screenshot = Image.open(BytesIO(screenshot))</span><br><span class="line">    <span class="comment"># 根据验证码坐标信息，剪裁出验证码图片</span></span><br><span class="line">    captcha = screenshot.crop((left, top, right, bottom))</span><br><span class="line">    captcha.save(name)</span><br><span class="line">    <span class="keyword">return</span> captcha</span><br></pre></td></tr></table></figure><p>首先查找到验证码的坐标信息，先对整个页面截图，然后根据验证码坐标信息，剪裁出验证码图片</p><p>location 属性可以返回该图片对象在浏览器中的位置，坐标轴是以屏幕左上角为原点，x 轴向右递增，y 轴向下递增，size 属性可以返回该图片对象的高度和宽度，由此可以得到验证码的位置信息</p><hr><h2 id="【4x02】验证码坐标解析函数"><a href="#【4x02】验证码坐标解析函数" class="headerlink" title="【4x02】验证码坐标解析函数"></a><font color="#1BC3FB">【4x02】验证码坐标解析函数</font></h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_points</span><span class="params">(self, captcha_result)</span>:</span></span><br><span class="line">    <span class="comment"># 超级鹰识别结果以字符串形式返回，每个坐标都以|分隔</span></span><br><span class="line">    groups = captcha_result.get(<span class="string">'pic_str'</span>).split(<span class="string">'|'</span>)</span><br><span class="line">    <span class="comment"># 将坐标信息变成列表的形式</span></span><br><span class="line">    locations = [[int(number) <span class="keyword">for</span> number <span class="keyword">in</span> group.split(<span class="string">','</span>)] <span class="keyword">for</span> group <span class="keyword">in</span> groups]</span><br><span class="line">    <span class="keyword">return</span> locations</span><br></pre></td></tr></table></figure><p><code>get_points()</code> 方法将超级鹰的验证码识别结果变成列表的形式</p><hr><h2 id="【4x03】模拟点击验证码函数"><a href="#【4x03】模拟点击验证码函数" class="headerlink" title="【4x03】模拟点击验证码函数"></a><font color="#1BC3FB">【4x03】模拟点击验证码函数</font></h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">touch_click_words</span><span class="params">(self, locations)</span>:</span></span><br><span class="line">    element = self.wait.until(EC.presence_of_element_located((By.CSS_SELECTOR, <span class="string">'.login-pwd-code'</span>)))</span><br><span class="line">    <span class="comment"># 循环点击正确验证码的坐标</span></span><br><span class="line">    <span class="keyword">for</span> location <span class="keyword">in</span> locations:</span><br><span class="line">        print(location)</span><br><span class="line">        ActionChains(self.browser).move_to_element_with_offset(element, location[<span class="number">0</span>], location[<span class="number">1</span>]).click().perform()</span><br></pre></td></tr></table></figure><p>循环提取正确的验证码坐标信息，依次点击验证码</p><hr><h1 id="【5x00】登录模块"><a href="#【5x00】登录模块" class="headerlink" title="【5x00】登录模块"></a><font color="#ff0000">【5x00】登录模块</font></h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">login</span><span class="params">(self)</span>:</span></span><br><span class="line">    submit = self.wait.until(EC.element_to_be_clickable((By.ID, <span class="string">'J-login'</span>)))</span><br><span class="line">    submit.click()</span><br></pre></td></tr></table></figure><p>分析页面，找到登陆按钮的 ID 为 <code>J-login</code>，调用 <code>click()</code> 方法模拟点击按钮实现登录</p><hr><h1 id="【6x00】完整代码"><a href="#【6x00】完整代码" class="headerlink" title="【6x00】完整代码"></a><font color="#ff0000">【6x00】完整代码</font></h1><h2 id="【6x01】12306-py"><a href="#【6x01】12306-py" class="headerlink" title="【6x01】12306.py"></a><font color="#1BC3FB">【6x01】12306.py</font></h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># =============================================</span></span><br><span class="line"><span class="comment"># --*-- coding: utf-8 --*--</span></span><br><span class="line"><span class="comment"># @Time    : 2019-10-21</span></span><br><span class="line"><span class="comment"># @Author  : TRHX</span></span><br><span class="line"><span class="comment"># @Blog    : www.itrhx.com</span></span><br><span class="line"><span class="comment"># @CSDN    : https://blog.csdn.net/qq_36759224</span></span><br><span class="line"><span class="comment"># @FileName: 12306.py</span></span><br><span class="line"><span class="comment"># @Software: PyCharm</span></span><br><span class="line"><span class="comment"># =============================================</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">from</span> io <span class="keyword">import</span> BytesIO</span><br><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image</span><br><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.chrome.options <span class="keyword">import</span> Options</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver <span class="keyword">import</span> ActionChains</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.common.by <span class="keyword">import</span> By</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.support.ui <span class="keyword">import</span> WebDriverWait</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.support <span class="keyword">import</span> expected_conditions <span class="keyword">as</span> EC</span><br><span class="line"><span class="keyword">from</span> chaojiying <span class="keyword">import</span> ChaojiyingClient</span><br><span class="line"><span class="keyword">from</span> selenium.common.exceptions <span class="keyword">import</span> TimeoutException</span><br><span class="line"></span><br><span class="line"><span class="comment"># 12306账号密码</span></span><br><span class="line">USERNAME = <span class="string">'155********'</span></span><br><span class="line">PASSWORD = <span class="string">'***********'</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 超级鹰打码平台账号密码</span></span><br><span class="line">CHAOJIYING_USERNAME = <span class="string">'********'</span></span><br><span class="line">CHAOJIYING_PASSWORD = <span class="string">'********'</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 超级鹰打码平台软件ID</span></span><br><span class="line">CHAOJIYING_SOFT_ID = <span class="string">'******'</span></span><br><span class="line"><span class="comment"># 验证码类型</span></span><br><span class="line">CHAOJIYING_KIND = <span class="string">'9004'</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CrackTouClick</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.url = <span class="string">'https://kyfw.12306.cn/otn/resources/login.html'</span></span><br><span class="line">        <span class="comment"># path是谷歌浏览器驱动的目录，如果已经将目录添加到系统变量，则不用设置此路径</span></span><br><span class="line">        path = <span class="string">r'F:\PycharmProjects\Python3爬虫\chromedriver.exe'</span></span><br><span class="line">        chrome_options = Options()</span><br><span class="line">        chrome_options.add_argument(<span class="string">'--start-maximized'</span>)</span><br><span class="line">        self.browser = webdriver.Chrome(executable_path=path, chrome_options=chrome_options)</span><br><span class="line">        self.wait = WebDriverWait(self.browser, <span class="number">20</span>)</span><br><span class="line">        self.username = USERNAME</span><br><span class="line">        self.password = PASSWORD</span><br><span class="line">        self.chaojiying = ChaojiyingClient(CHAOJIYING_USERNAME, CHAOJIYING_PASSWORD, CHAOJIYING_SOFT_ID)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">crack</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="comment"># 调用账号密码输入函数</span></span><br><span class="line">        self.get_input_element()</span><br><span class="line">        <span class="comment"># 调用验证码图片剪裁函数</span></span><br><span class="line">        image = self.get_touclick_image()</span><br><span class="line">        bytes_array = BytesIO()</span><br><span class="line">        image.save(bytes_array, format=<span class="string">'PNG'</span>)</span><br><span class="line">        <span class="comment"># 利用超级鹰打码平台的 API PostPic() 方法把图片发送给超级鹰后台，发送的图像是字节流格式，返回的结果是一个JSON</span></span><br><span class="line">        result = self.chaojiying.PostPic(bytes_array.getvalue(), CHAOJIYING_KIND)</span><br><span class="line">        print(result)</span><br><span class="line">        <span class="comment"># 调用验证码坐标解析函数</span></span><br><span class="line">        locations = self.get_points(result)</span><br><span class="line">        <span class="comment"># 调用模拟点击验证码函数</span></span><br><span class="line">        self.touch_click_words(locations)</span><br><span class="line">        <span class="comment"># 调用模拟点击登录函数</span></span><br><span class="line">        self.login()</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            <span class="comment"># 查找是否出现用户的姓名，若出现表示登录成功</span></span><br><span class="line">            success = self.wait.until(EC.text_to_be_present_in_element((By.CSS_SELECTOR, <span class="string">'.welcome-name'</span>), <span class="string">'谭先生'</span>))</span><br><span class="line">            print(success)</span><br><span class="line">            cc = self.browser.find_element(By.CSS_SELECTOR, <span class="string">'.welcome-name'</span>)</span><br><span class="line">            print(<span class="string">'用户'</span> + cc.text + <span class="string">'登录成功'</span>)</span><br><span class="line">            <span class="comment"># 若没有出现表示登录失败，继续重试，超级鹰会返回本次识别的分值</span></span><br><span class="line">        <span class="keyword">except</span> TimeoutException:</span><br><span class="line">            self.chaojiying.ReportError(result[<span class="string">'pic_id'</span>])</span><br><span class="line">            self.crack()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 账号密码输入函数</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_input_element</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="comment"># 登录页面发送请求</span></span><br><span class="line">        self.browser.get(self.url)</span><br><span class="line">        <span class="comment"># 登录页面默认是扫码登录，所以首先要点击账号登录</span></span><br><span class="line">        login = self.wait.until(EC.presence_of_element_located((By.CSS_SELECTOR, <span class="string">'.login-hd-account'</span>)))</span><br><span class="line">        login.click()</span><br><span class="line">        time.sleep(<span class="number">3</span>)</span><br><span class="line">        <span class="comment"># 查找到账号密码输入位置的元素</span></span><br><span class="line">        username = self.wait.until(EC.presence_of_element_located((By.CSS_SELECTOR, <span class="string">'input#J-userName'</span>)))</span><br><span class="line">        password = self.wait.until(EC.presence_of_element_located((By.CSS_SELECTOR, <span class="string">'input#J-password'</span>)))</span><br><span class="line">        <span class="comment"># 输入账号密码</span></span><br><span class="line">        username.send_keys(self.username)</span><br><span class="line">        password.send_keys(self.password)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 验证码图片剪裁函数</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_touclick_image</span><span class="params">(self, name=<span class="string">'12306.png'</span>)</span>:</span></span><br><span class="line">        <span class="comment"># 获取验证码的位置</span></span><br><span class="line">        element = self.wait.until(EC.presence_of_element_located((By.CSS_SELECTOR, <span class="string">'.login-pwd-code'</span>)))</span><br><span class="line">        time.sleep(<span class="number">3</span>)</span><br><span class="line">        location = element.location</span><br><span class="line">        size = element.size</span><br><span class="line">        top, bottom, left, right = location[<span class="string">'y'</span>], location[<span class="string">'y'</span>] + size[<span class="string">'height'</span>], location[<span class="string">'x'</span>], location[<span class="string">'x'</span>] + size[</span><br><span class="line">            <span class="string">'width'</span>]</span><br><span class="line">        <span class="comment"># 先对整个页面截图</span></span><br><span class="line">        screenshot = self.browser.get_screenshot_as_png()</span><br><span class="line">        screenshot = Image.open(BytesIO(screenshot))</span><br><span class="line">        <span class="comment"># 根据验证码坐标信息，剪裁出验证码图片</span></span><br><span class="line">        captcha = screenshot.crop((left, top, right, bottom))</span><br><span class="line">        captcha.save(name)</span><br><span class="line">        <span class="keyword">return</span> captcha</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 验证码坐标解析函数，分析超级鹰返回的坐标</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_points</span><span class="params">(self, captcha_result)</span>:</span></span><br><span class="line">        <span class="comment"># 超级鹰识别结果以字符串形式返回，每个坐标都以|分隔</span></span><br><span class="line">        groups = captcha_result.get(<span class="string">'pic_str'</span>).split(<span class="string">'|'</span>)</span><br><span class="line">        <span class="comment"># 将坐标信息变成列表的形式</span></span><br><span class="line">        locations = [[int(number) <span class="keyword">for</span> number <span class="keyword">in</span> group.split(<span class="string">','</span>)] <span class="keyword">for</span> group <span class="keyword">in</span> groups]</span><br><span class="line">        <span class="keyword">return</span> locations</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 模拟点击验证码函数</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">touch_click_words</span><span class="params">(self, locations)</span>:</span></span><br><span class="line">        element = self.wait.until(EC.presence_of_element_located((By.CSS_SELECTOR, <span class="string">'.login-pwd-code'</span>)))</span><br><span class="line">        <span class="comment"># 循环点击正确验证码的坐标</span></span><br><span class="line">        <span class="keyword">for</span> location <span class="keyword">in</span> locations:</span><br><span class="line">            print(location)</span><br><span class="line">            ActionChains(self.browser).move_to_element_with_offset(element, location[<span class="number">0</span>], location[<span class="number">1</span>]).click().perform()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 模拟点击登录函数</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">login</span><span class="params">(self)</span>:</span></span><br><span class="line">        submit = self.wait.until(EC.element_to_be_clickable((By.ID, <span class="string">'J-login'</span>)))</span><br><span class="line">        submit.click()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    crack = CrackTouClick()</span><br><span class="line">    crack.crack()</span><br></pre></td></tr></table></figure><hr><h2 id="【6x02】chaojiying-py"><a href="#【6x02】chaojiying-py" class="headerlink" title="【6x02】chaojiying.py"></a><font color="#1BC3FB">【6x02】chaojiying.py</font></h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">from</span> hashlib <span class="keyword">import</span> md5</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ChaojiyingClient</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, username, password, soft_id)</span>:</span></span><br><span class="line">        self.username = username</span><br><span class="line">        password = password.encode(<span class="string">'utf8'</span>)</span><br><span class="line">        self.password = md5(password).hexdigest()</span><br><span class="line">        self.soft_id = soft_id</span><br><span class="line">        self.base_params = &#123;</span><br><span class="line">            <span class="string">'user'</span>: self.username,</span><br><span class="line">            <span class="string">'pass2'</span>: self.password,</span><br><span class="line">            <span class="string">'softid'</span>: self.soft_id,</span><br><span class="line">        &#125;</span><br><span class="line">        self.headers = &#123;</span><br><span class="line">            <span class="string">'Connection'</span>: <span class="string">'Keep-Alive'</span>,</span><br><span class="line">            <span class="string">'User-Agent'</span>: <span class="string">'Mozilla/4.0 (compatible; MSIE 8.0; Windows NT 5.1; Trident/4.0)'</span>,</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">PostPic</span><span class="params">(self, im, codetype)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        im: 图片字节</span></span><br><span class="line"><span class="string">        codetype: 题目类型 参考 http://www.chaojiying.com/price.html</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        params = &#123;</span><br><span class="line">            <span class="string">'codetype'</span>: codetype,</span><br><span class="line">        &#125;</span><br><span class="line">        params.update(self.base_params)</span><br><span class="line">        files = &#123;<span class="string">'userfile'</span>: (<span class="string">'ccc.jpg'</span>, im)&#125;</span><br><span class="line">        r = requests.post(<span class="string">'http://upload.chaojiying.net/Upload/Processing.php'</span>, data=params, files=files, headers=self.headers)</span><br><span class="line">        <span class="keyword">return</span> r.json()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">ReportError</span><span class="params">(self, im_id)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        im_id:报错题目的图片ID</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        params = &#123;</span><br><span class="line">            <span class="string">'id'</span>: im_id,</span><br><span class="line">        &#125;</span><br><span class="line">        params.update(self.base_params)</span><br><span class="line">        r = requests.post(<span class="string">'http://upload.chaojiying.net/Upload/ReportError.php'</span>, data=params, headers=self.headers)</span><br><span class="line">        <span class="keyword">return</span> r.json()</span><br></pre></td></tr></table></figure><hr><h1 id="【7x00】效果实现动图"><a href="#【7x00】效果实现动图" class="headerlink" title="【7x00】效果实现动图"></a><font color="#ff0000">【7x00】效果实现动图</font></h1><p>最终实现效果图：（关键信息已经过打码处理）</p><fancybox><br><img src="https://cdn.jsdelivr.net/gh/TRHX/ImageHosting/ITRHX-PIC/A57/12306.gif" alt="02"><br></fancybox>]]></content>
      
      
      <categories>
          
          <category> Python3 学习笔记 </category>
          
          <category> 爬虫实战 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 爬虫 </tag>
            
            <tag> 12306 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python3 爬虫实战 — 模拟登陆哔哩哔哩【滑动验证码对抗】</title>
      <link href="/2019/10/21/A56-pyspider-bilibili-login/"/>
      <url>/2019/10/21/A56-pyspider-bilibili-login/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><blockquote><p>登陆时间：2019-10-21<br>实现难度：★★★☆☆☆<br>请求链接：<a href="https://passport.bilibili.com/login" target="_blank" rel="noopener">https://passport.bilibili.com/login</a><br>实现目标：模拟登陆哔哩哔哩，攻克滑动验证码<br>涉及知识：滑动验证码的攻克、自动化测试工具 Selenium 的使用<br>完整代码：<a href="https://github.com/TRHX/Python3-Spider-Practice/tree/master/bilibili-login" target="_blank" rel="noopener">https://github.com/TRHX/Python3-Spider-Practice/tree/master/bilibili-login</a><br>其他爬虫实战代码合集（持续更新）：<a href="https://github.com/TRHX/Python3-Spider-Practice" target="_blank" rel="noopener">https://github.com/TRHX/Python3-Spider-Practice</a><br>爬虫实战专栏（持续更新）：<a href="https://itrhx.blog.csdn.net/article/category/9351278" target="_blank" rel="noopener">https://itrhx.blog.csdn.net/article/category/9351278</a></p></blockquote><hr><a id="more"></a><h1 id="【1x00】思维导图"><a href="#【1x00】思维导图" class="headerlink" title="【1x00】思维导图"></a><font color="#ff0000">【1x00】思维导图</font></h1><fancybox><br><img src="https://cdn.jsdelivr.net/gh/TRHX/ImageHosting/ITRHX-PIC/A56/01.png" alt="01"><br></fancybox><ul><li><p>利用自动化测试工具 Selenium 直接模拟人的行为方式来完成验证</p></li><li><p>分析页面，想办法找到滑动验证码的完整图片、带有缺口的图片和需要滑动的图片</p></li><li><p>对比原始的图片和带缺口的图片的像素，像素不同的地方就是缺口位置</p></li><li><p>计算出滑块缺口的位置，得到所需要滑动的距离</p></li><li><p>拖拽时要模仿人的行为，由于有个对准过程，所以要构造先快后慢的运动轨迹</p></li><li><p>最后利用 Selenium 进行对滑块的拖拽</p></li></ul><fancybox><br><img src="https://cdn.jsdelivr.net/gh/TRHX/ImageHosting/ITRHX-PIC/A56/02.png" alt="02"><br></fancybox><hr><h1 id="【2x00】登陆模块"><a href="#【2x00】登陆模块" class="headerlink" title="【2x00】登陆模块"></a><font color="#ff0000">【2x00】登陆模块</font></h1><h2 id="【2x01】初始化函数"><a href="#【2x01】初始化函数" class="headerlink" title="【2x01】初始化函数"></a><font color="#1BC3FB">【2x01】初始化函数</font></h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">init</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">global</span> url, browser, username, password, wait</span><br><span class="line">    url = <span class="string">'https://passport.bilibili.com/login'</span></span><br><span class="line">    <span class="comment"># path是谷歌浏览器驱动的目录，如果已经将目录添加到系统变量，则不用设置此路径</span></span><br><span class="line">    path = <span class="string">r'F:\PycharmProjects\Python3爬虫\chromedriver.exe'</span></span><br><span class="line">    chrome_options = Options()</span><br><span class="line">    chrome_options.add_argument(<span class="string">'--start-maximized'</span>)</span><br><span class="line">    browser = webdriver.Chrome(executable_path=path, chrome_options=chrome_options)</span><br><span class="line">    <span class="comment"># 你的哔哩哔哩用户名</span></span><br><span class="line">    username = <span class="string">'155********'</span></span><br><span class="line">    <span class="comment"># 你的哔哩哔哩登陆密码</span></span><br><span class="line">    password = <span class="string">'***********'</span></span><br><span class="line">    wait = WebDriverWait(browser, <span class="number">20</span>)</span><br></pre></td></tr></table></figure><p><code>global</code> 关键字定义了发起请求的url、用户名、密码等全局变量，随后是登录页面url、谷歌浏览器驱动的目录path、实例化 Chrome 浏览器、设置浏览器分辨率最大化、用户名、密码、<code>WebDriverWait()</code> 方法设置等待超时</p><hr><h2 id="【2x02】登陆函数"><a href="#【2x02】登陆函数" class="headerlink" title="【2x02】登陆函数"></a><font color="#1BC3FB">【2x02】登陆函数</font></h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">login</span><span class="params">()</span>:</span></span><br><span class="line">    browser.get(url)</span><br><span class="line">    <span class="comment"># 获取用户名输入框</span></span><br><span class="line">    user = wait.until(EC.presence_of_element_located((By.ID, <span class="string">'login-username'</span>)))</span><br><span class="line">    <span class="comment"># 获取密码输入框</span></span><br><span class="line">    passwd = wait.until(EC.presence_of_element_located((By.ID, <span class="string">'login-passwd'</span>)))</span><br><span class="line">    <span class="comment"># 输入用户名</span></span><br><span class="line">    user.send_keys(username)</span><br><span class="line">    <span class="comment"># 输入密码</span></span><br><span class="line">    passwd.send_keys(password)</span><br><span class="line">    <span class="comment"># 获取登录按钮</span></span><br><span class="line">    login_btn = wait.until(EC.presence_of_element_located((By.CSS_SELECTOR, <span class="string">'a.btn.btn-login'</span>)))</span><br><span class="line">    <span class="comment"># 随机暂停几秒</span></span><br><span class="line">    time.sleep(random.random() * <span class="number">3</span>)</span><br><span class="line">    <span class="comment"># 点击登陆按钮</span></span><br><span class="line">    login_btn.click()</span><br></pre></td></tr></table></figure><p>等待用户名输入框和密码输入框对应的 ID 节点加载出来</p><p>获取这两个节点，用户名输入框 <code>id=&quot;login-username&quot;</code>，密码输入框 <code>id=&quot;login-passwd&quot;</code></p><p>调用 <code>send_keys()</code> 方法输入用户名和密码</p><p>获取登录按钮 <code>class=&quot;btn btn-login&quot;</code></p><p>随机产生一个数并将其扩大三倍作为暂停时间</p><p>最后调用 <code>click()</code> 方法实现登录按钮的点击</p><hr><h1 id="【3x00】验证码处理模块"><a href="#【3x00】验证码处理模块" class="headerlink" title="【3x00】验证码处理模块"></a><font color="#ff0000">【3x00】验证码处理模块</font></h1><h2 id="【3x01】验证码元素查找函数"><a href="#【3x01】验证码元素查找函数" class="headerlink" title="【3x01】验证码元素查找函数"></a><font color="#1BC3FB">【3x01】验证码元素查找函数</font></h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">find_element</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="comment"># 获取带有缺口的图片</span></span><br><span class="line">    c_background = wait.until(</span><br><span class="line">        EC.presence_of_element_located((By.CSS_SELECTOR, <span class="string">'canvas.geetest_canvas_bg.geetest_absolute'</span>)))</span><br><span class="line">    <span class="comment"># 获取需要滑动的图片</span></span><br><span class="line">    c_slice = wait.until(</span><br><span class="line">        EC.presence_of_element_located((By.CSS_SELECTOR, <span class="string">'canvas.geetest_canvas_slice.geetest_absolute'</span>)))</span><br><span class="line">    <span class="comment"># 获取完整的图片</span></span><br><span class="line">    c_full_bg = wait.until(</span><br><span class="line">        EC.presence_of_element_located((By.CSS_SELECTOR, <span class="string">'canvas.geetest_canvas_fullbg.geetest_fade.geetest_absolute'</span>)))</span><br><span class="line">    <span class="comment"># 隐藏需要滑动的图片</span></span><br><span class="line">    hide_element(c_slice)</span><br><span class="line">    <span class="comment"># 保存带有缺口的图片</span></span><br><span class="line">    save_screenshot(c_background, <span class="string">'back'</span>)</span><br><span class="line">    <span class="comment"># 显示需要滑动的图片</span></span><br><span class="line">    show_element(c_slice)</span><br><span class="line">    <span class="comment"># 保存需要滑动的图片</span></span><br><span class="line">    save_screenshot(c_slice, <span class="string">'slice'</span>)</span><br><span class="line">    <span class="comment"># 显示完整的图片</span></span><br><span class="line">    show_element(c_full_bg)</span><br><span class="line">    <span class="comment"># 保存完整的图片</span></span><br><span class="line">    save_screenshot(c_full_bg, <span class="string">'full'</span>)</span><br></pre></td></tr></table></figure><p>获取验证码的三张图片，分别是完整的图片、带有缺口的图片和需要滑动的图片</p><p>分析页面代码，三张图片是由 3 个 canvas 组成，3 个 canvas 元素包含 CSS  <code>display</code> 属性，<code>display:block</code> 为可见，<code>display:none</code> 为不可见，在分别获取三张图片时要将其他两张图片设置为 <code>display:none</code>，这样做才能单独提取到每张图片</p><p>定位三张图片的 class 分别为：带有缺口的图片（c_background）：<code>geetest_canvas_bg geetest_absolute</code>、需要滑动的图片（c_slice）：<code>geetest_canvas_slice geetest_absolute</code>、完整图片（c_full_bg）：<code>geetest_canvas_fullbg geetest_fade geetest_absolute</code></p><p>最后传值给 <code>save_screenshot()</code> 函数，进一步对验证码进行处理</p><fancybox><br><img src="https://cdn.jsdelivr.net/gh/TRHX/ImageHosting/ITRHX-PIC/A56/03.png" alt="03"><br></fancybox><hr><h2 id="【3x02】元素可见性设置函数"><a href="#【3x02】元素可见性设置函数" class="headerlink" title="【3x02】元素可见性设置函数"></a><font color="#1BC3FB">【3x02】元素可见性设置函数</font></h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 设置元素不可见</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">hide_element</span><span class="params">(element)</span>:</span></span><br><span class="line">    browser.execute_script(<span class="string">"arguments[0].style=arguments[1]"</span>, element, <span class="string">"display: none;"</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置元素可见</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">show_element</span><span class="params">(element)</span>:</span></span><br><span class="line">    browser.execute_script(<span class="string">"arguments[0].style=arguments[1]"</span>, element, <span class="string">"display: block;"</span>)</span><br></pre></td></tr></table></figure><hr><h2 id="【3x03】验证码截图函数"><a href="#【3x03】验证码截图函数" class="headerlink" title="【3x03】验证码截图函数"></a><font color="#1BC3FB">【3x03】验证码截图函数</font></h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">save_screenshot</span><span class="params">(obj, name)</span>:</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="comment"># 首先对出现验证码后的整个页面进行截图保存</span></span><br><span class="line">        pic_url = browser.save_screenshot(<span class="string">'.\\bilibili.png'</span>)</span><br><span class="line">        print(<span class="string">"%s:截图成功!"</span> % pic_url)</span><br><span class="line">        <span class="comment"># 计算传入的obj，也就是三张图片的位置信息</span></span><br><span class="line">        left = obj.location[<span class="string">'x'</span>]</span><br><span class="line">        top = obj.location[<span class="string">'y'</span>]</span><br><span class="line">        right = left + obj.size[<span class="string">'width'</span>]</span><br><span class="line">        bottom = top + obj.size[<span class="string">'height'</span>]</span><br><span class="line">        <span class="comment"># 打印输出一下每一张图的位置信息</span></span><br><span class="line">        print(<span class="string">'图：'</span> + name)</span><br><span class="line">        print(<span class="string">'Left %s'</span> % left)</span><br><span class="line">        print(<span class="string">'Top %s'</span> % top)</span><br><span class="line">        print(<span class="string">'Right %s'</span> % right)</span><br><span class="line">        print(<span class="string">'Bottom %s'</span> % bottom)</span><br><span class="line">        print(<span class="string">''</span>)</span><br><span class="line">        <span class="comment"># 在整个页面截图的基础上，根据位置信息，分别剪裁出三张验证码图片并保存</span></span><br><span class="line">        im = Image.open(<span class="string">'.\\bilibili.png'</span>)</span><br><span class="line">        im = im.crop((left, top, right, bottom))</span><br><span class="line">        file_name = <span class="string">'bili_'</span> + name + <span class="string">'.png'</span></span><br><span class="line">        im.save(file_name)</span><br><span class="line">    <span class="keyword">except</span> BaseException <span class="keyword">as</span> msg:</span><br><span class="line">        print(<span class="string">"%s:截图失败!"</span> % msg)</span><br></pre></td></tr></table></figure><p><code>location</code> 属性可以返回该图片对象在浏览器中的位置，坐标轴是以屏幕左上角为原点，x轴向右递增，y轴向下递增</p><p><code>size</code> 属性可以返回该图片对象的高度和宽度，由此可以得到验证码的位置信息</p><p>首先调用 <code>save_screenshot()</code> 属性对整个页面截图并保存</p><p>然后向 <code>crop()</code> 方法传入验证码的位置信息，由位置信息再对验证码进行剪裁并保存</p><hr><h1 id="【4x00】验证码滑动模块"><a href="#【4x00】验证码滑动模块" class="headerlink" title="【4x00】验证码滑动模块"></a><font color="#ff0000">【4x00】验证码滑动模块</font></h1><h2 id="【4x01】滑动主函数"><a href="#【4x01】滑动主函数" class="headerlink" title="【4x01】滑动主函数"></a><font color="#1BC3FB">【4x01】滑动主函数</font></h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">slide</span><span class="params">()</span>:</span></span><br><span class="line">    distance = get_distance(Image.open(<span class="string">'.\\bili_back.png'</span>), Image.open(<span class="string">'.\\bili_full.png'</span>))</span><br><span class="line">    print(<span class="string">'计算偏移量为：%s Px'</span> % distance)</span><br><span class="line">    trace = get_trace(distance - <span class="number">5</span>)</span><br><span class="line">    move_to_gap(trace)</span><br><span class="line">    time.sleep(<span class="number">3</span>)</span><br></pre></td></tr></table></figure><p>向 <code>get_distance()</code> 函数传入完整的图片和缺口图片，计算滑块需要滑动的距离，再把距离信息传入 <code>get_trace()</code> 函数，构造滑块的移动轨迹，最后根据轨迹信息调用 <code>move_to_gap()</code> 函数移动滑块完成验证</p><hr><h2 id="【4x02】缺口位置寻找函数"><a href="#【4x02】缺口位置寻找函数" class="headerlink" title="【4x02】缺口位置寻找函数"></a><font color="#1BC3FB">【4x02】缺口位置寻找函数</font></h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">is_pixel_equal</span><span class="params">(bg_image, fullbg_image, x, y)</span>:</span></span><br><span class="line">    <span class="comment"># 获取两张图片对应像素点的RGB数据</span></span><br><span class="line">    bg_pixel = bg_image.load()[x, y]</span><br><span class="line">    fullbg_pixel = fullbg_image.load()[x, y]</span><br><span class="line">    <span class="comment"># 设定一个阈值</span></span><br><span class="line">    threshold = <span class="number">60</span></span><br><span class="line">    <span class="comment"># 比较两张图 RGB 的绝对值是否均小于定义的阈值</span></span><br><span class="line">    <span class="keyword">if</span> (abs(bg_pixel[<span class="number">0</span>] - fullbg_pixel[<span class="number">0</span>] &lt; threshold) <span class="keyword">and</span> abs(bg_pixel[<span class="number">1</span>] - fullbg_pixel[<span class="number">1</span>] &lt; threshold) <span class="keyword">and</span> abs(</span><br><span class="line">            bg_pixel[<span class="number">2</span>] - fullbg_pixel[<span class="number">2</span>] &lt; threshold)):</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">True</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">False</span></span><br></pre></td></tr></table></figure><p>将完整图片和缺口图片两个对象分别赋值给变量 <code>bg_image</code> 和 <code>fullbg_image</code>，接下来对比图片获取缺口。遍历图片的每个坐标点，获取两张图片对应像素点的 RGB 数据，判断像素的各个颜色之差，<code>abs()</code> 用于取绝对值，比较两张图 RGB 的绝对值是否均小于定义的阈值 threshold，如果绝对值均在阈值之内，则代表像素点相同，继续遍历，否则代表不相同的像素点，即缺口的位置</p><hr><h2 id="【4x03】计算滑块移动距离函数"><a href="#【4x03】计算滑块移动距离函数" class="headerlink" title="【4x03】计算滑块移动距离函数"></a><font color="#1BC3FB">【4x03】计算滑块移动距离函数</font></h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_distance</span><span class="params">(bg_image, fullbg_image)</span>:</span></span><br><span class="line">    <span class="comment"># 滑块的初始位置</span></span><br><span class="line">    distance = <span class="number">60</span></span><br><span class="line">    <span class="comment"># 遍历两张图片的每个像素</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(distance, fullbg_image.size[<span class="number">0</span>]):</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> range(fullbg_image.size[<span class="number">1</span>]):</span><br><span class="line">            <span class="comment"># 调用缺口位置寻找函数</span></span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> is_pixel_equal(fullbg_image, bg_image, i, j):</span><br><span class="line">                <span class="keyword">return</span> i</span><br></pre></td></tr></table></figure><p><code>get_distance()</code> 方法即获取缺口位置的方法，此方法的参数是两张图片，一张为完整的图片，另一张为带缺口的图片，<code>distance</code> 为滑块的初始位置，遍历两张图片的每个像素，利用 <code>is_pixel_equal()</code> 缺口位置寻找函数判断两张图片同一位置的像素是否相同，若不相同则返回该点的值</p><hr><h2 id="【4x04】构造移动轨迹函数"><a href="#【4x04】构造移动轨迹函数" class="headerlink" title="【4x04】构造移动轨迹函数"></a><font color="#1BC3FB">【4x04】构造移动轨迹函数</font></h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_trace</span><span class="params">(distance)</span>:</span></span><br><span class="line">    trace = []</span><br><span class="line">    <span class="comment"># 设置加速距离为总距离的4/5</span></span><br><span class="line">    faster_distance = distance * (<span class="number">4</span> / <span class="number">5</span>)</span><br><span class="line">    <span class="comment"># 设置初始位置、初始速度、时间间隔</span></span><br><span class="line">    start, v0, t = <span class="number">0</span>, <span class="number">0</span>, <span class="number">0.1</span></span><br><span class="line">    <span class="keyword">while</span> start &lt; distance:</span><br><span class="line">        <span class="keyword">if</span> start &lt; faster_distance:</span><br><span class="line">            a = <span class="number">10</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            a = <span class="number">-10</span></span><br><span class="line">        <span class="comment"># 位移</span></span><br><span class="line">        move = v0 * t + <span class="number">1</span> / <span class="number">2</span> * a * t * t</span><br><span class="line">        <span class="comment"># 当前时刻的速度</span></span><br><span class="line">        v = v0 + a * t</span><br><span class="line">        v0 = v</span><br><span class="line">        start += move</span><br><span class="line">        trace.append(round(move))</span><br><span class="line">    <span class="comment"># trace 记录了每个时间间隔移动了多少位移</span></span><br><span class="line">    <span class="keyword">return</span> trace</span><br></pre></td></tr></table></figure><p><code>get_trace()</code> 方法传入的参数为移动的总距离，返回的是运动轨迹，运动轨迹用 trace 表示，它是一个列表，列表的每个元素代表每次移动多少距离，利用 Selenium 进行对滑块的拖拽时要模仿人的行为，由于有个对准过程，所以是先快后慢，匀速移动、随机速度移动都不会成功，因此要设置一个加速和减速的距离，这里设置加速距离 <code>faster_distance</code> 是总距离 <code>distance</code> 的4/5倍，滑块滑动的加速度用 a 来表示，当前速度用 v 表示，初速度用 v0 表示，位移用 move 表示，所需时间用 t 表示，它们之间满足以下关系：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">move = v0 * t + <span class="number">0.5</span> * a * t * t </span><br><span class="line">v = v0 + a * t</span><br></pre></td></tr></table></figure><p>设置初始位置、初始速度、时间间隔分别为0, 0, 0.1，加速阶段和减速阶段的加速度分别设置为10和-10，直到运动轨迹达到总距离时，循环终止，最后得到的 trace 记录了每个时间间隔移动了多少位移，这样滑块的运动轨迹就得到了</p><hr><h2 id="【4x05】模拟拖动函数"><a href="#【4x05】模拟拖动函数" class="headerlink" title="【4x05】模拟拖动函数"></a><font color="#1BC3FB">【4x05】模拟拖动函数</font></h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">move_to_gap</span><span class="params">(trace)</span>:</span></span><br><span class="line">    <span class="comment"># 获取滑动按钮</span></span><br><span class="line">    slider = wait.until(EC.presence_of_element_located((By.CSS_SELECTOR, <span class="string">'div.geetest_slider_button'</span>)))</span><br><span class="line">    <span class="comment"># 点击并拖动滑块</span></span><br><span class="line">    ActionChains(browser).click_and_hold(slider).perform()</span><br><span class="line">    <span class="comment"># 遍历运动轨迹获取每小段位移距离</span></span><br><span class="line">    <span class="keyword">for</span> x <span class="keyword">in</span> trace:</span><br><span class="line">        <span class="comment"># 移动此位移</span></span><br><span class="line">        ActionChains(browser).move_by_offset(xoffset=x, yoffset=<span class="number">0</span>).perform()</span><br><span class="line">    time.sleep(<span class="number">0.5</span>)</span><br><span class="line">    <span class="comment"># 释放鼠标</span></span><br><span class="line">    ActionChains(browser).release().perform()</span><br></pre></td></tr></table></figure><p>传入的参数为运动轨迹，首先查找到滑动按钮，然后调用 ActionChains 的 <code>click_and_hold()</code> 方法按住拖动底部滑块，<code>perform()</code> 方法用于执行，遍历运动轨迹获取每小段位移距离，调用 <code>move_by_offset()</code> 方法移动此位移，最后调用 <code>release()</code> 方法松开鼠标即可</p><hr><h1 id="【5x00】完整代码"><a href="#【5x00】完整代码" class="headerlink" title="【5x00】完整代码"></a><font color="#FF0000">【5x00】完整代码</font></h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># =============================================</span></span><br><span class="line"><span class="comment"># --*-- coding: utf-8 --*--</span></span><br><span class="line"><span class="comment"># @Time    : 2019-10-21</span></span><br><span class="line"><span class="comment"># @Author  : TRHX</span></span><br><span class="line"><span class="comment"># @Blog    : www.itrhx.com</span></span><br><span class="line"><span class="comment"># @CSDN    : https://blog.csdn.net/qq_36759224</span></span><br><span class="line"><span class="comment"># @FileName: bilibili.py</span></span><br><span class="line"><span class="comment"># @Software: PyCharm</span></span><br><span class="line"><span class="comment"># =============================================</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.chrome.options <span class="keyword">import</span> Options</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.support.wait <span class="keyword">import</span> WebDriverWait</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.support <span class="keyword">import</span> expected_conditions <span class="keyword">as</span> EC</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.common.by <span class="keyword">import</span> By</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver <span class="keyword">import</span> ActionChains</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 初始化函数</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">init</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">global</span> url, browser, username, password, wait</span><br><span class="line">    url = <span class="string">'https://passport.bilibili.com/login'</span></span><br><span class="line">    <span class="comment"># path是谷歌浏览器驱动的目录，如果已经将目录添加到系统变量，则不用设置此路径</span></span><br><span class="line">    path = <span class="string">r'F:\PycharmProjects\Python3爬虫\chromedriver.exe'</span></span><br><span class="line">    chrome_options = Options()</span><br><span class="line">    chrome_options.add_argument(<span class="string">'--start-maximized'</span>)</span><br><span class="line">    browser = webdriver.Chrome(executable_path=path, chrome_options=chrome_options)</span><br><span class="line">    <span class="comment"># 你的哔哩哔哩用户名</span></span><br><span class="line">    username = <span class="string">'155********'</span></span><br><span class="line">    <span class="comment"># 你的哔哩哔哩登录密码</span></span><br><span class="line">    password = <span class="string">'***********'</span></span><br><span class="line">    wait = WebDriverWait(browser, <span class="number">20</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 登录函数</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">login</span><span class="params">()</span>:</span></span><br><span class="line">    browser.get(url)</span><br><span class="line">    <span class="comment"># 获取用户名输入框</span></span><br><span class="line">    user = wait.until(EC.presence_of_element_located((By.ID, <span class="string">'login-username'</span>)))</span><br><span class="line">    <span class="comment"># 获取密码输入框</span></span><br><span class="line">    passwd = wait.until(EC.presence_of_element_located((By.ID, <span class="string">'login-passwd'</span>)))</span><br><span class="line">    <span class="comment"># 输入用户名</span></span><br><span class="line">    user.send_keys(username)</span><br><span class="line">    <span class="comment"># 输入密码</span></span><br><span class="line">    passwd.send_keys(password)</span><br><span class="line">    <span class="comment"># 获取登录按钮</span></span><br><span class="line">    login_btn = wait.until(EC.presence_of_element_located((By.CSS_SELECTOR, <span class="string">'a.btn.btn-login'</span>)))</span><br><span class="line">    <span class="comment"># 随机暂停几秒</span></span><br><span class="line">    time.sleep(random.random() * <span class="number">3</span>)</span><br><span class="line">    <span class="comment"># 点击登陆按钮</span></span><br><span class="line">    login_btn.click()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 验证码元素查找函数</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">find_element</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="comment"># 获取带有缺口的图片</span></span><br><span class="line">    c_background = wait.until(</span><br><span class="line">        EC.presence_of_element_located((By.CSS_SELECTOR, <span class="string">'canvas.geetest_canvas_bg.geetest_absolute'</span>)))</span><br><span class="line">    <span class="comment"># 获取需要滑动的图片</span></span><br><span class="line">    c_slice = wait.until(</span><br><span class="line">        EC.presence_of_element_located((By.CSS_SELECTOR, <span class="string">'canvas.geetest_canvas_slice.geetest_absolute'</span>)))</span><br><span class="line">    <span class="comment"># 获取完整的图片</span></span><br><span class="line">    c_full_bg = wait.until(</span><br><span class="line">        EC.presence_of_element_located((By.CSS_SELECTOR, <span class="string">'canvas.geetest_canvas_fullbg.geetest_fade.geetest_absolute'</span>)))</span><br><span class="line">    <span class="comment"># 隐藏需要滑动的图片</span></span><br><span class="line">    hide_element(c_slice)</span><br><span class="line">    <span class="comment"># 保存带有缺口的图片</span></span><br><span class="line">    save_screenshot(c_background, <span class="string">'back'</span>)</span><br><span class="line">    <span class="comment"># 显示需要滑动的图片</span></span><br><span class="line">    show_element(c_slice)</span><br><span class="line">    <span class="comment"># 保存需要滑动的图片</span></span><br><span class="line">    save_screenshot(c_slice, <span class="string">'slice'</span>)</span><br><span class="line">    <span class="comment"># 显示完整的图片</span></span><br><span class="line">    show_element(c_full_bg)</span><br><span class="line">    <span class="comment"># 保存完整的图片</span></span><br><span class="line">    save_screenshot(c_full_bg, <span class="string">'full'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置元素不可见</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">hide_element</span><span class="params">(element)</span>:</span></span><br><span class="line">    browser.execute_script(<span class="string">"arguments[0].style=arguments[1]"</span>, element, <span class="string">"display: none;"</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置元素可见</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">show_element</span><span class="params">(element)</span>:</span></span><br><span class="line">    browser.execute_script(<span class="string">"arguments[0].style=arguments[1]"</span>, element, <span class="string">"display: block;"</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 验证码截图函数</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">save_screenshot</span><span class="params">(obj, name)</span>:</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="comment"># 首先对出现验证码后的整个页面进行截图保存</span></span><br><span class="line">        pic_url = browser.save_screenshot(<span class="string">'.\\bilibili.png'</span>)</span><br><span class="line">        print(<span class="string">"%s:截图成功!"</span> % pic_url)</span><br><span class="line">        <span class="comment"># 计算传入的obj，也就是三张图片的位置信息</span></span><br><span class="line">        left = obj.location[<span class="string">'x'</span>]</span><br><span class="line">        top = obj.location[<span class="string">'y'</span>]</span><br><span class="line">        right = left + obj.size[<span class="string">'width'</span>]</span><br><span class="line">        bottom = top + obj.size[<span class="string">'height'</span>]</span><br><span class="line">        <span class="comment"># 打印输出一下每一张图的位置信息</span></span><br><span class="line">        print(<span class="string">'图：'</span> + name)</span><br><span class="line">        print(<span class="string">'Left %s'</span> % left)</span><br><span class="line">        print(<span class="string">'Top %s'</span> % top)</span><br><span class="line">        print(<span class="string">'Right %s'</span> % right)</span><br><span class="line">        print(<span class="string">'Bottom %s'</span> % bottom)</span><br><span class="line">        print(<span class="string">''</span>)</span><br><span class="line">        <span class="comment"># 在整个页面截图的基础上，根据位置信息，分别剪裁出三张验证码图片并保存</span></span><br><span class="line">        im = Image.open(<span class="string">'.\\bilibili.png'</span>)</span><br><span class="line">        im = im.crop((left, top, right, bottom))</span><br><span class="line">        file_name = <span class="string">'bili_'</span> + name + <span class="string">'.png'</span></span><br><span class="line">        im.save(file_name)</span><br><span class="line">    <span class="keyword">except</span> BaseException <span class="keyword">as</span> msg:</span><br><span class="line">        print(<span class="string">"%s:截图失败!"</span> % msg)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 滑动模块的主函数</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">slide</span><span class="params">()</span>:</span></span><br><span class="line">    distance = get_distance(Image.open(<span class="string">'.\\bili_back.png'</span>), Image.open(<span class="string">'.\\bili_full.png'</span>))</span><br><span class="line">    print(<span class="string">'计算偏移量为：%s Px'</span> % distance)</span><br><span class="line">    trace = get_trace(distance - <span class="number">5</span>)</span><br><span class="line">    move_to_gap(trace)</span><br><span class="line">    time.sleep(<span class="number">3</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 计算滑块移动距离函数</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_distance</span><span class="params">(bg_image, fullbg_image)</span>:</span></span><br><span class="line">    <span class="comment"># 滑块的初始位置</span></span><br><span class="line">    distance = <span class="number">60</span></span><br><span class="line">    <span class="comment"># 遍历两张图片的每个像素</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(distance, fullbg_image.size[<span class="number">0</span>]):</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> range(fullbg_image.size[<span class="number">1</span>]):</span><br><span class="line">            <span class="comment"># 调用缺口位置寻找函数</span></span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> is_pixel_equal(fullbg_image, bg_image, i, j):</span><br><span class="line">                <span class="keyword">return</span> i</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 缺口位置寻找函数</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">is_pixel_equal</span><span class="params">(bg_image, fullbg_image, x, y)</span>:</span></span><br><span class="line">    <span class="comment"># 获取两张图片对应像素点的RGB数据</span></span><br><span class="line">    bg_pixel = bg_image.load()[x, y]</span><br><span class="line">    fullbg_pixel = fullbg_image.load()[x, y]</span><br><span class="line">    <span class="comment"># 设定一个阈值</span></span><br><span class="line">    threshold = <span class="number">60</span></span><br><span class="line">    <span class="comment"># 比较两张图 RGB 的绝对值是否均小于定义的阈值</span></span><br><span class="line">    <span class="keyword">if</span> (abs(bg_pixel[<span class="number">0</span>] - fullbg_pixel[<span class="number">0</span>] &lt; threshold) <span class="keyword">and</span> abs(bg_pixel[<span class="number">1</span>] - fullbg_pixel[<span class="number">1</span>] &lt; threshold) <span class="keyword">and</span> abs(</span><br><span class="line">            bg_pixel[<span class="number">2</span>] - fullbg_pixel[<span class="number">2</span>] &lt; threshold)):</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">True</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">False</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 构造移动轨迹函数</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_trace</span><span class="params">(distance)</span>:</span></span><br><span class="line">    trace = []</span><br><span class="line">    <span class="comment"># 设置加速距离为总距离的4/5</span></span><br><span class="line">    faster_distance = distance * (<span class="number">4</span> / <span class="number">5</span>)</span><br><span class="line">    <span class="comment"># 设置初始位置、初始速度、时间间隔</span></span><br><span class="line">    start, v0, t = <span class="number">0</span>, <span class="number">0</span>, <span class="number">0.1</span></span><br><span class="line">    <span class="keyword">while</span> start &lt; distance:</span><br><span class="line">        <span class="keyword">if</span> start &lt; faster_distance:</span><br><span class="line">            a = <span class="number">10</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            a = <span class="number">-10</span></span><br><span class="line">        <span class="comment"># 位移</span></span><br><span class="line">        move = v0 * t + <span class="number">1</span> / <span class="number">2</span> * a * t * t</span><br><span class="line">        <span class="comment"># 当前时刻的速度</span></span><br><span class="line">        v = v0 + a * t</span><br><span class="line">        v0 = v</span><br><span class="line">        start += move</span><br><span class="line">        trace.append(round(move))</span><br><span class="line">    <span class="comment"># trace 记录了每个时间间隔移动了多少位移</span></span><br><span class="line">    <span class="keyword">return</span> trace</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 模拟拖动函数</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">move_to_gap</span><span class="params">(trace)</span>:</span></span><br><span class="line">    <span class="comment"># 获取滑动按钮</span></span><br><span class="line">    slider = wait.until(EC.presence_of_element_located((By.CSS_SELECTOR, <span class="string">'div.geetest_slider_button'</span>)))</span><br><span class="line">    <span class="comment"># 点击并拖动滑块</span></span><br><span class="line">    ActionChains(browser).click_and_hold(slider).perform()</span><br><span class="line">    <span class="comment"># 遍历运动轨迹获取每小段位移距离</span></span><br><span class="line">    <span class="keyword">for</span> x <span class="keyword">in</span> trace:</span><br><span class="line">        <span class="comment"># 移动此位移</span></span><br><span class="line">        ActionChains(browser).move_by_offset(xoffset=x, yoffset=<span class="number">0</span>).perform()</span><br><span class="line">    time.sleep(<span class="number">0.5</span>)</span><br><span class="line">    <span class="comment"># 释放鼠标</span></span><br><span class="line">    ActionChains(browser).release().perform()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    init()</span><br><span class="line">    login()</span><br><span class="line">    find_element()</span><br><span class="line">    slide()</span><br></pre></td></tr></table></figure><h1 id="【6x00】效果实现动图"><a href="#【6x00】效果实现动图" class="headerlink" title="【6x00】效果实现动图"></a><font color="#FF0000">【6x00】效果实现动图</font></h1><p>最终实现效果图：（关键信息已经过打码处理）</p><fancybox><br><img src="https://cdn.jsdelivr.net/gh/TRHX/ImageHosting/ITRHX-PIC/A56/bilibili.gif" alt="04"><br></fancybox>]]></content>
      
      
      <categories>
          
          <category> Python3 学习笔记 </category>
          
          <category> 爬虫实战 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 爬虫 </tag>
            
            <tag> 哔哩哔哩 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python3 爬虫实战 — 虎扑论坛步行街</title>
      <link href="/2019/10/12/A55-pyspider-hupu/"/>
      <url>/2019/10/12/A55-pyspider-hupu/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><blockquote><p>爬取时间：2019-10-12<br>爬取难度：★★☆☆☆☆<br>请求链接：<a href="https://bbs.hupu.com/bxj" target="_blank" rel="noopener">https://bbs.hupu.com/bxj</a><br>爬取目标：爬取虎扑论坛步行街的帖子，包含主题，作者，发布时间等，数据保存到 MongoDB 数据库<br>涉及知识：请求库 requests、解析库 Beautiful Soup、数据库 MongoDB 的操作<br>完整代码：<a href="https://github.com/TRHX/Python3-Spider-Practice/tree/master/hupu" target="_blank" rel="noopener">https://github.com/TRHX/Python3-Spider-Practice/tree/master/hupu</a><br>其他爬虫实战代码合集（持续更新）：<a href="https://github.com/TRHX/Python3-Spider-Practice" target="_blank" rel="noopener">https://github.com/TRHX/Python3-Spider-Practice</a><br>爬虫实战专栏（持续更新）：<a href="https://itrhx.blog.csdn.net/article/category/9351278" target="_blank" rel="noopener">https://itrhx.blog.csdn.net/article/category/9351278</a></p></blockquote><hr><a id="more"></a><h1 id="【1x00】循环爬取网页模块"><a href="#【1x00】循环爬取网页模块" class="headerlink" title="【1x00】循环爬取网页模块"></a><font color="#FF0000">【1x00】循环爬取网页模块</font></h1><p>观察虎扑论坛步行街分区，请求地址为：<a href="https://bbs.hupu.com/bxj" target="_blank" rel="noopener">https://bbs.hupu.com/bxj</a></p><p>第一页：<a href="https://bbs.hupu.com/bxj" target="_blank" rel="noopener">https://bbs.hupu.com/bxj</a></p><p>第二页：<a href="https://bbs.hupu.com/bxj-2" target="_blank" rel="noopener">https://bbs.hupu.com/bxj-2</a></p><p>第三页：<a href="https://bbs.hupu.com/bxj-3" target="_blank" rel="noopener">https://bbs.hupu.com/bxj-3</a></p><p>不难发现，每增加一页，只需要添加 <code>-页数</code> 参数即可，最后一页是第 50 页，因此可以利用 for 循环依次爬取，定义一个 <code>get_pages()</code> 函数，返回初始化 Beautiful Soup 的对象 page_soup，方便后面的解析函数调用</p><p>虽然一共有 50 页，但是当用户访问第 10 页以后的页面的时候，会要求登录虎扑，不然就没法查看，而且登录时会出现智能验证，所以程序只爬取前 10 页的数据</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_pages</span><span class="params">(page_url)</span>:</span></span><br><span class="line">    headers = &#123;</span><br><span class="line">        <span class="string">'User-Agent'</span>: <span class="string">'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/75.0.3770.142 Safari/537.36'</span></span><br><span class="line">    &#125;</span><br><span class="line">    response = requests.get(url=page_url, headers=headers)</span><br><span class="line">    page_soup = BeautifulSoup(response.text, <span class="string">'lxml'</span>)</span><br><span class="line">    <span class="keyword">return</span> page_soup</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>, <span class="number">11</span>):</span><br><span class="line">        url = <span class="string">'https://bbs.hupu.com/bxj-'</span> + str(i)</span><br><span class="line">        soup = get_pages(url)</span><br></pre></td></tr></table></figure><hr><h1 id="【2x00】解析模块"><a href="#【2x00】解析模块" class="headerlink" title="【2x00】解析模块"></a><font color="#FF0000">【2x00】解析模块</font></h1><p>使用 Beautiful Soup 对网页各个信息进行提取，最后将这些信息放进一个列表里，然后调用列表的 <code>.append()</code> 方法，再将每条帖子的列表依次加到另一个新列表里，最终返回的是类似于如下形式的列表：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[[<span class="string">'帖子1'</span>, <span class="string">'作者1'</span>], [<span class="string">'帖子2'</span>, <span class="string">'作者2'</span>], [<span class="string">'帖子3'</span>, <span class="string">'作者3'</span>]]</span><br></pre></td></tr></table></figure><p>这样做的目的是：方便 MongoDB 依次储存每一条帖子的信息</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">parse_pages</span><span class="params">(page_soup)</span>:</span></span><br><span class="line">    data_list = []</span><br><span class="line">    all_list = page_soup.find(<span class="string">'ul'</span>, class_=<span class="string">'for-list'</span>)</span><br><span class="line">    post_list = all_list.find_all(<span class="string">'li'</span>)</span><br><span class="line">    <span class="comment"># print(result_list)</span></span><br><span class="line">    <span class="keyword">for</span> post <span class="keyword">in</span> post_list:</span><br><span class="line">        <span class="comment"># 帖子名称</span></span><br><span class="line">        post_title = post.find(<span class="string">'a'</span>, class_=<span class="string">'truetit'</span>).text</span><br><span class="line">        <span class="comment"># print(post_title)</span></span><br><span class="line">        <span class="comment"># 帖子链接</span></span><br><span class="line">        post_url = <span class="string">'https://bbs.hupu.com'</span> + post.find(<span class="string">'a'</span>, class_=<span class="string">'truetit'</span>)[<span class="string">'href'</span>]</span><br><span class="line">        <span class="comment"># print(post_url)</span></span><br><span class="line">        <span class="comment"># 作者</span></span><br><span class="line">        author = post.select(<span class="string">'.author &gt; a'</span>)[<span class="number">0</span>].text</span><br><span class="line">        <span class="comment"># print(author)</span></span><br><span class="line">        <span class="comment"># 作者主页</span></span><br><span class="line">        author_url = post.select(<span class="string">'.author &gt; a'</span>)[<span class="number">0</span>][<span class="string">'href'</span>]</span><br><span class="line">        <span class="comment"># print(author_url)</span></span><br><span class="line">        <span class="comment"># 发布日期</span></span><br><span class="line">        post_date = post.select(<span class="string">'.author &gt; a'</span>)[<span class="number">1</span>].text</span><br><span class="line">        <span class="comment"># print(post_date)</span></span><br><span class="line">        reply_view = post.find(<span class="string">'span'</span>, class_=<span class="string">'ansour'</span>).text</span><br><span class="line">        <span class="comment"># 回复数</span></span><br><span class="line">        post_reply = reply_view.split(<span class="string">'/'</span>)[<span class="number">0</span>].strip()</span><br><span class="line">        <span class="comment"># print(post_reply)</span></span><br><span class="line">        <span class="comment"># 浏览量</span></span><br><span class="line">        post_view = reply_view.split(<span class="string">'/'</span>)[<span class="number">1</span>].strip()</span><br><span class="line">        <span class="comment"># print(post_view)</span></span><br><span class="line">        <span class="comment"># 最后回复时间</span></span><br><span class="line">        last_data = post.select(<span class="string">'.endreply &gt; a'</span>)[<span class="number">0</span>].text</span><br><span class="line">        <span class="comment"># print(last_data)</span></span><br><span class="line">        <span class="comment"># 最后回复用户</span></span><br><span class="line">        last_user = post.select(<span class="string">'.endreply &gt; span'</span>)[<span class="number">0</span>].text</span><br><span class="line">        <span class="comment"># print(last_user)</span></span><br><span class="line"></span><br><span class="line">        data_list.append([post_title, post_url, author, author_url, post_date, post_reply, post_view, last_data, last_user])</span><br><span class="line"></span><br><span class="line">    <span class="comment"># print(data_list)</span></span><br><span class="line">    <span class="keyword">return</span> data_list</span><br></pre></td></tr></table></figure><hr><h1 id="【3x00】MongoDB-数据储存模块"><a href="#【3x00】MongoDB-数据储存模块" class="headerlink" title="【3x00】MongoDB 数据储存模块"></a><font color="#FF0000">【3x00】MongoDB 数据储存模块</font></h1><p>首先使用 <code>MongoClient()</code> 方法，向其传入地址参数 host 和 端口参数 port，指定数据库为 <code>hupu</code>，集合为 <code>bxj</code></p><p>将解析函数返回的列表传入到储存函数，依次循环该列表，对每一条帖子的信息进行提取并储存</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">mongodb</span><span class="params">(data_list)</span>:</span></span><br><span class="line">    client = MongoClient(<span class="string">'localhost'</span>, <span class="number">27017</span>)</span><br><span class="line">    db = client.hupu</span><br><span class="line">    collection = db.bxj</span><br><span class="line">    <span class="keyword">for</span> data <span class="keyword">in</span> data_list:</span><br><span class="line">        bxj = &#123;</span><br><span class="line">            <span class="string">'帖子名称'</span>: data[<span class="number">0</span>],</span><br><span class="line">            <span class="string">'帖子链接'</span>: data[<span class="number">1</span>],</span><br><span class="line">            <span class="string">'作者'</span>: data[<span class="number">2</span>],</span><br><span class="line">            <span class="string">'作者主页'</span>: data[<span class="number">3</span>],</span><br><span class="line">            <span class="string">'发布日期'</span>: str(data[<span class="number">4</span>]),</span><br><span class="line">            <span class="string">'回复数'</span>: data[<span class="number">5</span>],</span><br><span class="line">            <span class="string">'浏览量'</span>: data[<span class="number">6</span>],</span><br><span class="line">            <span class="string">'最后回复时间'</span>: str(data[<span class="number">7</span>]),</span><br><span class="line">            <span class="string">'最后回复用户'</span>: data[<span class="number">8</span>]</span><br><span class="line">        &#125;</span><br><span class="line">        collection.insert_one(bxj)</span><br></pre></td></tr></table></figure><hr><h1 id="【4x00】完整代码"><a href="#【4x00】完整代码" class="headerlink" title="【4x00】完整代码"></a><font color="#FF0000">【4x00】完整代码</font></h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># =============================================</span></span><br><span class="line"><span class="comment"># --*-- coding: utf-8 --*--</span></span><br><span class="line"><span class="comment"># @Time    : 2019-10-12</span></span><br><span class="line"><span class="comment"># @Author  : TRHX</span></span><br><span class="line"><span class="comment"># @Blog    : www.itrhx.com</span></span><br><span class="line"><span class="comment"># @CSDN    : https://blog.csdn.net/qq_36759224</span></span><br><span class="line"><span class="comment"># @FileName: hupu.py</span></span><br><span class="line"><span class="comment"># @Software: PyCharm</span></span><br><span class="line"><span class="comment"># =============================================</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">from</span> pymongo <span class="keyword">import</span> MongoClient</span><br><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_pages</span><span class="params">(page_url)</span>:</span></span><br><span class="line">    headers = &#123;</span><br><span class="line">        <span class="string">'User-Agent'</span>: <span class="string">'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/75.0.3770.142 Safari/537.36'</span></span><br><span class="line">    &#125;</span><br><span class="line">    response = requests.get(url=page_url, headers=headers)</span><br><span class="line">    page_soup = BeautifulSoup(response.text, <span class="string">'lxml'</span>)</span><br><span class="line">    <span class="keyword">return</span> page_soup</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">parse_pages</span><span class="params">(page_soup)</span>:</span></span><br><span class="line">    data_list = []</span><br><span class="line">    all_list = page_soup.find(<span class="string">'ul'</span>, class_=<span class="string">'for-list'</span>)</span><br><span class="line">    post_list = all_list.find_all(<span class="string">'li'</span>)</span><br><span class="line">    <span class="comment"># print(result_list)</span></span><br><span class="line">    <span class="keyword">for</span> post <span class="keyword">in</span> post_list:</span><br><span class="line">        <span class="comment"># 帖子名称</span></span><br><span class="line">        post_title = post.find(<span class="string">'a'</span>, class_=<span class="string">'truetit'</span>).text</span><br><span class="line">        <span class="comment"># print(post_title)</span></span><br><span class="line">        <span class="comment"># 帖子链接</span></span><br><span class="line">        post_url = <span class="string">'https://bbs.hupu.com'</span> + post.find(<span class="string">'a'</span>, class_=<span class="string">'truetit'</span>)[<span class="string">'href'</span>]</span><br><span class="line">        <span class="comment"># print(post_url)</span></span><br><span class="line">        <span class="comment"># 作者</span></span><br><span class="line">        author = post.select(<span class="string">'.author &gt; a'</span>)[<span class="number">0</span>].text</span><br><span class="line">        <span class="comment"># print(author)</span></span><br><span class="line">        <span class="comment"># 作者主页</span></span><br><span class="line">        author_url = post.select(<span class="string">'.author &gt; a'</span>)[<span class="number">0</span>][<span class="string">'href'</span>]</span><br><span class="line">        <span class="comment"># print(author_url)</span></span><br><span class="line">        <span class="comment"># 发布日期</span></span><br><span class="line">        post_date = post.select(<span class="string">'.author &gt; a'</span>)[<span class="number">1</span>].text</span><br><span class="line">        <span class="comment"># print(post_date)</span></span><br><span class="line">        reply_view = post.find(<span class="string">'span'</span>, class_=<span class="string">'ansour'</span>).text</span><br><span class="line">        <span class="comment"># 回复数</span></span><br><span class="line">        post_reply = reply_view.split(<span class="string">'/'</span>)[<span class="number">0</span>].strip()</span><br><span class="line">        <span class="comment"># print(post_reply)</span></span><br><span class="line">        <span class="comment"># 浏览量</span></span><br><span class="line">        post_view = reply_view.split(<span class="string">'/'</span>)[<span class="number">1</span>].strip()</span><br><span class="line">        <span class="comment"># print(post_view)</span></span><br><span class="line">        <span class="comment"># 最后回复时间</span></span><br><span class="line">        last_data = post.select(<span class="string">'.endreply &gt; a'</span>)[<span class="number">0</span>].text</span><br><span class="line">        <span class="comment"># print(last_data)</span></span><br><span class="line">        <span class="comment"># 最后回复用户</span></span><br><span class="line">        last_user = post.select(<span class="string">'.endreply &gt; span'</span>)[<span class="number">0</span>].text</span><br><span class="line">        <span class="comment"># print(last_user)</span></span><br><span class="line"></span><br><span class="line">        data_list.append([post_title, post_url, author, author_url, post_date, post_reply, post_view, last_data, last_user])</span><br><span class="line"></span><br><span class="line">    <span class="comment"># print(data_list)</span></span><br><span class="line">    <span class="keyword">return</span> data_list</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">mongodb</span><span class="params">(data_list)</span>:</span></span><br><span class="line">    client = MongoClient(<span class="string">'localhost'</span>, <span class="number">27017</span>)</span><br><span class="line">    db = client.hupu</span><br><span class="line">    collection = db.bxj</span><br><span class="line">    <span class="keyword">for</span> data <span class="keyword">in</span> data_list:</span><br><span class="line">        bxj = &#123;</span><br><span class="line">            <span class="string">'帖子名称'</span>: data[<span class="number">0</span>],</span><br><span class="line">            <span class="string">'帖子链接'</span>: data[<span class="number">1</span>],</span><br><span class="line">            <span class="string">'作者'</span>: data[<span class="number">2</span>],</span><br><span class="line">            <span class="string">'作者主页'</span>: data[<span class="number">3</span>],</span><br><span class="line">            <span class="string">'发布日期'</span>: str(data[<span class="number">4</span>]),</span><br><span class="line">            <span class="string">'回复数'</span>: data[<span class="number">5</span>],</span><br><span class="line">            <span class="string">'浏览量'</span>: data[<span class="number">6</span>],</span><br><span class="line">            <span class="string">'最后回复时间'</span>: str(data[<span class="number">7</span>]),</span><br><span class="line">            <span class="string">'最后回复用户'</span>: data[<span class="number">8</span>]</span><br><span class="line">        &#125;</span><br><span class="line">        collection.insert_one(bxj)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>, <span class="number">11</span>):</span><br><span class="line">        url = <span class="string">'https://bbs.hupu.com/bxj-'</span> + str(i)</span><br><span class="line">        soup = get_pages(url)</span><br><span class="line">        result_list = parse_pages(soup)</span><br><span class="line">        mongodb(result_list)</span><br><span class="line">        print(<span class="string">'第'</span>, i, <span class="string">'页数据爬取完毕！'</span>)</span><br><span class="line">        time.sleep(random.randint(<span class="number">3</span>, <span class="number">10</span>))</span><br><span class="line">    print(<span class="string">'前10页所有数据爬取完毕！'</span>)</span><br></pre></td></tr></table></figure><hr><h1 id="【5x00】数据截图"><a href="#【5x00】数据截图" class="headerlink" title="【5x00】数据截图"></a><font color="#FF0000">【5x00】数据截图</font></h1><p>一共爬取到 1180 条数据：</p><fancybox><br><img src="https://cdn.jsdelivr.net/gh/TRHX/ImageHosting/ITRHX-PIC/A55/01.png" alt="01"><br></fancybox><h1 id="【6x00】程序不足的地方"><a href="#【6x00】程序不足的地方" class="headerlink" title="【6x00】程序不足的地方"></a><font color="#FF0000">【6x00】程序不足的地方</font></h1><p>程序只能爬取前 10 页的数据，因为虎扑论坛要求从第 11 页开始，必须登录账号才能查看，并且登录时会有智能验证，可以使用自动化测试工具 Selenium 模拟登录账号后再进行爬取。</p>]]></content>
      
      
      <categories>
          
          <category> Python3 学习笔记 </category>
          
          <category> 爬虫实战 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 爬虫 </tag>
            
            <tag> 虎扑论坛 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python3 爬虫实战 — 安居客武汉二手房</title>
      <link href="/2019/10/09/A54-pyspider-anjuke/"/>
      <url>/2019/10/09/A54-pyspider-anjuke/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><blockquote><p>爬取时间：2019-10-09<br>爬取难度：★★☆☆☆☆<br>请求链接：<a href="https://wuhan.anjuke.com/sale/" target="_blank" rel="noopener">https://wuhan.anjuke.com/sale/</a><br>爬取目标：爬取武汉二手房每一条售房信息，包含地理位置、价格、面积等，保存为 CSV 文件<br>涉及知识：请求库 requests、解析库 Beautiful Soup、CSV 文件储存、列表操作、分页判断<br>完整代码：<a href="https://github.com/TRHX/Python3-Spider-Practice/tree/master/anjuke" target="_blank" rel="noopener">https://github.com/TRHX/Python3-Spider-Practice/tree/master/anjuke</a><br>其他爬虫实战代码合集（持续更新）：<a href="https://github.com/TRHX/Python3-Spider-Practice" target="_blank" rel="noopener">https://github.com/TRHX/Python3-Spider-Practice</a><br>爬虫实战专栏（持续更新）：<a href="https://itrhx.blog.csdn.net/article/category/9351278" target="_blank" rel="noopener">https://itrhx.blog.csdn.net/article/category/9351278</a></p></blockquote><hr><a id="more"></a><h1 id="【1x00】页面整体分析"><a href="#【1x00】页面整体分析" class="headerlink" title="【1x00】页面整体分析"></a><font color="#FF0000">【1x00】页面整体分析</font></h1><p>分析 <a href="https://wuhan.anjuke.com/sale/" target="_blank" rel="noopener">安居客武汉二手房页面</a>，这次爬取实战准备使用 BeautifulSoup 解析库，熟练 BeautifulSoup 解析库的用法，注意到该页面与其他页面不同的是，不能一次性看到到底有多少页，以前知道一共有多少页，直接一个循环爬取就行了，虽然可以通过改变 url 来尝试找到最后一页，但是这样就显得不程序员了😂，因此可以通过 BeautifulSoup 解析 <code>下一页按钮</code>，提取到下一页的 url，直到没有 <code>下一页按钮</code> 这个元素为止，从而实现所有页面的爬取，剩下的信息提取和储存就比较简单了</p><hr><h1 id="【2x00】解析模块"><a href="#【2x00】解析模块" class="headerlink" title="【2x00】解析模块"></a><font color="#FF0000">【2x00】解析模块</font></h1><p>分析页面，可以发现每条二手房信息都是包含在 <code>&lt;li&gt;</code> 标签内的，因此可以使用 BeautifulSoup 解析页面得到所有的 <code>&lt;li&gt;</code> 标签，然后再循环访问每个 <code>&lt;li&gt;</code> 标签，依次解析得到每条二手房的各种信息</p><fancybox><br><img src="https://cdn.jsdelivr.net/gh/TRHX/ImageHosting/ITRHX-PIC/A54/01.png" alt="01"><br></fancybox><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">parse_pages</span><span class="params">(url, num)</span>:</span></span><br><span class="line">    response = requests.get(url=url, headers=headers)</span><br><span class="line">    soup = BeautifulSoup(response.text, <span class="string">'lxml'</span>)</span><br><span class="line">    result_list = soup.find_all(<span class="string">'li'</span>, class_=<span class="string">'list-item'</span>)</span><br><span class="line">    <span class="comment"># print(len(result_list))</span></span><br><span class="line">    <span class="keyword">for</span> result <span class="keyword">in</span> result_list:</span><br><span class="line">        <span class="comment"># 标题</span></span><br><span class="line">        title = result.find(<span class="string">'a'</span>, class_=<span class="string">'houseListTitle'</span>).text.strip()</span><br><span class="line">        <span class="comment"># print(title)</span></span><br><span class="line">        <span class="comment"># 户型</span></span><br><span class="line">        layout = result.select(<span class="string">'.details-item &gt; span'</span>)[<span class="number">0</span>].text</span><br><span class="line">        <span class="comment"># print(layout)</span></span><br><span class="line">        <span class="comment"># 面积</span></span><br><span class="line">        cover = result.select(<span class="string">'.details-item &gt; span'</span>)[<span class="number">1</span>].text</span><br><span class="line">        <span class="comment"># print(cover)</span></span><br><span class="line">        <span class="comment"># 楼层</span></span><br><span class="line">        floor = result.select(<span class="string">'.details-item &gt; span'</span>)[<span class="number">2</span>].text</span><br><span class="line">        <span class="comment"># print(floor)</span></span><br><span class="line">        <span class="comment"># 建造年份</span></span><br><span class="line">        year = result.select(<span class="string">'.details-item &gt; span'</span>)[<span class="number">3</span>].text</span><br><span class="line">        <span class="comment"># print(year)</span></span><br><span class="line">        <span class="comment"># 单价</span></span><br><span class="line">        unit_price = result.find(<span class="string">'span'</span>, class_=<span class="string">'unit-price'</span>).text.strip()</span><br><span class="line">        <span class="comment"># print(unit_price)</span></span><br><span class="line">        <span class="comment"># 总价</span></span><br><span class="line">        total_price = result.find(<span class="string">'span'</span>, class_=<span class="string">'price-det'</span>).text.strip()</span><br><span class="line">        <span class="comment"># print(total_price)</span></span><br><span class="line">        <span class="comment"># 关键字</span></span><br><span class="line">        keyword = result.find(<span class="string">'div'</span>, class_=<span class="string">'tags-bottom'</span>).text.strip()</span><br><span class="line">        <span class="comment"># print(keyword)</span></span><br><span class="line">        <span class="comment"># 地址</span></span><br><span class="line">        address = result.find(<span class="string">'span'</span>, class_=<span class="string">'comm-address'</span>).text.replace(<span class="string">' '</span>, <span class="string">''</span>).replace(<span class="string">'\n'</span>, <span class="string">''</span>)</span><br><span class="line">        <span class="comment"># print(address)</span></span><br><span class="line">        <span class="comment"># 详情页url</span></span><br><span class="line">        details_url = result.find(<span class="string">'a'</span>, class_=<span class="string">'houseListTitle'</span>)[<span class="string">'href'</span>]</span><br><span class="line">        <span class="comment"># print(details_url)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    start_num = <span class="number">0</span></span><br><span class="line">    start_url = <span class="string">'https://wuhan.anjuke.com/sale/'</span></span><br><span class="line">    parse_pages(start_url, start_num)</span><br></pre></td></tr></table></figure><hr><h1 id="【3x00】循环爬取模块"><a href="#【3x00】循环爬取模块" class="headerlink" title="【3x00】循环爬取模块"></a><font color="#FF0000">【3x00】循环爬取模块</font></h1><p>前面已经分析过，该网页是无法一下就能看到一共有多少页的，尝试找到最后一页，发现一共有50页，那么此时就可以搞个循环，一直到第50页就行了，但是如果有一天页面数增加了呢，那么代码的可维护性就不好了，我们可以观察 <code>下一页按钮</code> ，当存在下一页的时候，是 <code>&lt;a&gt;</code> 标签，并且带有下一页的 URL，不存在下一页的时候是 <code>&lt;i&gt;</code> 标签，因此可以写个 <code>if</code> 语句，判断是否存在此 <code>&lt;a&gt;</code> 标签，若存在，表示有下一页，然后提取其 <code>href</code> 属性并传给解析模块，实现后面所有页面的信息提取，此外，由于安居客有反爬系统，我们还可以利用 Python中的 <code>random.randint()</code> 方法，在两个数值之间随机取一个数，传入 <code>time.sleep()</code> 方法，实现随机暂停爬取</p><fancybox><br><img src="https://cdn.jsdelivr.net/gh/TRHX/ImageHosting/ITRHX-PIC/A54/02.png" alt="02"><br></fancybox><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 判断是否还有下一页</span></span><br><span class="line">next_url = soup.find_all(<span class="string">'a'</span>, class_=<span class="string">'aNxt'</span>)</span><br><span class="line"><span class="keyword">if</span> len(next_url) != <span class="number">0</span>:</span><br><span class="line">    num += <span class="number">1</span></span><br><span class="line">    print(<span class="string">'第'</span> + str(num) + <span class="string">'页数据爬取完毕！'</span>)</span><br><span class="line">    <span class="comment"># 3-60秒之间随机暂停</span></span><br><span class="line">    time.sleep(random.randint(<span class="number">3</span>, <span class="number">60</span>))</span><br><span class="line">    parse_pages(next_url[<span class="number">0</span>].attrs[<span class="string">'href'</span>], num)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    print(<span class="string">'所有数据爬取完毕！'</span>)</span><br></pre></td></tr></table></figure><hr><h1 id="【4x00】数据储存模块"><a href="#【4x00】数据储存模块" class="headerlink" title="【4x00】数据储存模块"></a><font color="#FF0000">【4x00】数据储存模块</font></h1><p>数据储存比较简单，将每个二手房信息组成一个列表，依次写入到 anjuke.csv 文件中即可</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">results = [title, layout, cover, floor, year, unit_price, total_price, keyword, address, details_url]</span><br><span class="line"><span class="keyword">with</span> open(<span class="string">'anjuke.csv'</span>, <span class="string">'a'</span>, newline=<span class="string">''</span>, encoding=<span class="string">'utf-8-sig'</span>) <span class="keyword">as</span> f:</span><br><span class="line">    w = csv.writer(f)</span><br><span class="line">    w.writerow(results)</span><br></pre></td></tr></table></figure><hr><h1 id="【5x00】完整代码"><a href="#【5x00】完整代码" class="headerlink" title="【5x00】完整代码"></a><font color="#FF0000">【5x00】完整代码</font></h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># =============================================</span></span><br><span class="line"><span class="comment"># --*-- coding: utf-8 --*--</span></span><br><span class="line"><span class="comment"># @Time    : 2019-10-09</span></span><br><span class="line"><span class="comment"># @Author  : TRHX</span></span><br><span class="line"><span class="comment"># @Blog    : www.itrhx.com</span></span><br><span class="line"><span class="comment"># @CSDN    : https://blog.csdn.net/qq_36759224</span></span><br><span class="line"><span class="comment"># @FileName: anjuke.py</span></span><br><span class="line"><span class="comment"># @Software: PyCharm</span></span><br><span class="line"><span class="comment"># =============================================</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> csv</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line"></span><br><span class="line">headers = &#123;</span><br><span class="line">    <span class="string">'User-Agent'</span>: <span class="string">'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/75.0.3770.142 Safari/537.36'</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">parse_pages</span><span class="params">(url, num)</span>:</span></span><br><span class="line">    response = requests.get(url=url, headers=headers)</span><br><span class="line">    soup = BeautifulSoup(response.text, <span class="string">'lxml'</span>)</span><br><span class="line">    result_list = soup.find_all(<span class="string">'li'</span>, class_=<span class="string">'list-item'</span>)</span><br><span class="line">    <span class="comment"># print(len(result_list))</span></span><br><span class="line">    <span class="keyword">for</span> result <span class="keyword">in</span> result_list:</span><br><span class="line">        <span class="comment"># 标题</span></span><br><span class="line">        title = result.find(<span class="string">'a'</span>, class_=<span class="string">'houseListTitle'</span>).text.strip()</span><br><span class="line">        <span class="comment"># print(title)</span></span><br><span class="line">        <span class="comment"># 户型</span></span><br><span class="line">        layout = result.select(<span class="string">'.details-item &gt; span'</span>)[<span class="number">0</span>].text</span><br><span class="line">        <span class="comment"># print(layout)</span></span><br><span class="line">        <span class="comment"># 面积</span></span><br><span class="line">        cover = result.select(<span class="string">'.details-item &gt; span'</span>)[<span class="number">1</span>].text</span><br><span class="line">        <span class="comment"># print(cover)</span></span><br><span class="line">        <span class="comment"># 楼层</span></span><br><span class="line">        floor = result.select(<span class="string">'.details-item &gt; span'</span>)[<span class="number">2</span>].text</span><br><span class="line">        <span class="comment"># print(floor)</span></span><br><span class="line">        <span class="comment"># 建造年份</span></span><br><span class="line">        year = result.select(<span class="string">'.details-item &gt; span'</span>)[<span class="number">3</span>].text</span><br><span class="line">        <span class="comment"># print(year)</span></span><br><span class="line">        <span class="comment"># 单价</span></span><br><span class="line">        unit_price = result.find(<span class="string">'span'</span>, class_=<span class="string">'unit-price'</span>).text.strip()</span><br><span class="line">        <span class="comment"># print(unit_price)</span></span><br><span class="line">        <span class="comment"># 总价</span></span><br><span class="line">        total_price = result.find(<span class="string">'span'</span>, class_=<span class="string">'price-det'</span>).text.strip()</span><br><span class="line">        <span class="comment"># print(total_price)</span></span><br><span class="line">        <span class="comment"># 关键字</span></span><br><span class="line">        keyword = result.find(<span class="string">'div'</span>, class_=<span class="string">'tags-bottom'</span>).text.strip()</span><br><span class="line">        <span class="comment"># print(keyword)</span></span><br><span class="line">        <span class="comment"># 地址</span></span><br><span class="line">        address = result.find(<span class="string">'span'</span>, class_=<span class="string">'comm-address'</span>).text.replace(<span class="string">' '</span>, <span class="string">''</span>).replace(<span class="string">'\n'</span>, <span class="string">''</span>)</span><br><span class="line">        <span class="comment"># print(address)</span></span><br><span class="line">        <span class="comment"># 详情页url</span></span><br><span class="line">        details_url = result.find(<span class="string">'a'</span>, class_=<span class="string">'houseListTitle'</span>)[<span class="string">'href'</span>]</span><br><span class="line">        <span class="comment"># print(details_url)</span></span><br><span class="line">        results = [title, layout, cover, floor, year, unit_price, total_price, keyword, address, details_url]</span><br><span class="line">        <span class="keyword">with</span> open(<span class="string">'anjuke.csv'</span>, <span class="string">'a'</span>, newline=<span class="string">''</span>, encoding=<span class="string">'utf-8-sig'</span>) <span class="keyword">as</span> f:</span><br><span class="line">            w = csv.writer(f)</span><br><span class="line">            w.writerow(results)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 判断是否还有下一页</span></span><br><span class="line">    next_url = soup.find_all(<span class="string">'a'</span>, class_=<span class="string">'aNxt'</span>)</span><br><span class="line">    <span class="keyword">if</span> len(next_url) != <span class="number">0</span>:</span><br><span class="line">        num += <span class="number">1</span></span><br><span class="line">        print(<span class="string">'第'</span> + str(num) + <span class="string">'页数据爬取完毕！'</span>)</span><br><span class="line">        <span class="comment"># 3-60秒之间随机暂停</span></span><br><span class="line">        time.sleep(random.randint(<span class="number">3</span>, <span class="number">60</span>))</span><br><span class="line">        parse_pages(next_url[<span class="number">0</span>].attrs[<span class="string">'href'</span>], num)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        print(<span class="string">'所有数据爬取完毕！'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    <span class="keyword">with</span> open(<span class="string">'anjuke.csv'</span>, <span class="string">'a'</span>, newline=<span class="string">''</span>, encoding=<span class="string">'utf-8-sig'</span>) <span class="keyword">as</span> fp:</span><br><span class="line">        writer = csv.writer(fp)</span><br><span class="line">        writer.writerow([<span class="string">'标题'</span>, <span class="string">'户型'</span>, <span class="string">'面积'</span>, <span class="string">'楼层'</span>, <span class="string">'建造年份'</span>, <span class="string">'单价'</span>, <span class="string">'总价'</span>, <span class="string">'关键字'</span>, <span class="string">'地址'</span>, <span class="string">'详情页地址'</span>])</span><br><span class="line">    start_num = <span class="number">0</span></span><br><span class="line">    start_url = <span class="string">'https://wuhan.anjuke.com/sale/'</span></span><br><span class="line">    parse_pages(start_url, start_num)</span><br></pre></td></tr></table></figure><hr><h1 id="【6x00】数据截图"><a href="#【6x00】数据截图" class="headerlink" title="【6x00】数据截图"></a><font color="#FF0000">【6x00】数据截图</font></h1><fancybox><br><img src="https://cdn.jsdelivr.net/gh/TRHX/ImageHosting/ITRHX-PIC/A54/03.png" alt="03"><br></fancybox><hr><h1 id="【7x00】程序不足的地方"><a href="#【7x00】程序不足的地方" class="headerlink" title="【7x00】程序不足的地方"></a><font color="#FF0000">【7x00】程序不足的地方</font></h1><ul><li><p>虽然使用了随机暂停爬取的方法，但是在爬取了大约 20 页的数据后依然会出现验证页面，导致程序终止</p></li><li><p>原来设想的是可以由用户手动输入城市的拼音来查询不同城市的信息，方法是把用户输入的城市拼音和其他参数一起构造成一个 URL，然后对该 URL 发送请求，判断请求返回的代码，如果是 200 就代表可以访问，也就是用户输入的城市是正确的，然而发现即便是输入错误，该 URL 依然可以访问，只不过会跳转到一个正确的页面，没有搞清楚是什么原理，也就无法实现由用户输入城市来查询这个功能</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> Python3 学习笔记 </category>
          
          <category> 爬虫实战 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 爬虫 </tag>
            
            <tag> 安居客 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用 Hexo-Git-Backup 插件备份你的 Hexo 博客</title>
      <link href="/2019/09/29/A53-hexo-backup/"/>
      <url>/2019/09/29/A53-hexo-backup/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>欢迎关注我的 CSDN 专栏：<a href="https://blog.csdn.net/qq_36759224/article/category/9285510" target="_blank" rel="noopener">《个人博客搭建：Hexo+Github Pages》</a>，从搭建到美化一条龙，帮你解决 Hexo 常见问题！</p><hr><p>由于 Hexo 博客是静态托管的，所有的原始数据都保存在本地，如果哪一天电脑坏了，或者是误删了本地数据，那就是叫天天不应叫地地不灵了，此时定时备份就显得比较重要了，常见的备份方法有：打包数据保存到U盘、云盘或者其他地方，但是早就有大神开发了备份插件：<a href="https://github.com/coneycode/hexo-git-backup" target="_blank" rel="noopener">hexo-git-backup</a> ，只需要一个命令就可以将所有数据包括主题文件备份到 github 了</p><p>首先进入你博客目录，输入命令 <code>hexo version</code> 查看 Hexo 版本，如图所示，我的版本是 3.7.1：</p><fancybox><br><img src="https://cdn.jsdelivr.net/gh/TRHX/ImageHosting/ITRHX-PIC/A53/01.png" alt="01"><br></fancybox><p>安装备份插件，如果你的 Hexo 版本是 2.x.x，则使用以下命令安装：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install hexo-git-backup@0.0.91 --save</span><br></pre></td></tr></table></figure><p>如果你的 Hexo 版本是 3.x.x，则使用以下命令安装：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install hexo-git-backup --save</span><br></pre></td></tr></table></figure><p>到 Hexo 博客根目录的 <code>_config.yml</code> 配置文件里添加以下配置：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">backup:</span><br><span class="line">  <span class="built_in">type</span>: git</span><br><span class="line">  theme: material-x-1.2.1</span><br><span class="line">  message: Back up my www.itrhx.com blog</span><br><span class="line">  repository:</span><br><span class="line">    github: git@github.com:TRHX/TRHX.github.io.git,backup</span><br><span class="line">    coding: git@git.dev.tencent.com:TRHX/TRHX.git,backup</span><br></pre></td></tr></table></figure><p>参数解释：</p><ul><li>theme：你要备份的主题名称</li><li>message：自定义提交信息</li><li>repository：仓库名，注意仓库地址后面要添加一个分支名，比如我就创建了一个 backup 分支</li></ul><p>最后使用以下命令备份你的博客：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo backup</span><br></pre></td></tr></table></figure><p>或者使用以下简写命令也可以：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo b</span><br></pre></td></tr></table></figure><p>备份成功后可以在你的仓库分支下看到备份的原始文件：</p><fancybox><br><img src="https://cdn.jsdelivr.net/gh/TRHX/ImageHosting/ITRHX-PIC/A53/02.png" alt="02"><br></fancybox><fancybox><br><img src="https://cdn.jsdelivr.net/gh/TRHX/ImageHosting/ITRHX-PIC/A53/03.png" alt="03"><br></fancybox>]]></content>
      
      
      <categories>
          
          <category> Hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
            <tag> 备份 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python3 爬虫实战 — 豆瓣电影TOP250</title>
      <link href="/2019/09/28/A52-pyspider-doubantop250/"/>
      <url>/2019/09/28/A52-pyspider-doubantop250/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><blockquote><p>爬取时间：2019-09-27<br>爬取难度：★★☆☆☆☆<br>请求链接：<a href="https://movie.douban.com/top250" target="_blank" rel="noopener">https://movie.douban.com/top250</a> 以及每部电影详情页<br>爬取目标：爬取榜单上每一部电影详情页的数据，保存为 CSV 文件；下载所有电影海报到本地<br>涉及知识：请求库 requests、解析库 lxml、Xpath 语法、正则表达式、CSV 和二进制数据储存、列表操作<br>完整代码：<a href="https://github.com/TRHX/Python3-Spider-Practice/tree/master/douban-top250" target="_blank" rel="noopener">https://github.com/TRHX/Python3-Spider-Practice/tree/master/douban-top250</a><br>其他爬虫实战代码合集（持续更新）：<a href="https://github.com/TRHX/Python3-Spider-Practice" target="_blank" rel="noopener">https://github.com/TRHX/Python3-Spider-Practice</a><br>爬虫实战专栏（持续更新）：<a href="https://itrhx.blog.csdn.net/article/category/9351278" target="_blank" rel="noopener">https://itrhx.blog.csdn.net/article/category/9351278</a></p></blockquote><hr><a id="more"></a><h1 id="【1x00】循环爬取网页模块"><a href="#【1x00】循环爬取网页模块" class="headerlink" title="【1x00】循环爬取网页模块"></a><font color="#FF0000">【1x00】循环爬取网页模块</font></h1><p>观察豆瓣电影 Top 250，请求地址为：<a href="https://movie.douban.com/top250" target="_blank" rel="noopener">https://movie.douban.com/top250</a></p><p>每页展示25条电影信息，照例翻页观察 url 的变化：</p><p>第一页：<a href="https://movie.douban.com/top250" target="_blank" rel="noopener">https://movie.douban.com/top250</a></p><p>第二页：<a href="https://movie.douban.com/top250?start=25&amp;filter=" target="_blank" rel="noopener">https://movie.douban.com/top250?start=25&amp;filter=</a></p><p>第三页：<a href="https://movie.douban.com/top250?start=50&amp;filter=" target="_blank" rel="noopener">https://movie.douban.com/top250?start=50&amp;filter=</a></p><p>一共有10页，每次改变的是 start 的值，利用一个 for 循环，从 0 到 250 每隔 25 取一个值拼接到 url，实现循环爬取每一页，由于我们的目标是进入每一部电影的详情页，然后爬取详情页的内容，所以我们可以使用 Xpath 提取每一页每部电影详情页的 URL，将其赋值给 <code>m_urls</code>，并返回 <code>m_urls</code>，<code>m_urls</code> 是一个列表，列表元素就是电影详情页的 URL</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index_pages</span><span class="params">(number)</span>:</span></span><br><span class="line">    url = <span class="string">'https://movie.douban.com/top250?start=%s&amp;filter='</span> % number</span><br><span class="line">    index_response = requests.get(url=url, headers=headers)</span><br><span class="line">    tree = etree.HTML(index_response.text)</span><br><span class="line">    m_urls = tree.xpath(<span class="string">"//li/div/div/a/@href"</span>)</span><br><span class="line">    <span class="keyword">return</span> m_urls</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>, <span class="number">250</span>, <span class="number">25</span>):</span><br><span class="line">        movie_urls = index_pages(i)</span><br></pre></td></tr></table></figure><hr><h1 id="【2x00】解析模块"><a href="#【2x00】解析模块" class="headerlink" title="【2x00】解析模块"></a><font color="#FF0000">【2x00】解析模块</font></h1><p>定义一个解析函数 <code>parse_pages()</code>，利用 for 循环，依次提取 <code>index_pages()</code> 函数返回的列表中的元素，也就是每部电影详情页的 URL，将其传给解析函数进行解析</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index_pages</span><span class="params">(number)</span>:</span></span><br><span class="line">expressions</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">parse_pages</span><span class="params">(url)</span>:</span></span><br><span class="line">expressions</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>, <span class="number">250</span>, <span class="number">25</span>):</span><br><span class="line">        movie_urls = index_pages(i)</span><br><span class="line">        <span class="keyword">for</span> movie_url <span class="keyword">in</span> movie_urls:</span><br><span class="line">            results = parse_pages(movie_url)</span><br></pre></td></tr></table></figure><p>详细看一下解析函数 <code>parse_pages()</code>，首先要对接收到的详情页 URL 发送请求，获取响应内容，然后再使用 Xpath 提取相关信息</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">parse_pages</span><span class="params">(url)</span>:</span></span><br><span class="line">    movie_pages = requests.get(url=url, headers=headers)</span><br><span class="line">    parse_movie = etree.HTML(movie_pages.text)</span><br></pre></td></tr></table></figure><hr><h2 id="【2x01】Xpath-解析排名、电影名、评分信息"><a href="#【2x01】Xpath-解析排名、电影名、评分信息" class="headerlink" title="【2x01】Xpath 解析排名、电影名、评分信息"></a><font color="#1BC3FB">【2x01】Xpath 解析排名、电影名、评分信息</font></h2><p>其中排名、电影名和评分信息是最容易匹配到的，直接使用 Xpath 语法就可以轻松解决：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 排名</span></span><br><span class="line">ranking = parse_movie.xpath(<span class="string">"//span[@class='top250-no']/text()"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 电影名</span></span><br><span class="line">name = parse_movie.xpath(<span class="string">"//h1/span[1]/text()"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 评分</span></span><br><span class="line">score = parse_movie.xpath(<span class="string">"//div[@class='rating_self clearfix']/strong/text()"</span>)</span><br></pre></td></tr></table></figure><hr><h2 id="【2x02】Xpath-解析参评人数"><a href="#【2x02】Xpath-解析参评人数" class="headerlink" title="【2x02】Xpath 解析参评人数"></a><font color="#1BC3FB">【2x02】Xpath 解析参评人数</font></h2><p>接下来准备爬取有多少人参与了评价，分析一下页面：</p><fancybox><br><img src="https://cdn.jsdelivr.net/gh/TRHX/ImageHosting/ITRHX-PIC/A52/01.png" alt="01"><br></fancybox><p>如果只爬取这个 <code>&lt;span&gt;</code> 标签下的数字的话，没有任何提示信息，别人看了不知道是啥东西，所以把 <code>人评价</code> 这三个字也爬下来的话就比较好了，但是可以看到数字和文字不在同一个元素标签下，而且文字部分还有空格，要爬取的话就要把 <code>class=&quot;rating_people&quot;</code> 的 <code>a</code> 标签下所有的 <code>text</code> 提取出来，然后再去掉空格：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 参评人数</span></span><br><span class="line"><span class="comment"># 匹配a节点</span></span><br><span class="line">value = parse_movie.xpath(<span class="string">"//a[@class='rating_people']"</span>)</span><br><span class="line"><span class="comment"># 提取a节点下所有文本</span></span><br><span class="line">string = [value[<span class="number">0</span>].xpath(<span class="string">'string(.)'</span>)]</span><br><span class="line"><span class="comment"># 去除多余空格</span></span><br><span class="line">number = [a.strip() <span class="keyword">for</span> a <span class="keyword">in</span> string]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 此时 number = ['1617307人评价']</span></span><br></pre></td></tr></table></figure><p>这样做太麻烦了，我们可以直接提取数字，得到一个列表，然后使用另一个带有提示信息的列表，将两个列表的元素合并，组成一个新列表，这个新列表的元素就是提示信息+人数<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 参评人数</span></span><br><span class="line">value = parse_movie.xpath(<span class="string">"//span[@property='v:votes']/text()"</span>)</span><br><span class="line"><span class="comment"># 合并元素</span></span><br><span class="line">number = [<span class="string">" "</span>.join([<span class="string">'参评人数：'</span>] + value)]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 此时 number = ['参评人数：1617307']</span></span><br></pre></td></tr></table></figure></p><hr><h2 id="【2x03】正则表达式解析制片国家、语言"><a href="#【2x03】正则表达式解析制片国家、语言" class="headerlink" title="【2x03】正则表达式解析制片国家、语言"></a><font color="#1BC3FB">【2x03】正则表达式解析制片国家、语言</font></h2><p>接下来尝试爬取制片国家/地区、语言等信息：</p><fancybox><br><img src="https://cdn.jsdelivr.net/gh/TRHX/ImageHosting/ITRHX-PIC/A52/02.png" alt="02"><br></fancybox><p>分析页面可以观察到，制片国家/地区和语言结构比较特殊，没有特别的 class 或者 id 属性，所包含的层次关系也太复杂，所以这里为了简便，直接采用正则表达式来匹配信息，就没有那么复杂了：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 制片国家/地区</span></span><br><span class="line">value = re.findall(<span class="string">'&lt;span class="pl"&gt;制片国家/地区:&lt;/span&gt;(.*?)&lt;br/&gt;'</span>, movie_pages.text)</span><br><span class="line">country = [<span class="string">" "</span>.join([<span class="string">'制片国家:'</span>] + value)]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 语言</span></span><br><span class="line">value = re.findall(<span class="string">'&lt;span class="pl"&gt;语言:&lt;/span&gt;(.*?)&lt;br/&gt;'</span>, movie_pages.text)</span><br><span class="line">language = [<span class="string">" "</span>.join([<span class="string">'语言:'</span>] + value)]</span><br></pre></td></tr></table></figure><hr><h1 id="【3x00】返回解析数据"><a href="#【3x00】返回解析数据" class="headerlink" title="【3x00】返回解析数据"></a><font color="#FF0000">【3x00】返回解析数据</font></h1><p>其他剩下的信息皆可利用以上方法进行提取，所有信息提取完毕，最后使用 <code>zip()</code> 函数，将所有提取的对象作为参数，将对象中对应的元素打包成一个个元组，然后返回由这些元组组成的列表</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">return</span> zip(ranking, name, score, number, types, country, language, date, time, other_name, director, screenwriter, performer, m_url, imdb_url)</span><br></pre></td></tr></table></figure><hr><h1 id="【4x00】数据储存模块"><a href="#【4x00】数据储存模块" class="headerlink" title="【4x00】数据储存模块"></a><font color="#FF0000">【4x00】数据储存模块</font></h1><p>定义一个数据保存函数 <code>save_results()</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">save_results</span><span class="params">(data)</span>:</span></span><br><span class="line">    <span class="keyword">with</span> open(<span class="string">'douban.csv'</span>, <span class="string">'a'</span>, encoding=<span class="string">"utf-8-sig"</span>) <span class="keyword">as</span> fp:</span><br><span class="line">        writer = csv.writer(fp)</span><br><span class="line">        writer.writerow(data)</span><br></pre></td></tr></table></figure><p>注意：编码方式要设置为 <code>utf-8-sig</code>，如果设置为 <code>utf-8</code>，则文件会乱码，不设置编码，则可能会报一下类似错误：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">UnicodeEncodeError: <span class="string">'gbk'</span> codec can<span class="string">'t encode character '</span>\ub3c4<span class="string">' in position 9: illegal multibyte sequence</span></span><br></pre></td></tr></table></figure><p>可以看到错误出现在 <code>\ub3c4</code> 上，将该 Unicode 编码转换为中文为 <code>도</code>，发现正是排名第 19 的电影：熔炉 도가니，因为标题有韩文，所以在储存为 CSV 文件时会报编码错误，而将编码设置为 <code>utf-8-sig</code> 就不会报错，具体原因参见：<a href="https://www.jianshu.com/p/d9b25fb0a098" target="_blank" rel="noopener">《Python 中文日文汉字乱码处理utf-8-sig》</a></p><p>接下来是保存电影的海报到本地：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 保存电影海报</span></span><br><span class="line">poster = parse_movie.xpath(<span class="string">"//div[@id='mainpic']/a/img/@src"</span>)</span><br><span class="line">response = requests.get(poster[<span class="number">0</span>])</span><br><span class="line">name2 = re.sub(<span class="string">r'[A-Za-z\:\s]'</span>, <span class="string">''</span>, name[<span class="number">0</span>])</span><br><span class="line">poster_name = str(ranking[<span class="number">0</span>]) + <span class="string">' - '</span> + name2 + <span class="string">'.jpg'</span></span><br><span class="line">dir_name = <span class="string">'douban_poster'</span></span><br><span class="line"><span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(dir_name):</span><br><span class="line">    os.mkdir(dir_name)</span><br><span class="line">poster_path = dir_name + <span class="string">'/'</span> + poster_name</span><br><span class="line"><span class="keyword">with</span> open(poster_path, <span class="string">"wb"</span>)<span class="keyword">as</span> f:</span><br><span class="line">    f.write(response.content)</span><br></pre></td></tr></table></figure><p>解析电影详情页，使用 Xpath 提取海报的 URL，向该 URL 发送请求</p><p>图片以 <code>排名+电影名.jpg</code> 的方式命名，但是由于提取的电影名部分含有特殊字符，比如排名第 10 的电影：忠犬八公的故事 Hachi: A Dog’s Tale，其中有个冒号，而 Windows 文件命名是不能包含这些字符的，所以我们直接去除电影名包含的英文字符、空白字符、特殊字符，只留下中文，代码实现： <code>name2 = re.sub(r&#39;[A-Za-z\:\s]&#39;, &#39;&#39;, name[0])</code></p><p>定义一个文件夹名称 <code>douban_poster</code>，利用 <code>os</code> 模块判断当前是否存在该文件夹，若不存在就创建一个</p><p>最后以二进制形式保存海报到当前目录的 douban_poster 文件夹下</p><hr><h1 id="【5x00】完整代码"><a href="#【5x00】完整代码" class="headerlink" title="【5x00】完整代码"></a><font color="#FF0000">【5x00】完整代码</font></h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># =============================================</span></span><br><span class="line"><span class="comment"># --*-- coding: utf-8 --*--</span></span><br><span class="line"><span class="comment"># @Time    : 2019-09-27</span></span><br><span class="line"><span class="comment"># @Author  : TRHX</span></span><br><span class="line"><span class="comment"># @Blog    : www.itrhx.com</span></span><br><span class="line"><span class="comment"># @CSDN    : https://blog.csdn.net/qq_36759224</span></span><br><span class="line"><span class="comment"># @FileName: douban.py</span></span><br><span class="line"><span class="comment"># @Software: PyCharm</span></span><br><span class="line"><span class="comment"># =============================================</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">from</span> lxml <span class="keyword">import</span> etree</span><br><span class="line"><span class="keyword">import</span> csv</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line">headers = &#123;<span class="string">'User-Agent'</span>: <span class="string">'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/75.0.3770.142 Safari/537.36'</span>&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index_pages</span><span class="params">(number)</span>:</span></span><br><span class="line">    url = <span class="string">'https://movie.douban.com/top250?start=%s&amp;filter='</span> % number</span><br><span class="line">    index_response = requests.get(url=url, headers=headers)</span><br><span class="line">    tree = etree.HTML(index_response.text)</span><br><span class="line">    m_urls = tree.xpath(<span class="string">"//li/div/div/a/@href"</span>)</span><br><span class="line">    <span class="keyword">return</span> m_urls</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">parse_pages</span><span class="params">(url)</span>:</span></span><br><span class="line">    movie_pages = requests.get(url=url, headers=headers)</span><br><span class="line">    parse_movie = etree.HTML(movie_pages.text)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 排名</span></span><br><span class="line">    ranking = parse_movie.xpath(<span class="string">"//span[@class='top250-no']/text()"</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 电影名</span></span><br><span class="line">    name = parse_movie.xpath(<span class="string">"//h1/span[1]/text()"</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 评分</span></span><br><span class="line">    score = parse_movie.xpath(<span class="string">"//div[@class='rating_self clearfix']/strong/text()"</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 参评人数</span></span><br><span class="line">    value = parse_movie.xpath(<span class="string">"//span[@property='v:votes']/text()"</span>)</span><br><span class="line">    number = [<span class="string">" "</span>.join([<span class="string">'参评人数：'</span>] + value)]</span><br><span class="line">    <span class="comment"># value = parse_movie.xpath("//a[@class='rating_people']")</span></span><br><span class="line">    <span class="comment"># string = [value[0].xpath('string(.)')]</span></span><br><span class="line">    <span class="comment"># number = [a.strip() for a in string]</span></span><br><span class="line">    <span class="comment"># print(number)</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 类型</span></span><br><span class="line">    value = parse_movie.xpath(<span class="string">"//span[@property='v:genre']/text()"</span>)</span><br><span class="line">    types = [<span class="string">" "</span>.join([<span class="string">'类型：'</span>] + value)]</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 制片国家/地区</span></span><br><span class="line">    value = re.findall(<span class="string">'&lt;span class="pl"&gt;制片国家/地区:&lt;/span&gt;(.*?)&lt;br/&gt;'</span>, movie_pages.text)</span><br><span class="line">    country = [<span class="string">" "</span>.join([<span class="string">'制片国家:'</span>] + value)]</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 语言</span></span><br><span class="line">    value = re.findall(<span class="string">'&lt;span class="pl"&gt;语言:&lt;/span&gt;(.*?)&lt;br/&gt;'</span>, movie_pages.text)</span><br><span class="line">    language = [<span class="string">" "</span>.join([<span class="string">'语言:'</span>] + value)]</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 上映时期</span></span><br><span class="line">    value = parse_movie.xpath(<span class="string">"//span[@property='v:initialReleaseDate']/text()"</span>)</span><br><span class="line">    date = [<span class="string">" "</span>.join([<span class="string">'上映日期：'</span>] + value)]</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 片长</span></span><br><span class="line">    value = parse_movie.xpath(<span class="string">"//span[@property='v:runtime']/text()"</span>)</span><br><span class="line">    time = [<span class="string">" "</span>.join([<span class="string">'片长：'</span>] + value)]</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 又名</span></span><br><span class="line">    value = re.findall(<span class="string">'&lt;span class="pl"&gt;又名:&lt;/span&gt;(.*?)&lt;br/&gt;'</span>, movie_pages.text)</span><br><span class="line">    other_name = [<span class="string">" "</span>.join([<span class="string">'又名:'</span>] + value)]</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 导演</span></span><br><span class="line">    value = parse_movie.xpath(<span class="string">"//div[@id='info']/span[1]/span[@class='attrs']/a/text()"</span>)</span><br><span class="line">    director = [<span class="string">" "</span>.join([<span class="string">'导演:'</span>] + value)]</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 编剧</span></span><br><span class="line">    value = parse_movie.xpath(<span class="string">"//div[@id='info']/span[2]/span[@class='attrs']/a/text()"</span>)</span><br><span class="line">    screenwriter = [<span class="string">" "</span>.join([<span class="string">'编剧:'</span>] + value)]</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 主演</span></span><br><span class="line">    value = parse_movie.xpath(<span class="string">"//div[@id='info']/span[3]"</span>)</span><br><span class="line">    performer = [value[<span class="number">0</span>].xpath(<span class="string">'string(.)'</span>)]</span><br><span class="line"></span><br><span class="line">    <span class="comment"># URL</span></span><br><span class="line">    m_url = [<span class="string">'豆瓣链接：'</span> + movie_url]</span><br><span class="line"></span><br><span class="line">    <span class="comment"># IMDb链接</span></span><br><span class="line">    value = parse_movie.xpath(<span class="string">"//div[@id='info']/a/@href"</span>)</span><br><span class="line">    imdb_url = [<span class="string">" "</span>.join([<span class="string">'IMDb链接：'</span>] + value)]</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 保存电影海报</span></span><br><span class="line">    poster = parse_movie.xpath(<span class="string">"//div[@id='mainpic']/a/img/@src"</span>)</span><br><span class="line">    response = requests.get(poster[<span class="number">0</span>])</span><br><span class="line">    name2 = re.sub(<span class="string">r'[A-Za-z\:\s]'</span>, <span class="string">''</span>, name[<span class="number">0</span>])</span><br><span class="line">    poster_name = str(ranking[<span class="number">0</span>]) + <span class="string">' - '</span> + name2 + <span class="string">'.jpg'</span></span><br><span class="line">    dir_name = <span class="string">'douban_poster'</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(dir_name):</span><br><span class="line">        os.mkdir(dir_name)</span><br><span class="line">    poster_path = dir_name + <span class="string">'/'</span> + poster_name</span><br><span class="line">    <span class="keyword">with</span> open(poster_path, <span class="string">"wb"</span>)<span class="keyword">as</span> f:</span><br><span class="line">        f.write(response.content)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> zip(ranking, name, score, number, types, country, language, date, time, other_name, director, screenwriter, performer, m_url, imdb_url)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">save_results</span><span class="params">(data)</span>:</span></span><br><span class="line">    <span class="keyword">with</span> open(<span class="string">'douban.csv'</span>, <span class="string">'a'</span>, encoding=<span class="string">"utf-8-sig"</span>) <span class="keyword">as</span> fp:</span><br><span class="line">        writer = csv.writer(fp)</span><br><span class="line">        writer.writerow(data)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    num = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>, <span class="number">250</span>, <span class="number">25</span>):</span><br><span class="line">        movie_urls = index_pages(i)</span><br><span class="line">        <span class="keyword">for</span> movie_url <span class="keyword">in</span> movie_urls:</span><br><span class="line">            results = parse_pages(movie_url)</span><br><span class="line">            <span class="keyword">for</span> result <span class="keyword">in</span> results:</span><br><span class="line">                num += <span class="number">1</span></span><br><span class="line">                save_results(result)</span><br><span class="line">                print(<span class="string">'第'</span> + str(num) + <span class="string">'条电影信息保存完毕！'</span>)</span><br><span class="line">                time.sleep(<span class="number">3</span>)</span><br></pre></td></tr></table></figure><hr><h1 id="【6x00】数据截图"><a href="#【6x00】数据截图" class="headerlink" title="【6x00】数据截图"></a><font color="#FF0000">【6x00】数据截图</font></h1><fancybox><br><img src="https://cdn.jsdelivr.net/gh/TRHX/ImageHosting/ITRHX-PIC/A52/03.png" alt="03"><br></fancybox><fancybox><br><img src="https://cdn.jsdelivr.net/gh/TRHX/ImageHosting/ITRHX-PIC/A52/04.png" alt="04"><br></fancybox><hr><h1 id="【7x00】程序不足的地方"><a href="#【7x00】程序不足的地方" class="headerlink" title="【7x00】程序不足的地方"></a><font color="#FF0000">【7x00】程序不足的地方</font></h1><p>程序不足的地方：豆瓣电影有反爬机制，当程序爬取到大约 150 条数据的时候，IP 就会被封掉，第二天 IP 才会解封，可以考虑综合使用多个代理、多个 User-Agent、随机时间暂停等方法进行爬取</p>]]></content>
      
      
      <categories>
          
          <category> Python3 学习笔记 </category>
          
          <category> 爬虫实战 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 爬虫 </tag>
            
            <tag> 豆瓣电影 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python3 爬虫实战 — 猫眼电影TOP100</title>
      <link href="/2019/09/24/A51-pyspider-maoyantop100/"/>
      <url>/2019/09/24/A51-pyspider-maoyantop100/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><blockquote><p>爬取时间：2019-09-23<br>爬取难度：★☆☆☆☆☆<br>请求链接：<a href="https://maoyan.com/board/4" target="_blank" rel="noopener">https://maoyan.com/board/4</a><br>爬取目标：猫眼 TOP100 的电影名称、排名、主演、上映时间、评分、封面图地址，数据保存为 CSV 文件<br>涉及知识：请求库 requests、解析库 lxml、Xpath 语法、CSV 文件储存<br>完整代码：<a href="https://github.com/TRHX/Python3-Spider-Practice/tree/master/maoyan-top100" target="_blank" rel="noopener">https://github.com/TRHX/Python3-Spider-Practice/tree/master/maoyan-top100</a><br>其他爬虫实战代码合集（持续更新）：<a href="https://github.com/TRHX/Python3-Spider-Practice" target="_blank" rel="noopener">https://github.com/TRHX/Python3-Spider-Practice</a><br>爬虫实战专栏（持续更新）：<a href="https://itrhx.blog.csdn.net/article/category/9351278" target="_blank" rel="noopener">https://itrhx.blog.csdn.net/article/category/9351278</a></p></blockquote><hr><a id="more"></a><h1 id="【1x00】循环爬取网页模块"><a href="#【1x00】循环爬取网页模块" class="headerlink" title="【1x00】循环爬取网页模块"></a><font color="#FF0000">【1x00】循环爬取网页模块</font></h1><p>观察猫眼电影TOP100榜，请求地址为：<a href="https://maoyan.com/board/4" target="_blank" rel="noopener">https://maoyan.com/board/4</a></p><p>每页展示10条电影信息，翻页观察 url 变化：</p><p>第一页：<a href="https://maoyan.com/board/4" target="_blank" rel="noopener">https://maoyan.com/board/4</a></p><p>第二页：<a href="https://maoyan.com/board/4?offset=10" target="_blank" rel="noopener">https://maoyan.com/board/4?offset=10</a></p><p>第三页：<a href="https://maoyan.com/board/4?offset=20" target="_blank" rel="noopener">https://maoyan.com/board/4?offset=20</a></p><p>一共有10页，利用一个 for 循环，从 0 到 100 每隔 10 取一个值拼接到 url，实现循环爬取每一页</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index_page</span><span class="params">(number)</span>:</span></span><br><span class="line">    url = <span class="string">'https://maoyan.com/board/4?offset=%s'</span> % number</span><br><span class="line">    response = requests.get(url=url, headers=headers)</span><br><span class="line">    <span class="keyword">return</span> response.text</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>, <span class="number">100</span>, <span class="number">10</span>):</span><br><span class="line">        index = index_page(i)</span><br></pre></td></tr></table></figure><hr><h1 id="【2x00】解析模块"><a href="#【2x00】解析模块" class="headerlink" title="【2x00】解析模块"></a><font color="#FF0000">【2x00】解析模块</font></h1><p>定义一个页面解析函数 <code>parse_page()</code>，使用 lxml 解析库的 Xpath 方法依次提取电影排名（ranking）、电影名称（movie_name）、主演（performer）、上映时间（releasetime）、评分（score）、电影封面图 url（movie_img）</p><p>通过对主演部分的提取发现有多余的空格符和换行符，循环 performer 列表，使用 <code>strip()</code> 方法去除字符串头尾空格和换行符</p><p>电影评分分为整数部分和小数部分，依次提取两部分，循环遍历组成一个完整的评分</p><p>最后使用 <code>zip()</code> 函数，将所有提取的对象作为参数，将对象中对应的元素打包成一个个元组，然后返回由这些元组组成的列表</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">parse_page</span><span class="params">(content)</span>:</span></span><br><span class="line">    tree = etree.HTML(content)</span><br><span class="line">    <span class="comment"># 电影排名</span></span><br><span class="line">    ranking = tree.xpath(<span class="string">"//dd/i/text()"</span>)</span><br><span class="line">    <span class="comment"># 电影名称</span></span><br><span class="line">    movie_name = tree.xpath(<span class="string">'//p[@class="name"]/a/text()'</span>)</span><br><span class="line">    <span class="comment"># 主演</span></span><br><span class="line">    performer = tree.xpath(<span class="string">"//p[@class='star']/text()"</span>)</span><br><span class="line">    performer = [p.strip() <span class="keyword">for</span> p <span class="keyword">in</span> performer]</span><br><span class="line">    <span class="comment"># 上映时间</span></span><br><span class="line">    releasetime = tree.xpath(<span class="string">'//p[@class="releasetime"]/text()'</span>)</span><br><span class="line">    <span class="comment"># 评分</span></span><br><span class="line">    score1 = tree.xpath(<span class="string">'//p[@class="score"]/i[@class="integer"]/text()'</span>)</span><br><span class="line">    score2 = tree.xpath(<span class="string">'//p[@class="score"]/i[@class="fraction"]/text()'</span>)</span><br><span class="line">    score = [score1[i] + score2[i] <span class="keyword">for</span> i <span class="keyword">in</span> range(min(len(score1), len(score2)))]</span><br><span class="line">    <span class="comment"># 电影封面图</span></span><br><span class="line">    movie_img = tree.xpath(<span class="string">'//img[@class="board-img"]/@data-src'</span>)</span><br><span class="line">    <span class="keyword">return</span> zip(ranking, movie_name, performer, releasetime, score, movie_img)</span><br></pre></td></tr></table></figure><hr><h1 id="【3x00】数据储存模块"><a href="#【3x00】数据储存模块" class="headerlink" title="【3x00】数据储存模块"></a><font color="#FF0000">【3x00】数据储存模块</font></h1><p>定义一个 <code>save_results()</code> 函数，将所有数据保存到 <code>maoyan.csv</code> 文件</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">save_results</span><span class="params">(result)</span>:</span></span><br><span class="line">    <span class="keyword">with</span> open(<span class="string">'maoyan.csv'</span>, <span class="string">'a'</span>) <span class="keyword">as</span> fp:</span><br><span class="line">        writer = csv.writer(fp)</span><br><span class="line">        writer.writerow(result)</span><br></pre></td></tr></table></figure><hr><h1 id="【4x00】完整代码"><a href="#【4x00】完整代码" class="headerlink" title="【4x00】完整代码"></a><font color="#FF0000">【4x00】完整代码</font></h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># =============================================</span></span><br><span class="line"><span class="comment"># --*-- coding: utf-8 --*--</span></span><br><span class="line"><span class="comment"># @Time    : 2019-09-23</span></span><br><span class="line"><span class="comment"># @Author  : TRHX</span></span><br><span class="line"><span class="comment"># @Blog    : www.itrhx.com</span></span><br><span class="line"><span class="comment"># @CSDN    : https://blog.csdn.net/qq_36759224</span></span><br><span class="line"><span class="comment"># @FileName: maoyan.py</span></span><br><span class="line"><span class="comment"># @Software: PyCharm</span></span><br><span class="line"><span class="comment"># =============================================</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">from</span> lxml <span class="keyword">import</span> etree</span><br><span class="line"><span class="keyword">import</span> csv</span><br><span class="line"></span><br><span class="line">headers = &#123;</span><br><span class="line">    <span class="string">'User-Agent'</span>: <span class="string">'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/75.0.3770.142 Safari/537.36'</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index_page</span><span class="params">(number)</span>:</span></span><br><span class="line">    url = <span class="string">'https://maoyan.com/board/4?offset=%s'</span> % number</span><br><span class="line">    response = requests.get(url=url, headers=headers)</span><br><span class="line">    <span class="keyword">return</span> response.text</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">parse_page</span><span class="params">(content)</span>:</span></span><br><span class="line">    tree = etree.HTML(content)</span><br><span class="line">    <span class="comment"># 电影排名</span></span><br><span class="line">    ranking = tree.xpath(<span class="string">"//dd/i/text()"</span>)</span><br><span class="line">    <span class="comment"># 电影名称</span></span><br><span class="line">    movie_name = tree.xpath(<span class="string">'//p[@class="name"]/a/text()'</span>)</span><br><span class="line">    <span class="comment"># 主演</span></span><br><span class="line">    performer = tree.xpath(<span class="string">"//p[@class='star']/text()"</span>)</span><br><span class="line">    performer = [p.strip() <span class="keyword">for</span> p <span class="keyword">in</span> performer]</span><br><span class="line">    <span class="comment"># 上映时间</span></span><br><span class="line">    releasetime = tree.xpath(<span class="string">'//p[@class="releasetime"]/text()'</span>)</span><br><span class="line">    <span class="comment"># 评分</span></span><br><span class="line">    score1 = tree.xpath(<span class="string">'//p[@class="score"]/i[@class="integer"]/text()'</span>)</span><br><span class="line">    score2 = tree.xpath(<span class="string">'//p[@class="score"]/i[@class="fraction"]/text()'</span>)</span><br><span class="line">    score = [score1[i] + score2[i] <span class="keyword">for</span> i <span class="keyword">in</span> range(min(len(score1), len(score2)))]</span><br><span class="line">    <span class="comment"># 电影封面图</span></span><br><span class="line">    movie_img = tree.xpath(<span class="string">'//img[@class="board-img"]/@data-src'</span>)</span><br><span class="line">    <span class="keyword">return</span> zip(ranking, movie_name, performer, releasetime, score, movie_img)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">save_results</span><span class="params">(result)</span>:</span></span><br><span class="line">    <span class="keyword">with</span> open(<span class="string">'maoyan.csv'</span>, <span class="string">'a'</span>) <span class="keyword">as</span> fp:</span><br><span class="line">        writer = csv.writer(fp)</span><br><span class="line">        writer.writerow(result)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">print(<span class="string">'开始爬取数据...'</span>)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>, <span class="number">100</span>, <span class="number">10</span>):</span><br><span class="line">        index = index_page(i)</span><br><span class="line">        results = parse_page(index)</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> results:</span><br><span class="line">            save_results(i)</span><br><span class="line">print(<span class="string">'数据爬取完毕！'</span>)</span><br></pre></td></tr></table></figure><hr><h1 id="【4x00】数据截图"><a href="#【4x00】数据截图" class="headerlink" title="【4x00】数据截图"></a><font color="#FF0000">【4x00】数据截图</font></h1><fancybox><br><img src="https://cdn.jsdelivr.net/gh/TRHX/ImageHosting/ITRHX-PIC/A51/01.png" alt="01"><br></fancybox>]]></content>
      
      
      <categories>
          
          <category> Python3 学习笔记 </category>
          
          <category> 爬虫实战 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 爬虫 </tag>
            
            <tag> 猫眼电影 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python3 爬虫学习笔记 C18</title>
      <link href="/2019/09/21/A50-Python3-spider-C18/"/>
      <url>/2019/09/21/A50-Python3-spider-C18/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><blockquote><center><font color="#1BC3FB" size="4">Python3 爬虫学习笔记第十八章 —— 【爬虫框架 pyspider — 深入理解】</font></center></blockquote><a id="more"></a><hr><h1 id="【18-1】启动参数"><a href="#【18-1】启动参数" class="headerlink" title="【18.1】启动参数"></a><font color="#ff0000">【18.1】启动参数</font></h1><p>常用启动命令：<code>pyspider all</code>，完整命令结构为：<code>pyspider [OPTIONS] COMMAND [ARGS]</code>，OPTIONS 为可选参数，包含以下参数：</p><ul><li><font color="#ff0000"><strong>-c, –config FILENAME</strong></font>：指定配置文件名称</li><li><font color="#ff0000"><strong>–logging-config TEXT</strong></font>：日志配置文件名称，默认: pyspider/pyspider/logging.conf</li><li><font color="#ff0000"><strong>–debug</strong></font>：开启调试模式</li><li><font color="#ff0000"><strong>–queue-maxsize INTEGER</strong></font>：队列的最大长度</li><li><font color="#ff0000"><strong>–taskdb TEXT</strong></font>：taskdb 的数据库连接字符串，默认: sqlite</li><li><font color="#ff0000"><strong>–projectdb TEXT</strong></font>：projectdb 的数据库连接字符串，默认: sqlite</li><li><font color="#ff0000"><strong>–resultdb TEXT</strong></font>：resultdb 的数据库连接字符串，默认: sqlite</li><li><font color="#ff0000"><strong>–message-queue TEXT</strong></font>：消息队列连接字符串，默认: multiprocessing.Queue</li><li><font color="#ff0000"><strong>–phantomjs-proxy TEXT</strong></font>：PhantomJS 使用的代理，ip:port 的形式</li><li><font color="#ff0000"><strong>–data-path TEXT</strong></font>：数据库存放的路径</li><li><font color="#ff0000"><strong>–add-sys-path / –not-add-sys-path</strong></font>：将当前工作目录添加到python lib搜索路径</li><li><font color="#ff0000"><strong>–version</strong></font>：显示 pyspider 的版本信息</li><li><font color="#ff0000"><strong>–help</strong></font>：显示帮助信息</li></ul><p>配置文件为一个 JSON 文件，一般为 config.json 文件，常用配置如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="string">"taskdb"</span>: <span class="string">"mysql+taskdb://username:password@host:port/taskdb"</span>,</span><br><span class="line">  <span class="string">"projectdb"</span>: <span class="string">"mysql+projectdb://username:password@host:port/projectdb"</span>,</span><br><span class="line">  <span class="string">"resultdb"</span>: <span class="string">"mysql+resultdb://username:password@host:port/resultdb"</span>,</span><br><span class="line">  <span class="string">"message_queue"</span>: <span class="string">"amqp://username:password@host:port/%2F"</span>,</span><br><span class="line">  <span class="string">"webui"</span>: &#123;</span><br><span class="line">  <span class="string">"port"</span>: <span class="number">5000</span>,</span><br><span class="line">    <span class="string">"username"</span>: <span class="string">"some_name"</span>,</span><br><span class="line">    <span class="string">"password"</span>: <span class="string">"some_passwd"</span>,</span><br><span class="line">    <span class="string">"need-auth"</span>: true</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以设置对应的用户名，密码，端口等信息，使用命令 <code>pyspider -c config.json all</code> 即可运行</p><hr><h1 id="【18-2】运行单个组件"><a href="#【18-2】运行单个组件" class="headerlink" title="【18.2】运行单个组件"></a><font color="#ff0000">【18.2】运行单个组件</font></h1><p>pyspider 的架构主要分为 Scheduler（调度器）、Fetcher（抓取器）、Processer（处理器）三个部分，都可以单独运行，基本命令： <code>pyspider [component_name] [options]</code></p><hr><h2 id="【18-2-1】运行-Scheduler"><a href="#【18-2-1】运行-Scheduler" class="headerlink" title="【18.2.1】运行 Scheduler"></a><font color="#1BC3FB">【18.2.1】运行 Scheduler</font></h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pyspider scheduler [OPTIONS]</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">Options:</span><br><span class="line">  --xmlrpc /--no-xmlrpc</span><br><span class="line">  --xmlrpc-host TEXT</span><br><span class="line">  --xmlrpc-port INTEGER</span><br><span class="line">  --inqueue-limit INTEGER  任务队列的最大长度，如果满了则新的任务会被忽略</span><br><span class="line">  --delete-time INTEGER    设置为 delete 标记之前的删除时间</span><br><span class="line">  --active-tasks INTEGER   当前活跃任务数量配置</span><br><span class="line">  --loop-limit INTEGER     单轮最多调度的任务数量</span><br><span class="line">  --fail-pause-num INTEGER 上次失败时自动暂停项目暂停次数，任务失败，将<span class="number">0</span>设置为禁用</span><br><span class="line">  --scheduler-cls TEXT     Scheduler 使用的类</span><br><span class="line">  --threads TEXT           ThreadBaseScheduler 的线程号，默认值：<span class="number">4</span></span><br><span class="line">  --help                   显示帮助信息</span><br></pre></td></tr></table></figure><hr><h2 id="【18-2-2】运行-Fetcher"><a href="#【18-2-2】运行-Fetcher" class="headerlink" title="【18.2.2】运行 Fetcher"></a><font color="#1BC3FB">【18.2.2】运行 Fetcher</font></h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pyspider fetcher [OPTIONS]</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">Options:</span><br><span class="line">  --xmlrpc /--no-xmlrpc</span><br><span class="line">  --xmlrpc-host TEXT</span><br><span class="line">  --xmlrpc-port INTEGER</span><br><span class="line">  --poolsize INTEGER         同时请求的个数</span><br><span class="line">  --proxy TEXT               使用的代理</span><br><span class="line">  --user-agent TEXT          使用的 User-Agent</span><br><span class="line">  --timeout TEXT             超时时间</span><br><span class="line">  --phantomjs-endpoint TEXT  phantomjs 的端点，通过 pyspider 启动 phantomjs</span><br><span class="line">  --splash-endpoint TEXT     执行 splash 的端点：http://splash.readthedocs.io/en/stable/api.html execut</span><br><span class="line">  --fetcher-cls TEXT         Fetcher 使用的类</span><br><span class="line">  --help                     显示帮助信息</span><br></pre></td></tr></table></figure><hr><h2 id="【18-2-3】运行-Processer"><a href="#【18-2-3】运行-Processer" class="headerlink" title="【18.2.3】运行 Processer"></a><font color="#1BC3FB">【18.2.3】运行 Processer</font></h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pyspider processor [OPTIONS]</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Options:</span><br><span class="line">  --processor-cls TEXT  Processor 使用的类</span><br><span class="line">  --process-time-limit INTEGER    脚本处理时间限制</span><br><span class="line">  --help                          显示帮助信息</span><br></pre></td></tr></table></figure><hr><h2 id="【18-2-4】运行-WebUI"><a href="#【18-2-4】运行-WebUI" class="headerlink" title="【18.2.4】运行 WebUI"></a><font color="#1BC3FB">【18.2.4】运行 WebUI</font></h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pyspider webui [OPTIONS]</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">Options:</span><br><span class="line">  --host TEXT                   运行地址</span><br><span class="line">  --port INTEGER                运行端口</span><br><span class="line">  --cdn TEXT                    JS 和 CSS 的 CDN 服务器</span><br><span class="line">  --scheduler-rpc TEXT          Scheduler 的 xmlrpc 路径</span><br><span class="line">  --fetcher-rpc TEXT            Fetcher 的 xmlrpc 路径</span><br><span class="line">  --max-rate FLOAT              每个项目最大的 rate 值</span><br><span class="line">  --max-burst FLOAT             每个项目最大的 burst 值</span><br><span class="line">  --username TEXT               Auth 验证的用户名</span><br><span class="line">  --password TEXT               Auth 验证的密码</span><br><span class="line">  --need-auth                   是否需要验证</span><br><span class="line">  --webui-instance TEXT         运行时使用的 Flask 应用</span><br><span class="line">  --process-time-limit INTEGER  调试中的脚本处理时间限制</span><br><span class="line">  --help                        显示帮助信息</span><br></pre></td></tr></table></figure><hr><h1 id="【18-3】crawl-方法各参数"><a href="#【18-3】crawl-方法各参数" class="headerlink" title="【18.3】crawl() 方法各参数"></a><font color="#ff0000">【18.3】crawl() 方法各参数</font></h1><p>参数文档：<a href="http://docs.pyspider.org/en/latest/apis/self.crawl/" target="_blank" rel="noopener">http://docs.pyspider.org/en/latest/apis/self.crawl/</a></p><hr><ul><li><font color="#ff0000"><strong>url</strong></font>：爬取目标 URL，可以定义为单个 URL 字符串，也可以定义成 URL 列表</li></ul><hr><ul><li><font color="#ff0000"><strong>callback</strong></font>：回调函数，指定了该 URL 对应的响应内容用哪个方法来解析，示例：</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">on_start</span><span class="params">(self)</span>:</span></span><br><span class="line">  self.crawl(<span class="string">'http://www.itrhx.com/'</span>, callback=self.index_page)</span><br></pre></td></tr></table></figure><p>代码解释：指定 <code>callback</code> 为 <code>index_page</code>，代表爬取 <a href="http://www.itrhx.com/">http://www.itrhx.com/</a> 得到的响应会用 <code>index_page()</code> 方法来解析，而 <code>index_page()</code> 方法的第一个参数就是响应对象，如下所示：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index_page</span><span class="params">(self, response)</span>:</span></span><br><span class="line">  <span class="keyword">pass</span></span><br></pre></td></tr></table></figure><hr><ul><li><font color="#ff0000"><strong>age</strong></font>：任务的有效时间，如果某个任务在有效时间内且已经被执行，则它不会重复执行，有如下两种设置方法：</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">on_start</span><span class="params">(self)</span>:</span></span><br><span class="line">  self.crawl(<span class="string">'http://www.itrhx.com/'</span>, callback=self.callback, age=<span class="number">10</span>*<span class="number">24</span>*<span class="number">60</span>*<span class="number">60</span>)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@config(age=10 * 24 * 60 * 60)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">callback</span><span class="params">(self)</span>:</span></span><br><span class="line">    <span class="keyword">pass</span></span><br></pre></td></tr></table></figure><hr><ul><li><font color="#ff0000"><strong>priority</strong></font>：爬取任务的优先级，其值默认是 0，priority 的数值越大，对应的请求会越优先被调度，如下所示，<code>2.html</code> 页面将会优先爬取：</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index_page</span><span class="params">(self)</span>:</span></span><br><span class="line">  self.crawl(<span class="string">'http://www.itrhx.com/1.html'</span>, callback=self.index_page)</span><br><span class="line">  self.crawl(<span class="string">'http://www.itrhx.com/2.html'</span>, callback=self.detail_page, priority=<span class="number">1</span>)</span><br></pre></td></tr></table></figure><hr><ul><li><font color="#ff0000"><strong>exetime</strong></font>：设置定时任务，其值是时间戳，默认是 0，即代表立即执行，如下所示表示该任务会在 30 分钟之后执行：</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">on_start</span><span class="params">(self)</span>:</span></span><br><span class="line">  self.crawl(<span class="string">'http://www.itrhx.com/'</span>, callback=self.callback, exetime=time.time()+<span class="number">30</span>*<span class="number">60</span>)</span><br></pre></td></tr></table></figure><hr><ul><li><font color="#ff0000"><strong>retries</strong></font>：定义重试次数，其值默认是 3</li></ul><hr><ul><li><font color="#ff0000"><strong>itag</strong></font>：设置判定网页是否发生变化的节点值，在爬取时会判定次当前节点是否和上次爬取到的节点相同。如果节点相同，则证明页面没有更新，就不会重复爬取，如下所示：</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index_page</span><span class="params">(self, response)</span>:</span></span><br><span class="line">  <span class="keyword">for</span> item <span class="keyword">in</span> response.doc(<span class="string">'.item'</span>).items():</span><br><span class="line">      self.crawl(item.find(<span class="string">'a'</span>).attr.url, callback=self.detail_page, itag=item.find(<span class="string">'.update-time'</span>).text())</span><br></pre></td></tr></table></figure><p>代码解释：设置 <code>update-time</code> 这个节点的值为 itag，在下次爬取时就会首先检测这个值有没有发生变化，如果没有变化，则不再重复爬取，否则执行爬取</p><hr><ul><li><font color="#ff0000"><strong>auto_recrawl</strong></font>：开启时，爬取任务在过期后会重新执行，循环时间即定义的 age 时间长度，如下所示：</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">on_start</span><span class="params">(self)</span>:</span></span><br><span class="line">  self.crawl(<span class="string">'http://www.itrhx.com/'</span>, callback=self.callback, age=<span class="number">5</span>*<span class="number">60</span>*<span class="number">60</span>, auto_recrawl=<span class="keyword">True</span>)</span><br></pre></td></tr></table></figure><p>代码解释：定义 <code>age</code> 有效期为 5 小时，设置了 <code>auto_recrawl</code> 为 <code>True</code>，这样任务就会每 5 小时执行一次</p><hr><ul><li><font color="#ff0000"><strong>method</strong></font>：HTTP 请求方式，默认为 GET，如果想发起 POST 请求，可以将 method 设置为 POST</li></ul><hr><ul><li><font color="#ff0000"><strong>params</strong></font>：定义 GET 请求参数，如下所示表示两个等价的爬取任务：</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">on_start</span><span class="params">(self)</span>:</span></span><br><span class="line">  self.crawl(<span class="string">'http://httpbin.org/get'</span>, callback=self.callback, params=&#123;<span class="string">'a'</span>: <span class="number">123</span>, <span class="string">'b'</span>: <span class="string">'c'</span>&#125;)</span><br><span class="line">  self.crawl(<span class="string">'http://httpbin.org/get?a=123&amp;b=c'</span>, callback=self.callback)</span><br></pre></td></tr></table></figure><hr><ul><li><font color="#ff0000"><strong>data</strong></font>：POST 表单数据，当请求方式为 POST 时，我们可以通过此参数传递表单数据，如下所示：</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">on_start</span><span class="params">(self)</span>:</span></span><br><span class="line">  self.crawl(<span class="string">'http://httpbin.org/post'</span>, callback=self.callback, method=<span class="string">'POST'</span>, data=&#123;<span class="string">'a'</span>: <span class="number">123</span>, <span class="string">'b'</span>: <span class="string">'c'</span>&#125;)</span><br></pre></td></tr></table></figure><hr><ul><li><font color="#ff0000"><strong>files</strong></font>：上传的文件，需要指定文件名，如下所示：</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">on_start</span><span class="params">(self)</span>:</span></span><br><span class="line">  self.crawl(<span class="string">'http://httpbin.org/post'</span>, callback=self.callback, method=<span class="string">'POST'</span>, files=&#123;field: &#123;filename: <span class="string">'content'</span>&#125;&#125;)</span><br></pre></td></tr></table></figure><hr><ul><li><font color="#ff0000"><strong>user_agent</strong></font>：爬取使用的 User-Agent</li></ul><hr><ul><li><font color="#ff0000"><strong>headers</strong></font>：爬取时使用的 Headers，即 Request Headers</li></ul><hr><ul><li><font color="#ff0000"><strong>cookies</strong></font>：爬取时使用的 Cookies，为字典格式</li></ul><hr><ul><li><font color="#ff0000"><strong>connect_timeout</strong></font>：在初始化连接时的最长等待时间，默认为 20 秒</li></ul><hr><ul><li><font color="#ff0000"><strong>timeout</strong></font>：抓取网页时的最长等待时间，默认为 120 秒</li></ul><hr><ul><li><font color="#ff0000"><strong>allow_redirects</strong></font>：确定是否自动处理重定向，默认为 True</li></ul><hr><ul><li><font color="#ff0000"><strong>validate_cert</strong></font>：确定是否验证证书，此选项对 HTTPS 请求有效，默认为 True</li></ul><hr><ul><li><font color="#ff0000"><strong>proxy</strong></font>：爬取时使用的代理，支持用户名密码的配置，格式为 <code>username:password@hostname:port</code>，如下所示：</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">on_start</span><span class="params">(self)</span>:</span></span><br><span class="line">  self.crawl(<span class="string">'http://httpbin.org/get'</span>, callback=self.callback, proxy=<span class="string">'127.0.0.1:9743'</span>)</span><br></pre></td></tr></table></figure><p>也可以设置 <code>craw_config</code> 来实现全局配置，如下所示：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Handler</span><span class="params">(BaseHandler)</span>:</span></span><br><span class="line">  crawl_config = &#123;<span class="string">'proxy'</span>: <span class="string">'127.0.0.1:9743'</span>&#125;</span><br></pre></td></tr></table></figure><hr><ul><li><font color="#ff0000"><strong>fetch_type</strong></font>：开启 PhantomJS 渲染，如果遇到 JavaScript 渲染的页面，指定此字段即可实现 PhantomJS 的对接，pyspider 将会使用 PhantomJS 进行网页的抓取，如下所示：</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">on_start</span><span class="params">(self)</span>:</span></span><br><span class="line">  self.crawl(<span class="string">'https://www.taobao.com'</span>, callback=self.index_page, fetch_type=<span class="string">'js'</span>)</span><br></pre></td></tr></table></figure><hr><ul><li><font color="#ff0000"><strong>js_script</strong></font>：页面加载完毕后执行的 JavaScript 脚本，如下所示，页面加载成功后将执行页面混动的 JavaScript 代码，页面会下拉到最底部：</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">on_start</span><span class="params">(self)</span>:</span></span><br><span class="line">  self.crawl(<span class="string">'http://www.example.org/'</span>, callback=self.callback,</span><br><span class="line">             fetch_type=<span class="string">'js'</span>, js_script=<span class="string">'''</span></span><br><span class="line"><span class="string">             function() &#123;window.scrollTo(0,document.body.scrollHeight);</span></span><br><span class="line"><span class="string">                 return 123;</span></span><br><span class="line"><span class="string">             &#125;</span></span><br><span class="line"><span class="string">             '''</span>)</span><br></pre></td></tr></table></figure><hr><ul><li><font color="#ff0000"><strong>js_run_at</strong></font>：代表 JavaScript 脚本运行的位置，是在页面节点开头还是结尾，默认是结尾，即 <code>document-end</code></li></ul><hr><ul><li><font color="#ff0000"><strong>js_viewport_width/js_viewport_height</strong></font>：JavaScript 渲染页面时的窗口大小</li></ul><hr><ul><li><font color="#ff0000"><strong>load_images</strong></font>：在加载 JavaScript 页面时确定是否加载图片，默认为否</li></ul><hr><ul><li><font color="#ff0000"><strong>save</strong></font>：在不同的方法之间传递参数，如下所示：</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">on_start</span><span class="params">(self)</span>:</span></span><br><span class="line">  self.crawl(<span class="string">'http://www.example.org/'</span>, callback=self.callback,</span><br><span class="line">             save=&#123;<span class="string">'page'</span>: <span class="number">1</span>&#125;)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">callback</span><span class="params">(self, response)</span>:</span></span><br><span class="line">  <span class="keyword">return</span> response.save[<span class="string">'page'</span>]</span><br></pre></td></tr></table></figure><hr><ul><li><font color="#ff0000"><strong>cancel</strong></font>：取消任务，如果一个任务是 <code>ACTIVE</code> 状态的，则需要将 <code>force_update</code> 设置为 <code>True</code></li></ul><hr><ul><li><font color="#ff0000"><strong>force_update</strong></font>：即使任务处于 ACTIVE 状态，那也会强制更新状态</li></ul><hr><h1 id="【18-4】任务区分"><a href="#【18-4】任务区分" class="headerlink" title="【18.4】任务区分"></a><font color="#ff0000">【18.4】任务区分</font></h1><p>pyspider 判断两个任务是否是重复的是使用的是该任务对应的 URL 的 MD5 值作为任务的唯一 ID，如果 ID 相同，那么两个任务就会判定为相同，其中一个就不会爬取了</p><p>某些情况下，请求的链接是同一个，但是 POST 的参数不同，这时可以重写 <code>task_id()</code> 方法，利用 URL 和 POST 的参数来生成 ID，改变这个 ID 的计算方式来实现不同任务的区分：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">from</span> pyspider.libs.utils <span class="keyword">import</span> md5string</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_taskid</span><span class="params">(self, task)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> md5string(task[<span class="string">'url'</span>]+json.dumps(task[<span class="string">'fetch'</span>].get(<span class="string">'data'</span>, <span class="string">''</span>)))</span><br></pre></td></tr></table></figure><hr><h1 id="【18-5】全局配置"><a href="#【18-5】全局配置" class="headerlink" title="【18.5】全局配置"></a><font color="#ff0000">【18.5】全局配置</font></h1><p>pyspider 可以使用 <code>crawl_config</code> 来指定全局的配置，配置中的参数会和 <code>crawl()</code> 方法创建任务时的参数合并：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Handler</span><span class="params">(BaseHandler)</span>:</span></span><br><span class="line">    crawl_config = &#123;</span><br><span class="line">        <span class="string">'headers'</span>: &#123;<span class="string">'User-Agent'</span>: <span class="string">'GoogleBot'</span>,&#125;</span><br><span class="line">        <span class="string">'proxy'</span>: <span class="string">'127.0.0.1:9743'</span></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><hr><h1 id="【18-6】定时爬取"><a href="#【18-6】定时爬取" class="headerlink" title="【18.6】定时爬取"></a><font color="#ff0000">【18.6】定时爬取</font></h1><p>通过 <code>every</code> 属性来设置爬取的时间间隔，如下代码表示每天执行一次爬取：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@every(minutes=24 * 60)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">on_start</span><span class="params">(self)</span>:</span></span><br><span class="line">    <span class="keyword">for</span> url <span class="keyword">in</span> urllist:</span><br><span class="line">        self.crawl(url, callback=self.index_page)</span><br></pre></td></tr></table></figure><p>注意事项：如果设置了任务的有效时间（age 参数），因为在有效时间内爬取不会重复，所以要把有效时间设置得比重复时间更短，这样才可以实现定时爬取</p><p>错误举例：设定任务的过期时间为 5 天，而自动爬取的时间间隔为 1 天，当第二次尝试重新爬取的时候，pyspider 会监测到此任务尚未过期，便不会执行爬取：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@every(minutes=24 * 60)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">on_start</span><span class="params">(self)</span>:</span></span><br><span class="line">    self.crawl(<span class="string">'http://www.itrhx.com/'</span>, callback=self.index_page)</span><br><span class="line"></span><br><span class="line"><span class="meta">@config(age=5 * 24 * 60 * 60)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index_page</span><span class="params">(self)</span>:</span></span><br><span class="line">    <span class="keyword">pass</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Python3 学习笔记 </category>
          
          <category> 爬虫学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 爬虫 </tag>
            
            <tag> pyspider </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python3 爬虫学习笔记 C17</title>
      <link href="/2019/09/18/A49-Python3-spider-C17/"/>
      <url>/2019/09/18/A49-Python3-spider-C17/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><blockquote><center><font color="#1BC3FB" size="4">Python3 爬虫学习笔记第十七章 —— 【爬虫框架 pyspider — 基本使用】</font></center></blockquote><a id="more"></a><hr><h1 id="【17-1】初识-pyspider"><a href="#【17-1】初识-pyspider" class="headerlink" title="【17.1】初识 pyspider"></a><font color="#ff0000">【17.1】初识 pyspider</font></h1><p>pyspider 是由国人 Binux 编写的一个 Python 爬虫框架</p><ul><li>GitHub：<a href="https://github.com/binux/pyspider" target="_blank" rel="noopener">https://github.com/binux/pyspider</a> </li><li>官方文档（英文）：<a href="http://docs.pyspider.org/" target="_blank" rel="noopener">http://docs.pyspider.org/</a></li><li>非官方文档（中文）：<a href="http://book.crifan.com/books/python_spider_pyspider/website/" target="_blank" rel="noopener">http://book.crifan.com/books/python_spider_pyspider/website/</a></li><li>非官方文档（中文）：<a href="https://www.cntofu.com/book/156/index.md" target="_blank" rel="noopener">https://www.cntofu.com/book/156/index.md</a></li></ul><p>pyspider 特性：</p><ul><li>python 脚本控制，可以使用任何 html 解析包（内置 pyquery）</li><li>WEB 界面编写调试脚本，起停脚本，监控执行状态，查看活动历史，获取结果产出</li><li>支持 MySQL、MongoDB、Redis、SQLite、Elasticsearch、PostgreSQL</li><li>对接了 PhantomJS，支持抓取 JavaScript 的页面</li><li>组件可替换，支持单机和分布式部署，支持 Docker 部署</li><li>提供优先级控制、失败重试、定时抓取等功能</li></ul><p>Windows 系统安装 pyspider：</p><p>使用命令 <code>pip install pyspider</code> 安装，若报 PyCurl 相关错误，可访问 <a href="https://www.lfd.uci.edu/~gohlke/pythonlibs/#pycurl" target="_blank" rel="noopener">https://www.lfd.uci.edu/~gohlke/pythonlibs/#pycurl</a> 下载对应 wheel 文件并使用命令 <code>pip install whl文件名</code> 安装即可</p><p>如果要爬取 JavaScrip 渲染的页面，还要下载 PhantomJS，并将 PhantomJS 的路径配置到环境变量里，或者直接复制到 Python 安装目录的 Scripts 文件夹，需要用到数据库储存的话，同样要安装好相应的数据库</p><p>准备就绪后，使用 <code>pyspider all</code> 命令可启动 pyspider，浏览器打开：<a href="http://localhost:5000/" target="_blank" rel="noopener">http://localhost:5000/</a> 可以看到 pyspider 的 WebUI 管理界面</p><hr><h1 id="【17-2】使用-pyspider"><a href="#【17-2】使用-pyspider" class="headerlink" title="【17.2】使用 pyspider"></a><font color="#ff0000">【17.2】使用 pyspider</font></h1><hr><h2 id="【17-2-1】主界面"><a href="#【17-2-1】主界面" class="headerlink" title="【17.2.1】主界面"></a><font color="#1BC3FB">【17.2.1】主界面</font></h2><p>当成功创建了一个爬虫项目后，主界面如下所示：</p><fancybox><br><img src="https://cdn.jsdelivr.net/gh/TRHX/ImageHosting/ITRHX-PIC/A49/01.png" alt="01"><br></fancybox><ul><li><p><font color="#ff0000">Recent Active Tasks</font>：查看最近活动的任务，会跳转到一个页面有列表显示</p></li><li><p><font color="#ff0000">Create</font>：创建一个新的爬虫项目</p></li><li><p><font color="#ff0000">group</font>：定义项目的分组，以方便管理，若 group 设置为 delete，则该项目将会在24小时之后删除</p></li><li><p><font color="#ff0000">project name</font>：爬虫项目名称</p></li><li><p><font color="#ff0000">status</font>：项目状态，各状态如下：<br> <font color="#1BC3FB">TODO</font>：一个爬虫项目刚刚创建时的状态，此状态下可以编辑 Python 代码<br> <font color="#1BC3FB">STOP</font>：中止项目的运行<br> <font color="#1BC3FB">CHECKING</font>：当一个运行中的项目被编辑时项目状态会被自动设置成此状态并中止运行<br> <font color="#1BC3FB">DEBUG</font>：会运行爬虫，顾名思义找 BUG，一般来说用于调试阶段<br> <font color="#1BC3FB">RUNNING</font>：运行爬虫项目<br> <font color="#1BC3FB">PAUSED</font>：项目暂停运行，默认没有这个状态，但是当你在运行过程中突然断网就会出现此状态</p></li><li><p><font color="#ff0000">rate/burst</font>：当前的爬取速率，rate 代表 1 秒发出多少个请求，burst 相当于流量控制中的令牌桶算法的令牌数，rate 和 burst 设置的越大，爬取速率越快，速率的设定需要考虑本机性能和爬取过快被封的问题</p></li><li><p><font color="#ff0000">avg time</font>：任务平均时间</p></li><li><p><font color="#ff0000">process</font>：5m、1h、1d 分别指的是最近 5 分、1 小时、1 天内的请求情况，all 代表所有的请求情况，请求由不同颜色表示，蓝色的代表等待被执行的请求，绿色的代表成功的请求，黄色的代表请求失败后等待重试的请求，红色的代表失败次数过多而被忽略的请求</p></li><li><p><font color="#ff0000">actions</font>：对爬虫项目的操作，各操作如下：<br> <font color="#1BC3FB">Run</font>：立即执行任务，需要 status 为 RUNNING 或者 DEBUG 状态；假如在配置的调度执行时间内已经执行过，再点 run 是无效的，需要删除 task.db 里的数据才行<br> <font color="#1BC3FB">Active Tasks</font>：查看当前爬虫项目的活动任务<br> <font color="#1BC3FB">Results</font>：查看项目运行结果</p></li></ul><hr><h2 id="【17-2-2】项目界面"><a href="#【17-2-2】项目界面" class="headerlink" title="【17.2.2】项目界面"></a><font color="#1BC3FB">【17.2.2】项目界面</font></h2><p>创建一个爬虫项目，界面如下所示：</p><fancybox><br><img src="https://cdn.jsdelivr.net/gh/TRHX/ImageHosting/ITRHX-PIC/A49/02.png" alt="02"><br></fancybox><ul><li><font color="#ff0000">创建项目</font>：点击 Create 即可新建一个爬虫项目</li><li><font color="#ff0000">Project Name</font>：爬虫项目名称</li><li><font color="#ff0000">Start URL(s)</font> ：爬虫入口地址，选填，可在项目中更改</li></ul><p>项目创建完成进入调试界面：</p><fancybox><br><img src="https://cdn.jsdelivr.net/gh/TRHX/ImageHosting/ITRHX-PIC/A49/03.png" alt="03"><br></fancybox><ul><li><p><font color="#ff0000">调试界面右边</font>：编写代码的区域</p></li><li><p><font color="#ff0000">调试界面左边</font>：调试的区域，用于执行代码，显示输出信息等用途</p></li><li><p><font color="#ff0000">run</font>：单步调试爬虫程序，点击就可运行当前任务</p></li><li><p><font color="#ff0000">&lt; &gt; 箭头</font>：上一步、下一步，用于调试过程中切换到上一步骤或者下一步骤</p></li><li><p><font color="#ff0000">save</font>：保存当前代码，当代码变更后只有保存了再运行才能得到最新结果</p></li><li><p><font color="#ff0000">enable css selector helper</font>： CSS 选择器辅助程序</p></li><li><p><font color="#ff0000">web</font>：页面预览</p></li><li><p><font color="#ff0000">html</font>：可以查看页面源代码</p></li><li><p><font color="#ff0000">follows</font>：表示爬取请求，点击可查看所有的请求</p></li></ul><p>在新建一个爬虫项目的时候，pyspider 已经自动生成了如下代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- encoding: utf-8 -*-</span></span><br><span class="line"><span class="comment"># Created on 2019-09-17 21:18:13</span></span><br><span class="line"><span class="comment"># Project: 2</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> pyspider.libs.base_handler <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Handler</span><span class="params">(BaseHandler)</span>:</span></span><br><span class="line">    crawl_config = &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">    @every(minutes=24 * 60)</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">on_start</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.crawl(<span class="string">'__START_URL__'</span>, callback=self.index_page)</span><br><span class="line"></span><br><span class="line"><span class="meta">    @config(age=10 * 24 * 60 * 60)</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">index_page</span><span class="params">(self, response)</span>:</span></span><br><span class="line">        <span class="keyword">for</span> each <span class="keyword">in</span> response.doc(<span class="string">'a[href^="http"]'</span>).items():</span><br><span class="line">            self.crawl(each.attr.href, callback=self.detail_page)</span><br><span class="line"></span><br><span class="line"><span class="meta">    @config(priority=2)</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">detail_page</span><span class="params">(self, response)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> &#123;</span><br><span class="line">            <span class="string">"url"</span>: response.url,</span><br><span class="line">            <span class="string">"title"</span>: response.doc(<span class="string">'title'</span>).text(),</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><ul><li><p><font color="#ff0000">class Handler()：</font>pyspider 爬虫的主类，可以在此处定义爬取、解析、存储的逻辑。整个爬虫的功能只需要一个 Handler 即可完成</p></li><li><p><font color="#ff0000">crawl_config 属性：</font>项目的所有爬取配置将会统一定义到这里，如定义 headers、设置代理等，配置之后全局生效</p></li><li><p><font color="#ff0000">on_start() 方法：</font>爬取入口，初始的爬取请求会在这里产生，该方法通过调用 <code>crawl()</code> 方法即可新建一个爬取请求，第一个参数是爬取的 URL，另一个参数 <code>callback</code> 指定了这个页面爬取成功后用哪个方法进行解析，默认指定为 <code>index_page()</code> 方法，即如果这个 URL 对应的页面爬取成功了，那 Response 将交给 <code>index_page()</code> 方法解析</p></li><li><p><font color="#ff0000">index_page() 方法：</font>接收 Response 参数，Response 对接了 pyquery。直接调用 <code>doc()</code> 方法传入相应的 CSS 选择器，就可以像 pyquery 一样解析此页面，代码中默认是 <code>a[href^=&quot;http&quot;]</code>，即解析页面的所有链接，然后将链接遍历，再次调用了 <code>crawl()</code> 方法生成了新的爬取请求，同时再指定了 callback 为 detail_page，表示这些页面爬取成功了就调用 <code>detail_page()</code> 方法解析。<code>index_page()</code> 实现了两个功能，一是将爬取的结果进行解析，二是生成新的爬取请求</p></li><li><p><font color="#ff0000">detail_page() 方法：</font>同样接收 Response 作为参数。<code>detail_page()</code> 抓取的就是详情页的信息，就不会生成新的请求，只对 Response 对象做解析，解析之后将结果以字典的形式返回。当然也可以进行后续处理，如将结果保存到数据库等操作</p></li></ul><p>PS：pyspider 默认的 web 预览页面窗口较小，可以找到 pyspider 文件夹有个 debug.min.css 文件（如：E:\Python\Lib\site-packages\pyspider\webui\static\debug.min.css），搜索 iframe，将原样式：<code>iframe{border-width:0;width:100%}</code> 改为 <code>iframe{border-width:0;width:100%;height:400px !important}</code> 即可，清除浏览器缓存后就会生效！</p><hr><h1 id="【17-3】使用-pyspider-爬取去哪儿网"><a href="#【17-3】使用-pyspider-爬取去哪儿网" class="headerlink" title="【17.3】使用 pyspider 爬取去哪儿网"></a><font color="#ff0000">【17.3】使用 pyspider 爬取去哪儿网</font></h1><p>爬取地址：<a href="http://travel.qunar.com/travelbook/list.htm" target="_blank" rel="noopener">http://travel.qunar.com/travelbook/list.htm</a><br>爬取目标：去哪儿网旅游攻略，发帖作者、标题、正文等</p><hr><h2 id="【17-3-1】爬取首页"><a href="#【17-3-1】爬取首页" class="headerlink" title="【17.3.1】爬取首页"></a><font color="#1BC3FB">【17.3.1】爬取首页</font></h2><p>创建一个名为 qunar 的爬虫项目，Start URL 设置为 <a href="http://travel.qunar.com/travelbook/list.htm" target="_blank" rel="noopener">http://travel.qunar.com/travelbook/list.htm</a> ，点击 run 出现一个爬取请求</p><fancybox><br><img src="https://cdn.jsdelivr.net/gh/TRHX/ImageHosting/ITRHX-PIC/A49/04.png" alt="04"><br></fancybox><p>左边调试区域出现以下代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="string">"process"</span>: &#123;</span><br><span class="line">    <span class="string">"callback"</span>: <span class="string">"on_start"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="string">"project"</span>: <span class="string">"qunar"</span>,</span><br><span class="line">  <span class="string">"taskid"</span>: <span class="string">"data:,on_start"</span>,</span><br><span class="line">  <span class="string">"url"</span>: <span class="string">"data:,on_start"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>callback 为 on_start，表示此时执行了 <code>on_start()</code> 方法。在 <code>on_start()</code> 方法中，利用 <code>crawl()</code> 方法即可生成一个爬取请求，点击 index_page 链接后面的箭头会出现许多新的爬取请求，即首页所包含的所有链接</p><fancybox><br><img src="https://cdn.jsdelivr.net/gh/TRHX/ImageHosting/ITRHX-PIC/A49/05.png" alt="05"><br></fancybox><p>此时左边调试区域代码变为：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="string">"fetch"</span>: &#123;&#125;,</span><br><span class="line">  <span class="string">"process"</span>: &#123;</span><br><span class="line">    <span class="string">"callback"</span>: <span class="string">"index_page"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="string">"project"</span>: <span class="string">"qunar"</span>,</span><br><span class="line">  <span class="string">"schedule"</span>: &#123;</span><br><span class="line">    <span class="string">"age"</span>: <span class="number">864000</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="string">"taskid"</span>: <span class="string">"73a789f99528a2bdc3ab83a13902962a"</span>,</span><br><span class="line">  <span class="string">"url"</span>: <span class="string">"http://travel.qunar.com/travelbook/list.htm"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>callback 变为了 index_page，表示此时执行了 <code>index_page()</code> 方法。传入 <code>index_page()</code> 方法的 response 参数为刚才生成的第一个爬取请求的 response 对象，然后调用 <code>doc()</code> 方法，传入提取所有 a 节点的 CSS 选择器，获取 a 节点的属性 href，实现了页面所有链接的提取，随后遍历所有链接，调用 <code>crawl()</code> 方法，把每个链接构造成新的爬取请求，可以看到 follows 新生成了 229 个爬取请求。点击 web 按钮可以直接预览当前页面，点击 html 按钮可以查看此页面源代码</p><hr><h2 id="【17-3-2】信息匹配"><a href="#【17-3-2】信息匹配" class="headerlink" title="【17.3.2】信息匹配"></a><font color="#1BC3FB">【17.3.2】信息匹配</font></h2><p>代码 <code>for each in response.doc(&#39;a[href^=&quot;http&quot;]&#39;).items():</code> 实现了对整个页面链接的获取，我们需要提取网页的攻略的标题，内容等信息，那么直接替换 <code>doc()</code> 方法里的匹配语句即可，pyspider 提供了非常方便的 CSS 选择器，点击 <code>enable css selector helper</code> 按钮后，选择要匹配的信息并点击，再点击箭头 add to editor 即可得到匹配语句</p><fancybox><br><img src="https://cdn.jsdelivr.net/gh/TRHX/ImageHosting/ITRHX-PIC/A49/06.png" alt="06"><br></fancybox><p>完成了 CSS 选择器的替换，点击 <code>save</code> 保存，再次点击 <code>run</code> 重新执行 <code>index_page()</code> 方法，可以看到 follows 变为了 10 个，即抓取到了 10 篇攻略</p><hr><h2 id="【17-3-3】抓取下一页数据"><a href="#【17-3-3】抓取下一页数据" class="headerlink" title="【17.3.3】抓取下一页数据"></a><font color="#1BC3FB">【17.3.3】抓取下一页数据</font></h2><p>每一页只有 10 篇攻略，想要爬取所有页面的攻略，必须要得到下一页的数据，优化 <code>index_page()</code> 方法：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@config(age=10 * 24 * 60 * 60)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index_page</span><span class="params">(self, response)</span>:</span></span><br><span class="line">    <span class="keyword">for</span> each <span class="keyword">in</span> response.doc(<span class="string">'li &gt; .tit &gt; a'</span>).items():</span><br><span class="line">        self.crawl(each.attr.href, callback=self.detail_page)</span><br><span class="line">    next = response.doc(<span class="string">'.next'</span>).attr.href</span><br><span class="line">    self.crawl(next, callback=self.index_page)</span><br></pre></td></tr></table></figure><p>匹配下一页按钮，获取下一页按钮的 URL 并赋值给 next，将该 URL 传给 <code>crawl()</code> 方法，指定回调函数为 <code>index_page()</code> 方法，这样会再次调用 <code>index_page()</code> 方法，提取下一页的攻略标题</p><hr><h2 id="【17-3-4】抓取JS渲染数据"><a href="#【17-3-4】抓取JS渲染数据" class="headerlink" title="【17.3.4】抓取JS渲染数据"></a><font color="#1BC3FB">【17.3.4】抓取JS渲染数据</font></h2><p>随便点击一个获取到的攻略，预览该页面，可以观察到头图一直在加载中，切换到 html 查看源代码页面，可以观察到没有 img 节点，那么此处就是后期经过 JavaScript 渲染后才出现的</p><fancybox><br><img src="https://cdn.jsdelivr.net/gh/TRHX/ImageHosting/ITRHX-PIC/A49/07.png" alt="07"><br></fancybox><p>针对 JavaScript 渲染页面，可以通过 PhantomJS 来实现，具体到 pyspider 中，只需要在 <code>index_page()</code> 的 <code>crawl()</code> 抓取方法中添加一个参数 <code>fetch_type</code> 即可：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@config(age=10 * 24 * 60 * 60)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index_page</span><span class="params">(self, response)</span>:</span></span><br><span class="line">    <span class="keyword">for</span> each <span class="keyword">in</span> response.doc(<span class="string">'li &gt; .tit &gt; a'</span>).items():</span><br><span class="line">        self.crawl(each.attr.href, callback=self.detail_page, fetch_type=<span class="string">'js'</span>)</span><br><span class="line">    next = response.doc(<span class="string">'.next'</span>).attr.href</span><br><span class="line">    self.crawl(next, callback=self.index_page)</span><br></pre></td></tr></table></figure><p>保存之后再次运行即可看到正常页面</p><hr><h2 id="【17-3-5】抓取所有数据"><a href="#【17-3-5】抓取所有数据" class="headerlink" title="【17.3.5】抓取所有数据"></a><font color="#1BC3FB">【17.3.5】抓取所有数据</font></h2><p>改写 <code>detail_page()</code> 方法，同样通过 CSS 选择器提取 URL、标题、日期、作者、正文、图片等信息：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@config(priority=2)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">detail_page</span><span class="params">(self, response)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        <span class="string">'url'</span>: response.url,</span><br><span class="line">        <span class="string">'title'</span>: response.doc(<span class="string">'#booktitle'</span>).text(),</span><br><span class="line">        <span class="string">'date'</span>: response.doc(<span class="string">'.when .data'</span>).text(),</span><br><span class="line">        <span class="string">'day'</span>: response.doc(<span class="string">'.howlong .data'</span>).text(),</span><br><span class="line">        <span class="string">'who'</span>: response.doc(<span class="string">'.who .data'</span>).text(),</span><br><span class="line">        <span class="string">'text'</span>: response.doc(<span class="string">'#b_panel_schedule'</span>).text(),</span><br><span class="line">        <span class="string">'image'</span>: response.doc(<span class="string">'.cover_img'</span>).attr.src</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><hr><h2 id="【17-3-6】启动爬虫项目"><a href="#【17-3-6】启动爬虫项目" class="headerlink" title="【17.3.6】启动爬虫项目"></a><font color="#1BC3FB">【17.3.6】启动爬虫项目</font></h2><p>该爬虫项目完整代码如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- encoding: utf-8 -*-</span></span><br><span class="line"><span class="comment"># Created on 2019-09-18 09:48:29</span></span><br><span class="line"><span class="comment"># Project: qunar</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> pyspider.libs.base_handler <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Handler</span><span class="params">(BaseHandler)</span>:</span></span><br><span class="line">    crawl_config = &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">    @every(minutes=24 * 60)</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">on_start</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.crawl(<span class="string">'http://travel.qunar.com/travelbook/list.htm'</span>, callback=self.index_page)</span><br><span class="line"></span><br><span class="line"><span class="meta">    @config(age=10 * 24 * 60 * 60)</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">index_page</span><span class="params">(self, response)</span>:</span></span><br><span class="line">        <span class="keyword">for</span> each <span class="keyword">in</span> response.doc(<span class="string">'li &gt; .tit &gt; a'</span>).items():</span><br><span class="line">            self.crawl(each.attr.href, callback=self.detail_page, fetch_type=<span class="string">'js'</span>)</span><br><span class="line">        next = response.doc(<span class="string">'.next'</span>).attr.href</span><br><span class="line">        self.crawl(next, callback=self.index_page)</span><br><span class="line"></span><br><span class="line"><span class="meta">    @config(priority=2)</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">detail_page</span><span class="params">(self, response)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> &#123;</span><br><span class="line">            <span class="string">'url'</span>: response.url,</span><br><span class="line">            <span class="string">'title'</span>: response.doc(<span class="string">'#booktitle'</span>).text(),</span><br><span class="line">            <span class="string">'date'</span>: response.doc(<span class="string">'.when .data'</span>).text(),</span><br><span class="line">            <span class="string">'day'</span>: response.doc(<span class="string">'.howlong .data'</span>).text(),</span><br><span class="line">            <span class="string">'who'</span>: response.doc(<span class="string">'.who .data'</span>).text(),</span><br><span class="line">            <span class="string">'text'</span>: response.doc(<span class="string">'#b_panel_schedule'</span>).text(),</span><br><span class="line">            <span class="string">'image'</span>: response.doc(<span class="string">'.cover_img'</span>).attr.src</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><p>保存代码后，回到主界面，将项目 status 修改为 RUNNING ，点击 actions 的 run 按钮即可启动爬虫</p><fancybox><br><img src="https://cdn.jsdelivr.net/gh/TRHX/ImageHosting/ITRHX-PIC/A49/08.png" alt="08"><br></fancybox><p>点击 Active Tasks，即可查看最近请求的详细状况：</p><fancybox><br><img src="https://cdn.jsdelivr.net/gh/TRHX/ImageHosting/ITRHX-PIC/A49/09.png" alt="09"><br></fancybox><p>点击 Results，即可查看所有的爬取结果：</p><fancybox><br><img src="https://cdn.jsdelivr.net/gh/TRHX/ImageHosting/ITRHX-PIC/A49/10.png" alt="10"><br></fancybox><p>另外，右上角还可以选择 JSON、CSV 格式</p>]]></content>
      
      
      <categories>
          
          <category> Python3 学习笔记 </category>
          
          <category> 爬虫学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 爬虫 </tag>
            
            <tag> pyspider </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo 博客提交百度、谷歌搜索引擎收录</title>
      <link href="/2019/09/17/A48-submit-search-engine-inclusion/"/>
      <url>/2019/09/17/A48-submit-search-engine-inclusion/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="●-写在前面（必看）"><a href="#●-写在前面（必看）" class="headerlink" title="● 写在前面（必看）"></a><font color="#ff0000">● 写在前面（必看）</font></h1><p>网站在没有提交搜索引擎收录之前，直接搜索你网站的内容是搜不到的，只有提交搜索引擎之后，搜索引擎才能收录你的站点，通过爬虫抓取你网站的东西，<font color="#ff0000">对于 hexo 博客来说，如果你是部署在 GitHub Pages，那么你是无法被百度收录的，因为 GitHub 禁止了百度爬虫</font>，最常见的解决办法是双线部署到 Coding Pages 和 GitHub Pages，因为百度爬虫可以爬取到 Coding 上的内容，从而实现百度收录，如果你的 hexo 博客还没有实现双线部署，请参考：<a href="https://blog.csdn.net/qq_36759224/article/details/100879609" target="_blank" rel="noopener">《Hexo 双线部署到 Coding Pages 和 GitHub Pages 并实现全站 HPPTS》</a>，另外百度收录的所需的时间较长，大约半个月左右才会看到效果！</p><hr><h1 id="●-查看网站是否被收录"><a href="#●-查看网站是否被收录" class="headerlink" title="● 查看网站是否被收录"></a><font color="#ff0000">● 查看网站是否被收录</font></h1><p>首先我们可以输入 <code>site:域名</code> 来查看域名是否被搜索引擎收录，如下图所示，表示没有收录：</p><fancybox><br><img src="https://cdn.jsdelivr.net/gh/TRHX/ImageHosting/ITRHX-PIC/A48/01.png" alt="01"><br></fancybox><hr><h1 id="●-百度资源平台添加网站"><a href="#●-百度资源平台添加网站" class="headerlink" title="● 百度资源平台添加网站"></a><font color="#ff0000">● 百度资源平台添加网站</font></h1><p>访问<a href="https://ziyuan.baidu.com/" target="_blank" rel="noopener">百度搜索资源平台官网</a>，注册或者登陆百度账号，依次选择【用户中心】-【站点管理】，添加你的网站，在添加站点时会让你选择协议头（http 或者 https），如果选择 https，它会验证你的站点，大约能在一天之内完成，我的网站已经实现了全站 https，因此选择了 https 协议，但是不知道为什么始终验证失败，实在是无解，只能选择 http 协议了，如果你的站点也实现了全站 https，也可以尝试一下</p><fancybox><br><img src="https://cdn.jsdelivr.net/gh/TRHX/ImageHosting/ITRHX-PIC/A48/02.png" alt="02"><br></fancybox><p>之后会让你验证网站所有权，提供三种验证方式：</p><ul><li>文件验证：下载给定的文件，将其放到本地<font color="#ff0000">主题目录 source 文件夹</font>，然后部署上去完成验证</li><li>HTML 标签验证：一般是给一个 meta 标签，放到首页 <code>&lt;head&gt;</code> 与 <code>&lt;/head&gt;</code> 标签之间即可完成验证</li><li>CNAME 验证：个人觉得这种方法最简单，去域名 DNS 添加一个 CNAME 记录即可完成验证</li></ul><fancybox><br><img src="https://cdn.jsdelivr.net/gh/TRHX/ImageHosting/ITRHX-PIC/A48/03.png" alt="03"><br></fancybox><fancybox><br><img src="https://cdn.jsdelivr.net/gh/TRHX/ImageHosting/ITRHX-PIC/A48/04.png" alt="04"><br></fancybox><hr><h1 id="●-提交百度搜索"><a href="#●-提交百度搜索" class="headerlink" title="● 提交百度搜索"></a><font color="#ff0000">● 提交百度搜索</font></h1><p>百度提供了自动提交和手动提交两种方式，其中自动提交又分为主动推送、自动推送和 sitemap 三种方式，以下是官方给出的解释：</p><ul><li><p>主动推送：最为快速的提交方式，推荐您将站点当天新产出链接立即通过此方式推送给百度，以保证新链接可以及时被百度收录</p></li><li><p>自动推送：是轻量级链接提交组件，将自动推送的 JS 代码放置在站点每一个页面源代码中，当页面被访问时，页面链接会自动推送给百度，有利于新页面更快被百度发现</p></li><li><p>sitemap：您可以定期将网站链接放到sitemap中，然后将sitemap提交给百度。百度会周期性的抓取检查您提交的sitemap，对其中的链接进行处理，但收录速度慢于主动推送</p></li><li><p>手动提交：如果您不想通过程序提交，那么可以采用此种方式，手动将链接提交给百度</p></li></ul><p>四种提交方式对比：</p><table><thead><tr><th style="text-align:center">方式</th><th style="text-align:center">主动推送</th><th style="text-align:center">自动推送</th><th style="text-align:center">Sitemap</th><th style="text-align:center">手动提交</th></tr></thead><tbody><tr><td style="text-align:center">速度</td><td style="text-align:center">最快</td><td style="text-align:center">——</td><td style="text-align:center">——</td><td style="text-align:center">——</td></tr><tr><td style="text-align:center">开发成本</td><td style="text-align:center">高</td><td style="text-align:center">低</td><td style="text-align:center">中</td><td style="text-align:center">不需开发</td></tr><tr><td style="text-align:center">可提交量</td><td style="text-align:center">低</td><td style="text-align:center">高</td><td style="text-align:center">高</td><td style="text-align:center">低</td></tr><tr><td style="text-align:center">是否建议提交历史连接</td><td style="text-align:center">否</td><td style="text-align:center">是</td><td style="text-align:center">是</td><td style="text-align:center">是</td></tr><tr><td style="text-align:center">和其他提交方法是否有冲突</td><td style="text-align:center">无</td><td style="text-align:center">无</td><td style="text-align:center">无</td><td style="text-align:center">无</td></tr></tbody></table><p><strong>个人推荐同时使用主动推送和 sitemap 方式</strong>，下面将逐一介绍这四种提交方式的具体实现方法</p><hr><h2 id="●-主动推送"><a href="#●-主动推送" class="headerlink" title="● 主动推送"></a><font color="#1BC3FB">● 主动推送</font></h2><p>在博客根目录安装插件 <code>npm install hexo-baidu-url-submit --save</code>，然后在根目录 <code>_config.yml</code> 文件里写入以下配置：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">baidu_url_submit:</span><br><span class="line">  count: 1               # 提交最新的多少个链接</span><br><span class="line">  host: www.itrhx.com    # 在百度站长平台中添加的域名</span><br><span class="line">  token: your_token      # 秘钥</span><br><span class="line">  path: baidu_urls.txt   # 文本文档的地址， 新链接会保存在此文本文档里</span><br></pre></td></tr></table></figure><p>其中的 <code>token</code> 可以在【链接提交】-【自动提交】-【主动推送】下面看到，接口调用地址最后面 <code>token=xxxxx</code> 即为你的 <code>token</code></p><fancybox><br><img src="https://cdn.jsdelivr.net/gh/TRHX/ImageHosting/ITRHX-PIC/A48/05.png" alt="05"><br></fancybox><p>同样是在根目录的 <code>_config.yml</code> 文件，大约第 17 行处，url 要改为在百度站长平台添加的域名，也就是你网站的首页地址：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># URL</span><br><span class="line">url: https://www.itrhx.com</span><br><span class="line">root: /</span><br><span class="line">permalink: :year/:month/:day/:title/</span><br></pre></td></tr></table></figure><p>最后，加入新的 deployer：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"># Deployment</span><br><span class="line">## Docs: https://hexo.io/docs/deployment.html</span><br><span class="line">deploy:</span><br><span class="line">- type: git</span><br><span class="line">  repository:</span><br><span class="line">    github: git@github.com:TRHX/TRHX.github.io.git  # 这是原来的 github 配置</span><br><span class="line">    coding: git@git.dev.tencent.com:TRHX/TRHX.git   # 这是原来的 coding 配置</span><br><span class="line">  branch: master</span><br><span class="line">- type: baidu_url_submitter                         # 这是新加的主动推送</span><br></pre></td></tr></table></figure><p>最后执行 <code>hexo g -d</code> 部署一遍即可实现主动推送，推送成功的标志是：在执行部署命令最后会显示类似如下代码：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#123;<span class="string">"remain"</span>:4999953,<span class="string">"success"</span>:47&#125;</span><br><span class="line">INFO  Deploy <span class="keyword">done</span>: baidu_url_submitter</span><br></pre></td></tr></table></figure><p>这表示有 47 个页面已经主动推送成功，remain 的意思是当天剩余的可推送 url 条数</p><p>主动推送相关原理介绍：</p><ul><li>新链接的产生：hexo generate 会产生一个文本文件，里面包含最新的链接</li><li>新链接的提交：hexo deploy 会从上述文件中读取链接，提交至百度搜索引擎</li></ul><p>该插件的 GitHub 地址：<a href="https://github.com/huiwang/hexo-baidu-url-submit" target="_blank" rel="noopener">https://github.com/huiwang/hexo-baidu-url-submit</a></p><hr><h2 id="●-自动推送"><a href="#●-自动推送" class="headerlink" title="● 自动推送"></a><font color="#1BC3FB">● 自动推送</font></h2><p>关于自动推送百度官网给出的解释是：自动推送是百度搜索资源平台为提高站点新增网页发现速度推出的工具，安装自动推送JS代码的网页，在页面被访问时，页面URL将立即被推送给百度</p><fancybox><br><img src="https://cdn.jsdelivr.net/gh/TRHX/ImageHosting/ITRHX-PIC/A48/06.png" alt="06"><br></fancybox><p>此时要注意，有些 hexo 主题集成了这项功能，比如 next 主题，在 <code>themes\next\layout_scripts\</code> 下有个 <code>baidu_push.swig</code> 文件，我们只需要把如下代码粘贴到该文件，然后在主题配置文件设置 <code>baidu_push: true</code> 即可</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&#123;% <span class="keyword">if</span> theme.baidu_push %&#125;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> bp = <span class="built_in">document</span>.createElement(<span class="string">'script'</span>);</span><br><span class="line">    <span class="keyword">var</span> curProtocol = <span class="built_in">window</span>.location.protocol.split(<span class="string">':'</span>)[<span class="number">0</span>];</span><br><span class="line">    <span class="keyword">if</span> (curProtocol === <span class="string">'https'</span>) &#123;</span><br><span class="line">        bp.src = <span class="string">'https://zz.bdstatic.com/linksubmit/push.js'</span>;        </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        bp.src = <span class="string">'http://push.zhanzhang.baidu.com/push.js'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">var</span> s = <span class="built_in">document</span>.getElementsByTagName(<span class="string">"script"</span>)[<span class="number">0</span>];</span><br><span class="line">    s.parentNode.insertBefore(bp, s);</span><br><span class="line">&#125;)();</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br><span class="line"><span class="regexp">&#123;% endif %&#125;</span></span><br></pre></td></tr></table></figure><p>然而大部分主题是没有集成这项功能的，对于大部分主题来说，我们可以把以下代码粘贴到 <code>head.ejs</code> 文件的 <code>&lt;head&gt;</code> 与 <code>&lt;/head&gt;</code> 标签之间即可，从而实现自动推送（比如我使用的是 <a href="https://xaoxuu.com/wiki/material-x/" target="_blank" rel="noopener">Material X</a> 主题，那么只需要把代码粘贴到 <code>\themes\material-x\layout\_partial\head.ejs</code> 中即可）</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> bp = <span class="built_in">document</span>.createElement(<span class="string">'script'</span>);</span><br><span class="line">    <span class="keyword">var</span> curProtocol = <span class="built_in">window</span>.location.protocol.split(<span class="string">':'</span>)[<span class="number">0</span>];</span><br><span class="line">    <span class="keyword">if</span> (curProtocol === <span class="string">'https'</span>) &#123;</span><br><span class="line">        bp.src = <span class="string">'https://zz.bdstatic.com/linksubmit/push.js'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        bp.src = <span class="string">'http://push.zhanzhang.baidu.com/push.js'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">var</span> s = <span class="built_in">document</span>.getElementsByTagName(<span class="string">"script"</span>)[<span class="number">0</span>];</span><br><span class="line">    s.parentNode.insertBefore(bp, s);</span><br><span class="line">&#125;)();</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure><hr><h2 id="●-sitemap"><a href="#●-sitemap" class="headerlink" title="● sitemap"></a><font color="#1BC3FB">● sitemap</font></h2><p>首先我们要使用以下命令生成一个网站地图：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-generator-sitemap --save     </span><br><span class="line">npm install hexo-generator-baidu-sitemap --save</span><br></pre></td></tr></table></figure><p>这里也注意一下，将根目录的 <code>_config.yml</code> 文件，大约第 17 行处，url 改为在百度站长平台添加的域名，也就是你网站的首页地址：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># URL</span><br><span class="line">url: https://www.itrhx.com</span><br><span class="line">root: /</span><br><span class="line">permalink: :year/:month/:day/:title/</span><br></pre></td></tr></table></figure><p>然后使用命令 <code>hexo g -d</code> 将网站部署上去，然后访问 <code>你的首页/sitemap.xml</code> 或者 <code>你的首页/baidusitemap.xml</code> 就可以看到网站地图了</p><p>比如我的是：<a href="https://www.itrhx.com/baidusitemap.xml">https://www.itrhx.com/baidusitemap.xml</a> 或者 <a href="https://www.itrhx.com/sitemap.xml">https://www.itrhx.com/sitemap.xml</a></p><p>其中 <code>sitemap.xml</code> 文件是搜索引擎通用的 sitemap 文件，<code>baidusitemap.xml</code> 是百度专用的 sitemap 文件</p><p>然后来到百度站长平台的 sitemap 提交页面，将你的 sitemap 地址提交即可，如果成功的话状态会显示为正常，初次提交要等几分钟，sitemap.xml 相比 baidusitemap.xml 来说等待时间也会更长，如果以后你博客有新的文章或其他页面，可以点击<strong>手动更新文件</strong>，更新一下新的 sitemap</p><fancybox><br><img src="https://cdn.jsdelivr.net/gh/TRHX/ImageHosting/ITRHX-PIC/A48/07.png" alt="07"><br></fancybox><hr><h2 id="●-手动提交"><a href="#●-手动提交" class="headerlink" title="● 手动提交"></a><font color="#1BC3FB">● 手动提交</font></h2><p>手动提交不需要其他额外操作，直接把需要收录的页面的 url 提交即可，这种方法效率较低，更新较慢，不推荐使用</p><fancybox><br><img src="https://cdn.jsdelivr.net/gh/TRHX/ImageHosting/ITRHX-PIC/A48/08.png" alt="08"><br></fancybox><hr><h1 id="●-提交谷歌搜索"><a href="#●-提交谷歌搜索" class="headerlink" title="● 提交谷歌搜索"></a><font color="#ff0000">● 提交谷歌搜索</font></h1><p>提交谷歌搜索引擎比较简单，在提交之前，我们依然可以使用 <code>site:域名</code> 查看网站是否被收录，我的网站搭建了有差不多一年了，之前也没提交过收录，不过谷歌爬虫的确是强大，即使没有提交过，现在也能看到有一百多条结果了：</p><fancybox><br><img src="https://cdn.jsdelivr.net/gh/TRHX/ImageHosting/ITRHX-PIC/A48/09.png" alt="09"><br></fancybox><p>接下来我们将网站提交谷歌搜索引擎搜索，进入<a href="https://www.google.com/webmasters/" target="_blank" rel="noopener">谷歌站长平台</a>，登录你的谷歌账号之后会让你验证网站所有权：</p><fancybox><br><img src="https://cdn.jsdelivr.net/gh/TRHX/ImageHosting/ITRHX-PIC/A48/10.png" alt="10"><br></fancybox><p>有两种验证方式，分别是网域和网址前缀，两种资源类型区别如下：</p><table><thead><tr><th></th><th style="text-align:left"><center>网址前缀资源</center></th><th style="text-align:left"><center>网域资源</center></th></tr></thead><tbody><tr><td>说明</td><td style="text-align:left">仅包含具有指定前缀（包括协议 http/https）的网址。如果希望资源匹配任何协议或子网域（http/https/www./m. 等），建议改为添加网域资源。</td><td style="text-align:left">包括所有子网域（m、www 等）和多种协议（http、https、ftp）的网域级资源。</td></tr><tr><td>验证</td><td style="text-align:left">多种类型</td><td style="text-align:left">仅 DNS 记录验证</td></tr><tr><td>示例</td><td style="text-align:left">资源 <a href="http://example.com/" target="_blank" rel="noopener">http://example.com/</a><br><br><font color="#ff0000">✔</font> <a href="http://example.com/dresses/1234" target="_blank" rel="noopener">http://example.com/dresses/1234</a><br><font color="#ff0000">X</font> <a href="https://example.com/dresses/1234" target="_blank" rel="noopener">https://example.com/dresses/1234</a><br><font color="#ff0000">X</font> <a href="http://www.example.com/dresses/1234" target="_blank" rel="noopener">http://www.example.com/dresses/1234</a></td><td style="text-align:left">资源 example.com<br><br><font color="#ff0000">✔</font> <a href="http://example.com/dresses/1234" target="_blank" rel="noopener">http://example.com/dresses/1234</a><br><font color="#ff0000">✔</font> <a href="https://example.com/dresses/1234" target="_blank" rel="noopener">https://example.com/dresses/1234</a><br><font color="#ff0000">✔</font> <a href="http://www.example.com/dresses/1234" target="_blank" rel="noopener">http://www.example.com/dresses/1234</a><br><font color="#ff0000">✔</font> <a href="http://support.m.example.com/dresses/1234" target="_blank" rel="noopener">http://support.m.example.com/dresses/1234</a></td></tr></tbody></table><p>由对比可知选择网域资源验证方式比较好，只需要一个域名就可以匹配到多种格式的 URL，之后会给你一个 TXT 的记录值，复制它到你域名 DNS 增加一个 TXT 记录，点击验证即可</p><fancybox><br><img src="https://cdn.jsdelivr.net/gh/TRHX/ImageHosting/ITRHX-PIC/A48/11.png" alt="11"><br></fancybox><p>提交谷歌收录比较简单，选择站点地图，将我们之前生成的 sitemap 提交就行了，过几分钟刷新一下看到成功字样表示提交成功！</p><fancybox><br><img src="https://cdn.jsdelivr.net/gh/TRHX/ImageHosting/ITRHX-PIC/A48/12.png" alt="12"><br></fancybox>]]></content>
      
      
      <categories>
          
          <category> Hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
            <tag> SEO </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo 双线部署到 Coding Pages 和 GitHub Pages 并实现全站 HPPTS</title>
      <link href="/2019/09/16/A47-hexo-deployed-to-github-and-coding/"/>
      <url>/2019/09/16/A47-hexo-deployed-to-github-and-coding/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><blockquote><p>部署到 Coding Pages 的好处：国内访问速度更快，可以提交百度收录（GitHub 禁止了百度的爬取）</p></blockquote><blockquote><p>部署到 Coding Pages 的坏处：就今年来说，Coding 不太稳定，随时有宕机的可能，群里的朋友已经经历过几次了，不过相信以后会越来越稳定的</p></blockquote><blockquote><p>部署过程中常见的问题：无法实现全站 HTTPS，Coding 申请 SSL 证书失败，浏览器可能会提示不是安全链接</p></blockquote><blockquote><p>本文前提：你已经将 Hexo 成功部署到了 GitHub Pages，如果还没有，请参考：<a href="https://blog.csdn.net/qq_36759224/article/details/82121420" target="_blank" rel="noopener">《使用Github Pages和Hexo搭建自己的独立博客【超级详细的小白教程】》</a></p></blockquote><blockquote><p>本文将全面讲述如何成功双线部署到 Coding Pages 和 GitHub Pages 并实现全站 HPPTS，同时解决一些常见的问题！</p></blockquote><hr><h1 id="1-创建项目"><a href="#1-创建项目" class="headerlink" title="1.创建项目"></a><font color="#ff0000">1.创建项目</font></h1><p>进入 <a href="https://coding.net/" target="_blank" rel="noopener">Coding 官网</a>，点击个人版登陆，没有账号就注册一个并登录，由于 Coding 已经被腾讯收购了，所以登录就会来到腾讯云开发者平台，点击创建项目</p><fancybox><br><img src="https://cdn.jsdelivr.net/gh/TRHX/ImageHosting/ITRHX-PIC/A47/01.jpg" alt="01"><br></fancybox><p>项目名称建议和你的用户名一致，这样做的好处是：到时候可以直接通过 <code>user_name.coding.me</code> 访问你的博客，如果项目名与用户名不一致，则需要通过 <code>user_name.coding.me/project_name</code> 才能访问，项目描述可以随便写</p><fancybox><br><img src="https://cdn.jsdelivr.net/gh/TRHX/ImageHosting/ITRHX-PIC/A47/02.jpg" alt="02"><br></fancybox><hr><h1 id="2-配置公钥"><a href="#2-配置公钥" class="headerlink" title="2.配置公钥"></a><font color="#ff0000">2.配置公钥</font></h1><p>配置 SSH 公钥方法与 GitHub Pages 的方式差不多，点击你的头像，依次选择【个人设置】-【SSH公钥】-【新增公钥】</p><fancybox><br><img src="https://cdn.jsdelivr.net/gh/TRHX/ImageHosting/ITRHX-PIC/A47/03.jpg" alt="03"><br></fancybox><p>前面部署到 GitHub Pages 的时候就已经有了一对公钥，我们直接将该公钥粘贴进去就行，公钥名称可以随便写，选中永久有效选项</p><p>PS：公钥储存位置一般在 <font color="#ff0000">C:\Users\用户名\.ssh</font> 目录下的 <font color="#ff0000">id_rsa.pub</font> 文件里，用记事本打开复制其内容即可</p><fancybox><br><img src="https://cdn.jsdelivr.net/gh/TRHX/ImageHosting/ITRHX-PIC/A47/04.jpg" alt="04"><br></fancybox><p>添加公钥后，我们可以右键 <code>Get Bash</code>，输入以下命令来检查是否配置成功：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh -T git@git.coding.net</span><br></pre></td></tr></table></figure><p>若出现以下提示，则证明配置成功：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Coding 提示: Hello XXX, You<span class="string">'ve connected to Coding.net via SSH. This is a personal key.</span></span><br><span class="line"><span class="string">XXX，你好，你已经通过 SSH 协议认证 Coding.net 服务，这是一个个人公钥</span></span><br></pre></td></tr></table></figure><hr><h1 id="3-配置-config-yml"><a href="#3-配置-config-yml" class="headerlink" title="3.配置 _config.yml"></a><font color="#ff0000">3.配置 _config.yml</font></h1><p>进入你的项目，在右下角有选择连接方式，选择 SSH 方式（HTTPS 方式也可以，但是这种方式有时候可能连接不上，SSH 连接不容易出问题），一键复制，然后打开你本地博客根目录的 <code>_config.yml</code> 文件，找到 <code>deploy</code> 关键字，添加 coding 地址：<code>coding: git@git.dev.tencent.com:user_name/user_name.git</code>，也就是刚刚复制的 SSH 地址</p><fancybox><br><img src="https://cdn.jsdelivr.net/gh/TRHX/ImageHosting/ITRHX-PIC/A47/05.jpg" alt="05"><br></fancybox><fancybox><br><img src="https://cdn.jsdelivr.net/gh/TRHX/ImageHosting/ITRHX-PIC/A47/06.jpg" alt="06"><br></fancybox><p>添加完成后先执行命令 <code>hexo clean</code> 清理一下缓存，然后执行命令 <code>hexo g -d</code> 将博客双线部署到 Coding Pages 和 GitHub Pages，如下图所示表示部署成功：</p><fancybox><br><img src="https://cdn.jsdelivr.net/gh/TRHX/ImageHosting/ITRHX-PIC/A47/13.jpg" alt="13"><br></fancybox><h1 id="4-开启-Coding-Pages"><a href="#4-开启-Coding-Pages" class="headerlink" title="4.开启 Coding Pages"></a><font color="#ff0000">4.开启 Coding Pages</font></h1><p>进入你的项目，在代码栏下选择 Pages 服务，一键开启 Coding Pages，等待几秒后刷新网页即可看到已经开启的 Coding Pages，到目前为止，你就可以通过 xxxx.coding.me（比如我的是 trhx.coding.me）访问你的 Coding Pages 页面了</p><fancybox><br><img src="https://cdn.jsdelivr.net/gh/TRHX/ImageHosting/ITRHX-PIC/A47/07.jpg" alt="07"><br></fancybox><fancybox><br><img src="https://cdn.jsdelivr.net/gh/TRHX/ImageHosting/ITRHX-PIC/A47/08.jpg" alt="08"><br></fancybox><h1 id="5-绑定域名并开启-HPPTS"><a href="#5-绑定域名并开启-HPPTS" class="headerlink" title="5.绑定域名并开启 HPPTS"></a><font color="#ff0000">5.绑定域名并开启 HPPTS</font></h1><p>首先在你的域名 DNS 设置中添加一条 <code>CNAME</code> 记录指向 <code>xxxx.coding.me</code>，解析路线选择 <code>默认</code>，将 GitHub 的解析路线改为 <code>境外</code>，这样境外访问就会走 GitHub，境内就会走 Coding，也有人说阿里云是智能解析，自动分配路线，如果解析路线都是默认，境外访问同样会智能选择走 GitHub，境内走 Coding，我没有验证过，有兴趣的可以自己试试，我的解析如下图所示：</p><fancybox><br><img src="https://cdn.jsdelivr.net/gh/TRHX/ImageHosting/ITRHX-PIC/A47/09.jpg" alt="09"><br></fancybox><p>然后点击静态 Pages 应用右上角的设置，进入设置页面，这里要注意，如果你之前已经部署到了 GitHub Pages 并开启了 HTTPS，那么直接在设置页面绑定你自己的域名，SSL/TLS 安全证书就会显示申请错误，如下图所示，没有申请到 SSL 证书，当你访问你的网站时，浏览器就会提示不是安全连接</p><fancybox><br><img src="https://cdn.jsdelivr.net/gh/TRHX/ImageHosting/ITRHX-PIC/A47/10.jpg" alt="10"><br></fancybox><p>申请错误原因是：在验证域名所有权时会定位到 Github Pages 的主机上导致 SSL 证书申请失败</p><p>正确的做法是：<font color="#ff0000">先去域名 DNS 把 GitHub 的解析暂停掉，然后再重新申请 SSL 证书</font>，大约十秒左右就能申请成功，然后开启强制 HTTPS 访问</p><p>这里也建议同时绑定有 www 前缀和没有 www 前缀的，如果要绑定没有 www 前缀的，首先要去域名 DNS 添加一个 <code>A</code> 记录，主机记录为 <code>@</code>，记录值为你博客 IP 地址，IP 地址可以在 cmd 命令行 ping 一下得到，然后在 Coding Pages 中设置其中一个为【首选】，另一个设置【跳转至首选】，这样不管用户是否输入 www 前缀都会跳到有 www 前缀的了</p><p>在博客资源引用的时候也要注意所有资源的 URL 必须是以 https:// 开头，不然浏览器依旧会提示不安全！</p><fancybox><br><img src="https://cdn.jsdelivr.net/gh/TRHX/ImageHosting/ITRHX-PIC/A47/13.png" alt="13"><br></fancybox><fancybox><br><img src="https://cdn.jsdelivr.net/gh/TRHX/ImageHosting/ITRHX-PIC/A47/11_1.png" alt="11_1"><br></fancybox><p>至此，我们的 Hexo 博客就成功双线部署到 Coding Pages 和 GitHub Pages 了，并且也实现了全站 HPPTS，最后来一张 GitHub Pages 和 Coding Pages 在国内的速度对比图，可以明显看到速度的提升</p><fancybox><br><img src="https://cdn.jsdelivr.net/gh/TRHX/ImageHosting/ITRHX-PIC/A47/12.jpg" alt="12"><br></fancybox>]]></content>
      
      
      <categories>
          
          <category> Hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
            <tag> Coding Pages </tag>
            
            <tag> GitHub Pages </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python3 爬虫学习笔记 C16</title>
      <link href="/2019/09/14/A46-Python3-spider-C16/"/>
      <url>/2019/09/14/A46-Python3-spider-C16/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><blockquote><center><font color="#1BC3FB" size="4">Python3 爬虫学习笔记第十六章 —— 【数据储存系列 — Redis】</font></center></blockquote><a id="more"></a><hr><h1 id="【16-1】关于-Redis"><a href="#【16-1】关于-Redis" class="headerlink" title="【16.1】关于 Redis"></a><font color="#ff0000">【16.1】关于 Redis</font></h1><p>Redis 是一个基于内存的高效的键值型（key-value）非关系型数据库，它支持存储的 value 类型非常多，包括 string(字符串)、list(链表)、set(集合)、zset(sorted set –有序集合) 和 hash（哈希类型），它的性能十分优越，可以支持每秒十几万此的读/写操作，其性能远超数据库，并且还支持集群、分布式、主从同步等配置，原则上可以无限扩展，让更多的数据存储在内存中，此外，它还支持一定的事务能力，这保证了高并发的场景下数据的安全和一致性。</p><hr><h1 id="【16-2】使用-Redis"><a href="#【16-2】使用-Redis" class="headerlink" title="【16.2】使用 Redis"></a><font color="#ff0000">【16.2】使用 Redis</font></h1><p>首先安装 Redis 和 redis-py 库，管理 Redis 可以使用可视化工具 Redis Desktop Manager，该工具现在收费了，分享个 0.8.8.384 的免费版本</p><p>安装 redis-py 库：<code>pip install redis</code><br>Redis 官网：<a href="https://redis.io" target="_blank" rel="noopener">https://redis.io</a><br>官方文档：<a href="https://redis.io/documentation" target="_blank" rel="noopener">https://redis.io/documentation</a><br>中文官网：<a href="http://www.redis.cn" target="_blank" rel="noopener">http://www.redis.cn</a><br>中文教程：<a href="http://www.runoob.com/redis/redis-tutorial.html" target="_blank" rel="noopener">http://www.runoob.com/redis/redis-tutorial.html</a><br>GitHub：<a href="https://github.com/antirez/redis" target="_blank" rel="noopener">https://github.com/antirez/redis</a><br>Redis Windows下载地址一：<a href="https://github.com/microsoftarchive/redis/releases" target="_blank" rel="noopener">https://github.com/microsoftarchive/redis/releases</a> （最新版 3.2.100，似乎不再更新）<br>Redis Windows下载地址二：<a href="https://github.com/tporadowski/redis/releases" target="_blank" rel="noopener">https://github.com/tporadowski/redis/releases</a> （最新版）<br>Redis Desktop Manager 官网：<a href="https://redisdesktop.com/" target="_blank" rel="noopener">https://redisdesktop.com/</a><br>Redis Desktop Manager 0.8.8.384 免费版：<a href="https://pan.baidu.com/s/18MKeCqT0MG0hc89jfkpIkA" target="_blank" rel="noopener">https://pan.baidu.com/s/18MKeCqT0MG0hc89jfkpIkA</a> （提取码：3ovc）</p><p>利用 Python 连接 Redis 示例：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> redis <span class="keyword">import</span> StrictRedis</span><br><span class="line"></span><br><span class="line">redis = StrictRedis(host=<span class="string">'localhost'</span>, port=<span class="number">6379</span>, db=<span class="number">0</span>, password=<span class="string">'000000'</span>)</span><br><span class="line">redis.set(<span class="string">'name'</span>, <span class="string">'TRHX'</span>)</span><br><span class="line">print(redis.get(<span class="string">'name'</span>))</span><br></pre></td></tr></table></figure><p>传入 Redis 的地址、运行端口、使用的数据库和密码， 4 个参数默认值分别为 localhost、6379、0 和 None，声明一个 StrictRedis 对象，调用 set() 方法，设置一个键值对，输出结果如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">b'TRHX'</span></span><br></pre></td></tr></table></figure><p>另外也可以使用 ConnectionPool 来连接：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> redis <span class="keyword">import</span> StrictRedis, ConnectionPool  </span><br><span class="line"></span><br><span class="line">pool = ConnectionPool(host=<span class="string">'localhost'</span>, port=<span class="number">6379</span>, db=<span class="number">0</span>, password=<span class="string">'000000'</span>)  </span><br><span class="line">redis = StrictRedis(connection_pool=pool)</span><br></pre></td></tr></table></figure><p>ConnectionPool 也支持通过 URL 来构建：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">redis://[:password]@host:port/db  <span class="comment"># 创建 Redis TCP 连接</span></span><br><span class="line">rediss://[:password]@host:port/db  <span class="comment"># 创建 Redis TCP+SSL 连接</span></span><br><span class="line">unix://[:password]@/path/to/socket.sock?db=db  # 创建 Redis UNIX socket 连接</span><br></pre></td></tr></table></figure><p>代码示例：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> redis <span class="keyword">import</span> StrictRedis, ConnectionPool</span><br><span class="line"></span><br><span class="line">url = <span class="string">'redis://:000000@localhost:6379/0'</span>  </span><br><span class="line">pool = ConnectionPool.from_url(url)  </span><br><span class="line">redis = StrictRedis(connection_pool=pool)</span><br></pre></td></tr></table></figure><p>以下是有关的键操作、字符串操作、列表操作、集合操作、散列操作的各种方法，记录一下，方便查阅<br>来源：《Python3 网络爬虫开发实战（崔庆才著）》<br>Redis 命令参考：<a href="http://redisdoc.com/" target="_blank" rel="noopener">http://redisdoc.com/</a> 、<a href="http://doc.redisfans.com/" target="_blank" rel="noopener">http://doc.redisfans.com/</a></p><hr><h1 id="【16-3】Key（键）操作"><a href="#【16-3】Key（键）操作" class="headerlink" title="【16.3】Key（键）操作"></a><font color="#ff0000">【16.3】Key（键）操作</font></h1><table><thead><tr><th>方法</th><th>作用</th><th>参数说明</th><th>示例</th><th>示例说明</th><th>示例结果</th></tr></thead><tbody><tr><td>exists(name)</td><td>判断一个键是否存在</td><td>name：键名</td><td>redis.exists(‘name’)</td><td>是否存在 name 这个键</td><td>True</td></tr><tr><td>delete(name)</td><td>删除一个键</td><td>name：键名</td><td>redis.delete(‘name’)</td><td>删除 name 这个键</td><td>1</td></tr><tr><td>type(name)</td><td>判断键类型</td><td>name：键名</td><td>redis.type(‘name’)</td><td>判断 name 这个键类型</td><td>b’string’</td></tr><tr><td>keys(pattern)</td><td>获取所有符合规则的键</td><td>pattern：匹配规则</td><td>redis.keys(‘n*’)</td><td>获取所有以 n 开头的键</td><td>[b’name’]</td></tr><tr><td>randomkey()</td><td>获取随机的一个键</td><td></td><td>randomkey()</td><td>获取随机的一个键</td><td>b’name’</td></tr><tr><td>rename(src, dst)</td><td>重命名键</td><td>src：原键名；dst：新键名</td><td>redis.rename(‘name’, ‘nickname’)</td><td>将 name 重命名为 nickname</td><td>True</td></tr><tr><td>dbsize()</td><td>获取当前数据库中键的数目</td><td></td><td>dbsize()</td><td>获取当前数据库中键的数目</td><td>100</td></tr><tr><td>expire(name, time)</td><td>设定键的过期时间，单位为秒</td><td>name：键名；time：秒数</td><td>redis.expire(‘name’, 2)</td><td>将 name 键的过期时间设置为 2 秒</td><td>True</td></tr><tr><td>ttl(name)</td><td>获取键的过期时间，单位为秒，-1 表示永久不过期</td><td>name：键名</td><td>redis.ttl(‘name’)</td><td>获取 name 这个键的过期时间</td><td>-1</td></tr><tr><td>move(name, db)</td><td>将键移动到其他数据库</td><td>name：键名；db：数据库代号</td><td>move(‘name’, 2)</td><td>将 name 移动到 2 号数据库</td><td>True</td></tr><tr><td>flushdb()</td><td>删除当前选择数据库中的所有键</td><td></td><td>flushdb()</td><td>删除当前选择数据库中的所有键</td><td>True</td></tr><tr><td>flushall()</td><td>删除所有数据库中的所有键</td><td></td><td>flushall()</td><td>删除所有数据库中的所有键</td><td>True</td></tr></tbody></table><hr><h1 id="【16-4】String（字符串）操作"><a href="#【16-4】String（字符串）操作" class="headerlink" title="【16.4】String（字符串）操作"></a><font color="#ff0000">【16.4】String（字符串）操作</font></h1><table><thead><tr><th>方法</th><th>作用</th><th>参数说明</th><th>示例</th><th>示例说明</th><th>示例结果</th></tr></thead><tbody><tr><td>set(name, value)</td><td>给数据库中键名为 name 的 string 赋予值 value</td><td>name：键名；value：值</td><td>redis.set(‘name’, ‘Bob’)</td><td>给 name 这个键的 value 赋值为 Bob</td><td>True</td></tr><tr><td>get(name)</td><td>返回数据库中键名为 name 的 string 的 value</td><td>name：键名</td><td>redis.get(‘name’)</td><td>返回 name 这个键的 value</td><td>b’Bob’</td></tr><tr><td>getset(name, value)</td><td>给数据库中键名为 name 的 string 赋予值 value 并返回上次的 value</td><td>name：键名；value：新值</td><td>redis.getset(‘name’, ‘Mike’)</td><td>赋值 name 为 Mike 并得到上次的 value</td><td>b’Bob’</td></tr><tr><td>mget(keys, *args)</td><td>返回多个键对应的 value 组成的列表</td><td>keys：键名序列</td><td>redis.mget([‘name’, ‘nickname’])</td><td>返回 name 和 nickname 的 value</td><td>[b’Mike’, b’Miker’]</td></tr><tr><td>setnx(name, value)</td><td>如果不存在这个键值对，则更新 value，否则不变</td><td>name：键名</td><td>redis.setnx(‘newname’, ‘James’)</td><td>如果 newname 这个键不存在，则设置值为 James</td><td>第一次运行结果是 True，第二次运行结果是 False</td></tr><tr><td>setex(name, time, value)</td><td>设置可以对应的值为 string 类型的 value，并指定此键值对应的有效期</td><td>name：键名；time：有效期；value：值</td><td>redis.setex(‘name’, 1, ‘James’)</td><td>将 name 这个键的值设为 James，有效期为 1 秒</td><td>True</td></tr><tr><td>setrange(name, offset, value)</td><td>设置指定键的 value 值的子字符串</td><td>name：键名；offset：偏移量；value：值</td><td>redis.set(‘name’, ‘Hello’) redis.setrange (‘name’, 6, ‘World’)</td><td>设置 name 为 Hello 字符串，并在 index 为 6 的位置补 World</td><td>11，修改后的字符串长度</td></tr><tr><td>mset(mapping)</td><td>批量赋值</td><td>mapping：字典或关键字参数</td><td>redis.mset({‘name1’: ‘Durant’, ‘name2’: ‘James’})</td><td>将 name1 设为 Durant，name2 设为 James</td><td>True</td></tr><tr><td>msetnx(mapping)</td><td>键均不存在时才批量赋值</td><td>mapping：字典或关键字参数</td><td>redis.msetnx({‘name3’: ‘Smith’, ‘name4’: ‘Curry’})</td><td>在 name3 和 name4 均不存在的情况下才设置二者值</td><td>True</td></tr><tr><td>incr(name, amount=1)</td><td>键名为 name 的 value 增值操作，默认为 1，键不存在则被创建并设为 amount</td><td>name：键名；amount：增长的值</td><td>redis.incr(‘age’, 1)</td><td>age 对应的值增 1，若不存在，则会创建并设置为 1</td><td>1，即修改后的值</td></tr><tr><td>decr(name, amount=1)</td><td>键名为 name 的 value 减值操作，默认为 1，键不存在则被创建并将 value 设置为 - amount</td><td>name：键名；amount：减少的值</td><td>redis.decr(‘age’, 1)</td><td>age 对应的值减 1，若不存在，则会创建并设置为-1</td><td>-1，即修改后的值</td></tr><tr><td>append(key, value)</td><td>键名为 key 的 string 的值附加 value</td><td>key：键名</td><td>redis.append(‘nickname’, ‘OK’)</td><td>向键名为 nickname 的值后追加 OK</td><td>13，即修改后的字符串长度</td></tr><tr><td>substr(name, start, end=-1)</td><td>返回键名为 name 的 string 的子字符串</td><td>name：键名；start：起始索引；end：终止索引，默认为-1，表示截取到末尾</td><td>redis.substr(‘name’, 1, 4)</td><td>返回键名为 name 的值的字符串，截取索引为 1~4 的字符</td><td>b’ello’</td></tr><tr><td>getrange(key, start, end)</td><td>获取键的 value 值从 start 到 end 的子字符串</td><td>key：键名；start：起始索引；end：终止索引</td><td>redis.getrange(‘name’, 1, 4)</td><td>返回键名为 name 的值的字符串，截取索引为 1~4 的字符</td><td>b’ello</td></tr></tbody></table><hr><h1 id="【16-5】Hash（哈希表）操作"><a href="#【16-5】Hash（哈希表）操作" class="headerlink" title="【16.5】Hash（哈希表）操作"></a><font color="#ff0000">【16.5】Hash（哈希表）操作</font></h1><table><thead><tr><th>方法</th><th>作用</th><th>参数说明</th><th>示例</th><th>示例说明</th><th>示例结果</th></tr></thead><tbody><tr><td>hset(name, key, value)</td><td>向键名为 name 的散列表中添加映射</td><td>name：键名；key：映射键名；value：映射键值</td><td>hset(‘price’, ‘cake’, 5)</td><td>向键名为 price 的散列表中添加映射关系，cake 的值为 5</td><td>1，即添加的映射个数</td></tr><tr><td>hsetnx(name, key, value)</td><td>如果映射键名不存在，则向键名为 name 的散列表中添加映射</td><td>name：键名；key：映射键名；value：映射键值</td><td>hsetnx(‘price’, ‘book’, 6)</td><td>向键名为 price 的散列表中添加映射关系，book 的值为 6</td><td>1，即添加的映射个数</td></tr><tr><td>hget(name, key)</td><td>返回键名为 name 的散列表中 key 对应的值</td><td>name：键名；key：映射键名</td><td>redis.hget(‘price’, ‘cake’)</td><td>获取键名为 price 的散列表中键名为 cake 的值</td><td>5</td></tr><tr><td>hmget(name, keys, *args)</td><td>返回键名为 name 的散列表中各个键对应的值</td><td>name：键名；keys：键名序列</td><td>redis.hmget(‘price’, [‘apple’, ‘orange’])</td><td>获取键名为 price 的散列表中 apple 和 orange 的值</td><td>[b’3’, b’7’]</td></tr><tr><td>hmset(name, mapping)</td><td>向键名为 name 的散列表中批量添加映射</td><td>name：键名；mapping：映射字典</td><td>redis.hmset(‘price’, {‘banana’: 2, ‘pear’: 6})</td><td>向键名为 price 的散列表中批量添加映射</td><td>True</td></tr><tr><td>hincrby(name, key, amount=1)</td><td>将键名为 name 的散列表中映射的值增加 amount</td><td>name：键名；key：映射键名；amount：增长量</td><td>redis.hincrby(‘price’, ‘apple’, 3)</td><td>key 为 price 的散列表中 apple 的值增加 3</td><td>6，修改后的值</td></tr><tr><td>hexists(name, key)</td><td>键名为 name 的散列表中是否存在键名为键的映射</td><td>name：键名；key：映射键名</td><td>redis.hexists(‘price’, ‘banana’)</td><td>键名为 price 的散列表中 banana 的值是否存在</td><td>True</td></tr><tr><td>hdel(name, *keys)</td><td>在键名为 name 的散列表中，删除键名为键的映射</td><td>name：键名；keys：键名序列</td><td>redis.hdel(‘price’, ‘banana’)</td><td>从键名为 price 的散列表中删除键名为 banana 的映射</td><td>True</td></tr><tr><td>hlen(name)</td><td>从键名为 name 的散列表中获取映射个数</td><td>name：键名</td><td>redis.hlen(‘price’)</td><td>从键名为 price 的散列表中获取映射个数</td><td>6</td></tr><tr><td>hkeys(name)</td><td>从键名为 name 的散列表中获取所有映射键名</td><td>name：键名</td><td>redis.hkeys(‘price’)</td><td>从键名为 price 的散列表中获取所有映射键名</td><td>[b’cake’, b’book’, b’banana’, b’pear’]</td></tr><tr><td>hvals(name)</td><td>从键名为 name 的散列表中获取所有映射键值</td><td>name：键名</td><td>redis.hvals(‘price’)</td><td>从键名为 price 的散列表中获取所有映射键值</td><td>[b’5’, b’6’, b’2’, b’6’]</td></tr><tr><td>hgetall(name)</td><td>从键名为 name 的散列表中获取所有映射键值对</td><td>name：键名</td><td>redis.hgetall(‘price’)</td><td>从键名为 price 的散列表中获取所有映射键值对</td><td>{b’cake’: b’5’, b’book’: b’6’, b’orange’: b’7’, b’pear’: b’6’}</td></tr></tbody></table><hr><h1 id="【16-6】List（列表）操作"><a href="#【16-6】List（列表）操作" class="headerlink" title="【16.6】List（列表）操作"></a><font color="#ff0000">【16.6】List（列表）操作</font></h1><table><thead><tr><th>方法</th><th>作用</th><th>参数说明</th><th>示例</th><th>示例说明</th><th>示例结果</th></tr></thead><tbody><tr><td>rpush(name, *values)</td><td>在键名为 name 的列表末尾添加值为 value 的元素，可以传多个</td><td>name：键名；values：值</td><td>redis.rpush(‘list’, 1, 2, 3)</td><td>向键名为 list 的列表尾添加 1、2、3</td><td>3，列表大小</td></tr><tr><td>lpush(name, *values)</td><td>在键名为 name 的列表头添加值为 value 的元素，可以传多个</td><td>name：键名；values：值</td><td>redis.lpush(‘list’, 0)</td><td>向键名为 list 的列表头部添加 0</td><td>4，列表大小</td></tr><tr><td>llen(name)</td><td>返回键名为 name 的列表的长度</td><td>name：键名</td><td>redis.llen(‘list’)</td><td>返回键名为 list 的列表的长度</td><td>4</td></tr><tr><td>lrange(name, start, end)</td><td>返回键名为 name 的列表中 start 至 end 之间的元素</td><td>name：键名；start：起始索引；end：终止索引</td><td>redis.lrange(‘list’, 1, 3)</td><td>返回起始索引为 1 终止索引为 3 的索引范围对应的列表</td><td>[b’3’, b’2’, b’1’]</td></tr><tr><td>ltrim(name, start, end)</td><td>截取键名为 name 的列表，保留索引为 start 到 end 的内容</td><td>name：键名；start：起始索引；end：终止索引</td><td>ltrim(‘list’, 1, 3)</td><td>保留键名为 list 的索引为 1 到 3 的元素</td><td>True</td></tr><tr><td>lindex(name, index)</td><td>返回键名为 name 的列表中 index 位置的元素</td><td>name：键名；index：索引</td><td>redis.lindex(‘list’, 1)</td><td>返回键名为 list 的列表索引为 1 的元素</td><td>b’2’</td></tr><tr><td>lset(name, index, value)</td><td>给键名为 name 的列表中 index 位置的元素赋值，越界则报错</td><td>name：键名；index：索引位置；value：值</td><td>redis.lset(‘list’, 1, 5)</td><td>将键名为 list 的列表中索引为 1 的位置赋值为 5</td><td>True</td></tr><tr><td>lrem(name, count, value)</td><td>删除 count 个键的列表中值为 value 的元素</td><td>name：键名；count：删除个数；value：值</td><td>redis.lrem(‘list’, 2, 3)</td><td>将键名为 list 的列表删除两个 3</td><td>1，即删除的个数</td></tr><tr><td>lpop(name)</td><td>返回并删除键名为 name 的列表中的首元素</td><td>name：键名</td><td>redis.lpop(‘list’)</td><td>返回并删除名为 list 的列表中的第一个元素</td><td>b’5’</td></tr><tr><td>rpop(name)</td><td>返回并删除键名为 name 的列表中的尾元素</td><td>name：键名</td><td>redis.rpop(‘list’)</td><td>返回并删除名为 list 的列表中的最后一个元素</td><td>b’2’</td></tr><tr><td>blpop(keys, timeout=0)</td><td>返回并删除名称在 keys 中的 list 中的首个元素，如果列表为空，则会一直阻塞等待</td><td>keys：键名序列；timeout：超时等待时间，0 为一直等待</td><td>redis.blpop(‘list’)</td><td>返回并删除键名为 list 的列表中的第一个元素</td><td>[b’5’]</td></tr><tr><td>brpop(keys, timeout=0)</td><td>返回并删除键名为 name 的列表中的尾元素，如果 list 为空，则会一直阻塞等待</td><td>keys：键名序列；timeout：超时等待时间，0 为一直等待</td><td>redis.brpop(‘list’)</td><td>返回并删除名为 list 的列表中的最后一个元素</td><td>[b’2’]</td></tr><tr><td>rpoplpush(src, dst)</td><td>返回并删除名称为 src 的列表的尾元素，并将该元素添加到名称为 dst 的列表头部</td><td>src：源列表的键；dst：目标列表的 key</td><td>redis.rpoplpush(‘list’, ‘list2’)</td><td>将键名为 list 的列表尾元素删除并将其添加到键名为 list2 的列表头部，然后返回</td><td>b’2’</td></tr></tbody></table><hr><h1 id="【16-7】Set（集合）操作"><a href="#【16-7】Set（集合）操作" class="headerlink" title="【16.7】Set（集合）操作"></a><font color="#ff0000">【16.7】Set（集合）操作</font></h1><table><thead><tr><th>方法</th><th>作用</th><th>参数说明</th><th>示例</th><th>示例说明</th><th>示例结果</th></tr></thead><tbody><tr><td>sadd(name, *values)</td><td>向键名为 name 的集合中添加元素</td><td>name：键名；values：值，可为多个</td><td>redis.sadd(‘tags’, ‘Book’, ‘Tea’, ‘Coffee’)</td><td>向键名为 tags 的集合中添加 Book、Tea 和 Coffee 这 3 个内容</td><td>3，即插入的数据个数</td></tr><tr><td>srem(name, *values)</td><td>从键名为 name 的集合中删除元素</td><td>name：键名；values：值，可为多个</td><td>redis.srem(‘tags’, ‘Book’)</td><td>从键名为 tags 的集合中删除 Book</td><td>1，即删除的数据个数</td></tr><tr><td>spop(name)</td><td>随机返回并删除键名为 name 的集合中的一个元素</td><td>name：键名</td><td>redis.spop(‘tags’)</td><td>从键名为 tags 的集合中随机删除并返回该元素</td><td>b’Tea’</td></tr><tr><td>smove(src, dst, value)</td><td>从 src 对应的集合中移除元素并将其添加到 dst 对应的集合中</td><td>src：源集合；dst：目标集合；value：元素值</td><td>redis.smove(‘tags’, ‘tags2’, ‘Coffee’)</td><td>从键名为 tags 的集合中删除元素 Coffee 并将其添加到键为 tags2 的集合</td><td>True</td></tr><tr><td>scard(name)</td><td>返回键名为 name 的集合的元素个数</td><td>name：键名</td><td>redis.scard(‘tags’)</td><td>获取键名为 tags 的集合中的元素个数</td><td>3</td></tr><tr><td>sismember(name, value)</td><td>测试 member 是否是键名为 name 的集合的元素</td><td>name：键值</td><td>redis.sismember(‘tags’, ‘Book’)</td><td>判断 Book 是否是键名为 tags 的集合元素</td><td>True</td></tr><tr><td>sinter(keys, *args)</td><td>返回所有给定键的集合的交集</td><td>keys：键名序列</td><td>redis.sinter([‘tags’, ‘tags2’])</td><td>返回键名为 tags 的集合和键名为 tags2 的集合的交集</td><td>{b’Coffee’}</td></tr><tr><td>sinterstore(dest, keys, *args)</td><td>求交集并将交集保存到 dest 的集合</td><td>dest：结果集合；keys：键名序列</td><td>redis.sinterstore (‘inttag’, [‘tags’, ‘tags2’])</td><td>求键名为 tags 的集合和键名为 tags2 的集合的交集并将其保存为 inttag</td><td>1</td></tr><tr><td>sunion(keys, *args)</td><td>返回所有给定键的集合的并集</td><td>keys：键名序列</td><td>redis.sunion([‘tags’, ‘tags2’])</td><td>返回键名为 tags 的集合和键名为 tags2 的集合的并集</td><td>{b’Coffee’, b’Book’, b’Pen’}</td></tr><tr><td>sunionstore(dest, keys, *args)</td><td>求并集并将并集保存到 dest 的集合</td><td>dest：结果集合；keys：键名序列</td><td>redis.sunionstore (‘inttag’, [‘tags’, ‘tags2’])</td><td>求键名为 tags 的集合和键名为 tags2 的集合的并集并将其保存为 inttag</td><td>3</td></tr><tr><td>sdiff(keys, *args)</td><td>返回所有给定键的集合的差集</td><td>keys：键名序列</td><td>redis.sdiff([‘tags’, ‘tags2’])</td><td>返回键名为 tags 的集合和键名为 tags2 的集合的差集</td><td>{b’Book’, b’Pen’}</td></tr><tr><td>sdiffstore(dest, keys, *args)</td><td>求差集并将差集保存到 dest 集合</td><td>dest：结果集合；keys：键名序列</td><td>redis.sdiffstore (‘inttag’, [‘tags’, ‘tags2’])</td><td>求键名为 tags 的集合和键名为 tags2 的集合的差集并将其保存为 inttag</td><td>3</td></tr><tr><td>smembers(name)</td><td>返回键名为 name 的集合的所有元素</td><td>name：键名</td><td>redis.smembers(‘tags’)</td><td>返回键名为 tags 的集合的所有元素</td><td>{b’Pen’, b’Book’, b’Coffee’}</td></tr><tr><td>srandmember(name)</td><td>随机返回键名为 name 的集合中的一个元素，但不删除元素</td><td>name：键值</td><td>redis.srandmember(‘tags’)</td><td>随机返回键名为 tags 的集合中的一个元素</td><td>Srandmember (name)</td></tr></tbody></table><hr><h1 id="【16-8】SortedSet（有序集合）操作"><a href="#【16-8】SortedSet（有序集合）操作" class="headerlink" title="【16.8】SortedSet（有序集合）操作"></a><font color="#ff0000">【16.8】SortedSet（有序集合）操作</font></h1><table><thead><tr><th>方法</th><th>作用</th><th>参数说明</th><th>示例</th><th>示例说明</th><th>示例结果</th></tr></thead><tbody><tr><td>zadd(name, args, *kwargs)</td><td>向键名为 name 的 zset 中添加元素 member，score 用于排序。如果该元素存在，则更新其顺序</td><td>name：键名；args：可变参数</td><td>redis.zadd(‘grade’, 100, ‘Bob’, 98, ‘Mike’)</td><td>向键名为 grade 的 zset 中添加 Bob（其 score 为 100），并添加 Mike（其 score 为 98）</td><td>2，即添加的元素个数</td></tr><tr><td>zrem(name, *values)</td><td>删除键名为 name 的 zset 中的元素</td><td>name：键名；values：元素</td><td>redis.zrem(‘grade’, ‘Mike’)</td><td>从键名为 grade 的 zset 中删除 Mike</td><td>1，即删除的元素个数</td></tr><tr><td>zincrby(name, value, amount=1)</td><td>如果在键名为 name 的 zset 中已经存在元素 value，则将该元素的 score 增加 amount；否则向该集合中添加该元素，其 score 的值为 amount</td><td>name：键名；value：元素；amount：增长的 score 值</td><td>redis.zincrby(‘grade’, ‘Bob’, -2)</td><td>键名为 grade 的 zset 中 Bob 的 score 减 2</td><td>98.0，即修改后的值</td></tr><tr><td>zrank(name, value)</td><td>返回键名为 name 的 zset 中元素的排名，按 score 从小到大排序，即名次</td><td>name：键名；value：元素值</td><td>redis.zrank(‘grade’, ‘Amy’)</td><td>得到键名为 grade 的 zset 中 Amy 的排名</td><td>1</td></tr><tr><td>zrevrank(name, value)</td><td>返回键为 name 的 zset 中元素的倒数排名（按 score 从大到小排序），即名次</td><td>name：键名；value：元素值</td><td>redis.zrevrank (‘grade’, ‘Amy’)</td><td>得到键名为 grade 的 zset 中 Amy 的倒数排名</td><td>2</td></tr><tr><td>zrevrange(name, start, end, withscores= False)</td><td>返回键名为 name 的 zset（按 score 从大到小排序）中 index 从 start 到 end 的所有元素</td><td>name：键值；start：开始索引；end：结束索引；withscores：是否带 score</td><td>redis.zrevrange (‘grade’, 0, 3)</td><td>返回键名为 grade 的 zset 中前四名元素</td><td>[b’Bob’, b’Mike’, b’Amy’, b’James’]</td></tr><tr><td>zrangebyscore (name, min, max, start=None, num=None, withscores=False)</td><td>返回键名为 name 的 zset 中 score 在给定区间的元素</td><td>name：键名；min：最低 score；max：最高 score；start：起始索引；num：个数；withscores：是否带 score</td><td>redis.zrangebyscore (‘grade’, 80, 95)</td><td>返回键名为 grade 的 zset 中 score 在 80 和 95 之间的元素</td><td>[b’Bob’, b’Mike’, b’Amy’, b’James’]</td></tr><tr><td>zcount(name, min, max)</td><td>返回键名为 name 的 zset 中 score 在给定区间的数量</td><td>name：键名；min：最低 score；max：最高 score</td><td>redis.zcount(‘grade’, 80, 95)</td><td>返回键名为 grade 的 zset 中 score 在 80 到 95 的元素个数</td><td>2</td></tr><tr><td>zcard(name)</td><td>返回键名为 name 的 zset 的元素个数</td><td>name：键名</td><td>redis.zcard(‘grade’)</td><td>获取键名为 grade 的 zset 中元素的个数</td><td>3</td></tr><tr><td>zremrangebyrank (name, min, max)</td><td>删除键名为 name 的 zset 中排名在给定区间的元素</td><td>name：键名；min：最低位次；max：最高位次</td><td>redis.zremrangebyrank (‘grade’, 0, 0)</td><td>删除键名为 grade 的 zset 中排名第一的元素</td><td>1，即删除的元素个数</td></tr><tr><td>zremrangebyscore (name, min, max)</td><td>删除键名为 name 的 zset 中 score 在给定区间的元素</td><td>name：键名；min：最低 score；max：最高 score</td><td>redis.zremrangebyscore (‘grade’, 80, 90)</td><td>删除 score 在 80 到 90 之间的元素</td><td>1，即删除的元素个数</td></tr></tbody></table><hr><h1 id="【16-9】RedisDump"><a href="#【16-9】RedisDump" class="headerlink" title="【16.9】RedisDump"></a><font color="#ff0000">【16.9】RedisDump</font></h1><p>RedisDump 是 Redis 一个数据导入导出工具，是基于 Ruby 实现的，首先访问 Ruby 官网安装对应操作系统的 Ruby：<a href="http://www.ruby-lang.org/zh_cn/downloads/" target="_blank" rel="noopener">http://www.ruby-lang.org/zh_cn/downloads/</a> ，安装完成即可使用 gem 命令，该命令类似于 Python 当中的 pip 命令，使用 <code>gem install redis-dump</code> 即可完成 RedisDump 的安装，安装完成后就可以使用导出数据 <code>redis-dump</code> 命令和导入数据 <code>redis-load</code> 命令了</p><hr><h2 id="【16-9-1】导出数据-redis-dump"><a href="#【16-9-1】导出数据-redis-dump" class="headerlink" title="【16.9.1】导出数据 redis-dump"></a><font color="#1BC3FB">【16.9.1】导出数据 redis-dump</font></h2><p>在命令行输入 <code>redis-dump -h</code> 可以查看：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">Usage: E:/Ruby26-x64/bin/redis-dump [global options] COMMAND [command options]</span><br><span class="line">    -u, --uri=S                      Redis URI (e.g. redis://hostname[:port])</span><br><span class="line">    -d, --database=S                 Redis database (e.g. -d 15)</span><br><span class="line">    -a, --password=S                 Redis password (e.g. -a 'my@pass/word')</span><br><span class="line">    -s, --sleep=S                    Sleep for S seconds after dumping (for debugging)</span><br><span class="line">    -c, --count=S                    Chunk size (default: 10000)</span><br><span class="line">    -f, --filter=S                   Filter selected keys (passed directly to redis' KEYS command)</span><br><span class="line">    -b, --base64                     Encode key values as base64 (useful for binary values)</span><br><span class="line">    -O, --without_optimizations      Disable run time optimizations</span><br><span class="line">    -V, --version                    Display version</span><br><span class="line">    -D, --debug</span><br><span class="line">        --nosafe</span><br></pre></td></tr></table></figure><p>命令解释：</p><ul><li>-u Redis 连接字符串</li><li>-d 数据库代号</li><li>-a 数据库密码</li><li>-s 导出之后的休眠时间</li><li>-c 分块大小，默认是 10000</li><li>-f 导出时的过滤器</li><li>-b 将键值编码为 base64（对二进制值有用）</li><li>-O 禁用运行时优化</li><li>-V 显示版本</li><li>-D 开启调试</li></ul><p>导出数据示例：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">redis-dump</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 指定端口</span></span><br><span class="line">redis-dump -u 127.0.0.1:6379</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 指定端口和密码</span></span><br><span class="line">redis-dump -u :password@127.0.0.1:6379</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 导出指定数据库</span></span><br><span class="line">redis-dump -u 127.0.0.1:6379 -d 3</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 导出包含特定值的数据</span></span><br><span class="line">redis-dump -u 127.0.0.1:6379 -f age</span><br></pre></td></tr></table></figure><p>输出示例：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 导出所有数据</span></span><br><span class="line">&#123;"db":0,"key":"name5","ttl":-1,"type":"string","value":"DDD","size":3&#125;</span><br><span class="line">&#123;"db":0,"key":"name2","ttl":-1,"type":"string","value":"AAA","size":3&#125;</span><br><span class="line">&#123;"db":0,"key":"name4","ttl":-1,"type":"string","value":"CCC","size":3&#125;</span><br><span class="line">&#123;"db":0,"key":"name6","ttl":-1,"type":"string","value":"CCC","size":3&#125;</span><br><span class="line">&#123;"db":0,"key":"name","ttl":-1,"type":"string","value":"TRHX","size":4&#125;</span><br><span class="line">&#123;"db":0,"key":"name3","ttl":-1,"type":"string","value":"BBB","size":3&#125;</span><br><span class="line">&#123;"db":1,"key":"name2","ttl":-1,"type":"string","value":"BBB","size":3&#125;</span><br><span class="line">&#123;"db":1,"key":"name1","ttl":-1,"type":"string","value":"AAA","size":3&#125;</span><br><span class="line">&#123;"db":2,"key":"name2","ttl":-1,"type":"string","value":"BBB","size":3&#125;</span><br><span class="line">&#123;"db":2,"key":"name1","ttl":-1,"type":"string","value":"AAA","size":3&#125;</span><br><span class="line">&#123;"db":3,"key":"name2","ttl":-1,"type":"string","value":"HHH","size":3&#125;</span><br><span class="line">&#123;"db":3,"key":"name1","ttl":-1,"type":"string","value":"RRR","size":3&#125;</span><br><span class="line">&#123;"db":4,"key":"age","ttl":-1,"type":"string","value":"20","size":2&#125;</span><br><span class="line">&#123;"db":4,"key":"age2","ttl":-1,"type":"string","value":"19","size":2&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 导出 3 号数据库</span></span><br><span class="line">&#123;"db":3,"key":"name2","ttl":-1,"type":"string","value":"HHH","size":3&#125;</span><br><span class="line">&#123;"db":3,"key":"name1","ttl":-1,"type":"string","value":"RRR","size":3&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 导出 key 包含 age 的数据</span></span><br><span class="line">&#123;"db":4,"key":"age","ttl":-1,"type":"string","value":"20","size":2&#125;</span><br><span class="line">&#123;"db":4,"key":"age2","ttl":-1,"type":"string","value":"19","size":2&#125;</span><br></pre></td></tr></table></figure><p>导出所有数据为 JSON 文件：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">redis-dump -u 127.0.0.1:6379 &gt; db_full.json</span><br></pre></td></tr></table></figure><p>该命令将会在当前目录生成一个名为 db_full.json 的文件，文件内容如下：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&#123;<span class="attr">"db"</span>:<span class="number">0</span>,<span class="attr">"key"</span>:<span class="string">"name5"</span>,<span class="attr">"ttl"</span>:<span class="number">-1</span>,<span class="attr">"type"</span>:<span class="string">"string"</span>,<span class="attr">"value"</span>:<span class="string">"DDD"</span>,<span class="attr">"size"</span>:<span class="number">3</span>&#125;</span><br><span class="line">&#123;<span class="attr">"db"</span>:<span class="number">0</span>,<span class="attr">"key"</span>:<span class="string">"name2"</span>,<span class="attr">"ttl"</span>:<span class="number">-1</span>,<span class="attr">"type"</span>:<span class="string">"string"</span>,<span class="attr">"value"</span>:<span class="string">"AAA"</span>,<span class="attr">"size"</span>:<span class="number">3</span>&#125;</span><br><span class="line">&#123;<span class="attr">"db"</span>:<span class="number">0</span>,<span class="attr">"key"</span>:<span class="string">"name4"</span>,<span class="attr">"ttl"</span>:<span class="number">-1</span>,<span class="attr">"type"</span>:<span class="string">"string"</span>,<span class="attr">"value"</span>:<span class="string">"CCC"</span>,<span class="attr">"size"</span>:<span class="number">3</span>&#125;</span><br><span class="line">&#123;<span class="attr">"db"</span>:<span class="number">0</span>,<span class="attr">"key"</span>:<span class="string">"name6"</span>,<span class="attr">"ttl"</span>:<span class="number">-1</span>,<span class="attr">"type"</span>:<span class="string">"string"</span>,<span class="attr">"value"</span>:<span class="string">"CCC"</span>,<span class="attr">"size"</span>:<span class="number">3</span>&#125;</span><br><span class="line">&#123;<span class="attr">"db"</span>:<span class="number">0</span>,<span class="attr">"key"</span>:<span class="string">"name"</span>,<span class="attr">"ttl"</span>:<span class="number">-1</span>,<span class="attr">"type"</span>:<span class="string">"string"</span>,<span class="attr">"value"</span>:<span class="string">"TRHX"</span>,<span class="attr">"size"</span>:<span class="number">4</span>&#125;</span><br><span class="line">&#123;<span class="attr">"db"</span>:<span class="number">0</span>,<span class="attr">"key"</span>:<span class="string">"name3"</span>,<span class="attr">"ttl"</span>:<span class="number">-1</span>,<span class="attr">"type"</span>:<span class="string">"string"</span>,<span class="attr">"value"</span>:<span class="string">"BBB"</span>,<span class="attr">"size"</span>:<span class="number">3</span>&#125;</span><br><span class="line">&#123;<span class="attr">"db"</span>:<span class="number">1</span>,<span class="attr">"key"</span>:<span class="string">"name2"</span>,<span class="attr">"ttl"</span>:<span class="number">-1</span>,<span class="attr">"type"</span>:<span class="string">"string"</span>,<span class="attr">"value"</span>:<span class="string">"BBB"</span>,<span class="attr">"size"</span>:<span class="number">3</span>&#125;</span><br><span class="line">&#123;<span class="attr">"db"</span>:<span class="number">1</span>,<span class="attr">"key"</span>:<span class="string">"name1"</span>,<span class="attr">"ttl"</span>:<span class="number">-1</span>,<span class="attr">"type"</span>:<span class="string">"string"</span>,<span class="attr">"value"</span>:<span class="string">"AAA"</span>,<span class="attr">"size"</span>:<span class="number">3</span>&#125;</span><br><span class="line">&#123;<span class="attr">"db"</span>:<span class="number">2</span>,<span class="attr">"key"</span>:<span class="string">"name2"</span>,<span class="attr">"ttl"</span>:<span class="number">-1</span>,<span class="attr">"type"</span>:<span class="string">"string"</span>,<span class="attr">"value"</span>:<span class="string">"BBB"</span>,<span class="attr">"size"</span>:<span class="number">3</span>&#125;</span><br><span class="line">&#123;<span class="attr">"db"</span>:<span class="number">2</span>,<span class="attr">"key"</span>:<span class="string">"name1"</span>,<span class="attr">"ttl"</span>:<span class="number">-1</span>,<span class="attr">"type"</span>:<span class="string">"string"</span>,<span class="attr">"value"</span>:<span class="string">"AAA"</span>,<span class="attr">"size"</span>:<span class="number">3</span>&#125;</span><br><span class="line">&#123;<span class="attr">"db"</span>:<span class="number">3</span>,<span class="attr">"key"</span>:<span class="string">"name2"</span>,<span class="attr">"ttl"</span>:<span class="number">-1</span>,<span class="attr">"type"</span>:<span class="string">"string"</span>,<span class="attr">"value"</span>:<span class="string">"HHH"</span>,<span class="attr">"size"</span>:<span class="number">3</span>&#125;</span><br><span class="line">&#123;<span class="attr">"db"</span>:<span class="number">3</span>,<span class="attr">"key"</span>:<span class="string">"name1"</span>,<span class="attr">"ttl"</span>:<span class="number">-1</span>,<span class="attr">"type"</span>:<span class="string">"string"</span>,<span class="attr">"value"</span>:<span class="string">"RRR"</span>,<span class="attr">"size"</span>:<span class="number">3</span>&#125;</span><br><span class="line">&#123;<span class="attr">"db"</span>:<span class="number">4</span>,<span class="attr">"key"</span>:<span class="string">"age"</span>,<span class="attr">"ttl"</span>:<span class="number">-1</span>,<span class="attr">"type"</span>:<span class="string">"string"</span>,<span class="attr">"value"</span>:<span class="string">"20"</span>,<span class="attr">"size"</span>:<span class="number">2</span>&#125;</span><br><span class="line">&#123;<span class="attr">"db"</span>:<span class="number">4</span>,<span class="attr">"key"</span>:<span class="string">"age2"</span>,<span class="attr">"ttl"</span>:<span class="number">-1</span>,<span class="attr">"type"</span>:<span class="string">"string"</span>,<span class="attr">"value"</span>:<span class="string">"19"</span>,<span class="attr">"size"</span>:<span class="number">2</span>&#125;</span><br></pre></td></tr></table></figure><p>使用参数 -d 指定某个数据库的所有数据导出为 JSON 文件：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">redis-dump -u 127.0.0.1:6379 -d 4 &gt; db_db4.json</span><br></pre></td></tr></table></figure><p>该命令会将 4 号数据库的数据导出到 db_db4.json 文件：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#123;<span class="attr">"db"</span>:<span class="number">4</span>,<span class="attr">"key"</span>:<span class="string">"age"</span>,<span class="attr">"ttl"</span>:<span class="number">-1</span>,<span class="attr">"type"</span>:<span class="string">"string"</span>,<span class="attr">"value"</span>:<span class="string">"20"</span>,<span class="attr">"size"</span>:<span class="number">2</span>&#125;</span><br><span class="line">&#123;<span class="attr">"db"</span>:<span class="number">4</span>,<span class="attr">"key"</span>:<span class="string">"age2"</span>,<span class="attr">"ttl"</span>:<span class="number">-1</span>,<span class="attr">"type"</span>:<span class="string">"string"</span>,<span class="attr">"value"</span>:<span class="string">"19"</span>,<span class="attr">"size"</span>:<span class="number">2</span>&#125;</span><br></pre></td></tr></table></figure><p>使用参数 -f 过滤数据，只导出特定的数据：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">redis-dump -u 127.0.0.1:6379 -f name &gt; db_name.json</span><br></pre></td></tr></table></figure><p>该命令会导出 key 包含 name 的数据到 db_name.json 文件：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&#123;<span class="attr">"db"</span>:<span class="number">0</span>,<span class="attr">"key"</span>:<span class="string">"name5"</span>,<span class="attr">"ttl"</span>:<span class="number">-1</span>,<span class="attr">"type"</span>:<span class="string">"string"</span>,<span class="attr">"value"</span>:<span class="string">"DDD"</span>,<span class="attr">"size"</span>:<span class="number">3</span>&#125;</span><br><span class="line">&#123;<span class="attr">"db"</span>:<span class="number">0</span>,<span class="attr">"key"</span>:<span class="string">"name2"</span>,<span class="attr">"ttl"</span>:<span class="number">-1</span>,<span class="attr">"type"</span>:<span class="string">"string"</span>,<span class="attr">"value"</span>:<span class="string">"AAA"</span>,<span class="attr">"size"</span>:<span class="number">3</span>&#125;</span><br><span class="line">&#123;<span class="attr">"db"</span>:<span class="number">0</span>,<span class="attr">"key"</span>:<span class="string">"name4"</span>,<span class="attr">"ttl"</span>:<span class="number">-1</span>,<span class="attr">"type"</span>:<span class="string">"string"</span>,<span class="attr">"value"</span>:<span class="string">"CCC"</span>,<span class="attr">"size"</span>:<span class="number">3</span>&#125;</span><br><span class="line">&#123;<span class="attr">"db"</span>:<span class="number">0</span>,<span class="attr">"key"</span>:<span class="string">"name6"</span>,<span class="attr">"ttl"</span>:<span class="number">-1</span>,<span class="attr">"type"</span>:<span class="string">"string"</span>,<span class="attr">"value"</span>:<span class="string">"CCC"</span>,<span class="attr">"size"</span>:<span class="number">3</span>&#125;</span><br><span class="line">&#123;<span class="attr">"db"</span>:<span class="number">0</span>,<span class="attr">"key"</span>:<span class="string">"name"</span>,<span class="attr">"ttl"</span>:<span class="number">-1</span>,<span class="attr">"type"</span>:<span class="string">"string"</span>,<span class="attr">"value"</span>:<span class="string">"TRHX"</span>,<span class="attr">"size"</span>:<span class="number">4</span>&#125;</span><br><span class="line">&#123;<span class="attr">"db"</span>:<span class="number">0</span>,<span class="attr">"key"</span>:<span class="string">"name3"</span>,<span class="attr">"ttl"</span>:<span class="number">-1</span>,<span class="attr">"type"</span>:<span class="string">"string"</span>,<span class="attr">"value"</span>:<span class="string">"BBB"</span>,<span class="attr">"size"</span>:<span class="number">3</span>&#125;</span><br><span class="line">&#123;<span class="attr">"db"</span>:<span class="number">1</span>,<span class="attr">"key"</span>:<span class="string">"name2"</span>,<span class="attr">"ttl"</span>:<span class="number">-1</span>,<span class="attr">"type"</span>:<span class="string">"string"</span>,<span class="attr">"value"</span>:<span class="string">"BBB"</span>,<span class="attr">"size"</span>:<span class="number">3</span>&#125;</span><br><span class="line">&#123;<span class="attr">"db"</span>:<span class="number">1</span>,<span class="attr">"key"</span>:<span class="string">"name1"</span>,<span class="attr">"ttl"</span>:<span class="number">-1</span>,<span class="attr">"type"</span>:<span class="string">"string"</span>,<span class="attr">"value"</span>:<span class="string">"AAA"</span>,<span class="attr">"size"</span>:<span class="number">3</span>&#125;</span><br><span class="line">&#123;<span class="attr">"db"</span>:<span class="number">2</span>,<span class="attr">"key"</span>:<span class="string">"name2"</span>,<span class="attr">"ttl"</span>:<span class="number">-1</span>,<span class="attr">"type"</span>:<span class="string">"string"</span>,<span class="attr">"value"</span>:<span class="string">"BBB"</span>,<span class="attr">"size"</span>:<span class="number">3</span>&#125;</span><br><span class="line">&#123;<span class="attr">"db"</span>:<span class="number">2</span>,<span class="attr">"key"</span>:<span class="string">"name1"</span>,<span class="attr">"ttl"</span>:<span class="number">-1</span>,<span class="attr">"type"</span>:<span class="string">"string"</span>,<span class="attr">"value"</span>:<span class="string">"AAA"</span>,<span class="attr">"size"</span>:<span class="number">3</span>&#125;</span><br><span class="line">&#123;<span class="attr">"db"</span>:<span class="number">3</span>,<span class="attr">"key"</span>:<span class="string">"name2"</span>,<span class="attr">"ttl"</span>:<span class="number">-1</span>,<span class="attr">"type"</span>:<span class="string">"string"</span>,<span class="attr">"value"</span>:<span class="string">"HHH"</span>,<span class="attr">"size"</span>:<span class="number">3</span>&#125;</span><br><span class="line">&#123;<span class="attr">"db"</span>:<span class="number">3</span>,<span class="attr">"key"</span>:<span class="string">"name1"</span>,<span class="attr">"ttl"</span>:<span class="number">-1</span>,<span class="attr">"type"</span>:<span class="string">"string"</span>,<span class="attr">"value"</span>:<span class="string">"RRR"</span>,<span class="attr">"size"</span>:<span class="number">3</span>&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="【16-9-2】导入数据-redis-load"><a href="#【16-9-2】导入数据-redis-load" class="headerlink" title="【16.9.2】导入数据 redis-load"></a><font color="#1BC3FB">【16.9.2】导入数据 redis-load</font></h2><p>在命令行输入 <code>redis-load -h</code> 可以查看：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">redis-load --help  </span><br><span class="line">  Try: redis-load [global options] COMMAND [command options]   </span><br><span class="line">    -u, --uri=S                      Redis URI (e.g. redis://hostname[:port])  </span><br><span class="line">    -d, --database=S                 Redis database (e.g. -d 15)  </span><br><span class="line">    -s, --sleep=S                    Sleep for S seconds after dumping (for debugging)  </span><br><span class="line">    -n, --no_check_utf8  </span><br><span class="line">    -V, --version                    Display version  </span><br><span class="line">    -D, --debug  </span><br><span class="line">        --nosafe</span><br></pre></td></tr></table></figure><p>命令解释：</p><ul><li>-u Redis 连接字符串</li><li>-d 数据库代号，默认是全部</li><li>-s 导出之后的休眠时间</li><li>-n 不检测 UTF-8 编码</li><li>-V 显示版本</li><li>-D 开启调试</li></ul><p>导入示例：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 将 test.json 文件所有内容导入到数据库</span></span><br><span class="line">&lt; test.json redis-load -u 127.0.0.1:6379</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 将 test.json 文件 db 值为 6 的数据导入到数据库 </span></span><br><span class="line">&lt; test.json redis-load -u 127.0.0.1:6379 -d 6</span><br></pre></td></tr></table></figure><p>另外，以下方法也能导入数据：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 将 test.json 文件所有内容导入到数据库</span></span><br><span class="line">cat test.json | redis-load -u 127.0.0.1:6379</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 将 test.json 文件 db 值为 6 的数据导入到数据库 </span></span><br><span class="line">cat test.json | redis-load -u 127.0.0.1:6379 -d 6</span><br></pre></td></tr></table></figure><p>注意：<code>cat</code> 是 Linux 系统专有的命令，在 Windows 系统里没有 <code>cat</code> 这个命令，可以使用 Windows 批处理命令 <code>type</code> 代替 <code>cat</code></p>]]></content>
      
      
      <categories>
          
          <category> Python3 学习笔记 </category>
          
          <category> 爬虫学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 爬虫 </tag>
            
            <tag> Redis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python3 爬虫学习笔记 C15</title>
      <link href="/2019/09/10/A45-Python3-spider-C15/"/>
      <url>/2019/09/10/A45-Python3-spider-C15/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><blockquote><center><font color="#1BC3FB" size="4">Python3 爬虫学习笔记第十五章 —— 【代理的基本使用】</font></center></blockquote><a id="more"></a><hr><h1 id="【15-1】代理初识"><a href="#【15-1】代理初识" class="headerlink" title="【15.1】代理初识"></a><font color="#ff0000">【15.1】代理初识</font></h1><p>大多数网站都有反爬虫机制，如果一段时间内同一个 IP 发送的请求过多，服务器就会拒绝访问，直接禁封该 IP，此时，设置代理即可解决这个问题，网络上有许多免费代理和付费代理，比如<a href="https://www.xicidaili.com/" target="_blank" rel="noopener">西刺代理</a>，<a href="http://www.goubanjia.com/" target="_blank" rel="noopener">全网代理 IP</a>，<a href="https://www.kuaidaili.com/" target="_blank" rel="noopener">快代理</a>等，设置代理需要用到的就是代理 IP 地址和端口号，如果电脑上装有代理软件（例如：酸酸乳SSR），软件一般会在本机创建 HTTP 或 SOCKS 代理服务，直接使用此代理也可以</p><h1 id="【15-2】urllib-库使用代理"><a href="#【15-2】urllib-库使用代理" class="headerlink" title="【15.2】urllib 库使用代理"></a><font color="#ff0000">【15.2】urllib 库使用代理</font></h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> urllib.error <span class="keyword">import</span> URLError</span><br><span class="line"><span class="keyword">from</span> urllib.request <span class="keyword">import</span> ProxyHandler, build_opener</span><br><span class="line"></span><br><span class="line">proxy = <span class="string">'127.0.0.1:1080'</span></span><br><span class="line">proxy_handler = ProxyHandler(&#123;</span><br><span class="line">    <span class="string">'http'</span>: <span class="string">'http://'</span> + proxy,</span><br><span class="line">    <span class="string">'https'</span>: <span class="string">'https://'</span> + proxy</span><br><span class="line">&#125;)</span><br><span class="line">opener = build_opener(proxy_handler)</span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    response = opener.open(<span class="string">'http://httpbin.org/get'</span>)</span><br><span class="line">    print(response.read().decode(<span class="string">'utf8'</span>))</span><br><span class="line"><span class="keyword">except</span> URLError <span class="keyword">as</span> e:</span><br><span class="line">    print(e.reason)</span><br></pre></td></tr></table></figure><p><a href="http://httpbin.org/get" target="_blank" rel="noopener">http://httpbin.org/get</a> 是一个请求测试站点，借助 ProxyHandler 设置代理，参数为字典类型，键名为协议类型，键值为代理，代理的写法：<code>proxy = &#39;127.0.0.1:1080&#39;</code>，其中 127.0.0.1 为 IP 地址，1080 为端口号，这里表示本机的代理软件已经在本地 1080 端口创建了代理服务，代理前面需要加上 http 或者 https 协议，当请求的链接为 http 协议时，ProxyHandler 会自动调用 http 代理，同理，当请求的链接为 https 协议时，ProxyHandler 会自动调用 https 代理，<code>build_opener()</code> 方法传入 ProxyHandler 对象来创建一个 opener，调用 <code>open()</code> 方法传入一个 url 即可通过代理访问该链接，运行结果为一个 JSON，origin 字段为此时客户端的 IP</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="string">"args"</span>: &#123;&#125;, </span><br><span class="line">  <span class="string">"headers"</span>: &#123;</span><br><span class="line">    <span class="string">"Accept-Encoding"</span>: <span class="string">"identity"</span>, </span><br><span class="line">    <span class="string">"Host"</span>: <span class="string">"httpbin.org"</span>, </span><br><span class="line">    <span class="string">"User-Agent"</span>: <span class="string">"Python-urllib/3.6"</span></span><br><span class="line">  &#125;, </span><br><span class="line">  <span class="string">"origin"</span>: <span class="string">"168.70.60.141, 168.70.60.141"</span>, </span><br><span class="line">  <span class="string">"url"</span>: <span class="string">"https://httpbin.org/get"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果是需要认证的代理，只需要在代理前面加入代理认证的用户名密码即可：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> urllib.error <span class="keyword">import</span> URLError</span><br><span class="line"><span class="keyword">from</span> urllib.request <span class="keyword">import</span> ProxyHandler, build_opener</span><br><span class="line"></span><br><span class="line">proxy = <span class="string">'username:password@127.0.0.1:1080'</span></span><br><span class="line">proxy_handler = ProxyHandler(&#123;</span><br><span class="line">    <span class="string">'http'</span>: <span class="string">'http://'</span> + proxy,</span><br><span class="line">    <span class="string">'https'</span>: <span class="string">'https://'</span> + proxy</span><br><span class="line">&#125;)</span><br><span class="line">opener = build_opener(proxy_handler)</span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    response = opener.open(<span class="string">'http://httpbin.org/get'</span>)</span><br><span class="line">    print(response.read().decode(<span class="string">'utf8'</span>))</span><br><span class="line"><span class="keyword">except</span> URLError <span class="keyword">as</span> e:</span><br><span class="line">    print(e.reason)</span><br></pre></td></tr></table></figure><p>如果代理是 SOCKS5 类型，需要用到 <code>socks</code> 模块，设置代理方法如下：</p><blockquote><p>扩展：SOCKS5 是一个代理协议，它在使用TCP/IP协议通讯的前端机器和服务器机器之间扮演一个中介角色，使得内部网中的前端机器变得能够访问 Internet 网中的服务器，或者使通讯更加安全</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> socks</span><br><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"><span class="keyword">from</span> urllib <span class="keyword">import</span> request</span><br><span class="line"><span class="keyword">from</span> urllib.error <span class="keyword">import</span> URLError</span><br><span class="line"></span><br><span class="line">socks.set_default_proxy(socks.SOCKS5, <span class="string">'127.0.0.1'</span>, <span class="number">1080</span>)</span><br><span class="line">socket.socket = socks.socksocket</span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    response = request.urlopen(<span class="string">'http://httpbin.org/get'</span>)</span><br><span class="line">    print(response.read().decode(<span class="string">'utf-8'</span>))</span><br><span class="line"><span class="keyword">except</span> URLError <span class="keyword">as</span> e:</span><br><span class="line">    print(e.reason)</span><br></pre></td></tr></table></figure><h1 id="【15-3】requests-库使用代理"><a href="#【15-3】requests-库使用代理" class="headerlink" title="【15.3】requests 库使用代理"></a><font color="#ff0000">【15.3】requests 库使用代理</font></h1><p>requests 库使用代理只需要传入 proxies 参数即可：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">proxy = <span class="string">'127.0.0.1:1080'</span></span><br><span class="line">proxies = (&#123;</span><br><span class="line">    <span class="string">'http'</span>: <span class="string">'http://'</span> + proxy,</span><br><span class="line">    <span class="string">'https'</span>: <span class="string">'https://'</span> + proxy</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    response = requests.get(<span class="string">'http://httpbin.org/get'</span>, proxies=proxies)</span><br><span class="line">    print(response.text)</span><br><span class="line"><span class="keyword">except</span> requests.exceptions.ChunkedEncodingError <span class="keyword">as</span> e:</span><br><span class="line">    print(<span class="string">'Error'</span>, e.args)</span><br></pre></td></tr></table></figure><p>输出结果：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="string">"args"</span>: &#123;&#125;, </span><br><span class="line">  <span class="string">"headers"</span>: &#123;</span><br><span class="line">    <span class="string">"Accept"</span>: <span class="string">"*/*"</span>, </span><br><span class="line">    <span class="string">"Accept-Encoding"</span>: <span class="string">"gzip, deflate"</span>, </span><br><span class="line">    <span class="string">"Host"</span>: <span class="string">"httpbin.org"</span>, </span><br><span class="line">    <span class="string">"User-Agent"</span>: <span class="string">"python-requests/2.22.0"</span></span><br><span class="line">  &#125;, </span><br><span class="line">  <span class="string">"origin"</span>: <span class="string">"168.70.60.141, 168.70.60.141"</span>, </span><br><span class="line">  <span class="string">"url"</span>: <span class="string">"https://httpbin.org/get"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>同样的，如果是需要认证的代理，也只需要在代理前面加入代理认证的用户名密码即可：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">proxy = <span class="string">'username:password@127.0.0.1:1080'</span></span><br><span class="line">proxies = (&#123;</span><br><span class="line">    <span class="string">'http'</span>: <span class="string">'http://'</span> + proxy,</span><br><span class="line">    <span class="string">'https'</span>: <span class="string">'https://'</span> + proxy</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    response = requests.get(<span class="string">'http://httpbin.org/get'</span>, proxies=proxies)</span><br><span class="line">    print(response.text)</span><br><span class="line"><span class="keyword">except</span> requests.exceptions.ChunkedEncodingError <span class="keyword">as</span> e:</span><br><span class="line">    print(<span class="string">'Error'</span>, e.args)</span><br></pre></td></tr></table></figure><p>如果代理是 SOCKS5 类型，需要用到  <code>requests[socks]</code> 模块或者 <code>socks</code> 模块，使用 <code>requests[socks]</code> 模块时设置代理方法如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">proxy = <span class="string">'127.0.0.1:1080'</span></span><br><span class="line">proxies = &#123;</span><br><span class="line">    <span class="string">'http'</span>: <span class="string">'socks5://'</span> + proxy,</span><br><span class="line">    <span class="string">'https'</span>: <span class="string">'socks5://'</span> + proxy</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    response = requests.get(<span class="string">'http://httpbin.org/get'</span>, proxies=proxies)</span><br><span class="line">    print(response.text)</span><br><span class="line"><span class="keyword">except</span> requests.exceptions.ConnectionError <span class="keyword">as</span> e:</span><br><span class="line">    print(<span class="string">'Error'</span>, e.args)</span><br></pre></td></tr></table></figure><p>使用 <code>socks</code> 模块时设置代理方法如下（此类方法为全局设置）：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> socks</span><br><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"></span><br><span class="line">socks.set_default_proxy(socks.SOCKS5, <span class="string">'127.0.0.1'</span>, <span class="number">1080</span>)</span><br><span class="line">socket.socket = socks.socksocket</span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    response = requests.get(<span class="string">'http://httpbin.org/get'</span>)</span><br><span class="line">    print(response.text)</span><br><span class="line"><span class="keyword">except</span> requests.exceptions.ConnectionError <span class="keyword">as</span> e:</span><br><span class="line">    print(<span class="string">'Error'</span>, e.args)</span><br></pre></td></tr></table></figure><h1 id="【15-4】Selenium-使用代理"><a href="#【15-4】Selenium-使用代理" class="headerlink" title="【15.4】Selenium 使用代理"></a><font color="#ff0000">【15.4】Selenium 使用代理</font></h1><h2 id="【15-4-1】Chrome"><a href="#【15-4-1】Chrome" class="headerlink" title="【15.4.1】Chrome"></a><font color="#1BC3FB">【15.4.1】Chrome</font></h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"></span><br><span class="line">proxy = <span class="string">'127.0.0.1:1080'</span></span><br><span class="line">chrome_options = webdriver.ChromeOptions()</span><br><span class="line">chrome_options.add_argument(<span class="string">'--proxy-server=http://'</span> + proxy)</span><br><span class="line">path = <span class="string">r'F:\PycharmProjects\Python3爬虫\chromedriver.exe'</span></span><br><span class="line">browser = webdriver.Chrome(executable_path=path, chrome_options=chrome_options)</span><br><span class="line">browser.get(<span class="string">'http://httpbin.org/get'</span>)</span><br></pre></td></tr></table></figure><p>通过 ChromeOptions 来设置代理，在创建 Chrome 对象的时候用 chrome_options 参数传递即可，访问目标链接后显示如下信息：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="string">"args"</span>: &#123;&#125;, </span><br><span class="line">  <span class="string">"headers"</span>: &#123;</span><br><span class="line">    <span class="string">"Accept"</span>: <span class="string">"text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3"</span>, </span><br><span class="line">    <span class="string">"Accept-Encoding"</span>: <span class="string">"gzip, deflate"</span>, </span><br><span class="line">    <span class="string">"Accept-Language"</span>: <span class="string">"zh-CN,zh;q=0.9"</span>, </span><br><span class="line">    <span class="string">"Host"</span>: <span class="string">"httpbin.org"</span>, </span><br><span class="line">    <span class="string">"Upgrade-Insecure-Requests"</span>: <span class="string">"1"</span>, </span><br><span class="line">    <span class="string">"User-Agent"</span>: <span class="string">"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/75.0.3770.142 Safari/537.36"</span></span><br><span class="line">  &#125;, </span><br><span class="line">  <span class="string">"origin"</span>: <span class="string">"168.70.60.141, 168.70.60.141"</span>, </span><br><span class="line">  <span class="string">"url"</span>: <span class="string">"https://httpbin.org/get"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果是认证代理，则设置方法如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.chrome.options <span class="keyword">import</span> Options</span><br><span class="line"><span class="keyword">import</span> zipfile</span><br><span class="line"></span><br><span class="line">ip = <span class="string">'127.0.0.1'</span></span><br><span class="line">port = <span class="number">1080</span></span><br><span class="line">username = <span class="string">'username'</span></span><br><span class="line">password = <span class="string">'password'</span></span><br><span class="line"></span><br><span class="line">manifest_json = <span class="string">"""&#123;"version":"1.0.0","manifest_version": 2,"name":"Chrome Proxy","permissions": ["proxy","tabs","unlimitedStorage","storage","&lt;all_urls&gt;","webRequest","webRequestBlocking"],"background": &#123;"scripts": ["background.js"]</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"></span><br><span class="line">background_js =<span class="string">"""</span></span><br><span class="line"><span class="string">var config = &#123;</span></span><br><span class="line"><span class="string">        mode: "fixed_servers",</span></span><br><span class="line"><span class="string">        rules: &#123;</span></span><br><span class="line"><span class="string">          singleProxy: &#123;</span></span><br><span class="line"><span class="string">            scheme: "http",</span></span><br><span class="line"><span class="string">            host: "%(ip) s",</span></span><br><span class="line"><span class="string">            port: %(port) s</span></span><br><span class="line"><span class="string">          &#125;</span></span><br><span class="line"><span class="string">        &#125;</span></span><br><span class="line"><span class="string">      &#125;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">chrome.proxy.settings.set(&#123;value: config, scope: "regular"&#125;, function() &#123;&#125;);</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">function callbackFn(details) &#123;</span></span><br><span class="line"><span class="string">    return &#123;</span></span><br><span class="line"><span class="string">        authCredentials: &#123;username: "%(username) s",</span></span><br><span class="line"><span class="string">            password: "%(password) s"</span></span><br><span class="line"><span class="string">        &#125;</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">chrome.webRequest.onAuthRequired.addListener(</span></span><br><span class="line"><span class="string">            callbackFn,</span></span><br><span class="line"><span class="string">            &#123;urls: ["&lt;all_urls&gt;"]&#125;,</span></span><br><span class="line"><span class="string">            ['blocking']</span></span><br><span class="line"><span class="string">)</span></span><br><span class="line"><span class="string">"""</span> % &#123;<span class="string">'ip'</span>: ip, <span class="string">'port'</span>: port, <span class="string">'username'</span>: username, <span class="string">'password'</span>: password&#125;</span><br><span class="line"></span><br><span class="line">plugin_file = <span class="string">'proxy_auth_plugin.zip'</span></span><br><span class="line"><span class="keyword">with</span> zipfile.ZipFile(plugin_file, <span class="string">'w'</span>) <span class="keyword">as</span> zp:</span><br><span class="line">    zp.writestr(<span class="string">"manifest.json"</span>, manifest_json)</span><br><span class="line">    zp.writestr(<span class="string">"background.js"</span>, background_js)</span><br><span class="line">chrome_options = Options()</span><br><span class="line">chrome_options.add_argument(<span class="string">"--start-maximized"</span>)</span><br><span class="line">path = <span class="string">r'F:\PycharmProjects\Python3爬虫\chromedriver.exe'</span></span><br><span class="line">chrome_options.add_extension(plugin_file)</span><br><span class="line">browser = webdriver.Chrome(executable_path=path, chrome_options=chrome_options)</span><br><span class="line">browser.get(<span class="string">'http://httpbin.org/get'</span>)</span><br></pre></td></tr></table></figure><p>需要在本地创建一个 manifest.json 配置文件和 background.js 脚本来设置认证代理。运行代码之后本地会生成一个 proxy_auth_plugin.zip 文件来保存当前配置</p><h2 id="【15-4-1】PhantomJS"><a href="#【15-4-1】PhantomJS" class="headerlink" title="【15.4.1】PhantomJS"></a><font color="#1BC3FB">【15.4.1】PhantomJS</font></h2><p>借助 service_args 参数，也就是命令行参数即可设置代理：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"></span><br><span class="line">service_args = [</span><br><span class="line">    <span class="string">'--proxy=127.0.0.1:1080'</span>,</span><br><span class="line">    <span class="string">'--proxy-type=http'</span></span><br><span class="line">]</span><br><span class="line">path = <span class="string">r'F:\PycharmProjects\Python3爬虫\phantomjs-2.1.1\bin\phantomjs.exe'</span></span><br><span class="line">browser = webdriver.PhantomJS(executable_path=path, service_args=service_args)</span><br><span class="line">browser.get(<span class="string">'http://httpbin.org/get'</span>)</span><br><span class="line">print(browser.page_source)</span><br></pre></td></tr></table></figure><p>运行结果：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;html&gt;&lt;head&gt;&lt;/head&gt;&lt;body&gt;&lt;pre style="word-wrap: break-word; white-space: pre-wrap;"&gt;&#123;</span><br><span class="line">  <span class="string">"args"</span>: &#123;&#125;, </span><br><span class="line">  <span class="string">"headers"</span>: &#123;</span><br><span class="line">    <span class="string">"Accept"</span>: <span class="string">"text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8"</span>, </span><br><span class="line">    <span class="string">"Accept-Encoding"</span>: <span class="string">"gzip, deflate"</span>, </span><br><span class="line">    <span class="string">"Accept-Language"</span>: <span class="string">"zh-CN,en,*"</span>, </span><br><span class="line">    <span class="string">"Host"</span>: <span class="string">"httpbin.org"</span>, </span><br><span class="line">    <span class="string">"User-Agent"</span>: <span class="string">"Mozilla/5.0 (Windows NT 6.2; WOW64) AppleWebKit/538.1 (KHTML, like Gecko) PhantomJS/2.1.1 Safari/538.1"</span></span><br><span class="line">  &#125;, </span><br><span class="line">  <span class="string">"origin"</span>: <span class="string">"168.70.60.141, 168.70.60.141"</span>, </span><br><span class="line">  <span class="string">"url"</span>: <span class="string">"https://httpbin.org/get"</span></span><br><span class="line">&#125;</span><br><span class="line">&lt;/pre&gt;&lt;/body&gt;&lt;/html&gt;</span><br></pre></td></tr></table></figure><p>如果是需要认证的代理，只需要在 service_args 参数加入 –proxy-auth 选项即可：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"></span><br><span class="line">service_args = [</span><br><span class="line">    <span class="string">'--proxy=127.0.0.1:1080'</span>,</span><br><span class="line">    <span class="string">'--proxy-type=http'</span>,</span><br><span class="line">    <span class="string">'--proxy-auth=username:password'</span></span><br><span class="line">]</span><br><span class="line">path = <span class="string">r'F:\PycharmProjects\Python3爬虫\phantomjs-2.1.1\bin\phantomjs.exe'</span></span><br><span class="line">browser = webdriver.PhantomJS(executable_path=path, service_args=service_args)</span><br><span class="line">browser.get(<span class="string">'http://httpbin.org/get'</span>)</span><br><span class="line">print(browser.page_source)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Python3 学习笔记 </category>
          
          <category> 爬虫学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 爬虫 </tag>
            
            <tag> 代理 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python3 爬虫学习笔记 C14</title>
      <link href="/2019/09/08/A44-Python3-spider-C14/"/>
      <url>/2019/09/08/A44-Python3-spider-C14/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><blockquote><center><font color="#1BC3FB" size="4">Python3 爬虫学习笔记第十四章 —— 【验证码对抗系列 — 点触验证码】</font></center></blockquote><a id="more"></a><hr><h1 id="【14-1】关于点触验证码"><a href="#【14-1】关于点触验证码" class="headerlink" title="【14.1】关于点触验证码"></a><font color="#ff0000">【14.1】关于点触验证码</font></h1><p>点触验证码是由杭州微触科技有限公司研发的新一代的互联网验证码，使用点击的形式完成验证，采用专利的印刷算法以及加密算法，保证每次请求到的验证图具有极高的安全性，常见的点触验证码如下：</p><fancybox><br><img src="https://cdn.jsdelivr.net/gh/TRHX/ImageHosting/ITRHX-PIC/A44/01.png" alt="01"><br></fancybox><hr><h1 id="【14-2】点触验证码攻克思路"><a href="#【14-2】点触验证码攻克思路" class="headerlink" title="【14.2】点触验证码攻克思路"></a><font color="#ff0000">【14.2】点触验证码攻克思路</font></h1><p>点触验证码相对其他类型验证码比较复杂，如果依靠 OCR 图像识别点触验证码，则识别难度非常大，此时就要用到互联网的验证码服务平台，这些服务平台全部都是人工在线识别，准确率非常高，原理就是先将验证码图片提交给平台，平台会返回识别结果在图片中的坐标位置，然后我们再解析坐标模拟点击即可，常见的打码平台有超级鹰、云打码等，打码平台是收费的，拿超级鹰来说，1元 = 1000题分，识别一次验证码将花费一定的题分，不同类型验证码需要的题分不同，验证码越复杂所需题分越高，比如 7 位中文汉字需要 70 题分，常见 4 ~ 6 位英文数字只要 10 题分，其他打码平台价格也都差不多</p><p>以下以<a href="http://www.chaojiying.com/" target="_blank" rel="noopener">超级鹰打码平台</a>和<a href="https://www.12306.cn/" target="_blank" rel="noopener">中国铁路12306官网</a>来做练习</p><hr><h1 id="【14-3】模拟登录-12306-—-总体思路"><a href="#【14-3】模拟登录-12306-—-总体思路" class="headerlink" title="【14.3】模拟登录 12306 — 总体思路"></a><font color="#ff0000">【14.3】模拟登录 12306 — 总体思路</font></h1><p>首先在超级鹰打码平台注册账号并申请一个软件 ID，官网：<a href="http://www.chaojiying.com/" target="_blank" rel="noopener">http://www.chaojiying.com/</a> ，先充值一块钱得到 1000 题分，观察 12306 官网，发现验证码是要我们点击所有满足条件的图片，一般有 1~4 张图片满足要求，由此可确定在超级鹰打码平台的验证码类型为 9004（坐标多选,返回1~4个坐标,如:x1,y1|x2,y2|x3,y3）， 获取其 Python API：<a href="http://www.chaojiying.com/download/Chaojiying_Python.rar" target="_blank" rel="noopener">http://www.chaojiying.com/download/Chaojiying_Python.rar</a> ，然后用 Selenium 模拟登陆，获取到验证码，并将验证码发送给超级鹰后台，返回识别图片的坐标，最后模拟点击即可，整个过程的实现由主程序 <code>12306.py</code> 和超级鹰 API <code>chaojiying.py</code> 组成</p><p>整个程序包含的函数：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">()</span>:</span> 初始化 WebDriver、Chaojiying 对象等</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">crack</span><span class="params">()</span>:</span> 破解入口、获取、识别验证码、模拟登录</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">open</span><span class="params">()</span>:</span> 账号密码输入</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_screenshot</span><span class="params">()</span>:</span> 整个页面截图</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_touclick_element</span><span class="params">()</span>:</span> 获取验证码位置</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_position</span><span class="params">()</span>:</span> 获取验证码坐标</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_touclick_image</span><span class="params">()</span>:</span> 剪裁验证码部分</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_points</span><span class="params">(self, captcha_result)</span>:</span> 分析超级鹰返回的坐标</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">touch_click_words</span><span class="params">(self, locations)</span>:</span> 模拟点击符合要求的图片</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">login</span><span class="params">(self)</span>:</span> 点击登陆按钮，完成模拟登录</span><br></pre></td></tr></table></figure><p>整个程序用到的库：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">from</span> io <span class="keyword">import</span> BytesIO</span><br><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image</span><br><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.chrome.options <span class="keyword">import</span> Options</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver <span class="keyword">import</span> ActionChains</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.common.by <span class="keyword">import</span> By</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.support.ui <span class="keyword">import</span> WebDriverWait</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.support <span class="keyword">import</span> expected_conditions <span class="keyword">as</span> EC</span><br><span class="line"><span class="keyword">from</span> chaojiying <span class="keyword">import</span> Chaojiying</span><br><span class="line"><span class="keyword">from</span> selenium.common.exceptions <span class="keyword">import</span> TimeoutException</span><br></pre></td></tr></table></figure><hr><h1 id="【14-4】主函数"><a href="#【14-4】主函数" class="headerlink" title="【14.4】主函数"></a><font color="#ff0000">【14.4】主函数</font></h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    crack = CrackTouClick()</span><br><span class="line">    crack.crack()</span><br></pre></td></tr></table></figure><hr><h1 id="【14-5】初始化函数"><a href="#【14-5】初始化函数" class="headerlink" title="【14.5】初始化函数"></a><font color="#ff0000">【14.5】初始化函数</font></h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">USERNAME = <span class="string">'155********'</span></span><br><span class="line">PASSWORD = <span class="string">'***********'</span></span><br><span class="line"></span><br><span class="line">CHAOJIYING_USERNAME = <span class="string">'*******'</span></span><br><span class="line">CHAOJIYING_PASSWORD = <span class="string">'*******'</span></span><br><span class="line">CHAOJIYING_SOFT_ID = <span class="string">'********'</span></span><br><span class="line">CHAOJIYING_KIND = <span class="string">'9004'</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CrackTouClick</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.url = <span class="string">'https://kyfw.12306.cn/otn/resources/login.html'</span></span><br><span class="line">        path = <span class="string">r'F:\PycharmProjects\Python3爬虫\chromedriver.exe'</span></span><br><span class="line">        chrome_options = Options()</span><br><span class="line">        chrome_options.add_argument(<span class="string">'--start-maximized'</span>)</span><br><span class="line">        self.browser = webdriver.Chrome(executable_path=path, chrome_options=chrome_options)</span><br><span class="line">        self.wait = WebDriverWait(self.browser, <span class="number">20</span>)</span><br><span class="line">        self.email = USERNAME</span><br><span class="line">        self.password = PASSWORD</span><br><span class="line">        self.chaojiying = Chaojiying_Client(CHAOJIYING_USERNAME, CHAOJIYING_PASSWORD, CHAOJIYING_SOFT_ID)</span><br></pre></td></tr></table></figure><p>定义 12306 账号（<code>USERNAME</code>）、密码（<code>PASSWORD</code>）、超级鹰用户名（<code>CHAOJIYING_USERNAME</code>）、超级鹰登录密码（<code>CHAOJIYING_PASSWORD</code>）、超级鹰软件 ID（<code>CHAOJIYING_SOFT_ID</code>）、验证码类型（<code>CHAOJIYING_KIND</code>），登录链接 url：<a href="https://kyfw.12306.cn/otn/resources/login.html" target="_blank" rel="noopener">https://kyfw.12306.cn/otn/resources/login.html</a> ，谷歌浏览器驱动的目录（<code>path</code>），浏览器启动参数，并将相关参数传递给超级鹰 API</p><hr><h1 id="【14-6】破解入口函数"><a href="#【14-6】破解入口函数" class="headerlink" title="【14.6】破解入口函数"></a><font color="#ff0000">【14.6】破解入口函数</font></h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">crack</span><span class="params">(self)</span>:</span></span><br><span class="line">    self.open()</span><br><span class="line">    image = self.get_touclick_image()</span><br><span class="line">    bytes_array = BytesIO()</span><br><span class="line">    image.save(bytes_array, format=<span class="string">'PNG'</span>)</span><br><span class="line">    result = self.chaojiying.PostPic(bytes_array.getvalue(), CHAOJIYING_KIND)</span><br><span class="line">    print(result)</span><br><span class="line">    locations = self.get_points(result)</span><br><span class="line">    self.touch_click_words(locations)</span><br><span class="line">    self.login()</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        success = self.wait.until(EC.text_to_be_present_in_element((By.CSS_SELECTOR, <span class="string">'.welcome-name'</span>), <span class="string">'用户姓名'</span>))</span><br><span class="line">        print(success)</span><br><span class="line">        cc = self.browser.find_element(By.CSS_SELECTOR, <span class="string">'.welcome-name'</span>)</span><br><span class="line">        print(cc.text)</span><br><span class="line">    <span class="keyword">except</span> TimeoutException:</span><br><span class="line">        self.chaojiying.ReportError(result[<span class="string">'pic_id'</span>])</span><br><span class="line">        self.crack()</span><br></pre></td></tr></table></figure><p>调用 <code>open()</code> 函数输入账号密码</p><p>调用 <code>get_touclick_image()</code> 函数获取验证码图片</p><p>利用超级鹰 Python API <code>PostPic()</code> 方法即可把图片发送给超级鹰后台，发送的图像是字节流格式，返回的结果是一个 JSON，如果识别成功，典型的返回结果类似于：<code>{&#39;err_no&#39;: 0, &#39;err_str&#39;: &#39;OK&#39;, &#39;pic_id&#39;: &#39;6002001380949200001&#39;, &#39;pic_str&#39;: &#39;132,127|56,77&#39;, &#39;md5&#39;: &#39;1f8e1d4bef8b11484cb1f1f34299865b&#39;}</code>，其中，pic_str 就是识别的文字的坐标，是以字符串形式返回的，每个坐标都以 | 分隔</p><p>调用 <code>get_points()</code> 函数解析超级鹰识别结果</p><p>调用 <code>touch_click_words()</code> 函数对符合要求的图片进行点击，然后点击登陆按钮模拟登陆</p><p>使用 <code>try-except</code> 语句判断是否出现了用户信息，判断依据是是否有用户姓名的出现，出现的姓名和实际姓名一致则登录成功，如果失败了就重试，超级鹰会返回该分值</p><hr><h1 id="【14-7】账号密码输入函数"><a href="#【14-7】账号密码输入函数" class="headerlink" title="【14.7】账号密码输入函数"></a><font color="#ff0000">【14.7】账号密码输入函数</font></h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">open</span><span class="params">(self)</span>:</span></span><br><span class="line">    self.browser.get(self.url)</span><br><span class="line">    login = self.wait.until(EC.presence_of_element_located((By.CSS_SELECTOR, <span class="string">'.login-hd-account'</span>)))</span><br><span class="line">    login.click()</span><br><span class="line">    time.sleep(<span class="number">3</span>)</span><br><span class="line">    username = self.wait.until(EC.presence_of_element_located((By.CSS_SELECTOR, <span class="string">'input#J-userName'</span>)))</span><br><span class="line">    password = self.wait.until(EC.presence_of_element_located((By.CSS_SELECTOR, <span class="string">'input#J-password'</span>)))</span><br><span class="line">    username.send_keys(self.email)</span><br><span class="line">    password.send_keys(self.password)</span><br></pre></td></tr></table></figure><p>分析页面可知，登陆页面 URL 为：<a href="https://kyfw.12306.cn/otn/resources/login.html" target="_blank" rel="noopener">https://kyfw.12306.cn/otn/resources/login.html</a> ，该页面默认出现的是扫描二维码登陆，所以要先点击账号登录，找到该 CSS 元素为 <code>login-hd-account</code>，调用 <code>click()</code> 方法实现模拟点击，此时出现账号密码输入框，同样找到其 ID 分别为 <code>J-userName</code> 和 <code>J-password</code>，调用 <code>send_keys()</code> 方法输入账号密码</p><hr><h1 id="【14-8】页面截图函数"><a href="#【14-8】页面截图函数" class="headerlink" title="【14.8】页面截图函数"></a><font color="#ff0000">【14.8】页面截图函数</font></h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_screenshot</span><span class="params">(self)</span>:</span></span><br><span class="line">    screenshot = self.browser.get_screenshot_as_png()</span><br><span class="line">    screenshot = Image.open(BytesIO(screenshot))</span><br><span class="line">    <span class="keyword">return</span> screenshot</span><br></pre></td></tr></table></figure><p>对整个页面进行截图</p><hr><h1 id="【14-9】验证码元素查找函数"><a href="#【14-9】验证码元素查找函数" class="headerlink" title="【14.9】验证码元素查找函数"></a><font color="#ff0000">【14.9】验证码元素查找函数</font></h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_touclick_element</span><span class="params">(self)</span>:</span></span><br><span class="line">    element = self.wait.until(EC.presence_of_element_located((By.CSS_SELECTOR, <span class="string">'.login-pwd-code'</span>)))</span><br><span class="line">    <span class="keyword">return</span> element</span><br></pre></td></tr></table></figure><p>同样分析页面，验证码所在位置的 CSS 为 <code>login-pwd-code</code></p><hr><h1 id="【14-10】获取验证码坐标函数"><a href="#【14-10】获取验证码坐标函数" class="headerlink" title="【14.10】获取验证码坐标函数"></a><font color="#ff0000">【14.10】获取验证码坐标函数</font></h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_position</span><span class="params">(self)</span>:</span></span><br><span class="line">    element = self.get_touclick_element()</span><br><span class="line">    time.sleep(<span class="number">3</span>)</span><br><span class="line">    location = element.location</span><br><span class="line">    size = element.size</span><br><span class="line">    top, bottom, left, right = location[<span class="string">'y'</span>], location[<span class="string">'y'</span>] + size[<span class="string">'height'</span>], location[<span class="string">'x'</span>], location[<span class="string">'x'</span>] + size[<span class="string">'width'</span>]</span><br><span class="line">    <span class="keyword">return</span> (top, bottom, left, right)</span><br></pre></td></tr></table></figure><p>location 属性可以返回该图片对象在浏览器中的位置，坐标轴是以屏幕左上角为原点，x 轴向右递增，y 轴向下递增，size 属性可以返回该图片对象的高度和宽度，由此可以得到验证码的位置信息</p><hr><h1 id="【14-11】验证码剪裁函数"><a href="#【14-11】验证码剪裁函数" class="headerlink" title="【14.11】验证码剪裁函数"></a><font color="#ff0000">【14.11】验证码剪裁函数</font></h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_touclick_image</span><span class="params">(self, name=<span class="string">'12306.png'</span>)</span>:</span></span><br><span class="line">    top, bottom, left, right = self.get_position()</span><br><span class="line">    screenshot = self.get_screenshot()</span><br><span class="line">    captcha = screenshot.crop((left, top, right, bottom))</span><br><span class="line">    captcha.save(name)</span><br><span class="line">    <span class="keyword">return</span> captcha</span><br></pre></td></tr></table></figure><p>根据验证码的坐标信息，对页面截图进行剪裁，得到验证码部分，将其保存为 12306.png</p><hr><h1 id="【14-12】验证码坐标解析函数"><a href="#【14-12】验证码坐标解析函数" class="headerlink" title="【14.12】验证码坐标解析函数"></a><font color="#ff0000">【14.12】验证码坐标解析函数</font></h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_points</span><span class="params">(self, captcha_result)</span>:</span></span><br><span class="line">    groups = captcha_result.get(<span class="string">'pic_str'</span>).split(<span class="string">'|'</span>)</span><br><span class="line">    locations = [[int(number) <span class="keyword">for</span> number <span class="keyword">in</span> group.split(<span class="string">','</span>)] <span class="keyword">for</span> group <span class="keyword">in</span> groups]</span><br><span class="line">    <span class="keyword">return</span> locations</span><br></pre></td></tr></table></figure><p><code>get_points()</code> 方法将超级鹰的验证码识别结果变成列表的形式</p><hr><h1 id="【14-13】验证码模拟点击函数"><a href="#【14-13】验证码模拟点击函数" class="headerlink" title="【14.13】验证码模拟点击函数"></a><font color="#ff0000">【14.13】验证码模拟点击函数</font></h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">touch_click_words</span><span class="params">(self, locations)</span>:</span></span><br><span class="line">    <span class="keyword">for</span> location <span class="keyword">in</span> locations:</span><br><span class="line">        print(location)</span><br><span class="line">        ActionChains(self.browser).move_to_element_with_offset(self.get_touclick_element(), location[<span class="number">0</span>]/<span class="number">1.25</span>, location[<span class="number">1</span>]/<span class="number">1.25</span>).click().perform()</span><br></pre></td></tr></table></figure><p><code>touch_click_words()</code> 方法通过调用 <code>move_to_element_with_offset()</code> 方法依次传入解析后的坐标，点击即可</p><hr><h1 id="【14-14】模拟点击登陆函数"><a href="#【14-14】模拟点击登陆函数" class="headerlink" title="【14.14】模拟点击登陆函数"></a><font color="#ff0000">【14.14】模拟点击登陆函数</font></h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">login</span><span class="params">(self)</span>:</span></span><br><span class="line">    submit = self.wait.until(EC.element_to_be_clickable((By.ID, <span class="string">'J-login'</span>)))</span><br><span class="line">    submit.click()</span><br></pre></td></tr></table></figure><p>分析页面，找到登陆按钮的 ID 为 <code>J-login</code>，调用 <code>click()</code> 方法模拟点击按钮实现登录</p><hr><h1 id="【14-15】效果实现动图"><a href="#【14-15】效果实现动图" class="headerlink" title="【14.15】效果实现动图"></a><font color="#ff0000">【14.15】效果实现动图</font></h1><p>最终实现效果图：（关键信息已经过打码处理）</p><fancybox><br><img src="https://cdn.jsdelivr.net/gh/TRHX/ImageHosting/ITRHX-PIC/A44/12306.gif" alt="02"><br></fancybox><hr><h1 id="【14-16】完整代码"><a href="#【14-16】完整代码" class="headerlink" title="【14.16】完整代码"></a><font color="#ff0000">【14.16】完整代码</font></h1><p><code>12306.py</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">from</span> io <span class="keyword">import</span> BytesIO</span><br><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image</span><br><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.chrome.options <span class="keyword">import</span> Options</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver <span class="keyword">import</span> ActionChains</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.common.by <span class="keyword">import</span> By</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.support.ui <span class="keyword">import</span> WebDriverWait</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.support <span class="keyword">import</span> expected_conditions <span class="keyword">as</span> EC</span><br><span class="line"><span class="keyword">from</span> chaojiying <span class="keyword">import</span> Chaojiying_Client</span><br><span class="line"><span class="keyword">from</span> selenium.common.exceptions <span class="keyword">import</span> TimeoutException</span><br><span class="line"></span><br><span class="line">USERNAME = <span class="string">'155********'</span></span><br><span class="line">PASSWORD = <span class="string">'***********'</span></span><br><span class="line"></span><br><span class="line">CHAOJIYING_USERNAME = <span class="string">'***********'</span></span><br><span class="line">CHAOJIYING_PASSWORD = <span class="string">'***********'</span></span><br><span class="line">CHAOJIYING_SOFT_ID = <span class="string">'******'</span></span><br><span class="line">CHAOJIYING_KIND = <span class="string">'9004'</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CrackTouClick</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span>     <span class="comment">#登陆</span></span><br><span class="line">        self.url = <span class="string">'https://kyfw.12306.cn/otn/resources/login.html'</span></span><br><span class="line">        path = <span class="string">r'F:\PycharmProjects\Python3爬虫\chromedriver.exe'</span></span><br><span class="line">        chrome_options = Options()</span><br><span class="line">        chrome_options.add_argument(<span class="string">'--start-maximized'</span>)</span><br><span class="line">        self.browser = webdriver.Chrome(executable_path=path, chrome_options=chrome_options)</span><br><span class="line">        self.wait = WebDriverWait(self.browser, <span class="number">20</span>)</span><br><span class="line">        self.email = USERNAME</span><br><span class="line">        self.password = PASSWORD</span><br><span class="line">        self.chaojiying = Chaojiying_Client(CHAOJIYING_USERNAME, CHAOJIYING_PASSWORD, CHAOJIYING_SOFT_ID)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">crack</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.open()</span><br><span class="line">        image = self.get_touclick_image()</span><br><span class="line">        bytes_array = BytesIO()</span><br><span class="line">        image.save(bytes_array, format=<span class="string">'PNG'</span>)</span><br><span class="line">        result = self.chaojiying.PostPic(bytes_array.getvalue(), CHAOJIYING_KIND)</span><br><span class="line">        print(result)</span><br><span class="line">        locations = self.get_points(result)</span><br><span class="line">        self.touch_click_words(locations)</span><br><span class="line">        self.login()</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            success = self.wait.until(EC.text_to_be_present_in_element((By.CSS_SELECTOR, <span class="string">'.welcome-name'</span>), <span class="string">'谭仁侯'</span>))</span><br><span class="line">            print(success)</span><br><span class="line">            cc = self.browser.find_element(By.CSS_SELECTOR, <span class="string">'.welcome-name'</span>)</span><br><span class="line">            print(cc.text)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">except</span> TimeoutException:</span><br><span class="line">            self.chaojiying.ReportError(result[<span class="string">'pic_id'</span>])</span><br><span class="line">            self.crack()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">open</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.browser.get(self.url)</span><br><span class="line">        login = self.wait.until(EC.presence_of_element_located((By.CSS_SELECTOR, <span class="string">'.login-hd-account'</span>)))</span><br><span class="line">        login.click()</span><br><span class="line">        time.sleep(<span class="number">3</span>)</span><br><span class="line">        username = self.wait.until(EC.presence_of_element_located((By.CSS_SELECTOR, <span class="string">'input#J-userName'</span>)))</span><br><span class="line">        password = self.wait.until(EC.presence_of_element_located((By.CSS_SELECTOR, <span class="string">'input#J-password'</span>)))</span><br><span class="line">        username.send_keys(self.email)</span><br><span class="line">        password.send_keys(self.password)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_screenshot</span><span class="params">(self)</span>:</span></span><br><span class="line">        screenshot = self.browser.get_screenshot_as_png()</span><br><span class="line">        screenshot = Image.open(BytesIO(screenshot))</span><br><span class="line">        <span class="keyword">return</span> screenshot</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_touclick_element</span><span class="params">(self)</span>:</span></span><br><span class="line">        element = self.wait.until(EC.presence_of_element_located((By.CSS_SELECTOR, <span class="string">'.login-pwd-code'</span>)))</span><br><span class="line">        <span class="keyword">return</span> element</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_position</span><span class="params">(self)</span>:</span></span><br><span class="line">        element = self.get_touclick_element()</span><br><span class="line">        time.sleep(<span class="number">3</span>)</span><br><span class="line">        location = element.location</span><br><span class="line">        size = element.size</span><br><span class="line">        top, bottom, left, right = location[<span class="string">'y'</span>], location[<span class="string">'y'</span>] + size[<span class="string">'height'</span>], location[<span class="string">'x'</span>], location[<span class="string">'x'</span>] + size[<span class="string">'width'</span>]</span><br><span class="line">        <span class="keyword">return</span> (top, bottom, left, right)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_touclick_image</span><span class="params">(self, name=<span class="string">'12306.png'</span>)</span>:</span></span><br><span class="line">        top, bottom, left, right = self.get_position()</span><br><span class="line">        screenshot = self.get_screenshot()</span><br><span class="line">        captcha = screenshot.crop((left, top, right, bottom))</span><br><span class="line">        captcha.save(name)</span><br><span class="line">        <span class="keyword">return</span> captcha</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_points</span><span class="params">(self, captcha_result)</span>:</span></span><br><span class="line">        groups = captcha_result.get(<span class="string">'pic_str'</span>).split(<span class="string">'|'</span>)</span><br><span class="line">        locations = [[int(number) <span class="keyword">for</span> number <span class="keyword">in</span> group.split(<span class="string">','</span>)] <span class="keyword">for</span> group <span class="keyword">in</span> groups]</span><br><span class="line">        <span class="keyword">return</span> locations</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">touch_click_words</span><span class="params">(self, locations)</span>:</span></span><br><span class="line">        <span class="keyword">for</span> location <span class="keyword">in</span> locations:</span><br><span class="line">            print(location)</span><br><span class="line">            ActionChains(self.browser).move_to_element_with_offset(self.get_touclick_element(), location[<span class="number">0</span>]/<span class="number">1.25</span>, location[<span class="number">1</span>]/<span class="number">1.25</span>).click().perform()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">login</span><span class="params">(self)</span>:</span></span><br><span class="line">        submit = self.wait.until(EC.element_to_be_clickable((By.ID, <span class="string">'J-login'</span>)))</span><br><span class="line">        submit.click()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    crack = CrackTouClick()</span><br><span class="line">    crack.crack()</span><br></pre></td></tr></table></figure><p><code>chaojiying.py</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">from</span> hashlib <span class="keyword">import</span> md5</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Chaojiying_Client</span><span class="params">(object)</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, username, password, soft_id)</span>:</span></span><br><span class="line">        self.username = username</span><br><span class="line">        password = password.encode(<span class="string">'utf8'</span>)</span><br><span class="line">        self.password = md5(password).hexdigest()</span><br><span class="line">        self.soft_id = soft_id</span><br><span class="line">        self.base_params = &#123;</span><br><span class="line">            <span class="string">'user'</span>: self.username,</span><br><span class="line">            <span class="string">'pass2'</span>: self.password,</span><br><span class="line">            <span class="string">'softid'</span>: self.soft_id,</span><br><span class="line">        &#125;</span><br><span class="line">        self.headers = &#123;</span><br><span class="line">            <span class="string">'Connection'</span>: <span class="string">'Keep-Alive'</span>,</span><br><span class="line">            <span class="string">'User-Agent'</span>: <span class="string">'Mozilla/4.0 (compatible; MSIE 8.0; Windows NT 5.1; Trident/4.0)'</span>,</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">PostPic</span><span class="params">(self, im, codetype)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        im: 图片字节</span></span><br><span class="line"><span class="string">        codetype: 题目类型 参考 http://www.chaojiying.com/price.html</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        params = &#123;</span><br><span class="line">            <span class="string">'codetype'</span>: codetype,</span><br><span class="line">        &#125;</span><br><span class="line">        params.update(self.base_params)</span><br><span class="line">        files = &#123;<span class="string">'userfile'</span>: (<span class="string">'ccc.jpg'</span>, im)&#125;</span><br><span class="line">        r = requests.post(<span class="string">'http://upload.chaojiying.net/Upload/Processing.php'</span>, data=params, files=files, headers=self.headers)</span><br><span class="line">        <span class="keyword">return</span> r.json()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">ReportError</span><span class="params">(self, im_id)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        im_id:报错题目的图片ID</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        params = &#123;</span><br><span class="line">            <span class="string">'id'</span>: im_id,</span><br><span class="line">        &#125;</span><br><span class="line">        params.update(self.base_params)</span><br><span class="line">        r = requests.post(<span class="string">'http://upload.chaojiying.net/Upload/ReportError.php'</span>, data=params, headers=self.headers)</span><br><span class="line">        <span class="keyword">return</span> r.json()</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Python3 学习笔记 </category>
          
          <category> 爬虫学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 爬虫 </tag>
            
            <tag> 点触验证码 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python3 爬虫学习笔记 C13</title>
      <link href="/2019/09/07/A43-Python3-spider-C13/"/>
      <url>/2019/09/07/A43-Python3-spider-C13/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><blockquote><center><font color="#1BC3FB" size="4">Python3 爬虫学习笔记第十三章 —— 【验证码对抗系列 — 滑动验证码】</font></center></blockquote><a id="more"></a><hr><h1 id="【13-1】关于滑动验证码"><a href="#【13-1】关于滑动验证码" class="headerlink" title="【13.1】关于滑动验证码"></a><font color="#ff0000">【13.1】关于滑动验证码</font></h1><p>滑动验证码属于行为式验证码，需要通过用户的操作行为来完成验证，一般是根据提示用鼠标将滑块拖动到指定的位置完成验证，此类验证码背景图片采用多种图像加密技术，且添加了很多随机效果，能有效防止OCR文字识别，另外，验证码上的文字采用了随机印刷技术，能够随机采用多种字体、多种变形的实时随机印刷，防止暴力破解；斗鱼、哔哩哔哩、淘宝等平台都使用了滑动验证码</p><fancybox><br><img src="https://cdn.jsdelivr.net/gh/TRHX/ImageHosting/ITRHX-PIC/A43/01.png" alt="01"><br></fancybox><hr><h1 id="【13-2】滑动验证码攻克思路"><a href="#【13-2】滑动验证码攻克思路" class="headerlink" title="【13.2】滑动验证码攻克思路"></a><font color="#ff0000">【13.2】滑动验证码攻克思路</font></h1><p>利用自动化测试工具 Selenium 直接模拟人的行为方式来完成验证，首先要分析页面，想办法找到滑动验证码的完整图片、带有缺口的图片和需要滑动的图片，通过对比原始的图片和带滑块缺口的图片的像素，像素不同的地方就是缺口位置，计算出滑块缺口的位置，得到所需要滑动的距离，最后利用 Selenium 进行对滑块的拖拽，拖拽时要模仿人的行为，由于有个对准过程，所以是先快后慢，匀速移动、随机速度移动都不会成功</p><p>以下以哔哩哔哩为例来做模拟登录练习</p><hr><h1 id="【13-3】模拟登录-bilibili-—-总体思路"><a href="#【13-3】模拟登录-bilibili-—-总体思路" class="headerlink" title="【13.3】模拟登录 bilibili — 总体思路"></a><font color="#ff0000">【13.3】模拟登录 bilibili — 总体思路</font></h1><p>首先使用 Selenium 模拟登陆 bilibili，自动输入账号密码，查找到登陆按钮并点击，使其出现滑动验证码，此时分析页面，滑动验证组件是由3个 canvas 组成，分别代表完整图片、带有缺口的图片和需要滑动的图片，3个 canvas 元素包含 CSS  <code>display</code> 属性，<code>display:block</code> 为可见，<code>display:none</code> 为不可见，分别获取三张图片时要将其他两张图片设置为 <code>display:none</code>，获取元素位置后即可对图片截图并保存，通过图片像素对比，找到缺口位置即为滑块要移动的距离，随后构造滑动轨迹，按照先加速后减速的方式移动滑块完成验证。</p><p>整个程序包含的函数：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">init</span><span class="params">()</span>:</span> 初始化函数，定义全局变量</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">login</span><span class="params">()</span>:</span> 登录函数，输入账号密码并点击登录</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">find_element</span><span class="params">()</span>:</span> 验证码元素查找函数，查找三张图的元素</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">hide_element</span><span class="params">()</span>:</span> 设置元素不可见函数</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">show_element</span><span class="params">()</span>:</span> 设置元素可见函数</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">save_screenshot</span><span class="params">()</span>:</span> 验证码截图函数，截取三张图并保存</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">slide</span><span class="params">()</span>:</span> 滑动函数</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">is_pixel_equal</span><span class="params">()</span>:</span> 像素判断函数，寻找缺口位置</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_distance</span><span class="params">()</span>:</span> 计算滑块移动距离函数</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_track</span><span class="params">()</span>:</span> 构造移动轨迹函数</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">move_to_gap</span><span class="params">()</span>:</span> 模拟拖动函数</span><br></pre></td></tr></table></figure><p>整个程序用到的库：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.chrome.options <span class="keyword">import</span> Options</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.support.wait <span class="keyword">import</span> WebDriverWait</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.support <span class="keyword">import</span> expected_conditions <span class="keyword">as</span> EC</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.common.by <span class="keyword">import</span> By</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver <span class="keyword">import</span> ActionChains</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> random</span><br></pre></td></tr></table></figure><hr><h1 id="【13-4】主函数"><a href="#【13-4】主函数" class="headerlink" title="【13.4】主函数"></a><font color="#ff0000">【13.4】主函数</font></h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    init()</span><br><span class="line">    login()</span><br><span class="line">    find_element()</span><br><span class="line">    slide()</span><br></pre></td></tr></table></figure><hr><h1 id="【13-5】初始化函数"><a href="#【13-5】初始化函数" class="headerlink" title="【13.5】初始化函数"></a><font color="#ff0000">【13.5】初始化函数</font></h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">init</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">global</span> url, browser, username, password, wait</span><br><span class="line">    url = <span class="string">'https://passport.bilibili.com/login'</span></span><br><span class="line">    path = <span class="string">r'F:\PycharmProjects\Python3爬虫\chromedriver.exe'</span></span><br><span class="line">    chrome_options = Options()</span><br><span class="line">    chrome_options.add_argument(<span class="string">'--start-maximized'</span>)</span><br><span class="line">    browser = webdriver.Chrome(executable_path=path, chrome_options=chrome_options)</span><br><span class="line">    username = <span class="string">'155********'</span></span><br><span class="line">    password = <span class="string">'***********'</span></span><br><span class="line">    wait = WebDriverWait(browser, <span class="number">20</span>)</span><br></pre></td></tr></table></figure><p>global 关键字定义了全局变量，随后是登录页面url、谷歌浏览器驱动的目录path、实例化 Chrome 浏览器、设置浏览器分辨率最大化、用户名、密码、WebDriverWait() 方法设置等待超时</p><hr><h1 id="【13-6】登录函数"><a href="#【13-6】登录函数" class="headerlink" title="【13.6】登录函数"></a><font color="#ff0000">【13.6】登录函数</font></h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">login</span><span class="params">()</span>:</span></span><br><span class="line">    browser.get(url)</span><br><span class="line">    user = wait.until(EC.presence_of_element_located((By.ID, <span class="string">'login-username'</span>)))</span><br><span class="line">    passwd = wait.until(EC.presence_of_element_located((By.ID, <span class="string">'login-passwd'</span>)))</span><br><span class="line">    user.send_keys(username)</span><br><span class="line">    passwd.send_keys(password)</span><br><span class="line">    login_btn = wait.until(EC.presence_of_element_located((By.CSS_SELECTOR, <span class="string">'a.btn.btn-login'</span>)))</span><br><span class="line">    time.sleep(random.random() * <span class="number">3</span>)</span><br><span class="line">    login_btn.click()</span><br></pre></td></tr></table></figure><p>等待用户名输入框和密码输入框对应的 ID 节点加载出来，分析页面可知，用户名输入框 <code>id=&quot;login-username&quot;</code>，密码输入框 <code>id=&quot;login-passwd&quot;</code>，获取这两个节点，调用 <code>send_keys()</code> 方法输入用户名和密码，随后获取登录按钮，分析页面可知登录按钮 <code>class=&quot;btn btn-login&quot;</code>，随机产生一个数并将其扩大三倍作为暂停时间，最后调用 <code>click()</code> 方法实现登录按钮的点击</p><hr><h1 id="【13-7】验证码元素查找函数"><a href="#【13-7】验证码元素查找函数" class="headerlink" title="【13.7】验证码元素查找函数"></a><font color="#ff0000">【13.7】验证码元素查找函数</font></h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">find_element</span><span class="params">()</span>:</span></span><br><span class="line">    c_background = wait.until(</span><br><span class="line">        EC.presence_of_element_located((By.CSS_SELECTOR, <span class="string">'canvas.geetest_canvas_bg.geetest_absolute'</span>)))</span><br><span class="line">    c_slice = wait.until(</span><br><span class="line">        EC.presence_of_element_located((By.CSS_SELECTOR, <span class="string">'canvas.geetest_canvas_slice.geetest_absolute'</span>)))</span><br><span class="line">    c_full_bg = wait.until(</span><br><span class="line">        EC.presence_of_element_located((By.CSS_SELECTOR, <span class="string">'canvas.geetest_canvas_fullbg.geetest_fade.geetest_absolute'</span>)))</span><br><span class="line">    hide_element(c_slice)</span><br><span class="line">    save_screenshot(c_background, <span class="string">'back'</span>)</span><br><span class="line">    show_element(c_slice)</span><br><span class="line">    save_screenshot(c_slice, <span class="string">'slice'</span>)</span><br><span class="line">    show_element(c_full_bg)</span><br><span class="line">    save_screenshot(c_full_bg, <span class="string">'full'</span>)</span><br></pre></td></tr></table></figure><p>我们要获取验证码的三张图片，分别是完整的图片、带有缺口的图片和需要滑动的图片，分析页面代码，这三张图片是由 3 个 canvas 组成，3 个 canvas 元素包含 CSS  <code>display</code> 属性，<code>display:block</code> 为可见，<code>display:none</code> 为不可见，在分别获取三张图片时要将其他两张图片设置为 <code>display:none</code>，这样做才能单独提取到每张图片，定位三张图片的 class 分别为：带有缺口的图片（c_background）：<code>geetest_canvas_bg geetest_absolute</code>、需要滑动的图片（c_slice）：<code>geetest_canvas_slice geetest_absolute</code>、完整图片（c_full_bg）：<code>geetest_canvas_fullbg geetest_fade geetest_absolute</code>，随后传值给 <code>save_screenshot()</code> 函数，进一步对验证码进行处理</p><fancybox><br><img src="https://cdn.jsdelivr.net/gh/TRHX/ImageHosting/ITRHX-PIC/A43/02.png" alt="02"><br></fancybox><hr><h1 id="【13-8】元素可见性设置函数"><a href="#【13-8】元素可见性设置函数" class="headerlink" title="【13.8】元素可见性设置函数"></a><font color="#ff0000">【13.8】元素可见性设置函数</font></h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"># 设置元素不可见</span><br><span class="line">def hide_element(element):</span><br><span class="line">    browser.execute_script(&quot;arguments[0].style=arguments[1]&quot;, element, &quot;display: none;&quot;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 设置元素可见</span><br><span class="line">def show_element(element):</span><br><span class="line">    browser.execute_script(&quot;arguments[0].style=arguments[1]&quot;, element, &quot;display: block;&quot;)</span><br></pre></td></tr></table></figure><hr><h1 id="【13-9】验证码截图函数"><a href="#【13-9】验证码截图函数" class="headerlink" title="【13.9】验证码截图函数"></a><font color="#ff0000">【13.9】验证码截图函数</font></h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">save_screenshot</span><span class="params">(obj, name)</span>:</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        pic_url = browser.save_screenshot(<span class="string">'.\\bilibili.png'</span>)</span><br><span class="line">        print(<span class="string">"%s:截图成功!"</span> % pic_url)</span><br><span class="line">        left = obj.location[<span class="string">'x'</span>]</span><br><span class="line">        top = obj.location[<span class="string">'y'</span>]</span><br><span class="line">        right = left + obj.size[<span class="string">'width'</span>]</span><br><span class="line">        bottom = top + obj.size[<span class="string">'height'</span>]</span><br><span class="line">        print(<span class="string">'图：'</span> + name)</span><br><span class="line">        print(<span class="string">'Left %s'</span> % left)</span><br><span class="line">        print(<span class="string">'Top %s'</span> % top)</span><br><span class="line">        print(<span class="string">'Right %s'</span> % right)</span><br><span class="line">        print(<span class="string">'Bottom %s'</span> % bottom)</span><br><span class="line">        print(<span class="string">''</span>)</span><br><span class="line">        im = Image.open(<span class="string">'.\\bilibili.png'</span>)</span><br><span class="line">        im = im.crop((left, top, right, bottom))</span><br><span class="line">        file_name = <span class="string">'bili_'</span> + name + <span class="string">'.png'</span></span><br><span class="line">        im.save(file_name)</span><br><span class="line">    <span class="keyword">except</span> BaseException <span class="keyword">as</span> msg:</span><br><span class="line">        print(<span class="string">"%s:截图失败!"</span> % msg)</span><br></pre></td></tr></table></figure><p><code>location</code> 属性可以返回该图片对象在浏览器中的位置，坐标轴是以屏幕左上角为原点，x轴向右递增，y轴向下递增，<code>size</code> 属性可以返回该图片对象的高度和宽度，由此可以得到验证码的位置信息，首先调用 <code>save_screenshot()</code> 属性对整个页面截图并保存，然后向 <code>crop()</code> 方法传入验证码的位置信息，由位置信息再对验证码进行剪裁并保存</p><hr><h1 id="【13-10】滑动函数"><a href="#【13-10】滑动函数" class="headerlink" title="【13.10】滑动函数"></a><font color="#ff0000">【13.10】滑动函数</font></h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">slide</span><span class="params">()</span>:</span></span><br><span class="line">    distance = get_distance(Image.open(<span class="string">'.\\bili_back.png'</span>), Image.open(<span class="string">'.\\bili_full.png'</span>))</span><br><span class="line">    print(<span class="string">'计算偏移量为：%s Px'</span> % distance)</span><br><span class="line">    trace = get_trace(distance - <span class="number">5</span>)</span><br><span class="line">    move_to_gap(trace)</span><br><span class="line">    time.sleep(<span class="number">3</span>)</span><br></pre></td></tr></table></figure><p>向 <code>get_distance()</code> 函数传入完整的图片和缺口图片，计算滑块需要滑动的距离，再把距离信息传入 <code>get_trace()</code> 函数，构造滑块的移动轨迹，最后根据轨迹信息调用 <code>move_to_gap()</code> 函数移动滑块完成验证</p><hr><h1 id="【13-11】计算滑块移动距离函数"><a href="#【13-11】计算滑块移动距离函数" class="headerlink" title="【13.11】计算滑块移动距离函数"></a><font color="#ff0000">【13.11】计算滑块移动距离函数</font></h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_distance</span><span class="params">(bg_image, fullbg_image)</span>:</span></span><br><span class="line">    distance = <span class="number">60</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(distance, fullbg_image.size[<span class="number">0</span>]):</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> range(fullbg_image.size[<span class="number">1</span>]):</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> is_pixel_equal(fullbg_image, bg_image, i, j):</span><br><span class="line">                <span class="keyword">return</span> i</span><br></pre></td></tr></table></figure><p><code>get_distance()</code> 方法即获取缺口位置的方法，此方法的参数是两张图片，一张为完整的图片，另一张为带缺口的图片，distance 为滑块的初始位置，遍历两张图片的每个像素，利用 <code>is_pixel_equal()</code> 像素判断函数判断两张图片同一位置的像素是否相同，比较两张图 RGB 的绝对值是否均小于定义的阈值 threshold，如果绝对值均在阈值之内，则代表像素点相同，继续遍历，否则代表不相同的像素点，即缺口的位置</p><hr><h1 id="【13-12】像素判断函数"><a href="#【13-12】像素判断函数" class="headerlink" title="【13.12】像素判断函数"></a><font color="#ff0000">【13.12】像素判断函数</font></h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">is_pixel_equal</span><span class="params">(bg_image, fullbg_image, x, y)</span>:</span></span><br><span class="line">    bg_pixel = bg_image.load()[x, y]</span><br><span class="line">    fullbg_pixel = fullbg_image.load()[x, y]</span><br><span class="line">    threshold = <span class="number">60</span></span><br><span class="line">    <span class="keyword">if</span> (abs(bg_pixel[<span class="number">0</span>] - fullbg_pixel[<span class="number">0</span>] &lt; threshold) <span class="keyword">and</span> abs(bg_pixel[<span class="number">1</span>] - fullbg_pixel[<span class="number">1</span>] &lt; threshold) <span class="keyword">and</span> abs(</span><br><span class="line">            bg_pixel[<span class="number">2</span>] - fullbg_pixel[<span class="number">2</span>] &lt; threshold)):</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">True</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">False</span></span><br></pre></td></tr></table></figure><p>将完整图片和缺口图片两个对象分别赋值给变量 bg_image和 fullbg_image，接下来对比图片获取缺口。我们在这里遍历图片的每个坐标点，获取两张图片对应像素点的 RGB 数据，判断像素的各个颜色之差，<code>abs()</code> 用于取绝对值，如果二者的 RGB 数据差距在一定范围内，那就代表两个像素相同，继续比对下一个像素点，如果差距超过一定范围，则代表像素点不同，当前位置即为缺口位置</p><hr><h1 id="【13-13】构造移动轨迹函数"><a href="#【13-13】构造移动轨迹函数" class="headerlink" title="【13.13】构造移动轨迹函数"></a><font color="#ff0000">【13.13】构造移动轨迹函数</font></h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_trace</span><span class="params">(distance)</span>:</span></span><br><span class="line">    trace = []</span><br><span class="line">    faster_distance = distance * (<span class="number">4</span> / <span class="number">5</span>)</span><br><span class="line">    start, v0, t = <span class="number">0</span>, <span class="number">0</span>, <span class="number">0.1</span></span><br><span class="line">    <span class="keyword">while</span> start &lt; distance:</span><br><span class="line">        <span class="keyword">if</span> start &lt; faster_distance:</span><br><span class="line">            a = <span class="number">20</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            a = <span class="number">-20</span></span><br><span class="line">        move = v0 * t + <span class="number">1</span> / <span class="number">2</span> * a * t * t</span><br><span class="line">        v = v0 + a * t</span><br><span class="line">        v0 = v</span><br><span class="line">        start += move</span><br><span class="line">        trace.append(round(move))</span><br><span class="line">    <span class="keyword">return</span> trace</span><br></pre></td></tr></table></figure><p><code>get_trace()</code> 方法传入的参数为移动的总距离，返回的是运动轨迹，运动轨迹用 trace 表示，它是一个列表，列表的每个元素代表每次移动多少距离，利用 Selenium 进行对滑块的拖拽时要模仿人的行为，由于有个对准过程，所以是先快后慢，匀速移动、随机速度移动都不会成功，因此要设置一个加速和减速的距离，这里设置加速距离 <code>faster_distance</code> 是总距离 <code>distance</code> 的4/5倍，滑块滑动的加速度用 a 来表示，当前速度用 v 表示，初速度用 v0 表示，位移用 move 表示，所需时间用 t 表示，它们之间满足以下关系：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">move = v0 * t + 0.5 * a * t * t </span><br><span class="line">v = v0 + a * t</span><br></pre></td></tr></table></figure><p>设置初始位置、初始速度、时间间隔分别为0, 0, 0.1，加速阶段和减速阶段的加速度分别设置为20和-20，直到运动轨迹达到总距离时，循环终止，最后得到的 trace 记录了每个时间间隔移动了多少位移，这样滑块的运动轨迹就得到了</p><hr><h1 id="【13-14】模拟拖动函数"><a href="#【13-14】模拟拖动函数" class="headerlink" title="【13.14】模拟拖动函数"></a><font color="#ff0000">【13.14】模拟拖动函数</font></h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">move_to_gap</span><span class="params">(trace)</span>:</span></span><br><span class="line">    slider = wait.until(EC.presence_of_element_located((By.CSS_SELECTOR, <span class="string">'div.geetest_slider_button'</span>)))</span><br><span class="line">    ActionChains(browser).click_and_hold(slider).perform()</span><br><span class="line">    <span class="keyword">for</span> x <span class="keyword">in</span> trace:</span><br><span class="line">        ActionChains(browser).move_by_offset(xoffset=x, yoffset=<span class="number">0</span>).perform()</span><br><span class="line">    time.sleep(<span class="number">0.5</span>)</span><br><span class="line">    ActionChains(browser).release().perform()</span><br></pre></td></tr></table></figure><p>传入的参数为运动轨迹，首先查找到滑动按钮，然后调用 ActionChains 的 <code>click_and_hold()</code> 方法按住拖动底部滑块，<code>perform()</code> 方法用于执行，遍历运动轨迹获取每小段位移距离，调用 <code>move_by_offset()</code> 方法移动此位移，最后调用 <code>release()</code> 方法松开鼠标即可</p><hr><h1 id="【13-15】效果实现动图"><a href="#【13-15】效果实现动图" class="headerlink" title="【13.15】效果实现动图"></a><font color="#ff0000">【13.15】效果实现动图</font></h1><p>最终实现效果图：（关键信息已经过打码处理）</p><fancybox><br><img src="https://cdn.jsdelivr.net/gh/TRHX/ImageHosting/ITRHX-PIC/A43/bilibili.gif" alt="03"><br></fancybox><hr><h1 id="【13-16】完整代码"><a href="#【13-16】完整代码" class="headerlink" title="【13.16】完整代码"></a><font color="#ff0000">【13.16】完整代码</font></h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.chrome.options <span class="keyword">import</span> Options</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.support.wait <span class="keyword">import</span> WebDriverWait</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.support <span class="keyword">import</span> expected_conditions <span class="keyword">as</span> EC</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.common.by <span class="keyword">import</span> By</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver <span class="keyword">import</span> ActionChains</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">init</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">global</span> url, browser, username, password, wait</span><br><span class="line">    url = <span class="string">'https://passport.bilibili.com/login'</span></span><br><span class="line">    path = <span class="string">r'F:\PycharmProjects\Python3爬虫\chromedriver.exe'</span></span><br><span class="line">    chrome_options = Options()</span><br><span class="line">    chrome_options.add_argument(<span class="string">'--start-maximized'</span>)</span><br><span class="line">    browser = webdriver.Chrome(executable_path=path, chrome_options=chrome_options)</span><br><span class="line">    username = <span class="string">'155********'</span></span><br><span class="line">    password = <span class="string">'***********'</span></span><br><span class="line">    wait = WebDriverWait(browser, <span class="number">20</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">login</span><span class="params">()</span>:</span></span><br><span class="line">    browser.get(url)</span><br><span class="line">    user = wait.until(EC.presence_of_element_located((By.ID, <span class="string">'login-username'</span>)))</span><br><span class="line">    passwd = wait.until(EC.presence_of_element_located((By.ID, <span class="string">'login-passwd'</span>)))</span><br><span class="line">    user.send_keys(username)</span><br><span class="line">    passwd.send_keys(password)</span><br><span class="line">    login_btn = wait.until(EC.presence_of_element_located((By.CSS_SELECTOR, <span class="string">'a.btn.btn-login'</span>)))</span><br><span class="line">    time.sleep(random.random() * <span class="number">3</span>)</span><br><span class="line">    login_btn.click()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">find_element</span><span class="params">()</span>:</span></span><br><span class="line">    c_background = wait.until(</span><br><span class="line">        EC.presence_of_element_located((By.CSS_SELECTOR, <span class="string">'canvas.geetest_canvas_bg.geetest_absolute'</span>)))</span><br><span class="line">    c_slice = wait.until(</span><br><span class="line">        EC.presence_of_element_located((By.CSS_SELECTOR, <span class="string">'canvas.geetest_canvas_slice.geetest_absolute'</span>)))</span><br><span class="line">    c_full_bg = wait.until(</span><br><span class="line">        EC.presence_of_element_located((By.CSS_SELECTOR, <span class="string">'canvas.geetest_canvas_fullbg.geetest_fade.geetest_absolute'</span>)))</span><br><span class="line">    hide_element(c_slice)</span><br><span class="line">    save_screenshot(c_background, <span class="string">'back'</span>)</span><br><span class="line">    show_element(c_slice)</span><br><span class="line">    save_screenshot(c_slice, <span class="string">'slice'</span>)</span><br><span class="line">    show_element(c_full_bg)</span><br><span class="line">    save_screenshot(c_full_bg, <span class="string">'full'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">hide_element</span><span class="params">(element)</span>:</span></span><br><span class="line">    browser.execute_script(<span class="string">"arguments[0].style=arguments[1]"</span>, element, <span class="string">"display: none;"</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">show_element</span><span class="params">(element)</span>:</span></span><br><span class="line">    browser.execute_script(<span class="string">"arguments[0].style=arguments[1]"</span>, element, <span class="string">"display: block;"</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">save_screenshot</span><span class="params">(obj, name)</span>:</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        pic_url = browser.save_screenshot(<span class="string">'.\\bilibili.png'</span>)</span><br><span class="line">        print(<span class="string">"%s:截图成功!"</span> % pic_url)</span><br><span class="line">        left = obj.location[<span class="string">'x'</span>]</span><br><span class="line">        top = obj.location[<span class="string">'y'</span>]</span><br><span class="line">        right = left + obj.size[<span class="string">'width'</span>]</span><br><span class="line">        bottom = top + obj.size[<span class="string">'height'</span>]</span><br><span class="line">        print(<span class="string">'图：'</span> + name)</span><br><span class="line">        print(<span class="string">'Left %s'</span> % left)</span><br><span class="line">        print(<span class="string">'Top %s'</span> % top)</span><br><span class="line">        print(<span class="string">'Right %s'</span> % right)</span><br><span class="line">        print(<span class="string">'Bottom %s'</span> % bottom)</span><br><span class="line">        print(<span class="string">''</span>)</span><br><span class="line">        im = Image.open(<span class="string">'.\\bilibili.png'</span>)</span><br><span class="line">        im = im.crop((left, top, right, bottom))</span><br><span class="line">        file_name = <span class="string">'bili_'</span> + name + <span class="string">'.png'</span></span><br><span class="line">        im.save(file_name)</span><br><span class="line">    <span class="keyword">except</span> BaseException <span class="keyword">as</span> msg:</span><br><span class="line">        print(<span class="string">"%s:截图失败!"</span> % msg)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">slide</span><span class="params">()</span>:</span></span><br><span class="line">    distance = get_distance(Image.open(<span class="string">'.\\bili_back.png'</span>), Image.open(<span class="string">'.\\bili_full.png'</span>))</span><br><span class="line">    print(<span class="string">'计算偏移量为：%s Px'</span> % distance)</span><br><span class="line">    trace = get_trace(distance - <span class="number">5</span>)</span><br><span class="line">    move_to_gap(trace)</span><br><span class="line">    time.sleep(<span class="number">3</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_distance</span><span class="params">(bg_image, fullbg_image)</span>:</span></span><br><span class="line">    distance = <span class="number">60</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(distance, fullbg_image.size[<span class="number">0</span>]):</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> range(fullbg_image.size[<span class="number">1</span>]):</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> is_pixel_equal(fullbg_image, bg_image, i, j):</span><br><span class="line">                <span class="keyword">return</span> i</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">is_pixel_equal</span><span class="params">(bg_image, fullbg_image, x, y)</span>:</span></span><br><span class="line">    bg_pixel = bg_image.load()[x, y]</span><br><span class="line">    fullbg_pixel = fullbg_image.load()[x, y]</span><br><span class="line">    threshold = <span class="number">60</span></span><br><span class="line">    <span class="keyword">if</span> (abs(bg_pixel[<span class="number">0</span>] - fullbg_pixel[<span class="number">0</span>] &lt; threshold) <span class="keyword">and</span> abs(bg_pixel[<span class="number">1</span>] - fullbg_pixel[<span class="number">1</span>] &lt; threshold) <span class="keyword">and</span> abs(</span><br><span class="line">            bg_pixel[<span class="number">2</span>] - fullbg_pixel[<span class="number">2</span>] &lt; threshold)):</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">True</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">False</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_trace</span><span class="params">(distance)</span>:</span></span><br><span class="line">    trace = []</span><br><span class="line">    faster_distance = distance * (<span class="number">4</span> / <span class="number">5</span>)</span><br><span class="line">    start, v0, t = <span class="number">0</span>, <span class="number">0</span>, <span class="number">0.1</span></span><br><span class="line">    <span class="keyword">while</span> start &lt; distance:</span><br><span class="line">        <span class="keyword">if</span> start &lt; faster_distance:</span><br><span class="line">            a = <span class="number">20</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            a = <span class="number">-20</span></span><br><span class="line">        move = v0 * t + <span class="number">1</span> / <span class="number">2</span> * a * t * t</span><br><span class="line">        v = v0 + a * t</span><br><span class="line">        v0 = v</span><br><span class="line">        start += move</span><br><span class="line">        trace.append(round(move))</span><br><span class="line">    <span class="keyword">return</span> trace</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">move_to_gap</span><span class="params">(trace)</span>:</span></span><br><span class="line">    slider = wait.until(EC.presence_of_element_located((By.CSS_SELECTOR, <span class="string">'div.geetest_slider_button'</span>)))</span><br><span class="line">    ActionChains(browser).click_and_hold(slider).perform()</span><br><span class="line">    <span class="keyword">for</span> x <span class="keyword">in</span> trace:</span><br><span class="line">        ActionChains(browser).move_by_offset(xoffset=x, yoffset=<span class="number">0</span>).perform()</span><br><span class="line">    time.sleep(<span class="number">0.5</span>)</span><br><span class="line">    ActionChains(browser).release().perform()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    init()</span><br><span class="line">    login()</span><br><span class="line">    find_element()</span><br><span class="line">    slide()</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Python3 学习笔记 </category>
          
          <category> 爬虫学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 爬虫 </tag>
            
            <tag> 滑动验证码 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python3 爬虫学习笔记 C12</title>
      <link href="/2019/09/05/A42-Python3-spider-C12/"/>
      <url>/2019/09/05/A42-Python3-spider-C12/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><blockquote><center><font color="#1BC3FB" size="4">Python3 爬虫学习笔记第十二章 —— 【验证码对抗系列 — 图形验证码】</font></center></blockquote><a id="more"></a><h1 id="【12-1】关于普通图形验证码"><a href="#【12-1】关于普通图形验证码" class="headerlink" title="【12.1】关于普通图形验证码"></a><font color="#ff0000">【12.1】关于普通图形验证码</font></h1><p>普通图形验证码一般由四位纯数字、纯字母或者字母数字组合构成，是最常见的验证码，也是最简单的验证码，利用 tesserocr 或者 pytesseract 库即可识别此类验证码，前提是已经安装好 Tesseract-OCR 软件</p><fancybox><br><img src="https://cdn.jsdelivr.net/gh/TRHX/ImageHosting/ITRHX-PIC/A42/01.png" alt="01"><br></fancybox><h1 id="【12-2】tesserocr-库识别验证码"><a href="#【12-2】tesserocr-库识别验证码" class="headerlink" title="【12.2】tesserocr 库识别验证码"></a><font color="#ff0000">【12.2】tesserocr 库识别验证码</font></h1><p>简单示例：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> tesserocr</span><br><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image</span><br><span class="line"></span><br><span class="line">image = Image.open(<span class="string">'code.png'</span>)</span><br><span class="line">result = tesserocr.image_to_text(image)</span><br><span class="line">print(result)</span><br></pre></td></tr></table></figure><p>新建一个 Image 对象，调用 tesserocr 的 <code>image_to_text()</code> 方法，传入 Image 对象即可完成识别，另一种方法：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> tesserocr</span><br><span class="line">print(tesserocr.file_to_text(<span class="string">'code.png'</span>))</span><br></pre></td></tr></table></figure><h1 id="【12-3】pytesseract-库识别验证码"><a href="#【12-3】pytesseract-库识别验证码" class="headerlink" title="【12.3】pytesseract 库识别验证码"></a><font color="#ff0000">【12.3】pytesseract 库识别验证码</font></h1><p>简单示例：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pytesseract</span><br><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image</span><br><span class="line"></span><br><span class="line">img = Image.open(<span class="string">'code.png'</span>)</span><br><span class="line">img = img.convert(<span class="string">'RGB'</span>)</span><br><span class="line">img.show()</span><br><span class="line">print(pytesseract.image_to_string(img))</span><br></pre></td></tr></table></figure><p>pytesseract 的各种方法：</p><ul><li>get_tesseract_version：返回 Tesseract 的版本信息；</li><li>image_to_string：将图像上的 Tesseract OCR 运行结果返回到字符串；</li><li>image_to_boxes：返回包含已识别字符及其框边界的结果；</li><li>image_to_data：返回包含框边界，置信度和其他信息的结果。需要 Tesseract 3.05+；</li><li>image_to_osd：返回包含有关方向和脚本检测的信息的结果。</li></ul><p>有关参数：</p><p><code>image_to_data(image, lang=&#39;&#39;, config=&#39;&#39;, nice=0, output_type=Output.STRING)</code></p><ul><li>image：图像对象；</li><li>lang：Tesseract 语言代码字符串；</li><li>config：任何其他配置为字符串，例如：config=’–psm 6’；</li><li>nice：修改 Tesseract 运行的处理器优先级。Windows不支持。尼斯调整了类似 unix 的流程的优点；</li><li>output_type：类属性，指定输出的类型，默认为string。</li></ul><p>lang 参数，常见语言代码如下：</p><ul><li>chi_sim：简体中文</li><li>chi_tra：繁体中文</li><li>eng：英文</li><li>rus：俄罗斯语</li><li>fra：法语</li><li>deu：德语</li><li>jpn：日语</li></ul><h1 id="【12-4】验证码处理"><a href="#【12-4】验证码处理" class="headerlink" title="【12.4】验证码处理"></a><font color="#ff0000">【12.4】验证码处理</font></h1><p>利用 Image 对象的 <code>convert()</code> 方法传入不同参数可以对验证码做一些额外的处理，如转灰度、二值化等操作，经过处理过后的验证码会更加容易被识别，识别准确度更高，各种参数及含义：</p><ul><li>1：1位像素，黑白，每字节一个像素存储；</li><li>L：8位像素，黑白；</li><li>P：8位像素，使用调色板映射到任何其他模式；</li><li>RGB：3x8位像素，真彩色；</li><li>RGBA：4x8位像素，带透明度掩模的真彩色；</li><li>CMYK：4x8位像素，分色；</li><li>YCbCr：3x8位像素，彩色视频格式；</li><li>I：32位有符号整数像素；</li><li>F：32位浮点像素。</li></ul><p>示例：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pytesseract</span><br><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image</span><br><span class="line"></span><br><span class="line">image = Image.open(<span class="string">'code.png'</span>)</span><br><span class="line">image = image.convert(<span class="string">'L'</span>)</span><br><span class="line">image.show()</span><br><span class="line">result = pytesseract.image_to_string(image)</span><br><span class="line">print(result)</span><br></pre></td></tr></table></figure><p>Image 对象的 <code>convert()</code> 方法参数传入 L，即可将图片转化为灰度图像，转换前后对比：</p><fancybox><br><img src="https://cdn.jsdelivr.net/gh/TRHX/ImageHosting/ITRHX-PIC/A42/02.png" alt="02"><br></fancybox><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pytesseract</span><br><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image</span><br><span class="line"></span><br><span class="line">image = Image.open(<span class="string">'code.png'</span>)</span><br><span class="line">image = image.convert(<span class="string">'1'</span>)</span><br><span class="line">image.show()</span><br><span class="line">result = pytesseract.image_to_string(image)</span><br><span class="line">print(result)</span><br></pre></td></tr></table></figure><p>Image 对象的 <code>convert()</code> 方法参数传入 1，即可将图片进行二值化处理，处理前后对比：</p><fancybox><br><img src="https://cdn.jsdelivr.net/gh/TRHX/ImageHosting/ITRHX-PIC/A42/03.png" alt="03"><br></fancybox><h1 id="【12-5】tesserocr-与-pytesserocr-相关资料"><a href="#【12-5】tesserocr-与-pytesserocr-相关资料" class="headerlink" title="【12.5】tesserocr 与 pytesserocr 相关资料"></a><font color="#ff0000">【12.5】tesserocr 与 pytesserocr 相关资料</font></h1><ul><li><p>tesserocr GitHub：<a href="https://github.com/sirfz/tesserocr" target="_blank" rel="noopener">https://github.com/sirfz/tesserocr</a></p></li><li><p>tesserocr PyPI：<a href="https://pypi.python.org/pypi/tesserocr" target="_blank" rel="noopener">https://pypi.python.org/pypi/tesserocr</a></p></li><li><p>pytesserocr GitHub：<a href="https://github.com/madmaze/pytesseract" target="_blank" rel="noopener">https://github.com/madmaze/pytesseract</a></p></li><li><p>pytesserocr PyPI：<a href="https://pypi.org/project/pytesseract/" target="_blank" rel="noopener">https://pypi.org/project/pytesseract/</a></p></li><li><p>Tesseract-OCR 下载地址：<a href="http://digi.bib.uni-mannheim.de/tesseract" target="_blank" rel="noopener">http://digi.bib.uni-mannheim.de/tesseract</a></p></li><li><p>tesseract GitHub：<a href="https://github.com/tesseract-ocr/tesseract" target="_blank" rel="noopener">https://github.com/tesseract-ocr/tesseract</a></p></li><li><p>tesseract 语言包：<a href="https://github.com/tesseract-ocr/tessdata" target="_blank" rel="noopener">https://github.com/tesseract-ocr/tessdata</a></p></li><li><p>tesseract 文档：<a href="https://github.com/tesseract-ocr/tesseract/wiki/Documentation" target="_blank" rel="noopener">https://github.com/tesseract-ocr/tesseract/wiki/Documentation</a></p></li></ul>]]></content>
      
      
      <categories>
          
          <category> Python3 学习笔记 </category>
          
          <category> 爬虫学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 爬虫 </tag>
            
            <tag> 图形验证码 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python3 爬虫学习笔记 C11</title>
      <link href="/2019/09/04/A41-Python3-spider-C11/"/>
      <url>/2019/09/04/A41-Python3-spider-C11/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><blockquote><center><font color="#1BC3FB" size="4">Python3 爬虫学习笔记第十一章 —— 【MongoDB数据储存】</font></center></blockquote><a id="more"></a><h1 id="【11-1】关于-MongoDB"><a href="#【11-1】关于-MongoDB" class="headerlink" title="【11.1】关于 MongoDB"></a><font color="#ff0000">【11.1】关于 MongoDB</font></h1><p>MongoDB 属于非关系型数据库，即 NoSQL（Not Only SQL），NoSQL 是基于键值对的，不需要经过 SQL 层的解析，数据之间没有耦合性，性能极高，非关系型数据库分为以下几种：</p><ul><li>键值存储数据库：Redis、Voldemort、Oracle BDB 等；</li><li>列存储数据库：Cassandra、HBase、Riak 等；</li><li>文档型数据库：CouchDB、MongoDB 等；</li><li>图形数据库：Neo4J、InfoGrid、Infinite Graph 等。</li></ul><h1 id="【11-2】MongoDB-基本操作语句"><a href="#【11-2】MongoDB-基本操作语句" class="headerlink" title="【11.2】MongoDB 基本操作语句"></a><font color="#ff0000">【11.2】MongoDB 基本操作语句</font></h1><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"># 创建数据库（如果数据库不存在就创建数据库, 存在就切换到指定的数据库）</span><br><span class="line"><span class="keyword">use</span> DATABASE_NAME</span><br><span class="line"></span><br><span class="line"># 查看所有数据库</span><br><span class="line"><span class="keyword">show</span> dbs</span><br><span class="line"></span><br><span class="line"># 查看当前所在数据库</span><br><span class="line">db</span><br><span class="line"></span><br><span class="line"># 删除当前数据库</span><br><span class="line">db.dropDatabase()</span><br><span class="line"></span><br><span class="line"># 删除集合</span><br><span class="line">db.COLLECTION_NAME.drop()</span><br><span class="line"></span><br><span class="line"># 创建集合</span><br><span class="line">db.createCollection(<span class="string">"COLLECTION_NAME"</span>)</span><br><span class="line"></span><br><span class="line"># 插入文档</span><br><span class="line">db.COLLECTION_NAME.insert(<span class="keyword">document</span>)</span><br><span class="line">db.COLLECTION_NAME.save(<span class="keyword">document</span>) </span><br><span class="line"></span><br><span class="line"># 更新文档</span><br><span class="line">db.COLLECTION_NAME.update()</span><br><span class="line"></span><br><span class="line"># 删除文档</span><br><span class="line">db.COLLECTION_NAME.remove()</span><br><span class="line"></span><br><span class="line"># 查询文档</span><br><span class="line">db.COLLECTION_NAME.find(<span class="keyword">query</span>, projection)</span><br></pre></td></tr></table></figure><h1 id="【11-3】连接-MongoDB"><a href="#【11-3】连接-MongoDB" class="headerlink" title="【11.3】连接 MongoDB"></a><font color="#ff0000">【11.3】连接 MongoDB</font></h1><p>连接 MongoDB 需要导入 pymongo 库，使用 <code>MongoClient()</code> 方法，向其传入地址参数 host 和 端口参数 port 即可 </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pymongo</span><br><span class="line"></span><br><span class="line">client = pymongo.MongoClient(host=<span class="string">'localhost'</span>, port=<span class="number">27017</span>)</span><br></pre></td></tr></table></figure><p>也可以直接传入 MongoDB 的连接字符串：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pymongo</span><br><span class="line"></span><br><span class="line">client = pymongo.MongoClient(<span class="string">'mongodb://localhost:27017/'</span>)</span><br></pre></td></tr></table></figure><h1 id="【11-4】指定数据库"><a href="#【11-4】指定数据库" class="headerlink" title="【11.4】指定数据库"></a><font color="#ff0000">【11.4】指定数据库</font></h1><p>使用以下语句皆可指定一个名为 spiders 的数据库：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db = client.spiders</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db = client[<span class="string">'spiders'</span>]</span><br></pre></td></tr></table></figure><h1 id="【11-5】指定集合"><a href="#【11-5】指定集合" class="headerlink" title="【11.5】指定集合"></a><font color="#ff0000">【11.5】指定集合</font></h1><p>MongoDB 的每个数据库包含多个集合（collection），类似于关系型数据库 MySQL 中的数据表，使用以下语句皆可指定一个名为 students 的集合：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">collection = db.students</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">collection = db[<span class="string">'students'</span>]</span><br></pre></td></tr></table></figure><h1 id="【11-6】插入数据"><a href="#【11-6】插入数据" class="headerlink" title="【11.6】插入数据"></a><font color="#ff0000">【11.6】插入数据</font></h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pymongo</span><br><span class="line"></span><br><span class="line">client = pymongo.MongoClient(host=<span class="string">'localhost'</span>, port=<span class="number">27017</span>)</span><br><span class="line">db = client.spiders</span><br><span class="line">collection = db.students</span><br><span class="line">students = &#123;</span><br><span class="line">    <span class="string">'id'</span>: <span class="string">'17110105'</span>,</span><br><span class="line">    <span class="string">'name'</span>: <span class="string">'TRHX'</span>,</span><br><span class="line">    <span class="string">'age'</span>: <span class="number">20</span>,</span><br><span class="line">    <span class="string">'gender'</span>: <span class="string">'male'</span></span><br><span class="line">&#125;</span><br><span class="line">result = collection.insert(students)</span><br><span class="line">print(result)</span><br></pre></td></tr></table></figure><p>在 spiders 数据库的 students 集合里，新建一条学生数据，该数据以字典形式表示，调用 collection 的 <code>insert()</code> 方法插入数据，在 MongoDB 中，每条数据都有一个_id 属性来唯一标识。如果没有显式指明该属性，MongoDB 会自动产生一个 ObjectId 类型的_id 属性。<code>insert()</code> 方法会在执行后返回 _id  值，在 MongoDB 数据库里面可以看到已经成功插入数据，输出结果：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">5</span>d6f1a4b57b65e1547bb3c24</span><br></pre></td></tr></table></figure><fancybox><br><img src="https://cdn.jsdelivr.net/gh/TRHX/ImageHosting/ITRHX-PIC/A41/01.png" alt="01"><br></fancybox><p>进阶操作：同时插入多条数据，以列表形式传递：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pymongo</span><br><span class="line"></span><br><span class="line">client = pymongo.MongoClient(host=<span class="string">'localhost'</span>, port=<span class="number">27017</span>)</span><br><span class="line">db = client.spiders</span><br><span class="line">collection = db.students</span><br><span class="line">students1 = &#123;</span><br><span class="line">    <span class="string">'id'</span>: <span class="string">'17110105'</span>,</span><br><span class="line">    <span class="string">'name'</span>: <span class="string">'TRHX'</span>,</span><br><span class="line">    <span class="string">'age'</span>: <span class="number">20</span>,</span><br><span class="line">    <span class="string">'gender'</span>: <span class="string">'male'</span></span><br><span class="line">&#125;</span><br><span class="line">students2 = &#123;</span><br><span class="line">    <span class="string">'id'</span>: <span class="string">'17110106'</span>,</span><br><span class="line">    <span class="string">'name'</span>: <span class="string">'AAAA'</span>,</span><br><span class="line">    <span class="string">'age'</span>: <span class="number">22</span>,</span><br><span class="line">    <span class="string">'gender'</span>: <span class="string">'male'</span></span><br><span class="line">&#125;</span><br><span class="line">result = collection.insert([students1, students2])</span><br><span class="line">print(result)</span><br></pre></td></tr></table></figure><p>输出结果：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[ObjectId(<span class="string">'5d6f2be3cd1721962218a709'</span>), ObjectId(<span class="string">'5d6f2be3cd1721962218a70a'</span>)]</span><br></pre></td></tr></table></figure><fancybox><br><img src="https://cdn.jsdelivr.net/gh/TRHX/ImageHosting/ITRHX-PIC/A41/02.png" alt="02"><br></fancybox><p>PyMongo 3.x 及以上版本中，推荐使用 <code>insert_one()</code> 和 <code>insert_many()</code> 方法来分别插入单条记录和多条记录，示例：</p><p>插入单条记录</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pymongo</span><br><span class="line"></span><br><span class="line">client = pymongo.MongoClient(host=<span class="string">'localhost'</span>, port=<span class="number">27017</span>)</span><br><span class="line">db = client.spiders</span><br><span class="line">collection = db.students</span><br><span class="line">students = &#123;</span><br><span class="line">    <span class="string">'id'</span>: <span class="string">'17110105'</span>,</span><br><span class="line">    <span class="string">'name'</span>: <span class="string">'TRHX'</span>,</span><br><span class="line">    <span class="string">'age'</span>: <span class="number">20</span>,</span><br><span class="line">    <span class="string">'gender'</span>: <span class="string">'male'</span></span><br><span class="line">&#125;</span><br><span class="line">result = collection.insert_one(students)</span><br><span class="line">print(result)</span><br><span class="line">print(result.inserted_id)</span><br></pre></td></tr></table></figure><p>返回的是 InsertOneResult 对象，调用其 <code>inserted_id</code> 属性获取_id：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;pymongo.results.InsertOneResult object at <span class="number">0x0000020ED91A5608</span>&gt;</span><br><span class="line"><span class="number">5</span>d6f73940fe700c5a7ac19f0</span><br></pre></td></tr></table></figure><p>插入多条记录</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pymongo</span><br><span class="line"></span><br><span class="line">client = pymongo.MongoClient(host=<span class="string">'localhost'</span>, port=<span class="number">27017</span>)</span><br><span class="line">db = client.spiders</span><br><span class="line">collection = db.students</span><br><span class="line">students1 = &#123;</span><br><span class="line">    <span class="string">'id'</span>: <span class="string">'17110105'</span>,</span><br><span class="line">    <span class="string">'name'</span>: <span class="string">'TRHX'</span>,</span><br><span class="line">    <span class="string">'age'</span>: <span class="number">20</span>,</span><br><span class="line">    <span class="string">'gender'</span>: <span class="string">'male'</span></span><br><span class="line">&#125;</span><br><span class="line">students2 = &#123;</span><br><span class="line">    <span class="string">'id'</span>: <span class="string">'17110106'</span>,</span><br><span class="line">    <span class="string">'name'</span>: <span class="string">'AAAA'</span>,</span><br><span class="line">    <span class="string">'age'</span>: <span class="number">22</span>,</span><br><span class="line">    <span class="string">'gender'</span>: <span class="string">'male'</span></span><br><span class="line">&#125;</span><br><span class="line">result = collection.insert_many([students1, students2])</span><br><span class="line">print(result)</span><br><span class="line">print(result.inserted_ids)</span><br></pre></td></tr></table></figure><p>返回的类型是 InsertManyResult，调用 <code>inserted_ids</code> 属性可以获取插入数据的_id 列表：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;pymongo.results.InsertManyResult object at <span class="number">0x0000021698DD36C8</span>&gt;</span><br><span class="line">[ObjectId(<span class="string">'5d6f68598fa881c69b2e0006'</span>), ObjectId(<span class="string">'5d6f68598fa881c69b2e0007'</span>)]</span><br></pre></td></tr></table></figure><h1 id="【11-6】数据查询"><a href="#【11-6】数据查询" class="headerlink" title="【11.6】数据查询"></a><font color="#ff0000">【11.6】数据查询</font></h1><p>事先已经创建好 spiders 数据库和 students 集合，包含以下数据：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">_id:ObjectId("5d6f95d40828142f1dc35fa5")</span><br><span class="line">id:"17110105"</span><br><span class="line">name:"TRHX"</span><br><span class="line">age:20</span><br><span class="line">gender:"male"</span><br><span class="line"></span><br><span class="line">_id:ObjectId("5d6f95d40828142f1dc35fa6")</span><br><span class="line">id:"17110106"</span><br><span class="line">name:"AAA"</span><br><span class="line">age:20</span><br><span class="line">gender:"male"</span><br><span class="line"></span><br><span class="line">_id:ObjectId("5d6f95d40828142f1dc35fa7")</span><br><span class="line">id:"17110107"</span><br><span class="line">name:"BBB"</span><br><span class="line">age:19</span><br><span class="line">gender:"female"</span><br><span class="line"></span><br><span class="line">_id:ObjectId("5d6f95d40828142f1dc35fa8")</span><br><span class="line">id:"17110108"</span><br><span class="line">name:"CCC"</span><br><span class="line">age:22</span><br><span class="line">gender:"male"</span><br></pre></td></tr></table></figure><p>查询方法一：利用 <code>find_one()</code> 或 <code>find()</code> 方法进行查询， <code>find_one()</code> 查询得到的是单个结果，<code>find()</code> 则返回一个生成器对象</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pymongo</span><br><span class="line"></span><br><span class="line">client = pymongo.MongoClient(host=<span class="string">'localhost'</span>, port=<span class="number">27017</span>)</span><br><span class="line">db = client.spiders</span><br><span class="line">collection = db.students</span><br><span class="line">result = collection.find_one(&#123;<span class="string">'name'</span>: <span class="string">'TRHX'</span>&#125;)</span><br><span class="line">print(result)</span><br></pre></td></tr></table></figure><p>查询 name 为 TRHX 的数据，返回一个字典类型：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;<span class="string">'_id'</span>: ObjectId(<span class="string">'5d6f95d40828142f1dc35fa5'</span>), <span class="string">'id'</span>: <span class="string">'17110105'</span>, <span class="string">'name'</span>: <span class="string">'TRHX'</span>, <span class="string">'age'</span>: <span class="number">20</span>, <span class="string">'gender'</span>: <span class="string">'male'</span>&#125;</span><br></pre></td></tr></table></figure><p>查询方法二：根据 ObjectId 查询，查询时需要使用 bson 库里面的 objectid：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pymongo</span><br><span class="line"><span class="keyword">from</span> bson.objectid <span class="keyword">import</span> ObjectId</span><br><span class="line"></span><br><span class="line">client = pymongo.MongoClient(host=<span class="string">'localhost'</span>, port=<span class="number">27017</span>)</span><br><span class="line">db = client.spiders</span><br><span class="line">collection = db.students</span><br><span class="line">result = collection.find_one(&#123;<span class="string">'_id'</span>: ObjectId(<span class="string">'5d6f95d40828142f1dc35fa7'</span>)&#125;)</span><br><span class="line">print(result)</span><br></pre></td></tr></table></figure><p>查询结果：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;<span class="string">'_id'</span>: ObjectId(<span class="string">'5d6f95d40828142f1dc35fa7'</span>), <span class="string">'id'</span>: <span class="string">'17110107'</span>, <span class="string">'name'</span>: <span class="string">'BBB'</span>, <span class="string">'age'</span>: <span class="number">19</span>, <span class="string">'gender'</span>: <span class="string">'female'</span>&#125;</span><br></pre></td></tr></table></figure><p>使用 <code>find()</code> 方法查询多条数据：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pymongo</span><br><span class="line"></span><br><span class="line">client = pymongo.MongoClient(host=<span class="string">'localhost'</span>, port=<span class="number">27017</span>)</span><br><span class="line">db = client.spiders</span><br><span class="line">collection = db.students</span><br><span class="line">results = collection.find(&#123;<span class="string">'gender'</span>: <span class="string">'male'</span>&#125;)</span><br><span class="line">print(results)</span><br><span class="line"><span class="keyword">for</span> result <span class="keyword">in</span> results:</span><br><span class="line">    print(result)</span><br></pre></td></tr></table></figure><p><code>find()</code> 方法返回一个生成器对象，遍历得到所有数据，每条数据都是字典类型：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;pymongo.cursor.Cursor object at <span class="number">0x00000191F69AAA90</span>&gt;</span><br><span class="line">&#123;<span class="string">'_id'</span>: ObjectId(<span class="string">'5d6f95d40828142f1dc35fa5'</span>), <span class="string">'id'</span>: <span class="string">'17110105'</span>, <span class="string">'name'</span>: <span class="string">'TRHX'</span>, <span class="string">'age'</span>: <span class="number">20</span>, <span class="string">'gender'</span>: <span class="string">'male'</span>&#125;</span><br><span class="line">&#123;<span class="string">'_id'</span>: ObjectId(<span class="string">'5d6f95d40828142f1dc35fa6'</span>), <span class="string">'id'</span>: <span class="string">'17110106'</span>, <span class="string">'name'</span>: <span class="string">'AAA'</span>, <span class="string">'age'</span>: <span class="number">20</span>, <span class="string">'gender'</span>: <span class="string">'male'</span>&#125;</span><br><span class="line">&#123;<span class="string">'_id'</span>: ObjectId(<span class="string">'5d6f95d40828142f1dc35fa8'</span>), <span class="string">'id'</span>: <span class="string">'17110108'</span>, <span class="string">'name'</span>: <span class="string">'CCC'</span>, <span class="string">'age'</span>: <span class="number">22</span>, <span class="string">'gender'</span>: <span class="string">'male'</span>&#125;</span><br></pre></td></tr></table></figure><p>在查询条件中加入比较符号进行查询，以下代码实现了年龄大于等于20的数据查询：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pymongo</span><br><span class="line"></span><br><span class="line">client = pymongo.MongoClient(host=<span class="string">'localhost'</span>, port=<span class="number">27017</span>)</span><br><span class="line">db = client.spiders</span><br><span class="line">collection = db.students</span><br><span class="line">results = collection.find(&#123;<span class="string">'age'</span>: &#123;<span class="string">'$gte'</span>: <span class="number">20</span>&#125;&#125;)</span><br><span class="line"><span class="keyword">for</span> result <span class="keyword">in</span> results:</span><br><span class="line">    print(result)</span><br></pre></td></tr></table></figure><p>符号 <code>$gte</code> 表示大于等于，查询结果如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;<span class="string">'_id'</span>: ObjectId(<span class="string">'5d6f95d40828142f1dc35fa5'</span>), <span class="string">'id'</span>: <span class="string">'17110105'</span>, <span class="string">'name'</span>: <span class="string">'TRHX'</span>, <span class="string">'age'</span>: <span class="number">20</span>, <span class="string">'gender'</span>: <span class="string">'male'</span>&#125;</span><br><span class="line">&#123;<span class="string">'_id'</span>: ObjectId(<span class="string">'5d6f95d40828142f1dc35fa6'</span>), <span class="string">'id'</span>: <span class="string">'17110106'</span>, <span class="string">'name'</span>: <span class="string">'AAA'</span>, <span class="string">'age'</span>: <span class="number">20</span>, <span class="string">'gender'</span>: <span class="string">'male'</span>&#125;</span><br><span class="line">&#123;<span class="string">'_id'</span>: ObjectId(<span class="string">'5d6f95d40828142f1dc35fa8'</span>), <span class="string">'id'</span>: <span class="string">'17110108'</span>, <span class="string">'name'</span>: <span class="string">'CCC'</span>, <span class="string">'age'</span>: <span class="number">22</span>, <span class="string">'gender'</span>: <span class="string">'male'</span>&#125;</span><br></pre></td></tr></table></figure><center>附表：各种比较符号</center><table><thead><tr><th>符号</th><th>含义</th><th>示例</th></tr></thead><tbody><tr><td>$lt</td><td>小于</td><td>{‘age’: {‘$lt’: 20}}</td></tr><tr><td>$gt</td><td>大于</td><td>{‘age’: {‘$gt’: 20}}</td></tr><tr><td>$lte</td><td>小于等于</td><td>{‘age’: {‘$lte’: 20}}</td></tr><tr><td>$gte</td><td>大于等于</td><td>{‘age’: {‘$gte’: 20}}</td></tr><tr><td>$ne</td><td>不等于</td><td>{‘age’: {‘$ne’: 20}}</td></tr><tr><td>$in</td><td>在范围内</td><td>{‘age’: {‘$in’: [20, 23]}}</td></tr><tr><td>$nin</td><td>不在范围内</td><td>{‘age’: {‘$nin’: [20, 23]}}</td></tr></tbody></table><p>在查询条件中加入功能符号进行查询，以下代码用正则匹配实现了对名字以 T 开头的学生数据的查询：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pymongo</span><br><span class="line"></span><br><span class="line">client = pymongo.MongoClient(host=<span class="string">'localhost'</span>, port=<span class="number">27017</span>)</span><br><span class="line">db = client.spiders</span><br><span class="line">collection = db.students</span><br><span class="line">results = collection.find(&#123;<span class="string">'name'</span>: &#123;<span class="string">'$regex'</span>: <span class="string">'^T.*'</span>&#125;&#125;)</span><br><span class="line"><span class="keyword">for</span> result <span class="keyword">in</span> results:</span><br><span class="line">    print(result)</span><br></pre></td></tr></table></figure><p>查询结果：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;<span class="string">'_id'</span>: ObjectId(<span class="string">'5d6f95d40828142f1dc35fa5'</span>), <span class="string">'id'</span>: <span class="string">'17110105'</span>, <span class="string">'name'</span>: <span class="string">'TRHX'</span>, <span class="string">'age'</span>: <span class="number">20</span>, <span class="string">'gender'</span>: <span class="string">'male'</span>&#125;</span><br></pre></td></tr></table></figure><center>附表：各种功能符号</center><table><thead><tr><th>符号</th><th>含义</th><th>示例</th><th>示例含义</th></tr></thead><tbody><tr><td>$regex</td><td>匹配正则表达式</td><td>{‘name’: {‘$regex’: ‘^T.*’}}</td><td>name 以 T 开头</td></tr><tr><td>$exists</td><td>属性是否存在</td><td>{‘name’: {‘$exists’: True}}</td><td>name 属性存在</td></tr><tr><td>$type</td><td>类型判断</td><td>{‘age’: {‘$type’: ‘int’}}</td><td>age 的类型为 int</td></tr><tr><td>$mod</td><td>数字模操作</td><td>{‘age’: {‘$mod’: [5, 0]}}</td><td>年龄模 5 余 0</td></tr><tr><td>$text</td><td>文本查询</td><td>{‘$text’: {‘$search’: ‘Mike’}}</td><td>text 类型的属性中包含 Mike 字符串</td></tr><tr><td>$where</td><td>高级条件查询</td><td>{‘$where’: ‘obj.fans_count == obj.follows_count’}</td><td>自身粉丝数等于关注数</td></tr></tbody></table><p>其他操作：<a href="https://docs.mongodb.com/manual/reference/operator/query/" target="_blank" rel="noopener">https://docs.mongodb.com/manual/reference/operator/query/</a></p><h1 id="【11-7】数据计数"><a href="#【11-7】数据计数" class="headerlink" title="【11.7】数据计数"></a><font color="#ff0000">【11.7】数据计数</font></h1><p>调用 <code>count()</code> 方法可以统计查询结果有多少条数据，输出结果为一个整数：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pymongo</span><br><span class="line"></span><br><span class="line">client = pymongo.MongoClient(host=<span class="string">'localhost'</span>, port=<span class="number">27017</span>)</span><br><span class="line">db = client.spiders</span><br><span class="line">collection = db.students</span><br><span class="line">result = collection.find(&#123;<span class="string">'name'</span>: &#123;<span class="string">'$regex'</span>: <span class="string">'^T.*'</span>&#125;&#125;).count()</span><br><span class="line">print(result)</span><br></pre></td></tr></table></figure><h1 id="【11-8】数据排序"><a href="#【11-8】数据排序" class="headerlink" title="【11.8】数据排序"></a><font color="#ff0000">【11.8】数据排序</font></h1><p>调用 <code>sort()</code> 方法，向其传入排序的字段及升降序标志即可完成排序：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pymongo</span><br><span class="line"></span><br><span class="line">client = pymongo.MongoClient(host=<span class="string">'localhost'</span>, port=<span class="number">27017</span>)</span><br><span class="line">db = client.spiders</span><br><span class="line">collection = db.students</span><br><span class="line">ascending = collection.find().sort(<span class="string">'name'</span>, pymongo.ASCENDING)</span><br><span class="line">descending = collection.find().sort(<span class="string">'name'</span>, pymongo.DESCENDING)</span><br><span class="line">print(<span class="string">'升序排列：'</span>, [result[<span class="string">'name'</span>] <span class="keyword">for</span> result <span class="keyword">in</span> ascending])</span><br><span class="line">print(<span class="string">'降序排列：'</span>, [result[<span class="string">'name'</span>] <span class="keyword">for</span> result <span class="keyword">in</span> descending])</span><br></pre></td></tr></table></figure><p>输出结果：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">升序排列： [<span class="string">'AAA'</span>, <span class="string">'BBB'</span>, <span class="string">'CCC'</span>, <span class="string">'TRHX'</span>]</span><br><span class="line">降序排列： [<span class="string">'TRHX'</span>, <span class="string">'CCC'</span>, <span class="string">'BBB'</span>, <span class="string">'AAA'</span>]</span><br></pre></td></tr></table></figure><h1 id="【11-9】数据偏移"><a href="#【11-9】数据偏移" class="headerlink" title="【11.9】数据偏移"></a><font color="#ff0000">【11.9】数据偏移</font></h1><p>利用 <code>skip()</code> 方法偏移几个位置，就可以跳过前几条数据，获取偏移量之后的几个数据；利用 <code>limit()</code> 方法指定获取前几条数据：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pymongo</span><br><span class="line"></span><br><span class="line">client = pymongo.MongoClient(host=<span class="string">'localhost'</span>, port=<span class="number">27017</span>)</span><br><span class="line">db = client.spiders</span><br><span class="line">collection = db.students</span><br><span class="line">ascending = collection.find().sort(<span class="string">'name'</span>, pymongo.ASCENDING).skip(<span class="number">1</span>)</span><br><span class="line">descending = collection.find().sort(<span class="string">'name'</span>, pymongo.DESCENDING).limit(<span class="number">2</span>)</span><br><span class="line">print(<span class="string">'升序排列（偏移量为1，获取后三条数据）：'</span>, [result[<span class="string">'name'</span>] <span class="keyword">for</span> result <span class="keyword">in</span> ascending])</span><br><span class="line">print(<span class="string">'降序排列（限制获取前两条数据）：'</span>, [result[<span class="string">'name'</span>] <span class="keyword">for</span> result <span class="keyword">in</span> descending])</span><br></pre></td></tr></table></figure><p>输出结果：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">升序排列（偏移量为<span class="number">1</span>，获取后三条数据）： [<span class="string">'BBB'</span>, <span class="string">'CCC'</span>, <span class="string">'TRHX'</span>]</span><br><span class="line">降序排列（限制获取前两条数据）： [<span class="string">'TRHX'</span>, <span class="string">'CCC'</span>]</span><br></pre></td></tr></table></figure><h1 id="【11-10】更新数据"><a href="#【11-10】更新数据" class="headerlink" title="【11.10】更新数据"></a><font color="#ff0000">【11.10】更新数据</font></h1><p>使用 <code>update()</code> 方法，指定更新的条件和更新后的数据即可：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pymongo</span><br><span class="line"></span><br><span class="line">client = pymongo.MongoClient(host=<span class="string">'localhost'</span>, port=<span class="number">27017</span>)</span><br><span class="line">db = client.spiders</span><br><span class="line">collection = db.students</span><br><span class="line">condition = &#123;<span class="string">'name'</span>: <span class="string">'TRHX'</span>&#125;</span><br><span class="line">student = collection.find_one(condition)</span><br><span class="line">student[<span class="string">'age'</span>] = <span class="number">18</span></span><br><span class="line">result = collection.update(condition, student)</span><br><span class="line">print(result)</span><br></pre></td></tr></table></figure><p>该代码将 name 为 TRHX 的 age 改为了 18，返回结果仍然是字典形式，ok 代表执行成功，nModified 代表影响的数据条数：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;<span class="string">'n'</span>: <span class="number">1</span>, <span class="string">'nModified'</span>: <span class="number">1</span>, <span class="string">'ok'</span>: <span class="number">1.0</span>, <span class="string">'updatedExisting'</span>: <span class="keyword">True</span>&#125;</span><br></pre></td></tr></table></figure><p>进阶操作：使用 <code>$set</code> 操作符对数据进行更新，指定更新的条件和更新后的数据即可，这样做的好处是：只更新指定的 student 字典内存在的字段，如果原先还有其他字段，则不会更新，也不会删除；如果不用 <code>$set</code> ，则会把之前的数据全部用 student 字典替换，如果原本存在其他字段，则会被删除</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pymongo</span><br><span class="line"></span><br><span class="line">client = pymongo.MongoClient(host=<span class="string">'localhost'</span>, port=<span class="number">27017</span>)</span><br><span class="line">db = client.spiders</span><br><span class="line">collection = db.students</span><br><span class="line">condition = &#123;<span class="string">'name'</span>: <span class="string">'TRHX'</span>&#125;</span><br><span class="line">student = collection.find_one(condition)</span><br><span class="line">student[<span class="string">'age'</span>] = <span class="number">18</span></span><br><span class="line">result = collection.update(condition, &#123;<span class="string">'$set'</span>: student&#125;)</span><br><span class="line">print(result)</span><br></pre></td></tr></table></figure><p>和插入数据的 <code>insert()</code> 方法一样，在 PyMongo 3.x 版本里，推荐使用 <code>update_one()</code> 和 <code>update_many()</code> 方法</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pymongo</span><br><span class="line"></span><br><span class="line">client = pymongo.MongoClient(host=<span class="string">'localhost'</span>, port=<span class="number">27017</span>)</span><br><span class="line">db = client.spiders</span><br><span class="line">collection = db.students</span><br><span class="line">condition = &#123;<span class="string">'name'</span>: <span class="string">'TRHX'</span>&#125;</span><br><span class="line">student = collection.find_one(condition)</span><br><span class="line">student[<span class="string">'age'</span>] = <span class="number">19</span></span><br><span class="line">result = collection.update_one(condition, &#123;<span class="string">'$set'</span>: student&#125;)</span><br><span class="line">print(result)</span><br><span class="line">print(result.matched_count, result.modified_count)</span><br></pre></td></tr></table></figure><p>注意：<code>update_one()</code> 方法不能直接传入修改后的字典，只能使用 <code>{&#39;$set&#39;: student}</code> 的形式传入，可以调用 <code>matched_count</code> 和 <code>modified_count</code> 属性，获取匹配的数据条数和影响的数据条数：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;pymongo.results.UpdateResult object at <span class="number">0x00000235A1684508</span>&gt;</span><br><span class="line"><span class="number">1</span> <span class="number">1</span></span><br></pre></td></tr></table></figure><p>使用<code>update_many()</code> 方法可以将所有符合条件的数据都更新：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pymongo</span><br><span class="line"></span><br><span class="line">client = pymongo.MongoClient(host=<span class="string">'localhost'</span>, port=<span class="number">27017</span>)</span><br><span class="line">db = client.spiders</span><br><span class="line">collection = db.students</span><br><span class="line">condition = &#123;<span class="string">'age'</span>: &#123;<span class="string">'$gt'</span>: <span class="number">18</span>&#125;&#125;</span><br><span class="line">result = collection.update_many(condition, &#123;<span class="string">'$set'</span>: &#123;<span class="string">'age'</span>: <span class="number">25</span>&#125;&#125;)</span><br><span class="line">print(result)</span><br><span class="line">print(result.matched_count, result.modified_count)</span><br></pre></td></tr></table></figure><p>匹配所有年龄大于 18 的数据，更新条件为将这些所有满足条件的年龄都设置成 25，输出结果如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;pymongo.results.UpdateResult object at <span class="number">0x00000285CECC45C8</span>&gt;</span><br><span class="line"><span class="number">4</span> <span class="number">4</span></span><br></pre></td></tr></table></figure><h1 id="【11-11】删除数据"><a href="#【11-11】删除数据" class="headerlink" title="【11.11】删除数据"></a><font color="#ff0000">【11.11】删除数据</font></h1><p>调用 <code>remove()</code> 方法并指定删除的条件，此时符合条件的所有数据均会被删除</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pymongo</span><br><span class="line"></span><br><span class="line">client = pymongo.MongoClient(host=<span class="string">'localhost'</span>, port=<span class="number">27017</span>)</span><br><span class="line">db = client.spiders</span><br><span class="line">collection = db.students</span><br><span class="line">result = collection.remove(&#123;<span class="string">'name'</span>: <span class="string">'CCC'</span>&#125;)</span><br><span class="line">print(result)</span><br></pre></td></tr></table></figure><p>输出结果：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;<span class="string">'n'</span>: <span class="number">1</span>, <span class="string">'ok'</span>: <span class="number">1.0</span>&#125;</span><br></pre></td></tr></table></figure><p>同样的，在 PyMongo 3.x 版本里，推荐使用 <code>delete_one()</code> 和 <code>delete_many()</code> 方法</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pymongo</span><br><span class="line"></span><br><span class="line">client = pymongo.MongoClient(host=<span class="string">'localhost'</span>, port=<span class="number">27017</span>)</span><br><span class="line">db = client.spiders</span><br><span class="line">collection = db.students</span><br><span class="line">result = collection.delete_one(&#123;<span class="string">'name'</span>: <span class="string">'AAA'</span>&#125;)</span><br><span class="line">print(result)</span><br><span class="line">print(result.deleted_count)</span><br><span class="line">result = collection.delete_many(&#123;<span class="string">'gender'</span>: <span class="string">'female'</span>&#125;)</span><br><span class="line">print(result.deleted_count)</span><br></pre></td></tr></table></figure><p>调用 <code>deleted_count</code> 属性可以获取删除的数据条数，输出结果：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;pymongo.results.DeleteResult object at <span class="number">0x0000024441B245C8</span>&gt;</span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="number">1</span></span><br></pre></td></tr></table></figure><p>PyMongo 官方文档：<a href="http://api.mongodb.com/python/current/api/pymongo/collection.html" target="_blank" rel="noopener">http://api.mongodb.com/python/current/api/pymongo/collection.html</a></p>]]></content>
      
      
      <categories>
          
          <category> Python3 学习笔记 </category>
          
          <category> 爬虫学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 爬虫 </tag>
            
            <tag> MongoDB </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python3 爬虫学习笔记 C10</title>
      <link href="/2019/09/03/A40-Python3-spider-C10/"/>
      <url>/2019/09/03/A40-Python3-spider-C10/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><blockquote><center><font color="#1BC3FB" size="4">Python3 爬虫学习笔记第十章 —— 【MySQL数据储存】</font></center></blockquote><a id="more"></a><h1 id="【10-1】MySQL-基本操作语句"><a href="#【10-1】MySQL-基本操作语句" class="headerlink" title="【10.1】MySQL 基本操作语句"></a><font color="#ff0000">【10.1】MySQL 基本操作语句</font></h1><p>安装完 MySQL 后，打开 MySQL x.x Command Line Client - Unicode，输入密码即可登录 MySQL，也可在 MySQL 安装目录下打开 cmd 使用命令登录数据库</p><h2 id="数据库操作"><a href="#数据库操作" class="headerlink" title="数据库操作"></a>数据库操作</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"># 连接数据库</span><br><span class="line">mysql -u root -p</span><br><span class="line"></span><br><span class="line"># 退出数据库</span><br><span class="line">exit</span><br><span class="line"></span><br><span class="line"># 查看所有的数据库</span><br><span class="line"><span class="keyword">SHOW</span> <span class="keyword">DATABASES</span>;</span><br><span class="line"></span><br><span class="line"># 创建一个数据库</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">DATABASE</span> X;</span><br><span class="line"></span><br><span class="line"># 删除一个数据库</span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">DATABASE</span> <span class="keyword">IF</span> <span class="keyword">EXISTS</span> X;</span><br><span class="line"></span><br><span class="line"># 使用这个数据库</span><br><span class="line"><span class="keyword">USE</span> X;</span><br></pre></td></tr></table></figure><h2 id="表操作"><a href="#表操作" class="headerlink" title="表操作"></a>表操作</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"># 查看所有的表</span><br><span class="line"><span class="keyword">SHOW</span> <span class="keyword">TABLES</span> ;</span><br><span class="line"></span><br><span class="line"># 创建一个表</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> n(<span class="keyword">id</span> <span class="built_in">INT</span>, <span class="keyword">name</span> <span class="built_in">VARCHAR</span>(<span class="number">10</span>));</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> m(<span class="keyword">id</span> <span class="built_in">INT</span>, <span class="keyword">name</span> <span class="built_in">VARCHAR</span>(<span class="number">10</span>), PRIMARY <span class="keyword">KEY</span> (<span class="keyword">id</span>), FOREIGN <span class="keyword">KEY</span> (<span class="keyword">id</span>) <span class="keyword">REFERENCES</span> n(<span class="keyword">id</span>), <span class="keyword">UNIQUE</span> (<span class="keyword">name</span>));</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> m(<span class="keyword">id</span> <span class="built_in">INT</span>, <span class="keyword">name</span> <span class="built_in">VARCHAR</span>(<span class="number">10</span>));</span><br><span class="line"></span><br><span class="line"># 直接将查询结果导入或复制到新创建的表</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> n <span class="keyword">SELECT</span> * <span class="keyword">FROM</span> m;</span><br><span class="line"></span><br><span class="line"># 新创建的表与一个存在的表的数据结构类似</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> m <span class="keyword">LIKE</span> n;</span><br><span class="line"></span><br><span class="line"># 创建一个临时表</span><br><span class="line"># 临时表将在你连接MySQL期间存在。当断开连接时，MySQL将自动删除表并释放所用的空间。也可手动删除。</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TEMPORARY</span> <span class="keyword">TABLE</span> l(<span class="keyword">id</span> <span class="built_in">INT</span>, <span class="keyword">name</span> <span class="built_in">VARCHAR</span>(<span class="number">10</span>));</span><br><span class="line"></span><br><span class="line"># 直接将查询结果导入或复制到新创建的临时表</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TEMPORARY</span> <span class="keyword">TABLE</span> tt <span class="keyword">SELECT</span> * <span class="keyword">FROM</span> n;</span><br><span class="line"></span><br><span class="line"># 删除一个存在表</span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> <span class="keyword">IF</span> <span class="keyword">EXISTS</span> m;</span><br><span class="line"></span><br><span class="line"># 更改存在表的名称</span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> n <span class="keyword">RENAME</span> m;</span><br><span class="line"><span class="keyword">RENAME</span> <span class="keyword">TABLE</span> n <span class="keyword">TO</span> m;</span><br><span class="line"></span><br><span class="line"># 查看表的结构(以下五条语句效果相同）</span><br><span class="line">DESC n;</span><br><span class="line"><span class="keyword">DESCRIBE</span> n;</span><br><span class="line"><span class="keyword">SHOW</span> <span class="keyword">COLUMNS</span> <span class="keyword">IN</span> n;</span><br><span class="line"><span class="keyword">SHOW</span> <span class="keyword">COLUMNS</span> <span class="keyword">FROM</span> n;</span><br><span class="line"><span class="keyword">EXPLAIN</span> n;</span><br><span class="line"></span><br><span class="line"># 查看表的创建语句</span><br><span class="line"><span class="keyword">SHOW</span> <span class="keyword">CREATE</span> <span class="keyword">TABLE</span> n;</span><br></pre></td></tr></table></figure><h2 id="表的结构"><a href="#表的结构" class="headerlink" title="表的结构"></a>表的结构</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"># 添加字段</span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> n <span class="keyword">ADD</span> age <span class="built_in">VARCHAR</span>(<span class="number">2</span>);</span><br><span class="line"></span><br><span class="line"># 添加字段时设定位置</span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> n <span class="keyword">ADD</span> age <span class="built_in">VARCHAR</span>(<span class="number">2</span>)  <span class="keyword">FIRST</span>;</span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> n <span class="keyword">ADD</span> age <span class="built_in">VARCHAR</span>(<span class="number">2</span>)  <span class="keyword">AFTER</span> <span class="keyword">name</span>;</span><br><span class="line"></span><br><span class="line"># 修改字段在表中的位置</span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> n <span class="keyword">MODIFY</span> age <span class="built_in">VARCHAR</span>(<span class="number">2</span>) <span class="keyword">AFTER</span> <span class="keyword">name</span>;</span><br><span class="line"></span><br><span class="line"># 删除字段</span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> n <span class="keyword">DROP</span> age;</span><br><span class="line"></span><br><span class="line"># 更改字段属性和属性</span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> n <span class="keyword">CHANGE</span> age a <span class="built_in">INT</span>;</span><br><span class="line"></span><br><span class="line"># 只更改字段属性</span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> n <span class="keyword">MODIFY</span> age <span class="built_in">VARCHAR</span>(<span class="number">7</span>) ;</span><br><span class="line"></span><br><span class="line"># 改变表的存储引擎</span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> t <span class="keyword">ENGINE</span> myisam;</span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> t <span class="keyword">ENGINE</span> <span class="keyword">innodb</span>;</span><br><span class="line"></span><br><span class="line"># 设定自增 初始为1，只能一个字段使用，该字段为主键的一部分</span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> t AUTO_INCREMENT = <span class="number">0</span>;</span><br></pre></td></tr></table></figure><h2 id="表的数据"><a href="#表的数据" class="headerlink" title="表的数据"></a>表的数据</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"># 增加数据</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> n <span class="keyword">VALUES</span> (<span class="number">1</span>, <span class="string">'tom'</span>, <span class="string">'23'</span>), (<span class="number">2</span>, <span class="string">'john'</span>, <span class="string">'22'</span>);</span><br><span class="line">INSERT INTO n SELECT * FROM n;  # 把数据复制一遍重新插入</span><br><span class="line"></span><br><span class="line"># 删除数据</span><br><span class="line"><span class="keyword">DELETE</span> <span class="keyword">FROM</span> n <span class="keyword">WHERE</span> <span class="keyword">id</span> = <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line"># 更改数据</span><br><span class="line"><span class="keyword">UPDATE</span> n <span class="keyword">SET</span> <span class="keyword">name</span> = <span class="string">'tom'</span> <span class="keyword">WHERE</span> <span class="keyword">id</span> = <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line"># 数据查找</span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> n <span class="keyword">WHERE</span> <span class="keyword">name</span> <span class="keyword">LIKE</span> <span class="string">'%h%'</span>;</span><br><span class="line"></span><br><span class="line"># 数据排序(反序)</span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> n <span class="keyword">ORDER</span> <span class="keyword">BY</span> <span class="keyword">name</span>, <span class="keyword">id</span> <span class="keyword">DESC</span> ;</span><br></pre></td></tr></table></figure><h1 id="【10-2】Python-连接-MySQL"><a href="#【10-2】Python-连接-MySQL" class="headerlink" title="【10.2】Python 连接 MySQL"></a><font color="#ff0000">【10.2】Python 连接 MySQL</font></h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pymysql</span><br><span class="line"></span><br><span class="line">db = pymysql.connect(host=<span class="string">'localhost'</span>, user=<span class="string">'root'</span>, password=<span class="string">'000000'</span>, port=<span class="number">3306</span>)</span><br><span class="line">cursor = db.cursor()</span><br><span class="line">cursor.execute(<span class="string">'SELECT VERSION()'</span>)</span><br><span class="line">data = cursor.fetchone()</span><br><span class="line">print(<span class="string">'Database version:'</span>, data)</span><br><span class="line">cursor.execute(<span class="string">"CREATE DATABASE spiders DEFAULT CHARACTER SET utf8mb4"</span>)</span><br><span class="line">db.close()</span><br></pre></td></tr></table></figure><p>通过 PyMySQL 的 connect 方法声明一个 MySQL 连接对象 db，当前 MySQL 数据库运行在本地，设定 <code>host=&#39;localhost&#39;</code>，用户名为 <code>root</code>，登录密码为 <code>000000</code>，运行在 <code>3306</code> 端口，调用 <code>cursor()</code> 方法获得 MySQL 的操作游标，该游标用来执行 SQL 语句，通过游标操作 <code>execute()</code> 方法写入 SQL 语句，第一条 SQL 语句获取 MySQL 的版本信息，调用 <code>fetchone()</code> 方法获得第一条数据，即 MySQL 的版本号。第二条 SQL 语句执行创建 spiders 数据库的操作，编码为 utf8mb4，运行该段代码将输出 MySQL 的版本号：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Database version: (<span class="string">'8.0.17'</span>,)</span><br></pre></td></tr></table></figure><h1 id="【10-3】创建表"><a href="#【10-3】创建表" class="headerlink" title="【10.3】创建表"></a><font color="#ff0000">【10.3】创建表</font></h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pymysql</span><br><span class="line"></span><br><span class="line">db = pymysql.connect(host=<span class="string">'localhost'</span>, user=<span class="string">'root'</span>, password=<span class="string">'000000'</span>, port=<span class="number">3306</span>, db=<span class="string">'spiders'</span>)</span><br><span class="line">cursor = db.cursor()</span><br><span class="line">sql = <span class="string">'CREATE TABLE IF NOT EXISTS students (id VARCHAR(255) NOT NULL, name VARCHAR(255) NOT NULL, age VARCHAR(255) NOT NULL, PRIMARY KEY (id))'</span></span><br><span class="line">cursor.execute(sql)</span><br><span class="line">db.close()</span><br></pre></td></tr></table></figure><p>该段代码实现了在 spiders 数据库里创建了一个名为 students 的表，包含 id、name、age 三个字段，类型依次为 varchar、varchar、int</p><h1 id="【10-4】插入数据"><a href="#【10-4】插入数据" class="headerlink" title="【10.4】插入数据"></a><font color="#ff0000">【10.4】插入数据</font></h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pymysql</span><br><span class="line"></span><br><span class="line">id = <span class="string">'17110105'</span></span><br><span class="line">user = <span class="string">'TRH'</span></span><br><span class="line">age = <span class="number">20</span></span><br><span class="line">db = pymysql.connect(host=<span class="string">'localhost'</span>, user=<span class="string">'root'</span>, password=<span class="string">'000000'</span>, port=<span class="number">3306</span>, db=<span class="string">'spiders'</span>)</span><br><span class="line">cursor = db.cursor()</span><br><span class="line">sql = <span class="string">'INSERT INTO students(id, name, age) values(%s, %s, %s)'</span></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    cursor.execute(sql, (id, user, age))</span><br><span class="line">    db.commit()</span><br><span class="line"><span class="keyword">except</span>:</span><br><span class="line">    db.rollback()</span><br><span class="line">db.close()</span><br></pre></td></tr></table></figure><p><code>commit()</code> 方法的作用是实现数据插入，是真正将语句提交到数据库执行的方法，使用 <code>try except</code> 语句实现异常处理，如果执行失败，则调用 <code>rollback()</code> 方法执行数据回滚，保证原数据不被破坏，使用查询语句可以看到已经插入的数据：</p><fancybox><br><img src="https://cdn.jsdelivr.net/gh/TRHX/ImageHosting/ITRHX-PIC/A40/01.png" alt="01"><br></fancybox><p>进阶操作：将需要插入的数据构造成一个字典，这样的做法可以让插入方法无需改动，只需要传入一个动态变化的字典就行了，改写原来的代码如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pymysql</span><br><span class="line"></span><br><span class="line">data = &#123;</span><br><span class="line">    <span class="string">'id'</span>: <span class="string">'17110105'</span>,</span><br><span class="line">    <span class="string">'name'</span>: <span class="string">'TRH'</span>,</span><br><span class="line">    <span class="string">'age'</span>: <span class="number">20</span></span><br><span class="line">&#125;</span><br><span class="line">table = <span class="string">'students'</span></span><br><span class="line">keys = <span class="string">', '</span>.join(data.keys())</span><br><span class="line">values = <span class="string">', '</span>.join([<span class="string">'%s'</span>]*len(data))</span><br><span class="line">db = pymysql.connect(host=<span class="string">'localhost'</span>, user=<span class="string">'root'</span>, password=<span class="string">'000000'</span>, port=<span class="number">3306</span>, db=<span class="string">'spiders'</span>)</span><br><span class="line">cursor = db.cursor()</span><br><span class="line">sql = <span class="string">'INSERT INTO &#123;table&#125;(&#123;keys&#125;) VALUES (&#123;values&#125;)'</span>.format(table=table, keys=keys, values=values)</span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    cursor.execute(sql, tuple(data.values()))</span><br><span class="line">    print(<span class="string">'数据插入成功！'</span>)</span><br><span class="line">    db.commit()</span><br><span class="line"><span class="keyword">except</span>:</span><br><span class="line">    print(<span class="string">'数据插入失败！'</span>)</span><br><span class="line">    db.rollback()</span><br><span class="line">db.close()</span><br></pre></td></tr></table></figure><p>传入的数是字典，将其定义为 data 变量，表名定义成变量 table，构造插入的字段 id、name 和 age。<code>&#39;, &#39;.join(data.keys())</code>  的结果就是 id, name, age，接着需要构造多个 <code>%s</code> 当作占位符，有三个字段，就需要构造 <code>%s, %s, %s</code>。首先定义长度为 1 的数组 <code>[&#39;%s&#39;]</code>，然后用乘法将其扩充为 <code>[&#39;%s&#39;, &#39;%s&#39;, &#39;%s&#39;]</code>，再调用 <code>join()</code> 方法，最终变成 <code>%s, %s, %s</code>。再利用字符串的 <code>format()</code> 方法将表名、字段名和占位符构造出来。最终的 SQL 语句就被动态构造成了如下语句：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">INSERT INTO students(id, name, age) VALUES (%s, %s, %s)</span><br></pre></td></tr></table></figure><h1 id="【10-5】更新数据"><a href="#【10-5】更新数据" class="headerlink" title="【10.5】更新数据"></a><font color="#ff0000">【10.5】更新数据</font></h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pymysql</span><br><span class="line"></span><br><span class="line">data = &#123;</span><br><span class="line">    <span class="string">'id'</span>: <span class="string">'17110105'</span>,</span><br><span class="line">    <span class="string">'name'</span>: <span class="string">'TRH'</span>,</span><br><span class="line">    <span class="string">'age'</span>: <span class="number">21</span></span><br><span class="line">&#125;</span><br><span class="line">table = <span class="string">'students'</span></span><br><span class="line">keys = <span class="string">', '</span>.join(data.keys())</span><br><span class="line">values = <span class="string">', '</span>.join([<span class="string">'%s'</span>]*len(data))</span><br><span class="line">db = pymysql.connect(host=<span class="string">'localhost'</span>, user=<span class="string">'root'</span>, password=<span class="string">'000000'</span>, port=<span class="number">3306</span>, db=<span class="string">'spiders'</span>)</span><br><span class="line">cursor = db.cursor()</span><br><span class="line">sql = <span class="string">'INSERT INTO &#123;table&#125;(&#123;keys&#125;) VALUES (&#123;values&#125;) ON DUPLICATE KEY UPDATE'</span>.format(table=table, keys=keys, values=values)</span><br><span class="line">update = <span class="string">','</span>.join([<span class="string">"&#123;key&#125; = % s"</span>.format(key=key) <span class="keyword">for</span> key <span class="keyword">in</span> data])</span><br><span class="line">sql += update</span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    <span class="keyword">if</span> cursor.execute(sql, tuple(data.values())*<span class="number">2</span>):</span><br><span class="line">        print(<span class="string">'数据插入成功！'</span>)</span><br><span class="line">        db.commit()</span><br><span class="line"><span class="keyword">except</span>:</span><br><span class="line">    print(<span class="string">'数据插入失败！'</span>)</span><br><span class="line">    db.rollback()</span><br><span class="line">db.close()</span><br></pre></td></tr></table></figure><p><code>ON DUPLICATE KEY UPDATE</code> 表示如果主键已经存在，就执行更新操作，最终被构造成如下语句：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">INSERT INTO students(id, name, age) VALUES (% s, % s, % s) ON DUPLICATE KEY UPDATE id = % s, name = % s, age = % s</span><br></pre></td></tr></table></figure><h1 id="【10-6】删除数据"><a href="#【10-6】删除数据" class="headerlink" title="【10.6】删除数据"></a><font color="#ff0000">【10.6】删除数据</font></h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pymysql</span><br><span class="line"></span><br><span class="line">table = <span class="string">'students'</span></span><br><span class="line">condition = <span class="string">'age = 20'</span></span><br><span class="line">db = pymysql.connect(host=<span class="string">'localhost'</span>, user=<span class="string">'root'</span>, password=<span class="string">'000000'</span>, port=<span class="number">3306</span>, db=<span class="string">'spiders'</span>)</span><br><span class="line">cursor = db.cursor()</span><br><span class="line">sql = <span class="string">'DELETE FROM  &#123;table&#125; WHERE &#123;condition&#125;'</span>.format(table=table, condition=condition)</span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    cursor.execute(sql)</span><br><span class="line">    print(<span class="string">'数据删除成功！'</span>)</span><br><span class="line">    db.commit()</span><br><span class="line"><span class="keyword">except</span>:</span><br><span class="line">    print(<span class="string">'数据删除失败！'</span>)</span><br><span class="line">    db.rollback()</span><br><span class="line">db.close()</span><br></pre></td></tr></table></figure><p>删除操作直接使用 <code>DELETE</code> 语句，指定要删除的目标表名和删除条件即可</p><h1 id="【10-7】查询数据"><a href="#【10-7】查询数据" class="headerlink" title="【10.7】查询数据"></a><font color="#ff0000">【10.7】查询数据</font></h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pymysql</span><br><span class="line"></span><br><span class="line">table = <span class="string">'students'</span></span><br><span class="line">db = pymysql.connect(host=<span class="string">'localhost'</span>, user=<span class="string">'root'</span>, password=<span class="string">'000000'</span>, port=<span class="number">3306</span>, db=<span class="string">'spiders'</span>)</span><br><span class="line">cursor = db.cursor()</span><br><span class="line">sql = <span class="string">'SELECT * FROM students WHERE age &gt;= 20'</span></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    cursor.execute(sql)</span><br><span class="line">    print(<span class="string">'Count:'</span>, cursor.rowcount)</span><br><span class="line">    one = cursor.fetchone()</span><br><span class="line">    print(<span class="string">'One:'</span>, one)</span><br><span class="line">    results = cursor.fetchall()</span><br><span class="line">    print(<span class="string">'Results:'</span>, results)</span><br><span class="line">    print(<span class="string">'Results Type:'</span>, type(results))</span><br><span class="line">    <span class="keyword">for</span> row <span class="keyword">in</span> results:</span><br><span class="line">        print(row)</span><br><span class="line"><span class="keyword">except</span>:</span><br><span class="line">    print(<span class="string">'查询失败！'</span>)</span><br></pre></td></tr></table></figure><p><code>sql = &#39;SELECT * FROM students WHERE age &gt;= 20&#39;</code>：构造一条 SQL 语句，将年龄 大于等于20 岁的学生查询出来</p><p><code>cursor.rowcount</code>：调用 cursor 的 rowcount 属性获取查询结果的条数</p><p><code>cursor.fetchone()</code>：调用 cursor 的 fetchone() 方法，获取结果的第一条数据，返回结果是元组形式，元组的元素顺序跟字段一一对应，即第一个元素就是第一个字段 id，第二个元素就是第二个字段 name，以此类推</p><p><code>cursor.fetchall()</code>：调用 cursor 的 fetchall() 方法，得到结果的所有数据，它是二重元组，每个元素都是一条记录，本例中显示的是 3 条数据而不是 4 条，这是因为它的内部实现有一个偏移指针用来指向查询结果，最开始偏移指针指向第一条数据，取一次之后，指针偏移到下一条数据，这样再取的话，就会取到下一条数据了。我们最初调用了一次 fetchone 方法，这样结果的偏移指针就指向下一条数据，fetchall 方法返回的是偏移指针指向的数据一直到结束的所有数据，所以该方法获取的结果就只剩 3 个了</p><h1 id="【10-8】实战训练-—-爬取CSDN博客标题和地址保存到-MySQL"><a href="#【10-8】实战训练-—-爬取CSDN博客标题和地址保存到-MySQL" class="headerlink" title="【10.8】实战训练 — 爬取CSDN博客标题和地址保存到 MySQL"></a><font color="#ff0000">【10.8】实战训练 — 爬取CSDN博客标题和地址保存到 MySQL</font></h1><p>利用 requests 库构建请求，BeautifulSoup 解析库解析网页，获取自己博客文章的标题和地址，将其储存到本地 MySQL 数据库中，事先已经创建好了一个 blog 数据库，并创建了一个名为 article 的数据表，数据表包含 id、title、url 三个字段，其中 id 的 <code>AUTO_INCREMENT</code> 属性可以使 id 自己增加，<code>PRIMARY KEY</code> 关键字用于将 id 定义为主键</p><p>创建 article 数据表：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pymysql</span><br><span class="line"></span><br><span class="line">db = pymysql.connect(host=<span class="string">'localhost'</span>, user=<span class="string">'root'</span>, password=<span class="string">'000000'</span>, port=<span class="number">3306</span>, db=<span class="string">'blog'</span>)</span><br><span class="line">cursor = db.cursor()</span><br><span class="line">sql = <span class="string">'CREATE TABLE IF NOT EXISTS article (id INT NOT NULL AUTO_INCREMENT, title VARCHAR(255) NOT NULL, url VARCHAR(255) NOT NULL, PRIMARY KEY (id))'</span></span><br><span class="line">cursor.execute(sql)</span><br><span class="line">db.close()</span><br></pre></td></tr></table></figure><p>获取文章标题和对应的 URL 并将其储存到 MySQL 中：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> pymysql</span><br><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line"></span><br><span class="line">db = pymysql.connect(host=<span class="string">'localhost'</span>, user=<span class="string">'root'</span>, password=<span class="string">'000000'</span>, port=<span class="number">3306</span>, db=<span class="string">'blog'</span>)</span><br><span class="line">cursor = db.cursor()</span><br><span class="line"></span><br><span class="line">headers = &#123;</span><br><span class="line">    <span class="string">'User-Agent'</span>: <span class="string">'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/73.0.3683.86 Safari/537.36'</span>,</span><br><span class="line">&#125;</span><br><span class="line">url = <span class="string">"https://blog.csdn.net/qq_36759224"</span></span><br><span class="line"></span><br><span class="line">request = requests.get(url, headers=headers)</span><br><span class="line">soup = BeautifulSoup(request.text, <span class="string">'lxml'</span>)</span><br><span class="line">title_list = soup.find_all(<span class="string">'h4'</span>)</span><br><span class="line"><span class="keyword">for</span> list <span class="keyword">in</span> title_list:</span><br><span class="line">    s = list.a.text.strip()</span><br><span class="line">    title = s.replace(<span class="string">'原'</span>, <span class="string">''</span>)</span><br><span class="line">    url = list.a[<span class="string">'href'</span>].strip()</span><br><span class="line">    <span class="comment"># print(title + url)</span></span><br><span class="line">    cursor.execute(<span class="string">'INSERT INTO article (title, url) VALUES (%s, %s)'</span>, (title, url))</span><br><span class="line">db.commit()</span><br><span class="line">print(<span class="string">'数据写入完毕！'</span>)</span><br><span class="line">db.close()</span><br></pre></td></tr></table></figure><p>在命令行中使用 <code>SELECT * FROM article;</code> 命令可以查看到数据已经成功获取并储存到了数据库中：</p><fancybox><br><img src="https://cdn.jsdelivr.net/gh/TRHX/ImageHosting/ITRHX-PIC/A40/02.png" alt="02"><br></fancybox>]]></content>
      
      
      <categories>
          
          <category> Python3 学习笔记 </category>
          
          <category> 爬虫学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 爬虫 </tag>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python3 爬虫学习笔记 C09</title>
      <link href="/2019/08/27/A39-Python3-spider-C09/"/>
      <url>/2019/08/27/A39-Python3-spider-C09/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><blockquote><center><font color="#1BC3FB" size="4">Python3 爬虫学习笔记第九章 —— 【文件储存】</font></center></blockquote><a id="more"></a><p>用解析器解析出数据之后，还需要对数据进行保存。保存的形式多种多样，最简单的形式是直接保存为文本文件，如 TXT、JSON、CSV 等。</p><h1 id="【9-1】TXT-文本存储"><a href="#【9-1】TXT-文本存储" class="headerlink" title="【9.1】TXT 文本存储"></a><font color="#ff0000">【9.1】TXT 文本存储</font></h1><p>TXT 文本存储的优点：操作非常简单，TXT 文本几乎兼容任何平台；缺点：不利于检索。</p><h2 id="【9-1-1】基本示例"><a href="#【9-1-1】基本示例" class="headerlink" title="【9.1.1】基本示例"></a><font color="#ff0000">【9.1.1】基本示例</font></h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">from</span> lxml <span class="keyword">import</span> etree</span><br><span class="line"></span><br><span class="line">headers = &#123;</span><br><span class="line">    <span class="string">'User-Agent'</span>: <span class="string">'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/73.0.3683.86 Safari/537.36'</span>,</span><br><span class="line">&#125;</span><br><span class="line">url = <span class="string">"https://blog.csdn.net/qq_36759224"</span></span><br><span class="line"></span><br><span class="line">request = requests.get(url, headers=headers)</span><br><span class="line">tree = etree.HTML(request.text)</span><br><span class="line">title_list = tree.xpath(<span class="string">'//h4/a/text()'</span>)</span><br><span class="line"><span class="keyword">for</span> title <span class="keyword">in</span> title_list:</span><br><span class="line">    <span class="keyword">with</span> open(<span class="string">'blog.txt'</span>, <span class="string">'a'</span>, encoding=<span class="string">'utf8'</span>) <span class="keyword">as</span> fp:</span><br><span class="line">        fp.write(title)</span><br></pre></td></tr></table></figure><p>代码实现了我的 CSDN 博客首页所有博文标题的爬取，利用 requests 请求库发送请求，获取响应，用 XPath 获取每一篇博文的标题，然后写入 blog.txt 文件中：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">帝都的凛冬</span><br><span class="line">    最新屏蔽 CSDN 广告方法，专注阅读学习！      </span><br><span class="line">    使用Github Pages和Hexo搭建自己的独立博客【超级详细的小白教程】      </span><br><span class="line">    Python3 爬虫学习笔记 C08【解析库 Beautiful Soup】      </span><br><span class="line">    Python3 爬虫学习笔记 C07 【解析库 lxml】      </span><br><span class="line">    Python3 爬虫学习笔记 C06 【正则表达式】      </span><br><span class="line">    Python3 爬虫学习笔记 C05 【Selenium + 无界面浏览器】      </span><br><span class="line">    Python3 已经安装相关库，Pycharm 仍然报错 ModuleNotFoundError: No module named &apos;xxxxxx&apos; 的解决办法      </span><br><span class="line">    Windows/Android/iOS 等常见 User-Agent 大全      </span><br><span class="line">    Selenium 显式等待条件及其含义      </span><br><span class="line">    Python3 爬虫学习笔记 C04 【自动化测试工具 Selenium】      </span><br><span class="line">    Python3 爬虫学习笔记 C03 【Ajax 数据爬取】      </span><br><span class="line">    Python3 爬虫学习笔记 C02 【基本库 requests 的使用】      </span><br><span class="line">    Python3 爬虫学习笔记 C01 【基本库 urllib 的使用】      </span><br><span class="line">    利用官方支持为基于GitHub Pages的Hexo博客启用HTTPS      </span><br><span class="line">    光学字符识别 Tesseract-OCR 的下载、安装和基本用法      </span><br><span class="line">    Github+jsDelivr+PicGo 打造稳定快速、高效免费图床      </span><br><span class="line">    利用Cloudflare为基于GitHub Pages的Hexo博客添加HTTPS支持      </span><br><span class="line">    Python 中 if __name__ == &apos;__main__&apos;: 的理解      </span><br><span class="line">    Hexo 博客本地预览报错：Error: listen EADDRINUSE 0.0.0.0:4000      </span><br><span class="line">    谷歌浏览器检查更新时出错：无法启动更新检查（错误代码为 3: 0x80080005 -- system level）</span><br></pre></td></tr></table></figure><h2 id="【9-1-2】打开方式"><a href="#【9-1-2】打开方式" class="headerlink" title="【9.1.2】打开方式"></a><font color="#ff0000">【9.1.2】打开方式</font></h2><p>open() 方法的第二个参数为打开方式，不同的打开方式如下：</p><table><thead><tr><th>读写方式</th><th>可否读写</th><th>若文件不存在</th><th>写入方式</th></tr></thead><tbody><tr><td>r</td><td>读取</td><td>报错</td><td>不可写入</td></tr><tr><td>rb</td><td>以二进制方式读取</td><td>报错</td><td>不可写入</td></tr><tr><td>r+</td><td>读取 + 写入</td><td>报错</td><td>覆盖写入</td></tr><tr><td>rb+</td><td>以二进制方式读取+写入</td><td>报错</td><td>覆盖写入</td></tr><tr><td>w</td><td>写入</td><td>创建</td><td>覆盖写入</td></tr><tr><td>wb</td><td>以二进制方式写入</td><td>创建</td><td>覆盖写入</td></tr><tr><td>w+</td><td>读取 + 写入</td><td>创建</td><td>覆盖写入</td></tr><tr><td>wb+</td><td>以二进制方式读取+写入</td><td>创建</td><td>覆盖写入</td></tr><tr><td>a</td><td>写入</td><td>创建</td><td>附加写入</td></tr><tr><td>ab</td><td>以二进制方式写入</td><td>创建</td><td>附加写入</td></tr><tr><td>a+</td><td>读取 + 写入</td><td>创建</td><td>附加写入</td></tr><tr><td>ab+</td><td>以二进制方式读取+写入</td><td>创建</td><td>附加写入</td></tr></tbody></table><h1 id="【9-2】JSON-文件存储"><a href="#【9-2】JSON-文件存储" class="headerlink" title="【9.2】JSON 文件存储"></a><font color="#ff0000">【9.2】JSON 文件存储</font></h1><p>JSON，全称为 JavaScript Object Notation, 即 JavaScript 对象标记，它通过对象和数组的组合来表示数据，构造简洁但是结构化程度非常高，是一种轻量级的数据交换格式。</p><h2 id="【9-2-1】对象和数组"><a href="#【9-2-1】对象和数组" class="headerlink" title="【9.2.1】对象和数组"></a><font color="#ff0000">【9.2.1】对象和数组</font></h2><p>在 JavaScript 语言中，一切都是对象。因此，任何支持的类型都可以通过 JSON 来表示，例如字符串、数字、对象、数组等，但是对象和数组是比较特殊且常用的两种类型</p><ul><li><p>对象：它在 JavaScript 中是使用花括号 {} 包裹起来的内容，数据结构为 {key1：value1, key2：value2, …} 的键值对结构。在面向对象的语言中，key 为对象的属性，value 为对应的值。键名可以使用整数和字符串来表示。值的类型可以是任意类型。</p></li><li><p>数组：数组在 JavaScript 中是方括号 [] 包裹起来的内容，数据结构为 [“java”, “javascript”, “vb”, …] 的索引结构。在 JavaScript 中，数组是一种比较特殊的数据类型，它也可以像对象那样使用键值对，但还是索引用得多。同样，值的类型可以是任意类型。</p></li></ul><p>示例：一个 JSON 对象</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">[&#123;</span><br><span class="line">    <span class="attr">"name"</span>: <span class="string">"TRH"</span>,</span><br><span class="line">    <span class="attr">"gender"</span>: <span class="string">"male"</span>,</span><br><span class="line">    <span class="attr">"birthday"</span>: <span class="string">"1999-01-25"</span></span><br><span class="line">&#125;, &#123;</span><br><span class="line">     <span class="attr">"name"</span>: <span class="string">"XXX"</span>,</span><br><span class="line">    <span class="attr">"gender"</span>: <span class="string">"female"</span>,</span><br><span class="line">    <span class="attr">"birthday"</span>: <span class="string">"1999-10-18"</span></span><br><span class="line">&#125;]</span><br></pre></td></tr></table></figure><h2 id="【9-2-2】读取-JSON"><a href="#【9-2-2】读取-JSON" class="headerlink" title="【9.2.2】读取 JSON"></a><font color="#ff0000">【9.2.2】读取 JSON</font></h2><p>Python 里面的 JSON 库可以实现对 JSON 文件的读写操作，调用 JSON 库的 loads 方法将 JSON 文本字符串转为 JSON 对象、 dumps() 方法将 JSON 对象转为文本字符串</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> json</span><br><span class="line"></span><br><span class="line">str = <span class="string">'''</span></span><br><span class="line"><span class="string">[&#123;</span></span><br><span class="line"><span class="string">    "name": "TRH",</span></span><br><span class="line"><span class="string">    "gender": "male",</span></span><br><span class="line"><span class="string">    "birthday": "1999-01-25"</span></span><br><span class="line"><span class="string">&#125;, &#123;</span></span><br><span class="line"><span class="string">     "name": "XXX",</span></span><br><span class="line"><span class="string">    "gender": "female",</span></span><br><span class="line"><span class="string">    "birthday": "1999-10-18"</span></span><br><span class="line"><span class="string">&#125;]</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line">data = json.loads(str)</span><br><span class="line">print(data)</span><br><span class="line">print(data[<span class="number">0</span>][<span class="string">'name'</span>])</span><br><span class="line">print(data[<span class="number">0</span>].get(<span class="string">'name'</span>))</span><br><span class="line">print(data[<span class="number">0</span>].get(<span class="string">'age'</span>))</span><br><span class="line">print(data[<span class="number">0</span>].get(<span class="string">'age'</span>, <span class="number">25</span>))</span><br></pre></td></tr></table></figure><p>使用 loads 方法将字符串转为 JSON 对象，通过索引来获取对应的内容，获取键值时有两种方式，一种是中括号加键名，另一种是通过 get 方法传入键名。使用 get 方法，如果键名不存在，则不会报错，会返回 None，get 方法还可以传入第二个参数（即默认值），尝试获取一个原字典中不存在的键名，此时默认会返回 None。如果传入第二个参数（即默认值），那么在不存在的情况下返回该默认值。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[&#123;<span class="string">'name'</span>: <span class="string">'TRH'</span>, <span class="string">'gender'</span>: <span class="string">'male'</span>, <span class="string">'birthday'</span>: <span class="string">'1999-01-25'</span>&#125;, &#123;<span class="string">'name'</span>: <span class="string">'XXX'</span>, <span class="string">'gender'</span>: <span class="string">'female'</span>, <span class="string">'birthday'</span>: <span class="string">'1999-10-18'</span>&#125;]</span><br><span class="line">TRH</span><br><span class="line">TRH</span><br><span class="line"><span class="keyword">None</span></span><br><span class="line"><span class="number">25</span></span><br></pre></td></tr></table></figure><h2 id="【9-2-3】写入-JSON-文件"><a href="#【9-2-3】写入-JSON-文件" class="headerlink" title="【9.2.3】写入 JSON 文件"></a><font color="#ff0000">【9.2.3】写入 JSON 文件</font></h2><p>调用 dumps 方法可以将 JSON 对象转化为字符串，然后再调用文件的 write 方法即可写入文本</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> json</span><br><span class="line"></span><br><span class="line">data = [&#123;</span><br><span class="line">    <span class="string">'name'</span>: <span class="string">'TRH'</span>,</span><br><span class="line">    <span class="string">'gender'</span>: <span class="string">'male'</span>,</span><br><span class="line">    <span class="string">'birthday'</span>: <span class="string">'1999-01-25'</span></span><br><span class="line">&#125;]</span><br><span class="line"><span class="keyword">with</span> open(<span class="string">'data.json'</span>, <span class="string">'w'</span>) <span class="keyword">as</span> fp:</span><br><span class="line">    fp.write(json.dumps(data))</span><br></pre></td></tr></table></figure><p>data.json 文件：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[&#123;<span class="attr">"name"</span>: <span class="string">"TRH"</span>, <span class="attr">"gender"</span>: <span class="string">"male"</span>, <span class="attr">"birthday"</span>: <span class="string">"1999-01-25"</span>&#125;]</span><br></pre></td></tr></table></figure><p>添加参数 indent（代表缩进字符个数），将会格式化输出：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> json</span><br><span class="line"></span><br><span class="line">data = [&#123;</span><br><span class="line">    <span class="string">'name'</span>: <span class="string">'TRH'</span>,</span><br><span class="line">    <span class="string">'gender'</span>: <span class="string">'male'</span>,</span><br><span class="line">    <span class="string">'birthday'</span>: <span class="string">'1999-01-25'</span></span><br><span class="line">&#125;]</span><br><span class="line"><span class="keyword">with</span> open(<span class="string">'data.json'</span>, <span class="string">'w'</span>) <span class="keyword">as</span> file:</span><br><span class="line">    file.write(json.dumps(data, indent=<span class="number">2</span>))</span><br></pre></td></tr></table></figure></p><p>输出结果：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">"name"</span>: <span class="string">"TRH"</span>,</span><br><span class="line">    <span class="attr">"gender"</span>: <span class="string">"male"</span>,</span><br><span class="line">    <span class="attr">"birthday"</span>: <span class="string">"1999-01-25"</span></span><br><span class="line">  &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>如果 JSON 中包含中文字符，需要指定参数 ensure_ascii 为 False，另外还要规定文件输出的编码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> json</span><br><span class="line"></span><br><span class="line">data = [&#123;</span><br><span class="line">    <span class="string">'name'</span>: <span class="string">'小明'</span>,</span><br><span class="line">    <span class="string">'gender'</span>: <span class="string">'男'</span>,</span><br><span class="line">    <span class="string">'birthday'</span>: <span class="string">'1999年01月25日'</span></span><br><span class="line">&#125;]</span><br><span class="line"><span class="keyword">with</span> open(<span class="string">'data.json'</span>, <span class="string">'w'</span>, encoding=<span class="string">'utf-8'</span>) <span class="keyword">as</span> file:</span><br><span class="line">    file.write(json.dumps(data, indent=<span class="number">2</span>, ensure_ascii=<span class="keyword">False</span>))</span><br></pre></td></tr></table></figure><p>输出结果：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">"name"</span>: <span class="string">"小明"</span>,</span><br><span class="line">    <span class="attr">"gender"</span>: <span class="string">"男"</span>,</span><br><span class="line">    <span class="attr">"birthday"</span>: <span class="string">"1999年01月25日"</span></span><br><span class="line">  &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure><h1 id="【9-3】CSV-文本存储"><a href="#【9-3】CSV-文本存储" class="headerlink" title="【9.3】CSV 文本存储"></a><font color="#ff0000">【9.3】CSV 文本存储</font></h1><p>CSV（Comma-Separated Values）是逗号分隔值或字符分隔值的文件格式，其文件以纯文本的形式储存表格数据（数字和文本），CSV 文件的行与行之间用换行符分隔，列与列之间用逗号分隔</p><h2 id="【9-3-1】写入"><a href="#【9-3-1】写入" class="headerlink" title="【9.3.1】写入"></a><font color="#ff0000">【9.3.1】写入</font></h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> csv</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> open(<span class="string">'data.csv'</span>, <span class="string">'w'</span>) <span class="keyword">as</span> csvfile:</span><br><span class="line">    writer = csv.writer(csvfile)</span><br><span class="line">    writer.writerow([<span class="string">'id'</span>, <span class="string">'name'</span>, <span class="string">'age'</span>])</span><br><span class="line">    writer.writerow([<span class="string">'10001'</span>, <span class="string">'TRHX'</span>, <span class="number">20</span>])</span><br><span class="line">    writer.writerow([<span class="string">'10002'</span>, <span class="string">'Bob'</span>, <span class="number">22</span>])</span><br><span class="line">    writer.writerow([<span class="string">'10003'</span>, <span class="string">'Jordan'</span>, <span class="number">21</span>])</span><br></pre></td></tr></table></figure><p>打开 data.csv 文件，调用 CSV 库的 writer 方法初始化写入对象，然后调用 writerow 方法传入每行的数据即可完成写入，用 Excel 打开 data.csv 文件将是表格形式</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">id,name,age</span><br><span class="line"></span><br><span class="line"><span class="number">10001</span>,TRHX,<span class="number">20</span></span><br><span class="line"></span><br><span class="line"><span class="number">10002</span>,Bob,<span class="number">22</span></span><br><span class="line"></span><br><span class="line"><span class="number">10003</span>,Jordan,<span class="number">21</span></span><br></pre></td></tr></table></figure><p>默认每一行之间是有一行空格的，可以使用参数 <code>newline</code> 来去除空行：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> csv</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> open(<span class="string">'data.csv'</span>, <span class="string">'w'</span>, newline=<span class="string">''</span>) <span class="keyword">as</span> csvfile:</span><br><span class="line">    writer = csv.writer(csvfile)</span><br><span class="line">    writer.writerow([<span class="string">'id'</span>, <span class="string">'name'</span>, <span class="string">'age'</span>])</span><br><span class="line">    writer.writerow([<span class="string">'10001'</span>, <span class="string">'TRHX'</span>, <span class="number">20</span>])</span><br><span class="line">    writer.writerow([<span class="string">'10002'</span>, <span class="string">'Bob'</span>, <span class="number">22</span>])</span><br><span class="line">    writer.writerow([<span class="string">'10003'</span>, <span class="string">'Jordan'</span>, <span class="number">21</span>])</span><br></pre></td></tr></table></figure><p>输出结果：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">id,name,age</span><br><span class="line"><span class="number">10001</span>,TRHX,<span class="number">20</span></span><br><span class="line"><span class="number">10002</span>,Bob,<span class="number">22</span></span><br><span class="line"><span class="number">10003</span>,Jordan,<span class="number">21</span></span><br></pre></td></tr></table></figure><p>列与列之间的分隔符是可以修改的，只需要传入 <code>delimiter</code> 参数即可：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> csv</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> open(<span class="string">'data.csv'</span>, <span class="string">'w'</span>) <span class="keyword">as</span> csvfile:</span><br><span class="line">    writer = csv.writer(csvfile, delimiter=<span class="string">' '</span>)</span><br><span class="line">    writer.writerow([<span class="string">'id'</span>, <span class="string">'name'</span>, <span class="string">'age'</span>])</span><br><span class="line">    writer.writerow([<span class="string">'10001'</span>, <span class="string">'TRHX'</span>, <span class="number">20</span>])</span><br><span class="line">    writer.writerow([<span class="string">'10002'</span>, <span class="string">'Bob'</span>, <span class="number">22</span>])</span><br><span class="line">    writer.writerow([<span class="string">'10003'</span>, <span class="string">'Jordan'</span>, <span class="number">21</span>])</span><br></pre></td></tr></table></figure><p>输出结果：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">id name age</span><br><span class="line"></span><br><span class="line"><span class="number">10001</span> TRHX <span class="number">20</span></span><br><span class="line"></span><br><span class="line"><span class="number">10002</span> Bob <span class="number">22</span></span><br><span class="line"></span><br><span class="line"><span class="number">10003</span> Jordan <span class="number">21</span></span><br></pre></td></tr></table></figure><p>调用 <code>writerows</code> 方法也可以同时写入多行，此时参数就需要为二维列表：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> csv</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> open(<span class="string">'data.csv'</span>, <span class="string">'w'</span>) <span class="keyword">as</span> csvfile:</span><br><span class="line">    writer = csv.writer(csvfile, delimiter=<span class="string">' '</span>)</span><br><span class="line">    writer.writerow([<span class="string">'id'</span>, <span class="string">'name'</span>, <span class="string">'age'</span>])</span><br><span class="line">    writer.writerows([[<span class="string">'10001'</span>, <span class="string">'TRHX'</span>, <span class="number">20</span>], [<span class="string">'10002'</span>, <span class="string">'Bob'</span>, <span class="number">22</span>], [<span class="string">'10003'</span>, <span class="string">'Jordan'</span>, <span class="number">21</span>]])</span><br></pre></td></tr></table></figure><p>输出结果仍与原来的一样</p><p>此外 CSV 库中也提供了字典的写入方式：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> csv</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> open(<span class="string">'data.csv'</span>, <span class="string">'w'</span>) <span class="keyword">as</span> csvfile:</span><br><span class="line">    fieldnames = [<span class="string">'id'</span>, <span class="string">'name'</span>, <span class="string">'age'</span>]</span><br><span class="line">    writer = csv.DictWriter(csvfile, fieldnames=fieldnames)</span><br><span class="line">    writer.writeheader()</span><br><span class="line">    writer.writerow(&#123;<span class="string">'id'</span>: <span class="string">'10001'</span>, <span class="string">'name'</span>: <span class="string">'TRHX'</span>, <span class="string">'age'</span>: <span class="number">20</span>&#125;)</span><br><span class="line">    writer.writerow(&#123;<span class="string">'id'</span>: <span class="string">'10002'</span>, <span class="string">'name'</span>: <span class="string">'Bob'</span>, <span class="string">'age'</span>: <span class="number">22</span>&#125;)</span><br><span class="line">    writer.writerow(&#123;<span class="string">'id'</span>: <span class="string">'10003'</span>, <span class="string">'name'</span>: <span class="string">'Jordan'</span>, <span class="string">'age'</span>: <span class="number">21</span>&#125;)</span><br></pre></td></tr></table></figure><p>首先定义 3 个字段，用 fieldnames 表示，然后将其传给 DictWriter 来初始化一个字典写入对象，接着可以调用 writeheader 方法先写入头信息，然后再调用 writerow 方法传入相应字典即可</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">id,name,age</span><br><span class="line"></span><br><span class="line"><span class="number">10001</span>,TRHX,<span class="number">20</span></span><br><span class="line"></span><br><span class="line"><span class="number">10002</span>,Bob,<span class="number">22</span></span><br><span class="line"></span><br><span class="line"><span class="number">10003</span>,Jordan,<span class="number">21</span></span><br></pre></td></tr></table></figure><h2 id="【9-3-2】读取"><a href="#【9-3-2】读取" class="headerlink" title="【9.3.2】读取"></a><font color="#ff0000">【9.3.2】读取</font></h2><p>有写入方法，同样也可以使用 csv 库来读取 CSV 文件：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> csv</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> open(<span class="string">'data.csv'</span>, <span class="string">'r'</span>, encoding=<span class="string">'utf-8'</span>) <span class="keyword">as</span> csvfile:</span><br><span class="line">    reader = csv.reader(csvfile)</span><br><span class="line">    <span class="keyword">for</span> row <span class="keyword">in</span> reader:</span><br><span class="line">        print(row)</span><br></pre></td></tr></table></figure><p>构造 Reader 对象，遍历输出每行的内容，每一行都是一个列表形式。（如果 CSV 文件中包含中文的话，还需要指定文件编码）读取结果：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[<span class="string">'id'</span>, <span class="string">'name'</span>, <span class="string">'age'</span>]</span><br><span class="line">[<span class="string">'10001'</span>, <span class="string">'TRHX'</span>, <span class="string">'20'</span>]</span><br><span class="line">[<span class="string">'10002'</span>, <span class="string">'Bob'</span>, <span class="string">'22'</span>]</span><br><span class="line">[<span class="string">'10003'</span>, <span class="string">'Jordan'</span>, <span class="string">'21'</span>]</span><br></pre></td></tr></table></figure><p>此外，还可以利用 pandas 的 read_csv 方法将数据从 CSV 中读取出来（pandas 是基于NumPy 的一种工具，该工具是为了解决数据分析任务而创建的。Pandas 纳入了大量库和一些标准的数据模型，提供了高效地操作大型数据集所需的工具）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"></span><br><span class="line">df = pd.read_csv(<span class="string">'data.csv'</span>)</span><br><span class="line">print(df)</span><br></pre></td></tr></table></figure><p>读取结果：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">      id    name  age</span><br><span class="line"><span class="number">0</span>  <span class="number">10001</span>    TRHX   <span class="number">20</span></span><br><span class="line"><span class="number">1</span>  <span class="number">10002</span>     Bob   <span class="number">22</span></span><br><span class="line"><span class="number">2</span>  <span class="number">10003</span>  Jordan   <span class="number">21</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Python3 学习笔记 </category>
          
          <category> 爬虫学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 爬虫 </tag>
            
            <tag> 文件储存 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python3 爬虫学习笔记 C08</title>
      <link href="/2019/08/26/A38-Python3-spider-C08/"/>
      <url>/2019/08/26/A38-Python3-spider-C08/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><blockquote><center><font color="#1BC3FB" size="4">Python3 爬虫学习笔记第八章 —— 【解析库 Beautiful Soup】</font></center></blockquote><a id="more"></a><h1 id="【8-1】关于-Beautiful-Soup"><a href="#【8-1】关于-Beautiful-Soup" class="headerlink" title="【8.1】关于 Beautiful Soup"></a><font color="#ff0000">【8.1】关于 Beautiful Soup</font></h1><p>Beautiful Soup 可以从 HTML 或者 XML 文件中提取数据，Beautiful Soup 可以提供一些简单的、Python 式的函数用来处理导航、搜索、修改分析树等，它借助网页的结构和属性等特性来解析网页，lxml 只会局部遍历，而 Beautiful Soup 是基于 HTML DOM 的，会载入整个文档，解析整个 DOM 树，因此时间和内存开销都会大很多，所以性能要低于lxml</p><table><thead><tr><th style="text-align:center">抓取工具</th><th style="text-align:center">速度</th><th style="text-align:center">使用难度</th><th style="text-align:center">安装难度</th></tr></thead><tbody><tr><td style="text-align:center">正则</td><td style="text-align:center">最快</td><td style="text-align:center">困难</td><td style="text-align:center">无（内置）</td></tr><tr><td style="text-align:center">lxml</td><td style="text-align:center">快</td><td style="text-align:center">简单</td><td style="text-align:center">一般</td></tr><tr><td style="text-align:center">BeautifulSoup</td><td style="text-align:center">慢</td><td style="text-align:center">最简单</td><td style="text-align:center">简单</td></tr></tbody></table><h1 id="【8-2】Beautiful-Soup-的基本使用"><a href="#【8-2】Beautiful-Soup-的基本使用" class="headerlink" title="【8.2】Beautiful Soup 的基本使用"></a><font color="#ff0000">【8.2】Beautiful Soup 的基本使用</font></h1><p>需要使用命令 <code>pip install bs4</code> 安装库，Beautiful Soup 在解析时依赖解析器，除了支持 Python 标准库中的 HTML 解析器外，还支持一些第三方解析器：</p><table><thead><tr><th>解析器</th><th>使用方法</th><th>优势</th><th>劣势</th></tr></thead><tbody><tr><td>Python 标准库</td><td>BeautifulSoup(markup, “html.parser”)</td><td>Python 的内置标准库、执行速度适中 、文档容错能力强</td><td>Python 2.7.3 or 3.2.2) 前的版本中文容错能力差</td></tr><tr><td>LXML HTML 解析器</td><td>BeautifulSoup(markup, “lxml”)</td><td>速度快、文档容错能力强</td><td>需要安装 C 语言库</td></tr><tr><td>LXML XML 解析器</td><td>BeautifulSoup(markup, “xml”)</td><td>速度快、唯一支持 XML 的解析器</td><td>需要安装 C 语言库</td></tr><tr><td>html5lib</td><td>BeautifulSoup(markup, “html5lib”)</td><td>最好的容错性、以浏览器的方式解析文档、生成 HTML5 格式的文档</td><td>速度慢、不依赖外部扩展</td></tr></tbody></table><p>基本使用：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line">soup = BeautifulSoup(<span class="string">'&lt;p&gt;Hello&lt;/p&gt;'</span>, <span class="string">'lxml'</span>)</span><br><span class="line"><span class="comment"># soup = BeautifulSoup(open('soup.html', encoding='utf8'), 'lxml')</span></span><br><span class="line">print(soup.p.string)</span><br></pre></td></tr></table></figure></p><p>输出结果：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Hello</span><br></pre></td></tr></table></figure></p><h1 id="【8-3】节点选择器"><a href="#【8-3】节点选择器" class="headerlink" title="【8.3】节点选择器"></a><font color="#ff0000">【8.3】节点选择器</font></h1><p>直接调用节点的名称就可以选择节点元素，再调用 string 属性就可以得到节点内的文本</p><h2 id="【8-3-1】元素选择"><a href="#【8-3-1】元素选择" class="headerlink" title="【8.3.1】元素选择"></a><font color="#ff0000">【8.3.1】元素选择</font></h2><p>新建 <code>soup.html</code> 文件：<br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=<span class="string">"en"</span>&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=<span class="string">"UTF-8"</span> /&gt;</span><br><span class="line">    &lt;title&gt;测试bs4&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;div&gt;</span><br><span class="line">    甄姬</span><br><span class="line">    &lt;p&gt;百里守约&lt;/p&gt;</span><br><span class="line">    &lt;p&gt;李白&lt;/p&gt;</span><br><span class="line">    太乙真人</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;div class="song"&gt;</span><br><span class="line">    &lt;p&gt;李清照&lt;/p&gt;</span><br><span class="line">    &lt;p&gt;王安石&lt;/p&gt;</span><br><span class="line">    &lt;p&gt;苏轼&lt;/p&gt;</span><br><span class="line">    &lt;p&gt;柳宗元&lt;/p&gt;</span><br><span class="line">    &lt;a href="http://www.song.com/" title="赵匡义" target="_self"&gt;宋朝是最强大的王朝，不是军队的强大，而是经济很强大，国民都很有钱。&lt;/a&gt;</span><br><span class="line">    &lt;img src=<span class="string">"http://www.baidu.com/meinv.jpg"</span> alt=<span class="string">""</span>&gt;</span><br><span class="line">    &lt;a href="" class="du"&gt;总为浮云能蔽日，长安不见使人愁&lt;/a&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;div class="tang"&gt;</span><br><span class="line">    &lt;ul&gt;</span><br><span class="line">        &lt;li&gt;&lt;a href="http://www.baidu.com" title="qing"&gt;清明时节雨纷纷，路上行人欲断魂，借问酒家何处有，牧童遥指杏花村。&lt;/a&gt; &lt;/li&gt;</span><br><span class="line">        &lt;li&gt;&lt;a href="http://www.163.com" title="qin"&gt;秦时明月汉时关，万里长征人未还，但使龙城飞将在，不教胡马度阴山。&lt;/a&gt; &lt;/li&gt;</span><br><span class="line">        &lt;li&gt;&lt;a href="http://www.126.com" alt="qi"&gt;岐王宅里寻常见，崔九堂前几度闻，正是江南好风景，落花时节又逢君。&lt;/a&gt; &lt;/li&gt;</span><br><span class="line">        &lt;li&gt;&lt;a href="http://www.sina.com" class="du"&gt;杜甫&lt;/a&gt; &lt;/li&gt;</span><br><span class="line">        &lt;li&gt;&lt;b&gt;唐朝&lt;/b&gt;&lt;/li&gt;</span><br><span class="line">        &lt;li&gt;&lt;i&gt;宋朝&lt;/i&gt;&lt;/li&gt;</span><br><span class="line">        &lt;li&gt;&lt;a href="http://www.haha.com" id="feng"&gt;凤凰台上凤凰游，凤去台空江自流，吴宫花草埋幽径，晋代衣冠成古丘。&lt;/a&gt; &lt;/li&gt;</span><br><span class="line">    &lt;/ul&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line">soup = BeautifulSoup(open(<span class="string">'soup.html'</span>, encoding=<span class="string">'utf8'</span>), <span class="string">'lxml'</span>)</span><br><span class="line">print(soup.title)</span><br><span class="line">print(type(soup.title))</span><br><span class="line">print(soup.title.string)</span><br><span class="line">print(soup.head)</span><br><span class="line">print(soup.p)</span><br></pre></td></tr></table></figure><p>依次查找 title、head、p 节点。输出结果：<br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;title&gt;测试bs4&lt;/title&gt;</span><br><span class="line">&lt;<span class="class"><span class="keyword">class</span> '<span class="title">bs4</span>.<span class="title">element</span>.<span class="title">Tag</span>'&gt;</span></span><br><span class="line"><span class="class">测试<span class="title">bs4</span></span></span><br><span class="line"><span class="class">&lt;<span class="title">head</span>&gt;</span></span><br><span class="line">&lt;meta charset="utf-8"/&gt;</span><br><span class="line">&lt;title&gt;测试bs4&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;p&gt;百里守约&lt;/p&gt;</span><br></pre></td></tr></table></figure></p><h2 id="【8-3-2】提取信息"><a href="#【8-3-2】提取信息" class="headerlink" title="【8.3.2】提取信息"></a><font color="#ff0000">【8.3.2】提取信息</font></h2><ul><li>string 属性：获取节点包含的文本值（如果标签里面还有标签，那么string获取到的结果为None）</li><li>text 属性：获取节点包含的文本值</li><li>get_text() 属性：获取节点包含的文本值</li><li>name 属性：获取节点的名称</li><li>attrs ：获取所有属性</li><li>attrs[‘属性名’] ：获取指定属性</li></ul><p>依然以 soup.html 为例：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line">soup = BeautifulSoup(open(<span class="string">'soup.html'</span>, encoding=<span class="string">'utf8'</span>), <span class="string">'lxml'</span>)</span><br><span class="line">print(soup.title)</span><br><span class="line">print(soup.title.text)</span><br><span class="line">print(soup.title.get_text())</span><br><span class="line">print(soup.title.string)</span><br><span class="line">print(soup.div.string)</span><br><span class="line">print(soup.div.text)</span><br><span class="line">print(soup.title.name)</span><br><span class="line">print(soup.a[<span class="string">'href'</span>])  <span class="comment"># 获取href属性</span></span><br><span class="line">print(soup.a[<span class="string">'title'</span>])  <span class="comment"># 获取title属性</span></span><br><span class="line">print(soup.a[<span class="string">'target'</span>])  <span class="comment"># 获取target属性</span></span><br><span class="line">print(soup.a.attrs)  <span class="comment"># 获取所有属性</span></span><br><span class="line">print(soup.a.attrs[<span class="string">'href'</span>])  <span class="comment"># 获取href属性</span></span><br></pre></td></tr></table></figure></p><p>输出结果：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&lt;title&gt;测试bs4&lt;/title&gt;</span><br><span class="line">测试bs4</span><br><span class="line">测试bs4</span><br><span class="line">测试bs4</span><br><span class="line"><span class="keyword">None</span></span><br><span class="line"></span><br><span class="line">    甄姬</span><br><span class="line">    百里守约</span><br><span class="line">李白</span><br><span class="line">    太乙真人</span><br><span class="line"></span><br><span class="line">title</span><br><span class="line">http://www.song.com/</span><br><span class="line">赵匡义</span><br><span class="line">_self</span><br><span class="line">&#123;<span class="string">'href'</span>: <span class="string">'http://www.song.com/'</span>, <span class="string">'title'</span>: <span class="string">'赵匡义'</span>, <span class="string">'target'</span>: <span class="string">'_self'</span>&#125;</span><br><span class="line">http://www.song.com/</span><br></pre></td></tr></table></figure></p><h1 id="【8-3-3】嵌套选择"><a href="#【8-3-3】嵌套选择" class="headerlink" title="【8.3.3】嵌套选择"></a><font color="#ff0000">【8.3.3】嵌套选择</font></h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line"></span><br><span class="line">html = <span class="string">"""</span></span><br><span class="line"><span class="string">&lt;html&gt;&lt;head&gt;&lt;title&gt;This is a demo&lt;/title&gt;&lt;/head&gt;</span></span><br><span class="line"><span class="string">&lt;body&gt;</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line">soup = BeautifulSoup(html, <span class="string">'lxml'</span>)</span><br><span class="line">print(soup.head.title)</span><br><span class="line">print(type(soup.head.title))</span><br><span class="line">print(soup.head.title.string)</span><br></pre></td></tr></table></figure><p>获取 head 节点里面的 title 节点，输出结果：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;title&gt;This is a demo&lt;/title&gt;</span><br><span class="line">&lt;<span class="class"><span class="keyword">class</span> '<span class="title">bs4</span>.<span class="title">element</span>.<span class="title">Tag</span>'&gt;</span></span><br><span class="line"><span class="class"><span class="title">This</span> <span class="title">is</span> <span class="title">a</span> <span class="title">demo</span></span></span><br></pre></td></tr></table></figure></p><h1 id="【8-3-4】关联选择"><a href="#【8-3-4】关联选择" class="headerlink" title="【8.3.4】关联选择"></a><font color="#ff0000">【8.3.4】关联选择</font></h1><ul><li>contents 属性：获取某个节点元素的直接子节点</li><li>children 属性：遍历某个节点元素的子节点</li><li>descendants 属性：获取某个节点元素所有的子孙节点</li><li>parent 属性：获取某个节点元素的父节点</li><li>parents 属性：获取某个节点元素所有的祖先节点</li><li>next_sibling 属性：获取节点的下一个兄弟元素</li><li>previous_sibling 属性：获取节点的上一个兄弟元素</li><li>next_siblings 属性：获取某个节点所有后面的兄弟元素</li><li>previous_siblings 属性：获取某个节点所有前面的兄弟元素</li></ul><font color="#ff0000">contents 属性应用示例</font><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line"></span><br><span class="line">html = <span class="string">"""</span></span><br><span class="line"><span class="string">&lt;html&gt;</span></span><br><span class="line"><span class="string">    &lt;head&gt;</span></span><br><span class="line"><span class="string">        &lt;title&gt;The Dormouse's story&lt;/title&gt;</span></span><br><span class="line"><span class="string">    &lt;/head&gt;</span></span><br><span class="line"><span class="string">    &lt;body&gt;</span></span><br><span class="line"><span class="string">        &lt;p class="story"&gt;</span></span><br><span class="line"><span class="string">            Once upon a time there were three little sisters; and their names were</span></span><br><span class="line"><span class="string">            &lt;a href="http://example.com/elsie" class="sister" id="link1"&gt;</span></span><br><span class="line"><span class="string">                &lt;span&gt;Elsie&lt;/span&gt;</span></span><br><span class="line"><span class="string">            &lt;/a&gt;</span></span><br><span class="line"><span class="string">            &lt;a href="http://example.com/lacie" class="sister" id="link2"&gt;Lacie&lt;/a&gt; </span></span><br><span class="line"><span class="string">            and</span></span><br><span class="line"><span class="string">            &lt;a href="http://example.com/tillie" class="sister" id="link3"&gt;Tillie&lt;/a&gt;</span></span><br><span class="line"><span class="string">            and they lived at the bottom of a well.</span></span><br><span class="line"><span class="string">        &lt;/p&gt;</span></span><br><span class="line"><span class="string">        &lt;p class="story"&gt;...&lt;/p&gt;</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line">soup = BeautifulSoup(html, <span class="string">'lxml'</span>)</span><br><span class="line">print(soup.p.contents)</span><br></pre></td></tr></table></figure><p>获取 p 节点元素的直接子节点，输出结果：<br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">['\n            Once upon a time there were three little sisters; and their names were\n            ', &lt;a class="sister" href="http://example.com/elsie" id="link1"&gt;</span><br><span class="line">&lt;span&gt;Elsie&lt;/span&gt;</span><br><span class="line">&lt;/a&gt;, '\n', &lt;a class="sister" href="http://example.com/lacie" id="link2"&gt;Lacie&lt;/a&gt;, ' \n            and\n            ', &lt;a class="sister" href="http://example.com/tillie" id="link3"&gt;Tillie&lt;/a&gt;, '\n            and they lived at the bottom of a well.\n        ']</span><br></pre></td></tr></table></figure></p><font color="#ff0000">children 属性应用示例：</font><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line"></span><br><span class="line">html = <span class="string">"""</span></span><br><span class="line"><span class="string">&lt;html&gt;</span></span><br><span class="line"><span class="string">    &lt;head&gt;</span></span><br><span class="line"><span class="string">        &lt;title&gt;The Dormouse's story&lt;/title&gt;</span></span><br><span class="line"><span class="string">    &lt;/head&gt;</span></span><br><span class="line"><span class="string">    &lt;body&gt;</span></span><br><span class="line"><span class="string">        &lt;p class="story"&gt;</span></span><br><span class="line"><span class="string">            Once upon a time there were three little sisters; and their names were</span></span><br><span class="line"><span class="string">            &lt;a href="http://example.com/elsie" class="sister" id="link1"&gt;</span></span><br><span class="line"><span class="string">                &lt;span&gt;Elsie&lt;/span&gt;</span></span><br><span class="line"><span class="string">            &lt;/a&gt;</span></span><br><span class="line"><span class="string">            &lt;a href="http://example.com/lacie" class="sister" id="link2"&gt;Lacie&lt;/a&gt; </span></span><br><span class="line"><span class="string">            and</span></span><br><span class="line"><span class="string">            &lt;a href="http://example.com/tillie" class="sister" id="link3"&gt;Tillie&lt;/a&gt;</span></span><br><span class="line"><span class="string">            and they lived at the bottom of a well.</span></span><br><span class="line"><span class="string">        &lt;/p&gt;</span></span><br><span class="line"><span class="string">        &lt;p class="story"&gt;...&lt;/p&gt;</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line">soup = BeautifulSoup(html, <span class="string">'lxml'</span>)</span><br><span class="line">print(soup.p.children)</span><br><span class="line"><span class="keyword">for</span> i, child <span class="keyword">in</span> enumerate(soup.p.children):</span><br><span class="line">    print(i, child)</span><br></pre></td></tr></table></figure><p>遍历 p 节点元素的子节点，输出结果：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&lt;list_iterator object at <span class="number">0x00000228E3C205F8</span>&gt;</span><br><span class="line"><span class="number">0</span> </span><br><span class="line">            Once upon a time there were three little sisters; <span class="keyword">and</span> their names were</span><br><span class="line">            </span><br><span class="line">1 &lt;a class="sister" href="http://example.com/elsie" id="link1"&gt;</span><br><span class="line">&lt;span&gt;Elsie&lt;/span&gt;</span><br><span class="line">&lt;/a&gt;</span><br><span class="line"><span class="number">2</span> </span><br><span class="line"></span><br><span class="line">3 &lt;a class="sister" href="http://example.com/lacie" id="link2"&gt;Lacie&lt;/a&gt;</span><br><span class="line"><span class="number">4</span>  </span><br><span class="line">            <span class="keyword">and</span></span><br><span class="line">            </span><br><span class="line">5 &lt;a class="sister" href="http://example.com/tillie" id="link3"&gt;Tillie&lt;/a&gt;</span><br><span class="line"><span class="number">6</span> </span><br><span class="line">            <span class="keyword">and</span> they lived at the bottom of a well.</span><br></pre></td></tr></table></figure></p><font color="#ff0000">descendants 属性应用示例：</font><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line"></span><br><span class="line">html = <span class="string">"""</span></span><br><span class="line"><span class="string">&lt;html&gt;</span></span><br><span class="line"><span class="string">    &lt;head&gt;</span></span><br><span class="line"><span class="string">        &lt;title&gt;The Dormouse's story&lt;/title&gt;</span></span><br><span class="line"><span class="string">    &lt;/head&gt;</span></span><br><span class="line"><span class="string">    &lt;body&gt;</span></span><br><span class="line"><span class="string">        &lt;p class="story"&gt;</span></span><br><span class="line"><span class="string">            Once upon a time there were three little sisters; and their names were</span></span><br><span class="line"><span class="string">            &lt;a href="http://example.com/elsie" class="sister" id="link1"&gt;</span></span><br><span class="line"><span class="string">                &lt;span&gt;Elsie&lt;/span&gt;</span></span><br><span class="line"><span class="string">            &lt;/a&gt;</span></span><br><span class="line"><span class="string">            &lt;a href="http://example.com/lacie" class="sister" id="link2"&gt;Lacie&lt;/a&gt; </span></span><br><span class="line"><span class="string">            and</span></span><br><span class="line"><span class="string">            &lt;a href="http://example.com/tillie" class="sister" id="link3"&gt;Tillie&lt;/a&gt;</span></span><br><span class="line"><span class="string">            and they lived at the bottom of a well.</span></span><br><span class="line"><span class="string">        &lt;/p&gt;</span></span><br><span class="line"><span class="string">        &lt;p class="story"&gt;...&lt;/p&gt;</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line">soup = BeautifulSoup(html, <span class="string">'lxml'</span>)</span><br><span class="line">print(soup.p.descendants)</span><br><span class="line"><span class="keyword">for</span> i, child <span class="keyword">in</span> enumerate(soup.p.descendants):</span><br><span class="line">    print(i, child)</span><br></pre></td></tr></table></figure><br><br>获取 p 节点元素所有的子孙节点，输出结果：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">&lt;generator object descendants at <span class="number">0x0000018404A4C3B8</span>&gt;</span><br><span class="line"><span class="number">0</span> </span><br><span class="line">            Once upon a time there were three little sisters; <span class="keyword">and</span> their names were</span><br><span class="line">            </span><br><span class="line">1 &lt;a class="sister" href="http://example.com/elsie" id="link1"&gt;</span><br><span class="line">&lt;span&gt;Elsie&lt;/span&gt;</span><br><span class="line">&lt;/a&gt;</span><br><span class="line"><span class="number">2</span> </span><br><span class="line"></span><br><span class="line">3 &lt;span&gt;Elsie&lt;/span&gt;</span><br><span class="line"><span class="number">4</span> Elsie</span><br><span class="line"><span class="number">5</span> </span><br><span class="line"></span><br><span class="line"><span class="number">6</span> </span><br><span class="line"></span><br><span class="line">7 &lt;a class="sister" href="http://example.com/lacie" id="link2"&gt;Lacie&lt;/a&gt;</span><br><span class="line"><span class="number">8</span> Lacie</span><br><span class="line"><span class="number">9</span>  </span><br><span class="line">            <span class="keyword">and</span></span><br><span class="line">            </span><br><span class="line">10 &lt;a class="sister" href="http://example.com/tillie" id="link3"&gt;Tillie&lt;/a&gt;</span><br><span class="line"><span class="number">11</span> Tillie</span><br><span class="line"><span class="number">12</span> </span><br><span class="line">            <span class="keyword">and</span> they lived at the bottom of a well.</span><br></pre></td></tr></table></figure><br><br><font color="#ff0000">parent 属性应用示例：</font><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line">html = <span class="string">"""</span></span><br><span class="line"><span class="string">&lt;html&gt;</span></span><br><span class="line"><span class="string">    &lt;head&gt;</span></span><br><span class="line"><span class="string">        &lt;title&gt;The Dormouse's story&lt;/title&gt;</span></span><br><span class="line"><span class="string">    &lt;/head&gt;</span></span><br><span class="line"><span class="string">    &lt;body&gt;</span></span><br><span class="line"><span class="string">        &lt;p class="story"&gt;</span></span><br><span class="line"><span class="string">            Once upon a time there were three little sisters; and their names were</span></span><br><span class="line"><span class="string">            &lt;a href="http://example.com/elsie" class="sister" id="link1"&gt;</span></span><br><span class="line"><span class="string">                &lt;span&gt;Elsie&lt;/span&gt;</span></span><br><span class="line"><span class="string">            &lt;/a&gt;</span></span><br><span class="line"><span class="string">        &lt;/p&gt;</span></span><br><span class="line"><span class="string">    &lt;/body&gt;</span></span><br><span class="line"><span class="string">&lt;/html&gt;</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line">soup = BeautifulSoup(html, <span class="string">'lxml'</span>)</span><br><span class="line">print(soup.a.parent)</span><br></pre></td></tr></table></figure><br><br>获取 a 节点元素的父节点，输出结果：<br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;p class="story"&gt;</span><br><span class="line">            Once upon a time there were three little sisters; <span class="keyword">and</span> their names were</span><br><span class="line">            &lt;a class="sister" href="http://example.com/elsie" id="link1"&gt;</span><br><span class="line">&lt;span&gt;Elsie&lt;/span&gt;</span><br><span class="line">&lt;/a&gt;</span><br><span class="line">&lt;/p&gt;</span><br></pre></td></tr></table></figure><br><br><font color="#ff0000">parents 属性应用示例：</font><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line"></span><br><span class="line">html = <span class="string">"""</span></span><br><span class="line"><span class="string">&lt;html&gt;</span></span><br><span class="line"><span class="string">    &lt;body&gt;</span></span><br><span class="line"><span class="string">        &lt;p class="story"&gt;</span></span><br><span class="line"><span class="string">            &lt;a href="http://example.com/elsie" class="sister" id="link1"&gt;</span></span><br><span class="line"><span class="string">                &lt;span&gt;Elsie&lt;/span&gt;</span></span><br><span class="line"><span class="string">            &lt;/a&gt;</span></span><br><span class="line"><span class="string">        &lt;/p&gt;</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line">soup = BeautifulSoup(html, <span class="string">'lxml'</span>)</span><br><span class="line">print(type(soup.a.parents))</span><br><span class="line">print(list(enumerate(soup.a.parents)))</span><br></pre></td></tr></table></figure><br><br>获取 a 节点元素所有的祖先节点，输出结果：<br><br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">&lt;<span class="class"><span class="keyword">class</span> '<span class="title">generator</span>'&gt;</span></span><br><span class="line"><span class="class">[<span class="params">(<span class="number">0</span>, &lt;p class=<span class="string">"story"</span>&gt;</span></span></span><br><span class="line"><span class="class"><span class="params">&lt;a class=<span class="string">"sister"</span> href=<span class="string">"http://example.com/elsie"</span> id=<span class="string">"link1"</span>&gt;</span></span></span><br><span class="line"><span class="class"><span class="params">&lt;span&gt;Elsie&lt;/span&gt;</span></span></span><br><span class="line"><span class="class"><span class="params">&lt;/a&gt;</span></span></span><br><span class="line">&lt;/p&gt;), (1, &lt;body&gt;</span><br><span class="line">&lt;p class="story"&gt;</span><br><span class="line">&lt;a class="sister" href="http://example.com/elsie" id="link1"&gt;</span><br><span class="line">&lt;span&gt;Elsie&lt;/span&gt;</span><br><span class="line">&lt;/a&gt;</span><br><span class="line">&lt;/p&gt;</span><br><span class="line">&lt;/body&gt;), (2, &lt;html&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;p class="story"&gt;</span><br><span class="line">&lt;a class="sister" href="http://example.com/elsie" id="link1"&gt;</span><br><span class="line">&lt;span&gt;Elsie&lt;/span&gt;</span><br><span class="line">&lt;/a&gt;</span><br><span class="line">&lt;/p&gt;</span><br><span class="line">&lt;/body&gt;&lt;/html&gt;), (3, &lt;html&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;p class="story"&gt;</span><br><span class="line">&lt;a class="sister" href="http://example.com/elsie" id="link1"&gt;</span><br><span class="line">&lt;span&gt;Elsie&lt;/span&gt;</span><br><span class="line">&lt;/a&gt;</span><br><span class="line">&lt;/p&gt;</span><br><span class="line">&lt;/body&gt;&lt;/html&gt;)]</span><br></pre></td></tr></table></figure><br><br><font color="#ff0000">next_sibling、previous_sibling、next_siblings、previous_siblings 属性应用示例：</font><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">html = <span class="string">"""</span></span><br><span class="line"><span class="string">&lt;html&gt;</span></span><br><span class="line"><span class="string">    &lt;body&gt;</span></span><br><span class="line"><span class="string">        &lt;p class="story"&gt;</span></span><br><span class="line"><span class="string">            Once upon a time there were three little sisters; and their names were</span></span><br><span class="line"><span class="string">            &lt;a href="http://example.com/elsie" class="sister" id="link1"&gt;</span></span><br><span class="line"><span class="string">                &lt;span&gt;Elsie&lt;/span&gt;</span></span><br><span class="line"><span class="string">            &lt;/a&gt;</span></span><br><span class="line"><span class="string">            Hello</span></span><br><span class="line"><span class="string">            &lt;a href="http://example.com/lacie" class="sister" id="link2"&gt;Lacie&lt;/a&gt; </span></span><br><span class="line"><span class="string">            and</span></span><br><span class="line"><span class="string">            &lt;a href="http://example.com/tillie" class="sister" id="link3"&gt;Tillie&lt;/a&gt;</span></span><br><span class="line"><span class="string">            and they lived at the bottom of a well.</span></span><br><span class="line"><span class="string">        &lt;/p&gt;</span></span><br><span class="line"><span class="string">    &lt;/body&gt;</span></span><br><span class="line"><span class="string">&lt;/html&gt;</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line">soup = BeautifulSoup(html, <span class="string">'lxml'</span>)</span><br><span class="line">print(<span class="string">'Next Sibling'</span>, soup.a.next_sibling)</span><br><span class="line">print(<span class="string">'Prev Sibling'</span>, soup.a.previous_sibling)</span><br><span class="line">print(<span class="string">'Next Siblings'</span>, list(enumerate(soup.a.next_siblings)))</span><br><span class="line">print(<span class="string">'Prev Siblings'</span>, list(enumerate(soup.a.previous_siblings)))</span><br></pre></td></tr></table></figure><p>next_sibling 和 previous_sibling 分别获取 a 节点的下一个和上一个兄弟元素，next_siblings 和 previous_siblings 则分别返回 a 节点后面和前面的兄弟节点，输出结果：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Next Sibling </span><br><span class="line">            Hello</span><br><span class="line">            </span><br><span class="line">Prev Sibling </span><br><span class="line">            Once upon a time there were three little sisters; <span class="keyword">and</span> their names were</span><br><span class="line">            </span><br><span class="line">Next Siblings [(0, '\n            Hello\n            '), (1, &lt;a class="sister" href="http://example.com/lacie" id="link2"&gt;Lacie&lt;/a&gt;), (2, ' \n            and\n            '), (3, &lt;a class="sister" href="http://example.com/tillie" id="link3"&gt;Tillie&lt;/a&gt;), (4, '\n            and they lived at the bottom of a well.\n        ')]</span><br><span class="line">Prev Siblings [(<span class="number">0</span>, <span class="string">'\n            Once upon a time there were three little sisters; and their names were\n            '</span>)]</span><br></pre></td></tr></table></figure><h1 id="【8-4】方法选择器"><a href="#【8-4】方法选择器" class="headerlink" title="【8.4】方法选择器"></a><font color="#ff0000">【8.4】方法选择器</font></h1><p>节点选择器直接调用节点的名称就可以选择节点元素，如果进行比较复杂的选择的话，方法选择器是一个不错的选择，它更灵活，常见的方法有 find_all、find 等，调用它们，直接传入相应的参数，就可以灵活查询了。</p><h2 id="【8-4-1】find-all-方法"><a href="#【8-4-1】find-all-方法" class="headerlink" title="【8.4.1】find_all() 方法"></a><font color="#ff0000">【8.4.1】find_all() 方法</font></h2><p>find_all 方法可以查询所有符合条件的元素，给它传入一些属性或文本来得到符合条件的元素。find_all 方法的 API：<code>find_all(name , attrs , recursive , text , **kwargs)</code><br>新建 soup.html：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>测试bs4<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    甄姬</span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>百里守约<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>李白<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    太乙真人</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"song"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>李清照<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>王安石<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>苏轼<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>柳宗元<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"http://www.song.com/"</span> <span class="attr">title</span>=<span class="string">"赵匡义"</span> <span class="attr">target</span>=<span class="string">"_self"</span>&gt;</span>宋朝是最强大的王朝，不是军队的强大，而是经济很强大，国民都很有钱。<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"http://www.baidu.com/meinv.jpg"</span> <span class="attr">alt</span>=<span class="string">""</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">""</span> <span class="attr">class</span>=<span class="string">"du"</span>&gt;</span>总为浮云能蔽日，长安不见使人愁<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"tang"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"http://www.baidu.com"</span> <span class="attr">title</span>=<span class="string">"qing"</span>&gt;</span>清明时节雨纷纷，路上行人欲断魂，借问酒家何处有，牧童遥指杏花村。<span class="tag">&lt;/<span class="name">a</span>&gt;</span> <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"http://www.163.com"</span> <span class="attr">title</span>=<span class="string">"qin"</span>&gt;</span>秦时明月汉时关，万里长征人未还，但使龙城飞将在，不教胡马度阴山。<span class="tag">&lt;/<span class="name">a</span>&gt;</span> <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"http://www.126.com"</span> <span class="attr">name</span>=<span class="string">"qi"</span>&gt;</span>岐王宅里寻常见，崔九堂前几度闻，正是江南好风景，落花时节又逢君。<span class="tag">&lt;/<span class="name">a</span>&gt;</span> <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"http://www.sina.com"</span> <span class="attr">class</span>=<span class="string">"du"</span>&gt;</span>杜甫<span class="tag">&lt;/<span class="name">a</span>&gt;</span> <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">b</span>&gt;</span>唐朝<span class="tag">&lt;/<span class="name">b</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">i</span>&gt;</span>宋朝<span class="tag">&lt;/<span class="name">i</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"http://www.haha.com"</span> <span class="attr">id</span>=<span class="string">"feng"</span>&gt;</span>凤凰台上凤凰游，凤去台空江自流，吴宫花草埋幽径，晋代衣冠成古丘。<span class="tag">&lt;/<span class="name">a</span>&gt;</span> <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>示例代码：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line"></span><br><span class="line">soup = BeautifulSoup(open(<span class="string">'soup.html'</span>, encoding=<span class="string">'utf8'</span>), <span class="string">'lxml'</span>)</span><br><span class="line">print(soup.find_all(<span class="string">'a'</span>), <span class="string">'\n'</span>)</span><br><span class="line">print(soup.find_all(<span class="string">'a'</span>)[<span class="number">1</span>], <span class="string">'\n'</span>)</span><br><span class="line">print(soup.find_all(<span class="string">'a'</span>)[<span class="number">1</span>].text, <span class="string">'\n'</span>)</span><br><span class="line">print(soup.find_all([<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'i'</span>]), <span class="string">'\n'</span>)</span><br><span class="line">print(soup.find_all(<span class="string">'a'</span>, limit=<span class="number">2</span>), <span class="string">'\n'</span>)</span><br><span class="line">print(soup.find_all(title=<span class="string">'qing'</span>), <span class="string">'\n'</span>)</span><br><span class="line">print(soup.find_all(attrs=&#123;<span class="string">'id'</span>: <span class="string">'feng'</span>&#125;), <span class="string">'\n'</span>)</span><br></pre></td></tr></table></figure></p><p>输出结果：<br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">[&lt;a href="http://www.song.com/" target="_self" title="赵匡义"&gt;宋朝是最强大的王朝，不是军队的强大，而是经济很强大，国民都很有钱。&lt;/a&gt;, &lt;a class="du" href=""&gt;总为浮云能蔽日，长安不见使人愁&lt;/a&gt;, &lt;a href="http://www.baidu.com" title="qing"&gt;清明时节雨纷纷，路上行人欲断魂，借问酒家何处有，牧童遥指杏花村。&lt;/a&gt;, &lt;a href="http://www.163.com" title="qin"&gt;秦时明月汉时关，万里长征人未还，但使龙城飞将在，不教胡马度阴山。&lt;/a&gt;, &lt;a href="http://www.126.com" name="qi"&gt;岐王宅里寻常见，崔九堂前几度闻，正是江南好风景，落花时节又逢君。&lt;/a&gt;, &lt;a class="du" href="http://www.sina.com"&gt;杜甫&lt;/a&gt;, &lt;a href="http://www.haha.com" id="feng"&gt;凤凰台上凤凰游，凤去台空江自流，吴宫花草埋幽径，晋代衣冠成古丘。&lt;/a&gt;] </span><br><span class="line"></span><br><span class="line">&lt;a class="du" href=""&gt;总为浮云能蔽日，长安不见使人愁&lt;/a&gt; </span><br><span class="line"></span><br><span class="line">总为浮云能蔽日，长安不见使人愁 </span><br><span class="line"></span><br><span class="line">[&lt;a href="http://www.song.com/" target="_self" title="赵匡义"&gt;宋朝是最强大的王朝，不是军队的强大，而是经济很强大，国民都很有钱。&lt;/a&gt;, &lt;a class="du" href=""&gt;总为浮云能蔽日，长安不见使人愁&lt;/a&gt;, &lt;a href="http://www.baidu.com" title="qing"&gt;清明时节雨纷纷，路上行人欲断魂，借问酒家何处有，牧童遥指杏花村。&lt;/a&gt;, &lt;a href="http://www.163.com" title="qin"&gt;秦时明月汉时关，万里长征人未还，但使龙城飞将在，不教胡马度阴山。&lt;/a&gt;, &lt;a href="http://www.126.com" name="qi"&gt;岐王宅里寻常见，崔九堂前几度闻，正是江南好风景，落花时节又逢君。&lt;/a&gt;, &lt;a class="du" href="http://www.sina.com"&gt;杜甫&lt;/a&gt;, &lt;b&gt;唐朝&lt;/b&gt;, &lt;i&gt;宋朝&lt;/i&gt;, &lt;a href="http://www.haha.com" id="feng"&gt;凤凰台上凤凰游，凤去台空江自流，吴宫花草埋幽径，晋代衣冠成古丘。&lt;/a&gt;] </span><br><span class="line"></span><br><span class="line">[&lt;a href="http://www.song.com/" target="_self" title="赵匡义"&gt;宋朝是最强大的王朝，不是军队的强大，而是经济很强大，国民都很有钱。&lt;/a&gt;, &lt;a class="du" href=""&gt;总为浮云能蔽日，长安不见使人愁&lt;/a&gt;] </span><br><span class="line"></span><br><span class="line">[&lt;a href="http://www.baidu.com" title="qing"&gt;清明时节雨纷纷，路上行人欲断魂，借问酒家何处有，牧童遥指杏花村。&lt;/a&gt;] </span><br><span class="line"></span><br><span class="line">[&lt;a href="http://www.haha.com" id="feng"&gt;凤凰台上凤凰游，凤去台空江自流，吴宫花草埋幽径，晋代衣冠成古丘。&lt;/a&gt;]</span><br></pre></td></tr></table></figure></p><h2 id="【8-4-2】find-方法"><a href="#【8-4-2】find-方法" class="headerlink" title="【8.4.2】find() 方法"></a><font color="#ff0000">【8.4.2】find() 方法</font></h2><p>find() 方法使用方法与 find_all() 方法相同，不同的是，find 方法返回的是单个元素，也就是第一个匹配的元素，而 find_all 返回的是所有匹配的元素组成的列表<br>特别的：</p><ul><li><p>find_parents 和 find_parent：前者返回所有祖先节点，后者返回直接父节点。</p></li><li><p>find_next_siblings 和 find_next_sibling：前者返回后面所有的兄弟节点，后者返回后面第一个兄弟节点。</p></li><li><p>find_previous_siblings 和 find_previous_sibling：前者返回前面所有的兄弟节点，后者返回前面第一个兄弟节点。</p></li><li><p>find_all_next 和 find_next：前者返回节点后所有符合条件的节点，后者返回第一个符合条件的节点。</p></li><li><p>find_all_previous 和 find_previous：前者返回节点前所有符合条件的节点，后者返回第一个符合条件的节点。</p></li></ul><h1 id="【8-5】CSS-选择器"><a href="#【8-5】CSS-选择器" class="headerlink" title="【8.5】CSS 选择器"></a><font color="#ff0000">【8.5】CSS 选择器</font></h1><p>使用 CSS 选择器，只需要调用 select 方法，传入相应的 CSS 选择器即可<br>新建 soup.html 文件：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"tang"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"http://www.baidu.com"</span> <span class="attr">title</span>=<span class="string">"qing"</span>&gt;</span>清明时节雨纷纷，路上行人欲断魂，借问酒家何处有，牧童遥指杏花村。<span class="tag">&lt;/<span class="name">a</span>&gt;</span> <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"http://www.163.com"</span> <span class="attr">title</span>=<span class="string">"qin"</span>&gt;</span>秦时明月汉时关，万里长征人未还，但使龙城飞将在，不教胡马度阴山。<span class="tag">&lt;/<span class="name">a</span>&gt;</span> <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"http://www.126.com"</span> <span class="attr">name</span>=<span class="string">"qi"</span>&gt;</span>岐王宅里寻常见，崔九堂前几度闻，正是江南好风景，落花时节又逢君。<span class="tag">&lt;/<span class="name">a</span>&gt;</span> <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"http://www.sina.com"</span> <span class="attr">class</span>=<span class="string">"du"</span>&gt;</span>杜甫<span class="tag">&lt;/<span class="name">a</span>&gt;</span> <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"http://www.haha.com"</span> <span class="attr">id</span>=<span class="string">"feng"</span>&gt;</span>凤凰台上凤凰游，凤去台空江自流，吴宫花草埋幽径，晋代衣冠成古丘。<span class="tag">&lt;/<span class="name">a</span>&gt;</span> <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>通过 CSS 选择器依次选择 class=”tang” 的 div 节点下的 a 节点、id 为 feng 的节点以及其 href 元素：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line"></span><br><span class="line">soup = BeautifulSoup(open(<span class="string">'soup.html'</span>, encoding=<span class="string">'utf8'</span>), <span class="string">'lxml'</span>)</span><br><span class="line">print(soup.select(<span class="string">'li'</span>), <span class="string">'\n'</span>)</span><br><span class="line">print(soup.select(<span class="string">'.tang &gt; ul &gt; li &gt; a'</span>)[<span class="number">2</span>], <span class="string">'\n'</span>)</span><br><span class="line">print(soup.select(<span class="string">'#feng'</span>)[<span class="number">0</span>].text, <span class="string">'\n'</span>)</span><br><span class="line">print(soup.select(<span class="string">'#feng'</span>)[<span class="number">0</span>][<span class="string">'href'</span>], <span class="string">'\n'</span>)</span><br></pre></td></tr></table></figure></p><p>输出结果：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[&lt;li&gt;&lt;a href="http://www.baidu.com" title="qing"&gt;清明时节雨纷纷，路上行人欲断魂，借问酒家何处有，牧童遥指杏花村。&lt;/a&gt; &lt;/li&gt;, &lt;li&gt;&lt;a href="http://www.163.com" title="qin"&gt;秦时明月汉时关，万里长征人未还，但使龙城飞将在，不教胡马度阴山。&lt;/a&gt; &lt;/li&gt;, &lt;li&gt;&lt;a href="http://www.126.com" name="qi"&gt;岐王宅里寻常见，崔九堂前几度闻，正是江南好风景，落花时节又逢君。&lt;/a&gt; &lt;/li&gt;, &lt;li&gt;&lt;a class="du" href="http://www.sina.com"&gt;杜甫&lt;/a&gt; &lt;/li&gt;, &lt;li&gt;&lt;a href="http://www.haha.com" id="feng"&gt;凤凰台上凤凰游，凤去台空江自流，吴宫花草埋幽径，晋代衣冠成古丘。&lt;/a&gt; &lt;/li&gt;] </span><br><span class="line"></span><br><span class="line">&lt;a href="http://www.126.com" name="qi"&gt;岐王宅里寻常见，崔九堂前几度闻，正是江南好风景，落花时节又逢君。&lt;/a&gt; </span><br><span class="line"></span><br><span class="line">凤凰台上凤凰游，凤去台空江自流，吴宫花草埋幽径，晋代衣冠成古丘。 </span><br><span class="line"></span><br><span class="line">http://www.haha.com</span><br></pre></td></tr></table></figure></p><p>附表：CSS 选择器，来源：<a href="https://www.w3school.com.cn/cssref/css_selectors.asp" target="_blank" rel="noopener">https://www.w3school.com.cn/cssref/css_selectors.asp</a></p><table><thead><tr><th>选择器</th><th>例子</th><th>例子描述</th><th>CSS</th></tr></thead><tbody><tr><td>.class</td><td>.intro</td><td>选择 class=”intro” 的所有元素</td><td>1</td></tr><tr><td>#id</td><td>#firstname</td><td>选择 id=”firstname” 的所有元素</td><td>1</td></tr><tr><td>*</td><td>*</td><td>选择所有元素</td><td>2</td></tr><tr><td>element</td><td>p</td><td>选择所有 <p> 元素</p></td><td>1</td></tr><tr><td>element,element</td><td>div,p</td><td>选择所有 <div> 元素和所有 <p> 元素</p></div></td><td>1</td></tr><tr><td>element element</td><td>div p</td><td>选择 <div> 元素内部的所有 <p> 元素</p></div></td><td>1</td></tr><tr><td>element&gt;element</td><td>div&gt;p</td><td>选择父元素为 <div> 元素的所有 <p> 元素</p></div></td><td>2</td></tr><tr><td>element+element</td><td>div+p</td><td>选择紧接在 <div> 元素之后的所有 <p> 元素</p></div></td><td>2</td></tr><tr><td>[attribute]</td><td>[target]</td><td>选择带有 target 属性所有元素</td><td>2</td></tr><tr><td>[attribute=value]</td><td>[target=_blank]</td><td>选择 target=”_blank” 的所有元素</td><td>2</td></tr><tr><td>[attribute~=value]</td><td>[title~=flower]</td><td>选择 title 属性包含单词 “flower” 的所有元素</td><td>2</td></tr><tr><td>[attribute</td><td>=value]</td><td>[lang</td><td>=en]</td><td>选择 lang 属性值以 “en” 开头的所有元素</td><td>2</td></tr><tr><td>:link</td><td>a:link</td><td>选择所有未被访问的链接</td><td>1</td></tr><tr><td>:visited</td><td>a:visited</td><td>选择所有已被访问的链接</td><td>1</td></tr><tr><td>:active</td><td>a:active</td><td>选择活动链接</td><td>1</td></tr><tr><td>:hover</td><td>a:hover</td><td>选择鼠标指针位于其上的链接</td><td>1</td></tr><tr><td>:focus</td><td>input:focus</td><td>选择获得焦点的 input 元素</td><td>2</td></tr><tr><td>:first-letter</td><td>p:first-letter</td><td>选择每个 <p> 元素的首字母</p></td><td>1</td></tr><tr><td>:first-line</td><td>p:first-line</td><td>选择每个 <p> 元素的首行</p></td><td>1</td></tr><tr><td>:first-child</td><td>p:first-child</td><td>选择属于父元素的第一个子元素的每个 <p> 元素</p></td><td>2</td></tr><tr><td>:before</td><td>p:before</td><td>在每个 <p> 元素的内容之前插入内容</p></td><td>2</td></tr><tr><td>:after</td><td>p:after</td><td>在每个 <p> 元素的内容之后插入内容</p></td><td>2</td></tr><tr><td>:lang(language)</td><td>p:lang(it)</td><td>选择带有以 “it” 开头的 lang 属性值的每个 <p> 元素</p></td><td>2</td></tr><tr><td>element1~element2</td><td>p~ul</td><td>选择前面有 <p> 元素的每个 <ul> 元素</ul></p></td><td>3</td></tr><tr><td>[attribute^=value]</td><td>a[src^=”https”]</td><td>选择其 src 属性值以 “https” 开头的每个 <a> 元素</a></td><td>3</td></tr><tr><td>[attribute$=value]</td><td>a[src$=”.pdf”]</td><td>选择其 src 属性以 “.pdf” 结尾的所有 <a> 元素</a></td><td>3</td></tr><tr><td>[attribute*=value]</td><td>a[src*=”abc”]</td><td>选择其 src 属性中包含 “abc” 子串的每个 <a> 元素</a></td><td>3</td></tr><tr><td>:first-of-type</td><td>p:first-of-type</td><td>选择属于其父元素的首个 <p> 元素的每个 </p><p> 元素</p></td><td>3</td></tr><tr><td>:last-of-type</td><td>p:last-of-type</td><td>选择属于其父元素的最后 <p> 元素的每个 </p><p> 元素</p></td><td>3</td></tr><tr><td>:only-of-type</td><td>p:only-of-type</td><td>选择属于其父元素唯一的 <p> 元素的每个 </p><p> 元素</p></td><td>3</td></tr><tr><td>:only-child</td><td>p:only-child</td><td>选择属于其父元素的唯一子元素的每个 <p> 元素</p></td><td>3</td></tr><tr><td>:nth-child(n)</td><td>p:nth-child(2)</td><td>选择属于其父元素的第二个子元素的每个 <p> 元素</p></td><td>3</td></tr><tr><td>:nth-last-child(n)</td><td>p:nth-last-child(2)</td><td>同上，从最后一个子元素开始计数</td><td>3</td></tr><tr><td>:nth-of-type(n)</td><td>p:nth-of-type(2)</td><td>选择属于其父元素第二个 <p> 元素的每个 </p><p> 元素</p></td><td>3</td></tr><tr><td>:nth-last-of-type(n)</td><td>p:nth-last-of-type(2)</td><td>同上，但是从最后一个子元素开始计数</td><td>3</td></tr><tr><td>:last-child</td><td>p:last-child</td><td>选择属于其父元素最后一个子元素每个 <p> 元素</p></td><td>3</td></tr><tr><td>:root</td><td>:root</td><td>选择文档的根元素</td><td>3</td></tr><tr><td>:empty</td><td>p:empty</td><td>选择没有子元素的每个 <p> 元素（包括文本节点）</p></td><td>3</td></tr><tr><td>:target</td><td>#news:target</td><td>选择当前活动的 #news 元素</td><td>3</td></tr><tr><td>:enabled</td><td>input:enabled</td><td>选择每个启用的 <input> 元素</td><td>3</td></tr><tr><td>:disabled</td><td>input:disabled</td><td>选择每个禁用的 <input> 元素</td><td>3</td></tr><tr><td>:checked</td><td>input:checked</td><td>选择每个被选中的 <input> 元素</td><td>3</td></tr><tr><td>:not(selector)</td><td>:not(p)</td><td>选择非 <p> 元素的每个元素</p></td><td>3</td></tr><tr><td>::selection</td><td>::selection</td><td>选择被用户选取的元素部分</td><td>3</td></tr></tbody></table><h1 id="【8-6】附表：Beautiful-Soup-库-soup-对象常用属性与方法"><a href="#【8-6】附表：Beautiful-Soup-库-soup-对象常用属性与方法" class="headerlink" title="【8.6】附表：Beautiful Soup 库 soup 对象常用属性与方法"></a><font color="#ff0000">【8.6】附表：Beautiful Soup 库 soup 对象常用属性与方法</font></h1><table><thead><tr><th>基本元素</th><th>说明</th><th>返回类型</th></tr></thead><tbody><tr><td>tag</td><td>soup.a</td><td>bs4.element.Tag</td></tr><tr><td>name</td><td>soup.a.name</td><td>str</td></tr><tr><td>attrs</td><td>soup.a.attrs</td><td>dict</td></tr><tr><td>contents</td><td>子节点</td><td>list</td></tr><tr><td>children</td><td>遍历子节点</td><td>list_iterator</td></tr><tr><td>descendants</td><td>遍历所有子孙节点</td><td>generator</td></tr><tr><td>parent</td><td>返回父亲标签</td><td>bs4.element.Tag</td></tr><tr><td>parents</td><td>上行遍历父辈标签</td><td>generator</td></tr><tr><td>prettify()</td><td>添加/n</td><td>str</td></tr><tr><td>find_all(name,attr)</td><td>soup.find_all(‘a’)/([‘a’,‘b’])/(True)/(‘p’,‘course’)/(id=‘link1’)/(string=‘python’)</td><td>bs4.element.ResultSet</td></tr><tr><td>find()</td><td>soup.find(‘a’)/返回第一个a标签</td><td>bs4.element.Tag</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> Python3 学习笔记 </category>
          
          <category> 爬虫学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 爬虫 </tag>
            
            <tag> Beautiful Soup </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python3 爬虫学习笔记 C07</title>
      <link href="/2019/08/25/A37-Python3-spider-C07/"/>
      <url>/2019/08/25/A37-Python3-spider-C07/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><blockquote><center><font color="#1BC3FB" size="4">Python3 爬虫学习笔记第七章 —— 【解析库 lxml】</font></center></blockquote><a id="more"></a><h1 id="【7-1】关于-lxml"><a href="#【7-1】关于-lxml" class="headerlink" title="【7.1】关于 lxml"></a><font color="#ff0000">【7.1】关于 lxml</font></h1><p> lxml 是 Python 的一个解析库，支持 HTML 和 XML 的解析，支持 XPath 解析方式，解析效率非常高，使用前需要用命令 <code>pip3 install lxml</code> 安装 lxml 库</p><h1 id="【7-2】使用-XPath"><a href="#【7-2】使用-XPath" class="headerlink" title="【7.2】使用  XPath"></a><font color="#ff0000">【7.2】使用  XPath</font></h1><p> XPath（XML Path Language）即 XML 路径语言， lxml 解析库使用的正是 XPath 语法，最初是用来搜寻 XML 文档的，是一门在 XML 文档中查找信息的语言，它同样适用于 HTML 文档的搜索</p><p>  XPath 常用规则</p><table><thead><tr><th style="text-align:center">表达式</th><th style="text-align:center">描述</th></tr></thead><tbody><tr><td style="text-align:center">nodename</td><td style="text-align:center">选取此节点的所有子节点</td></tr><tr><td style="text-align:center">/</td><td style="text-align:center">从当前节点选取直接子节点</td></tr><tr><td style="text-align:center">//</td><td style="text-align:center">从当前节点选取子孙节点</td></tr><tr><td style="text-align:center">.</td><td style="text-align:center">选取当前节点</td></tr><tr><td style="text-align:center">..</td><td style="text-align:center">选取当前节点的父节点</td></tr><tr><td style="text-align:center">@</td><td style="text-align:center">选取属性</td></tr><tr><td style="text-align:center">*</td><td style="text-align:center">通配符，选择所有元素节点与元素名</td></tr><tr><td style="text-align:center">@*</td><td style="text-align:center">选取所有属性</td></tr><tr><td style="text-align:center">[@attrib]</td><td style="text-align:center">选取具有给定属性的所有元素</td></tr><tr><td style="text-align:center">[@attrib=’value’]</td><td style="text-align:center">选取给定属性具有给定值的所有元素</td></tr><tr><td style="text-align:center">[tag]</td><td style="text-align:center">选取所有具有指定元素的直接子节点</td></tr><tr><td style="text-align:center">[tag=’text’]</td><td style="text-align:center">选取所有具有指定元素并且文本内容是text节点</td></tr></tbody></table><p> 浏览器插件 XPath Helper，在线验证 XPath，谷歌商店下载地址：<a href="https://chrome.google.com/webstore/detail/hgimnogjllphhhkhlmebbmlgjoejdpjl" target="_blank" rel="noopener">https://chrome.google.com/webstore/detail/hgimnogjllphhhkhlmebbmlgjoejdpjl</a></p><p> XPath 基本使用方法：首先使用代码 <code>from lxml import etree</code>导入库，然后将 HTML 文档变成一个对象，再调用对象的方法去查找指定的节点，方法有两种：<code>tree = etree.parse()</code> 为本地文件查找，<code>tree = etree.HTML()</code> 为网络文件查找，再使用语句 <code>tree.xpath()</code> 查找指定节点。</p><h1 id="【7-3】查找所有节点"><a href="#【7-3】查找所有节点" class="headerlink" title="【7.3】查找所有节点"></a><font color="#ff0000">【7.3】查找所有节点</font></h1><p> 新建一个 xpath.html 本地文件，内容如下：<br> <figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"> <span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>xpath测试<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"song"</span>&gt;</span></span><br><span class="line">    火药</span><br><span class="line">    <span class="tag">&lt;<span class="name">b</span>&gt;</span>指南针<span class="tag">&lt;/<span class="name">b</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">b</span>&gt;</span>印刷术<span class="tag">&lt;/<span class="name">b</span>&gt;</span></span><br><span class="line">    造纸术</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"tang"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"balove"</span>&gt;</span>停车坐爱枫林晚，霜叶红于二月花。<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span> <span class="attr">id</span>=<span class="string">"hua"</span>&gt;</span>商女不知亡国恨，隔江犹唱后庭花。<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"love"</span> <span class="attr">name</span>=<span class="string">"yang"</span>&gt;</span>一骑红尘妃子笑，无人知是荔枝来。<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span> <span class="attr">id</span>=<span class="string">"bei"</span>&gt;</span>葡萄美酒夜光杯，欲饮琵琶马上催。<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"http://www.baidu.com/"</span>&gt;</span>百度一下<span class="tag">&lt;/<span class="name">a</span>&gt;</span> <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ol</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"balucy"</span>&gt;</span>寻寻觅觅冷冷清清，凄凄惨惨戚戚。<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"lily"</span>&gt;</span>咋暖还寒时候，最难将息。<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"lilei"</span>&gt;</span>三杯两盏淡酒。<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>怎敌他晚来风急。<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>雁过也，正伤心，却是旧时相识。<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>爱情三十六计<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>什么是爱情<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ol</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>查找所有节点：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> lxml <span class="keyword">import</span> etree</span><br><span class="line"></span><br><span class="line">html = etree.parse(<span class="string">'./xpath.html'</span>)</span><br><span class="line">result = html.xpath(<span class="string">'//*'</span>)</span><br><span class="line">print(result)</span><br></pre></td></tr></table></figure></p><p>使用 <code>*</code> 代表匹配所有节点，整个 xpath.html 文件中的所有节点都会被获取到，返回形式是一个列表，每个元素是 Element 类型，其后跟了节点的名称，如 html、body、div、ul、li、a 等，所有节点都包含在列表中，输出结果如下：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[&lt;Element html at <span class="number">0x1a836a34508</span>&gt;, &lt;Element head at <span class="number">0x1a836a344c8</span>&gt;, &lt;Element meta at <span class="number">0x1a836a345c8</span>&gt;, &lt;Element title at <span class="number">0x1a836a34608</span>&gt;, &lt;Element body at <span class="number">0x1a836a34648</span>&gt;, &lt;Element div at <span class="number">0x1a836a346c8</span>&gt;, &lt;Element b at <span class="number">0x1a836a34708</span>&gt;, &lt;Element b at <span class="number">0x1a836a34748</span>&gt;, &lt;Element div at <span class="number">0x1a836a34788</span>&gt;, &lt;Element ul at <span class="number">0x1a836a34688</span>&gt;, &lt;Element li at <span class="number">0x1a836a347c8</span>&gt;, &lt;Element li at <span class="number">0x1a836a34808</span>&gt;, &lt;Element li at <span class="number">0x1a836a34848</span>&gt;, &lt;Element li at <span class="number">0x1a836a34888</span>&gt;, &lt;Element li at <span class="number">0x1a836a348c8</span>&gt;, &lt;Element a at <span class="number">0x1a836a34908</span>&gt;, &lt;Element ol at <span class="number">0x1a836a34948</span>&gt;, &lt;Element li at <span class="number">0x1a836a34988</span>&gt;, &lt;Element li at <span class="number">0x1a836a349c8</span>&gt;, &lt;Element li at <span class="number">0x1a836a34a08</span>&gt;, &lt;Element li at <span class="number">0x1a836a34a48</span>&gt;, &lt;Element li at <span class="number">0x1a836a34a88</span>&gt;, &lt;Element li at <span class="number">0x1a836a34ac8</span>&gt;, &lt;Element li at <span class="number">0x1a836a34b08</span>&gt;]</span><br></pre></td></tr></table></figure></p><h1 id="【7-4】查找子节点"><a href="#【7-4】查找子节点" class="headerlink" title="【7.4】查找子节点"></a><font color="#ff0000">【7.4】查找子节点</font></h1><p> 通过 <font color="#ff0000">/</font> 或 <font color="#ff0000">//</font> 即可查找元素的子节点或子孙节点：<br> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"> <span class="keyword">from</span> lxml <span class="keyword">import</span> etree</span><br><span class="line"></span><br><span class="line">html = etree.parse(<span class="string">'./xpath.html'</span>)</span><br><span class="line">result = html.xpath(<span class="string">'//ul/li'</span>)</span><br><span class="line">print(result)</span><br></pre></td></tr></table></figure></p><p>选择 ul 节点的所有<font color="#ff0000">直接</font> li 子节点：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[&lt;Element li at <span class="number">0x2a094d044c8</span>&gt;, &lt;Element li at <span class="number">0x2a094d045c8</span>&gt;, &lt;Element li at <span class="number">0x2a094d04608</span>&gt;, &lt;Element li at <span class="number">0x2a094d04648</span>&gt;, &lt;Element li at <span class="number">0x2a094d04688</span>&gt;]</span><br></pre></td></tr></table></figure></p><h1 id="【7-5】查找父节点"><a href="#【7-5】查找父节点" class="headerlink" title="【7.5】查找父节点"></a><font color="#ff0000">【7.5】查找父节点</font></h1><p> 知道了子节点，也可以用 <font color="#ff0000">..</font> 或者 <font color="#ff0000">parent::</font> 查找其父节点<br> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"> <span class="keyword">from</span> lxml <span class="keyword">import</span> etree</span><br><span class="line"></span><br><span class="line">html = etree.parse(<span class="string">'./xpath.html'</span>)</span><br><span class="line">result = html.xpath(<span class="string">'//ol/../@class'</span>)</span><br><span class="line">print(result)</span><br></pre></td></tr></table></figure></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> lxml <span class="keyword">import</span> etree</span><br><span class="line"></span><br><span class="line">html = etree.parse(<span class="string">'./xpath.html'</span>)</span><br><span class="line">result = html.xpath(<span class="string">'//ol/parent::*/@class'</span>)</span><br><span class="line">print(result)</span><br></pre></td></tr></table></figure><p>先查找到 ol 节点，随后获取其父节点以及其 class 属性：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[<span class="string">'tang'</span>]</span><br></pre></td></tr></table></figure></p><h1 id="【7-6】属性匹配"><a href="#【7-6】属性匹配" class="headerlink" title="【7.6】属性匹配"></a><font color="#ff0000">【7.6】属性匹配</font></h1><p> 有时候 HTML 包含多个相同名的节点，而节点的属性是不一样的，此时可以用 <font color="#ff0000">@</font> 符号进行属性过滤<br> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"> <span class="keyword">from</span> lxml <span class="keyword">import</span> etree</span><br><span class="line"></span><br><span class="line">html = etree.parse(<span class="string">'./xpath.html'</span>)</span><br><span class="line">result = html.xpath(<span class="string">'//li[@class="balucy"]'</span>)</span><br><span class="line">print(result)</span><br></pre></td></tr></table></figure></p><p>xpath.html 文件中，只有一个 class 为 balucy 的节点：<code>&lt;li class=&quot;balucy&quot;&gt;寻寻觅觅冷冷清清，凄凄惨惨戚戚。&lt;/li&gt;</code>，运行以上代码将返回一个该元素：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[&lt;Element li at <span class="number">0x16e53aa54c8</span>&gt;]</span><br></pre></td></tr></table></figure></p><h1 id="【7-7】文本获取"><a href="#【7-7】文本获取" class="headerlink" title="【7.7】文本获取"></a><font color="#ff0000">【7.7】文本获取</font></h1><p> 使用 text() 方法即可提取节点中的文本：<br> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"> <span class="keyword">from</span> lxml <span class="keyword">import</span> etree</span><br><span class="line"></span><br><span class="line">html = etree.parse(<span class="string">'./xpath.html'</span>)</span><br><span class="line">result = html.xpath(<span class="string">'//li[@class="balucy"]/text()'</span>)</span><br><span class="line">print(result)</span><br></pre></td></tr></table></figure></p><p>输出结果：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[<span class="string">'寻寻觅觅冷冷清清，凄凄惨惨戚戚。'</span>]</span><br></pre></td></tr></table></figure></p><p>再次观察 xpath.html 文件中的 <code>&lt;ol&gt;&lt;/ol&gt;</code>这一部分：<br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;ol&gt;</span><br><span class="line">    &lt;li class="balucy"&gt;寻寻觅觅冷冷清清，凄凄惨惨戚戚。&lt;/li&gt;</span><br><span class="line">    &lt;li class="lily"&gt;咋暖还寒时候，最难将息。&lt;/li&gt;</span><br><span class="line">    &lt;li class="lilei"&gt;三杯两盏淡酒。&lt;/li&gt;</span><br><span class="line">    &lt;li&gt;怎敌他晚来风急。&lt;/li&gt;</span><br><span class="line">    &lt;li&gt;雁过也，正伤心，却是旧时相识。&lt;/li&gt;</span><br><span class="line">    &lt;li&gt;爱情三十六计&lt;/li&gt;</span><br><span class="line">    &lt;li&gt;什么是爱情&lt;/li&gt;</span><br><span class="line">&lt;/ol&gt;</span><br></pre></td></tr></table></figure></p><p>如果我们想要提取 <code>&lt;li&gt;</code> 节点里面所有的文本，就可以使用 <code>html.xpath(&#39;//ol/li/text()&#39;)</code> 语句：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> lxml <span class="keyword">import</span> etree</span><br><span class="line"></span><br><span class="line">html = etree.parse(<span class="string">'./xpath.html'</span>)</span><br><span class="line">result = html.xpath(<span class="string">'//ol/li/text()'</span>)</span><br><span class="line">print(result)</span><br></pre></td></tr></table></figure></p><p>输出结果：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[<span class="string">'寻寻觅觅冷冷清清，凄凄惨惨戚戚。'</span>, <span class="string">'咋暖还寒时候，最难将息。'</span>, <span class="string">'三杯两盏淡酒。'</span>, <span class="string">'怎敌他晚来风急。'</span>, <span class="string">'雁过也，正伤心，却是旧时相识。'</span>, <span class="string">'爱情三十六计'</span>, <span class="string">'什么是爱情'</span>]</span><br></pre></td></tr></table></figure></p><p>同样还有另一种方法，使用 <code>html.xpath(&#39;//ol//text()&#39;)</code> 语句，<code>//</code> 将会选取所有子孙节点的文本，<code>&lt;ol&gt;</code> 和 <code>&lt;li&gt;</code> 节点下的换行符也将被提取出来：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> lxml <span class="keyword">import</span> etree</span><br><span class="line"></span><br><span class="line">html = etree.parse(<span class="string">'./xpath.html'</span>)</span><br><span class="line">result = html.xpath(<span class="string">'//ol//text()'</span>)</span><br><span class="line">print(result)</span><br></pre></td></tr></table></figure></p><p>输出结果：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[<span class="string">'\n        '</span>, <span class="string">'寻寻觅觅冷冷清清，凄凄惨惨戚戚。'</span>, <span class="string">'\n        '</span>, <span class="string">'咋暖还寒时候，最难将息。'</span>, <span class="string">'\n        '</span>, <span class="string">'三杯两盏淡酒。'</span>, <span class="string">'\n        '</span>, <span class="string">'怎敌他晚来风急。'</span>, <span class="string">'\n        '</span>, <span class="string">'雁过也，正伤心，却是旧时相识。'</span>, <span class="string">'\n        '</span>, <span class="string">'爱情三十六计'</span>, <span class="string">'\n        '</span>, <span class="string">'什么是爱情'</span>, <span class="string">'\n    '</span>]</span><br></pre></td></tr></table></figure></p><h1 id="【7-8】属性获取"><a href="#【7-8】属性获取" class="headerlink" title="【7.8】属性获取"></a><font color="#ff0000">【7.8】属性获取</font></h1><p> 与属性匹配一样，属性获取仍然使用 <font color="#ff0000">@</font>：<br> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"> <span class="keyword">from</span> lxml <span class="keyword">import</span> etree</span><br><span class="line"></span><br><span class="line">html = etree.parse(<span class="string">'./xpath.html'</span>)</span><br><span class="line">result = html.xpath(<span class="string">'//ul/li[5]/a/@href'</span>)</span><br><span class="line">print(result)</span><br></pre></td></tr></table></figure></p><p> 获取 href 属性：<br> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[<span class="string">'http://www.baidu.com/'</span>]</span><br></pre></td></tr></table></figure></p><h1 id="【7-9】一个属性包含多个值的匹配"><a href="#【7-9】一个属性包含多个值的匹配" class="headerlink" title="【7.9】一个属性包含多个值的匹配"></a><font color="#ff0000">【7.9】一个属性包含多个值的匹配</font></h1><p>某个节点的某个属性可能有多个值，例如：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"li li-first"</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"link.html"</span>&gt;</span>first item<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>li 节点的 class 属性有 li 和 li-first 两个值，如果使用 <code>html.xpath(&#39;//li[@class=&quot;li&quot;]</code> 语句，将无法成功匹配，这时就需要使用<font color="#ff0000"> contains</font> 方法了，第一个参数传入属性名称，第二个参数传入属性值，只要此属性包含所传入的属性值，就可以完成匹配了</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> lxml <span class="keyword">import</span> etree</span><br><span class="line">text = <span class="string">'''  </span></span><br><span class="line"><span class="string">&lt;li class="li li-first"&gt;&lt;a href="link.html"&gt;first item&lt;/a&gt;&lt;/li&gt;  </span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line">html = etree.HTML(text)</span><br><span class="line">result = html.xpath(<span class="string">'//li[contains(@class, "li")]/a/text()'</span>)</span><br><span class="line">print(result)</span><br></pre></td></tr></table></figure><p>输出结果：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[<span class="string">'first item'</span>]</span><br></pre></td></tr></table></figure></p><h1 id="【7-10】多个属性匹配一个节点"><a href="#【7-10】多个属性匹配一个节点" class="headerlink" title="【7.10】多个属性匹配一个节点"></a><font color="#ff0000">【7.10】多个属性匹配一个节点</font></h1><p>XPath 还可以根据多个属性来确定一个节点，这时就需要同时匹配多个属性。此时可以使用运算符 and 来连接：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> lxml <span class="keyword">import</span> etree</span><br><span class="line">text = <span class="string">'''  </span></span><br><span class="line"><span class="string">&lt;li class="li" name="item"&gt;&lt;a href="link.html"&gt;first item&lt;/a&gt;&lt;/li&gt;</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line">html = etree.HTML(text)</span><br><span class="line">result = html.xpath(<span class="string">'//li[@class="li" and @name="item"]/a/text()'</span>)</span><br><span class="line">print(result)</span><br></pre></td></tr></table></figure></p><p>输出结果：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[<span class="string">'first item'</span>]</span><br></pre></td></tr></table></figure></p><p>示例中运用了运算符 and 来连接，此外常见的运算符如下：</p><table><thead><tr><th>运算符</th><th>描述</th><th>实例</th><th>返回值</th></tr></thead><tbody><tr><td>or</td><td>或</td><td>age=19 or age=20</td><td>如果 age 是 19 或者 20，则返回 true。如果 age 是其他值，则返回 false</td></tr><tr><td>and</td><td>与</td><td>age&gt;19 and age&lt;21</td><td>如果 age 大于 19 且小于 21，则返回 true。如果 age 是其他值，则返回 false</td></tr><tr><td>mod</td><td>计算除法的余数</td><td>5 mod 2</td><td>1</td></tr><tr><td>&#124;</td><td>计算两个节点集</td><td>//book &#124; //cd</td><td>返回所有拥有 book 和 cd 元素的节点集</td></tr><tr><td>+</td><td>加法</td><td>10 + 5</td><td>15</td></tr><tr><td>-</td><td>减法</td><td>10 - 5</td><td>5</td></tr><tr><td>*</td><td>乘法</td><td>10 * 5</td><td>50</td></tr><tr><td>div</td><td>除法</td><td>10 div 5</td><td>2</td></tr><tr><td>=</td><td>等于</td><td>age=19</td><td>如果 age 是 19，则返回 true。如果 age 不是 19，则返回 false</td></tr><tr><td>!=</td><td>不等于</td><td>age!=19</td><td>如果 age 不是 19，则返回 true。如果 age 是 19，则返回 false</td></tr><tr><td>&lt;</td><td>小于</td><td>age&lt;19</td><td>如果 age 小于 19，则返回 true。如果 age 不小于 19，则返回 false</td></tr><tr><td>&lt;=</td><td>小于或等于</td><td>age&lt;=19</td><td>如果 age 小于等于 19，则返回 true。如果 age 大于 19，则返回 false</td></tr><tr><td>&gt;</td><td>大于</td><td>age&gt;19</td><td>如果 age 大于 19，则返回 true。如果 age 不大于 19，则返回 false</td></tr><tr><td>&gt;=</td><td>大于或等于</td><td>age&gt;=19</td><td>如果 age 大于等于 19，则返回 true。如果 age 小于 19，则返回 false</td></tr></tbody></table><h1 id="【7-11】按顺序选择节点"><a href="#【7-11】按顺序选择节点" class="headerlink" title="【7.11】按顺序选择节点"></a><font color="#ff0000">【7.11】按顺序选择节点</font></h1><p>某些属性可能同时匹配了多个节点，如果要选择其中几个节点，可以利用中括号传入索引的方法获取特定次序的节点<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> lxml <span class="keyword">import</span> etree</span><br><span class="line"></span><br><span class="line">text = <span class="string">'''</span></span><br><span class="line"><span class="string">&lt;div&gt;</span></span><br><span class="line"><span class="string">    &lt;ul&gt;</span></span><br><span class="line"><span class="string">         &lt;li class="item-0"&gt;&lt;a href="link1.html"&gt;first item&lt;/a&gt;&lt;/li&gt;</span></span><br><span class="line"><span class="string">         &lt;li class="item-1"&gt;&lt;a href="link2.html"&gt;second item&lt;/a&gt;&lt;/li&gt;</span></span><br><span class="line"><span class="string">         &lt;li class="item-inactive"&gt;&lt;a href="link3.html"&gt;third item&lt;/a&gt;&lt;/li&gt;</span></span><br><span class="line"><span class="string">         &lt;li class="item-1"&gt;&lt;a href="link4.html"&gt;fourth item&lt;/a&gt;&lt;/li&gt;</span></span><br><span class="line"><span class="string">         &lt;li class="item-0"&gt;&lt;a href="link5.html"&gt;fifth item&lt;/a&gt;</span></span><br><span class="line"><span class="string">    &lt;/ul&gt;</span></span><br><span class="line"><span class="string"> &lt;/div&gt;</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line">html = etree.HTML(text)</span><br><span class="line">result = html.xpath(<span class="string">'//li[1]/a/text()'</span>)</span><br><span class="line">print(result)</span><br><span class="line">result = html.xpath(<span class="string">'//li[last()]/a/text()'</span>)</span><br><span class="line">print(result)</span><br><span class="line">result = html.xpath(<span class="string">'//li[position()&lt;3]/a/text()'</span>)</span><br><span class="line">print(result)</span><br><span class="line">result = html.xpath(<span class="string">'//li[last()-2]/a/text()'</span>)</span><br><span class="line">print(result)</span><br></pre></td></tr></table></figure></p><ul><li>li[1]：选取第一个 li 节点；</li><li>li[last()]：选取最后一个 li 节点；</li><li>position()&lt;3：选取位置小于 3 的 li 节点；</li><li>li[last()-2]：选取倒数第三个 li 节点</li></ul><p>输出结果：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[<span class="string">'first item'</span>]</span><br><span class="line">[<span class="string">'fifth item'</span>]</span><br><span class="line">[<span class="string">'first item'</span>, <span class="string">'second item'</span>]</span><br><span class="line">[<span class="string">'third item'</span>]</span><br></pre></td></tr></table></figure></p><h1 id="【7-12】节点轴选择"><a href="#【7-12】节点轴选择" class="headerlink" title="【7.12】节点轴选择"></a><font color="#ff0000">【7.12】节点轴选择</font></h1><p>节点轴选择：获取子元素、兄弟元素、父元素、祖先元素等<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> lxml <span class="keyword">import</span> etree</span><br><span class="line"></span><br><span class="line">text = <span class="string">'''</span></span><br><span class="line"><span class="string">&lt;div&gt;</span></span><br><span class="line"><span class="string">    &lt;ul&gt;</span></span><br><span class="line"><span class="string">         &lt;li class="item-0"&gt;&lt;a href="link1.html"&gt;&lt;span&gt;first item&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;</span></span><br><span class="line"><span class="string">         &lt;li class="item-1"&gt;&lt;a href="link2.html"&gt;second item&lt;/a&gt;&lt;/li&gt;</span></span><br><span class="line"><span class="string">         &lt;li class="item-inactive"&gt;&lt;a href="link3.html"&gt;third item&lt;/a&gt;&lt;/li&gt;</span></span><br><span class="line"><span class="string">         &lt;li class="item-1"&gt;&lt;a href="link4.html"&gt;fourth item&lt;/a&gt;&lt;/li&gt;</span></span><br><span class="line"><span class="string">         &lt;li class="item-0"&gt;&lt;a href="link5.html"&gt;fifth item&lt;/a&gt;</span></span><br><span class="line"><span class="string">     &lt;/ul&gt;</span></span><br><span class="line"><span class="string"> &lt;/div&gt;</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line">html = etree.HTML(text)</span><br><span class="line">result = html.xpath(<span class="string">'//li[1]/ancestor::*'</span>)</span><br><span class="line">print(result)</span><br><span class="line">result = html.xpath(<span class="string">'//li[1]/ancestor::div'</span>)</span><br><span class="line">print(result)</span><br><span class="line">result = html.xpath(<span class="string">'//li[1]/attribute::*'</span>)</span><br><span class="line">print(result)</span><br><span class="line">result = html.xpath(<span class="string">'//li[1]/child::a[@href="link1.html"]'</span>)</span><br><span class="line">print(result)</span><br><span class="line">result = html.xpath(<span class="string">'//li[1]/descendant::span'</span>)</span><br><span class="line">print(result)</span><br><span class="line">result = html.xpath(<span class="string">'//li[1]/following::*[2]'</span>)</span><br><span class="line">print(result)</span><br><span class="line">result = html.xpath(<span class="string">'//li[1]/following-sibling::*'</span>)</span><br><span class="line">print(result)</span><br></pre></td></tr></table></figure></p><p>输出结果：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[&lt;Element html at <span class="number">0x1d3749e9548</span>&gt;, &lt;Element body at <span class="number">0x1d3749e94c8</span>&gt;, &lt;Element div at <span class="number">0x1d3749e9488</span>&gt;, &lt;Element ul at <span class="number">0x1d3749e9588</span>&gt;]</span><br><span class="line">[&lt;Element div at <span class="number">0x1d3749e9488</span>&gt;]</span><br><span class="line">[<span class="string">'item-0'</span>]</span><br><span class="line">[&lt;Element a at <span class="number">0x1d3749e9588</span>&gt;]</span><br><span class="line">[&lt;Element span at <span class="number">0x1d3749e9488</span>&gt;]</span><br><span class="line">[&lt;Element a at <span class="number">0x1d3749e9588</span>&gt;]</span><br><span class="line">[&lt;Element li at <span class="number">0x1d3749e94c8</span>&gt;, &lt;Element li at <span class="number">0x1d3749e95c8</span>&gt;, &lt;Element li at <span class="number">0x1d3749e9608</span>&gt;, &lt;Element li at <span class="number">0x1d3749e9648</span>&gt;]</span><br></pre></td></tr></table></figure></p><p>基本语法：轴名称::节点测试[谓语]</p><p>轴名称对应的结果：</p><table><thead><tr><th>轴名称</th><th>结果</th></tr></thead><tbody><tr><td>ancestor</td><td>选取当前节点的所有先辈（父、祖父等）</td></tr><tr><td>ancestor-or-self</td><td>选取当前节点的所有先辈（父、祖父等）以及当前节点本身</td></tr><tr><td>attribute</td><td>选取当前节点的所有属性</td></tr><tr><td>child</td><td>选取当前节点的所有子元素</td></tr><tr><td>descendant</td><td>选取当前节点的所有后代元素（子、孙等）</td></tr><tr><td>descendant-or-self</td><td>选取当前节点的所有后代元素（子、孙等）以及当前节点本身</td></tr><tr><td>following</td><td>选取文档中当前节点的结束标签之后的所有节点</td></tr><tr><td>namespace</td><td>选取当前节点的所有命名空间节点</td></tr><tr><td>parent</td><td>选取当前节点的父节点</td></tr><tr><td>preceding</td><td>选取文档中当前节点的开始标签之前的所有节点</td></tr><tr><td>preceding-sibling</td><td>选取当前节点之前的所有同级节点</td></tr><tr><td>self</td><td>选取当前节点</td></tr></tbody></table><p>实例：</p><table><thead><tr><th>例子</th><th>结果</th></tr></thead><tbody><tr><td>child::book</td><td>选取所有属于当前节点的子元素的 book 节点</td></tr><tr><td>attribute::lang</td><td>选取当前节点的 lang 属性</td></tr><tr><td>child::*</td><td>选取当前节点的所有子元素</td></tr><tr><td>attribute::*</td><td>选取当前节点的所有属性</td></tr><tr><td>child::text()</td><td>选取当前节点的所有文本子节点</td></tr><tr><td>child::node()</td><td>选取当前节点的所有子节点</td></tr><tr><td>descendant::book</td><td>选取当前节点的所有 book 后代</td></tr><tr><td>ancestor::book</td><td>选择当前节点的所有 book 先辈</td></tr><tr><td>ancestor-or-self::book</td><td>选取当前节点的所有 book 先辈以及当前节点（如果此节点是 book 节点）</td></tr><tr><td>child::*/child::price</td><td>选取当前节点的所有 price 孙节点</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> Python3 学习笔记 </category>
          
          <category> 爬虫学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 爬虫 </tag>
            
            <tag> lxml </tag>
            
            <tag> XPath </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python3 爬虫学习笔记 C06</title>
      <link href="/2019/08/24/A36-Python3-spider-C06/"/>
      <url>/2019/08/24/A36-Python3-spider-C06/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><blockquote><center><font color="#1BC3FB" size="4">Python3 爬虫学习笔记第六章 —— 【正则表达式】</font></center></blockquote><a id="more"></a><h1 id="【6-1】关于正则表达式"><a href="#【6-1】关于正则表达式" class="headerlink" title="【6.1】关于正则表达式"></a><font color="#ff0000">【6.1】关于正则表达式</font></h1><p>正则表达式是对字符串操作的一种逻辑公式，用定义好的特定字符和这些特定字符的组合组成一个规则字符串，这个规则字符串原来表达对字符串的一种过滤逻辑，从而实现字符串的检索、替换、匹配验证等。Python 的 re 库提供了整个正则表达式的实现，包含五种方法：<font color="#ff0000">match、search、findall、sub、compile</font><br>常用的匹配规则：</p><table><thead><tr><th>模式</th><th>描述</th></tr></thead><tbody><tr><td>\w</td><td>匹配字母、数字及下划线</td></tr><tr><td>\W</td><td>匹配不是字母、数字及下划线的字符</td></tr><tr><td>\s</td><td>匹配任意空白字符，等价于 [\t\n\r\f]</td></tr><tr><td>\S</td><td>匹配任意非空字符</td></tr><tr><td>\d</td><td>匹配任意数字，等价于 [0-9]</td></tr><tr><td>\D</td><td>匹配任意非数字的字符</td></tr><tr><td>\A</td><td>匹配字符串开头</td></tr><tr><td>\z</td><td>匹配字符串结尾，如果存在换行，同时还会匹配换行符</td></tr><tr><td>\Z</td><td>匹配字符串结尾，如果存在换行，只匹配到换行前的结束字符串</td></tr><tr><td>\G</td><td>匹配最后匹配完成的位置</td></tr><tr><td>\n</td><td>匹配一个换行符</td></tr><tr><td>\t</td><td>匹配一个制表符</td></tr><tr><td>^</td><td>匹配一行字符串的开头</td></tr><tr><td>$</td><td>匹配一行字符串的结尾</td></tr><tr><td>.</td><td>匹配任意字符，除了换行符，当 re.DOTALL 标记被指定时，则可以匹配包括换行符的任意字符</td></tr><tr><td>[…]</td><td>用来表示一组字符，单独列出，比如 [amk] 匹配 a、m 或 k</td></tr><tr><td>[^…]</td><td>不在 [] 中的字符，比如  匹配除了 a、b、c 之外的字符</td></tr><tr><td>*</td><td>匹配 0 个或多个表达式</td></tr><tr><td>+</td><td>匹配 1 个或多个表达式</td></tr><tr><td>?</td><td>匹配 0 个或 1 个前面的正则表达式定义的片段，非贪婪方式</td></tr><tr><td>{n}</td><td>精确匹配 n 个前面的表达式</td></tr><tr><td>{n, m}</td><td>匹配 n 到 m 次由前面正则表达式定义的片段，贪婪方式</td></tr><tr><td>a\</td><td>b</td><td>匹配 a 或 b</td></tr><tr><td>( )</td><td>匹配括号内的表达式，也表示一个组</td></tr></tbody></table><h1 id="【6-2】re-match-方法"><a href="#【6-2】re-match-方法" class="headerlink" title="【6.2】re.match 方法"></a><font color="#ff0000">【6.2】re.match 方法</font></h1><p>match() 方法会尝试从字符串的起始位置匹配正则表达式，如果匹配，就返回匹配成功的结果；如果不匹配，就返回 None，在 match() 方法中，第一个参数传入正则表达式，第二个参数传入要匹配的字符串。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line">content = <span class="string">'This is a Demo_123 4567_I Love China'</span></span><br><span class="line">print(len(content))</span><br><span class="line">result = re.match(<span class="string">'^This\s\w\w\s\w\s\w&#123;5&#125;\d&#123;3&#125;\s\w&#123;6&#125;'</span>, content)</span><br><span class="line">print(result)</span><br><span class="line">print(result.group())</span><br><span class="line">print(result.span())</span><br></pre></td></tr></table></figure></p><p>输出结果：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">36</span></span><br><span class="line">&lt;_sre.SRE_Match object; span=(<span class="number">0</span>, <span class="number">25</span>), match=<span class="string">'This is a Demo_123 4567_I'</span>&gt;</span><br><span class="line">This <span class="keyword">is</span> a Demo_123 <span class="number">4567</span>_I</span><br><span class="line">(<span class="number">0</span>, <span class="number">25</span>)</span><br></pre></td></tr></table></figure></p><p>打印 result 结果是 SRE_Match 对象，表明匹配成功。SRE_Match 对象有两种方法：<font color="#ff0000">group()</font> 方法可以输出匹配到的内容；<font color="#ff0000">span()</font> 方法可以输出匹配的范围。</p><h2 id="【6-2-1】提取内容"><a href="#【6-2-1】提取内容" class="headerlink" title="【6.2.1】提取内容"></a><font color="#ff0000">【6.2.1】提取内容</font></h2><p>使用括号将想提取的子字符串括起来。括号实际上标记了一个子表达式的开始和结束位置，被标记的每个子表达式会依次对应每一个分组，调用 <font color="#ff0000">group()</font> 方法传入分组的索引即可获取提取的结果。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line">content = <span class="string">'This is a Demo_123 4567_I Love China'</span></span><br><span class="line">result = re.match(<span class="string">'^This\s\w\w\s\w\s(\w&#123;5&#125;)\d&#123;3&#125;\s\w&#123;6&#125;'</span>, content)</span><br><span class="line">print(result)</span><br><span class="line">print(result.group())</span><br><span class="line">print(result.group(<span class="number">1</span>))</span><br><span class="line">print(result.span())</span><br></pre></td></tr></table></figure></p><p>输出结果：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;_sre.SRE_Match object; span=(<span class="number">0</span>, <span class="number">25</span>), match=<span class="string">'This is a Demo_123 4567_I'</span>&gt;</span><br><span class="line">This <span class="keyword">is</span> a Demo_123 <span class="number">4567</span>_I</span><br><span class="line">Demo_</span><br><span class="line">(<span class="number">0</span>, <span class="number">25</span>)</span><br></pre></td></tr></table></figure></p><h2 id="【6-2-2】通用匹配"><a href="#【6-2-2】通用匹配" class="headerlink" title="【6.2.2】通用匹配"></a><font color="#ff0000">【6.2.2】通用匹配</font></h2><p>如果每个字符都用都用一个符号来匹配的话就显得比较麻烦，可以用 <code>.*</code>来匹配，<code>.</code> 可以匹配除换行符外的任意字符，<code>*</code> 代表匹配前面的字符无限次。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line">content = <span class="string">'This is a Demo_123 4567_I Love China'</span></span><br><span class="line">result = re.match(<span class="string">'^This.*China$'</span>, content)</span><br><span class="line">print(result)</span><br><span class="line">print(result.group())</span><br><span class="line">print(result.span())</span><br></pre></td></tr></table></figure></p><p>输出结果：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;_sre.SRE_Match object; span=(<span class="number">0</span>, <span class="number">36</span>), match=<span class="string">'This is a Demo_123 4567_I Love China'</span>&gt;</span><br><span class="line">This <span class="keyword">is</span> a Demo_123 <span class="number">4567</span>_I Love China</span><br><span class="line">(<span class="number">0</span>, <span class="number">36</span>)</span><br></pre></td></tr></table></figure></p><h2 id="【6-2-3】贪婪匹配"><a href="#【6-2-3】贪婪匹配" class="headerlink" title="【6.2.3】贪婪匹配"></a><font color="#ff0000">【6.2.3】贪婪匹配</font></h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line">content = <span class="string">'This is a Demo_1234567_I Love China'</span></span><br><span class="line">result = re.match(<span class="string">'^This.*(\d+).*China$'</span>, content)</span><br><span class="line">print(result)</span><br><span class="line">print(result.group())</span><br><span class="line">print(result.group(<span class="number">1</span>))</span><br><span class="line">print(result.span())</span><br></pre></td></tr></table></figure><p>输出结果：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;_sre.SRE_Match object; span=(<span class="number">0</span>, <span class="number">35</span>), match=<span class="string">'This is a Demo_1234567_I Love China'</span>&gt;</span><br><span class="line">This <span class="keyword">is</span> a Demo_1234567_I Love China</span><br><span class="line"><span class="number">7</span></span><br><span class="line">(<span class="number">0</span>, <span class="number">35</span>)</span><br></pre></td></tr></table></figure></p><font color="#ff0000"><code>.*</code> 为贪婪匹配，会匹配尽可能多的字符，所以 \d+ 只会匹配到最后一个数字，而不是所有的数字</font><h2 id="【6-2-4】非贪婪匹配"><a href="#【6-2-4】非贪婪匹配" class="headerlink" title="【6.2.4】非贪婪匹配"></a><font color="#ff0000">【6.2.4】非贪婪匹配</font></h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line">content = <span class="string">'This is a Demo_1234567_I Love China'</span></span><br><span class="line">result = re.match(<span class="string">'^This.*?(\d+).*China$'</span>, content)</span><br><span class="line">print(result)</span><br><span class="line">print(result.group())</span><br><span class="line">print(result.group(<span class="number">1</span>))</span><br><span class="line">print(result.span())</span><br></pre></td></tr></table></figure><p>输出结果：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;_sre.SRE_Match object; span=(<span class="number">0</span>, <span class="number">35</span>), match=<span class="string">'This is a Demo_1234567_I Love China'</span>&gt;</span><br><span class="line">This <span class="keyword">is</span> a Demo_1234567_I Love China</span><br><span class="line"><span class="number">1234567</span></span><br><span class="line">(<span class="number">0</span>, <span class="number">35</span>)</span><br></pre></td></tr></table></figure></p><font color="#ff0000"><code>.*?</code> 为非贪婪匹配，会匹配尽可能少的字符，所以 \d+ 会匹配到所有的数字</font><h2 id="【6-2-5】转义匹配"><a href="#【6-2-5】转义匹配" class="headerlink" title="【6.2.5】转义匹配"></a><font color="#ff0000">【6.2.5】转义匹配</font></h2><p>当遇到用于正则匹配模式的特殊字符时，在前面加反斜线转义一下即可。例如 <code>.</code> 可以用 <code>\.</code> 来匹配：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line">content = <span class="string">'(博客)www.itrhx.com'</span></span><br><span class="line">result = re.match(<span class="string">'\(博客\)www\.itrhx\.com'</span>, content)</span><br><span class="line">print(result)</span><br><span class="line">print(result.group())</span><br></pre></td></tr></table></figure></p><p>输出结果：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;_sre.SRE_Match object; span=(<span class="number">0</span>, <span class="number">17</span>), match=<span class="string">'(博客)www.itrhx.com'</span>&gt;</span><br><span class="line">(博客)www.itrhx.com</span><br></pre></td></tr></table></figure></p><h2 id="【6-2-6】修饰符"><a href="#【6-2-6】修饰符" class="headerlink" title="【6.2.6】修饰符"></a><font color="#ff0000">【6.2.6】修饰符</font></h2><p>修饰符用来解决换行、大小写等问题，较为常用的有 re.S 和 re.I。</p><table><thead><tr><th style="text-align:center">修饰符</th><th style="text-align:center">描述</th></tr></thead><tbody><tr><td style="text-align:center">re.S</td><td style="text-align:center">使 <code>.</code> 匹配包括换行在内的所有字符</td></tr><tr><td style="text-align:center">re.I</td><td style="text-align:center">使匹配对大小写不敏感</td></tr><tr><td style="text-align:center">re.L</td><td style="text-align:center">做本地化识别（locale-aware）匹配</td></tr><tr><td style="text-align:center">re.M</td><td style="text-align:center">多行匹配，影响 <code>^</code> 和 <code>$</code></td></tr><tr><td style="text-align:center">re.U</td><td style="text-align:center">根据 Unicode 字符集解析字符。这个标志影响 <code>\w</code>、<code>\W</code>、<code>\b</code> 和 <code>\B</code></td></tr><tr><td style="text-align:center">re.X</td><td style="text-align:center">该标志通过给予你更灵活的格式以便你将正则表达式写得更易于理解</td></tr></tbody></table><p>示例：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line">content = <span class="string">'''This is a Demo_1234567</span></span><br><span class="line"><span class="string">          _I Love China'''</span></span><br><span class="line">result = re.match(<span class="string">'^This.*?(\d+).*China$'</span>, content)</span><br><span class="line">print(result)</span><br><span class="line">print(result.group())</span><br><span class="line">print(result.group(<span class="number">1</span>))</span><br><span class="line">print(result.span())</span><br></pre></td></tr></table></figure></p><p>示例中 content 字段进行了换行处理，如果没有修饰符，就会报错：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Traceback (most recent call last):</span><br><span class="line"><span class="keyword">None</span></span><br><span class="line">  File <span class="string">"F:/PycharmProjects/Python3爬虫/test.py"</span>, line <span class="number">7</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">    print(result.group())</span><br><span class="line">AttributeError: <span class="string">'NoneType'</span> object has no attribute <span class="string">'group'</span></span><br></pre></td></tr></table></figure></p><p>添加 re.S 修饰符后即可匹配成功：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line">content = <span class="string">'''This is a Demo_1234567</span></span><br><span class="line"><span class="string">          _I Love China'''</span></span><br><span class="line">result = re.match(<span class="string">'^This.*?(\d+).*China$'</span>, content, re.S)</span><br><span class="line">print(result)</span><br><span class="line">print(result.group())</span><br><span class="line">print(result.group(<span class="number">1</span>))</span><br><span class="line">print(result.span())</span><br></pre></td></tr></table></figure></p><p>输出结果：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;_sre.SRE_Match object; span=(<span class="number">0</span>, <span class="number">46</span>), match=<span class="string">'This is a Demo_1234567\n          _I Love China'</span>&gt;</span><br><span class="line">This <span class="keyword">is</span> a Demo_1234567</span><br><span class="line">          _I Love China</span><br><span class="line"><span class="number">1234567</span></span><br><span class="line">(<span class="number">0</span>, <span class="number">46</span>)</span><br></pre></td></tr></table></figure></p><h1 id="【6-3】re-search-方法"><a href="#【6-3】re-search-方法" class="headerlink" title="【6.3】re.search 方法"></a><font color="#ff0000">【6.3】re.search 方法</font></h1><p>match() 方法只能从字符串的开头开始匹配，一旦开头不匹配，那么整个匹配就失败了，match() 方法更适合用来检测某个字符串是否符合某个正则表达式的规则，而 search() 方法则会扫描整个字符串并返回第一个成功的匹配<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line">content = <span class="string">'This is a Demo_1234567_I Love China'</span></span><br><span class="line">result = re.search(<span class="string">'a.*?(\d&#123;5&#125;)'</span>, content)</span><br><span class="line">print(result)</span><br><span class="line">print(result.group(<span class="number">1</span>))</span><br></pre></td></tr></table></figure></p><p>输出结果：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;_sre.SRE_Match object; span=(<span class="number">8</span>, <span class="number">20</span>), match=<span class="string">'a Demo_12345'</span>&gt;</span><br><span class="line"><span class="number">12345</span></span><br></pre></td></tr></table></figure></p><h1 id="【6-4】re-findall-方法"><a href="#【6-4】re-findall-方法" class="headerlink" title="【6.4】re.findall 方法"></a><font color="#ff0000">【6.4】re.findall 方法</font></h1><p>search() 方法则会扫描整个字符串，但是返回的是第一个成功的匹配，而 findall() 方法将会返回所有成功的匹配<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line">html = <span class="string">'''&lt;div id="songs-list"&gt;</span></span><br><span class="line"><span class="string">        &lt;h2 class="title"&gt; 民谣 &lt;/h2&gt;</span></span><br><span class="line"><span class="string">        &lt;p class="introduction"&gt;</span></span><br><span class="line"><span class="string">        民谣歌曲列表</span></span><br><span class="line"><span class="string">        &lt;/p&gt;</span></span><br><span class="line"><span class="string">        &lt;ul id="list" class="list-group"&gt;</span></span><br><span class="line"><span class="string">        &lt;li data-view="2"&gt; 七里香 &lt;/li&gt;</span></span><br><span class="line"><span class="string">        &lt;li data-view="7"&gt;</span></span><br><span class="line"><span class="string">        &lt;a href="/2.mp3" singer="赵雷"&gt; 理想 &lt;/a&gt;</span></span><br><span class="line"><span class="string">        &lt;/li&gt;</span></span><br><span class="line"><span class="string">        &lt;li data-view="4" class="active"&gt;</span></span><br><span class="line"><span class="string">        &lt;a href="/3.mp3" singer="许巍"&gt; 像风一样自由 &lt;/a&gt;</span></span><br><span class="line"><span class="string">        &lt;/li&gt;</span></span><br><span class="line"><span class="string">        &lt;li data-view="6"&gt;&lt;a href="/4.mp3" singer="安与骑兵"&gt; 红山果 &lt;/a&gt;&lt;/li&gt;</span></span><br><span class="line"><span class="string">        &lt;li data-view="5"&gt;&lt;a href="/5.mp3" singer="薛之谦"&gt; 意外 &lt;/a&gt;&lt;/li&gt;</span></span><br><span class="line"><span class="string">        &lt;li data-view="5"&gt;</span></span><br><span class="line"><span class="string">        &lt;a href="/6.mp3" singer="马頔"&gt; 但南山南 &lt;/a&gt;</span></span><br><span class="line"><span class="string">        &lt;/li&gt;</span></span><br><span class="line"><span class="string">        &lt;/ul&gt;</span></span><br><span class="line"><span class="string">        &lt;/div&gt;'''</span></span><br><span class="line">results = re.findall(<span class="string">'&lt;li.*?href="(.*?)".*?singer="(.*?)"&gt;(.*?)&lt;/a&gt;'</span>, html, re.S)</span><br><span class="line">print(results)</span><br><span class="line">print(type(results))</span><br><span class="line"><span class="keyword">for</span> result <span class="keyword">in</span> results:</span><br><span class="line">    print(result)</span><br><span class="line">    print(result[<span class="number">0</span>], result[<span class="number">1</span>], result[<span class="number">2</span>])</span><br></pre></td></tr></table></figure></p><p>输出结果：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">[(<span class="string">'/2.mp3'</span>, <span class="string">'赵雷'</span>, <span class="string">' 理想 '</span>), (<span class="string">'/3.mp3'</span>, <span class="string">'许巍'</span>, <span class="string">' 像风一样自由 '</span>), (<span class="string">'/4.mp3'</span>, <span class="string">'安与骑兵'</span>, <span class="string">' 红山果 '</span>), (<span class="string">'/5.mp3'</span>, <span class="string">'薛之谦'</span>, <span class="string">' 意外 '</span>), (<span class="string">'/6.mp3'</span>, <span class="string">'马頔'</span>, <span class="string">' 但南山南 '</span>)]</span><br><span class="line">&lt;<span class="class"><span class="keyword">class</span> '<span class="title">list</span>'&gt;</span></span><br><span class="line"><span class="class"><span class="params">(<span class="string">'/2.mp3'</span>, <span class="string">'赵雷'</span>, <span class="string">' 理想 '</span>)</span></span></span><br><span class="line"><span class="class">/2.<span class="title">mp3</span> 赵雷  理想 </span></span><br><span class="line"><span class="class"><span class="params">(<span class="string">'/3.mp3'</span>, <span class="string">'许巍'</span>, <span class="string">' 像风一样自由 '</span>)</span></span></span><br><span class="line"><span class="class">/3.<span class="title">mp3</span> 许巍  像风一样自由 </span></span><br><span class="line"><span class="class"><span class="params">(<span class="string">'/4.mp3'</span>, <span class="string">'安与骑兵'</span>, <span class="string">' 红山果 '</span>)</span></span></span><br><span class="line"><span class="class">/4.<span class="title">mp3</span> 安与骑兵  红山果 </span></span><br><span class="line"><span class="class"><span class="params">(<span class="string">'/5.mp3'</span>, <span class="string">'薛之谦'</span>, <span class="string">' 意外 '</span>)</span></span></span><br><span class="line"><span class="class">/5.<span class="title">mp3</span> 薛之谦  意外 </span></span><br><span class="line"><span class="class"><span class="params">(<span class="string">'/6.mp3'</span>, <span class="string">'马頔'</span>, <span class="string">' 但南山南 '</span>)</span></span></span><br><span class="line"><span class="class">/6.<span class="title">mp3</span> 马頔  但南山南</span></span><br></pre></td></tr></table></figure></p><h1 id="【6-5】re-sub-方法"><a href="#【6-5】re-sub-方法" class="headerlink" title="【6.5】re.sub 方法"></a><font color="#ff0000">【6.5】re.sub 方法</font></h1><p>与字符串的 replace() 方法类似，sub() 方法可以对文本进行修改，sub() 方法第一个参数为匹配对象，第二个参数为替换成的字符串，如果要去掉匹配对象的话，可以赋值为空，第三个参数为原来的字符串<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line">content = <span class="string">'87dsf4as2w4jh1k4kdl4'</span></span><br><span class="line">result = re.sub(<span class="string">'\d+'</span>, <span class="string">''</span>, content)</span><br><span class="line">print(result)</span><br></pre></td></tr></table></figure></p><p>输出结果：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dsfaswjhkkdl</span><br></pre></td></tr></table></figure></p><h1 id="【6-5】re-compile-方法"><a href="#【6-5】re-compile-方法" class="headerlink" title="【6.5】re.compile() 方法"></a><font color="#ff0000">【6.5】re.compile() 方法</font></h1><p>compile() 方法可以将正则字符串编译成正则表达式对象，以便在后面的匹配中复用<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line">content1 = <span class="string">'北京时间：2019-08-24 18:30'</span></span><br><span class="line">content2 = <span class="string">'伦敦时间：2019-08-24 11:30'</span></span><br><span class="line">content3 = <span class="string">'巴黎时间：2019-08-24 12:30'</span></span><br><span class="line">content4 = <span class="string">'外星时间：9019-99-66 50:30'</span></span><br><span class="line">pattern = re.compile(<span class="string">'\d&#123;2&#125;:\d&#123;2&#125;'</span>)</span><br><span class="line">result1 = re.sub(pattern, <span class="string">''</span>, content1)</span><br><span class="line">result2 = re.sub(pattern, <span class="string">''</span>, content2)</span><br><span class="line">result3 = re.sub(pattern, <span class="string">''</span>, content3)</span><br><span class="line">result4 = re.sub(pattern, <span class="string">''</span>, content4)</span><br><span class="line">print(result1, result2, result3, result4)</span><br></pre></td></tr></table></figure></p><p>利用 compile() 方法将正则表达式编译成一个正则表达式对象，以便复用，然后用 sub() 方法去掉具体时间<br>输出结果：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">北京时间：<span class="number">2019</span><span class="number">-08</span><span class="number">-24</span>  伦敦时间：<span class="number">2019</span><span class="number">-08</span><span class="number">-24</span>  巴黎时间：<span class="number">2019</span><span class="number">-08</span><span class="number">-24</span>  外星时间：<span class="number">9019</span><span class="number">-99</span><span class="number">-66</span></span><br></pre></td></tr></table></figure></p>]]></content>
      
      
      <categories>
          
          <category> Python3 学习笔记 </category>
          
          <category> 爬虫学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 爬虫 </tag>
            
            <tag> 正则表达式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python3 爬虫学习笔记 C05</title>
      <link href="/2019/08/23/A35-Python3-spider-C05/"/>
      <url>/2019/08/23/A35-Python3-spider-C05/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><blockquote><center><font color="#1BC3FB" size="4">Python3 爬虫学习笔记第五章 —— 【Selenium + 无界面浏览器】</font></center></blockquote><a id="more"></a><h1 id="【5-1】关于无界面浏览器"><a href="#【5-1】关于无界面浏览器" class="headerlink" title="【5.1】关于无界面浏览器"></a><font color="#ff0000">【5.1】关于无界面浏览器</font></h1><p>无界面（headless）浏览器，会把网站加载到内存并执行页面上的 JavaScript，因为不会展示图形界面，所以运行起来比完整的浏览器更高效。Selenium 搭配无界面浏览器使用，被称为爬虫利器，常用的无界面浏览器有：PhantomJS、Headless Chrome、Headless Firefox，其中，18年3月，PhantomJS 的作者在 GitHub 上宣布暂停开发 PhantomJS，现在使用 PhantomJS 会出现警告：<code>UserWarning: Selenium support for PhantomJS has been deprecated, please use headless versions of Chrome or Firefox instead</code>，所以推荐使用谷歌或者火狐的无界面浏览器</p><h1 id="【5-2】PhantomJS"><a href="#【5-2】PhantomJS" class="headerlink" title="【5.2】PhantomJS"></a><font color="#ff0000">【5.2】PhantomJS</font></h1><p>下载 PhantomJS：<a href="https://phantomjs.org/download.html" target="_blank" rel="noopener">https://phantomjs.org/download.html</a><br>path 为 PhantomJS 路径，如果系统配置了环境变量，就不用手动指定 executable_path 参数<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"></span><br><span class="line">path = <span class="string">r'F:\PycharmProjects\Python3爬虫\phantomjs-2.1.1\bin\phantomjs.exe'</span></span><br><span class="line">driver = webdriver.PhantomJS(executable_path=path)</span><br><span class="line">driver.get(<span class="string">"https://www.itrhx.com"</span>)</span><br><span class="line">print(driver.page_source)</span><br><span class="line">driver.close()</span><br></pre></td></tr></table></figure></p><h1 id="【5-3】Headless-Chrome"><a href="#【5-3】Headless-Chrome" class="headerlink" title="【5.3】Headless Chrome"></a><font color="#ff0000">【5.3】Headless Chrome</font></h1><p>下载 Chromedriver：<a href="http://chromedriver.storage.googleapis.com/index.html" target="_blank" rel="noopener">http://chromedriver.storage.googleapis.com/index.html</a><br>需要本地有 Chrome 浏览器，path 为 Headless Chrome 路径，如果系统配置了环境变量，就不用手动指定 executable_path 参数<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.chrome.options <span class="keyword">import</span> Options</span><br><span class="line"></span><br><span class="line">chrome_options = Options()</span><br><span class="line">chrome_options.add_argument(<span class="string">'--headless'</span>)</span><br><span class="line">chrome_options.add_argument(<span class="string">'--disable-gpu'</span>)</span><br><span class="line">path = <span class="string">'F:\PycharmProjects\Python3爬虫\chromedriver.exe'</span></span><br><span class="line">driver = webdriver.Chrome(executable_path=path, chrome_options=chrome_options)</span><br><span class="line">driver.get(<span class="string">"https://www.itrhx.com"</span>)</span><br><span class="line">print(driver.page_source)</span><br><span class="line">driver.close()</span><br></pre></td></tr></table></figure></p><h1 id="【5-4】Headless-Firefox"><a href="#【5-4】Headless-Firefox" class="headerlink" title="【5.4】Headless Firefox"></a><font color="#ff0000">【5.4】Headless Firefox</font></h1><p>下载 geckodriver：<a href="https://github.com/mozilla/geckodriver/releases/" target="_blank" rel="noopener">https://github.com/mozilla/geckodriver/releases/</a><br>需要本地有 Firefox 浏览器，path 为 Headless Firefox 路径，如果系统配置了环境变量，就不用手动指定 executable_path 参数<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium.webdriver <span class="keyword">import</span> Firefox</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.firefox.options <span class="keyword">import</span> Options</span><br><span class="line"></span><br><span class="line">options = Options()</span><br><span class="line">options.add_argument(<span class="string">'-headless'</span>)</span><br><span class="line">path = <span class="string">'F:\PycharmProjects\Python3爬虫\geckodriver.exe'</span></span><br><span class="line">driver = Firefox(executable_path=path, firefox_options=options)</span><br><span class="line">driver.get(<span class="string">"https://www.itrhx.com"</span>)</span><br><span class="line">print(driver.page_source)</span><br><span class="line">driver.close()</span><br></pre></td></tr></table></figure></p>]]></content>
      
      
      <categories>
          
          <category> Python3 学习笔记 </category>
          
          <category> 爬虫学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 爬虫 </tag>
            
            <tag> Selenium </tag>
            
            <tag> 无界面浏览器 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>常见 User-Agent 大全</title>
      <link href="/2019/08/23/A34-UserAgent/"/>
      <url>/2019/08/23/A34-UserAgent/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>User Agent 中文名为用户代理，简称 UA，是一个特殊字符串头，使得服务器能够识别客户使用的操作系统及版本、CPU 类型、浏览器及版本、浏览器渲染引擎、浏览器语言、浏览器插件等。Python 爬虫通过伪装 UA 可以绕过某些检测。</p><p>以下为搜集的常见的各浏览器的 User-Agent，其中：</p><ul><li>安卓操作系统：Android 7.1.1；OPPO R9sk Build/NMF26F</li><li>PC操作系统：Windows 10 64位 10.0.18362.10000</li><li>其他操作系统：iOS、Backerry、WebOS、Symbian、Windows Phone</li></ul><p>相关链接：</p><ul><li>手机User-Agent大全：<a href="http://www.fynas.com/ua" target="_blank" rel="noopener">http://www.fynas.com/ua</a></li><li>User-Agent在线检测：<a href="http://www.user-agent.cn/" target="_blank" rel="noopener">http://www.user-agent.cn/</a></li><li><p>常用User-Agent大全：<a href="http://www.jsons.cn/useragent/" target="_blank" rel="noopener">http://www.jsons.cn/useragent/</a></p><h1 id="Windows10"><a href="#Windows10" class="headerlink" title="Windows10"></a><font color="#ff0000">Windows10</font></h1></li><li><p><font color="#ff0000">Windows10 / Chrome 75.0.3770.142</font><br>Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/75.0.3770.142 Safari/537.36</p></li><li><p><font color="#ff0000">Windows10 / Firefox 69.0b15</font><br>Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:69.0) Gecko/20100101 Firefox/69.0</p></li><li><p><font color="#ff0000">Windows10 / Opera 63.0.3368.43</font><br>Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/76.0.3809.100 Safari/537.36 OPR/63.0.3368.43</p></li><li><p><font color="#ff0000">Windows10 / Edge 44.18362.1.0</font><br>User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/70.0.3538.102 Safari/537.36 Edge/18.18362</p></li><li><p><font color="#ff0000">Windows10 / IE 11.10000.18362.0</font><br>User-Agent: Mozilla/5.0 (Windows NT 10.0; WOW64; Trident/7.0; LCTE; rv:11.0) like Gecko</p></li><li><p><font color="#ff0000">Windows10 x64 / Safari 5.1.4（7534.54.16）</font><br>Mozilla/5.0 (Windows NT 6.2; WOW64) AppleWebKit/534.54.16 (KHTML, like Gecko) Version/5.1.4 Safari/534.54.16</p></li><li><p><font color="#ff0000">Windows10 / QQ浏览器 10.5（3739）</font><br>Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/70.0.3538.25 Safari/537.36 Core/1.70.3722.400 QQBrowser/10.5.3739.400</p></li><li><p><font color="#ff0000">Windows10 / 360安全浏览器 10.0.1977.0</font><br>Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/63.0.3239.132 Safari/537.36 QIHU 360SE</p></li><li><p><font color="#ff0000">Windows10 / 360极速浏览器 11.0.2179.0</font><br>Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/69.0.3497.100 Safari/537.36 QIHU 360EE</p></li><li><p><font color="#ff0000">Windows10 / UC浏览器 6.2.3964.2</font><br>Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/55.0.2883.87 UBrowser/6.2.3964.2 Safari/537.36</p></li><li><p><font color="#ff0000">Windows10 / 搜狗浏览器 8.5.10.31270</font><br>Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/58.0.3029.110 Safari/537.36 SE 2.X MetaSr 1.0</p></li><li><p><font color="#ff0000">Windows10 / 猎豹浏览器 6.5.115.19331.8001</font><br>Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/57.0.2987.98 Safari/537.36 LBBROWSER</p></li><li><p><font color="#ff0000">Windows10 / 傲游浏览器 5.2.7.5000</font><br>Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/61.0.3163.79 Safari/537.36</p></li><li><p><font color="#ff0000">Windows10 / 2345加速浏览器 10.1.0.19399</font><br>Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/69.0.3947.100 Safari/537.36</p></li></ul><h1 id="Android"><a href="#Android" class="headerlink" title="Android"></a><font color="#ff0000">Android</font></h1><ul><li><p><font color="#ff0000">Android / Chrome 76.0.3809.111</font><br>Mozilla/5.0 (Linux; Android 7.1.1; OPPO R9sk) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/76.0.3809.111 Mobile Safari/537.36</p></li><li><p><font color="#ff0000">Android / Firefox 68.0.2</font><br>Mozilla/5.0 (Android 7.1.1; Mobile; rv:68.0) Gecko/68.0 Firefox/68.0</p></li><li><p><font color="#ff0000">Android / Opera 53.0.2569.141117</font><br>Mozilla/5.0 (Linux; Android 7.1.1; OPPO R9sk Build/NMF26F) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/74.0.3729.157 Mobile Safari/537.36 OPR/53.0.2569.141117</p></li><li><p><font color="#ff0000">Android / Edge 42.0.2.3819</font><br>Mozilla/5.0 (Linux; Android 7.1.1; OPPO R9sk) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/73.0.3683.90 Mobile Safari/537.36 EdgA/42.0.2.3819</p></li><li><p><font color="#ff0000">Android / QQ浏览器 9.6.1.5190</font><br>Mozilla/5.0 (Linux; U; Android 7.1.1; zh-cn; OPPO R9sk Build/NMF26F) AppleWebKit/537.36 (KHTML, like Gecko) Version/4.0 Chrome/66.0.3359.126 MQQBrowser/9.6 Mobile Safari/537.36</p></li><li><p><font color="#ff0000">Android / OPPO浏览器 10.5.1.2_2c91537</font><br>Mozilla/5.0 (Linux; U; Android 7.1.1; zh-cn; OPPO R9sk Build/NMF26F) AppleWebKit/537.36 (KHTML, like Gecko) Version/4.0 Chrome/70.0.3538.80 Mobile Safari/537.36 OppoBrowser/10.5.1.2</p></li><li><p><font color="#ff0000">Android / 360浏览器 8.2.0.162</font><br>Mozilla/5.0 (Linux; Android 7.1.1; OPPO R9sk Build/NMF26F; wv) AppleWebKit/537.36 (KHTML, like Gecko) Version/4.0 Chrome/62.0.3202.97 Mobile Safari/537.36</p></li><li><p><font color="#ff0000">Android / 360极速浏览器 1.0.100.1078</font><br>Mozilla/5.0 (Linux; Android 7.1.1; OPPO R9sk Build/NMF26F) AppleWebKit/537.36 (KHTML, like Gecko) Version/4.0 Chrome/70.0.3538.80 Mobile Safari/537.36 360 Alitephone Browser (1.5.0.90/1.0.100.1078) mso_sdk(1.0.0)</p></li><li><p><font color="#ff0000">Android / UC浏览器 12.6.0.1040</font><br>Mozilla/5.0 (Linux; U; Android 7.1.1; zh-CN; OPPO R9sk Build/NMF26F) AppleWebKit/537.36 (KHTML, like Gecko) Version/4.0 Chrome/57.0.2987.108 UCBrowser/12.6.0.1040 Mobile Safari/537.36</p></li><li><p><font color="#ff0000">Android / 猎豹浏览器 5.12.3</font><br>Mozilla/5.0 (Linux; Android 7.1.1; OPPO R9sk Build/NMF26F; wv) AppleWebKit/537.36 (KHTML, like Gecko) Version/4.0 Chrome/70.0.3538.80 Mobile Safari/537.36 LieBaoFast/5.12.3</p></li><li><p><font color="#ff0000">Android / 百度浏览器 7.19</font><br>Mozilla/5.0 (Linux; Android 7.1.1; OPPO R9sk Build/NMF26F; wv) AppleWebKit/537.36 (KHTML, like Gecko) Version/4.0 Chrome/48.0.2564.116 Mobile Safari/537.36 T7/9.1 baidubrowser/7.19.13.0 (Baidu; P1 7.1.1)</p></li><li><p><font color="#ff0000">Android / 搜狗浏览器 5.22.8.71677</font><br>Mozilla/5.0 (Linux; Android 7.1.1; OPPO R9sk Build/NMF26F; wv) AppleWebKit/537.36 (KHTML, like Gecko) Version/4.0 Chrome/68.0.3440.106 Mobile Safari/537.36 AWP/2.0 SogouMSE,SogouMobileBrowser/5.22.8</p></li><li><p><font color="#ff0000">Android / 2345浏览器 11.0.1</font><br>Mozilla/5.0 (Linux; Android 7.1.1; OPPO R9sk Build/NMF26F; wv) AppleWebKit/537.36 (KHTML, like Gecko) Version/4.0 Chrome/70.0.3538.80 Mobile Safari/537.36 Mb2345Browser/11.0.1</p></li></ul><h1 id="其他"><a href="#其他" class="headerlink" title="其他"></a><font color="#ff0000">其他</font></h1><ul><li><p><font color="#ff0000">iPhone3</font><br>Mozilla/5.0 (iPhone; U; CPU iPhone OS 3_0 like Mac OS X; en-us) AppleWebKit/420.1 (KHTML, like Gecko) Version/3.0 Mobile/1A542a Safari/419.3</p></li><li><p><font color="#ff0000">iPhone4</font><br>Mozilla/5.0 (iPhone; U; CPU iPhone OS 4_0 like Mac OS X; en-us) AppleWebKit/532.9 (KHTML, like Gecko) Version/4.0.5 Mobile/8A293 Safari/6531.22.7</p></li><li><p><font color="#ff0000">iPhone6s</font><br>Mozilla/5.0 (iPhone 6s; CPU iPhone OS 11_4_1 like Mac OS X) AppleWebKit/604.3.5 (KHTML, like Gecko) Version/11.0 MQQBrowser/8.3.0 Mobile/15B87 Safari/604.1 MttCustomUA/2 QBWebViewType/1 WKType/1</p></li><li><p><font color="#ff0000">iPad</font><br>Mozilla/5.0 (iPad; U; CPU OS 3_2 like Mac OS X; en-us) AppleWebKit/531.21.10 (KHTML, like Gecko) Version/4.0.4 Mobile/7B334b Safari/531.21.10</p></li><li><p><font color="#ff0000">iPod</font><br>Mozilla/5.0 (iPod; U; CPU iPhone OS 4_3_3 like Mac OS X; en-us) AppleWebKit/533.17.9 (KHTML, like Gecko) Version/5.0.2 Mobile/8J2 Safari/6533.18.5</p></li><li><p><font color="#ff0000">BlackBerry</font><br>Mozilla/5.0 (BlackBerry; U; BlackBerry 9800; en) AppleWebKit/534.1+ (KHTML, like Gecko) Version/6.0.0.337 Mobile Safari/534.1+</p></li><li><p><font color="#ff0000">WebOS HP Touchpad</font><br>Mozilla/5.0 (hp-tablet; Linux; hpwOS/3.0.0; U; en-US) AppleWebKit/534.6 (KHTML, like Gecko) wOSBrowser/233.70 Safari/534.6 TouchPad/1.0</p></li><li><p><font color="#ff0000">Nokia N97</font><br>Mozilla/5.0 (SymbianOS/9.4; Series60/5.0 NokiaN97-1/20.0.019; Profile/MIDP-2.1 Configuration/CLDC-1.1) AppleWebKit/525 (KHTML, like Gecko) BrowserNG/7.1.18124</p></li><li><p><font color="#ff0000">Windows Phone Mango</font><br>Mozilla/5.0 (compatible; MSIE 9.0; Windows Phone OS 7.5; Trident/5.0; IEMobile/9.0; HTC; Titan)</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> Python3 学习笔记 </category>
          
          <category> 学习经验 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 爬虫 </tag>
            
            <tag> User-Agent </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Selenium 显式等待条件及其含义</title>
      <link href="/2019/08/23/A33-selenium/"/>
      <url>/2019/08/23/A33-selenium/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><table><thead><tr><th>等待条件</th><th>含义</th></tr></thead><tbody><tr><td>title_is</td><td>标题是某内容</td></tr><tr><td>title_contains</td><td>标题包含某内容</td></tr><tr><td>presence_of_element_located</td><td>节点加载出，传入定位元组，如 (By.ID, ‘p’)</td></tr><tr><td>visibility_of_element_located</td><td>节点可见，传入定位元组</td></tr><tr><td>visibility_of</td><td>可见，传入节点对象</td></tr><tr><td>presence_of_all_elements_located</td><td>所有节点加载出</td></tr><tr><td>text_to_be_present_in_element</td><td>某个节点文本包含某文字</td></tr><tr><td>text_to_be_present_in_element_value</td><td>某个节点值包含某文字</td></tr><tr><td>frame_to_be_available_and_switch_to_it frame</td><td>加载并切换</td></tr><tr><td>invisibility_of_element_located</td><td>节点不可见</td></tr><tr><td>element_to_be_clickable</td><td>节点可点击</td></tr><tr><td>staleness_of</td><td>判断一个节点是否仍在 DOM，可判断页面是否已经刷新</td></tr><tr><td>element_to_be_selected</td><td>节点可选择，传节点对象</td></tr><tr><td>element_located_to_be_selected</td><td>节点可选择，传入定位元组</td></tr><tr><td>element_selection_state_to_be</td><td>传入节点对象以及状态，相等返回 True，否则返回 False</td></tr><tr><td>element_located_selection_state_to_be</td><td>传入定位元组以及状态，相等返回 True，否则返回 False</td></tr><tr><td>alert_is_present</td><td>是否出现 Alert</td></tr></tbody></table><p>更多等待条件极其用法介绍：<a href="https://selenium-python.readthedocs.io/api.html#module-selenium.webdriver.support.expected_conditions" target="_blank" rel="noopener">https://selenium-python.readthedocs.io/api.html#module-selenium.webdriver.support.expected_conditions</a></p><p>Selenium 的使用：<a href="https://www.itrhx.com/2019/08/22/A32-Python3-spider-C04/">https://www.itrhx.com/2019/08/22/A32-Python3-spider-C04/</a></p>]]></content>
      
      
      <categories>
          
          <category> Python3 学习笔记 </category>
          
          <category> 学习经验 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 爬虫 </tag>
            
            <tag> Selenium </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python3 爬虫学习笔记 C04</title>
      <link href="/2019/08/23/A32-Python3-spider-C04/"/>
      <url>/2019/08/23/A32-Python3-spider-C04/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><blockquote><center><font color="#1BC3FB" size="4">Python3 爬虫学习笔记第四章 —— 【自动化测试工具 Selenium】</font></center></blockquote><a id="more"></a><p>Selenium 是一个用于 Web 应用程序测试的工具。Selenium 测试直接运行在浏览器中，就像真正的用户在操作一样。支持的浏览器包括IE（7, 8, 9, 10, 11），Mozilla Firefox，Safari，Google Chrome，Opera等。利用它可以驱动浏览器执行特定的动作，如点击、下拉等操作，同时还可以获取浏览器当前呈现的页面的源代码，做到可见即可爬。对于一些 JavaScript 动态渲染的页面来说，此种抓取方式非常有效。<font color="#FF0000">本文重点以 Selenium 使用谷歌浏览器的 Webdriver 为例。</font></p><h1 id="【4-1】下载驱动"><a href="#【4-1】下载驱动" class="headerlink" title=" 【4.1】下载驱动"></a><font color="#FF0000"> 【4.1】下载驱动</font></h1><p>使用 Selenium 操作不同浏览器，需要不同浏览器相应的驱动支持：</p><table><thead><tr><th>浏览器</th><th>驱动名称</th><th>下载地址</th><th>备注</th></tr></thead><tbody><tr><td>谷歌浏览器</td><td>chromedriver</td><td><a href="http://chromedriver.storage.googleapis.com/index.html" target="_blank" rel="noopener">点击进入下载页面</a></td><td>需要根据自己浏览器的版本下载不同版本的驱动</td></tr><tr><td>火狐浏览器</td><td>geckodriver</td><td><a href="https://github.com/mozilla/geckodriver/releases/" target="_blank" rel="noopener">点击进入下载页面</a></td><td>需要根据自己的操作系统下载对应的驱动</td></tr><tr><td>IE</td><td>IEDriverServer</td><td><a href="http://selenium-release.storage.googleapis.com/index.html" target="_blank" rel="noopener">点击进入下载页面</a></td><td>根据自己 selenium 版本和系统版本下载对应版本的驱动， selenium 版本可以在cmd中输入<code>pip show selenium</code>查看</td></tr></tbody></table><h1 id="【4-2】声明浏览器对象"><a href="#【4-2】声明浏览器对象" class="headerlink" title=" 【4.2】声明浏览器对象"></a><font color="#FF0000"> 【4.2】声明浏览器对象</font></h1><p>不同浏览器的对象声明方法：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"></span><br><span class="line">browser = webdriver.Chrome()  <span class="comment"># 谷歌浏览器</span></span><br><span class="line">browser = webdriver.Firefox()  <span class="comment"># 火狐浏览器</span></span><br><span class="line">browser = webdriver.Edge()  <span class="comment"># Edge</span></span><br><span class="line">browser = webdriver.PhantomJS()  <span class="comment"># PhantomJS无界面浏览器</span></span><br><span class="line">browser = webdriver.Safari()  <span class="comment"># Safari浏览器</span></span><br></pre></td></tr></table></figure></p><h1 id="【4-3】访问页面"><a href="#【4-3】访问页面" class="headerlink" title=" 【4.3】访问页面"></a><font color="#FF0000"> 【4.3】访问页面</font></h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"></span><br><span class="line">path = <span class="string">r'F:\PycharmProjects\Python3爬虫\chromedriver.exe'</span></span><br><span class="line">browser = webdriver.Chrome(executable_path=path)</span><br><span class="line">browser.get(<span class="string">'https://www.itrhx.com'</span>)</span><br><span class="line">print(browser.page_source)</span><br><span class="line">browser.close()</span><br></pre></td></tr></table></figure><p>运行代码就会自动打开谷歌浏览器，实现了用 get() 方法访问 <a href="http://www.itrhx.com">www.itrhx.com</a> ，path 里面的内容是谷歌浏览器驱动的目录， r 表示不转义，使用真实字符。<code>print(browser.page_source)</code> 表示打印页面源代码</p><h1 id="【4-4】启动参数"><a href="#【4-4】启动参数" class="headerlink" title=" 【4.4】启动参数"></a><font color="#FF0000"> 【4.4】启动参数</font></h1><p>Chrome Options 是一个 Chrome 的参数对象，在此对象中使用 add_argument() 方法可以添加启动参数，添加完毕后可以在初始化 Webdriver 对象时将此 Options 对象传入，则可以实现以特定参数启动Chrome。<br>示例：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.chrome.options <span class="keyword">import</span> Options</span><br><span class="line"></span><br><span class="line">path = <span class="string">r'F:\PycharmProjects\Python3爬虫\chromedriver.exe'</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 实例化一个启动参数对象</span></span><br><span class="line">chrome_options = Options()</span><br><span class="line"><span class="comment"># 添加启动参数</span></span><br><span class="line">chrome_options.add_argument(<span class="string">'--window-size=1366,768'</span>)</span><br><span class="line"><span class="comment"># 将参数对象传入Chrome，则启动了一个设置了窗口大小的Chrome</span></span><br><span class="line">browser = webdriver.Chrome(executable_path=path, chrome_options=chrome_options)</span><br><span class="line">browser.get(<span class="string">'http://www.itrhx.com'</span>)</span><br></pre></td></tr></table></figure></p><p>这样就启动了一个1366x768分辨率的浏览器<br>常见的启动参数：</p><table><thead><tr><th style="text-align:center">启动参数</th><th style="text-align:center">作用</th></tr></thead><tbody><tr><td style="text-align:center">–user-agent=””</td><td style="text-align:center">设置请求头的 User-Agent</td></tr><tr><td style="text-align:center">–window-size=xxx, xxx</td><td style="text-align:center">设置浏览器分辨率</td></tr><tr><td style="text-align:center">–headless</td><td style="text-align:center">无界面运行</td></tr><tr><td style="text-align:center">–start-maximized</td><td style="text-align:center">最大化运行</td></tr><tr><td style="text-align:center">–incognito</td><td style="text-align:center">隐身模式</td></tr><tr><td style="text-align:center">–disable-javascript</td><td style="text-align:center">禁用javascript</td></tr><tr><td style="text-align:center">–disable-infobars</td><td style="text-align:center">禁用“浏览器正在被自动化程序控制”的提示</td></tr></tbody></table><p>所有的启动参数：<a href="https://peter.sh/experiments/chromium-command-line-switches/" target="_blank" rel="noopener">https://peter.sh/experiments/chromium-command-line-switches/</a></p><h1 id="【4-5】查找节点"><a href="#【4-5】查找节点" class="headerlink" title=" 【4.5】查找节点"></a><font color="#FF0000"> 【4.5】查找节点</font></h1><p>Selenium 可以驱动浏览器完成各种操作，比如填充表单、模拟点击等。要完成这些操作，实现要知道在哪里点击，哪里填充，这就是 Selenium 节点查找</p><h2 id="【4-5-1】查找单个节点"><a href="#【4-5-1】查找单个节点" class="headerlink" title=" 【4.5.1】查找单个节点"></a><font color="#FF0000"> 【4.5.1】查找单个节点</font></h2><p>所有获取单个节点的方法：</p><ul><li><p><font color="#FF0000">find_element_by_id  【通过元素的 id 来选择】</font><br>例：<code>&lt;div id=&#39;bdy-inner&#39;&gt;test&lt;/div&gt;</code>，查找：<code>driver.find_element_by_id(&#39;bdy-inner&#39;)</code></p></li><li><p><font color="#FF0000">find_element_by_name  【通过元素的 name 来选择】</font><br>例：<code>&lt;input name=&quot;username&quot; type=&quot;text&quot; /&gt;</code>，查找：<code>driver.find_element_by_name(&#39;password&#39;)</code></p></li><li><p><font color="#FF0000">find_element_by_xpath  【通过 xpath 选择】</font><br>例：<code>&lt;form id=&quot;loginForm&quot;&gt;</code>，查找：<code>driver.find_element_by_xpath(&quot;//form[@id=&#39;loginForm&#39;]&quot;)</code></p></li><li><p><font color="#FF0000">find_element_by_link_text  【通过链接地址选择】</font><br>例：<code>&lt;a href=&quot;continue.html&quot;&gt;continue&lt;/a&gt;</code>，查询：<code>driver.find_element_by_link_text(&#39;continue&#39;)</code></p></li><li><p><font color="#FF0000">find_element_by_partial_link_text  【通过链接的部分地址选择】</font><br>例：<code>&lt;a href=&quot;continue.html&quot;&gt;continue&lt;/a&gt;</code>，查询：<code>driver.find_element_by_link_text(&#39;cont&#39;)</code></p></li><li><p><font color="#FF0000">find_element_by_tag_name  【通过元素的名称选择】</font><br>例：<code>&lt;h1&gt;welcome&lt;h1&gt;</code>，查询：<code>driver.find_element_by_tag_name(&#39;h1&#39;)</code></p></li><li><p><font color="#FF0000">find_element_by_class_name  【通过元素的 class 选择】</font><br>例：<code>&lt;p class=&quot;content&quot;&gt;welcome to TRHX&#39;S BLOG!&lt;/p&gt;</code>，查询：<code>driver.find_element_by_class_name(&#39;content&#39;)</code></p></li><li><p><font color="#FF0000">find_element_by_css_selector  【通过元素的 class 选择】</font><br>例：<code>&lt;div class=&#39;bdy-inner&#39;&gt;test&lt;/div&gt;</code>，查询：<code>driver.find_element_by_css_selector(&#39;div.bdy-inner&#39;)</code></p></li><li><p><font color="#FF0000">find_element()  【通用方法，需要传递两个参数：查找方式 By 和值】</font><br>例：<code>driver.find_element_by_id(&#39;inner&#39;)</code> 等价于 <code>find_element(By.ID, inner)</code>，使用时需要<code>from selenium.webdriver.common.by import By</code></p></li></ul><p>示例：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"></span><br><span class="line">path = <span class="string">r'F:\PycharmProjects\Python3爬虫\chromedriver.exe'</span></span><br><span class="line">browser = webdriver.Chrome(executable_path=path)</span><br><span class="line">browser.get(<span class="string">'https://www.itrhx.com'</span>)</span><br><span class="line">blog_title = browser.find_elements_by_class_name((<span class="string">'title'</span>))</span><br><span class="line">print(blog_title[<span class="number">0</span>].text)</span><br><span class="line">browser.close()</span><br></pre></td></tr></table></figure></p><p>输出结果：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">TRHX<span class="string">'S BLOG</span></span><br></pre></td></tr></table></figure></p><h2 id="【4-5-2】查找多个节点"><a href="#【4-5-2】查找多个节点" class="headerlink" title=" 【4.5.2】查找多个节点"></a><font color="#FF0000"> 【4.5.2】查找多个节点</font></h2><p>所有获取多个节点的方法：（与查找单个节点的区别是 element 多加了个 s）</p><ul><li>find_elements_by_id</li><li>find_elements_by_name</li><li>find_elements_by_xpath</li><li>find_elements_by_link_text</li><li>find_elements_by_partial_link_text</li><li>find_elements_by_tag_name</li><li>find_elements_by_class_name</li><li>find_elements_by_css_selector</li><li>find_elements()</li></ul><p>示例：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.common.by <span class="keyword">import</span> By</span><br><span class="line"></span><br><span class="line">path = <span class="string">r'F:\PycharmProjects\Python3爬虫\chromedriver.exe'</span></span><br><span class="line">browser = webdriver.Chrome(executable_path=path)</span><br><span class="line">browser.get(<span class="string">'https://www.itrhx.com'</span>)</span><br><span class="line">article_title = browser.find_elements(By.XPATH, <span class="string">"//h2[@class='title']"</span>)</span><br><span class="line">print(article_title)</span><br><span class="line">browser.close()</span><br></pre></td></tr></table></figure></p><h1 id="【4-6】节点交互"><a href="#【4-6】节点交互" class="headerlink" title=" 【4.6】节点交互"></a><font color="#FF0000"> 【4.6】节点交互</font></h1><p>Selenium 可以驱动浏览器来执行一些操作，也就是说可以让浏览器模拟执行一些动作。称为节点交互，比较常见的用法有：</p><ul><li>send_keys：模拟按键输入</li><li>clear：清除元素的内容</li><li>click：单击元素</li><li>submit：提交表单</li></ul><p>示例：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.common.keys <span class="keyword">import</span> Keys</span><br><span class="line"></span><br><span class="line">path = <span class="string">r'F:\PycharmProjects\Python3爬虫\chromedriver.exe'</span></span><br><span class="line">browser = webdriver.Chrome(executable_path=path)</span><br><span class="line">browser.get(<span class="string">'https://www.itrhx.com'</span>)</span><br><span class="line">search = browser.find_element_by_xpath(<span class="string">'//div[@class="cover-wrapper"]/cover/div/form/input'</span>)</span><br><span class="line">search.send_keys(<span class="string">"Python"</span>)</span><br><span class="line">search.send_keys(Keys.ENTER)</span><br></pre></td></tr></table></figure></p><p>此处模拟了键盘，需要导入键盘类 Keys()，send_keys(Keys.ENTER)表示模拟回车键，程序首先打开 <a href="http://www.itrhx.com">www.itrhx.com</a> ，也就是我的博客，然后通过 xpath 找到搜索框，输入 Python 并回车，等待结果显示出来<br>更多节点交互动作：<a href="https://selenium-python.readthedocs.io/api.html#module-selenium.webdriver.remote.webelement" target="_blank" rel="noopener">https://selenium-python.readthedocs.io/api.html#module-selenium.webdriver.remote.webelement</a></p><h1 id="【4-7】动作链"><a href="#【4-7】动作链" class="headerlink" title=" 【4.7】动作链"></a><font color="#FF0000"> 【4.7】动作链</font></h1><p>Selenium 还有另外一些操作，它们没有特定的执行对象，比如鼠标拖曳、键盘按键等，这些动作用另一种方式来执行，那就是动作链。以一个拖曳实例为例：<a href="http://www.runoob.com/try/try.php?filename=jqueryui-api-droppable" target="_blank" rel="noopener">http://www.runoob.com/try/try.php?filename=jqueryui-api-droppable</a><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver <span class="keyword">import</span> ActionChains</span><br><span class="line"></span><br><span class="line">path = <span class="string">r'F:\PycharmProjects\Python3爬虫\chromedriver.exe'</span></span><br><span class="line">browser = webdriver.Chrome(executable_path=path)</span><br><span class="line">url = <span class="string">'http://www.runoob.com/try/try.php?filename=jqueryui-api-droppable'</span></span><br><span class="line">browser.get(url)</span><br><span class="line">browser.switch_to.frame(<span class="string">'iframeResult'</span>)</span><br><span class="line">source = browser.find_element_by_css_selector(<span class="string">'#draggable'</span>)</span><br><span class="line">target = browser.find_element_by_css_selector(<span class="string">'#droppable'</span>)</span><br><span class="line">actions = ActionChains(browser)</span><br><span class="line">actions.drag_and_drop(source, target)</span><br><span class="line">actions.perform()</span><br></pre></td></tr></table></figure></p><p>依次选中要拖曳的节点和拖曳到的目标节点，接着声明 ActionChains 对象并将其赋值为 actions 变量，然后通过调用 actions 变量的 drag_and_drop() 方法，再调用 perform() 方法执行动作，此时就完成了拖曳操作，更多动作链操作：<a href="https://selenium-python.readthedocs.io/api.html#module-selenium.webdriver.common.action_chains" target="_blank" rel="noopener">https://selenium-python.readthedocs.io/api.html#module-selenium.webdriver.common.action_chains</a></p><h1 id="【4-8】执行-JavaScript"><a href="#【4-8】执行-JavaScript" class="headerlink" title=" 【4.8】执行 JavaScript"></a><font color="#FF0000"> 【4.8】执行 JavaScript</font></h1><p>Selenium API 并没有提供执行 JavaScript 的方法，但是实际上是可以实现的。比如，下拉进度条，它可以直接模拟运行 JavaScript，此时使用 execute_script() 方法即可实现<br>示例：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"></span><br><span class="line">path = <span class="string">r'F:\PycharmProjects\Python3爬虫\chromedriver.exe'</span></span><br><span class="line">browser = webdriver.Chrome(executable_path=path)</span><br><span class="line">browser.get(<span class="string">'https://www.itrhx.com'</span>)</span><br><span class="line">browser.execute_script(<span class="string">'window.scrollTo(0, document.body.scrollHeight)'</span>)</span><br><span class="line">browser.execute_script(<span class="string">'alert("已到达最底端！")'</span>)</span><br></pre></td></tr></table></figure></p><p>以上代码实现了利用 execute_script() 方法将进度条下拉到最底部，然后弹出 alert 提示框。</p><h1 id="【4-9】禁用加载"><a href="#【4-9】禁用加载" class="headerlink" title=" 【4.9】禁用加载"></a><font color="#FF0000"> 【4.9】禁用加载</font></h1><p>使用Selenium 时，限制图片和 Javascript 执行，从而提高网页加载速度。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"></span><br><span class="line">path = <span class="string">r'F:\PycharmProjects\Python3爬虫\chromedriver.exe'</span></span><br><span class="line"></span><br><span class="line">options = webdriver.ChromeOptions()</span><br><span class="line">prefs = &#123;</span><br><span class="line">    <span class="string">'profile.default_content_setting_values'</span>: &#123;</span><br><span class="line">        <span class="string">'images'</span>: <span class="number">2</span>,</span><br><span class="line">        <span class="string">'notifications'</span> : <span class="number">2</span>,  <span class="comment"># 禁用弹窗</span></span><br><span class="line">        <span class="string">'javascript'</span>: <span class="number">2</span>  <span class="comment"># 2即为禁用的意思</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">options.add_experimental_option(<span class="string">'prefs'</span>, prefs)</span><br><span class="line">browser = webdriver.Chrome(executable_path=path, chrome_options=options)</span><br><span class="line">browser.get(<span class="string">'http://www.itrhx.com'</span>)</span><br></pre></td></tr></table></figure></p><h1 id="【4-10】获取节点信息"><a href="#【4-10】获取节点信息" class="headerlink" title=" 【4.10】获取节点信息"></a><font color="#FF0000"> 【4.10】获取节点信息</font></h1><p>通过 page_source 属性可以获取网页的源代码，然后可以使用解析库（如正则表达式、Beautiful Soup等）来提取相关信息，Selenium 已经提供了选择节点的方法，返回的是 WebElement 类型，它也有相关的方法和属性来直接提取节点信息，如属性、文本等。就不需要再次使用解析库来提取信息了</p><h1 id="【4-10-1】获取属性"><a href="#【4-10-1】获取属性" class="headerlink" title=" 【4.10.1】获取属性"></a><font color="#FF0000"> 【4.10.1】获取属性</font></h1><p>使用 get_attribute() 方法来获取节点的属性：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"></span><br><span class="line">path = <span class="string">r'F:\PycharmProjects\Python3爬虫\chromedriver.exe'</span></span><br><span class="line">browser = webdriver.Chrome(executable_path=path)</span><br><span class="line">url = <span class="string">'http://www.itrhx.com'</span></span><br><span class="line">browser.get(url)</span><br><span class="line">meta = browser.find_element_by_id(<span class="string">'header-meta'</span>)</span><br><span class="line">print(meta)</span><br><span class="line">print(meta.get_attribute(<span class="string">'class'</span>))</span><br></pre></td></tr></table></figure></p><p>输出结果：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;selenium.webdriver.remote.webelement.WebElement (session=<span class="string">"d03cdaa497441d2e2a5161139b4a7ea5"</span>, element=<span class="string">"83f8fff9-60d7-4e9a-ade3-a8e97c9f0844"</span>)&gt;</span><br><span class="line">meta</span><br></pre></td></tr></table></figure></p><h1 id="【4-10-2】获取文本值"><a href="#【4-10-2】获取文本值" class="headerlink" title=" 【4.10.2】获取文本值"></a><font color="#FF0000"> 【4.10.2】获取文本值</font></h1><p>每个 WebElement 节点都有 text 属性，直接调用这个属性就可以得到节点内部的文本信息，相当于 Beautiful Soup 的 get_text() 方法、pyquery 的 text() 方法<br>示例：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"></span><br><span class="line">path = <span class="string">r'F:\PycharmProjects\Python3爬虫\chromedriver.exe'</span></span><br><span class="line">browser = webdriver.Chrome(executable_path=path)</span><br><span class="line">url = <span class="string">'http://www.itrhx.com'</span></span><br><span class="line">browser.get(url)</span><br><span class="line">footer_info = browser.find_element_by_id(<span class="string">'footer'</span>)</span><br><span class="line">print(footer_info.text)</span><br></pre></td></tr></table></figure></p><p>输出结果：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Copyright <span class="number">2018</span><span class="number">-2019</span> TRHX<span class="string">'BLOG   |   鄂ICP备19003281号-4  |   本站已勉强存活了 376 天 20 小时 57 分 52 秒   |   站点地图  |   站长统计</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">PoweredHexo HostedGitHub DNRAliyun CDNjsDelivr ThemeMaterial X BY-NC-SA 4.0 Link996.ICU UV4898 PV22066 WordCount54.9k</span></span><br></pre></td></tr></table></figure></p><h1 id="【4-10-3】获取-ID、位置、标签名、大小"><a href="#【4-10-3】获取-ID、位置、标签名、大小" class="headerlink" title=" 【4.10.3】获取 ID、位置、标签名、大小"></a><font color="#FF0000"> 【4.10.3】获取 ID、位置、标签名、大小</font></h1><p>其他属性，比如 id 属性可以获取节点 id，location 属性可以获取该节点在页面中的相对位置，tag_name 属性可以获取标签名称，size 属性可以获取节点的大小等<br>示例：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"></span><br><span class="line">path = <span class="string">r'F:\PycharmProjects\Python3爬虫\chromedriver.exe'</span></span><br><span class="line">browser = webdriver.Chrome(executable_path=path)</span><br><span class="line">url = <span class="string">'http://www.itrhx.com'</span></span><br><span class="line">browser.get(url)</span><br><span class="line">readmore = browser.find_element_by_class_name(<span class="string">'readmore'</span>)</span><br><span class="line">print(readmore.id)</span><br><span class="line">print(readmore.location)</span><br><span class="line">print(readmore.tag_name)</span><br><span class="line">print(readmore.size)</span><br></pre></td></tr></table></figure></p><p>输出结果：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">7</span>df561d3<span class="number">-7</span>ea4<span class="number">-4</span>b90<span class="number">-96</span>aa<span class="number">-64044060</span>bb47</span><br><span class="line">&#123;<span class="string">'x'</span>: <span class="number">50</span>, <span class="string">'y'</span>: <span class="number">1063</span>&#125;</span><br><span class="line">div</span><br><span class="line">&#123;<span class="string">'height'</span>: <span class="number">39</span>, <span class="string">'width'</span>: <span class="number">465</span>&#125;</span><br></pre></td></tr></table></figure></p><h1 id="【4-11】延时等待"><a href="#【4-11】延时等待" class="headerlink" title=" 【4.11】延时等待"></a><font color="#FF0000"> 【4.11】延时等待</font></h1><p>在 Selenium 中，get() 方法会在网页框架加载结束后结束执行，某些页面有额外的 Ajax 请求，若此时立即获取 page_source，可能并不是浏览器完全加载完成的页面，这里需要延时等待一定时间，确保节点已经加载出来</p><h2 id="【4-11-1】隐式等待"><a href="#【4-11-1】隐式等待" class="headerlink" title=" 【4.11.1】隐式等待"></a><font color="#FF0000"> 【4.11.1】隐式等待</font></h2><p>当查找节点的时候，节点并没有立即出现，隐式等待将等待一段时间再查找该节点，使用 <code>implicitly_wait()</code> 方法可以实现隐式等待<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"></span><br><span class="line">path = <span class="string">r'F:\PycharmProjects\Python3爬虫\chromedriver.exe'</span></span><br><span class="line">browser = webdriver.Chrome(executable_path=path)</span><br><span class="line">browser.implicitly_wait(<span class="number">10</span>)</span><br><span class="line">browser.get(<span class="string">'https://www.itrhx.com'</span>)</span><br><span class="line">readmore = browser.find_element_by_class_name(<span class="string">'readmore'</span>)</span><br><span class="line">print(readmore)</span><br></pre></td></tr></table></figure></p><h2 id="【4-11-2】显式等待"><a href="#【4-11-2】显式等待" class="headerlink" title=" 【4.11.2】显式等待"></a><font color="#FF0000"> 【4.11.2】显式等待</font></h2><p>指定要查找的节点，然后指定一个最长等待时间。如果在规定时间内加载出来了这个节点，就立即返回查找的节点，果到了规定时间依然没有加载出该节点，则抛出超时异常<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.common.by <span class="keyword">import</span> By</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.support.ui <span class="keyword">import</span> WebDriverWait</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.support <span class="keyword">import</span> expected_conditions <span class="keyword">as</span> EC</span><br><span class="line"></span><br><span class="line">path = <span class="string">r'F:\PycharmProjects\Python3爬虫\chromedriver.exe'</span></span><br><span class="line">browser = webdriver.Chrome(executable_path=path)</span><br><span class="line">browser.implicitly_wait(<span class="number">10</span>)</span><br><span class="line">browser.get(<span class="string">'https://www.itrhx.com'</span>)</span><br><span class="line">wait = WebDriverWait(browser, <span class="number">10</span>)</span><br><span class="line">footer_info = wait.until(EC.presence_of_element_located((By.ID, <span class="string">'footer'</span>)))</span><br><span class="line">print(footer_info)</span><br></pre></td></tr></table></figure></p><p>引入 WebDriverWait 对象，指定最长等待时间，调用它的 until() 方法，传入要等待条件 expected_conditions。比如，这里传入了 presence_of_element_located 这个条件，代表节点出现的意思，其参数是节点的定位元组，也就是 ID 为 footer 的节点。</p><p>这样可以做到的效果就是，在 10 秒内如果 ID 为 footer 的节点成功加载出来，就返回该节点；如果超过 10 秒还没有加载出来，就抛出异常。</p><p>加载成功时输出结果：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;selenium.webdriver.remote.webelement.WebElement (session=<span class="string">"4ca7015891fded627ab680d9462e9361"</span>, element=<span class="string">"3a80235c-9824-420b-b827-662638422765"</span>)&gt;</span><br></pre></td></tr></table></figure></p><p>加载失败时输出结果：<br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">TimeoutException Traceback (most recent call last)</span><br><span class="line">&lt;ipython-input<span class="number">-4</span>-f3d73973b223&gt; <span class="keyword">in</span> &lt;module&gt;()</span><br><span class="line">      <span class="number">7</span> browser.get(<span class="string">'https://www.itrhx.com'</span>)</span><br><span class="line">      <span class="number">8</span> wait = WebDriverWait(browser, <span class="number">10</span>)</span><br><span class="line">----&gt; 9 input = wait.until(EC.presence_of_element_located((By.ID, 'footer')))</span><br></pre></td></tr></table></figure></p><h1 id="【4-12】Cookies"><a href="#【4-12】Cookies" class="headerlink" title=" 【4.12】Cookies"></a><font color="#FF0000"> 【4.12】Cookies</font></h1><p>使用 Selenium，可以方便地对 Cookies 进行获取、添加、删除等操作：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"></span><br><span class="line">path = <span class="string">r'F:\PycharmProjects\Python3爬虫\chromedriver.exe'</span></span><br><span class="line">browser = webdriver.Chrome(executable_path=path)</span><br><span class="line">browser.get(<span class="string">'https://www.zhihu.com/explore'</span>)</span><br><span class="line">print(browser.get_cookies())</span><br><span class="line">browser.add_cookie(&#123;<span class="string">'name'</span>: <span class="string">'TRHX'</span>, <span class="string">'domain'</span>: <span class="string">'www.zhihu.com'</span>, <span class="string">'value'</span>: <span class="string">'germey'</span>&#125;)</span><br><span class="line">print(browser.get_cookies())</span><br><span class="line">browser.delete_all_cookies()</span><br><span class="line">print(browser.get_cookies())</span><br></pre></td></tr></table></figure></p><p>访问知乎，加载完成后，浏览器已经生成了 Cookies。调用 get_cookies() 方法获取所有的 Cookies。然后再添加一个 Cookie，传入一个字典，有 name、domain 和 value 等内容。接下来，再次获取所有的 Cookies。可以发现，结果就多了这一项新加的 Cookie。最后，调用 delete_all_cookies() 方法删除所有的 Cookies。再重新获取，发现结果就为空了<br>输出结果：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[&#123;<span class="string">'domain'</span>: <span class="string">'zhihu.com'</span>, <span class="string">'expiry'</span>: <span class="number">1661065738.754333</span>, <span class="string">'httpOnly'</span>: <span class="keyword">False</span>, <span class="string">'name'</span>: <span class="string">'d_c0'</span>, <span class="string">'path'</span>: <span class="string">'/'</span>, <span class="string">'secure'</span>: <span class="keyword">False</span>, <span class="string">'value'</span>: <span class="string">'"AODi_Lod7g-PTrrXUgXb1N4MkbStCrbNlD4=|1566457741"'</span>&#125;, &#123;<span class="string">'domain'</span>: <span class="string">'zhihu.com'</span>, <span class="string">'httpOnly'</span>: <span class="keyword">False</span>, <span class="string">'name'</span>: <span class="string">'_xsrf'</span>, <span class="string">'path'</span>: <span class="string">'/'</span>, <span class="string">'secure'</span>: <span class="keyword">False</span>, <span class="string">'value'</span>: <span class="string">'aba68431-9daf-4b62-a67a-023c1a24f0e8'</span>&#125;, &#123;<span class="string">'domain'</span>: <span class="string">'zhihu.com'</span>, <span class="string">'expiry'</span>: <span class="number">1629529738.75427</span>, <span class="string">'httpOnly'</span>: <span class="keyword">False</span>, <span class="string">'name'</span>: <span class="string">'_zap'</span>, <span class="string">'path'</span>: <span class="string">'/'</span>, <span class="string">'secure'</span>: <span class="keyword">False</span>, <span class="string">'value'</span>: <span class="string">'b6f63cfc-a525-4ae6-a7bf-6384bd1e0548'</span>&#125;, &#123;<span class="string">'domain'</span>: <span class="string">'www.zhihu.com'</span>, <span class="string">'expiry'</span>: <span class="number">1566458637.754178</span>, <span class="string">'httpOnly'</span>: <span class="keyword">False</span>, <span class="string">'name'</span>: <span class="string">'tgw_l7_route'</span>, <span class="string">'path'</span>: <span class="string">'/'</span>, <span class="string">'secure'</span>: <span class="keyword">False</span>, <span class="string">'value'</span>: <span class="string">'116a747939468d99065d12a386ab1c5f'</span>&#125;]</span><br><span class="line">[&#123;<span class="string">'domain'</span>: <span class="string">'www.zhihu.com'</span>, <span class="string">'httpOnly'</span>: <span class="keyword">False</span>, <span class="string">'name'</span>: <span class="string">'TRHX'</span>, <span class="string">'path'</span>: <span class="string">'/'</span>, <span class="string">'secure'</span>: <span class="keyword">True</span>, <span class="string">'value'</span>: <span class="string">'germey'</span>&#125;, &#123;<span class="string">'domain'</span>: <span class="string">'zhihu.com'</span>, <span class="string">'expiry'</span>: <span class="number">1661065738.754333</span>, <span class="string">'httpOnly'</span>: <span class="keyword">False</span>, <span class="string">'name'</span>: <span class="string">'d_c0'</span>, <span class="string">'path'</span>: <span class="string">'/'</span>, <span class="string">'secure'</span>: <span class="keyword">False</span>, <span class="string">'value'</span>: <span class="string">'"AODi_Lod7g-PTrrXUgXb1N4MkbStCrbNlD4=|1566457741"'</span>&#125;, &#123;<span class="string">'domain'</span>: <span class="string">'zhihu.com'</span>, <span class="string">'httpOnly'</span>: <span class="keyword">False</span>, <span class="string">'name'</span>: <span class="string">'_xsrf'</span>, <span class="string">'path'</span>: <span class="string">'/'</span>, <span class="string">'secure'</span>: <span class="keyword">False</span>, <span class="string">'value'</span>: <span class="string">'aba68431-9daf-4b62-a67a-023c1a24f0e8'</span>&#125;, &#123;<span class="string">'domain'</span>: <span class="string">'zhihu.com'</span>, <span class="string">'expiry'</span>: <span class="number">1629529738.75427</span>, <span class="string">'httpOnly'</span>: <span class="keyword">False</span>, <span class="string">'name'</span>: <span class="string">'_zap'</span>, <span class="string">'path'</span>: <span class="string">'/'</span>, <span class="string">'secure'</span>: <span class="keyword">False</span>, <span class="string">'value'</span>: <span class="string">'b6f63cfc-a525-4ae6-a7bf-6384bd1e0548'</span>&#125;, &#123;<span class="string">'domain'</span>: <span class="string">'www.zhihu.com'</span>, <span class="string">'expiry'</span>: <span class="number">1566458637.754178</span>, <span class="string">'httpOnly'</span>: <span class="keyword">False</span>, <span class="string">'name'</span>: <span class="string">'tgw_l7_route'</span>, <span class="string">'path'</span>: <span class="string">'/'</span>, <span class="string">'secure'</span>: <span class="keyword">False</span>, <span class="string">'value'</span>: <span class="string">'116a747939468d99065d12a386ab1c5f'</span>&#125;]</span><br><span class="line">[&#123;<span class="string">'domain'</span>: <span class="string">'zhihu.com'</span>, <span class="string">'expiry'</span>: <span class="number">1644217741.489889</span>, <span class="string">'httpOnly'</span>: <span class="keyword">False</span>, <span class="string">'name'</span>: <span class="string">'_xsrf'</span>, <span class="string">'path'</span>: <span class="string">'/'</span>, <span class="string">'secure'</span>: <span class="keyword">False</span>, <span class="string">'value'</span>: <span class="string">'WNOjpDbNmz36B4nG1lzSAuPdTyORMX6J'</span>&#125;]</span><br></pre></td></tr></table></figure></p><h1 id="【4-13】前进与后退"><a href="#【4-13】前进与后退" class="headerlink" title=" 【4.13】前进与后退"></a><font color="#FF0000"> 【4.13】前进与后退</font></h1><p>使用 back() 方法后退，使用 forward() 方法前进，与浏览器的前进后退一样<br>示例：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line">path = <span class="string">r'F:\PycharmProjects\Python3爬虫\chromedriver.exe'</span></span><br><span class="line">browser = webdriver.Chrome(executable_path=path)</span><br><span class="line">browser.get(<span class="string">'https://www.itrhx.com/'</span>)</span><br><span class="line">browser.get(<span class="string">'https://www.baidu.com/'</span>)</span><br><span class="line">browser.get(<span class="string">'https://www.zhihu.com/'</span>)</span><br><span class="line">browser.back()</span><br><span class="line">time.sleep(<span class="number">1</span>)</span><br><span class="line">browser.forward()</span><br><span class="line">browser.close()</span><br></pre></td></tr></table></figure></p><h1 id="【4-14】选项卡"><a href="#【4-14】选项卡" class="headerlink" title=" 【4.14】选项卡"></a><font color="#FF0000"> 【4.14】选项卡</font></h1><p>和浏览器一样，在 Selenium 中也可以新建一个选项卡<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line">path = <span class="string">r'F:\PycharmProjects\Python3爬虫\chromedriver.exe'</span></span><br><span class="line">browser = webdriver.Chrome(executable_path=path)</span><br><span class="line">browser.get(<span class="string">'https://www.itrhx.com'</span>)</span><br><span class="line">browser.execute_script(<span class="string">'window.open()'</span>)</span><br><span class="line">print(browser.window_handles)</span><br><span class="line">browser.switch_to.window(browser.window_handles[<span class="number">1</span>])</span><br><span class="line">browser.get(<span class="string">'https://www.baidu.com'</span>)</span><br><span class="line">time.sleep(<span class="number">1</span>)</span><br><span class="line">browser.switch_to.window(browser.window_handles[<span class="number">0</span>])</span><br><span class="line">browser.get(<span class="string">'https://www.zhihu.com'</span>)</span><br></pre></td></tr></table></figure></p><p>首先访问我的博客，然后调用了 <code>execute_script()</code> 方法，传入 <code>window.open()</code> 这个 JavaScript 语句开启一个新的选项卡。再调用 <code>window_handles</code> 属性获取当前开启的所有选项卡，返回的是选项卡的代号列表。调用 <code>switch_to_window()</code> 方法来切换选项卡，其中参数是选项卡的代号。<br>输出的选项卡代号列表：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[<span class="string">'CDwindow-C9CADF1ED28CE44970655238552A8DCF'</span>, <span class="string">'CDwindow-538D7F81E467746B7BB2D9D82E2D036E'</span>]</span><br></pre></td></tr></table></figure></p>]]></content>
      
      
      <categories>
          
          <category> Python3 学习笔记 </category>
          
          <category> 爬虫学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 爬虫 </tag>
            
            <tag> Selenium </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python3 爬虫学习笔记 C03</title>
      <link href="/2019/08/23/A31-Python3-spider-C03/"/>
      <url>/2019/08/23/A31-Python3-spider-C03/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><blockquote><center><font color="#1BC3FB" size="4">Python3 爬虫学习笔记第三章 ——【Ajax 数据爬取】</font></center></blockquote><a id="more"></a><h1 id="【3-1】Ajax-简介"><a href="#【3-1】Ajax-简介" class="headerlink" title=" 【3.1】Ajax 简介"></a><font color="#FF0000"> 【3.1】Ajax 简介</font></h1><p>Ajax — Asynchronous Javascript And XML（异步 JavaScript 和 XML），是指一种创建交互式网页应用的网页开发技术。可以在不重新加载整个网页的情况下，对网页的某部分进行更新。</p><h1 id="【3-2】解析真实地址提取"><a href="#【3-2】解析真实地址提取" class="headerlink" title=" 【3.2】解析真实地址提取"></a><font color="#FF0000"> 【3.2】解析真实地址提取</font></h1><p>以豆瓣电影动作片排行榜为例，地址为：<a href="https://movie.douban.com/typerank?type_name=%E5%8A%A8%E4%BD%9C&amp;type=5&amp;interval_id=100:90&amp;action=" target="_blank" rel="noopener">https://movie.douban.com/typerank?type_name=%E5%8A%A8%E4%BD%9C&amp;type=5&amp;interval_id=100:90&amp;action=</a> ，首先使用常用方法来爬取电影信息：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">url = <span class="string">'https://movie.douban.com/typerank?type_name=%E5%8A%A8%E4%BD%9C&amp;type=5&amp;interval_id=100:90&amp;action='</span></span><br><span class="line"></span><br><span class="line">headers = &#123;<span class="string">"User-Agent"</span>: <span class="string">"Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/58.0.3029.110 Safari/537.36 SE 2.X MetaSr 1.0"</span>&#125;</span><br><span class="line">response = requests.get(url, headers=headers)</span><br><span class="line"></span><br><span class="line">print(response.text)</span><br></pre></td></tr></table></figure></p><p>得到的数据里面我们并没有找到电影相关信息：<br><img src="https://cdn.jsdelivr.net/gh/TRHX/ImageHosting/ITRHX-PIC/A31/1.png" alt="1"><br>再次分析页面，发现鼠标下滑的时候，页面不刷新，URL 也不变，但是会加载新数据，那么此处就运用了 Ajax，可以使用抓包工具或者浏览器控制台来捕获 Ajax 接口，获取其真实地址，XHR 是 Ajax 特殊的请求类型，返回的是 json 数据，利用浏览器控制台过滤 XHR，随便点击一条请求，可以看到其 Request URL，也就是真实地址，点击 Preview 就可以看到返回的 json 数据。<br><img src="https://cdn.jsdelivr.net/gh/TRHX/ImageHosting/ITRHX-PIC/A31/2.png" alt="2"><br><img src="https://cdn.jsdelivr.net/gh/TRHX/ImageHosting/ITRHX-PIC/A31/3.png" alt="3"><br>同样，我们可以使用 Fiddler 抓包软件抓取 Ajax 接口：<br><img src="https://cdn.jsdelivr.net/gh/TRHX/ImageHosting/ITRHX-PIC/A31/4.png" alt="4"><br>分析其真实地址为：<a href="https://movie.douban.com/j/chart/top_list?type=5&amp;interval_id=100%3A90&amp;action=&amp;start=20&amp;limit=20" target="_blank" rel="noopener">https://movie.douban.com/j/chart/top_list?type=5&amp;interval_id=100%3A90&amp;action=&amp;start=20&amp;limit=20</a> ，多下滑几次，只有 start 参数发生了改变，观察变化可知：每一次页面将多出20个电影信息，start 为从第几个电影开始，由此就不难进行数据抓取了</p><p>代码：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">url = <span class="string">'https://movie.douban.com/j/chart/top_list?type=5&amp;interval_id=100%3A90&amp;action=&amp;'</span></span><br><span class="line"></span><br><span class="line">page = int(input(<span class="string">'请输入想要第几页的数据：'</span>))</span><br><span class="line">data = &#123;</span><br><span class="line"><span class="string">'start'</span>: (page - <span class="number">1</span>)*<span class="number">20</span>,</span><br><span class="line"><span class="string">'limit'</span>: <span class="string">'20'</span>,</span><br><span class="line">&#125;</span><br><span class="line">headers = &#123;</span><br><span class="line"><span class="string">'User-Agent'</span>: <span class="string">'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/73.0.3683.86 Safari/537.36'</span>,</span><br><span class="line">&#125;</span><br><span class="line">response = requests.get(url, params=data, headers=headers)</span><br><span class="line">print(response.text)</span><br></pre></td></tr></table></figure></p><p>运行代码即可得到电影排行信息：<br><img src="https://cdn.jsdelivr.net/gh/TRHX/ImageHosting/ITRHX-PIC/A31/5.png" alt="5"></p>]]></content>
      
      
      <categories>
          
          <category> Python3 学习笔记 </category>
          
          <category> 爬虫学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 爬虫 </tag>
            
            <tag> Ajax </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python3 爬虫学习笔记 C02</title>
      <link href="/2019/08/23/A30-Python3-spider-C02/"/>
      <url>/2019/08/23/A30-Python3-spider-C02/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><blockquote><center><font color="#1BC3FB" size="4">Python3 爬虫学习笔记第二章 ——【基本库 requests 的使用】</font></center></blockquote><a id="more"></a><h1 id="【2-1】-requests-简介"><a href="#【2-1】-requests-简介" class="headerlink" title=" 【2.1】 requests 简介"></a><font color="#FF0000"> 【2.1】 requests 简介</font></h1><p>在 Python 中有两种方式可以发送 HTTP 请求，分别是自带的 urllib 库和第三方的 requests 库</p><blockquote><p>requests 模块需要使用 pip install 命令安装安装，相比 urllib，它的 API 更加人性化，使用 requests 可以让 Cookies、登录验证、代理设置等操作更加简便，官网介绍：<a href="http://cn.python-requests.org" target="_blank" rel="noopener">http://cn.python-requests.org</a></p></blockquote><h1 id="【2-2】-requests-基本用法"><a href="#【2-2】-requests-基本用法" class="headerlink" title=" 【2.2】 requests 基本用法"></a><font color="#FF0000"> 【2.2】 requests 基本用法</font></h1><p>示例：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line">r = requests.get(<span class="string">'https://www.itrhx.com/'</span>)</span><br><span class="line">print(type(r))</span><br><span class="line">print(r.encoding)</span><br><span class="line">print(r.status_code)</span><br><span class="line">print(r.cookies)</span><br><span class="line">print(r.json)</span><br><span class="line">print(r.text)</span><br><span class="line">print(r.content)</span><br></pre></td></tr></table></figure></p><p>输出结果：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;<span class="class"><span class="keyword">class</span> '<span class="title">requests</span>.<span class="title">models</span>.<span class="title">Response</span>'&gt;</span></span><br><span class="line"><span class="class"><span class="title">utf</span>-8</span></span><br><span class="line"><span class="class">200</span></span><br><span class="line"><span class="class">&lt;<span class="title">RequestsCookieJar</span>[]&gt;</span></span><br><span class="line"><span class="class">&lt;<span class="title">bound</span> <span class="title">method</span> <span class="title">Response</span>.<span class="title">json</span> <span class="title">of</span> &lt;<span class="title">Response</span> [200]&gt;&gt;</span></span><br><span class="line"><span class="class">&lt;!<span class="title">DOCTYPE</span> <span class="title">html</span>&gt;</span></span><br><span class="line"><span class="class">&lt;<span class="title">html</span>&gt;</span></span><br><span class="line"><span class="class">&lt;<span class="title">head</span>&gt;</span></span><br><span class="line">  &lt;meta charset="utf-8"&gt;</span><br><span class="line">  ......</span><br></pre></td></tr></table></figure></p><ul><li>r.encoding：服务器内容使用的文本编码；</li><li>r.status_code：响应状态码，200 代表成功，4xx 代表客户端错误，5xx 服务器响应错误；</li><li>r.cookies：返回 Cookies；</li><li>r.json：Requests 内置 JSON 解码器；</li><li>r.text：服务器响应内容，根据响应头部的字符编码自动解码；</li><li>r.content：字节方式的响应体，自动解码 gzip 和 deflate 编码的响应。</li></ul><h1 id="【2-3】-requests-构建-GET-请求"><a href="#【2-3】-requests-构建-GET-请求" class="headerlink" title=" 【2.3】 requests 构建 GET 请求"></a><font color="#FF0000"> 【2.3】 requests 构建 GET 请求</font></h1><h2 id="【2-3-1】-基本用法"><a href="#【2-3-1】-基本用法" class="headerlink" title=" 【2.3.1】 基本用法"></a><font color="#FF0000"> 【2.3.1】 基本用法</font></h2><p>示例：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">data = &#123;</span><br><span class="line">    <span class="string">'name'</span>: <span class="string">'TRHX'</span>,</span><br><span class="line">    <span class="string">'age'</span>: <span class="string">'20'</span></span><br><span class="line">&#125;</span><br><span class="line">r = requests.get(<span class="string">"http://httpbin.org/get"</span>, params=data)</span><br><span class="line">print(<span class="string">'编码后的URL：'</span>, r.url)</span><br><span class="line">print(<span class="string">'字符串方式的响应体：'</span>, r.text)</span><br></pre></td></tr></table></figure></p><p>输出结果：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">编码后的URL： http://httpbin.org/get?name=TRHX&amp;age=20</span><br><span class="line">字符串方式的响应体： &#123;</span><br><span class="line">  <span class="string">"args"</span>: &#123;</span><br><span class="line">    <span class="string">"age"</span>: <span class="string">"20"</span>, </span><br><span class="line">    <span class="string">"name"</span>: <span class="string">"TRHX"</span></span><br><span class="line">  &#125;, </span><br><span class="line">  <span class="string">"headers"</span>: &#123;</span><br><span class="line">    <span class="string">"Accept"</span>: <span class="string">"*/*"</span>, </span><br><span class="line">    <span class="string">"Accept-Encoding"</span>: <span class="string">"gzip, deflate"</span>, </span><br><span class="line">    <span class="string">"Host"</span>: <span class="string">"httpbin.org"</span>, </span><br><span class="line">    <span class="string">"User-Agent"</span>: <span class="string">"python-requests/2.22.0"</span></span><br><span class="line">  &#125;, </span><br><span class="line">  <span class="string">"origin"</span>: <span class="string">"171.115.102.230, 171.115.102.230"</span>, </span><br><span class="line">  <span class="string">"url"</span>: <span class="string">"https://httpbin.org/get?name=TRHX&amp;age=20"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="【2-3-2】-二进制数据抓取"><a href="#【2-3-2】-二进制数据抓取" class="headerlink" title=" 【2.3.2】 二进制数据抓取"></a><font color="#FF0000"> 【2.3.2】 二进制数据抓取</font></h2><p>以抓取 GitHub 站点图标为例：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">r = requests.get(<span class="string">"https://github.com/favicon.ico"</span>)</span><br><span class="line"><span class="keyword">with</span> open(<span class="string">'favicon.ico'</span>, <span class="string">'wb'</span>) <span class="keyword">as</span> f:</span><br><span class="line">    f.write(r.content)</span><br></pre></td></tr></table></figure></p><p>该代码将会保存站点图标到本地，其他的，比如音频，视频文件都是由二进制码组成的，皆可使用该方法</p><h2 id="【2-3-3】-添加-headers"><a href="#【2-3-3】-添加-headers" class="headerlink" title=" 【2.3.3】 添加 headers"></a><font color="#FF0000"> 【2.3.3】 添加 headers</font></h2><p>headers 的作用：部分页面禁止 Python 爬虫对其进行爬取，而添加 headers 就可以模拟成浏览器取访问网站，实现数据的爬取，headers 可以在任意网页 F12 检查控制台里面找到，headers 最重要的是 “User-Agent” 字段</p><p><fancybox><br><img src="https://cdn.jsdelivr.net/gh/TRHX/ImageHosting/ITRHX-PIC/A30/Snipaste_2019-08-19_17-10-11.png" alt="01"><br></fancybox><br>以为例知乎，只有加了 headers 才能正常爬取，否则会返回 400 Bad Request 没有任何数据<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">headers = &#123;<span class="string">'User-Agent'</span>: <span class="string">'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/75.0.3770.142 Safari/537.36'</span></span><br><span class="line">&#125;</span><br><span class="line">r = requests.get(<span class="string">"https://www.zhihu.com/explore"</span>, headers=headers)</span><br><span class="line">print(r.text)</span><br></pre></td></tr></table></figure></p><h1 id="【2-4】-requests-构建-POST-请求"><a href="#【2-4】-requests-构建-POST-请求" class="headerlink" title=" 【2.4】 requests 构建 POST 请求"></a><font color="#FF0000"> 【2.4】 requests 构建 POST 请求</font></h1><p>示例：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">data = &#123;<span class="string">'name'</span>: <span class="string">'TRHX'</span>, <span class="string">'age'</span>: <span class="string">'20'</span>&#125;</span><br><span class="line">r = requests.post(<span class="string">"http://httpbin.org/post"</span>, data=data)</span><br><span class="line">print(r.text)</span><br></pre></td></tr></table></figure></p><p>输出结果：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="string">"args"</span>: &#123;&#125;, </span><br><span class="line">  <span class="string">"data"</span>: <span class="string">""</span>, </span><br><span class="line">  <span class="string">"files"</span>: &#123;&#125;, </span><br><span class="line">  <span class="string">"form"</span>: &#123;</span><br><span class="line">    <span class="string">"age"</span>: <span class="string">"22"</span>, </span><br><span class="line">    <span class="string">"name"</span>: <span class="string">"germey"</span></span><br><span class="line">  &#125;, </span><br><span class="line">  <span class="string">"headers"</span>: &#123;</span><br><span class="line">    <span class="string">"Accept"</span>: <span class="string">"*/*"</span>, </span><br><span class="line">    <span class="string">"Accept-Encoding"</span>: <span class="string">"gzip, deflate"</span>, </span><br><span class="line">    <span class="string">"Content-Length"</span>: <span class="string">"18"</span>, </span><br><span class="line">    <span class="string">"Content-Type"</span>: <span class="string">"application/x-www-form-urlencoded"</span>, </span><br><span class="line">    <span class="string">"Host"</span>: <span class="string">"httpbin.org"</span>, </span><br><span class="line">    <span class="string">"User-Agent"</span>: <span class="string">"python-requests/2.22.0"</span></span><br><span class="line">  &#125;, </span><br><span class="line">  <span class="string">"json"</span>: null, </span><br><span class="line">  <span class="string">"origin"</span>: <span class="string">"171.115.102.230, 171.115.102.230"</span>, </span><br><span class="line">  <span class="string">"url"</span>: <span class="string">"https://httpbin.org/post"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>有关 POST 和 GET 两种请求的一些区别：</p><ul><li>POST 更加安全，不会作为 URL 的一部分，不会被缓存，保存在服务器日志、以及浏览器浏览记录中；</li><li>POST 发送的数据更大，GET 有 URL 长度限制；</li><li>POST 可以发送更多的数据类型，GET 只能发送 ASCII 字符；</li><li>POST 比 GET 慢；</li><li>POST 查询参数在 WebForms 保存，GET 查询参数在 QueryString 保存；</li><li>POST 用数据的修改和写入，GET 一般用于搜索排序和筛选之类的操作。</li></ul><h1 id="【2-5】-requests-高级用法"><a href="#【2-5】-requests-高级用法" class="headerlink" title=" 【2.5】 requests 高级用法"></a><font color="#FF0000"> 【2.5】 requests 高级用法</font></h1><h2 id="【2-5-1】-上传文件"><a href="#【2-5-1】-上传文件" class="headerlink" title=" 【2.5.1】 上传文件"></a><font color="#FF0000"> 【2.5.1】 上传文件</font></h2><p>示例：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">files = &#123;<span class="string">'file'</span>: open(<span class="string">'test.png'</span>, <span class="string">'rb'</span>)&#125;</span><br><span class="line">r = requests.post(<span class="string">'http://httpbin.org/post'</span>, files=files)</span><br><span class="line">print(r.text)</span><br></pre></td></tr></table></figure></p><p>输出结果：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="string">"args"</span>: &#123;&#125;, </span><br><span class="line">  <span class="string">"data"</span>: <span class="string">""</span>, </span><br><span class="line">  <span class="string">"files"</span>: &#123;</span><br><span class="line">    <span class="string">"file"</span>: <span class="string">"data:application/octet-stream;base64,iVBOR......"</span></span><br><span class="line">  &#125;, </span><br><span class="line">  <span class="string">"form"</span>: &#123;&#125;, </span><br><span class="line">  <span class="string">"headers"</span>: &#123;</span><br><span class="line">    <span class="string">"Accept"</span>: <span class="string">"*/*"</span>, </span><br><span class="line">    <span class="string">"Accept-Encoding"</span>: <span class="string">"gzip, deflate"</span>, </span><br><span class="line">    <span class="string">"Content-Length"</span>: <span class="string">"81383"</span>, </span><br><span class="line">    <span class="string">"Content-Type"</span>: <span class="string">"multipart/form-data; boundary=e36a8686cd77c79dc02bfe9d1b010f08"</span>, </span><br><span class="line">    <span class="string">"Host"</span>: <span class="string">"httpbin.org"</span>, </span><br><span class="line">    <span class="string">"User-Agent"</span>: <span class="string">"python-requests/2.22.0"</span></span><br><span class="line">  &#125;, </span><br><span class="line">  <span class="string">"json"</span>: null, </span><br><span class="line">  <span class="string">"origin"</span>: <span class="string">"171.115.102.230, 171.115.102.230"</span>, </span><br><span class="line">  <span class="string">"url"</span>: <span class="string">"https://httpbin.org/post"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="【2-5-2】-使用-Cookies"><a href="#【2-5-2】-使用-Cookies" class="headerlink" title=" 【2.5.2】 使用 Cookies"></a><font color="#FF0000"> 【2.5.2】 使用 Cookies</font></h2><p>对于需要登录后才能获取数据的网页，可以将账号登录的 Cookies 添加到 headers 来实现网页登录爬取，Cookies 可以抓包获取，代码示例：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">headers = &#123;</span><br><span class="line">    <span class="string">'Cookie'</span>: <span class="string">'xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx'</span>,</span><br><span class="line">    <span class="string">'Host'</span>: <span class="string">'www.zhihu.com'</span>,</span><br><span class="line">    <span class="string">'User-Agent'</span>: <span class="string">'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/75.0.3770.142 Safari/537.36'</span>,</span><br><span class="line">&#125;</span><br><span class="line">r = requests.get(<span class="string">'https://www.zhihu.com'</span>, headers=headers)</span><br><span class="line">print(r.text)</span><br></pre></td></tr></table></figure></p><h2 id="【2-5-3】-会话维持"><a href="#【2-5-3】-会话维持" class="headerlink" title=" 【2.5.3】 会话维持"></a><font color="#FF0000"> 【2.5.3】 会话维持</font></h2><ul><li><p>背景介绍：利用 get() 或者 post() 方法来模拟网页请求，相当于是不同的会话，可以理解为用两个浏览器打开了不同的网页；</p></li><li><p>运用场景：首先使用 post() 方法登录网页，然后再使用 get() 方法请求某个页面信息，如果不利用会话维持，将无法获取页面数据</p></li><li><p>维持方法：①两次请求设置一样的 cookies，缺点：繁琐；②使用 Session 对象。</p><p>Session 对象使用示例：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"> <span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">s = requests.Session()</span><br><span class="line">s.get(<span class="string">'http://httpbin.org/cookies/set/number/123456789'</span>)</span><br><span class="line">r = s.get(<span class="string">'http://httpbin.org/cookies'</span>)</span><br><span class="line">print(r.text)</span><br></pre></td></tr></table></figure></li></ul><p>输出结果成功获取到设置的 cookies：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="string">"cookies"</span>: &#123;</span><br><span class="line">    <span class="string">"number"</span>: <span class="string">"123456789"</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="【2-5-4】-SSL-证书验证"><a href="#【2-5-4】-SSL-证书验证" class="headerlink" title=" 【2.5.4】 SSL 证书验证"></a><font color="#FF0000"> 【2.5.4】 SSL 证书验证</font></h2><blockquote><p>SSL 证书是数字证书的一种，由受信任的数字证书颁发机构 CA 在验证服务器身份后颁发，具有服务器身份验证和数据传输加密功能，网站带有 HTTPS 就表明有 SSL 证书</p></blockquote><p>requests 提供了证书验证的功能。当发送 HTTP 请求的时候，它会检查 SSL 证书，verify 参数可以控制是否检查此证书。如果不加 verify 参数，默认为 True，会自动验证。当一个页面的 SSL 证书没有被官方机构认证时，打开页面就会提示“您的连接不是私密连接”，如果没有设置 verify 参数，将会报以下错误：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">requests.exceptions.SSLError: (<span class="string">"bad handshake: Error([('SSL routines', 'tls_process_server_certificate', 'certificate verify failed')],)"</span>,)</span><br></pre></td></tr></table></figure></p><p>设置 verify 参数代码示例：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">response = requests.get(<span class="string">'https://www.itrhx.com'</span>, verify=<span class="keyword">False</span>)</span><br><span class="line">print(response.text)</span><br></pre></td></tr></table></figure></p><h2 id="【2-5-5】-设置代理"><a href="#【2-5-5】-设置代理" class="headerlink" title=" 【2.5.5】 设置代理"></a><font color="#FF0000"> 【2.5.5】 设置代理</font></h2><p>为什么要设置代理：某些网页有反爬虫机制，频繁请求网页就会出现验证码等，还有可能直接封掉 IP，导致爬取失败；这种情况下就可以设置 proxies 参数。<br>示例：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">proxies = &#123;</span><br><span class="line">  <span class="string">'http'</span>: <span class="string">'http://10.10.1.10:1010'</span>,</span><br><span class="line">  <span class="string">'https'</span>: <span class="string">'http://10.10.1.10:1020'</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">requests.get(<span class="string">'https://www.itrhx.com'</span>, proxies=proxies)</span><br></pre></td></tr></table></figure></p><p>免费代理可在<a href="https://www.xicidaili.com/" target="_blank" rel="noopener">西刺代理</a>找到</p><h2 id="【2-5-6】-超时设置"><a href="#【2-5-6】-超时设置" class="headerlink" title=" 【2.5.6】 超时设置"></a><font color="#FF0000"> 【2.5.6】 超时设置</font></h2><p>与 urllib.request.urlopen() 类似，requests 也可以设置 timeout 参数，请求分为两个阶段：连接和读取</p><p>设置连接和读取时间总和：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">r = requests.get(<span class="string">'https://www.itrhx.com'</span>, timeout=<span class="number">1</span>)</span><br><span class="line">print(r.status_code)</span><br></pre></td></tr></table></figure><p>分别设置连接和读取时间：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">r = requests.get(<span class="string">'https://www.itrhx.com'</span>, timeout=(<span class="number">5</span>, <span class="number">10</span>))</span><br><span class="line">print(r.status_code)</span><br></pre></td></tr></table></figure></p><p>永久等待：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line"><span class="comment"># 两种方法实现</span></span><br><span class="line"><span class="comment"># r = requests.get('https://www.itrhx.com')</span></span><br><span class="line">r = requests.get(<span class="string">'https://www.itrhx.com'</span>, timeout=<span class="keyword">None</span>)</span><br><span class="line">print(r.status_code)</span><br></pre></td></tr></table></figure></p>]]></content>
      
      
      <categories>
          
          <category> Python3 学习笔记 </category>
          
          <category> 爬虫学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 爬虫 </tag>
            
            <tag> requests </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python3 爬虫学习笔记 C01</title>
      <link href="/2019/08/23/A29-Python3-spider-C01/"/>
      <url>/2019/08/23/A29-Python3-spider-C01/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><blockquote><center><font color="#1BC3FB" size="4">Python3 爬虫学习笔记第一章 ——【基本库 urllib 的使用】</font></center></blockquote><a id="more"></a><h1 id="【1-1】-urllib-简介"><a href="#【1-1】-urllib-简介" class="headerlink" title=" 【1.1】 urllib 简介"></a><font color="#FF0000"> 【1.1】 urllib 简介</font></h1><p>在 Python 中有两种方式可以发送 HTTP 请求，分别是自带的 urllib 库和第三方的 requests 库</p><blockquote><p>urllib 库：Python 内置的 HTTP 请求库，无需额外安装即可使用；Python 2 中有 urllib 和 urllib2 两个库来实现请求的发送，Python 3 中统一为 urllib。官方文档：<a href="https://docs.python.org/3/library/urllib.html" target="_blank" rel="noopener">https://docs.python.org/3/library/urllib.html</a></p></blockquote><font color="#FF0000">urllib 所包含的常用模块：</font><ul><li>urllib.request：模拟发送请求；</li><li>urllib.error：异常处理模块，用于捕获异常；</li><li>urllib.parse：解析、拆分、合并URL；</li><li>urllib.robotparser：读取网站的 robots.txt 文件，判断哪些内容可以爬取。</li></ul><font color="#FF0000">urllib.request 所包含的常用方法：</font><ul><li>urllib.request.urlopen()：打开网址URL，这可以是一个字符串或一个 Request对象；</li><li>urllib.request.Request()：在请求的时候传入一些 headers 等信息；</li><li>urllib.request.urlretrieve()：将获取的URL的内容写到文件目录中去。</li></ul><font color="#FF0000">urllib.error 所包含的两个异常：</font><ul><li>URLError：继承自 OSError 类，是 error 异常模块的基类，由 request 模块产生的异常都可以通过捕获这个类来处理。</li><li>HTTPError：是 URLError 的子类，专门用来处理 HTTP 请求错误，比如认证请求失败等。</li></ul><font color="#FF0000">urllib.parse 所包含的常用方法：</font><ul><li>urllib.parse.urlencode()：将字典参数序列化为 GET 请求参数；</li><li>urllib.parse.parse_qs()：将 GET 请求参数反序列化转回字典；</li><li>urllib.parse.parse_qsl()：将参数转化为元组组成的列表；</li><li>urllib.parse.urlparse()：对 URL 进行分段（返回6个结果）；</li><li>urllib.parse.urlunparse()：对 URL 进行组合（长度必须为6）；</li><li>urllib.parse.urlsplit()：对 URL 进行分段（不单独解析params部分，返回5个结果）；</li><li>urllib.parse.urlunsplit()：对 URL 进行组合（长度必须为5）；</li><li>urllib.parse.urljoin()：对 URL 进行组合（没有长度限制，给定两个参数，自动分析 scheme、netloc 和 path 这 3 个内容并对新链接缺失的部分进行补充，最后返回结果）；</li><li>urllib.parse.quote()：将内容转化为 URL 编码格式；</li><li>urllib.parse.unquote()：对 URL 进行解码。</li></ul><font color="#FF0000">urllib.robotparser 所包含的类：</font><ul><li>RobotFileParser：根据网站的 robots.txt 文件来判断一个爬取爬虫是否有权限来爬取这个网页</li></ul><h1 id="【1-2】-urllib-request-发送请求"><a href="#【1-2】-urllib-request-发送请求" class="headerlink" title=" 【1.2】 urllib.request 发送请求"></a><font color="#FF0000"> 【1.2】 urllib.request 发送请求</font></h1><h2 id="【1-2-1】-urllib-request-urlopen"><a href="#【1-2-1】-urllib-request-urlopen" class="headerlink" title="【1.2.1】 urllib.request.urlopen()"></a><font color="#FF0000">【1.2.1】 urllib.request.urlopen()</font></h2><h3 id="【1-2-1-1】-基本使用方法"><a href="#【1-2-1-1】-基本使用方法" class="headerlink" title="【1.2.1.1】 基本使用方法"></a><font color="#FF0000">【1.2.1.1】 基本使用方法</font></h3><p>urlopen() 函数的 API：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">urllib.request.urlopen(url, data=<span class="keyword">None</span>, [timeout,]*, cafile=<span class="keyword">None</span>, capath=<span class="keyword">None</span>, cadefault=<span class="keyword">False</span>, context=<span class="keyword">None</span>)</span><br></pre></td></tr></table></figure></p><p>基本使用：运行以下代码可得到 <a href="https://www.itrhx.com/">https://www.itrhx.com/</a> 的网页源代码：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> urllib.request</span><br><span class="line"></span><br><span class="line">response = urllib.request.urlopen(<span class="string">'https://www.itrhx.com/'</span>)</span><br><span class="line">print(response.read().decode(<span class="string">'utf-8'</span>))</span><br></pre></td></tr></table></figure></p><p>输出响应对象的类型和属性：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> urllib.request</span><br><span class="line"></span><br><span class="line">response = urllib.request.urlopen(<span class="string">'https://www.itrhx.com/'</span>)</span><br><span class="line">print(type(response))            <span class="comment"># 响应类型</span></span><br><span class="line">print(response.status)           <span class="comment"># 返回结果的状态码，200代表请求成功</span></span><br><span class="line">print(response.getheaders())       <span class="comment"># 响应的头信息</span></span><br><span class="line">print(response.getheader(<span class="string">'Server'</span>))  <span class="comment"># 获取响应头的 server 值</span></span><br></pre></td></tr></table></figure></p><p>运行结果：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;<span class="class"><span class="keyword">class</span> '<span class="title">http</span>.<span class="title">client</span>.<span class="title">HTTPResponse</span>'&gt;</span></span><br><span class="line"><span class="class">200</span></span><br><span class="line">[('Content-Type', 'text/html; charset=utf-8'), ('Server', 'GitHub.com'), ('Last-Modified', 'Sat, 17 Aug 2019 12:16:48 GMT'), ('ETag', '"5d57f030-10863"'), ('Access-Control-Allow-Origin', '*'), ('Expires', 'Sat, 17 Aug 2019 19:41:25 GMT'), ('Cache-Control', 'max-age=600'), ('X-Proxy-Cache', 'MISS'), ('X-GitHub-Request-Id', 'C748:735D:5B7461:619B95:5D58560B'), ('Content-Length', '67683'), ('Accept-Ranges', 'bytes'), ('Date', 'Sun, 18 Aug 2019 13:28:44 GMT'), ('Via', '1.1 varnish'), ('Age', '228'), ('Connection', 'close'), ('X-Served-By', 'cache-tyo19931-TYO'), ('X-Cache', 'HIT'), ('X-Cache-Hits', '1'), ('X-Timer', 'S1566134924.190474,VS0,VE0'), ('Vary', 'Accept-Encoding'), ('X-Fastly-Request-ID', '25a69f8130fc9cae412d28990a724543d7d05e8b')]</span><br><span class="line">GitHub.com</span><br></pre></td></tr></table></figure></p><h3 id="【1-2-1-2】-添加参数"><a href="#【1-2-1-2】-添加参数" class="headerlink" title="【1.2.1.2】 添加参数"></a><font color="#FF0000">【1.2.1.2】 添加参数</font></h3><p>根据 urlopen() 函数的 API 可知，除了最基本的 URL 参数以外，我们还可以传递其他内容，比如 data（附加数据）、timeout（超时时间）等，以下用 data 和 timeout 参数举例说明。</p><h4 id="●-data-参数"><a href="#●-data-参数" class="headerlink" title="● data 参数"></a><font color="#FF0000">● data 参数</font></h4><p>如果要添加 data 参数，需要使用 bytes 方法将参数转化为字节流编码格式的内容，即 bytes 类型。另外，如果传递了这个参数，则它的请求方式就不再是 GET 方式，而是 POST 方式。代码示例：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> urllib.parse</span><br><span class="line"><span class="keyword">import</span> urllib.request</span><br><span class="line"></span><br><span class="line">data = bytes(urllib.parse.urlencode(&#123;<span class="string">'word'</span>: <span class="string">'hello'</span>&#125;), encoding=<span class="string">'utf8'</span>)</span><br><span class="line">response = urllib.request.urlopen(<span class="string">'http://httpbin.org/post'</span>, data=data)</span><br><span class="line">print(response.read())</span><br></pre></td></tr></table></figure></p><p>httpbin.org 站点提供 HTTP 请求测试，<a href="http://httpbin.org/post" target="_blank" rel="noopener">http://httpbin.org/post</a> 用于测试 POST 请求，示例中传递一个值为 hello 的 word 参数。使用 bytes 方法，将其转码成 bytes（字节流）类型。该方法的第一个参数需要是 str（字符串）类型，需要用 urllib.parse 模块里的 urlencode 方法来将参数字典转化为字符串；第二个参数指定编码格式为 utf8，运行结果：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">b'&#123;</span></span><br><span class="line"><span class="string">"args": &#123;&#125;,</span></span><br><span class="line"><span class="string">"data": "", </span></span><br><span class="line"><span class="string">"files": &#123;&#125;,</span></span><br><span class="line"><span class="string">"form": &#123;</span></span><br><span class="line"><span class="string">"word": "hello"</span></span><br><span class="line"><span class="string">&#125;,</span></span><br><span class="line"><span class="string">"headers": &#123;</span></span><br><span class="line"><span class="string">"Accept-Encoding": "identity", </span></span><br><span class="line"><span class="string">"Content-Length": "10",</span></span><br><span class="line"><span class="string">"Content-Type": "application/x-www-form-urlencoded",</span></span><br><span class="line"><span class="string">"Host": "httpbin.org",</span></span><br><span class="line"><span class="string">"User-Agent": "Python-urllib/3.6"</span></span><br><span class="line"><span class="string">&#125;, </span></span><br><span class="line"><span class="string">"json": null, </span></span><br><span class="line"><span class="string">"origin": "171.115.101.10, 171.115.101.10", </span></span><br><span class="line"><span class="string">"url": "https://httpbin.org/post"</span></span><br><span class="line"><span class="string">&#125;'</span></span><br></pre></td></tr></table></figure></p><h4 id="●-timeout-参数"><a href="#●-timeout-参数" class="headerlink" title="● timeout 参数"></a><font color="#FF0000">● timeout 参数</font></h4><p>举例：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> urllib.request</span><br><span class="line"></span><br><span class="line">response = urllib.request.urlopen(<span class="string">'http://httpbin.org/get'</span>, timeout=<span class="number">0.1</span>)  </span><br><span class="line">print(response.read())</span><br></pre></td></tr></table></figure></p><p>运行结果：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line">During handling of the above exception, another exception occurred:</span><br><span class="line"></span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">"C:/Users/Lenovo/Desktop/1.py"</span>, line <span class="number">2</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">    response = urllib.request.urlopen(<span class="string">'http://httpbin.org/get'</span>, timeout=<span class="number">0.1</span>)</span><br><span class="line"> ...</span><br><span class="line">urllib.error.URLError: &lt;urlopen error timed out&gt;</span><br></pre></td></tr></table></figure></p><p>timeout 设置为0.1，0.1秒过后服务器没有响应，便会抛出 URLError 异常<br>进阶：使用 try except 语句抛出异常</p><h2 id="【1-2-2】-urllib-request-Request"><a href="#【1-2-2】-urllib-request-Request" class="headerlink" title="【1.2.2】 urllib.request.Request()"></a><font color="#FF0000">【1.2.2】 urllib.request.Request()</font></h2><p>Request() 方法可以在请求的时候传入一些 data、headers 等信息<br>Request() 的构造方法：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">urllib</span>.<span class="title">request</span>.<span class="title">Request</span><span class="params">(url, data=None, headers=&#123;&#125;, origin_req_host=None, unverifiable=False, method=None)</span></span></span><br></pre></td></tr></table></figure></p><p>构造方法各个参数的解释：</p><ul><li><p>url：用于请求 URL，这是必传参数，其他都是可选参数。</p></li><li><p>data：如果要传，必须传 bytes（字节流）类型的。如果它是字典，可以先用 urllib.parse 模块里的 urlencode() 编码。</p></li><li><p>headers：是一个字典，它就是请求头，可以在构造请求时通过 headers 参数直接构造，也可以通过调用请求实例的 add_header() 方法添加。添加请求头最常用的用法就是通过修改 User-Agent 来伪装浏览器，默认的 User-Agent 是 Python-urllib，我们可以通过修改它来伪装浏览器。</p></li><li><p>origin_req_host：指的是请求方的 host 名称或者 IP 地址。</p></li><li><p>unverifiable：表示这个请求是否是无法验证的，默认是 False，意思就是说用户没有足够权限来选择接收这个请求的结果。例如，我们请求一个 HTML 文档中的图片，但是我们没有自动抓取图像的权限，这时 unverifiable 的值就是 True。</p></li><li><p>method：是一个字符串，用来指示请求使用的方法，比如 GET、POST 和 PUT 等。</p></li></ul><p>简单举例：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> urllib.request</span><br><span class="line"><span class="keyword">import</span> urllib.parse</span><br><span class="line"></span><br><span class="line">url = <span class="string">'http://www.baidu.com/'</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 定制要伪装的头部</span></span><br><span class="line">headers = &#123;</span><br><span class="line">    <span class="string">'User-Agent'</span>: <span class="string">'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/73.0.3683.86 Safari/537.36'</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment"># 构建请求对象</span></span><br><span class="line">request = urllib.request.Request(url=url, headers=headers)</span><br><span class="line"><span class="comment"># 发送请求</span></span><br><span class="line">response = urllib.request.urlopen(request)</span><br><span class="line">print(response.read().decode())</span><br></pre></td></tr></table></figure></p><h2 id="【1-2-3】-urllib-request-urlretrieve"><a href="#【1-2-3】-urllib-request-urlretrieve" class="headerlink" title="【1.2.3】 urllib.request.urlretrieve()"></a><font color="#FF0000">【1.2.3】 urllib.request.urlretrieve()</font></h2><p>将获取到的 URL 内容保存到当前文件夹，简单举例：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> urllib.request</span><br><span class="line"></span><br><span class="line">url = <span class="string">'https://www.itrhx.com/images/trhx.png'</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># response = urllib.request.urlopen(image_url)</span></span><br><span class="line"><span class="comment"># with open('trhx.png', 'wb') as fp:</span></span><br><span class="line"><span class="comment">#    fp.write(response.read())</span></span><br><span class="line"></span><br><span class="line">urllib.request.urlretrieve(url, <span class="string">'trhx.png'</span>)</span><br></pre></td></tr></table></figure></p><h1 id="【1-3】-urllib-error-异常处理"><a href="#【1-3】-urllib-error-异常处理" class="headerlink" title=" 【1.3】 urllib.error 异常处理"></a><font color="#FF0000"> 【1.3】 urllib.error 异常处理</font></h1><h2 id="【1-3-1】-URLError"><a href="#【1-3-1】-URLError" class="headerlink" title="【1.3.1】 URLError"></a><font color="#FF0000">【1.3.1】 URLError</font></h2><p>如果打开一个不存在的页面，就会出现 URLError 错误，该错误有一个 reason 属性，用于返回错误的原因。简单举例：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> urllib <span class="keyword">import</span> request, error  </span><br><span class="line"><span class="keyword">try</span>:  </span><br><span class="line">    response = request.urlopen(<span class="string">'https://www.itrhx.com/index/'</span>)  </span><br><span class="line"><span class="keyword">except</span> error.URLError <span class="keyword">as</span> e:  </span><br><span class="line">    print(e.reason)</span><br></pre></td></tr></table></figure></p><p>输出结果：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Not Found</span><br></pre></td></tr></table></figure></p><h2 id="【1-3-2】-HTTPError"><a href="#【1-3-2】-HTTPError" class="headerlink" title="【1.3.2】 HTTPError"></a><font color="#FF0000">【1.3.2】 HTTPError</font></h2><p>URLError 的子类，专门用来处理 HTTP 请求错误，比如认证请求失败等。它有如下3个属性：</p><ul><li>code：返回 HTTP 状态码，比如 404 表示网页不存在，500 表示服务器内部错误等。</li><li>reason：同父类一样，用于返回错误的原因。</li><li>headers：返回请求头。</li></ul><p>简单举例：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> urllib <span class="keyword">import</span> request, error  </span><br><span class="line"><span class="keyword">try</span>:  </span><br><span class="line">    response = request.urlopen(<span class="string">'https://www.itrhx.com/index/'</span>)  </span><br><span class="line"><span class="keyword">except</span> error.HTTPError <span class="keyword">as</span> e:  </span><br><span class="line">    print(e.code, e.reason, e.headers)</span><br></pre></td></tr></table></figure></p><p>输出结果：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">404</span> Not Found Content-Type: text/html; charset=utf<span class="number">-8</span></span><br><span class="line">Server: GitHub.com</span><br><span class="line">ETag: <span class="string">"5d57f030-7f2"</span></span><br><span class="line">Access-Control-Allow-Origin: *</span><br><span class="line">X-Proxy-Cache: MISS</span><br><span class="line">X-GitHub-Request-Id: <span class="number">4</span>B46:<span class="number">2</span>F5D:<span class="number">6</span>DE0F1:<span class="number">755</span>BB2:<span class="number">5</span>D5964C5</span><br><span class="line">Content-Length: <span class="number">2034</span></span><br><span class="line">Accept-Ranges: bytes</span><br><span class="line">Date: Sun, <span class="number">18</span> Aug <span class="number">2019</span> <span class="number">14</span>:<span class="number">50</span>:<span class="number">41</span> GMT</span><br><span class="line">Via: <span class="number">1.1</span> varnish</span><br><span class="line">Age: <span class="number">252</span></span><br><span class="line">Connection: close</span><br><span class="line">X-Served-By: cache-tyo19951-TYO</span><br><span class="line">X-Cache: HIT</span><br><span class="line">X-Cache-Hits: <span class="number">1</span></span><br><span class="line">X-Timer: S1566139842<span class="number">.563134</span>,VS0,VE0</span><br><span class="line">Vary: Accept-Encoding</span><br><span class="line">X-Fastly-Request-ID: e9eb0a507be66a866bfaa7c5cc2e1c53b1f7ccab</span><br></pre></td></tr></table></figure></p><h2 id="【1-3-3】-进阶用法"><a href="#【1-3-3】-进阶用法" class="headerlink" title="【1.3.3】 进阶用法"></a><font color="#FF0000">【1.3.3】 进阶用法</font></h2><p>因为 URLError 是 HTTPError 的父类，所以可以先选择捕获子类的错误，再去捕获父类的错误，前面的代码改进：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> urllib <span class="keyword">import</span> request, error  </span><br><span class="line">​</span><br><span class="line"><span class="keyword">try</span>:  </span><br><span class="line">    response = request.urlopen(<span class="string">'https://www.itrhx.com/index/'</span>)  </span><br><span class="line"><span class="keyword">except</span> error.HTTPError <span class="keyword">as</span> e:  </span><br><span class="line">    print(e.reason, e.code, e.headers)  </span><br><span class="line"><span class="keyword">except</span> error.URLError <span class="keyword">as</span> e:  </span><br><span class="line">    print(e.reason)  </span><br><span class="line"><span class="keyword">else</span>:  </span><br><span class="line">    print(<span class="string">'Request Successfully'</span>)</span><br></pre></td></tr></table></figure></p><h1 id="【1-4】-urllib-parse-解析-URL"><a href="#【1-4】-urllib-parse-解析-URL" class="headerlink" title=" 【1.4】 urllib.parse 解析 URL"></a><font color="#FF0000"> 【1.4】 urllib.parse 解析 URL</font></h1><h2 id="【1-4-1】-urllib-parse-urlencode"><a href="#【1-4-1】-urllib-parse-urlencode" class="headerlink" title="【1.4.1】 urllib.parse.urlencode()"></a><font color="#FF0000">【1.4.1】 urllib.parse.urlencode()</font></h2><p>将字典参数序列化为 GET 请求参数，示例：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> urllib.parse <span class="keyword">import</span> urlencode</span><br><span class="line">data = &#123;</span><br><span class="line">    <span class="string">'ie'</span>: <span class="string">'utf-8'</span>,</span><br><span class="line">    <span class="string">'wd'</span>: <span class="string">'TRHX'</span>,</span><br><span class="line">&#125;</span><br><span class="line">base_url = <span class="string">'http://www.baidu.com?'</span></span><br><span class="line">url = base_url + urlencode(data)</span><br><span class="line">print(url)</span><br></pre></td></tr></table></figure></p><p>输出结果：<br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://www.baidu.com?ie=utf-8&amp;wd=TRHX</span><br></pre></td></tr></table></figure></p><h2 id="【1-4-2】-urllib-parse-parse-qs"><a href="#【1-4-2】-urllib-parse-parse-qs" class="headerlink" title="【1.4.2】 urllib.parse.parse_qs()"></a><font color="#FF0000">【1.4.2】 urllib.parse.parse_qs()</font></h2><p>与 urlencode() 相反，将 GET 请求参数反序列化转回字典，示例：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> urllib.parse <span class="keyword">import</span> parse_qs</span><br><span class="line">query = <span class="string">'name=TRHX&amp;age=20'</span></span><br><span class="line">print(parse_qs(query))</span><br></pre></td></tr></table></figure></p><p>输出结果：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;<span class="string">'name'</span>: [<span class="string">'TRHX'</span>], <span class="string">'age'</span>: [<span class="string">'20'</span>]&#125;</span><br></pre></td></tr></table></figure></p><h2 id="【1-4-3】-urllib-parse-parse-qsl"><a href="#【1-4-3】-urllib-parse-parse-qsl" class="headerlink" title="【1.4.3】 urllib.parse.parse_qsl()"></a><font color="#FF0000">【1.4.3】 urllib.parse.parse_qsl()</font></h2><p>将参数转化为元组组成的列表，示例：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> urllib.parse <span class="keyword">import</span> parse_qsl</span><br><span class="line">query = <span class="string">'name=TRHX&amp;age=20'</span></span><br><span class="line">print(parse_qsl(query))</span><br></pre></td></tr></table></figure></p><p>输出 结果：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[(<span class="string">'name'</span>, <span class="string">'TRHX'</span>), (<span class="string">'age'</span>, <span class="string">'20'</span>)]</span><br></pre></td></tr></table></figure></p><h2 id="【1-4-4】-urllib-parse-urlparse"><a href="#【1-4-4】-urllib-parse-urlparse" class="headerlink" title="【1.4.4】 urllib.parse.urlparse()"></a><font color="#FF0000">【1.4.4】 urllib.parse.urlparse()</font></h2><p>对 URL 进行分段，返回 6 个结果，示例：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> urllib.parse <span class="keyword">import</span> urlparse</span><br><span class="line">result = urlparse(<span class="string">'http://www.baidu.com/index.html;user?id=5#comment'</span>)</span><br><span class="line">print(type(result), result)</span><br></pre></td></tr></table></figure></p><p>输出结果：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;<span class="class"><span class="keyword">class</span> '<span class="title">urllib</span>.<span class="title">parse</span>.<span class="title">ParseResult</span>'&gt; <span class="title">ParseResult</span><span class="params">(scheme=<span class="string">'http'</span>, netloc=<span class="string">'www.baidu.com'</span>, path=<span class="string">'/index.html'</span>, params=<span class="string">'user'</span>, query=<span class="string">'id=5'</span>, fragment=<span class="string">'comment'</span>)</span></span></span><br></pre></td></tr></table></figure></p><p>返回结果为 ParseResult 类型的对象，含 scheme、netloc、path、params、query 和 fragment 6 个部分，依次代表协议、域名、路径、参数、查询条件、锚点</p><h2 id="【1-4-5】-urllib-parse-urlunparse"><a href="#【1-4-5】-urllib-parse-urlunparse" class="headerlink" title="【1.4.5】 urllib.parse.urlunparse()"></a><font color="#FF0000">【1.4.5】 urllib.parse.urlunparse()</font></h2><p>与 urlparse() 相反，对 URL 进行组合，传入的参数是一个可迭代对象，长度必须是 6，否则会抛出参数数量不足或者过多的问题，示例：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> urllib.parse <span class="keyword">import</span> urlunparse  </span><br><span class="line">data = [<span class="string">'http'</span>, <span class="string">'www.baidu.com'</span>, <span class="string">'index.html'</span>, <span class="string">'user'</span>, <span class="string">'a=6'</span>, <span class="string">'comment'</span>]  </span><br><span class="line">print(urlunparse(data))</span><br></pre></td></tr></table></figure></p><p>输出结果：<br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://www.baidu.com/index.html;user?a=6#comment</span><br></pre></td></tr></table></figure></p><h2 id="【1-4-6】-urllib-parse-urlsplit"><a href="#【1-4-6】-urllib-parse-urlsplit" class="headerlink" title="【1.4.6】 urllib.parse.urlsplit()"></a><font color="#FF0000">【1.4.6】 urllib.parse.urlsplit()</font></h2><p>与 urlparse() 方法相似，但是它不再单独解析 params 部分，只返回 5 个结果。params 会合并到 path 中，示例：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> urllib.parse <span class="keyword">import</span> urlsplit  </span><br><span class="line">result = urlsplit(<span class="string">'http://www.baidu.com/index.html;user?id=5#comment'</span>)  </span><br><span class="line">print(result)</span><br></pre></td></tr></table></figure></p><p>输出结果：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SplitResult(scheme=<span class="string">'http'</span>, netloc=<span class="string">'www.baidu.com'</span>, path=<span class="string">'/index.html;user'</span>, query=<span class="string">'id=5'</span>, fragment=<span class="string">'comment'</span>)</span><br></pre></td></tr></table></figure></p><h2 id="【1-4-7】-urllib-parse-urlunsplit"><a href="#【1-4-7】-urllib-parse-urlunsplit" class="headerlink" title="【1.4.7】 urllib.parse.urlunsplit()"></a><font color="#FF0000">【1.4.7】 urllib.parse.urlunsplit()</font></h2><p>与 urlunparse() 方法类似，对 URL 进行组合，传入的参数也是一个可迭代对象，长度必须为 5，示例：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> urllib.parse <span class="keyword">import</span> urlunsplit  </span><br><span class="line">data = [<span class="string">'http'</span>, <span class="string">'www.baidu.com'</span>, <span class="string">'index.html'</span>, <span class="string">'a=6'</span>, <span class="string">'comment'</span>]  </span><br><span class="line">print(urlunsplit(data))</span><br></pre></td></tr></table></figure></p><p>输出结果：<br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://www.baidu.com/index.html?a=6#comment</span><br></pre></td></tr></table></figure></p><h2 id="【1-4-8】-urllib-parse-urljoin"><a href="#【1-4-8】-urllib-parse-urljoin" class="headerlink" title="【1.4.8】 urllib.parse.urljoin()"></a><font color="#FF0000">【1.4.8】 urllib.parse.urljoin()</font></h2><p>对 URL 进行组合，提供两个 URL 作为两个参数，将会自动分析 URL 的 scheme、netloc 和 path 这 3 个内容并对新链接缺失的部分进行补充，最后返回结果，示例：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> urllib.parse <span class="keyword">import</span> urljoin  </span><br><span class="line">print(urljoin(<span class="string">'http://www.baidu.com'</span>, <span class="string">'friends.html'</span>))  </span><br><span class="line">print(urljoin(<span class="string">'http://www.baidu.com'</span>, <span class="string">'https://www.itrhx.com/friends.html'</span>))  </span><br><span class="line">print(urljoin(<span class="string">'http://www.baidu.com/friends.html'</span>, <span class="string">'https://www.itrhx.com/friends.html'</span>))  </span><br><span class="line">print(urljoin(<span class="string">'http://www.baidu.com/friends.html'</span>, <span class="string">'https://www.itrhx.com/friends.html?id=2'</span>))  </span><br><span class="line">print(urljoin(<span class="string">'http://www.baidu.com?wd=trhx'</span>, <span class="string">'https://www.itrhx.com/index.html'</span>))  </span><br><span class="line">print(urljoin(<span class="string">'http://www.baidu.com'</span>, <span class="string">'?category=2#comment'</span>))  </span><br><span class="line">print(urljoin(<span class="string">'www.baidu.com'</span>, <span class="string">'?category=2#comment'</span>))  </span><br><span class="line">print(urljoin(<span class="string">'www.baidu.com#comment'</span>, <span class="string">'?category=2'</span>))</span><br></pre></td></tr></table></figure></p><p>输出结果：<br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">http://www.baidu.com/friends.html</span><br><span class="line">https://www.itrhx.com/friends.html</span><br><span class="line">https://www.itrhx.com/friends.html</span><br><span class="line">https://www.itrhx.com/friends.html?id=2</span><br><span class="line">https://www.itrhx.com/index.html</span><br><span class="line">http://www.baidu.com?category=2#comment</span><br><span class="line">www.baidu.com?category=2#comment</span><br><span class="line">www.baidu.com?category=2</span><br></pre></td></tr></table></figure></p><h2 id="【1-4-9】-urllib-parse-quote"><a href="#【1-4-9】-urllib-parse-quote" class="headerlink" title="【1.4.9】 urllib.parse.quote()"></a><font color="#FF0000">【1.4.9】 urllib.parse.quote()</font></h2><p>将内容转化为 URL 编码的格式。当 URL 中带有中文参数时，可以将中文字符转化为 URL 编码，示例：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> urllib.parse <span class="keyword">import</span> quote</span><br><span class="line">keyword = <span class="string">'中国'</span>  </span><br><span class="line">url = <span class="string">'https://www.baidu.com/s?wd='</span> + quote(keyword)  </span><br><span class="line">print(url)</span><br></pre></td></tr></table></figure></p><p>输出结果：<br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://www.baidu.com/s?wd=%E4%B8%AD%E5%9B%BD</span><br></pre></td></tr></table></figure></p><h2 id="【1-4-10】-urllib-parse-unquote"><a href="#【1-4-10】-urllib-parse-unquote" class="headerlink" title="【1.4.10】 urllib.parse.unquote()"></a><font color="#FF0000">【1.4.10】 urllib.parse.unquote()</font></h2><p>与 quote() 方法相反，对 URL 进行解码，示例：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> urllib.parse <span class="keyword">import</span> unquote  </span><br><span class="line">url = <span class="string">'https://www.baidu.com/s?wd=%E4%B8%AD%E5%9B%BD'</span>  </span><br><span class="line">print(unquote(url))</span><br></pre></td></tr></table></figure></p><p>输出结果：<br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://www.baidu.com/s?wd=中国</span><br></pre></td></tr></table></figure></p><h1 id="【1-5】-urllib-robotparser-爬取权限判断"><a href="#【1-5】-urllib-robotparser-爬取权限判断" class="headerlink" title=" 【1.5】 urllib.robotparser 爬取权限判断"></a><font color="#FF0000"> 【1.5】 urllib.robotparser 爬取权限判断</font></h1><h2 id="【1-5-1】-Robots-协议简介"><a href="#【1-5-1】-Robots-协议简介" class="headerlink" title="【1.5.1】 Robots 协议简介"></a><font color="#FF0000">【1.5.1】 Robots 协议简介</font></h2><blockquote><p>Robots 协议即爬虫协议，用来告诉爬虫和搜索引擎哪些页面可以抓取，哪些不可以抓取。它通常是一个叫作 robots.txt 的文本文件，一般放在网站的根目录下。</p></blockquote><p>robots.txt 基本格式：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">User-agent:</span><br><span class="line">Disallow:</span><br><span class="line">Allow:</span><br></pre></td></tr></table></figure></p><ul><li>User-agent 为搜索爬虫的名称，设置为 * 则表示对任何爬虫皆有效；</li><li>Disallow 指定了不允许抓取的目录，设置为 / 则代表不允许抓取所有页面；</li><li>Allow 指定了允许抓取的目录，一般和 Disallow 一起使用，一般不会单独使用，用来排除某些限制。</li></ul><p>一些常见的搜索爬虫名称及其对应的网站：</p><table><thead><tr><th>爬虫名称</th><th>网站名称</th><th>网站地址</th></tr></thead><tbody><tr><td>BaiduSpider</td><td>百度</td><td><a href="http://www.baidu.com" target="_blank" rel="noopener">www.baidu.com</a></td></tr><tr><td>Googlebot</td><td>谷歌</td><td><a href="http://www.google.com" target="_blank" rel="noopener">www.google.com</a></td></tr><tr><td>360Spider</td><td>360</td><td><a href="http://www.so.com" target="_blank" rel="noopener">www.so.com</a></td></tr><tr><td>Sogouspider</td><td>搜狗</td><td><a href="http://www.sogou.com" target="_blank" rel="noopener">www.sogou.com</a></td></tr><tr><td>YodaoBot</td><td>有道</td><td><a href="http://www.youdao.com" target="_blank" rel="noopener">www.youdao.com</a></td></tr><tr><td>Bingbot</td><td>必应</td><td><a href="http://www.bing.com" target="_blank" rel="noopener">www.bing.com</a></td></tr><tr><td>Yahoo!  Slurp</td><td>雅虎</td><td><a href="http://www.yahoo.com" target="_blank" rel="noopener">www.yahoo.com</a></td></tr><tr><td>ia_archiver</td><td>Alexa</td><td><a href="http://www.alexa.cn" target="_blank" rel="noopener">www.alexa.cn</a></td></tr><tr><td>Scooter</td><td>altavista</td><td><a href="http://www.altavista.com" target="_blank" rel="noopener">www.altavista.com</a></td></tr></tbody></table><h2 id="【1-5-2】-RobotFileParser-类常用方法"><a href="#【1-5-2】-RobotFileParser-类常用方法" class="headerlink" title="【1.5.2】 RobotFileParser 类常用方法"></a><font color="#FF0000">【1.5.2】 RobotFileParser 类常用方法</font></h2><p>RobotFileParser 类的声明：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">urllib.robotparser.RobotFileParser(url=<span class="string">''</span>)</span><br></pre></td></tr></table></figure></p><p>常用方法及其解释：</p><ul><li><p>set_url：用来设置 robots.txt 文件的链接。如果在创建 RobotFileParser<br>对象时传入了链接，那么就不需要再用这种方法了。</p></li><li><p>read：读取 robots.txt 文件并进行分析。此方法执行一个读取和分析操作，若不调用此方法，接下来的判断都会为 False，这个方法不会返回任何内容，但是执行了读取操作。</p></li><li><p>parse：解析 robots.txt 文件，传入的参数是 robots.txt 某些行的内容，它会按照 robots.txt 的语法规则来分析这些内容。</p></li><li><p>can_fetch：该方法传入两个参数，第一个是 User-agent，第二个是要抓取的 URL。返回的内容是该搜索引擎是否可以抓取这个 URL，返回结果是 True 或 False。</p></li><li><p>mtime：返回的是上次抓取和分析 robots.txt 的时间，此方法可以定期检查来抓取最新的 robots.txt。</p></li><li><p>modified：将当前时间设置为上次抓取和分析 robots.txt 的时间。</p></li></ul><p>以简书为例：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> urllib.robotparser <span class="keyword">import</span> RobotFileParser</span><br><span class="line">rp = RobotFileParser()</span><br><span class="line">rp.set_url(<span class="string">'http://www.jianshu.com/robots.txt'</span>)</span><br><span class="line">rp.read()</span><br><span class="line">print(rp.can_fetch(<span class="string">'*'</span>, <span class="string">'https://www.jianshu.com/p/6d9527300b4c'</span>))</span><br><span class="line">print(rp.can_fetch(<span class="string">'*'</span>, <span class="string">"http://www.jianshu.com/search?q=python&amp;page=1&amp;type=collections"</span>))</span><br></pre></td></tr></table></figure></p><p>输出结果：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">False</span></span><br><span class="line"><span class="keyword">False</span></span><br></pre></td></tr></table></figure></p>]]></content>
      
      
      <categories>
          
          <category> Python3 学习笔记 </category>
          
          <category> 爬虫学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 爬虫 </tag>
            
            <tag> urllib </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>一个 JS 脚本实现网站预加载，提升页面加载速度</title>
      <link href="/2019/08/23/A24-instant.page/"/>
      <url>/2019/08/23/A24-instant.page/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p><a href="https://instant.page/" target="_blank" rel="noopener">instant.page</a> 使用即时预加载技术，在用户点击之前预先加载页面。当用户的鼠标悬停在一个链接上超过 65 毫秒时，浏览器会对此页面进行预加载，当用户点击链接后，就从预加载的缓存中直接读取页面内容，从而达到缩短页面加载时间的目的。</p><a id="more"></a><fancybox><br><img src="https://cdn.jsdelivr.net/gh/TRHX/ImageHosting/ITRHX-PIC/A24/01.gif" alt="演示"><br></fancybox><p>以我博客为例，使用了这项技术后，当鼠标在一个链接停留超过 65 毫秒时，Network 里可以看见相关文章已经预加载出来了，而停留时间过短就不会预加载（红色部分，状态为 <font color="#FF0000">canceled</font>）</p><p>使用方法：<br>将以下HTML代码放在&lt;/ body&gt; 之前即可：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"//instant.page/1.2.2"</span> <span class="attr">type</span>=<span class="string">"module"</span> <span class="attr">integrity</span>=<span class="string">"sha384-2xV8M5griQmzyiY3CDqh1dn4z3llDVqZDqzjzcY+jCBCk/a5fXJmuZ/40JJAPeoU"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>但是此脚本是官方的，储存在国外服务器，对国内访问不太友好，可以将该JS脚本储存到自己的服务器上，<a href="https://cdn.jsdelivr.net/gh/TRHX/CDN-for-itrhx.com@2.0.2/js/instantclick-1.2.2.js" target="_blank" rel="noopener">点此获取</a>该JS脚本，然后再根据以下格式在&lt;/ body&gt; 之前引用：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"`存放路径`/instantclick-1.2.2.js"</span> <span class="attr">type</span>=<span class="string">"module"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>也可以直接使用我的，使用 jsDeliver CDN 加速，速度还可以：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://cdn.jsdelivr.net/gh/TRHX/CDN-for-itrhx.com@2.0.2/js/instantclick-1.2.2.js"</span> <span class="attr">type</span>=<span class="string">"module"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>参考资料：<a href="https://www.zrahh.com/archives/399.html" target="_blank" rel="noopener">《网站预加载 JS 脚本 instant.page》</a>——by 左岸  ；<a href="https://instant.page/" target="_blank" rel="noopener">instant.page官网</a></p>]]></content>
      
      
      <categories>
          
          <category> WEB前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> instant.page </tag>
            
            <tag> JS 预加载 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>网站ICP备案和公安备案流程</title>
      <link href="/2019/08/23/A23-beian/"/>
      <url>/2019/08/23/A23-beian/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p><img src="https://cdn.jsdelivr.net/gh/TRHX/ImageHosting/ITRHX-PIC/A23/Website-Approve.png" alt="Website-Approve.png"></p><p>网站备案分为ICP备案和公安备案</p><ul><li><p>ICP备案：ICP备案的目的就是为了防止在网上从事非法的网站经营活动，打击不良互联网信息的传播，如果网站不备案的话，很有可能被查处以后关停。根据中华人民共和国信息产业部第十二次部务会议审议通过的《非经营性互联网信息服务备案管理办法》条例，在中华人民共和国境内提供非经营性互联网信息服务，应当办理备案。未经备案，不得在中华人民共和国境内从事非经营性互联网信息服务。而对于没有备案的网站将予以罚款或关闭。</p></li><li><p>公安备案：网站备案是根据国家法律法规需要网站的所有者向国家有关部门申请的备案，公安局备案是其中一种。公安局备案一般按照各地公安机关指定的地点和方式进行，操作流程会比ICP备案流程简单，主要是已登记为主。</p></li></ul><p>以百度官网为例，其中<code>京公安网备11000002000001</code>就是公安备案，<code>京ICP证030173号</code>就是ICP备案<br><img src="https://cdn.jsdelivr.net/gh/TRHX/ImageHosting/ITRHX-PIC/A23/01.png" alt="01.png"></p><h1 id="–-ICP备案"><a href="#–-ICP备案" class="headerlink" title=" – ICP备案 "></a><font color="#FF0000"> – ICP备案 </font></h1><p>一般在域名服务商那里都会有代备案系统，下面以阿里云为例，进入备案系统：<br><img src="https://cdn.jsdelivr.net/gh/TRHX/ImageHosting/ITRHX-PIC/A23/02.png" alt="02.png"></p><h3 id="1、填写信息验证备案类型"><a href="#1、填写信息验证备案类型" class="headerlink" title="1、填写信息验证备案类型"></a><font color="#FF0000">1、填写信息验证备案类型</font></h3><p>备案主办单位填写，个人就选个人，企业就选企业，按照实际信息填写：<br><img src="https://cdn.jsdelivr.net/gh/TRHX/ImageHosting/ITRHX-PIC/A23/03.png" alt="03.png"></p><h3 id="2、产品验证"><a href="#2、产品验证" class="headerlink" title="2、产品验证"></a><font color="#FF0000">2、产品验证</font></h3><p>对搭建备案网站的云服务器进行验证，如果你在阿里云购买了相关产品，就选择相应的产品类型和实例进行验证，也可以勾选<code>已有备案服务号</code>，填写服务号进行验证，备案服务号可以通过备案控制台进行申请，具体操作可以参考官方文档<a href="https://help.aliyun.com/knowledge_detail/36938.html" target="_blank" rel="noopener">《申请备案服务号》</a>，也有的小伙伴没有在任何地方购买过服务器等相关产品，比如单纯搭建一个 <a href="https://blog.csdn.net/qq_36759224/article/details/82121420" target="_blank" rel="noopener">Github Pages + Hexo</a> 轻量级的个人博客，这种博客没有后端，不需要服务器，但是要备案怎么办？这种情况也好解决，去某宝买一个服务号就行了。<br><img src="https://cdn.jsdelivr.net/gh/TRHX/ImageHosting/ITRHX-PIC/A23/04.png" alt="04.png"><br><img src="https://cdn.jsdelivr.net/gh/TRHX/ImageHosting/ITRHX-PIC/A23/05.png" alt="05.png"></p><h3 id="3、填写网站信息"><a href="#3、填写网站信息" class="headerlink" title="3、填写网站信息"></a><font color="#FF0000">3、填写网站信息</font></h3><p>填写网站信息以及办理备案的个人或者单位的真实信息，在填写网站名称的时候要<font color="#FF0000">特别注意！特别注意！特别注意！不满足要求的话是会被打回的！</font>不能使用姓名、地名、成语、不能包含公司、组织等企业性质的词语……具体要求可以参考官方文档<a href="https://help.aliyun.com/knowledge_detail/36948.html?spm=a2c4g.11186623.6.573.6e1369a5ZNlC0v" target="_blank" rel="noopener">《填写主体信息和网站信息》</a>。<br><img src="https://cdn.jsdelivr.net/gh/TRHX/ImageHosting/ITRHX-PIC/A23/06.png" alt="06.png"><br><img src="https://cdn.jsdelivr.net/gh/TRHX/ImageHosting/ITRHX-PIC/A23/07.png" alt="07.png"></p><h3 id="4、上传资料"><a href="#4、上传资料" class="headerlink" title="4、上传资料"></a><font color="#FF0000">4、上传资料</font></h3><p>根据要求，上传证件照片或证件彩色扫描件。身份证好说，拍好了上传就行了，注意《网站备案信息真实性核验单》需要你<font color="#FF0000">下载并打印在一张A4纸上，使用黑色签字笔填写，不能涂改</font>，具体可参照所给的示例进行填写，填写完成后再拍照上传。企业网站类似，提交备案后会在一个工作日内进行初审。<br><img src="https://cdn.jsdelivr.net/gh/TRHX/ImageHosting/ITRHX-PIC/A23/08.png" alt="08.png"><br><img src="https://cdn.jsdelivr.net/gh/TRHX/ImageHosting/ITRHX-PIC/A23/09.jpg" alt="09.jpg"><br><img src="https://cdn.jsdelivr.net/gh/TRHX/ImageHosting/ITRHX-PIC/A23/10.png" alt="10.png"></p><h3 id="5、人脸核验或幕布拍照核验"><a href="#5、人脸核验或幕布拍照核验" class="headerlink" title="5、人脸核验或幕布拍照核验"></a><font color="#FF0000">5、人脸核验或幕布拍照核验</font></h3><p>根据不同地域管局要求及核验平台的支持情况，使用人脸识别进行核验，或者申请专用幕布进行幕布拍照核验</p><table><thead><tr><th style="text-align:center">地区</th><th style="text-align:left">核验要求</th></tr></thead><tbody><tr><td style="text-align:center">上海、福建地区用户</td><td style="text-align:left">需使用阿里云APP进行人脸核验。如果使用PC端发起的备案申请，请根据界面提示下载阿里云APP进行人脸核验。</td></tr><tr><td style="text-align:center">广东、辽宁、安徽、重庆地区用户</td><td style="text-align:left">首次备案、新增网站：支持使用阿里云APP进行人脸核验或通过阿里云备案平台（PC端）进行幕布拍照核验。<br>其他备案类型：需通过阿里云备案平台（PC端）进行幕布拍照核验。</td></tr><tr><td style="text-align:center">其他地区用户</td><td style="text-align:left">通过阿里云备案平台（PC端）进行幕布拍照核验。</td></tr></tbody></table><p>以幕布拍照核验为例，如果你没有阿里云的幕布，就需要申请幕布（免费的），邮寄很快，大约两三天就到了，等收到幕布后，按照要求进行拍照，<font color="#FF0000">一定要仔细阅读拍照说明！一定要仔细阅读拍照说明！一定要仔细阅读拍照说明！不合格依旧会被打回！</font>拍照完成后上传即可。<br><img src="https://cdn.jsdelivr.net/gh/TRHX/ImageHosting/ITRHX-PIC/A23/11.png" alt="11.png"><br><img src="https://cdn.jsdelivr.net/gh/TRHX/ImageHosting/ITRHX-PIC/A23/12.png" alt="12.png"><br><img src="https://cdn.jsdelivr.net/gh/TRHX/ImageHosting/ITRHX-PIC/A23/13.png" alt="13.png"></p><h3 id="6、提交管局、短信核验"><a href="#6、提交管局、短信核验" class="headerlink" title="6、提交管局、短信核验"></a><font color="#FF0000">6、提交管局、短信核验</font></h3><p>当照片审核通过后，就会提交到管局，工信部要求部分省市成为手机号码短信核验试点省市，相应省市的用户在阿里云备案平台提交备案申请且初审完成后，会收到工信部发送的核验短信，短信包含验证码和验证地址，需要在收到短信的24小时内完成短信核验，备案申请才能进入管局审核。<br>需短信核验省份：</p><ul><li>2017年12月18日起：天津、甘肃、西藏、宁夏、海南、新疆、青海被列为试点省份。</li><li>2018年9月10日起：浙江、四川、福建、陕西、重庆、广西、云南被列为试点省份。</li><li>2018年9月24日起：山东、河南、安徽、湖南、山西、黑龙江、内蒙古、湖北被列为试点省份。</li></ul><p><img src="https://cdn.jsdelivr.net/gh/TRHX/ImageHosting/ITRHX-PIC/A23/14.png" alt="14.png"></p><h3 id="7、ICP备案完成"><a href="#7、ICP备案完成" class="headerlink" title="7、ICP备案完成"></a><font color="#FF0000">7、ICP备案完成</font></h3><p>整个备案过程中会有阿里云的客服打电话给你，进行信息确认，备案申请信息成功提交管局系统后，管局审核一般为 3 - 20 个工作日（亲测很快，不到一个周就通过了），审核通过后会收到阿里云的邮件通知。<br><img src="https://cdn.jsdelivr.net/gh/TRHX/ImageHosting/ITRHX-PIC/A23/15.png" alt="15.png"></p><h1 id="–-公安备案"><a href="#–-公安备案" class="headerlink" title=" – 公安备案 "></a><font color="#FF0000"> – 公安备案 </font></h1><p>公安备案个人觉得比ICP备案还要麻烦，自己在公安备案的时候，最开始申请了一个月也没给我处理（大概是地方原因，所在的市比较小，估计都没几个人办过网站，网警也不太负责），与ICP备案最大的不同，如果你是交互式网站的话，公安备案是需要你去公安机关当面审核的，这也是比较麻烦的一点。</p><h3 id="1、用户注册、登录"><a href="#1、用户注册、登录" class="headerlink" title="1、用户注册、登录"></a><font color="#FF0000">1、用户注册、登录</font></h3><p>登录<a href="http://www.beian.gov.cn" target="_blank" rel="noopener">全国互联网安全管理服务平台</a>，选择联网备案登录，注册账号并登录<br><img src="https://cdn.jsdelivr.net/gh/TRHX/ImageHosting/ITRHX-PIC/A23/16.png" alt="16.png"></p><h3 id="2、新办网站备案申请"><a href="#2、新办网站备案申请" class="headerlink" title="2、新办网站备案申请"></a><font color="#FF0000">2、新办网站备案申请</font></h3><p>点击新办网站申请，按实填写网站开办主体，上传身份证正反照和手持身份证件照。<br><img src="https://cdn.jsdelivr.net/gh/TRHX/ImageHosting/ITRHX-PIC/A23/17.png" alt="17.png"><br><img src="https://cdn.jsdelivr.net/gh/TRHX/ImageHosting/ITRHX-PIC/A23/18.png" alt="18.png"></p><h3 id="3、填写网站基本信息"><a href="#3、填写网站基本信息" class="headerlink" title="3、填写网站基本信息"></a><font color="#FF0000">3、填写网站基本信息</font></h3><p>按实填写网站基本信息，需要注意的地方：</p><p><font color="#FF0000">IP：</font>IP地址为阿里云/腾讯云的公网IP地址，请不要填写内网IP。</p><p><font color="#FF0000">域名证书：</font>以阿里云为例，进入【域名控制台】，点击域名后面的【管理】，选择【域名证书下载】即可，其它服务商类似。</p><p><font color="#FF0000">网络接入/域名注册服务商：</font>若办理公安备案的域名是通过<a href="https://www.aliyun.com/" target="_blank" rel="noopener">阿里云</a>完成的工信部备案，则按照以下填写：<br>网络接入服务商：</p><ul><li>接入商所属地区管辖：境内</li><li>接入商所属区域 ：浙江省 杭州市 滨江区</li><li>名称：阿里云计算有限公司</li><li>网站接入方式：租赁虚拟空间</li></ul><p>域名注册服务商：</p><ul><li>域名商所属地区管辖：境内</li><li>域名服务商所属区域：浙江省 杭州市 余杭区 </li><li>名称：阿里云计算有限公司（原万网）</li></ul><p>也可以通过点击后面的<code>查询网络接入\域名注册服务商</code>直接选择相应服务商，其他服务商类似</p><p><font color="#FF0000">服务类型：</font>交互式服务指：为互联网用户提供信息发布、交流互动等服务，包括但不限于论坛、博客、微博、网络购物、网上支付等服务类型，此项选择是否提供互联网交互服务将会直接影响到后面是否需要去公安局当面核验，若选择<code>是</code>，当地网警会打电话叫你去公安局当面核验，还需要填写《交互式服务安全检查表》等各种文件，总之是比较麻烦的，个人小网站，博客什么的建议选择<code>否</code>，选择<code>www服务</code>，这样的话不用去当面核验，审核下来也比较快，企业单位用户建议选择交互式。</p><p>其他信息如实填写即可！<br><img src="https://cdn.jsdelivr.net/gh/TRHX/ImageHosting/ITRHX-PIC/A23/19.png" alt="19.png"></p><h3 id="4、填写网站负责人信息"><a href="#4、填写网站负责人信息" class="headerlink" title="4、填写网站负责人信息"></a><font color="#FF0000">4、填写网站负责人信息</font></h3><p>填写网站安全负责人和网站应急联络人相关信息，网站应急联络人直接勾选同主体负责人后会自动填入。<br><img src="https://cdn.jsdelivr.net/gh/TRHX/ImageHosting/ITRHX-PIC/A23/20.png" alt="20.png"></p><h3 id="5、同意责任书并提交审核"><a href="#5、同意责任书并提交审核" class="headerlink" title="5、同意责任书并提交审核"></a><font color="#FF0000">5、同意责任书并提交审核</font></h3><p>《互联网信息服务单位网络安全责任告知书》有30秒的强制阅读时间，建议认真阅读一下告知书的内容。然后勾选我已阅读，点击提交即可。随后可以看到审核状态，不同地区政策有所不同，会有当地的网警联系网站负责人的，审核通过后记得在网站首页底部张贴公安机关核发的备案图标！<br><img src="https://cdn.jsdelivr.net/gh/TRHX/ImageHosting/ITRHX-PIC/A23/21.png" alt="21.png"><br><img src="https://cdn.jsdelivr.net/gh/TRHX/ImageHosting/ITRHX-PIC/A23/22.png" alt="22.png"></p>]]></content>
      
      
      <categories>
          
          <category> Hexo </category>
          
          <category> WEB前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ICP备案 </tag>
            
            <tag> 公安备案 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>恶意刷留言者——你是什么垃圾？</title>
      <link href="/2019/08/23/A25-SB/"/>
      <url>/2019/08/23/A25-SB/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><blockquote><p>有一种动物，自认为自己技术了得，实则和CXK差不多，以攻击他人为乐，这种动物称为程序员中的垃圾，哦！不，这种动物称不上程序员！</p></blockquote><blockquote><p>这个周连续被人刷垃圾评论，具体开始时间不记得了，不想多说什么，太多的文字用在垃圾身上简直是玷污中华上下五千年的文化，只问一句，你是什么垃圾？</p></blockquote><blockquote><p>随便提一句，这家伙连我的情侣博客一起刷的，真是让人大跌眼镜啊，估计自己没女朋友吧，见不得别人好，悲催啊，不知道又是哪个学校，哪个公司，哪个家庭摊上了这种垃圾。</p></blockquote><fancybox><br><img src="https://cdn.jsdelivr.net/gh/TRHX/ImageHosting/ITRHX-PIC/A25/01.png" alt="01"><br></fancybox><fancybox><br><center><img src="https://cdn.jsdelivr.net/gh/TRHX/ImageHosting/ITRHX-PIC/A25/02.png" alt="02"></center><br></fancybox><center><font color="#ff0000" size="50">请问你是什么垃圾？</font></center><br><center><font color="#ff0000" size="50">垃圾分类，从我做起！</font></center>]]></content>
      
      
      <categories>
          
          <category> BLOG </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 垃圾 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>利用官方支持为基于GitHub Pages的Hexo博客启用HTTPS</title>
      <link href="/2019/08/11/A28-hexo-add-https/"/>
      <url>/2019/08/11/A28-hexo-add-https/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><blockquote><p>利用官方支持为基于GitHub Pages的Hexo博客启用HTTPS</p></blockquote><a id="more"></a><hr><blockquote><p>HTTP（超文本传输协议），是一个基于请求与响应，无状态的，应用层的协议，常基于TCP/IP协议传输数据，互联网上应用最为广泛的一种网络协议，所有的WWW文件都必须遵守这个标准。设计HTTP的初衷是为了提供一种发布和接收HTML页面的方法。</p></blockquote><blockquote><p>HTTPS（超文本传输安全协议），是以安全为目标的HTTP通道，简单讲是HTTP的安全版。即HTTP下加入SSL层，HTTPS的安全基础是SSL，因此加密的详细内容就需要SSL。它是一个URI scheme（抽象标识符体系），句法类同http:体系。用于安全的HTTP数据传输。</p></blockquote><hr><p>目前大多数基于 GitHub Pages 的 Hexo 博客都是利用 CloudFlare 的 CDN 中转来启用 HTTPS 的，实现方法可以参考我的文章：<a href="https://www.itrhx.com/2019/07/31/A26-hexo-add-https/">《利用Cloudflare为基于GitHub Pages的Hexo博客添加HTTPS支持》</a>，这样的做法确实可以起到开启HTTPS的目的，但是这样做也有弊端，你会发现 CDN 中转，国外访问的话，可以起到加速的作用，但是国内访问反而速度降低了，还不如直接连接GitHub呢</p><p>其实 GitHub 官方是支持自定义域名开启 HTTPS 的，之前我和大多数人一样，以为只有 GitHub Pages 自带的域名（xxx.github.io）才能开启 HTTPS，直到有一天我发现了官方在2018年5月1日发表的博客：<a href="https://github.blog/2018-05-01-github-pages-custom-domains-https/" target="_blank" rel="noopener">《Custom domains on GitHub Pages gain support for HTTPS》</a>，大概讲的意思就是从8月份开始， GitHub Pages 上的自定义域名也能开启 HTTPS 了，下面就具体介绍一下如何实现</p><p>如果你以前域名的记录类型是 CNAME 方式，那么就不需要做任何更改<br>如果你以前域名的记录类型是 A 方式，那么就需要把记录值指向以下IP地址：</p><ul><li>185.199.108.153</li><li>185.199.109.153</li><li>185.199.110.153</li><li>185.199.111.153</li></ul><p>修改好记录值后，我们需要再次来到你博客的 GitHub 仓库，在仓库的【Settings】- 【GitHub Pages】下勾选【Enforce HTTPS】，注意，如果此时你不能勾选，请删除【Custom domain】里面你的域名并点击【Save】保存，刷新网页后就可以勾选了，然后在把域名填进去并保存即可，短时间可能会出现不安全的提示，这是因为加密证书大概一个小时左右才会生效，等一会儿就好了</p><fancybox><br><img src="https://cdn.jsdelivr.net/gh/TRHX/ImageHosting/ITRHX-PIC/A28/01.png" alt="01"><br></fancybox><br>最后贴一个我的域名解析，可作为参考：<br><br><fancybox><br><img src="https://cdn.jsdelivr.net/gh/TRHX/ImageHosting/ITRHX-PIC/A28/02.png" alt="02"><br></fancybox>]]></content>
      
      
      <categories>
          
          <category> Hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
            <tag> HTTPS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Github+jsDelivr+PicGo 打造稳定快速、高效免费图床</title>
      <link href="/2019/08/01/A27-image-hosting/"/>
      <url>/2019/08/01/A27-image-hosting/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><fancybox><br><img src="https://cdn.jsdelivr.net/gh/TRHX/ImageHosting/ITRHX-PIC/A27/ImgHosting.png" alt="ImgHosting"><br></fancybox><hr><h1 id="–-前言"><a href="#–-前言" class="headerlink" title="– 前言"></a><font color="#FF000">– 前言</font></h1><p>图床是个啥东西就不用过多介绍了，先来对比一下各路图床：</p><blockquote><ul><li>微博图床：以前用的人比较多，从2019年4月开始开启了防盗链，凉凉</li><li>SM.MS：运营四年多了，也变得越来越慢了，到了晚上直接打不开图片，速度堪忧</li><li>其他小众图床：随时有挂掉的风险</li><li>Imgur等国外图床：国内访问速度太慢，随时有被墙的风险</li><li>大厂储存服务：例如七牛云、又拍云、腾讯云COS、阿里云OSS等，容量限制，操作繁琐，又是实名认证又是域名备案的，麻烦，而且还要花钱（有钱又不怕麻烦的当我没说）</li></ul></blockquote><p>因此，GitHub 图床是个不错的选择，利用 jsDelivr CDN 加速访问（jsDelivr 是一个免费开源的 CDN 解决方案），PicGo 工具一键上传，操作简单高效，GitHub 和 jsDelivr 都是大厂，不用担心跑路问题，不用担心速度和容量问题，而且完全免费，可以说是目前免费图床的最佳解决方案！</p><hr><h1 id="–-新建GitHub仓库"><a href="#–-新建GitHub仓库" class="headerlink" title="– 新建GitHub仓库"></a><font color="#FF000">– 新建GitHub仓库</font></h1><p>登录/注册GitHub，新建一个仓库，填写好仓库名，仓库描述，根据需求选择是否为仓库初始化一个README.md描述文件</p><fancybox><br><img src="https://cdn.jsdelivr.net/gh/TRHX/ImageHosting/ITRHX-PIC/A27/01.png" alt="01"><br></fancybox><br><fancybox><br><img src="https://cdn.jsdelivr.net/gh/TRHX/ImageHosting/ITRHX-PIC/A27/02.png" alt="02"><br></fancybox><hr><h1 id="–-生成一个Token"><a href="#–-生成一个Token" class="headerlink" title="– 生成一个Token"></a><font color="#FF000">– 生成一个Token</font></h1><p>在主页依次选择【Settings】-【Developer settings】-【Personal access tokens】-【Generate new token】，填写好描述，勾选【repo】，然后点击【Generate token】生成一个Token，注意这个Token只会显示一次，自己先保存下来，或者等后面配置好PicGo后再关闭此网页</p><fancybox><br><img src="https://cdn.jsdelivr.net/gh/TRHX/ImageHosting/ITRHX-PIC/A27/03.png" alt="03"><br></fancybox><br><fancybox><br><img src="https://cdn.jsdelivr.net/gh/TRHX/ImageHosting/ITRHX-PIC/A27/04.png" alt="04"><br></fancybox><br><fancybox><br><img src="https://cdn.jsdelivr.net/gh/TRHX/ImageHosting/ITRHX-PIC/A27/05.png" alt="05"><br></fancybox><br><fancybox><br><img src="https://cdn.jsdelivr.net/gh/TRHX/ImageHosting/ITRHX-PIC/A27/06.png" alt="06"><br></fancybox><br><fancybox><br><img src="https://cdn.jsdelivr.net/gh/TRHX/ImageHosting/ITRHX-PIC/A27/07.png" alt="07"><br></fancybox><h1 id="–-配置PicGo"><a href="#–-配置PicGo" class="headerlink" title="– 配置PicGo"></a><font color="#FF000">– 配置PicGo</font></h1><p>前往<a href="https://github.com/Molunerfinn/picgo/releases" target="_blank" rel="noopener">下载PicGo</a>，安装好后开始配置图床</p><fancybox><br><img src="https://cdn.jsdelivr.net/gh/TRHX/ImageHosting/ITRHX-PIC/A27/08.png" alt="08"><br></fancybox><ul><li><p><font color="#FF000">设定仓库名：</font>按照【用户名/图床仓库名】的格式填写</p></li><li><p><font color="#FF000">设定分支名：</font>【master】</p></li><li><p><font color="#FF000">设定Token：</font>粘贴之前生成的【Token】</p></li><li><p><font color="#FF000">指定存储路径：</font>填写想要储存的路径，如【ITRHX-PIC/】，这样就会在仓库下创建一个名为 ITRHX-PIC 的文件夹，图片将会储存在此文件夹中</p></li><li><p><font color="#FF000">设定自定义域名：</font>它的作用是，在图片上传后，PicGo 会按照【自定义域名+储存路径+上传的图片名】的方式生成访问链接，并放到粘贴板上，因为我们要使用 jsDelivr 加速访问，所以可以设置为【<a href="https://cdn.jsdelivr.net/gh/用户名/图床仓库名" target="_blank" rel="noopener">https://cdn.jsdelivr.net/gh/用户名/图床仓库名</a> 】，上传完毕后，我们就可以通过【<a href="https://cdn.jsdelivr.net/gh/用户名/图床仓库名/图片路径" target="_blank" rel="noopener">https://cdn.jsdelivr.net/gh/用户名/图床仓库名/图片路径</a> 】加速访问我们的图片了，比如上图的图片链接为：<a href="https://cdn.jsdelivr.net/gh/TRHX/ImageHosting/ITRHX-PIC/A27/08.png" target="_blank" rel="noopener">https://cdn.jsdelivr.net/gh/TRHX/ImageHosting/ITRHX-PIC/A27/08.png</a></p></li></ul><p>关于 jsDelivr 具体是如何引用资源的可以参考我的另一篇博客：<a href="https://www.itrhx.com/2019/02/10/A18-free-cdn/">《免费CDN：jsDelivr+Github》</a></p><hr><h1 id="–-进行高效创作"><a href="#–-进行高效创作" class="headerlink" title="– 进行高效创作"></a><font color="#FF000">– 进行高效创作</font></h1><p>配置好PicGo后，我们就可以进行高效创作了，将图片拖拽到上传区，将会自动上传并复制访问链接，将链接粘贴到博文中就行了，访问速度杠杠的，此外PicGo还有相册功能，可以对已上传的图片进行删除，修改链接等快捷操作，PicGo还可以生成不同格式的链接、支持批量上传、快捷键上传、自定义链接格式、上传前重命名等，更多功能自己去探索吧！</p>]]></content>
      
      
      <categories>
          
          <category> 图床 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> jsDelivr </tag>
            
            <tag> 图床 </tag>
            
            <tag> PicGo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>利用Cloudflare为基于GitHub Pages的Hexo博客添加HTTPS支持</title>
      <link href="/2019/07/31/A26-hexo-add-https/"/>
      <url>/2019/07/31/A26-hexo-add-https/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><blockquote><p>利用Cloudflare为基于GitHub Pages的Hexo博客添加HTTPS支持</p></blockquote><a id="more"></a><hr><blockquote><p>HTTP（超文本传输协议），是一个基于请求与响应，无状态的，应用层的协议，常基于TCP/IP协议传输数据，互联网上应用最为广泛的一种网络协议，所有的WWW文件都必须遵守这个标准。设计HTTP的初衷是为了提供一种发布和接收HTML页面的方法。</p></blockquote><blockquote><p>HTTPS（超文本传输安全协议），是以安全为目标的HTTP通道，简单讲是HTTP的安全版。即HTTP下加入SSL层，HTTPS的安全基础是SSL，因此加密的详细内容就需要SSL。它是一个URI scheme（抽象标识符体系），句法类同http:体系。用于安全的HTTP数据传输。</p></blockquote><hr><h1 id="–-前言"><a href="#–-前言" class="headerlink" title="– 前言"></a><font color="#FF000">– 前言</font></h1><p>GitHub Pages 自带的域名（xxx.github.io）支持开启 https 服务，可以在仓库的【Settings】- 【GitHub Pages】下勾选【Enforce HTTPS】即可，但是如果你设置了自定义域名的话，就比较复杂了，因为 hexo 博客是托管在 GitHub 上的，没有自己的服务器，因此也不支持上传 SSL 证书，从2018年5月1日起，GitHub官方也支持自定义域名开启https了，实现方法可参考我的文章：<a href="https://www.itrhx.com/2019/08/11/A28-hexo-add-https/">《利用官方支持为基于GitHub Pages的Hexo博客启用HTTPS》</a>，另外一种方法就是利用 Cloudflare 的 CDN 中转来启用 HTTPS，这种方法的弊端就是国内访问速度可能会变慢，本文主要讲述这种方法</p><p>Cloudflare 是一家美国的跨国科技企业，以向客户提供网站安全管理、性能优化及相关的技术支持为主要业务，它提供了免费的 https 服务，注意不是应用SSL证书，实现原理：用户到CDN服务器的连接为 https 方式，而CDN服务器到 GithubPages 服务器的连接为 http 方式，在CDN服务器那里加上反向代理</p><h1 id="–-注册-Cloudflare"><a href="#–-注册-Cloudflare" class="headerlink" title="– 注册 Cloudflare"></a><font color="#FF000">– 注册 Cloudflare</font></h1><p>到 <a href="https://dash.cloudflare.com/sign-up" target="_blank" rel="noopener">Cloudflare官网</a> 注册账号</p><fancybox><br><img src="https://cdn.jsdelivr.net/gh/TRHX/ImageHosting/ITRHX-PIC/A26/01.png" alt="01.png"><br></fancybox><h1 id="–-添加站点"><a href="#–-添加站点" class="headerlink" title="– 添加站点"></a><font color="#FF000">– 添加站点</font></h1><p>添加你的站点，一直下一步即可</p><fancybox><br><img src="https://cdn.jsdelivr.net/gh/TRHX/ImageHosting/ITRHX-PIC/A26/02.png" alt="02.png"><br></fancybox><br><fancybox><br><img src="https://cdn.jsdelivr.net/gh/TRHX/ImageHosting/ITRHX-PIC/A26/03.png" alt="03.png"><br></fancybox><br>如果你已经在域名服务商那里解析过域名的话，之后就会出现你域名的解析列表，如果还没有解析过，可以参考<a href="https://blog.csdn.net/qq_36759224/article/details/82121420#font_colorFF000__Hexo_font_270" target="_blank" rel="noopener">《为hexo博客配置个性域名》</a><br><fancybox><br><img src="https://cdn.jsdelivr.net/gh/TRHX/ImageHosting/ITRHX-PIC/A26/04.png" alt="04.png"><br></fancybox><h1 id="–修改DNS"><a href="#–修改DNS" class="headerlink" title="–修改DNS"></a><font color="#FF000">–修改DNS</font></h1><p>点击下一步 Cloudflare 会提供给你两个 DNS 地址</p><fancybox><br><img src="https://cdn.jsdelivr.net/gh/TRHX/ImageHosting/ITRHX-PIC/A26/05.png" alt="05.png"><br></fancybox><br>到域名服务商那里修改DNS，以阿里云为例，依次选择【控制台】-【域名】，选择你的域名，点击【管理】-【修改DNS】，将上面 Cloudflare 提供的两个 DNS 地址填进去，会过几分钟才生效<br><fancybox><br><img src="https://cdn.jsdelivr.net/gh/TRHX/ImageHosting/ITRHX-PIC/A26/08.png" alt="08.png"><br></fancybox><br><fancybox><br><img src="https://cdn.jsdelivr.net/gh/TRHX/ImageHosting/ITRHX-PIC/A26/09.png" alt="09.png"><br></fancybox><br><fancybox><br><img src="https://cdn.jsdelivr.net/gh/TRHX/ImageHosting/ITRHX-PIC/A26/10.png" alt="10.png"><br></fancybox><h1 id="–开启-HTTPS"><a href="#–开启-HTTPS" class="headerlink" title="–开启 HTTPS"></a><font color="#FF000">–开启 HTTPS</font></h1><p>在 Cloudflare 管理页面，点击【Crypto】选项，选择 SSL 的模式为【full】，注意：在CloudFlare 上激活站点后，可能需要24小时才能颁发新证书，耐心等待即可</p><fancybox><br><img src="https://cdn.jsdelivr.net/gh/TRHX/ImageHosting/ITRHX-PIC/A26/07.png" alt="07.png"><br></fancybox><p>关于三种模式 Flexible、Full、Full (Strict) 的区别：</p><ul><li><p>Flexible：访客与 Cloudflare 之间是加密的，Cloudflare 到站点服务器是不加密的</p></li><li><p>Full：访客到 Cloudflare、Cloudflare 到站点服务器都是加密的，它不会验证你服务器上的证书是否合法，因此你可以在你服务器上安装任何证书，包括自签名证书</p></li><li><p>Full (strict)：访客到 Cloudflare、Cloudflare 到站点服务器都是加密的，它会验证你服务器上的证书是否合法，你必须在你的服务器上安装有可信赖的CA证书，并且这个证书必须是未过期，包含有域名等信息的</p></li></ul><p>至此，我们的域名就支持 https 访问了，但是当用户输入 <a href="http://xxxxxx" target="_blank" rel="noopener">http://xxxxxx</a> 访问时，浏览器依旧会以 http 协议来访问，并不会跳转到 https，这时候就需要利用重定向来解决了</p><h1 id="–重定向强制-HTTPS"><a href="#–重定向强制-HTTPS" class="headerlink" title="–重定向强制 HTTPS"></a><font color="#FF000">–重定向强制 HTTPS</font></h1><p>Cloudflare 提供了一个名叫 Page Rules 的页面规则的功能，我们可以利用此功能对 URL 做一些处理，当用户访问是 HTTP 的时候重定向到 HTTPS，点击【Page Rules】选项，点击【Create Page Rules】，新建如下规则并保存即可</p><fancybox><br><img src="https://cdn.jsdelivr.net/gh/TRHX/ImageHosting/ITRHX-PIC/A26/06.png" alt="06.png"><br></fancybox><p>现在我们的 Hexo 博客就实现了全站 HTTPS！</p>]]></content>
      
      
      <categories>
          
          <category> Hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
            <tag> HTTPS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Eclipse 通过 JDBC 连接 SQL Server</title>
      <link href="/2019/05/14/A22-eclipse-connects-to-sql/"/>
      <url>/2019/05/14/A22-eclipse-connects-to-sql/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>本文用到的软件版本以及相关环境：</p><blockquote><p>Eclipse Photon Release (4.8.0)<br>JDK-10.0.2<br>SQL Server 2012</p></blockquote><h1 id="1-配置-SQL-Server-2012"><a href="#1-配置-SQL-Server-2012" class="headerlink" title="1.配置 SQL Server 2012"></a><font color="#FF0000">1.配置 SQL Server 2012</font></h1><p>打开 SQL Server Management Studio，使用 <font color="#FF0000">SQL Server 身份验证</font> 登录：</p><p><img src="https://cdn.jsdelivr.net/gh/TRHX/ImageHosting/ITRHX-PIC/A22/001.png" alt="001.png"></p><p>如果在安装 SQL Server 2012 时选用了Windows身份验证登录方式，则需要重新设置，设置方法参考：<a href="https://blog.csdn.net/qq_36759224/article/details/90204243" target="_blank" rel="noopener">《SQL Server 登录更换【Windows身份验证】为【SQL Server 身份验证】》</a></p><p>登录成功后，打开 SQL Server 配置管理器：</p><p><img src="https://cdn.jsdelivr.net/gh/TRHX/ImageHosting/ITRHX-PIC/A22/002.png" alt="002.png"></p><p>在左边找到 SQL Server 网络配置，点击【你的数据库名】的协议，将右边栏的 <font color="#FF0000">Shared Memory、Named Pipes、TCP/IP</font> 全部右键选择<font color="#FF0000">启用</font>：</p><p><img src="https://cdn.jsdelivr.net/gh/TRHX/ImageHosting/ITRHX-PIC/A22/003.png" alt="003.png"><br><img src="https://cdn.jsdelivr.net/gh/TRHX/ImageHosting/ITRHX-PIC/A22/004.png" alt="004.png"></p><p>双击 <font color="#FF0000">TCP/IP</font>（或者右键选择属性），选择【<font color="#FF0000">IP地址</font>】，将【<font color="#FF0000">IP1</font>】和【<font color="#FF0000">IP10</font>】的【<font color="#FF0000">IP地址</font>】设为 <font color="#FF0000">127.0.0.1</font></p><p><img src="https://cdn.jsdelivr.net/gh/TRHX/ImageHosting/ITRHX-PIC/A22/005.png" alt="005.png"></p><p>将所有【<font color="#FF0000">IPx</font>】（<font color="#FF0000">IP1、IP10、IP11、IP12</font>等）的【<font color="#FF0000">已启用</font>】设为<font color="#FF0000">是</font></p><p><img src="https://cdn.jsdelivr.net/gh/TRHX/ImageHosting/ITRHX-PIC/A22/006.png" alt="006.png"></p><p>下拉到窗口底部，将 【<font color="#FF0000">IPAll</font>】 中的【<font color="#FF0000">TCP端口</font>】设成 <font color="#FF0000">1433</font>，其余不变</p><p><img src="https://cdn.jsdelivr.net/gh/TRHX/ImageHosting/ITRHX-PIC/A22/007.png" alt="007.png"></p><h1 id="2-开启-Telnet-服务"><a href="#2-开启-Telnet-服务" class="headerlink" title="2.开启 Telnet 服务"></a><font color="#FF0000">2.开启 Telnet 服务</font></h1><p>打开【<font color="#FF0000">控制面板</font>】，选择【<font color="#FF0000">程序</font>】，点击【<font color="#FF0000">启用或关闭 Windows 功能</font>】，找到【<font color="#FF0000">Telnet Client</font>】勾选并保存，Windows 7 或者以下的版本则勾选【<font color="#FF0000">Telnet 服务器</font>】和【<font color="#FF0000">Telnet 客户端</font>】</p><p><img src="https://cdn.jsdelivr.net/gh/TRHX/ImageHosting/ITRHX-PIC/A22/008.png" alt="008.png"><br><img src="https://cdn.jsdelivr.net/gh/TRHX/ImageHosting/ITRHX-PIC/A22/009.png" alt="009.png"></p><h1 id="3-测试1433端口是否打开"><a href="#3-测试1433端口是否打开" class="headerlink" title="3.测试1433端口是否打开"></a><font color="#FF0000">3.测试1433端口是否打开</font></h1><p> 运行cmd，输入 telnet 127.0.0.1 1433，若提示连接失败，则说明1433端口没有打开，需要重新进行以上配置，若连接成功，则显示如下：</p><p> <img src="https://cdn.jsdelivr.net/gh/TRHX/ImageHosting/ITRHX-PIC/A22/010.png" alt="010.png"></p><h1 id="4-下载JDBC"><a href="#4-下载JDBC" class="headerlink" title="4.下载JDBC"></a><font color="#FF0000">4.下载JDBC</font></h1><p> <a href="https://docs.microsoft.com/zh-cn/sql/connect/jdbc/download-microsoft-jdbc-driver-for-sql-server?view=sql-server-2017" target="_blank" rel="noopener">点击此处</a>下载各个版本JDBC，不同版本的JDBC驱动程序适用的JAR不同，与不同版本的SQL兼容性也不同，具体参考<a href="https://docs.microsoft.com/zh-cn/sql/connect/jdbc/microsoft-jdbc-driver-for-sql-server-support-matrix?view=sql-server-2017" target="_blank" rel="noopener">《Microsoft SQL Server JDBC 驱动程序支持矩阵》</a>，比如使用 SQL Server 2012 我们可以下载6.0的版本，下载<font color="#FF0000">sqljdbc_6.0.8112.200_chs.tar.gz</font>文件，解压后可以找到<font color="#FF0000">sqljdbc41.jar</font>与<font color="#FF0000">sqljdbc42.jar</font>文件，使用时要注意自己JDK是哪个版本的，1.80以上的则对应 <font color="#FF0000">sqljdbc42.jar</font> 类库</p><h1 id="5-Eclipse-连接-SQL-Server"><a href="#5-Eclipse-连接-SQL-Server" class="headerlink" title="5.Eclipse 连接 SQL Server"></a><font color="#FF0000">5.Eclipse 连接 SQL Server</font></h1><p>将 sqljdbc41.jar 或者 sqljdbc42.jar 放到一个文件夹下，打开 Eclipse，在需要连接数据库的项目里，右键【<font color="#FF0000">src</font>】，选择【<font color="#FF0000">Build Path</font>】、【<font color="#FF0000">Configure Build Path…</font>】，在弹出的窗口选择【<font color="#FF0000">Libraries</font>】，选择【<font color="#FF0000">Modulepath</font>】，单击【<font color="#FF0000">Add External JARs…</font>】，找到下载的 sqljdbc41.jar 或者 sqljdbc42.jar 文件并打开，然后【<font color="#FF0000">Apply and Close</font>】保存</p><p><img src="https://cdn.jsdelivr.net/gh/TRHX/ImageHosting/ITRHX-PIC/A22/011.png" alt="011.png"><br><img src="https://cdn.jsdelivr.net/gh/TRHX/ImageHosting/ITRHX-PIC/A22/012.png" alt="012.png"><br><img src="https://cdn.jsdelivr.net/gh/TRHX/ImageHosting/ITRHX-PIC/A22/013.png" alt="013.png"></p><h1 id="6-测试连接"><a href="#6-测试连接" class="headerlink" title="6.测试连接"></a><font color="#FF0000">6.测试连接</font></h1><p>打开 SQL Server 2012，在其中新建数据库 test</p><p><img src="https://cdn.jsdelivr.net/gh/TRHX/ImageHosting/ITRHX-PIC/A22/014.png" alt="014.png"></p><p>Eclipse中，在项目下新建一个package，再新建一个class，用于测试数据库的连接：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> test;</span><br><span class="line"><span class="keyword">import</span> java.sql.*;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String [] args)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">String driverName=<span class="string">"com.microsoft.sqlserver.jdbc.SQLServerDriver"</span>;</span><br><span class="line">String dbURL=<span class="string">"jdbc:sqlserver://localhost:1433;DatabaseName=test"</span>;  <span class="comment">//要连接的数据库名</span></span><br><span class="line">String userName=<span class="string">"sa"</span>;  <span class="comment">//数据库用户名</span></span><br><span class="line">String userPwd=<span class="string">"000000"</span>;  <span class="comment">//数据库密码</span></span><br><span class="line"><span class="keyword">try</span></span><br><span class="line">&#123;</span><br><span class="line">Class.forName(driverName);</span><br><span class="line">Connection dbConn=DriverManager.getConnection(dbURL,userName,userPwd);</span><br><span class="line">System.out.println(<span class="string">"连接数据库成功"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">catch</span>(Exception e)</span><br><span class="line">&#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">System.out.print(<span class="string">"连接失败"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>如果以上所有操作正确，就能成功连接数据库了：</p><p><img src="https://cdn.jsdelivr.net/gh/TRHX/ImageHosting/ITRHX-PIC/A22/015.png" alt="015.png"></p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JDBC </tag>
            
            <tag> SQL Server 2012 </tag>
            
            <tag> Elicpse </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python PEP8 代码规范常见问题及解决方法</title>
      <link href="/2019/04/15/A21-PEP8/"/>
      <url>/2019/04/15/A21-PEP8/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>之前一直用 Python  IDLE 写代码，最近换成 PyCharm 写代码总是会出现波浪号，这才了解到 Python 的 PEP8 代码规范，所以将常见的 PEP8 代码规范问题和解决方法记录一下，学习一下，遇到了再持续更新，<font color="#FF0000">养成良好的习惯，编写规范的代码！</font></p><a id="more"></a><hr><ul><li><p><font color="#FF0000">PEP 8: no newline at end of file</font><br>解决方法：代码末尾需要另起一行，光标移到最后回车即可</p></li><li><p><font color="#FF0000">PEP 8: indentation is not a multiple of four</font><br>解决方法：缩进不是4的倍数，检查缩进</p></li><li><p><font color="#FF0000">PEP 8: over-indented</font><br>解决方法：过度缩进，检查缩进</p></li><li><p><font color="#FF0000">PEP 8: missing whitespace after’,’</font><br>解决方法：逗号后面少了空格，添加空格即可，类似还有分号或者冒号后面少了空格</p></li><li><p><font color="#FF0000">PEP 8: multiple imports on one line</font><br>解决方法：不要在一句 import 中引用多个库，举例：<code>import socket, urllib.error</code>最好写成：<code>import socket</code>   <code>import urllib.error</code></p></li><li><p><font color="#FF0000">PEP 8: blank line at end of line</font><br>解决方法：代码末尾行多了空格，删除空格即可</p></li><li><p><font color="#FF0000">PEP 8: at least two spaces before inline comment</font><br>解决方法：代码与注释之间至少要有两个空格</p></li><li><p><font color="#FF0000">PEP 8: block comment should start with ‘#’</font><br>解决方法：注释要以#加一个空格开始</p></li><li><p><font color="#FF0000">PEP 8: inline comment should start with ‘#’</font><br>解决方法：注释要以#加一个空格开始</p></li><li><p><font color="#FF0000">PEP 8: module level import not at top of file</font><br>解决方法：import不在文件的最上面，可能之前还有其它代码</p></li><li><p><font color="#FF0000">PEP 8: expected 2 blank lines，found 0</font><br>解决方法：需要两条空白行，添加两个空白行即可</p></li><li><p><font color="#FF0000">PEP 8: function name should be lowercase</font><br>解决方法：函数名改成小写即可</p></li><li><p><font color="#FF0000">PEP 8: missing whitespace around operator</font><br>解决方法：操作符（’=’、’&gt;’、’&lt;’等）前后缺少空格，加上即可</p></li><li><p><font color="#FF0000">PEP 8: unexpected spaces around keyword / parameter equals</font><br>解决方法：关键字/参数等号周围出现意外空格，去掉空格即可</p></li><li><p><font color="#FF0000">PEP 8: multiple statements on one line (colon)</font><br>解决方法：多行语句写到一行了，比如：<code>if x == 2: print(&#39;OK&#39;)</code>要分成两行写</p></li><li><p><font color="#FF0000">PEP 8: line too long (82 &gt; 79 characters)</font><br>解决方法：超过了每行的最大长度限制79</p></li></ul><hr><p>如果想要选择性忽略PEP8代码风格的警告信息可以使用以下方法：（养成良好的习惯，编写规范的代码！不推荐忽略！）</p><p>①将鼠标移到出现警告信息的地方，按 <font color="#FF0000">alt+Enter</font>，选择忽略（Ignore）这个错误即可：<br><img src="https://cdn.jsdelivr.net/gh/TRHX/ImageHosting/ITRHX-PIC/A21/01.png" alt="01"><br>②依次选择 <font color="#FF0000">File - Settings - Editor - Inspections</font>，在 Python下找到 <font color="#FF0000">PEP8 coding style violation</font> 选项，在右下角的 <font color="#FF0000">Ignore errors </font>里点击加号可以添加需要忽略的警告信息ID（ID信息见后面附录），例如想要忽略<code>indentation contains mixed spaces and tabs</code>这个警告，只需要添加其ID：<font color="#FF0000">E101</font> 即可<br><img src="https://cdn.jsdelivr.net/gh/TRHX/ImageHosting/ITRHX-PIC/A21/02.png" alt="02"><br>附录：全部警告信息以及对应的ID，官方地址：<a href="https://pep8.readthedocs.io/en/latest/intro.html#error-codes" target="_blank" rel="noopener">https://pep8.readthedocs.io/en/latest/intro.html#error-codes</a></p><table><thead><tr><th style="text-align:center">code</th><th style="text-align:center">sample message</th></tr></thead><tbody><tr><td style="text-align:center"><font color="#FF0000">E1</font></td><td style="text-align:center"><font color="#FF0000">Indentation</font></td></tr><tr><td style="text-align:center">E101</td><td style="text-align:center">indentation contains mixed spaces and tabs</td></tr><tr><td style="text-align:center">E111</td><td style="text-align:center">indentation is not a multiple of four</td></tr><tr><td style="text-align:center">E112</td><td style="text-align:center">expected an indented block</td></tr><tr><td style="text-align:center">E113</td><td style="text-align:center">unexpected indentation</td></tr><tr><td style="text-align:center">E114</td><td style="text-align:center">indentation is not a multiple of four (comment)</td></tr><tr><td style="text-align:center">E115</td><td style="text-align:center">expected an indented block (comment)</td></tr><tr><td style="text-align:center">E116</td><td style="text-align:center">unexpected indentation (comment)</td></tr><tr><td style="text-align:center">E117</td><td style="text-align:center">over-indented</td></tr><tr><td style="text-align:center">E121 (*^)</td><td style="text-align:center">continuation line under-indented for hanging indent</td></tr><tr><td style="text-align:center">E122 (^)</td><td style="text-align:center">continuation line missing indentation or outdented</td></tr><tr><td style="text-align:center">E123 (*)</td><td style="text-align:center">closing bracket does not match indentation of opening bracket’s line</td></tr><tr><td style="text-align:center">E124 (^)</td><td style="text-align:center">closing bracket does not match visual indentation</td></tr><tr><td style="text-align:center">E125 (^)</td><td style="text-align:center">continuation line with same indent as next logical line</td></tr><tr><td style="text-align:center">E126 (*^)</td><td style="text-align:center">continuation line over-indented for hanging indent</td></tr><tr><td style="text-align:center">E127 (^)</td><td style="text-align:center">continuation line over-indented for visual indent</td></tr><tr><td style="text-align:center">E128 (^)</td><td style="text-align:center">continuation line under-indented for visual indent</td></tr><tr><td style="text-align:center">E129 (^)</td><td style="text-align:center">visually indented line with same indent as next logical line</td></tr><tr><td style="text-align:center">E131 (^)</td><td style="text-align:center">continuation line unaligned for hanging indent</td></tr><tr><td style="text-align:center">E133 (*)</td><td style="text-align:center">closing bracket is missing indentation</td></tr><tr><td style="text-align:center"><font color="#FF0000">E2</font></td><td style="text-align:center"><font color="#FF0000">Whitespace</font></td></tr><tr><td style="text-align:center">E201</td><td style="text-align:center">whitespace after ‘(‘</td></tr><tr><td style="text-align:center">E202</td><td style="text-align:center">whitespace before ‘)’</td></tr><tr><td style="text-align:center">E203</td><td style="text-align:center">whitespace before ‘:’</td></tr><tr><td style="text-align:center">E211</td><td style="text-align:center">whitespace before ‘(‘</td></tr><tr><td style="text-align:center">E221</td><td style="text-align:center">multiple spaces before operator</td></tr><tr><td style="text-align:center">E222</td><td style="text-align:center">multiple spaces after operator</td></tr><tr><td style="text-align:center">E223</td><td style="text-align:center">tab before operator</td></tr><tr><td style="text-align:center">E224</td><td style="text-align:center">tab after operator</td></tr><tr><td style="text-align:center">E225</td><td style="text-align:center">missing whitespace around operator</td></tr><tr><td style="text-align:center">E226 (*)</td><td style="text-align:center">missing whitespace around arithmetic operator</td></tr><tr><td style="text-align:center">E227</td><td style="text-align:center">missing whitespace around bitwise or shift operator</td></tr><tr><td style="text-align:center">E228</td><td style="text-align:center">missing whitespace around modulo operator</td></tr><tr><td style="text-align:center">E231</td><td style="text-align:center">missing whitespace after ‘,’, ‘;’, or ‘:’</td></tr><tr><td style="text-align:center">E241 (*)</td><td style="text-align:center">multiple spaces after ‘,’</td></tr><tr><td style="text-align:center">E242 (*)</td><td style="text-align:center">tab after ‘,’</td></tr><tr><td style="text-align:center">E251</td><td style="text-align:center">unexpected spaces around keyword / parameter equals</td></tr><tr><td style="text-align:center">E261</td><td style="text-align:center">at least two spaces before inline comment</td></tr><tr><td style="text-align:center">E262</td><td style="text-align:center">inline comment should start with ‘# ‘</td></tr><tr><td style="text-align:center">E265</td><td style="text-align:center">block comment should start with ‘# ‘</td></tr><tr><td style="text-align:center">E266</td><td style="text-align:center">too many leading ‘#’ for block comment</td></tr><tr><td style="text-align:center">E271</td><td style="text-align:center">multiple spaces after keyword</td></tr><tr><td style="text-align:center">E272</td><td style="text-align:center">multiple spaces before keyword</td></tr><tr><td style="text-align:center">E273</td><td style="text-align:center">tab after keyword</td></tr><tr><td style="text-align:center">E274</td><td style="text-align:center">tab before keyword</td></tr><tr><td style="text-align:center">E275</td><td style="text-align:center">missing whitespace after keyword</td></tr><tr><td style="text-align:center"><font color="#FF0000">E3</font></td><td style="text-align:center"><font color="#FF0000">Blank line</font></td></tr><tr><td style="text-align:center">E301</td><td style="text-align:center">expected 1 blank line, found 0</td></tr><tr><td style="text-align:center">E302</td><td style="text-align:center">expected 2 blank lines, found 0</td></tr><tr><td style="text-align:center">E303</td><td style="text-align:center">too many blank lines (3)</td></tr><tr><td style="text-align:center">E304</td><td style="text-align:center">blank lines found after function decorator</td></tr><tr><td style="text-align:center">E305</td><td style="text-align:center">expected 2 blank lines after end of function or class</td></tr><tr><td style="text-align:center">E306</td><td style="text-align:center">expected 1 blank line before a nested definition</td></tr><tr><td style="text-align:center"><font color="#FF0000">E4</font></td><td style="text-align:center"><font color="#FF0000">Import</font></td></tr><tr><td style="text-align:center">E401</td><td style="text-align:center">multiple imports on one line</td></tr><tr><td style="text-align:center">E402</td><td style="text-align:center">module level import not at top of file</td></tr><tr><td style="text-align:center"><font color="#FF0000">E5</font></td><td style="text-align:center"><font color="#FF0000">Line length</font></td></tr><tr><td style="text-align:center">E501 (^)</td><td style="text-align:center">line too long (82 &gt; 79 characters)</td></tr><tr><td style="text-align:center">E502</td><td style="text-align:center">the backslash is redundant between brackets</td></tr><tr><td style="text-align:center"><font color="#FF0000">E7</font></td><td style="text-align:center"><font color="#FF0000">Statement</font></td></tr><tr><td style="text-align:center">E701</td><td style="text-align:center">multiple statements on one line (colon)</td></tr><tr><td style="text-align:center">E702</td><td style="text-align:center">multiple statements on one line (semicolon)</td></tr><tr><td style="text-align:center">E703</td><td style="text-align:center">statement ends with a semicolon</td></tr><tr><td style="text-align:center">E704 (*)</td><td style="text-align:center">multiple statements on one line (def)</td></tr><tr><td style="text-align:center">E711 (^)</td><td style="text-align:center">comparison to None should be ‘if cond is None:’</td></tr><tr><td style="text-align:center">E712 (^)</td><td style="text-align:center">comparison to True should be ‘if cond is True:’ or ‘if cond:’</td></tr><tr><td style="text-align:center">E713</td><td style="text-align:center">test for membership should be ‘not in’</td></tr><tr><td style="text-align:center">E714</td><td style="text-align:center">test for object identity should be ‘is not’</td></tr><tr><td style="text-align:center">E721 (^)</td><td style="text-align:center">do not compare types, use ‘isinstance()’</td></tr><tr><td style="text-align:center">E722</td><td style="text-align:center">do not use bare except, specify exception instead</td></tr><tr><td style="text-align:center">E731</td><td style="text-align:center">do not assign a lambda expression, use a def</td></tr><tr><td style="text-align:center">E741</td><td style="text-align:center">do not use variables named ‘l’, ‘O’, or ‘I’</td></tr><tr><td style="text-align:center">E742</td><td style="text-align:center">do not define classes named ‘l’, ‘O’, or ‘I’</td></tr><tr><td style="text-align:center">E743</td><td style="text-align:center">do not define functions named ‘l’, ‘O’, or ‘I’</td></tr><tr><td style="text-align:center"><font color="#FF0000">E9</font></td><td style="text-align:center"><font color="#FF0000">Runtime</font></td></tr><tr><td style="text-align:center">E901</td><td style="text-align:center">SyntaxError or IndentationError</td></tr><tr><td style="text-align:center">E902</td><td style="text-align:center">IOError</td></tr><tr><td style="text-align:center"><font color="#FF0000">W1</font></td><td style="text-align:center"><font color="#FF0000">Indentation warning</font></td></tr><tr><td style="text-align:center">W191</td><td style="text-align:center">indentation contains tabs</td></tr><tr><td style="text-align:center"><font color="#FF0000">W2</font></td><td style="text-align:center"><font color="#FF0000">Whitespace warning</font></td></tr><tr><td style="text-align:center">W291</td><td style="text-align:center">trailing whitespace</td></tr><tr><td style="text-align:center">W292</td><td style="text-align:center">no newline at end of file</td></tr><tr><td style="text-align:center">W293</td><td style="text-align:center">blank line contains whitespace</td></tr><tr><td style="text-align:center"><font color="#FF0000">W3</font></td><td style="text-align:center"><font color="#FF0000">Blank line warning</font></td></tr><tr><td style="text-align:center">W391</td><td style="text-align:center">blank line at end of file</td></tr><tr><td style="text-align:center"><font color="#FF0000">W5</font></td><td style="text-align:center"><font color="#FF0000">Line break warning</font></td></tr><tr><td style="text-align:center">W503 (*)</td><td style="text-align:center">line break before binary operator</td></tr><tr><td style="text-align:center">W504 (*)</td><td style="text-align:center">line break after binary operator</td></tr><tr><td style="text-align:center">W505 (*^)</td><td style="text-align:center">doc line too long (82 &gt; 79 characters)</td></tr><tr><td style="text-align:center"><font color="#FF0000">W6</font></td><td style="text-align:center"><font color="#FF0000">Deprecation warning</font></td></tr><tr><td style="text-align:center">W601</td><td style="text-align:center">.has_key() is deprecated, use ‘in’</td></tr><tr><td style="text-align:center">W602</td><td style="text-align:center">deprecated form of raising exception</td></tr><tr><td style="text-align:center">W603</td><td style="text-align:center">‘&lt;&gt;’ is deprecated, use ‘!=’</td></tr><tr><td style="text-align:center">W604</td><td style="text-align:center">backticks are deprecated, use ‘repr()’</td></tr><tr><td style="text-align:center">W605</td><td style="text-align:center">invalid escape sequence ‘x’</td></tr><tr><td style="text-align:center">W606</td><td style="text-align:center">‘async’ and ‘await’ are reserved keywords starting with Python 3.7</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> Python3 学习笔记 </category>
          
          <category> 学习经验 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> PEP8 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>VMware Pro 15 安装 Deepin15.9 国产操作系统</title>
      <link href="/2019/04/14/A20-install-deepin15.9/"/>
      <url>/2019/04/14/A20-install-deepin15.9/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p><a href="https://www.deepin.org/" target="_blank" rel="noopener">Deepin</a>是由武汉深之度科技有限公司开发的Linux发行版，个人认为其界面设计非常美观，而且作为国产操作系统，值得我们去体验和支持！</p><hr><h1 id="1-下载安装-VMware-Workstation-Pro-15"><a href="#1-下载安装-VMware-Workstation-Pro-15" class="headerlink" title="1.下载安装 VMware Workstation Pro 15"></a><font color="#FF0000">1.下载安装 VMware Workstation Pro 15</font></h1><p> 进入 <a href="https://www.vmware.com/products/workstation-pro/workstation-pro-evaluation.html" target="_blank" rel="noopener">VMware 官网</a>或者在软件商店下载最新版VMware虚拟机并安装<br><img src="https://cdn.jsdelivr.net/gh/TRHX/ImageHosting/ITRHX-PIC/A20/001.png" alt="001"></p><h1 id="2-下载-Deepin15-9-系统"><a href="#2-下载-Deepin15-9-系统" class="headerlink" title="2.下载 Deepin15.9 系统"></a><font color="#FF0000">2.下载 Deepin15.9 系统</font></h1><p>  进入 <a href="https://www.deepin.org/" target="_blank" rel="noopener">deepin 官网</a>，下载最新版 deepin 系统镜像<br><img src="https://cdn.jsdelivr.net/gh/TRHX/ImageHosting/ITRHX-PIC/A20/002.png" alt="002"></p><h1 id="3-在-VMware-中创建虚拟机"><a href="#3-在-VMware-中创建虚拟机" class="headerlink" title="3.在 VMware 中创建虚拟机"></a><font color="#FF0000">3.在 VMware 中创建虚拟机</font></h1><p>打开安装好的 VMware Workstation Pro 15，选择创建新的虚拟机<br><img src="https://cdn.jsdelivr.net/gh/TRHX/ImageHosting/ITRHX-PIC/A20/003.png" alt="003"><br>在新建虚拟机向导中选择自定义（高级）：<br><img src="https://cdn.jsdelivr.net/gh/TRHX/ImageHosting/ITRHX-PIC/A20/004.png" alt="004"><br>默认直接下一步，直到出现下图，再选择稍后安装操作系统：<br><img src="https://cdn.jsdelivr.net/gh/TRHX/ImageHosting/ITRHX-PIC/A20/005.png" alt="005"><br>选择客户机操作系统为 Linux ，如果你电脑是32位就选择 Ubuntu 版本，64位就选择 Ubuntu 64 位版本：<br><img src="https://cdn.jsdelivr.net/gh/TRHX/ImageHosting/ITRHX-PIC/A20/006.png" alt="006"><br>更改虚拟机名称及存放位置：<br><img src="https://cdn.jsdelivr.net/gh/TRHX/ImageHosting/ITRHX-PIC/A20/007.png" alt="007"><br>接下来为虚拟机指定处理器数量、分配内存（太大了可能会导致卡顿，太小了也不好，推荐内存大小即可）一直选择默认即可，选择磁盘时，选择创建新虚拟磁盘：<br><img src="https://cdn.jsdelivr.net/gh/TRHX/ImageHosting/ITRHX-PIC/A20/008.png" alt="008"><br>选择将虚拟磁盘储存为单个文件：<br><img src="https://cdn.jsdelivr.net/gh/TRHX/ImageHosting/ITRHX-PIC/A20/009.png" alt="009"><br>默认下一步：<br><img src="https://cdn.jsdelivr.net/gh/TRHX/ImageHosting/ITRHX-PIC/A20/010.png" alt="010"><br>点击完成：<br><img src="https://cdn.jsdelivr.net/gh/TRHX/ImageHosting/ITRHX-PIC/A20/011.png" alt="011"><br>此时我们就可以在虚拟机左侧“我的计算机”下面看到刚刚创建的虚拟机 Deepin，单击  Deepin，选择“编辑虚拟机设置”， 再选择“CD/DVD(SATA)”，选择“使用ISO映像文件”，点击“浏览”，找到先前我们下载好的 Deepin 15.9 镜像文件，点击“确定”<br><img src="https://cdn.jsdelivr.net/gh/TRHX/ImageHosting/ITRHX-PIC/A20/012.png" alt="012"><br><img src="https://cdn.jsdelivr.net/gh/TRHX/ImageHosting/ITRHX-PIC/A20/013.png" alt="013"></p><h1 id="4-在虚拟机上安装-Deepin-系统"><a href="#4-在虚拟机上安装-Deepin-系统" class="headerlink" title="4.在虚拟机上安装 Deepin 系统"></a><font color="#FF0000">4.在虚拟机上安装 Deepin 系统</font></h1><p>单击 Deepin，选择“开启此虚拟机”<br><img src="https://cdn.jsdelivr.net/gh/TRHX/ImageHosting/ITRHX-PIC/A20/014.png" alt="014"><br>接下来就是选择语言、创建用户、选择时区、指定磁盘等过程：<br><img src="https://cdn.jsdelivr.net/gh/TRHX/ImageHosting/ITRHX-PIC/A20/015.png" alt="015"><br><img src="https://cdn.jsdelivr.net/gh/TRHX/ImageHosting/ITRHX-PIC/A20/016.png" alt="016"><br><img src="https://cdn.jsdelivr.net/gh/TRHX/ImageHosting/ITRHX-PIC/A20/017.png" alt="017"><br><img src="https://cdn.jsdelivr.net/gh/TRHX/ImageHosting/ITRHX-PIC/A20/018.png" alt="018"><br>安装完成后：<br><img src="https://cdn.jsdelivr.net/gh/TRHX/ImageHosting/ITRHX-PIC/A20/019.png" alt="019"><br>可以看见界面还是相当美观的，系统也自带了深度的一些软件，比如深度录屏，深度录音，深度影院，深度计算器等等的一些小工具，作为国产操作系统，个人觉得已经非常优秀了，值得去体验！</p>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> VMware </tag>
            
            <tag> Deepin </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Windows 系统中 Pygame 的安装</title>
      <link href="/2019/03/10/A19-install-pygame/"/>
      <url>/2019/03/10/A19-install-pygame/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><blockquote><p>Pygame是跨平台Python模块，专为电子游戏设计，可用于管理图形、动画乃至声音，建立在SDL基础上，允许实时电子游戏研发而无需被低级语言（如机器语言和汇编语言）束缚，通过使用Pygame来处理在屏幕上绘制图像等任务，你不用考虑众多繁琐而艰难的编码工作，而是将重点放在程序的高级逻辑上。</p></blockquote><p>你可以从以下三个地址查找与你运行的Python版本相匹配的Windows安装程序：</p><ul><li><p><a href="https://bitbucket.org/pygame/pygame/downloads/" target="_blank" rel="noopener">https://bitbucket.org/pygame/pygame/downloads/</a>  （Pygame项目托管在代码分享网站Bitbucket中）</p></li><li><p><a href="http://www.pygame.org/download.shtml" target="_blank" rel="noopener">http://www.pygame.org/download.shtml</a> （Pygame官网）</p></li><li><p><a href="https://www.lfd.uci.edu/~gohlke/pythonlibs/#pygame" target="_blank" rel="noopener">https://www.lfd.uci.edu/~gohlke/pythonlibs/#pygame</a> （如果以上两个地址找不到合适的安装程序，推荐去这个）</p></li></ul><p><img src="https://cdn.jsdelivr.net/gh/TRHX/ImageHosting/ITRHX-PIC/A19/01.png" alt="01"></p><p>如果下载的是.exe文件，直接运行它，如果下载的是.whl文件，就需要打开命令窗口，切换到该文件所在的目录，使用pip来运行它：</p><p>首先检查电脑是否安装了pip，打开终端窗口，执行如下命令：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt;python -m pip --version</span><br></pre></td></tr></table></figure></p><p>如果输出版本信息则已安装：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt;pip 18.1 from E:\Python\lib\site-packages\pip (python 3.6)</span><br></pre></td></tr></table></figure></p><p>否则请安装pip，访问 <a href="https://bootstrap.pypa.io/get-pip.py" target="_blank" rel="noopener">https://bootstrap.pypa.io/get-pip.py</a> ，如果出现对话框请直接保存文件，如果出现的是get-pip.py的源代码，则需要新建一个get-pip.py文件，将该代码复制粘贴到其中，使用下面的命令运行get-pip.py：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt;python get-pip.py</span><br></pre></td></tr></table></figure></p><p>安装完成后可再次使用<code>python -m pip --version</code>命令检查是否成功安装了pip，成功安装pip后，使用以下命令来安装Pygame：<font color="#FF0000">（注意要先cd到你下载的文件的目录）</font><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt;python -m pip install --user 下载的.whl文件名</span><br></pre></td></tr></table></figure></p><p>出现以下信息则表示安装成功：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt;Successfully installed 你安装的Pygame版本</span><br></pre></td></tr></table></figure></p><p>比如我的Python版本是3.6.5，64位的，则需要下载pygame‑1.9.4‑cp36‑cp36m‑win_amd64.whl，该文件保存到了桌面，使用下面的命令安装Pygame:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">C:\Users\Lenovo&gt;cd desktop</span><br><span class="line"></span><br><span class="line">C:\Users\Lenovo\Desktop&gt;python -m pip install --user pygame‑1.9.4‑cp36‑cp36m‑win_amd64.whl</span><br><span class="line">Processing c:\users\lenovo\desktop\pygame‑1.9.4‑cp36‑cp36m‑win_amd64.whl</span><br><span class="line">Installing collected packages: pygame</span><br><span class="line">Successfully installed pygame‑1.9.4</span><br><span class="line"></span><br><span class="line">C:\Users\Lenovo&gt;Desktop&gt;</span><br></pre></td></tr></table></figure></p><p>检查是否成功安装Pygame：在Python的IDLE里输入<code>import pygame</code>，如果不报错，则安装成功，再输入<code>pygame.ver</code>就能看到版本号：</p><p><img src="https://cdn.jsdelivr.net/gh/TRHX/ImageHosting/ITRHX-PIC/A19/02.png" alt="02"><br>)</p><p>可能出现的问题：<br>报错：<code>xxxxxxxxxxxxxxxxxxxxxx.whl is not a supported wheel on this platform.</code><br>原因：Python版本与Pygame版本不对应<br>解决方法：Pygame文件名中的cp**表示Python对应的版本，另外并不是你电脑64位则下载64位，要看你安装的Python是否为64位，注意下载对应的版本！</p><p>报错：<code>You are using pip version x.x.x, however version x.x.x is available.You should consider upgrading via the &#39;python -m pip install --upgrade pip&#39; command.</code><br>原因：版本需要更新<br>解决方法：输入<code>python -m pip install --upgrade pip</code>命令进行更新即可</p><p>Pygame安装完成后我们就可以使用Python来开发游戏啦！</p>]]></content>
      
      
      <categories>
          
          <category> Python3 学习笔记 </category>
          
          <category> 学习经验 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Pygame </tag>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>免费CDN：jsDelivr + Github</title>
      <link href="/2019/02/10/A18-free-cdn/"/>
      <url>/2019/02/10/A18-free-cdn/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h4 id="本文有参考《jsDelivr-github使用教程，免费好用的cdn》——-By-hojun"><a href="#本文有参考《jsDelivr-github使用教程，免费好用的cdn》——-By-hojun" class="headerlink" title="本文有参考《jsDelivr+github使用教程，免费好用的cdn》—— By hojun"></a><center><font color="#FF0000">本文有参考</font><a href="https://www.hojun.cn/2019/01/18/jsDeliver-github%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B%EF%BC%8C%E5%85%8D%E8%B4%B9%E5%A5%BD%E7%94%A8%E7%9A%84cdn/" target="_blank" rel="noopener">《jsDelivr+github使用教程，免费好用的cdn》</a>—— By hojun</center></h4><hr><p>CDN的全称是Content Delivery Network，即内容分发网络。CDN是构建在网络之上的内容分发网络，依靠部署在各地的边缘服务器，通过中心平台的负载均衡、内容分发、调度等功能模块，使用户就近获取所需内容，降低网络拥塞，提高用户访问响应速度和命中率。CDN的关键技术主要有内容存储和分发技术。——百度百科</p><p>放在Github的资源在国内加载速度比较慢，因此需要使用CDN加速来优化网站打开速度，jsDelivr + Github便是免费且好用的CDN，非常适合博客网站使用。</p><hr><h1 id="1、新建Github仓库"><a href="#1、新建Github仓库" class="headerlink" title="1、新建Github仓库 "></a><font color="#FF0000">1、新建Github仓库 </font></h1><p><img src="https://cdn.jsdelivr.net/gh/TRHX/ImageHosting/ITRHX-PIC/A18/01.png" alt="01"></p><h1 id="2、克隆Github仓库到本地"><a href="#2、克隆Github仓库到本地" class="headerlink" title="2、克隆Github仓库到本地 "></a><font color="#FF0000">2、克隆Github仓库到本地 </font></h1><p>  点击 Clone or download，一键复制仓库地址<br><img src="https://cdn.jsdelivr.net/gh/TRHX/ImageHosting/ITRHX-PIC/A18/04.png" alt="04"></p><p> 在本地目录右键 Git Bash Here，执行以下命令：<br> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone 一键复制的仓库地址</span><br></pre></td></tr></table></figure></p><h1 id="3、上传资源"><a href="#3、上传资源" class="headerlink" title="3、上传资源 "></a><font color="#FF0000">3、上传资源 </font></h1><p>  复制需要上传的资源到本地git仓库（注：jsDelivr不支持加载超过20M的资源），在本地git仓库目录下右键 Git Bash Here，执行以下命令：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">git status                    //查看状态</span><br><span class="line">git add .                     //添加所有文件到暂存区</span><br><span class="line">git commit -m &apos;第一次提交&apos;      //把文件提交到仓库</span><br><span class="line">git push                      //推送至远程仓库</span><br></pre></td></tr></table></figure></p><h1 id="4、发布仓库"><a href="#4、发布仓库" class="headerlink" title="4、发布仓库 "></a><font color="#FF0000">4、发布仓库 </font></h1><p>  点击release发布<br><img src="https://cdn.jsdelivr.net/gh/TRHX/ImageHosting/ITRHX-PIC/A18/02.png" alt="02"></p><p>  自定义发布版本号<br>  <img src="https://cdn.jsdelivr.net/gh/TRHX/ImageHosting/ITRHX-PIC/A18/03.png" alt="03"></p><h1 id="5、通过jsDelivr引用资源"><a href="#5、通过jsDelivr引用资源" class="headerlink" title="5、通过jsDelivr引用资源 "></a><font color="#FF0000">5、通过jsDelivr引用资源 </font></h1><p>使用方法：<a href="https://cdn.jsdelivr.net/gh/你的用户名/你的仓库名@发布的版本号/文件路径" target="_blank" rel="noopener">https://cdn.jsdelivr.net/gh/你的用户名/你的仓库名@发布的版本号/文件路径</a><br>例如：<a href="https://cdn.jsdelivr.net/gh/TRHX/CDN-for-itrhx.com@1.0/images/trhx.png" target="_blank" rel="noopener">https://cdn.jsdelivr.net/gh/TRHX/CDN-for-itrhx.com@1.0/images/trhx.png</a><br>&nbsp;&nbsp;&nbsp;&nbsp;<a href="https://cdn.jsdelivr.net/gh/TRHX/CDN-for-itrhx.com@2.0.1/css/style.css" target="_blank" rel="noopener">https://cdn.jsdelivr.net/gh/TRHX/CDN-for-itrhx.com@2.0.1/css/style.css</a><br>&nbsp;&nbsp;&nbsp;&nbsp;<a href="https://cdn.jsdelivr.net/gh/moezx/cdn@3.1.3//The%20Pet%20Girl%20of%20Sakurasou.mp4" target="_blank" rel="noopener">https://cdn.jsdelivr.net/gh/moezx/cdn@3.1.3//The%20Pet%20Girl%20of%20Sakurasou.mp4</a></p><p>注意：版本号不是必需的，是为了区分新旧资源，如果不使用版本号，将会直接引用最新资源，除此之外还可以使用某个范围内的版本，查看所有资源等，具体使用方法如下：</p><ul><li><p>// 加载任何Github发布、提交或分支<br><a href="https://cdn.jsdelivr.net/gh/user/repo@version/file" target="_blank" rel="noopener">https://cdn.jsdelivr.net/gh/user/repo@version/file</a></p></li><li><p>// 加载 jQuery v3.2.1<br><a href="https://cdn.jsdelivr.net/gh/jquery/jquery@3.2.1/dist/jquery.min.js" target="_blank" rel="noopener">https://cdn.jsdelivr.net/gh/jquery/jquery@3.2.1/dist/jquery.min.js</a></p></li><li><p>// 使用版本范围而不是特定版本<br><a href="https://cdn.jsdelivr.net/gh/jquery/jquery@3.2/dist/jquery.min.js" target="_blank" rel="noopener">https://cdn.jsdelivr.net/gh/jquery/jquery@3.2/dist/jquery.min.js</a><br><a href="https://cdn.jsdelivr.net/gh/jquery/jquery@3/dist/jquery.min.js" target="_blank" rel="noopener">https://cdn.jsdelivr.net/gh/jquery/jquery@3/dist/jquery.min.js</a></p></li><li><p>// 完全省略该版本以获取最新版本<br><a href="https://cdn.jsdelivr.net/gh/jquery/jquery/dist/jquery.min.js" target="_blank" rel="noopener">https://cdn.jsdelivr.net/gh/jquery/jquery/dist/jquery.min.js</a></p></li><li><p>// 将“.min”添加到任何JS/CSS文件中以获取缩小版本，如果不存在，将为会自动生成<br><a href="https://cdn.jsdelivr.net/gh/jquery/jquery@3.2.1/src/core.min.js" target="_blank" rel="noopener">https://cdn.jsdelivr.net/gh/jquery/jquery@3.2.1/src/core.min.js</a></p></li><li><p>// 在末尾添加 / 以获取资源目录列表<br><a href="https://cdn.jsdelivr.net/gh/jquery/jquery/" target="_blank" rel="noopener">https://cdn.jsdelivr.net/gh/jquery/jquery/</a></p></li></ul>]]></content>
      
      
      <categories>
          
          <category> CDN </category>
          
      </categories>
      
      
        <tags>
            
            <tag> jsDelivr </tag>
            
            <tag> CDN </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>新年快乐！</title>
      <link href="/2019/02/05/A17-happy-new-year/"/>
      <url>/2019/02/05/A17-happy-new-year/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><table><thead><tr><th style="text-align:center">C</th><th style="text-align:center"><code>printf(&quot;2019，祝大家&quot;);</code></th></tr></thead><tbody><tr><td style="text-align:center">C++</td><td style="text-align:center"><code>cout&lt;&lt;&quot;一帆风顺&quot;;</code></td></tr><tr><td style="text-align:center">C#</td><td style="text-align:center"><code>System.Console.WriteLine(&quot;二龙腾飞&quot;)</code></td></tr><tr><td style="text-align:center">VB</td><td style="text-align:center"><code>Msg(&quot;三羊开泰&quot;)</code></td></tr><tr><td style="text-align:center">VC</td><td style="text-align:center"><code>MessageBox(&quot;四季平安&quot;);</code></td></tr><tr><td style="text-align:center">Java</td><td style="text-align:center"><code>System.out.println(&quot;五福临门&quot;);</code></td></tr><tr><td style="text-align:center">JavaScript</td><td style="text-align:center"><code>alert(&quot;六六大顺&quot;)</code></td></tr><tr><td style="text-align:center">PHP</td><td style="text-align:center"><code>echo &quot;七星高照&quot;;</code></td></tr><tr><td style="text-align:center">Python</td><td style="text-align:center"><code>print(&quot;八方来财&quot;)</code></td></tr><tr><td style="text-align:center">Html</td><td style="text-align:center"><code>&lt;br/&gt;九运当头&lt;br/&gt;</code></td></tr><tr><td style="text-align:center">Objectivec</td><td style="text-align:center"><code>NSLog(@&quot;十全十美&quot;);</code></td></tr><tr><td style="text-align:center">QBasic</td><td style="text-align:center"><code>Print &quot;阖家幸福&quot;</code></td></tr><tr><td style="text-align:center">Asp</td><td style="text-align:center"><code>Response.Write &quot;心想事成&quot;</code></td></tr><tr><td style="text-align:center">Ruby</td><td style="text-align:center"><code>puts &quot;财源广进&quot;</code></td></tr><tr><td style="text-align:center">VBScript</td><td style="text-align:center"><code>MsgBox &quot;幸福安康&quot;</code></td></tr><tr><td style="text-align:center">XML</td><td style="text-align:center"><code>&lt;TextView android:text=&quot;大展宏图&quot; /&gt;</code></td></tr><tr><td style="text-align:center">LUA</td><td style="text-align:center"><code>print(&quot;学业有成&quot;)</code></td></tr><tr><td style="text-align:center">Delphi</td><td style="text-align:center"><code>ShowMessage(&#39;万事如意&#39;);</code></td></tr><tr><td style="text-align:center">shell</td><td style="text-align:center"><code>echo 步步高升</code></td></tr><tr><td style="text-align:center">perl</td><td style="text-align:center"><code>print &#39;鸿案齐眉&#39;</code></td></tr><tr><td style="text-align:center">LISP</td><td style="text-align:center"><code>(format t &quot;身体健康~%&quot;)</code></td></tr><tr><td style="text-align:center">powerBuilder</td><td style="text-align:center"><code>messagebox（&quot;龙马精神&quot;)</code></td></tr><tr><td style="text-align:center">COBOL</td><td style="text-align:center"><code>DISPLAY &#39;笑口常开&#39;</code></td></tr><tr><td style="text-align:center">aswing</td><td style="text-align:center"><code>JOptionPane.showMessageDialog(&quot;happy&quot;,&quot;好运连连&quot;)</code></td></tr><tr><td style="text-align:center">Android</td><td style="text-align:center"><code>Toast.makeText(getApplicationContext(),&quot;年年有余&quot;,Toast.LENGTH_SHORT).show()</code></td></tr><tr><td style="text-align:center">flex</td><td style="text-align:center"><code>Alert.show(&quot;大吉大利&quot;);</code></td></tr><tr><td style="text-align:center">Foxpro</td><td style="text-align:center"><code>?[家庭幸福！]</code></td></tr><tr><td style="text-align:center">iapp</td><td style="text-align:center"><code>tw(&quot;瑞气盈门&quot;)</code></td></tr><tr><td style="text-align:center">DOS批处理</td><td style="text-align:center"><code>echo 鹏程万里</code></td></tr><tr><td style="text-align:center">易语言</td><td style="text-align:center"><code>调试输出(“万事亨通”)</code></td></tr><tr><td style="text-align:center">Clojure</td><td style="text-align:center"><code>(println &quot;年年有今昔&quot;)</code></td></tr><tr><td style="text-align:center">verilog/systemverilog/e</td><td style="text-align:center"><code>$display(&quot;岁岁有今朝&quot;)</code></td></tr><tr><td style="text-align:center">as</td><td style="text-align:center"><code>trace(&quot;祝大家新年快乐！&quot;);</code></td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> BLOG </category>
          
      </categories>
      
      
        <tags>
            
            <tag> BLOG </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>一台电脑使用两个/多个GitHub账号部署两个/多个Hexo博客</title>
      <link href="/2019/01/18/A16-deploy-two-or-more-hexo-blogs/"/>
      <url>/2019/01/18/A16-deploy-two-or-more-hexo-blogs/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p><img src="https://cdn.jsdelivr.net/gh/TRHX/ImageHosting/ITRHX-PIC/A16/01.jpg" alt="01"></p><p>由于个人原因需要在一台电脑上部署两个Hexo博客，本来以为挺简单，没想到问题重重，首先是一个GitHub账号只能搭建一个Hexo博客，因此就需要使用其他GitHub账号；其次是一台电脑绑定两个GitHub账号，则需要两对公钥，在处理第二个问题时遇到的问题比较多，因为对这方面一窍不通，还是小白，所以折腾了一下午才解决，网上好多教程我都看不懂，觉得不（自）够（己）详（太）细（笨），因此详细记录一下</p><a id="more"></a><p>原理分析：</p><blockquote><ul><li>SSH的公钥是GitHub作为本地仓库和远程仓库连接的唯一标识，一个公钥只能对应一个GitHub账户，如果将一个相同的公钥上传到不同的GitHub账户，GitHub则无法做出辨识，进而导致错误</li><li>一台电脑，可以生成多对公私钥，可以通过配置，将不同的公钥上传到不同的GitHub账号，那么就不存在单个公钥绑定多个GitHub账号的情况存在了</li></ul></blockquote><p>相关问题报错：</p><blockquote><ul><li>同一台电脑部署第二个Hexo博客执行<code>hexo g -d</code>时报错：<code>ERROR: Permission to xxxxxx/xxxxxx.github.io.git denied to xxxxxx.</code></li><li>添加新的 SSH 密钥 到 SSH agent 执行<code>ssh-add xxx</code>时报错：<code>Could not open a connection to your authentication agent.</code></li><li>单独设置用户名/邮箱时报错：<code>fatal: not in a git directory</code></li></ul></blockquote><hr><p>以下是详细过程：<br>前提：假设你的第二个博客相关配置操作已经顺利完成，但使用<code>hexo g -d</code>命令部署到 GitHub 上时报错：<code>ERROR: Permission to xxxxxx/xxxxxx.github.io.git denied to xxxxxx.</code></p><h1 id="查看当前密钥"><a href="#查看当前密钥" class="headerlink" title="- 查看当前密钥"></a>- 查看当前密钥</h1><p>首先我们打开终端输入<code>ls ~/.ssh/</code>可以查看当前已有的密钥，显示<code>id_rsa</code> 与 <code>id_rsa_pub</code>说明已经有一对密钥</p><h1 id="创建新的密钥"><a href="#创建新的密钥" class="headerlink" title="- 创建新的密钥"></a>- 创建新的密钥</h1><p>首先使用以下命令进入 SSH根目录下：<br><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">cd</span> ~<span class="string">/.ssh/</span></span><br></pre></td></tr></table></figure></p><h2 id="方法一"><a href="#方法一" class="headerlink" title="方法一"></a>方法一</h2><p>直接使用以下命令创建新密钥，然后两次回车即可：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen -t rsa -f  ~/.ssh/这里是新密钥名称 -C <span class="string">"这里是你的邮箱"</span></span><br></pre></td></tr></table></figure></p><p>注意区别新密钥名称和旧密钥名称，不要相同！！！</p><h2 id="方法二"><a href="#方法二" class="headerlink" title="方法二"></a>方法二</h2><p>使用下面命令行创建新密钥：<br><figure class="highlight mathematica"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen -t rsa -<span class="keyword">C</span> <span class="string">"这里是你的邮箱"</span></span><br></pre></td></tr></table></figure></p><p>回车后会出现：<br><figure class="highlight vbnet"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Generating <span class="keyword">public</span>/<span class="keyword">private</span> rsa <span class="keyword">key</span> pair.  </span><br><span class="line">Enter file <span class="keyword">in</span> which <span class="keyword">to</span> save the <span class="keyword">key</span> (/c/Users/you/.ssh/id_rsa):</span><br></pre></td></tr></table></figure></p><p>注意此时需要你输入新密钥的名称，同样要注意区别新密钥名称和旧密钥名称，不要相同！！！之后再两次回车，新密钥创建完毕！</p><h1 id="配置config"><a href="#配置config" class="headerlink" title="- 配置config"></a>- 配置config</h1><p>查看你的.ssh/根路径下, 有没有config文件,（ 比如我的路径为C:\Users\Lenovo.ssh）没有则使用以下命令创建一个config文件：<br><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">touch</span> config</span><br></pre></td></tr></table></figure></p><p>用记事本或者其他工具打开config文件（注意config文件是没有任何后缀名的），写入以下配置：</p><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#第一个账号，默认使用的账号，不用做任何更改</span></span><br><span class="line">Host github.com</span><br><span class="line">HostName github.com</span><br><span class="line"><span class="keyword">User</span> <span class="title">git</span></span><br><span class="line">IdentityFile ~/.ssh/id_rsa</span><br><span class="line"></span><br><span class="line"><span class="comment">#第二个新账号，#"xxxxxx"为前缀名，可以任意设置，要记住，后面需要用到</span></span><br><span class="line">Host xxxxxx.github.com</span><br><span class="line">HostName github.com</span><br><span class="line"><span class="keyword">User</span> <span class="title">git</span></span><br><span class="line">IdentityFile ~/.ssh/这里是你创建的新密钥的名称</span><br></pre></td></tr></table></figure><h1 id="设置新GitHub账户SSH-key"><a href="#设置新GitHub账户SSH-key" class="headerlink" title="- 设置新GitHub账户SSH key"></a>- 设置新GitHub账户SSH key</h1><p>输入以下命令复制你创建的公钥：<br><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">clip &lt; ~<span class="string">/.ssh/</span>这里是你创建的新密钥的名称<span class="string">.pub</span></span><br></pre></td></tr></table></figure></p><p>也可以直接在.ssh目录下找到你创建的新的公钥，文件名为<code>新密钥的名称.pub</code>，（比如我的是<code>trhx_rsa.pub</code>），用记事本打开，复制里面的内容，然后打开你的新GitHub账号主页，依次进入Settings —&gt; SSH and GPG keys —&gt; New SSH key，将刚复制的内容粘贴到Key那里，Title可以随便填，点击Add Key保存。</p><h1 id="清空本地的-SSH-缓存，添加新的-SSH-密钥-到-SSH-agent中"><a href="#清空本地的-SSH-缓存，添加新的-SSH-密钥-到-SSH-agent中" class="headerlink" title="- 清空本地的 SSH 缓存，添加新的 SSH 密钥 到 SSH agent中"></a>- 清空本地的 SSH 缓存，添加新的 SSH 密钥 到 SSH agent中</h1><p>使用命令<code>cd ~/.ssh</code>cd到.ssh根目录下，依次执行以下命令：</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ssh-<span class="keyword">add</span><span class="bash"> -D</span></span><br><span class="line"><span class="bash">ssh-add xxxxxx <span class="comment">#旧密钥名称，一般是id_rsa</span></span></span><br><span class="line"><span class="bash">ssh-add xxxxxx <span class="comment">#新创建的密钥名称</span></span></span><br></pre></td></tr></table></figure><p>如果执行以上命令出现错误：<code>Could not open a connection to your authentication agent.</code>，那么就需要先执行<code>ssh-agent bash</code>，再执行以上命令</p><h1 id="验证配置是否成功"><a href="#验证配置是否成功" class="headerlink" title="- 验证配置是否成功"></a>- 验证配置是否成功</h1><p>依次执行以下命令，第一个为默认ssh_key验证；第二个为新的ssh_key验证，其中“xxxxxx”为你先前在config文件中的命名<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ssh -T git@github.com</span><br><span class="line">ssh -T git@xxxxxxx<span class="selector-class">.github</span><span class="selector-class">.com</span></span><br></pre></td></tr></table></figure></p><p>依次显示以下信息, 则说明配置成功：<br><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Hi 你的用户名! You<span class="symbol">'ve</span> successfully authenticated, but GitHub does <span class="keyword">not</span> provide shell <span class="keyword">access</span>.</span><br></pre></td></tr></table></figure></p><h1 id="取消全局用户名-邮箱配置，单独设置用户名-邮箱"><a href="#取消全局用户名-邮箱配置，单独设置用户名-邮箱" class="headerlink" title="- 取消全局用户名/邮箱配置，单独设置用户名/邮箱"></a>- 取消全局用户名/邮箱配置，单独设置用户名/邮箱</h1><p>执行如下命令，取消全局用户名和邮箱配置（如果已经设置了全局的话）：</p><figure class="highlight dsconfig"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">git </span><span class="string">config </span><span class="built_in">--global</span> <span class="built_in">--unset</span> <span class="string">user.</span><span class="string">name</span></span><br><span class="line"><span class="string">git </span><span class="string">config </span><span class="built_in">--global</span> <span class="built_in">--unset</span> <span class="string">user.</span><span class="string">email</span></span><br></pre></td></tr></table></figure><p>分别进入你的两个Hexo博客.git目录下执行以下命令单独设置用户名/邮箱：<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git config user<span class="selector-class">.name</span> <span class="string">"这里是用户名"</span></span><br><span class="line">git config user<span class="selector-class">.email</span> <span class="string">"这里是你的邮箱"</span></span><br></pre></td></tr></table></figure></p><p>如果此时报错：<code>fatal: not in a git directory</code>，说明你没有进入.git目录下，具体路径：\Hexo\.deploy_git\.git，.git目录是隐藏的，需要你设置隐藏目录可见</p><p>执行以下命令可以查看设置是否成功<br><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">config</span> <span class="comment">--list</span></span><br></pre></td></tr></table></figure></p><h1 id="hexo-配置文件修改git地址"><a href="#hexo-配置文件修改git地址" class="headerlink" title="- hexo 配置文件修改git地址"></a>- hexo 配置文件修改git地址</h1><p>打开你的第二个博客Hexo目录下的_config.yml文件，找到deploy关键字，写入以下配置并保存：<br><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">deploy</span>:</span><br><span class="line">  <span class="attribute">type</span>: git</span><br><span class="line">  <span class="attribute">repository</span>: git<span class="variable">@xxxxxx</span>.github.<span class="attribute">com</span>:你的用户名/你的用户名.github.io.git</span><br><span class="line">  <span class="attribute">branch</span>: master</span><br></pre></td></tr></table></figure></p><p>比如我的配置：<br><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">deploy</span>:</span><br><span class="line">  <span class="attribute">type</span>: git</span><br><span class="line">  <span class="attribute">repository</span>: git<span class="variable">@love109</span>.github.<span class="attribute">com</span>:love109/love109.github.io.git</span><br><span class="line">  <span class="attribute">branch</span>: master</span><br></pre></td></tr></table></figure></p><p>大功告成，再次执行hexo g -d就能成功将新的博客部署到 Github 上了</p>]]></content>
      
      
      <categories>
          
          <category> Hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
            <tag> Github </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python3 基础学习笔记 C09</title>
      <link href="/2018/11/16/A15-Python3-basic-C09/"/>
      <url>/2018/11/16/A15-Python3-basic-C09/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><blockquote><center><font color="#1BC3FB" size="4">Python3 基础学习笔记第九章 —— 【文件和异常】</font></center></blockquote><a id="more"></a><hr><h1 id="9-1-从文件中读取数据"><a href="#9-1-从文件中读取数据" class="headerlink" title=" - 9.1 从文件中读取数据  "></a><font color="#FF0000"> - 9.1 从文件中读取数据  </font></h1><h1 id="9-1-1-读取整个文件"><a href="#9-1-1-读取整个文件" class="headerlink" title=" - 9.1.1 读取整个文件  "></a><font color="#FF0000"> - 9.1.1 读取整个文件  </font></h1><p>有一个文件，包含精确到小数点后30位的圆周率值，且在小数点后每10位处都换行：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Circumference rate.txt</span><br><span class="line">----------</span><br><span class="line">3.1415926535</span><br><span class="line">  8979323846</span><br><span class="line">  2643383279</span><br></pre></td></tr></table></figure></p><p>以下两个程序将打开并读取这个文件，再将其内容显示到屏幕上：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#file_reader.py</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> open(<span class="string">'Circumference rate.txt'</span>) <span class="keyword">as</span> file_object:</span><br><span class="line">    contents = file_object.read()</span><br><span class="line">    print(contents)</span><br></pre></td></tr></table></figure></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#file_reader2.py</span></span><br><span class="line"></span><br><span class="line">contents = open (<span class="string">'Circumference rate.txt'</span>)</span><br><span class="line">print(contents.read())</span><br><span class="line">contents.close()</span><br></pre></td></tr></table></figure><p>函数<font color="#FF0000">open()</font>接受一个参数：要打开的文件的名称，Python在当前执行的文件所在的目录中查找指定的文件；关键字<font color="#FF0000">with</font>在不再需要访问文件后将其关闭；也可以调用<font color="#FF0000">open()</font>和<font color="#FF0000">close()</font>来打开和关闭文件，如果使用这种方法，当程序存在bug时，<font color="#FF0000">close()</font>语句未执行，文件将不会被关闭；方法<font color="#FF0000">read()</font>将读取这个文件的全部内容，并将其作为一个长长的字符串储存在变量<font color="#FF0000">contents</font>中，通过打印<font color="#FF0000">contents</font>的值，就可以将这个文本文件的全部内容打印出来：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">3.1415926535</span></span><br><span class="line">  <span class="number">8979323846</span></span><br><span class="line">  <span class="number">2643383279</span></span><br></pre></td></tr></table></figure></p><p>输出结果末尾有一空行，这是因为read()到达末尾时返回一个空字符串，而将这个空字符串显示出来就是一个空行，如果要删除末尾的空行，可在print语句中使用rstrip():<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#file_reader.py</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> open(<span class="string">'Circumference rate.txt'</span>) <span class="keyword">as</span> file_object:</span><br><span class="line">    contents = file_object.read()</span><br><span class="line">    print(contents.rstrip())</span><br></pre></td></tr></table></figure></p><p>输出结果如下：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">3.1415926535</span></span><br><span class="line">  <span class="number">8979323846</span></span><br><span class="line">  <span class="number">2643383279</span></span><br></pre></td></tr></table></figure></p><h1 id="9-1-2-文件路径"><a href="#9-1-2-文件路径" class="headerlink" title=" - 9.1.2 文件路径  "></a><font color="#FF0000"> - 9.1.2 文件路径  </font></h1><blockquote><p><font color="#FF0000">相对文件路径：</font>假定程序文件位于python_work文件夹中，程序文件操作的文本文件位于python_work文件夹的子文件夹text_files中，此时可以使用相对文件路径来打开该文本文件，相对文件路径让Python到指定的位置去查找，而该位置是相对于当前运行的程序所在目录的</p></blockquote><p>在Linux和OS X中，相对路径类似于如下：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">with</span> open(<span class="string">'text_files/filename.txt'</span>) <span class="keyword">as</span> file_object:</span><br></pre></td></tr></table></figure></p><p>在Windows系统中，文件路径中使用反斜杠（\）而不是斜杠（/）:<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">with</span> open(<span class="string">'text_files\filename.txt'</span>) <span class="keyword">as</span> file_object:</span><br></pre></td></tr></table></figure></p><blockquote><p><font color="#FF0000">绝对文件路径：</font>不用关心当前运行的程序储存在什么地方，直接将文件在计算机中的准确位置告诉Python，这称为绝对文件路径，绝对路径通常比相对路径更长，因此将其储存在一个变量中，再将变量传递给open()会有所帮助</p></blockquote><p>在Linux和OS X中，绝对路径类似于如下：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">file_path = <span class="string">'/home/ehmatthes/other_files/text_files/filename.txt'</span></span><br><span class="line"><span class="keyword">with</span> open(file_path) <span class="keyword">as</span> file_object:</span><br></pre></td></tr></table></figure></p><p>在Windows系统中，绝对路径类似于如下：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">file_path = <span class="string">'C:\Users\ehmatthes\other_files\text_files\filename.txt'</span></span><br><span class="line"><span class="keyword">with</span> open(file_path) <span class="keyword">as</span> file_object:</span><br></pre></td></tr></table></figure></p><h1 id="9-1-3-逐行读取"><a href="#9-1-3-逐行读取" class="headerlink" title=" - 9.1.3 逐行读取  "></a><font color="#FF0000"> - 9.1.3 逐行读取  </font></h1><p>要以每次一行的方式检查文件，可对文件对象使用for循环：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#file_reader.py</span></span><br><span class="line"></span><br><span class="line">filename = <span class="string">'Circumference rate.txt'</span></span><br><span class="line"><span class="keyword">with</span> open(filename) <span class="keyword">as</span> file_object:</span><br><span class="line">    <span class="keyword">for</span> line <span class="keyword">in</span> file_object:</span><br><span class="line">        print(line)</span><br></pre></td></tr></table></figure></p><p>在文件中每行的末尾都有一个看不见的换行符，而print语句也会加上一个换行符，因此每行末尾都有两个换行符：一个来自文件，一个来自print语句，输出结果如下：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">3.1415926535</span></span><br><span class="line"></span><br><span class="line">  <span class="number">8979323846</span></span><br><span class="line"></span><br><span class="line">  <span class="number">2643383279</span></span><br></pre></td></tr></table></figure></p><p>要消除这些多余的空白行，可以使用rstrip():<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#file_reader.py</span></span><br><span class="line"></span><br><span class="line">filename = <span class="string">'Circumference rate.txt'</span></span><br><span class="line"><span class="keyword">with</span> open(filename) <span class="keyword">as</span> file_object:</span><br><span class="line">    <span class="keyword">for</span> line <span class="keyword">in</span> file_object:</span><br><span class="line">        print(line.rstrip())</span><br></pre></td></tr></table></figure></p><p>输出结果如下：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">3.1415926535</span></span><br><span class="line">  <span class="number">8979323846</span></span><br><span class="line">  <span class="number">2643383279</span></span><br></pre></td></tr></table></figure></p><h1 id="9-1-4-创建一个包含文件各行内容的列表"><a href="#9-1-4-创建一个包含文件各行内容的列表" class="headerlink" title=" - 9.1.4 创建一个包含文件各行内容的列表  "></a><font color="#FF0000"> - 9.1.4 创建一个包含文件各行内容的列表  </font></h1><p>使用关键字with时，open()返回的文件对象只在with代码块内可用，如果要在with代码块外访问文件的内容，可在with代码块内将文件的各行储存在一个列表当中，并在with代码块外使用该列表：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#file_reader.py</span></span><br><span class="line"></span><br><span class="line">filename = <span class="string">'Circumference rate.txt'</span></span><br><span class="line"><span class="keyword">with</span> open(filename) <span class="keyword">as</span> file_object:</span><br><span class="line">    lines = file_object.readlines()</span><br><span class="line">    </span><br><span class="line"><span class="keyword">for</span> line <span class="keyword">in</span> lines:</span><br><span class="line">    print(line.rstrip())</span><br></pre></td></tr></table></figure></p><p>输出结果与文件内容完全一致</p><h1 id="9-1-5-使用文件的内容"><a href="#9-1-5-使用文件的内容" class="headerlink" title=" - 9.1.5 使用文件的内容  "></a><font color="#FF0000"> - 9.1.5 使用文件的内容  </font></h1><p>创建一个字符串，它包含文件中储存的所有数字，且没有任何空格：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#pi_string.py</span></span><br><span class="line"></span><br><span class="line">filename = <span class="string">'Circumference rate.txt'</span></span><br><span class="line"><span class="keyword">with</span> open(filename) <span class="keyword">as</span> file_object:</span><br><span class="line">    lines = file_object.readlines()</span><br><span class="line"></span><br><span class="line">pi_string = <span class="string">''</span></span><br><span class="line"><span class="keyword">for</span> line <span class="keyword">in</span> lines:</span><br><span class="line">    pi_string += line.rstrip()</span><br><span class="line">    </span><br><span class="line">print(pi_string)</span><br><span class="line">print(len(pi_string))</span><br></pre></td></tr></table></figure></p><p>打印该字符串以及其长度：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">3.1415926535</span>  <span class="number">8979323846</span>  <span class="number">2643383279</span></span><br><span class="line"><span class="number">36</span></span><br></pre></td></tr></table></figure></p><p>由于原文件每行左边都有空格，我们可以使用strip()而不是rstrip()来删除它：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#pi_string.py</span></span><br><span class="line"></span><br><span class="line">filename = <span class="string">'Circumference rate.txt'</span></span><br><span class="line"><span class="keyword">with</span> open(filename) <span class="keyword">as</span> file_object:</span><br><span class="line">    lines = file_object.readlines()</span><br><span class="line"></span><br><span class="line">pi_string = <span class="string">''</span></span><br><span class="line"><span class="keyword">for</span> line <span class="keyword">in</span> lines:</span><br><span class="line">    pi_string += line.strip()</span><br><span class="line">    </span><br><span class="line">print(pi_string)</span><br><span class="line">print(len(pi_string))</span><br></pre></td></tr></table></figure></p><p>输出结果如下：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">3.141592653589793238462643383279</span></span><br><span class="line"><span class="number">32</span></span><br></pre></td></tr></table></figure></p><blockquote><p>Python中有三个去除头尾字符、空白符的函数，它们依次为: </p><p><font color="#FF0000">strip：</font>用来去除头尾字符、空白符(包括\n、\r、\t、’ ‘，即：换行、回车、制表符、空格) </p><p><font color="#FF0000">lstrip：</font>用来去除开头字符、空白符(包括\n、\r、\t、’ ‘，即：换行、回车、制表符、空格)</p><p><font color="#FF0000">rstrip：</font>用来去除结尾字符、空白符(包括\n、\r、\t、’ ‘，即：换行、回车、制表符、空格)<br>注意：这些函数都只会删除头和尾的字符，中间的不会删除。<br>用法分别为：<br>string.strip([chars])<br>string.lstrip([chars])<br>string.rstrip([chars])<br>参数chars是可选的，当chars为空，默认删除string头尾的空白符(包括\n、\r、\t、’ ‘)<br>当chars不为空时，函数会被chars解成一个个的字符，然后将这些字符去掉<br>它返回的是去除头尾字符(或空白符)的string副本，string本身不会发生改变</p></blockquote><h1 id="9-2-写入文件"><a href="#9-2-写入文件" class="headerlink" title=" - 9.2 写入文件 "></a><font color="#FF0000"> - 9.2 写入文件 </font></h1><p>将一条简单的消息储存到文件中：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#write_message.py</span></span><br><span class="line"></span><br><span class="line">filename = <span class="string">'programming.txt'</span></span><br><span class="line"><span class="keyword">with</span> open(filename,<span class="string">'w'</span>) <span class="keyword">as</span> file_object:</span><br><span class="line">    file_object.write(<span class="string">"I love programming!"</span>)</span><br></pre></td></tr></table></figure></p><p>调用open()时提供了两个实参，第一个实参也是要打开文件的名称，第二个实参（’w’）告诉Python，我们要以写入模式打开这个文件，打开文件时，可指定<font color="#FF0000">读取模式（’r’）、写入模式（’w’）、附加模式（’a’）</font>或者让我们能够<font color="#FF0000">读取和写入文件的模式（’r+’）</font>，如果省略模式实参，则默认以只读模式打开文件</p><center>附表：Python读写文件各种模式区别</center><table><thead><tr><th style="text-align:center">模式</th><th style="text-align:center">可做操作</th><th style="text-align:center">若文件不存在</th><th style="text-align:center">是否覆盖</th></tr></thead><tbody><tr><td style="text-align:center">r</td><td style="text-align:center">打开一个文件用于只读</td><td style="text-align:center">报错</td><td style="text-align:center">-</td></tr><tr><td style="text-align:center">rb</td><td style="text-align:center">以二进制格式打开一个文件用于只读</td><td style="text-align:center">报错</td><td style="text-align:center">-</td></tr><tr><td style="text-align:center">r+</td><td style="text-align:center">打开一个文件用于读和写</td><td style="text-align:center">报错</td><td style="text-align:center">是</td></tr><tr><td style="text-align:center">rb+</td><td style="text-align:center">以二进制格式打开一个文件用于读和写</td><td style="text-align:center">报错</td><td style="text-align:center">是</td></tr><tr><td style="text-align:center">w</td><td style="text-align:center">打开一个文件用于只写</td><td style="text-align:center">创建</td><td style="text-align:center">是</td></tr><tr><td style="text-align:center">wb</td><td style="text-align:center">以二进制格式打开一个文件只用于只写</td><td style="text-align:center">创建</td><td style="text-align:center">是</td></tr><tr><td style="text-align:center">w+</td><td style="text-align:center">打开一个文件用于读和写</td><td style="text-align:center">创建</td><td style="text-align:center">是</td></tr><tr><td style="text-align:center">wb+</td><td style="text-align:center">以二进制格式打开一个文件用于读和写</td><td style="text-align:center">创建</td><td style="text-align:center">是</td></tr><tr><td style="text-align:center">a</td><td style="text-align:center">打开一个文件用于追加</td><td style="text-align:center">创建</td><td style="text-align:center">否，追加写</td></tr><tr><td style="text-align:center">ab</td><td style="text-align:center">以二进制格式打开一个文件用于追加</td><td style="text-align:center">创建</td><td style="text-align:center">否，追加写</td></tr><tr><td style="text-align:center">a+</td><td style="text-align:center">打开一个文件用于读和写</td><td style="text-align:center">创建</td><td style="text-align:center">否，追加写</td></tr><tr><td style="text-align:center">ab+</td><td style="text-align:center">以二进制格式打开一个文件用于追加</td><td style="text-align:center">创建</td><td style="text-align:center">否，追加写</td></tr></tbody></table><h1 id="9-3-使用-try-except-代码块处理异常"><a href="#9-3-使用-try-except-代码块处理异常" class="headerlink" title=" - 9.3 使用 try-except 代码块处理异常 "></a><font color="#FF0000"> - 9.3 使用 try-except 代码块处理异常 </font></h1><p>当我们尝试将一个数字除以0时，会发生ZeroDivisionError异常：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(<span class="number">5</span>/<span class="number">0</span>)</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">"&lt;pyshell#0&gt;"</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">    print(<span class="number">5</span>/<span class="number">0</span>)</span><br><span class="line">ZeroDivisionError: division by zero</span><br></pre></td></tr></table></figure></p><p>此时我们可以编写一个<font color="#FF0000">try-except代码块</font>来处理该异常：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    print(<span class="number">5</span>/<span class="number">0</span>)</span><br><span class="line"><span class="keyword">except</span> ZeroDivisionError:</span><br><span class="line">    print(<span class="string">"You can't divide by zero!"</span>)</span><br></pre></td></tr></table></figure></p><p>当我们运行该程序时，会出现提示：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">You can<span class="string">'t divide by zero!</span></span><br></pre></td></tr></table></figure></p><p>在<font color="#FF0000">try-except代码块</font>中加入else，编写一个只执行除法运算的简单计算器：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">print(<span class="string">"Give me two numbers,and I'll divide them."</span>)</span><br><span class="line">print(<span class="string">"Enter 'q' to quit."</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="keyword">True</span>:</span><br><span class="line">    first_number = input(<span class="string">"\nFirst number:"</span>)</span><br><span class="line">    <span class="keyword">if</span> first_number == <span class="string">'q'</span>:</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    second_number = input(<span class="string">"\nSecond number:"</span>)</span><br><span class="line">    <span class="keyword">if</span> second_number == <span class="string">'q'</span>:</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        answer = int(first_number)/int(second_number)</span><br><span class="line">    <span class="keyword">except</span> ZeroDivisionError:</span><br><span class="line">        print(<span class="string">"You can't divide by 0!"</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        print(answer)</span><br></pre></td></tr></table></figure></p><p>运行程序：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">Give me two numbers,<span class="keyword">and</span> I<span class="string">'ll divide them.</span></span><br><span class="line"><span class="string">Enter '</span>q<span class="string">' to quit.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">First number:45</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Second number:0</span></span><br><span class="line"><span class="string">You can'</span>t divide by <span class="number">0</span>!</span><br><span class="line"></span><br><span class="line">First number:<span class="number">36</span></span><br><span class="line"></span><br><span class="line">Second number:<span class="number">8</span></span><br><span class="line"><span class="number">4.5</span></span><br><span class="line"></span><br><span class="line">First number:q</span><br></pre></td></tr></table></figure></p><p>若不加入<font color="#FF0000">try-except代码块</font>，我们在输入0时，程序就会出现异常而崩溃，而<font color="#FF0000">try-except代码块</font>很好的解决了这种问题，而且还起到了提示的作用，同样的，<font color="#FF0000">try-except代码块</font>也可以处理其他异常，如<font color="#FF0000">FileNotFoundError</font>等</p><h1 id="9-4-储存数据"><a href="#9-4-储存数据" class="headerlink" title=" - 9.4 储存数据 "></a><font color="#FF0000"> - 9.4 储存数据 </font></h1><h1 id="9-4-1-使用-json-dump-和-json-load"><a href="#9-4-1-使用-json-dump-和-json-load" class="headerlink" title=" - 9.4.1 使用 json.dump() 和 json.load() "></a><font color="#FF0000"> - 9.4.1 使用 json.dump() 和 json.load() </font></h1><p><font color="#FF0000"> 模块json</font>能够将简单的Python数据结构转储到文件中，并在程序再次运行时加载该文件中的数据；编写一个储存一组数字的简短程序，再编写一个将这些数字读取到内存中的程序，第一个程序将使用<font color="#FF0000"> json.dump()</font>来储存这组数据，而第二个程序将使用<font color="#FF0000"> json.load()</font>。函数<font color="#FF0000"> json.dump()</font>接受两个实参：要储存的数据以及可用于储存数据的文件对象：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#number_writer.py</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"></span><br><span class="line">numbers = [<span class="number">2</span>,<span class="number">3</span>,<span class="number">5</span>,<span class="number">7</span>,<span class="number">11</span>,<span class="number">13</span>]</span><br><span class="line"></span><br><span class="line">filename = <span class="string">'numbers.json'</span></span><br><span class="line"><span class="keyword">with</span> open(filename,<span class="string">'w'</span>) <span class="keyword">as</span> f_obj:</span><br><span class="line">    json.dump(numbers,f_obj)</span><br></pre></td></tr></table></figure></p><p>先导入模块json，再创建一个数字列表，<font color="#FF0000"> 通常用文件扩展名.json来指出文件储存的数据为JSON格式</font>，然后以写入模式打开该文件，使用函数<font color="#FF0000">json.dump()</font>将数字列表储存到文件numbers.json中，打开该文件，数据的储存格式与Python一样：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[2, 3, 5, 7, 11, 13]</span><br></pre></td></tr></table></figure></p><p>再编写一个程序，使用<font color="#FF0000">json.load()</font>将这个列表读取到内存中：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#number_reader.py</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"></span><br><span class="line">filename = <span class="string">'numbers.json'</span></span><br><span class="line"><span class="keyword">with</span> open(filename) <span class="keyword">as</span> f_obj:</span><br><span class="line">    numbers = json.load(f_obj)</span><br><span class="line">print(numbers)</span><br></pre></td></tr></table></figure></p><p>输出结果与number_writer.py中创建的数字列表相同：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[2, 3, 5, 7, 11, 13]</span><br></pre></td></tr></table></figure></p><p>进阶：在同一个程序中使用 <font color="#FF0000">json.dump()</font> 和 <font color="#FF0000">json.load()</font>：创建文件username.json储存用户名，从该文件中获取用户名，如果这个文件不存在，就在except代码块中提示用户输入用户名，并将其储存在username.json中：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#remember_me.py</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"></span><br><span class="line"><span class="comment">#如果以前储存了用户名，就加载它</span></span><br><span class="line"><span class="comment">#否则就提示用户输入用户名并储存它</span></span><br><span class="line">filename = <span class="string">'numbers.json'</span></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    <span class="keyword">with</span> open(filename) <span class="keyword">as</span> f_obj:</span><br><span class="line">        username = json.load(f_obj)</span><br><span class="line"><span class="keyword">except</span> FileNotFoundError:</span><br><span class="line">    username = input(<span class="string">"What's your name?"</span>)</span><br><span class="line">    <span class="keyword">with</span> open(filename,<span class="string">'w'</span>) <span class="keyword">as</span> f_obj:</span><br><span class="line">        json.dump(username,f_obj)</span><br><span class="line">        print(<span class="string">"We'll remember you when you come back, "</span> + username + <span class="string">"!"</span>)</span><br><span class="line"><span class="keyword">else</span>:        </span><br><span class="line">    print(<span class="string">"Welcome back, "</span> + username + <span class="string">"!"</span>)</span><br></pre></td></tr></table></figure></p><p>以前没有储存用户名，第一次运行程序：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">What<span class="string">'s your name?TRHX</span></span><br><span class="line"><span class="string">We'</span>ll remember you when you come back, TRHX!</span><br></pre></td></tr></table></figure></p><p>再次运行程序：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Welcome back, TRHX!</span><br></pre></td></tr></table></figure></p><h1 id="9-4-2-重构"><a href="#9-4-2-重构" class="headerlink" title=" - 9.4.2 重构 "></a><font color="#FF0000"> - 9.4.2 重构 </font></h1><p>代码能够正确运行，但可以做进一步的改进——将代码划分为一系列完成具体工作的函数，这样的过程称为<font color="#FF0000">重构</font>，重构让代码更清晰、更易于理解、更容易扩展<br>重构remember_me.py，将大部分逻辑放到一个或者多个函数中：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#remember_me.py</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">greet_user</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="comment">#问候用户，并指出其名字</span></span><br><span class="line">    filename = <span class="string">'numbers.json'</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="keyword">with</span> open(filename) <span class="keyword">as</span> f_obj:</span><br><span class="line">            username = json.load(f_obj)</span><br><span class="line">    <span class="keyword">except</span> FileNotFoundError:</span><br><span class="line">        username = input(<span class="string">"What's your name?"</span>)</span><br><span class="line">        <span class="keyword">with</span> open(filename,<span class="string">'w'</span>) <span class="keyword">as</span> f_obj:</span><br><span class="line">            json.dump(username,f_obj)</span><br><span class="line">            print(<span class="string">"We'll remember you when you come back, "</span> + username + <span class="string">"!"</span>)</span><br><span class="line">    <span class="keyword">else</span>:        </span><br><span class="line">        print(<span class="string">"Welcome back, "</span> + username + <span class="string">"!"</span>)</span><br><span class="line"></span><br><span class="line">greet_user()</span><br></pre></td></tr></table></figure></p><p>重构greet_user()，让它不执行这么多任务——将获取储存的用户名的代码移到另一个函数中：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#remember_me.py</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_stored_username</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="comment">#如果储存了用户名，就获取它</span></span><br><span class="line">    filename = <span class="string">'numbers.json'</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="keyword">with</span> open(filename) <span class="keyword">as</span> f_obj:</span><br><span class="line">            username = json.load(f_obj)</span><br><span class="line">    <span class="keyword">except</span> FileNotFoundError:</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">None</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> username</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">greet_user</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="comment">#问候用户，并指出其名字</span></span><br><span class="line">    username = get_stored_username()</span><br><span class="line">    <span class="keyword">if</span> username:</span><br><span class="line">        print(<span class="string">"Welcome back, "</span> + username + <span class="string">"!"</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        username = input(<span class="string">"What's your name?"</span>)</span><br><span class="line">        filename = <span class="string">'username.json'</span></span><br><span class="line">        <span class="keyword">with</span> open(filename,<span class="string">'w'</span>) <span class="keyword">as</span> f_obj:</span><br><span class="line">            json.dump(username,f_obj)</span><br><span class="line">            print(<span class="string">"We'll remember you when you come back, "</span> + username + <span class="string">"!"</span>)     </span><br><span class="line"></span><br><span class="line">greet_user()</span><br></pre></td></tr></table></figure></p><p>将greet_user()中的另一个代码块提取出来：将没有储存用户名时提示用户输入的代码放在一个独立的函数中：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#remember_me.py</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_stored_username</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="comment">#如果储存了用户名，就获取它</span></span><br><span class="line">    filename = <span class="string">'numbers.json'</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="keyword">with</span> open(filename) <span class="keyword">as</span> f_obj:</span><br><span class="line">            username = json.load(f_obj)</span><br><span class="line">    <span class="keyword">except</span> FileNotFoundError:</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">None</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> username</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_new_username</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="comment">#提示输入用户名</span></span><br><span class="line">    username = input(<span class="string">"What's your name?"</span>)</span><br><span class="line">    filename = <span class="string">'username.json'</span></span><br><span class="line">    <span class="keyword">with</span> open(filename,<span class="string">'w'</span>) <span class="keyword">as</span> f_obj:</span><br><span class="line">        json.dump(username,f_obj)</span><br><span class="line">    <span class="keyword">return</span> username</span><br><span class="line">    </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">greet_user</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="comment">#问候用户，并指出其名字</span></span><br><span class="line">    username = get_stored_username()</span><br><span class="line">    <span class="keyword">if</span> username:</span><br><span class="line">        print(<span class="string">"Welcome back, "</span> + username + <span class="string">"!"</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        username = get_new_username()</span><br><span class="line">        print(<span class="string">"We'll remember you when you come back, "</span> + username + <span class="string">"!"</span>)     </span><br><span class="line"></span><br><span class="line">greet_user()</span><br></pre></td></tr></table></figure></p><p>最终版本实现了每个函数只负责单一而清晰的任务，我们在编写程序时也要像这样，要写出清晰而易于维护和扩展的代码</p>]]></content>
      
      
      <categories>
          
          <category> Python3 学习笔记 </category>
          
          <category> 基础学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 文件 </tag>
            
            <tag> 异常 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python3 基础学习笔记 C08</title>
      <link href="/2018/11/11/A14-Python3-basic-C08/"/>
      <url>/2018/11/11/A14-Python3-basic-C08/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><blockquote><center><font color="#1BC3FB" size="4">Python3 基础学习笔记第八章 —— 【类】</font></center></blockquote><a id="more"></a><hr><h1 id="8-1-创建类和使用类"><a href="#8-1-创建类和使用类" class="headerlink" title=" - 8.1 创建类和使用类  "></a><font color="#FF0000"> - 8.1 创建类和使用类  </font></h1><p>创建一个表示小狗的简单类Dog，根据Dog类创建的每个实例都将储存名字和年龄，赋予每条小狗蹲下（sit()）和打滚（roll_over()）的能力：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Dog</span><span class="params">()</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self,name,age)</span>:</span></span><br><span class="line">        <span class="comment">#初始化属性name和age</span></span><br><span class="line">        self.name = name</span><br><span class="line">        self.age = age</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">sit</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="comment">#模拟小狗被命令时蹲下</span></span><br><span class="line">        print(self.name.title() + <span class="string">" is now sitting."</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">roll_over</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="comment">#模拟小狗被命令时打滚</span></span><br><span class="line">        print(self.name.title() + <span class="string">" rolled over!"</span>)</span><br></pre></td></tr></table></figure><p>方法<strong>init</strong>()：类中的函数称为<font color="#FF0000">方法</font>，本例中<font color="#FF0000">方法<strong>init</strong>()</font>是一个特殊的方法，每当我们根据Dog类创建新实例时，Python都会自动运行它，在方法的名称中，开头和结尾各有两个下划线，这是一种约定，避免Python默认方法与普通方法发生名称冲突，例子中将<font color="#FF0000">方法<strong>init</strong>()</font>定义成了包含三个形参：self、name和age，在这个方法的定义中，形参self必不可少，还必须位于其他形参的前面，Python调用<font color="#FF0000">方法<strong>init</strong>()</font>来创建Dog实例时，将自动传入实参self，每个与类相关联的方法调用都自动传递实参self，它是一个指向实例本身的引用，让实例能够访问类中的属性和方法，我们创建Dog实例时，Python将调用Dog类的<font color="#FF0000">方法<strong>init</strong>()</font>，我们将通过实参向Dog()传递名字和年龄；self会自动传递，因此我们不需要传递它，每当我们根据Dog类创建实例时，都只需要给最后两个形参（name和age）提供值；定义的两个变量都有前缀self，以self为前缀的变量都可以供类中的所有方法使用，还可以通过类的任何实例来访问这些变量。self.name = name 获取储存在形参name中的值，并将其储存到变量name中，然后该变量被关联到当前创建的实例。self.age = age 的作用与此类似，像这样可通过实例访问的变量称为<font color="#FF0000">属性</font>；Dog还定义了另外两种方法：sit() 和 roll_over() ，由于这些方法不需要额外的信息，如名字和年龄，因此它们只有一个形参self</p><p>在Python 2.7中创建类时，需要在括号内包含单词object：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ClassName</span><span class="params">(object)</span>:</span></span><br><span class="line">   ---snip---</span><br></pre></td></tr></table></figure></p><h1 id="8-2-根据类创建实例"><a href="#8-2-根据类创建实例" class="headerlink" title="- 8.2 根据类创建实例"></a><font color="#FF0000">- 8.2 根据类创建实例</font></h1><p>访问属性：创建一个表示特定小狗的实例：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Dog</span><span class="params">()</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self,name,age)</span>:</span></span><br><span class="line">        <span class="comment">#初始化属性name和age</span></span><br><span class="line">        self.name = name</span><br><span class="line">        self.age = age</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">sit</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="comment">#模拟小狗被命令时蹲下</span></span><br><span class="line">        print(self.name.title() + <span class="string">" is now sitting."</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">roll_over</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="comment">#模拟小狗被命令时打滚</span></span><br><span class="line">        print(self.name.title() + <span class="string">" rolled over!"</span>)</span><br><span class="line"></span><br><span class="line">my_dog = Dog(<span class="string">'willie'</span>,<span class="number">6</span>)</span><br><span class="line">print(<span class="string">"My dog's name is "</span> + my_dog.name.title() + <span class="string">"."</span>)</span><br><span class="line">print(<span class="string">"My dog is "</span> + str(my_dog.age) + <span class="string">" years old."</span>)</span><br></pre></td></tr></table></figure><p>让Python创建一条名字为’willie’，年龄为6的小狗，Python使用实参’willie’和6调用Dog类中的方法<strong>init</strong>()。方法<strong>init</strong>()创建一个表示特定小狗的示例，并使用我们提供的值来设置属性name和age；在访问实例的属性时，可使用句点表示法，比如该例子中的 my_dog.name；最终程序输出结果如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">My dog<span class="string">'s name is Willie.</span></span><br><span class="line"><span class="string">My dog is 6 years old.</span></span><br></pre></td></tr></table></figure><p>调用方法：根据Dog类创建实例后，就可以使用句点表示法来调用Dog类中定义的任何方法：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Dog</span><span class="params">()</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self,name,age)</span>:</span></span><br><span class="line">        <span class="comment">#初始化属性name和age</span></span><br><span class="line">        self.name = name</span><br><span class="line">        self.age = age</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">sit</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="comment">#模拟小狗被命令时蹲下</span></span><br><span class="line">        print(self.name.title() + <span class="string">" is now sitting."</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">roll_over</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="comment">#模拟小狗被命令时打滚</span></span><br><span class="line">        print(self.name.title() + <span class="string">" rolled over!"</span>)</span><br><span class="line"></span><br><span class="line">my_dog = Dog(<span class="string">'willie'</span>,<span class="number">6</span>)</span><br><span class="line">my_dog.sit()</span><br><span class="line">my_dog.roll_over()</span><br></pre></td></tr></table></figure></p><p>输出结果如下：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Willie <span class="keyword">is</span> now sitting.</span><br><span class="line">Willie rolled over!</span><br></pre></td></tr></table></figure></p><p>创建多个实例：可按需求根据类创建任意数量的实例：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Dog</span><span class="params">()</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self,name,age)</span>:</span></span><br><span class="line">        <span class="comment">#初始化属性name和age</span></span><br><span class="line">        self.name = name</span><br><span class="line">        self.age = age</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">sit</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="comment">#模拟小狗被命令时蹲下</span></span><br><span class="line">        print(self.name.title() + <span class="string">" is now sitting."</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">roll_over</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="comment">#模拟小狗被命令时打滚</span></span><br><span class="line">        print(self.name.title() + <span class="string">" rolled over!"</span>)</span><br><span class="line"></span><br><span class="line">my_dog = Dog(<span class="string">'willie'</span>,<span class="number">6</span>)</span><br><span class="line">your_dog = Dog(<span class="string">'lucy'</span>,<span class="number">8</span>)</span><br><span class="line"></span><br><span class="line">print(<span class="string">"My dog's name is "</span> + my_dog.name.title() + <span class="string">"."</span>)</span><br><span class="line">print(<span class="string">"My dog is "</span> + str(my_dog.age) + <span class="string">" years old."</span>)</span><br><span class="line">my_dog.sit()</span><br><span class="line"></span><br><span class="line">print(<span class="string">"\nYour dog's name is "</span> + your_dog.name.title() + <span class="string">"."</span>)</span><br><span class="line">print(<span class="string">"Your dog is "</span> + str(your_dog.age) + <span class="string">" years old."</span>)</span><br><span class="line">your_dog.roll_over()</span><br></pre></td></tr></table></figure></p><p>输出结果如下：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">My dog<span class="string">'s name is Willie.</span></span><br><span class="line"><span class="string">My dog is 6 years old.</span></span><br><span class="line"><span class="string">Willie is now sitting.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Your dog'</span>s name <span class="keyword">is</span> Lucy.</span><br><span class="line">Your dog <span class="keyword">is</span> <span class="number">8</span> years old.</span><br><span class="line">Lucy rolled over!</span><br></pre></td></tr></table></figure></p><h1 id="8-3-使用类和实例"><a href="#8-3-使用类和实例" class="headerlink" title=" - 8.3 使用类和实例 "></a><font color="#FF0000"> - 8.3 使用类和实例 </font></h1><p>创建一个表示汽车的类，其中储存了有关汽车的信息，还有一个汇总这些信息的方法：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Car</span><span class="params">()</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self,make,model,year)</span>:</span></span><br><span class="line">        self.make = make</span><br><span class="line">        self.model = model</span><br><span class="line">        self.year = year</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_descriptive_name</span><span class="params">(self)</span>:</span></span><br><span class="line">        long_name = str(self.year) + <span class="string">' '</span> + self.make + <span class="string">' '</span> +self.model</span><br><span class="line">        <span class="keyword">return</span> long_name.title()</span><br><span class="line"></span><br><span class="line">my_new_car = Car(<span class="string">'audi'</span>,<span class="string">'a9'</span>,<span class="string">'2018'</span>)</span><br><span class="line">print(my_new_car.get_descriptive_name())</span><br></pre></td></tr></table></figure></p><p>输出结果如下：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">2018</span> Audi A9</span><br></pre></td></tr></table></figure></p><h1 id="8-3-1-给属性指定默认值"><a href="#8-3-1-给属性指定默认值" class="headerlink" title=" - 8.3.1 给属性指定默认值  "></a><font color="#FF0000"> - 8.3.1 给属性指定默认值  </font></h1><p>类中的每个属性都必须有初始值，如果我们设置了默认值，就无需包含为它提供初始值的形参，下面为8.3的例子添加一个 odometer_reading 的属性，其初值是0，添加一个 odometer_reading() 方法，用于读取汽车的里程表：<br> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"> <span class="class"><span class="keyword">class</span> <span class="title">Car</span><span class="params">()</span>:</span></span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self,make,model,year)</span>:</span></span><br><span class="line">        self.make = make</span><br><span class="line">        self.model = model</span><br><span class="line">        self.year = year</span><br><span class="line">        self.odometer_reading = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_descriptive_name</span><span class="params">(self)</span>:</span></span><br><span class="line">        long_name = str(self.year) + <span class="string">' '</span> + self.make + <span class="string">' '</span> +self.model</span><br><span class="line">        <span class="keyword">return</span> long_name.title()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">read_odomter</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">"This car has "</span> + str(self.odometer_reading) + <span class="string">" miles on it."</span>)</span><br><span class="line"></span><br><span class="line">my_new_car = Car(<span class="string">'audi'</span>,<span class="string">'a9'</span>,<span class="string">'2018'</span>)</span><br><span class="line">print(my_new_car.get_descriptive_name())</span><br><span class="line">my_new_car.read_odomter()</span><br></pre></td></tr></table></figure></p><p>输出结果如下：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">2018</span> Audi A9</span><br><span class="line">This car has <span class="number">0</span> miles on it.</span><br></pre></td></tr></table></figure></p><h1 id="8-3-2-修改属性的值"><a href="#8-3-2-修改属性的值" class="headerlink" title=" - 8.3.2 修改属性的值  "></a><font color="#FF0000"> - 8.3.2 修改属性的值  </font></h1><p> 可以以三种不同的方式修改属性的值：直接通过实例进行修改；通过方法进行设置；通过方法进行递增（增加特定的值）</p><p>直接修改属性的值：<br>要修改属性的值，最简单的方法就是通过实例直接访问它，将8.3.1中的例子第7行代码 <code>self.odometer_reading = 0</code> 改为 <code>self.odometer_reading = 66</code>，输出结果如下：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"> <span class="number">2018</span> Audi A9</span><br><span class="line">This car has <span class="number">66</span> miles on it.</span><br></pre></td></tr></table></figure></p><p>通过方法修改属性的值：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Car</span><span class="params">()</span>:</span></span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self,make,model,year)</span>:</span></span><br><span class="line">        self.make = make</span><br><span class="line">        self.model = model</span><br><span class="line">        self.year = year</span><br><span class="line">        self.odometer_reading = <span class="number">0</span></span><br><span class="line">        </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_descriptive_name</span><span class="params">(self)</span>:</span></span><br><span class="line">        long_name = str(self.year) + <span class="string">' '</span> + self.make + <span class="string">' '</span> +self.model</span><br><span class="line">        <span class="keyword">return</span> long_name.title()</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">read_odomter</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">"This car has "</span> + str(self.odometer_reading) + <span class="string">" miles on it."</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">update_odometer</span><span class="params">(self,mileage)</span>:</span></span><br><span class="line">        self.odometer_reading = mileage</span><br><span class="line">        </span><br><span class="line">my_new_car = Car(<span class="string">'audi'</span>,<span class="string">'a9'</span>,<span class="string">'2018'</span>)</span><br><span class="line">print(my_new_car.get_descriptive_name())</span><br><span class="line"></span><br><span class="line">my_new_car.update_odometer(<span class="number">66</span>)</span><br><span class="line">my_new_car.read_odomter()</span><br></pre></td></tr></table></figure></p><p>对Car类所做的唯一修改就是在第17、18行添加了方法 update_odometer()，这个方法接受一个里程值，并将其储存到 self.odometer_reading 中，在倒数第二行，调用了 update_odometer()，并向它提供了一个实参（该实参对应于方法定义中的形参mileage），它将里程数设置为66，而方法 read_odomter() 打印该读数：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">2018</span> Audi A9</span><br><span class="line">This car has <span class="number">66</span> miles on it.</span><br></pre></td></tr></table></figure></p><p>可对方法 update_odometer() 进行扩展，使其能够在修改里程表读数时做一些额外的工作，添加一些逻辑，禁止任何人将里程表读数往回调：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Car</span><span class="params">()</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self,make,model,year)</span>:</span></span><br><span class="line">        self.make = make</span><br><span class="line">        self.model = model</span><br><span class="line">        self.year = year</span><br><span class="line">        self.odometer_reading = <span class="number">50</span></span><br><span class="line">        </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_descriptive_name</span><span class="params">(self)</span>:</span></span><br><span class="line">        long_name = str(self.year) + <span class="string">' '</span> + self.make + <span class="string">' '</span> +self.model</span><br><span class="line">        <span class="keyword">return</span> long_name.title()</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">read_odomter</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">"This car has "</span> + str(self.odometer_reading) + <span class="string">" miles on it."</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">update_odometer</span><span class="params">(self,mileage)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> mileage &gt;= self.odometer_reading:</span><br><span class="line">            self.odometer_reading = mileage</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            print(<span class="string">"You can't roll back an odometer!"</span>)</span><br><span class="line">        </span><br><span class="line">my_new_car = Car(<span class="string">'audi'</span>,<span class="string">'a9'</span>,<span class="string">'2018'</span>)</span><br><span class="line">print(my_new_car.get_descriptive_name())</span><br><span class="line"></span><br><span class="line">my_new_car.update_odometer(<span class="number">33</span>)</span><br><span class="line">my_new_car.read_odomter()</span><br></pre></td></tr></table></figure></p><p>修改 self.odometer_reading 的默认值为50，当我们再次尝试修改其值为33时，由于小于原来的里程，因此无法修改：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">2018</span> Audi A9</span><br><span class="line">You can<span class="string">'t roll back an odometer!</span></span><br><span class="line"><span class="string">This car has 50 miles on it.</span></span><br></pre></td></tr></table></figure><p>通过方法对属性的值进行递增：<br>有时候需要将属性值递增到特定的量，而不是将其设置为全新的值，假设我们购买了一辆二手车，从购买到登记期间增加了100英里的里程，下面的方法让我们能够传递这个增量，并相应地增加里程表读数：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Car</span><span class="params">()</span>:</span></span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self,make,model,year)</span>:</span></span><br><span class="line">        self.make = make</span><br><span class="line">        self.model = model</span><br><span class="line">        self.year = year</span><br><span class="line">        self.odometer_reading = <span class="number">0</span></span><br><span class="line">        </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_descriptive_name</span><span class="params">(self)</span>:</span></span><br><span class="line">        long_name = str(self.year) + <span class="string">' '</span> + self.make + <span class="string">' '</span> +self.model</span><br><span class="line">        <span class="keyword">return</span> long_name.title()</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">read_odomter</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">"This car has "</span> + str(self.odometer_reading) + <span class="string">" miles on it."</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">update_odometer</span><span class="params">(self,mileage)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> mileage &gt;= self.odometer_reading:</span><br><span class="line">            self.odometer_reading = mileage</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            print(<span class="string">"You can't roll back an odometer!"</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">increment_odometer</span><span class="params">(self,miles)</span>:</span></span><br><span class="line">        <span class="comment">#将里程表读数增加指定的量</span></span><br><span class="line">        self.odometer_reading += miles</span><br><span class="line">        </span><br><span class="line">my_new_car = Car(<span class="string">'audi'</span>,<span class="string">'a9'</span>,<span class="string">'2018'</span>)</span><br><span class="line">print(my_new_car.get_descriptive_name())</span><br><span class="line"></span><br><span class="line">my_new_car.update_odometer(<span class="number">6600</span>)</span><br><span class="line">my_new_car.read_odomter()</span><br><span class="line"></span><br><span class="line">my_new_car.increment_odometer(<span class="number">100</span>)</span><br><span class="line">my_new_car.read_odomter()</span><br></pre></td></tr></table></figure></p><p>输出结果如下：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">2018</span> Audi A9</span><br><span class="line">This car has <span class="number">6600</span> miles on it.</span><br><span class="line">This car has <span class="number">6700</span> miles on it.</span><br></pre></td></tr></table></figure></p><h1 id="8-4-继承"><a href="#8-4-继承" class="headerlink" title=" - 8.4 继承 "></a><font color="#FF0000"> - 8.4 继承 </font></h1><p>编写类时，并非总是要从空白开始，如果要编写的类是另一个现成类的特殊版本，可使用<font color="#FF0000">继承</font>，一个类<font color="#FF0000">继承</font>另一个类时，它自动获得另一个类的所有属性和方法；原有的类称为<font color="#FF0000">父类</font>，而新类称为<font color="#FF0000">子类</font>，子类<font color="#FF0000">继承</font>了其父类的所有属性和方法，同时还可以定义自己的属性和方法；继承的通用语法大致如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ClassName1</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self,name1,name2,name3)</span>:</span></span><br><span class="line">        --snip--</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ClassName2</span><span class="params">(ClassName1)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self,name1,name2,name3)</span>:</span></span><br><span class="line">        super().__init__(name1,name2,name3)</span><br><span class="line">        --snip--</span><br></pre></td></tr></table></figure><h1 id="8-4-1-子类的方法init"><a href="#8-4-1-子类的方法init" class="headerlink" title=" - 8.4.1 子类的方法init()  "></a><font color="#FF0000"> - 8.4.1 子类的方法<strong>init</strong>()  </font></h1> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"> <span class="class"><span class="keyword">class</span> <span class="title">Car</span><span class="params">()</span>:</span></span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self,make,model,year)</span>:</span></span><br><span class="line">        self.make = make</span><br><span class="line">        self.model = model</span><br><span class="line">        self.year = year</span><br><span class="line">        self.odometer_reading = <span class="number">0</span></span><br><span class="line">        </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_descriptive_name</span><span class="params">(self)</span>:</span></span><br><span class="line">        long_name = str(self.year) + <span class="string">' '</span> + self.make + <span class="string">' '</span> +self.model</span><br><span class="line">        <span class="keyword">return</span> long_name.title()</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ElectricCar</span><span class="params">(Car)</span>:</span></span><br><span class="line">    <span class="comment">#电动车的独特之处</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self,make,model,year)</span>:</span></span><br><span class="line">        <span class="comment">#初始化父类的属性</span></span><br><span class="line">        super().__init__(make,model,year)</span><br><span class="line"></span><br><span class="line">my_new_car = ElectricCar(<span class="string">'tesla'</span>,<span class="string">'model s'</span>,<span class="string">'2016'</span>)</span><br><span class="line">print(my_new_car.get_descriptive_name())</span><br></pre></td></tr></table></figure><p>创建子类时，父类必须包含在当前文件中，且位于子类前面，定义了子类 ElectricCar，定义子类时，必须在括号内指定父类名称，方法 <code>__init__()</code>接受创建Car实例所需信息，super() 是一个特殊的函数，帮助Python将父类和子类关联起来，让Python调用 ElectricCar 的父类的方法  <code>__init__()</code>，让 ElectricCar 实例包含父类的所有属性，父类也称为超类（superclass），程序输出结果如下：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">2016</span> Tesla Model S</span><br></pre></td></tr></table></figure></p><h1 id="8-4-2-Python-2-7-中的继承"><a href="#8-4-2-Python-2-7-中的继承" class="headerlink" title=" - 8.4.2 Python 2.7 中的继承  "></a><font color="#FF0000"> - 8.4.2 Python 2.7 中的继承  </font></h1><p>在Python 2.7中，ElectricCar类的定义类似于下面这样：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Car</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self,make,model,year)</span>:</span></span><br><span class="line">        --snip--</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ElectricCar</span><span class="params">(Car)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self,make,model,year)</span>:</span></span><br><span class="line">        super(ElectricCar,self).__init__(make,model,year)</span><br><span class="line">        --snip--</span><br></pre></td></tr></table></figure></p><h1 id="8-4-3-给子类定义属性和方法"><a href="#8-4-3-给子类定义属性和方法" class="headerlink" title=" - 8.4.3 给子类定义属性和方法  "></a><font color="#FF0000"> - 8.4.3 给子类定义属性和方法  </font></h1><p>  让一个类继承另一个类后，可添加区分子类和父类所需的新属性和方法，下面添加一个电动车特有的属性（battery），以及一个描述该属性的方法：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Car</span><span class="params">()</span>:</span></span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self,make,model,year)</span>:</span></span><br><span class="line">        self.make = make</span><br><span class="line">        self.model = model</span><br><span class="line">        self.year = year</span><br><span class="line">        self.odometer_reading = <span class="number">0</span></span><br><span class="line">        </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_descriptive_name</span><span class="params">(self)</span>:</span></span><br><span class="line">        long_name = str(self.year) + <span class="string">' '</span> + self.make + <span class="string">' '</span> +self.model</span><br><span class="line">        <span class="keyword">return</span> long_name.title()</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ElectricCar</span><span class="params">(Car)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self,make,model,year)</span>:</span></span><br><span class="line">        super().__init__(make,model,year)</span><br><span class="line">        self.battery_size = <span class="number">80</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">describe_battery</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">"This car has a "</span> + str(self.battery_size) + <span class="string">"-KWh battery."</span>)</span><br><span class="line"></span><br><span class="line">my_new_car = ElectricCar(<span class="string">'tesla'</span>,<span class="string">'model s'</span>,<span class="string">'2016'</span>)</span><br><span class="line">print(my_new_car.get_descriptive_name())</span><br><span class="line">my_new_car.describe_battery()</span><br></pre></td></tr></table></figure><p>输出结果如下：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">2016</span> Tesla Model S</span><br><span class="line">This car has a <span class="number">80</span>-KWh battery.</span><br></pre></td></tr></table></figure></p><h1 id="8-4-4-重写父类的方法"><a href="#8-4-4-重写父类的方法" class="headerlink" title=" - 8.4.4 重写父类的方法  "></a><font color="#FF0000"> - 8.4.4 重写父类的方法  </font></h1><p>  要重写父类的方法，只需要在子类中定义一个与要重写的父类方法同名的方法即可，这样，Python将不会考虑这个父类的方法，而只关心在子类中定义的相应方法，假设Car类有一个名为 fill_gas_tank() 的方法，对于电动车来说毫无意义，因此可以重写它：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ElectricCar</span><span class="params">(Car)</span>:</span></span><br><span class="line">    --snip--</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">fill_gas_tank</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">"This car doesn't need a gas tank!"</span>)</span><br></pre></td></tr></table></figure></p><h1 id="8-4-5-将实例用作属性"><a href="#8-4-5-将实例用作属性" class="headerlink" title=" - 8.4.5 将实例用作属性  "></a><font color="#FF0000"> - 8.4.5 将实例用作属性  </font></h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Car</span><span class="params">()</span>:</span></span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self,make,model,year)</span>:</span></span><br><span class="line">        self.make = make</span><br><span class="line">        self.model = model</span><br><span class="line">        self.year = year</span><br><span class="line">        self.odometer_reading = <span class="number">0</span></span><br><span class="line">        </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_descriptive_name</span><span class="params">(self)</span>:</span></span><br><span class="line">        long_name = str(self.year) + <span class="string">' '</span> + self.make + <span class="string">' '</span> +self.model</span><br><span class="line">        <span class="keyword">return</span> long_name.title()</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Battery</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="comment">#一次模拟电动车电瓶的简单尝试</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self,battery_size=<span class="number">70</span>)</span>:</span></span><br><span class="line">        <span class="comment">#初始化电瓶的属性</span></span><br><span class="line">        self.battery_size = battery_size</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">describe_battery</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="comment">#打印一条描述电瓶容量的消息</span></span><br><span class="line">        print(<span class="string">"This car has a "</span> + str(self.battery_size) + <span class="string">"-KWh battery."</span>)</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ElectricCar</span><span class="params">(Car)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self,make,model,year)</span>:</span></span><br><span class="line">        super().__init__(make,model,year)</span><br><span class="line">        self.battery = Battery()</span><br><span class="line"></span><br><span class="line">my_new_car = ElectricCar(<span class="string">'tesla'</span>,<span class="string">'model s'</span>,<span class="string">'2016'</span>)</span><br><span class="line">print(my_new_car.get_descriptive_name())</span><br><span class="line">my_new_car.battery.describe_battery()</span><br></pre></td></tr></table></figure><p>输出结果如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">2016</span> Tesla Model S</span><br><span class="line">This car has a <span class="number">70</span>-KWh battery.</span><br></pre></td></tr></table></figure><p>看起来似乎做了多余的工作，但现在我们可以对电瓶添加更多的描述，而且不会导致 ElectricCar 类混乱不堪，下面再给Battery添加一个方法，使其能够根据电瓶容量报告汽车的续航里程：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Car</span><span class="params">()</span>:</span></span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self,make,model,year)</span>:</span></span><br><span class="line">        self.make = make</span><br><span class="line">        self.model = model</span><br><span class="line">        self.year = year</span><br><span class="line">        self.odometer_reading = <span class="number">0</span></span><br><span class="line">        </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_descriptive_name</span><span class="params">(self)</span>:</span></span><br><span class="line">        long_name = str(self.year) + <span class="string">' '</span> + self.make + <span class="string">' '</span> +self.model</span><br><span class="line">        <span class="keyword">return</span> long_name.title()</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Battery</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="comment">#一次模拟电动车电瓶的简单尝试</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self,battery_size=<span class="number">70</span>)</span>:</span></span><br><span class="line">        <span class="comment">#初始化电瓶的属性</span></span><br><span class="line">        self.battery_size = battery_size</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">describe_battery</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="comment">#打印一条描述电瓶容量的消息</span></span><br><span class="line">        print(<span class="string">"This car has a "</span> + str(self.battery_size) + <span class="string">"-KWh battery."</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_range</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="comment">#打印一条消息，指出电瓶的续航里程</span></span><br><span class="line">        <span class="keyword">if</span> self.battery_size == <span class="number">70</span>:</span><br><span class="line">            range = <span class="number">240</span></span><br><span class="line">        <span class="keyword">elif</span> self.battery_size == <span class="number">90</span>:</span><br><span class="line">            range = <span class="number">280</span></span><br><span class="line">        message = <span class="string">"This car can go approximately "</span> + str(range)</span><br><span class="line">        message += <span class="string">" miles on a full charge."</span></span><br><span class="line">        print(message)</span><br><span class="line">        </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ElectricCar</span><span class="params">(Car)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self,make,model,year)</span>:</span></span><br><span class="line">        super().__init__(make,model,year)</span><br><span class="line">        self.battery = Battery()</span><br><span class="line"></span><br><span class="line">my_new_car = ElectricCar(<span class="string">'tesla'</span>,<span class="string">'model s'</span>,<span class="string">'2016'</span>)</span><br><span class="line">print(my_new_car.get_descriptive_name())</span><br><span class="line">my_new_car.battery.describe_battery()</span><br><span class="line">my_new_car.battery.get_range()</span><br></pre></td></tr></table></figure></p><p>输出结果如下：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">2016</span> Tesla Model S</span><br><span class="line">This car has a <span class="number">70</span>-KWh battery.</span><br><span class="line">This car can go approximately <span class="number">240</span> miles on a full charge.</span><br></pre></td></tr></table></figure></p><h1 id="8-5-导入类"><a href="#8-5-导入类" class="headerlink" title=" - 8.5 导入类  "></a><font color="#FF0000"> - 8.5 导入类  </font></h1><p>Python允许将类储存在模块中，然后在主程序中导入所需的模块</p><h1 id="8-5-1-导入单个类"><a href="#8-5-1-导入单个类" class="headerlink" title=" - 8.5.1 导入单个类  "></a><font color="#FF0000"> - 8.5.1 导入单个类  </font></h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#car.py</span></span><br><span class="line"><span class="comment">#一个用于表示汽车的类</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Car</span><span class="params">()</span>:</span></span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self,make,model,year)</span>:</span></span><br><span class="line">        <span class="comment">#初始化描述汽车的属性</span></span><br><span class="line">        self.make = make</span><br><span class="line">        self.model = model</span><br><span class="line">        self.year = year</span><br><span class="line">        self.odometer_reading = <span class="number">0</span></span><br><span class="line">        </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_descriptive_name</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="comment">#返回整洁的描述性名称</span></span><br><span class="line">        long_name = str(self.year) + <span class="string">' '</span> + self.make + <span class="string">' '</span> +self.model</span><br><span class="line">        <span class="keyword">return</span> long_name.title()</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">read_odomter</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="comment">#打印一条消息，指出汽车的里程</span></span><br><span class="line">        print(<span class="string">"This car has "</span> + str(self.odometer_reading) + <span class="string">" miles on it."</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">update_odometer</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="comment">#将里程表读数设置为指定的值，拒绝将里程表往回拨</span></span><br><span class="line">        <span class="keyword">if</span> mileage &gt;= self.odometer_reading:</span><br><span class="line">            self.odometer_reading = mileage</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            print(<span class="string">"You can't roll back an odometer!"</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">increment_odometer</span><span class="params">(self,miles)</span>:</span></span><br><span class="line">        <span class="comment">#将里程表读数增加指定的量</span></span><br><span class="line">        self.odometer_reading += miles</span><br></pre></td></tr></table></figure><p>创建另一个文件——my_car.py，在其中导入Car类并创建其实例：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#my_car.py</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> car <span class="keyword">import</span> Car</span><br><span class="line"></span><br><span class="line">my_new_car = Car(<span class="string">'audi'</span>,<span class="string">'a9'</span>,<span class="string">'2018'</span>)</span><br><span class="line">print(my_new_car.get_descriptive_name())</span><br><span class="line"></span><br><span class="line">my_new_car.odometer_reading = <span class="number">23</span></span><br><span class="line">my_new_car.read_odometer()</span><br></pre></td></tr></table></figure></p><p>import语句让Python打开模块car，并导入其中的Car类，输出结果如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">2018</span> Audi A9</span><br><span class="line">This car has <span class="number">23</span> miles on it.</span><br></pre></td></tr></table></figure><h1 id="8-5-2-在一个模块中储存多个类"><a href="#8-5-2-在一个模块中储存多个类" class="headerlink" title=" - 8.5.2 在一个模块中储存多个类  "></a><font color="#FF0000"> - 8.5.2 在一个模块中储存多个类  </font></h1><p>将类Battery和ElectricCar都加入到模块car.py中：<br> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#car.py</span></span><br><span class="line"><span class="comment">#一组用于表示燃油汽车和电动汽车的类</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Car</span><span class="params">()</span>:</span></span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self,make,model,year)</span>:</span></span><br><span class="line">        <span class="comment">#初始化描述汽车的属性</span></span><br><span class="line">        self.make = make</span><br><span class="line">        self.model = model</span><br><span class="line">        self.year = year</span><br><span class="line">        self.odometer_reading = <span class="number">0</span></span><br><span class="line">        </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_descriptive_name</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="comment">#返回整洁的描述性名称</span></span><br><span class="line">        long_name = str(self.year) + <span class="string">' '</span> + self.make + <span class="string">' '</span> +self.model</span><br><span class="line">        <span class="keyword">return</span> long_name.title()</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">read_odometer</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="comment">#打印一条消息，指出汽车的里程</span></span><br><span class="line">        print(<span class="string">"This car has "</span> + str(self.odometer_reading) + <span class="string">" miles on it."</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">update_odometer</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="comment">#将里程表读数设置为指定的值，拒绝将里程表往回拨</span></span><br><span class="line">        <span class="keyword">if</span> mileage &gt;= self.odometer_reading:</span><br><span class="line">            self.odometer_reading = mileage</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            print(<span class="string">"You can't roll back an odometer!"</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">increment_odometer</span><span class="params">(self,miles)</span>:</span></span><br><span class="line">        <span class="comment">#将里程表读数增加指定的量</span></span><br><span class="line">        self.odometer_reading += miles</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Battery</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="comment">#一次模拟电动车电瓶的简单尝试</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self,battery_size=<span class="number">70</span>)</span>:</span></span><br><span class="line">        <span class="comment">#初始化电瓶的属性</span></span><br><span class="line">        self.battery_size = battery_size</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">describe_battery</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="comment">#打印一条描述电瓶容量的消息</span></span><br><span class="line">        print(<span class="string">"This car has a "</span> + str(self.battery_size) + <span class="string">"-KWh battery."</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_range</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="comment">#打印一条消息，指出电瓶的续航里程</span></span><br><span class="line">        <span class="keyword">if</span> self.battery_size == <span class="number">70</span>:</span><br><span class="line">            range = <span class="number">240</span></span><br><span class="line">        <span class="keyword">elif</span> self.battery_size == <span class="number">90</span>:</span><br><span class="line">            range = <span class="number">280</span></span><br><span class="line">        message = <span class="string">"This car can go approximately "</span> + str(range)</span><br><span class="line">        message += <span class="string">" miles on a full charge."</span></span><br><span class="line">        print(message)</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ElectricCar</span><span class="params">(Car)</span>:</span></span><br><span class="line">    <span class="comment">#模拟电动车的独特之处</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self,make,model,year)</span>:</span></span><br><span class="line">        <span class="comment">#初始化父类的属性，再初始化电动车特有的属性</span></span><br><span class="line">        super().__init__(make,model,year)</span><br><span class="line">        self.battery = Battery()</span><br></pre></td></tr></table></figure></p><p>新建一个my_electric_car.py的文件，导入ElectricCar类，并创建一辆电动车：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#my_electric_car.py</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> car <span class="keyword">import</span> ElectricCar</span><br><span class="line"></span><br><span class="line">my_tesla = ElectricCar(<span class="string">'tesla'</span>,<span class="string">'model s'</span>,<span class="string">'2016'</span>)</span><br><span class="line"></span><br><span class="line">print(my_tesla.get_descriptive_name())</span><br><span class="line">my_tesla.battery.describe_battery()</span><br><span class="line">my_tesla.battery.get_range()</span><br></pre></td></tr></table></figure></p><p>输出结果如下：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">2016</span> Tesla Model S</span><br><span class="line">This car has a <span class="number">70</span>-KWh battery.</span><br><span class="line">This car can go approximately <span class="number">240</span> miles on a full charge.</span><br></pre></td></tr></table></figure></p><h1 id="8-5-3-从一个模块中导入多个类"><a href="#8-5-3-从一个模块中导入多个类" class="headerlink" title=" - 8.5.3 从一个模块中导入多个类  "></a><font color="#FF0000"> - 8.5.3 从一个模块中导入多个类  </font></h1><p>  可根据需要在程序文件中导入任意数量的类，假如我们要在同一个程序中创建普通汽车和电动汽车，就需要将类Car和ElectricCar类都导入，多个类之间用逗号进行分隔：<br> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment">#my_car.py</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> car <span class="keyword">import</span> Car,ElectricCar</span><br><span class="line"></span><br><span class="line">my_audi = Car(<span class="string">'audi'</span>,<span class="string">'a9'</span>,<span class="string">'2018'</span>)</span><br><span class="line">print(my_audi.get_descriptive_name())</span><br><span class="line"></span><br><span class="line">my_tesla = ElectricCar(<span class="string">'tesla'</span>,<span class="string">'model s'</span>,<span class="string">'2016'</span>)</span><br><span class="line">print(my_tesla.get_descriptive_name())</span><br></pre></td></tr></table></figure></p><p>输出结果如下：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">2018</span> Audi A9</span><br><span class="line"><span class="number">2016</span> Tesla Model S</span><br></pre></td></tr></table></figure></p><h1 id="8-5-4-导入整个模块"><a href="#8-5-4-导入整个模块" class="headerlink" title=" - 8.5.4 导入整个模块  "></a><font color="#FF0000"> - 8.5.4 导入整个模块  </font></h1><p>导入整个模块后，需要使用句点表示法访问需要的类：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#my_car.py</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> car</span><br><span class="line"></span><br><span class="line">my_audi = car.Car(<span class="string">'audi'</span>,<span class="string">'a9'</span>,<span class="string">'2018'</span>)</span><br><span class="line">print(my_audi.get_descriptive_name())</span><br><span class="line"></span><br><span class="line">my_tesla = car.ElectricCar(<span class="string">'tesla'</span>,<span class="string">'model s'</span>,<span class="string">'2016'</span>)</span><br><span class="line">print(my_tesla.get_descriptive_name())</span><br></pre></td></tr></table></figure></p><p>我们导入了整个car模块，需要使用语法 <code>module_name.class_name</code> 访问需要的类，程序输出结果与8.5.3一致：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">2018</span> Audi A9</span><br><span class="line"><span class="number">2016</span> Tesla Model S</span><br></pre></td></tr></table></figure></p><h1 id="8-5-5-导入模块中的所有类"><a href="#8-5-5-导入模块中的所有类" class="headerlink" title=" - 8.5.5 导入模块中的所有类  "></a><font color="#FF0000"> - 8.5.5 导入模块中的所有类  </font></h1><p>  要导入模块中的所有类，可使用以下语法：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> module_name <span class="keyword">import</span> *</span><br></pre></td></tr></table></figure></p><p>这种导入方法是不推荐的，没有明确指出你使用了模块中的哪些类，还可能引发名称方面的困惑，需要从一个模块中导入很多类时，最好导入整个模块，并使用 <code>module_name.class_name</code> 语法来访问类</p><h1 id="8-5-6-在一个模块中导入另一个模块"><a href="#8-5-6-在一个模块中导入另一个模块" class="headerlink" title=" - 8.5.6 在一个模块中导入另一个模块  "></a><font color="#FF0000"> - 8.5.6 在一个模块中导入另一个模块  </font></h1><p>  有时候需要将类分散到多个模块当中，以免模块太大，或者在同一个模块中储存不相关的类，将类储存在多个模块中时，一个模块中的类可能会依赖于另一个模块中的类，这种情况下，我们可以在前一个模块中导入必要的类，以下例子中，将Car类储存在一个模块当中，并将ElectricCar和Battery类储存在另一个模块当中，将第二个模块命名为electric_car.py，并将ElectricCar和Battery类复制到这个模块中：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#electric_car.py</span></span><br><span class="line"><span class="comment">#一组可用于表示电动汽车的类</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> car <span class="keyword">import</span> Car</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Battery</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="comment">#一次模拟电动车电瓶的简单尝试</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self,battery_size=<span class="number">70</span>)</span>:</span></span><br><span class="line">        <span class="comment">#初始化电瓶的属性</span></span><br><span class="line">        self.battery_size = battery_size</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">describe_battery</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="comment">#打印一条描述电瓶容量的消息</span></span><br><span class="line">        print(<span class="string">"This car has a "</span> + str(self.battery_size) + <span class="string">"-KWh battery."</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_range</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="comment">#打印一条消息，指出电瓶的续航里程</span></span><br><span class="line">        <span class="keyword">if</span> self.battery_size == <span class="number">70</span>:</span><br><span class="line">            range = <span class="number">240</span></span><br><span class="line">        <span class="keyword">elif</span> self.battery_size == <span class="number">90</span>:</span><br><span class="line">            range = <span class="number">280</span></span><br><span class="line">        message = <span class="string">"This car can go approximately "</span> + str(range)</span><br><span class="line">        message += <span class="string">" miles on a full charge."</span></span><br><span class="line">        print(message)</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ElectricCar</span><span class="params">(Car)</span>:</span></span><br><span class="line">    <span class="comment">#模拟电动车的独特之处</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self,make,model,year)</span>:</span></span><br><span class="line">        <span class="comment">#初始化父类的属性，再初始化电动车特有的属性</span></span><br><span class="line">        super().__init__(make,model,year)</span><br><span class="line">        self.battery = Battery()</span><br></pre></td></tr></table></figure></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#car.py</span></span><br><span class="line"><span class="comment">#一个可用于表示汽车的类</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Car</span><span class="params">()</span>:</span></span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self,make,model,year)</span>:</span></span><br><span class="line">        <span class="comment">#初始化描述汽车的属性</span></span><br><span class="line">        self.make = make</span><br><span class="line">        self.model = model</span><br><span class="line">        self.year = year</span><br><span class="line">        self.odometer_reading = <span class="number">0</span></span><br><span class="line">        </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_descriptive_name</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="comment">#返回整洁的描述性名称</span></span><br><span class="line">        long_name = str(self.year) + <span class="string">' '</span> + self.make + <span class="string">' '</span> +self.model</span><br><span class="line">        <span class="keyword">return</span> long_name.title()</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">read_odometer</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="comment">#打印一条消息，指出汽车的里程</span></span><br><span class="line">        print(<span class="string">"This car has "</span> + str(self.odometer_reading) + <span class="string">" miles on it."</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">update_odometer</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="comment">#将里程表读数设置为指定的值，拒绝将里程表往回拨</span></span><br><span class="line">        <span class="keyword">if</span> mileage &gt;= self.odometer_reading:</span><br><span class="line">            self.odometer_reading = mileage</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            print(<span class="string">"You can't roll back an odometer!"</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">increment_odometer</span><span class="params">(self,miles)</span>:</span></span><br><span class="line">        <span class="comment">#将里程表读数增加指定的量</span></span><br><span class="line">        self.odometer_reading += miles</span><br></pre></td></tr></table></figure><p>现在可以分别从每个模块中导入类：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#my_car.py</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> car <span class="keyword">import</span> Car</span><br><span class="line"><span class="keyword">from</span> electric_car <span class="keyword">import</span> ElectricCar</span><br><span class="line"></span><br><span class="line">my_audi = Car(<span class="string">'audi'</span>,<span class="string">'a9'</span>,<span class="string">'2018'</span>)</span><br><span class="line">print(my_audi.get_descriptive_name())</span><br><span class="line"></span><br><span class="line">my_tesla = ElectricCar(<span class="string">'tesla'</span>,<span class="string">'model s'</span>,<span class="string">'2016'</span>)</span><br><span class="line">print(my_tesla.get_descriptive_name())</span><br></pre></td></tr></table></figure></p><p>输出结果如下：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">2018</span> Audi A9</span><br><span class="line"><span class="number">2016</span> Tesla Model S</span><br></pre></td></tr></table></figure></p><h1 id="8-6-Python标准库"><a href="#8-6-Python标准库" class="headerlink" title=" - 8.6 Python标准库  "></a><font color="#FF0000"> - 8.6 Python标准库  </font></h1><p>Python标准库是一组模块，安装的Python都包含它，我们可以使用标准库中的任何函数和类，只需要在程序的开头包含一条简单的import语句，下面以模块collections中的一个类——OrderedDict（创建字典并记录其中的键-值对的添加顺序）为例：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#favorite_languages.py</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> collections <span class="keyword">import</span> OrderedDict</span><br><span class="line"></span><br><span class="line">favorite_languages = OrderedDict()</span><br><span class="line"></span><br><span class="line">favorite_languages [<span class="string">'jen'</span>] = <span class="string">'python'</span></span><br><span class="line">favorite_languages [<span class="string">'sarah'</span>] = <span class="string">'c'</span></span><br><span class="line">favorite_languages [<span class="string">'edward'</span>] = <span class="string">'java'</span></span><br><span class="line">favorite_languages [<span class="string">'anly'</span>] = <span class="string">'python'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> name,language <span class="keyword">in</span> favorite_languages.items():</span><br><span class="line">    print(name.title() + <span class="string">"'s favorite languages is "</span> +</span><br><span class="line">          language.title() + <span class="string">"."</span>)</span><br></pre></td></tr></table></figure></p><p>输出结果如下：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Jen<span class="string">'s favorite languages is Python.</span></span><br><span class="line"><span class="string">Sarah'</span>s favorite languages <span class="keyword">is</span> C.</span><br><span class="line">Edward<span class="string">'s favorite languages is Java.</span></span><br><span class="line"><span class="string">Anly'</span>s favorite languages <span class="keyword">is</span> Python.</span><br></pre></td></tr></table></figure></p>]]></content>
      
      
      <categories>
          
          <category> Python3 学习笔记 </category>
          
          <category> 基础学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 类 </tag>
            
            <tag> 继承 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python3 基础学习笔记 C07</title>
      <link href="/2018/11/03/A13-Python3-basic-C07/"/>
      <url>/2018/11/03/A13-Python3-basic-C07/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><blockquote><center><font color="#1BC3FB" size="4">Python3 基础学习笔记第七章 —— 【函数】</font></center></blockquote><a id="more"></a><hr><h1 id="7-1-定义函数"><a href="#7-1-定义函数" class="headerlink" title=" - 7.1 定义函数 "></a><font color="#FF0000"> - 7.1 定义函数 </font></h1><p> 一个简单的函数，命名为 example()，其中，关键字<font color="#FF0000"> def </font>来告诉Python我们要定义一个函数，这就是<font color="#FF0000">函数定义</font></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">example</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="string">"Hello world!"</span>)</span><br><span class="line">example()</span><br></pre></td></tr></table></figure><p>输出结果如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Hello world!</span><br></pre></td></tr></table></figure><h1 id="7-1-1-向函数传递信息"><a href="#7-1-1-向函数传递信息" class="headerlink" title=" - 7.1.1 向函数传递信息 "></a><font color="#FF0000"> - 7.1.1 向函数传递信息 </font></h1><p> 在函数定义 def example() 的括号中添加 username，可以让函数接受我们给 username 指定的任何值，在调用函数时给 username 指定一个值，调用 example() 时，可将一个名字传递给它：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">example</span><span class="params">(username)</span>:</span></span><br><span class="line">    print(<span class="string">"Hello , "</span> + username + <span class="string">'!'</span>)</span><br><span class="line">example(<span class="string">'TRHX'</span>)</span><br></pre></td></tr></table></figure><p>输出结果如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Hello , TRHX!</span><br></pre></td></tr></table></figure><h1 id="7-1-2-实参和形参"><a href="#7-1-2-实参和形参" class="headerlink" title=" - 7.1.2 实参和形参 "></a><font color="#FF0000"> - 7.1.2 实参和形参 </font></h1><p> 在 7.1.1 的例子中，函数 example() 的定义中，变量 username 是一个<font color="#FF0000">形参</font>——函数完成其工作所需的一项信息，在代码 example(‘TRHX’) 中，值’TRHX’是一个<font color="#FF0000">实参</font>，<font color="#FF0000">实参</font>是调用函数时传递给函数的信息，调用函数时，将要让函数使用的信息放在括号内。在 example(‘TRHX’) 中，将<font color="#FF0000">实参</font> ‘TRHX’ 传递给了函数 example，这个值被储存在<font color="#FF0000">形参</font> username 中</p><h1 id="7-2-传递实参"><a href="#7-2-传递实参" class="headerlink" title=" - 7.2 传递实参 "></a><font color="#FF0000"> - 7.2 传递实参 </font></h1><p>  鉴于函数定义中可能包含多个形参，因此函数调用中也可能包含多个实参。向函数传递实参的方式很多，可使用<font color="#FF0000">位置实参</font>，这要求实参的顺序与形参的顺序相同；也可以使用<font color="#FF0000">关键字实参</font>，其中每个实参都由变量和值组成；还可以使用<font color="#FF0000">列表和字典</font></p><h1 id="7-2-1-位置实参"><a href="#7-2-1-位置实参" class="headerlink" title=" - 7.2.1 位置实参 "></a><font color="#FF0000"> - 7.2.1 位置实参 </font></h1><p>  调用函数时，Python必须将函数调用中的每个实参都关联到函数定义中的一个形参。为此，最简单的方法是基于实参的顺序，这种关联方式被称为位置实参</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">describe_pet</span><span class="params">(animal_type , pet_name)</span>:</span></span><br><span class="line">    print(<span class="string">"I have a "</span> + animal_type + <span class="string">"."</span>)</span><br><span class="line">    print(<span class="string">"My "</span> + animal_type + <span class="string">"'s name is "</span> + pet_name.title() + <span class="string">"."</span>)</span><br><span class="line">describe_pet(<span class="string">'hamster'</span> , <span class="string">'harry'</span>)</span><br></pre></td></tr></table></figure><p>输出结果如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">I have a hamster.</span><br><span class="line">My hamste<span class="string">r's name is Harry.</span></span><br></pre></td></tr></table></figure><p>调用函数多次：我们可以根据需要调用函数任意次，要再描述一个宠物，只需要再次调用 </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">describe_pet() 即可</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">describe_pet</span><span class="params">(animal_type , pet_name)</span>:</span></span><br><span class="line">    print(<span class="string">"I have a "</span> + animal_type + <span class="string">"."</span>)</span><br><span class="line">    print(<span class="string">"My "</span> + animal_type + <span class="string">"'s name is "</span> + pet_name.title() + <span class="string">"."</span>)</span><br><span class="line">describe_pet(<span class="string">'hamster'</span> , <span class="string">'harry'</span>)</span><br><span class="line">describe_pet(<span class="string">'dog'</span> , <span class="string">'willi'</span>)</span><br></pre></td></tr></table></figure><p>输出结果如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">I have a hamster.</span><br><span class="line">Myhamste<span class="string">r's name is Harry.</span></span><br><span class="line"><span class="string">I have a dog.</span></span><br><span class="line"><span class="string">My dog'</span>s name <span class="keyword">is</span> Willi.</span><br></pre></td></tr></table></figure><h1 id="7-2-2-关键字实参"><a href="#7-2-2-关键字实参" class="headerlink" title=" - 7.2.2 关键字实参 "></a><font color="#FF0000"> - 7.2.2 关键字实参 </font></h1><p>关键字实参是传递给函数的<font color="#FF0000">名称-值对</font>。直接在实参中将名称和值关联起来，不用考虑函数调用中的实参顺序</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">describe_pet</span><span class="params">(animal_type , pet_name)</span>:</span></span><br><span class="line">    print(<span class="string">"I have a "</span> + animal_type + <span class="string">"."</span>)</span><br><span class="line">    print(<span class="string">"My "</span> + animal_type + <span class="string">"'s name is "</span> + pet_name.title() + <span class="string">"."</span>)</span><br><span class="line">describe_pet(animal_type = <span class="string">'hamster'</span> , pet_name = <span class="string">'harry'</span>)</span><br><span class="line">describe_pet(pet_name = <span class="string">'willi'</span> , animal_type = <span class="string">'dog'</span> )</span><br></pre></td></tr></table></figure><p>输出结果如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">I have a hamster.</span><br><span class="line">Myhamste<span class="string">r's name is Harry.</span></span><br><span class="line"><span class="string">I have a dog.</span></span><br><span class="line"><span class="string">My dog'</span>s name <span class="keyword">is</span> Willi.</span><br></pre></td></tr></table></figure><h1 id="7-2-3-默认值"><a href="#7-2-3-默认值" class="headerlink" title=" - 7.2.3 默认值 "></a><font color="#FF0000"> - 7.2.3 默认值 </font></h1><p>编写函数时，可给每个形参指定默认值，在调用函数中给形参提供了实参时，Python将使用指定的实参值，否则将使用形参的默认值</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">describe_pet</span><span class="params">(pet_name , animal_type = <span class="string">'dog'</span>)</span>:</span></span><br><span class="line">    print(<span class="string">"I have a "</span> + animal_type + <span class="string">"."</span>)</span><br><span class="line">    print(<span class="string">"My "</span> + animal_type + <span class="string">"'s name is "</span> + pet_name.title() + <span class="string">"."</span>)</span><br><span class="line">describe_pet(pet_name = <span class="string">'willi'</span>)</span><br></pre></td></tr></table></figure><p>输出结果如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">I have a dog.</span><br><span class="line">My dog<span class="string">'s name is Willi.</span></span><br></pre></td></tr></table></figure><p>在这个函数定义中，修改了形参的排列顺序，由于给 animal_type 指定了默认值，无需通过实参来指定动物类型，因此在函数调用中只包含一个实参——宠物的名字，然而Python依然将这个实参视为位置实参，因此如果函数调用中只包含宠物的名字，这个实参将关联到函数定义中的第一个形参，这就是需要将 pet_name 放在形参列表开头的原因所在</p><font color="#FF0000">注意：使用默认值时，在形参列表中必须先列出没有默认值的形参，再列出有默认值的形参，这让Python依然能够准确地解读位置实参</font><h1 id="7-3-返回值"><a href="#7-3-返回值" class="headerlink" title=" - 7.3 返回值 "></a><font color="#FF0000"> - 7.3 返回值 </font></h1><p>函数并非总是直接显示输出，相反，它可以处理一些数据，并返回一个或一组值，函数返回的值被称为<font color="#FF0000">返回值</font>，在函数中，<font color="#FF0000">可使用 return 语句将值返回到函数调用的代码行</font></p><h1 id="7-3-1-返回简单值"><a href="#7-3-1-返回简单值" class="headerlink" title=" - 7.3.1 返回简单值 "></a><font color="#FF0000"> - 7.3.1 返回简单值 </font></h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">name</span><span class="params">(first_name , last_name)</span>:</span></span><br><span class="line">    full_name = first_name + <span class="string">' '</span> + last_name</span><br><span class="line">    <span class="keyword">return</span> full_name.title()</span><br><span class="line">student = name(<span class="string">'jimi'</span> , <span class="string">'hendrix'</span>)</span><br><span class="line">print(student)</span><br></pre></td></tr></table></figure><p>输出结果如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Jimi Hendrix</span><br></pre></td></tr></table></figure><h1 id="7-3-2-让实参变成可选的"><a href="#7-3-2-让实参变成可选的" class="headerlink" title=" - 7.3.2 让实参变成可选的 "></a><font color="#FF0000"> - 7.3.2 让实参变成可选的 </font></h1><p>对 7.3.1 的例子进行改进，扩展函数 name，使其还能够处理中间名：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">name</span><span class="params">(first_name , middle_name , last_name)</span>:</span></span><br><span class="line">    full_name = first_name + <span class="string">' '</span> + middle_name + <span class="string">' '</span> + last_name</span><br><span class="line">    <span class="keyword">return</span> full_name.title()</span><br><span class="line">student = name(<span class="string">'jimi'</span> , <span class="string">'lee'</span> , <span class="string">'hendrix'</span>)</span><br><span class="line">print(student)</span><br></pre></td></tr></table></figure><p>输出结果如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Jimi Lee Hendrix</span><br></pre></td></tr></table></figure><p>然而，如果一个人没有中间名，那么在调用这个函数时就会出错，为了让中间名变成可选的，可以给实参 middle_name 指定一个默认值——空字符串，并在用户没有提供中间名时不使用这个实参，注意需要将 middle_name 移到形参列表的末尾：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">name</span><span class="params">(first_name , last_name , middle_name = <span class="string">' '</span>)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> middle_name:</span><br><span class="line">        full_name = first_name + <span class="string">' '</span> + middle_name + <span class="string">' '</span> + last_name</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        full_name = first_name + <span class="string">' '</span> + last_name</span><br><span class="line">    <span class="keyword">return</span> full_name.title()</span><br><span class="line">student = name(<span class="string">'jimi'</span> , <span class="string">'hendrix'</span>)</span><br><span class="line">print(student)</span><br><span class="line">student = name(<span class="string">'jimi'</span> , <span class="string">'hendrix'</span> , <span class="string">'lee'</span> )</span><br><span class="line">print(student)</span><br></pre></td></tr></table></figure><p>输出结果如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Jimi   Hendrix</span><br><span class="line">Jimi Lee Hendrix</span><br></pre></td></tr></table></figure><h1 id="7-3-3-返回字典"><a href="#7-3-3-返回字典" class="headerlink" title=" - 7.3.3 返回字典 "></a><font color="#FF0000"> - 7.3.3 返回字典 </font></h1><p>函数可返回任何类型的值，包括列表和字典等较复杂的数据结构：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">name</span><span class="params">(first_name , last_name)</span>:</span></span><br><span class="line">    full_name = &#123;<span class="string">'first'</span> : first_name , <span class="string">'last'</span> : last_name&#125;</span><br><span class="line">    <span class="keyword">return</span> full_name</span><br><span class="line">student = name(<span class="string">'jimi'</span> , <span class="string">'hendrix'</span>)</span><br><span class="line">print(student)</span><br></pre></td></tr></table></figure><p>输出结果如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;<span class="string">'first'</span>: <span class="string">'jimi'</span>, <span class="string">'last'</span>: <span class="string">'hendrix'</span>&#125;</span><br></pre></td></tr></table></figure><h1 id="7-3-4-结合使用函数和-while-循环"><a href="#7-3-4-结合使用函数和-while-循环" class="headerlink" title=" - 7.3.4 结合使用函数和 while 循环 "></a><font color="#FF0000"> - 7.3.4 结合使用函数和 while 循环 </font></h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">name</span><span class="params">(first_name , last_name)</span>:</span></span><br><span class="line">    full_name = first_name + <span class="string">' '</span> + last_name</span><br><span class="line">    <span class="keyword">return</span> full_name</span><br><span class="line"><span class="keyword">while</span> <span class="keyword">True</span>:</span><br><span class="line">    print(<span class="string">"\nPlease input your name:"</span>)</span><br><span class="line">    print(<span class="string">"(Enter 'exit' to quit)"</span>)</span><br><span class="line">    f_name = input(<span class="string">"First_name:"</span>)</span><br><span class="line">    <span class="keyword">if</span> f_name == <span class="string">'exit'</span>:</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    l_name = input(<span class="string">"Last_name:"</span>)</span><br><span class="line">    <span class="keyword">if</span> l_name == <span class="string">'exit'</span>:</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    student = name(f_name , l_name)</span><br><span class="line">    print(student)</span><br><span class="line">    print(<span class="string">"Hello, "</span> + student.title() + <span class="string">"!"</span>)</span><br></pre></td></tr></table></figure><p>运行程序：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">Please input your name:</span><br><span class="line">(Enter <span class="string">'exit'</span> to quit)</span><br><span class="line">First_name:jimi</span><br><span class="line">Last_name:hendrix</span><br><span class="line">jimi hendrix</span><br><span class="line">Hello, Jimi Hendrix!</span><br><span class="line"></span><br><span class="line">Please input your name:</span><br><span class="line">(Enter <span class="string">'exit'</span> to quit)</span><br><span class="line">First_name:exit</span><br></pre></td></tr></table></figure><h1 id="7-4-传递列表"><a href="#7-4-传递列表" class="headerlink" title=" - 7.4 传递列表 "></a><font color="#FF0000"> - 7.4 传递列表 </font></h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">users</span><span class="params">(names)</span>:</span></span><br><span class="line">    <span class="keyword">for</span> name <span class="keyword">in</span> names:</span><br><span class="line">        message = <span class="string">"Hello, "</span> + name.title() + <span class="string">"!"</span></span><br><span class="line">        print(message)</span><br><span class="line">usernames = [<span class="string">'hannah'</span> , <span class="string">'tony'</span> , <span class="string">'margot'</span>]</span><br><span class="line">users(usernames)</span><br></pre></td></tr></table></figure><p>输出结果如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Hello, Hannah!</span><br><span class="line">Hello, Tony!</span><br><span class="line">Hello, Margot!</span><br></pre></td></tr></table></figure><h1 id="7-4-1-在函数中修改列表"><a href="#7-4-1-在函数中修改列表" class="headerlink" title=" - 7.4.1 在函数中修改列表 "></a><font color="#FF0000"> - 7.4.1 在函数中修改列表 </font></h1><p>将列表传递给函数后，函数就可以对其进行修改，在函数中对这个列表所做的任何修改都是永久性的</p><p>#首先创造一个列表，其中包含一些要打印的设计</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">unprinted_designs = [<span class="string">'iphone case'</span> , <span class="string">'robot pendannt'</span> , <span class="string">'dodecahedron'</span>]</span><br><span class="line">completed_models = []</span><br><span class="line"></span><br><span class="line"><span class="comment">#模拟打印每个设计，直到没有未打印的设计为止</span></span><br><span class="line"><span class="comment">#打印每个设计后，都将其移到列表completed_models中</span></span><br><span class="line"><span class="keyword">while</span> unprinted_designs:</span><br><span class="line">    current_design = unprinted_designs.pop()</span><br><span class="line">    </span><br><span class="line">    <span class="comment">#模拟根据设计制作3D打印模型的过程</span></span><br><span class="line">    print(<span class="string">"Printing model: "</span> + current_design)</span><br><span class="line">    completed_models.append(current_design)</span><br><span class="line">    </span><br><span class="line"><span class="comment">#显示打印好的所有模型</span></span><br><span class="line">print(<span class="string">"\nThe following models have been printed: "</span>)</span><br><span class="line"><span class="keyword">for</span> completed_model <span class="keyword">in</span> completed_models:</span><br><span class="line">    print(completed_model)</span><br></pre></td></tr></table></figure><p>输出结果如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Printing model: dodecahedron</span><br><span class="line">Printing model: robot pendannt</span><br><span class="line">Printing model: iphone case</span><br><span class="line"></span><br><span class="line">The following models have been printed: </span><br><span class="line">dodecahedron</span><br><span class="line">robot pendannt</span><br><span class="line">iphone case</span><br></pre></td></tr></table></figure><p>编写两个函数重新组织这些代码，每一个函数都做一件具体的工作，输出结果与原程序相同：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">print_models</span><span class="params">(unprinted_designs , completed_models)</span>:</span></span><br><span class="line"><span class="comment">#模拟打印每个设计，直到没有未打印的设计为止</span></span><br><span class="line"><span class="comment">#打印每个设计后，都将其移到列表completed_models中</span></span><br><span class="line">    <span class="keyword">while</span> unprinted_designs:</span><br><span class="line">        current_design = unprinted_designs.pop()</span><br><span class="line">    </span><br><span class="line">        <span class="comment">#模拟根据设计制作3D打印模型的过程</span></span><br><span class="line">        print(<span class="string">"Printing model: "</span> + current_design)</span><br><span class="line">        completed_models.append(current_design)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">show_completed_models</span><span class="params">(completed_models)</span>:</span>    </span><br><span class="line"><span class="comment">#显示打印好的所有模型</span></span><br><span class="line">    print(<span class="string">"\nThe following models have been printed: "</span>)</span><br><span class="line">    <span class="keyword">for</span> completed_model <span class="keyword">in</span> completed_models:</span><br><span class="line">        print(completed_model)</span><br><span class="line"></span><br><span class="line">unprinted_designs = [<span class="string">'iphone case'</span> , <span class="string">'robot pendannt'</span> , <span class="string">'dodecahedron'</span>]</span><br><span class="line">completed_models = []</span><br><span class="line"></span><br><span class="line">print_models(unprinted_designs , completed_models)</span><br><span class="line">show_completed_models(completed_models)</span><br></pre></td></tr></table></figure><h1 id="7-4-2-禁止函数修改列表"><a href="#7-4-2-禁止函数修改列表" class="headerlink" title=" - 7.4.2 禁止函数修改列表 "></a><font color="#FF0000"> - 7.4.2 禁止函数修改列表 </font></h1><p>有时候需要禁止函数修改列表，拿 7.4.1 的例子来说，我们打印了所有设计后，也要保留原来的未打印的设计列表，以供备案，但由于我们将所有的设计都移出了 unprinted_designs，这个列表变成了空的，原来的列表没有了，为了解决这个问题，可向函数传递列表的副本而不是原件；这样函数所做的任何修改都只影响副本，而丝毫不影响原件，要将列表的副本传递给函数，可以像下面这样做：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">function_name(list_name[:])</span><br></pre></td></tr></table></figure><p>切片表示法 [:] 创建列表的副本，在 7.4.1 的例子中如果不想清空未打印的设计列表，可像下面这样调用 print_models()：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">print_models(unprinted_designs[:] , completed_models)</span><br></pre></td></tr></table></figure><h1 id="7-5-传递任意数量的实参"><a href="#7-5-传递任意数量的实参" class="headerlink" title=" - 7.5 传递任意数量的实参 "></a><font color="#FF0000"> - 7.5 传递任意数量的实参 </font></h1><p>Python允许函数从调用语句中收集任意数量的实参</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">make_pizza</span><span class="params">(*toppings)</span>:</span></span><br><span class="line">    print(toppings)</span><br><span class="line">make_pizza(<span class="string">'pepperoni'</span>)</span><br><span class="line">make_pizza(<span class="string">'mushrooms'</span> , <span class="string">'green peppers'</span> , <span class="string">'extra cheese'</span>)</span><br></pre></td></tr></table></figure><p>形参名 <code>*toppings</code> 中的星号让Python创建一个名为 toppings 的空元组，并将收到的所有值都封装到这个元组中，函数体内的print语句通过生成输出来证明Python能够处理使用一个值调用函数的情形，也能处理使用三个值来调用函数的情形，输出结果如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">(<span class="string">'pepperoni'</span>,)</span><br><span class="line">(<span class="string">'mushrooms'</span>, <span class="string">'green peppers'</span>, <span class="string">'extra cheese'</span>)</span><br></pre></td></tr></table></figure><p>使用循环语句：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">make_pizza</span><span class="params">(*toppings)</span>:</span></span><br><span class="line">    print(<span class="string">"\nMaking a pizza with the followiing toppings: "</span>)</span><br><span class="line">    <span class="keyword">for</span> topping <span class="keyword">in</span> toppings:</span><br><span class="line">        print(<span class="string">"- "</span> + topping)</span><br><span class="line">make_pizza(<span class="string">'pepperoni'</span>)</span><br><span class="line">make_pizza(<span class="string">'mushrooms'</span> , <span class="string">'green peppers'</span> , <span class="string">'extra cheese'</span>)</span><br></pre></td></tr></table></figure><p>输出结果如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">Making a pizza <span class="keyword">with</span> the followiing toppings: </span><br><span class="line">- pepperoni</span><br><span class="line"></span><br><span class="line">Making a pizza <span class="keyword">with</span> the followiing toppings: </span><br><span class="line">- mushrooms</span><br><span class="line">- green peppers</span><br><span class="line">- extra cheese</span><br></pre></td></tr></table></figure><h1 id="7-5-1-结合使用位置实参和任意数量实参"><a href="#7-5-1-结合使用位置实参和任意数量实参" class="headerlink" title=" - 7.5.1 结合使用位置实参和任意数量实参 "></a><font color="#FF0000"> - 7.5.1 结合使用位置实参和任意数量实参 </font></h1><p>如果要让函数接受不同类型的实参，必须在函数定义中将接纳任意数量实参的形参放在最后。Python先匹配位置实参和关键字实参，再将余下的实参都收集到最后一个形参中：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">make_pizza</span><span class="params">(size , *toppings)</span>:</span></span><br><span class="line">    print(<span class="string">"\nMaking a "</span> + str(size) + <span class="string">"-inch pizza with the followiing toppings: "</span>)</span><br><span class="line">    <span class="keyword">for</span> topping <span class="keyword">in</span> toppings:</span><br><span class="line">        print(<span class="string">"- "</span> + topping)</span><br><span class="line">make_pizza(<span class="number">16</span> , <span class="string">'pepperoni'</span>)</span><br><span class="line">make_pizza(<span class="number">18</span> , <span class="string">'mushrooms'</span> , <span class="string">'green peppers'</span> , <span class="string">'extra cheese'</span>)</span><br></pre></td></tr></table></figure><p>输出结果如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">Making a <span class="number">16</span>-inch pizza <span class="keyword">with</span> the followiing toppings: </span><br><span class="line">- pepperoni</span><br><span class="line"></span><br><span class="line">Making a <span class="number">18</span>-inch pizza <span class="keyword">with</span> the followiing toppings: </span><br><span class="line">- mushrooms</span><br><span class="line">- green peppers</span><br><span class="line">- extra cheese</span><br></pre></td></tr></table></figure><h1 id="7-5-2-使用任意数量的关键字实参"><a href="#7-5-2-使用任意数量的关键字实参" class="headerlink" title=" - 7.5.2 使用任意数量的关键字实参 "></a><font color="#FF0000"> - 7.5.2 使用任意数量的关键字实参 </font></h1><p>有时候，需要接受任何数量的实参，但预先我们不知道传递给函数的会是什么样的信息，在这种情况下，可以将函数编写成能够接受任意数量的键-值对——调用语句提供了多少就接受多少：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">build_profile</span><span class="params">(first , last , **user_info)</span>:</span></span><br><span class="line">    <span class="comment">#创建一个字典，其中包括我们知道的有关用户的一切</span></span><br><span class="line">    profile = &#123;&#125;</span><br><span class="line">    profile[<span class="string">'first_name'</span>] = first</span><br><span class="line">    profile[<span class="string">'last_name'</span>] = last</span><br><span class="line">    <span class="keyword">for</span> key , value <span class="keyword">in</span> user_info.items():</span><br><span class="line">        profile[key] = value</span><br><span class="line">    <span class="keyword">return</span> profile</span><br><span class="line">user_profile = build_profile(<span class="string">'albert'</span> , <span class="string">'einstein'</span> , location = <span class="string">'princeton'</span> , field = <span class="string">'physics'</span>)</span><br><span class="line">print(user_profile)</span><br></pre></td></tr></table></figure><p>形参 <code>**user_info</code> 中的两个星号让Python创建一个名为 user_info 的空字典，并将收到的所有名称-值对都封装到这个字典中，在这个函数中，可以像访问其他字典那样访问 user_info 中的名字-值对，程序运行结果如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;<span class="string">'first_name'</span>: <span class="string">'albert'</span>, <span class="string">'last_name'</span>: <span class="string">'einstein'</span>, <span class="string">'location'</span>: <span class="string">'princeton'</span>, <span class="string">'field'</span>: <span class="string">'physics'</span>&#125;</span><br></pre></td></tr></table></figure><h1 id="7-6-将函数储存在模块中"><a href="#7-6-将函数储存在模块中" class="headerlink" title=" - 7.6 将函数储存在模块中 "></a><font color="#FF0000"> - 7.6 将函数储存在模块中 </font></h1><p>更进一步，我们可以把函数储存在被称为<font color="#FF0000">模块</font>的独立文件中，再将模块导入到主程序中，import 语句运行在当前运行的程序文件中使用模块中的代码</p><h1 id="7-6-1-导入整个模块"><a href="#7-6-1-导入整个模块" class="headerlink" title=" - 7.6.1 导入整个模块 "></a><font color="#FF0000"> - 7.6.1 导入整个模块 </font></h1><p>要让函数是可导入的，得先创建模块，<font color="#FF0000">模块是扩展名为.py的文件</font>，包含要导入到程序中的代码，下面将创建一个包含函数 make_pizza() 的模块</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#pizza.py</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">make_pizza</span><span class="params">(size , *toppings)</span>:</span></span><br><span class="line">    <span class="comment">#概述要制作的比萨</span></span><br><span class="line">    print(<span class="string">"\nMaking a "</span> + str(size) + <span class="string">"-inch pizza with the followiing toppings: "</span>)</span><br><span class="line">    <span class="keyword">for</span> topping <span class="keyword">in</span> toppings:</span><br><span class="line">        print(<span class="string">"- "</span> + topping)</span><br></pre></td></tr></table></figure><p>接下来，我们在 pizza.py 所在的目录中创建另一个名为 making_pizzas.py 的文件，在这个文件中导入刚刚创建的模块，在调用 make_pizza() 两次：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#making_pizzas.py</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> pizza</span><br><span class="line">pizza.make_pizza(<span class="number">16</span> , <span class="string">'pepperoni'</span>)</span><br><span class="line">pizza.make_pizza(<span class="number">18</span> , <span class="string">'mushrooms'</span> , <span class="string">'green peppers'</span> , <span class="string">'extra cheese'</span>)</span><br></pre></td></tr></table></figure><p>Python在读取这个文件时，代码行 import pizza 让Python打开文件 pizza.py，并在幕后将其中所有函数都复制到这个程序中，在 making_pizzas.py 中，可以使用 pizza.py 中定义的所有函数，要调用被导入的模块中的函数，可指定导入的模块的名称 pizza 和函数名 make_pizza()，并使用句点分隔它们，最终运行结果与原程序相同：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">Making a <span class="number">16</span>-inch pizza <span class="keyword">with</span> the followiing toppings: </span><br><span class="line">- pepperoni</span><br><span class="line"></span><br><span class="line">Making a <span class="number">18</span>-inch pizza <span class="keyword">with</span> the followiing toppings: </span><br><span class="line">- mushrooms</span><br><span class="line">- green peppers</span><br><span class="line">- extra cheese</span><br></pre></td></tr></table></figure><h1 id="7-6-2-导入特定的函数"><a href="#7-6-2-导入特定的函数" class="headerlink" title=" - 7.6.2 导入特定的函数 "></a><font color="#FF0000"> - 7.6.2 导入特定的函数 </font></h1><p>导入模块中特定的函数，可以使用以下语法：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> module_name <span class="keyword">import</span> function_name</span><br></pre></td></tr></table></figure><p>通过用逗号分隔函数名，可根据需要从模块中导入任意数量的函数：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> module_name <span class="keyword">import</span> function_0 , function_1 , function_2</span><br></pre></td></tr></table></figure></p><p>以前面的 making_pizzas.py 为例，如果只想导入要使用的函数，代码类似于下面这样：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pizza <span class="keyword">import</span> make_pizza</span><br><span class="line"></span><br><span class="line">make_pizza(<span class="number">16</span> , <span class="string">'pepperoni'</span>)</span><br><span class="line">make_pizza(<span class="number">18</span> , <span class="string">'mushrooms'</span> , <span class="string">'green peppers'</span> , <span class="string">'extra cheese'</span>)</span><br></pre></td></tr></table></figure></p><h1 id="7-6-3-使用-as-给函数指定别名"><a href="#7-6-3-使用-as-给函数指定别名" class="headerlink" title=" - 7.6.3 使用 as 给函数指定别名 "></a><font color="#FF0000"> - 7.6.3 使用 as 给函数指定别名 </font></h1><p>如果要导入的函数名称可能与程序中现有的名称冲突，或者函数的名称太长，可指定简短而独一无二的别名，要给函数指定别名，需要在导入它的时候这样做，通用语法为：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> module_name <span class="keyword">import</span> function_name <span class="keyword">as</span> fn</span><br></pre></td></tr></table></figure></p><p>同样以前面的 making_pizzas.py 为例：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pizza <span class="keyword">import</span> make_pizza <span class="keyword">as</span> mp</span><br><span class="line"></span><br><span class="line">mp(<span class="number">16</span> , <span class="string">'pepperoni'</span>)</span><br><span class="line">mp(<span class="number">18</span> , <span class="string">'mushrooms'</span> , <span class="string">'green peppers'</span> , <span class="string">'extra cheese'</span>)</span><br></pre></td></tr></table></figure></p><h1 id="7-6-4-使用-as-给模块指定别名"><a href="#7-6-4-使用-as-给模块指定别名" class="headerlink" title=" - 7.6.4 使用 as 给模块指定别名 "></a><font color="#FF0000"> - 7.6.4 使用 as 给模块指定别名 </font></h1><p>我们还可以给模块指定别名，通用语法为：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> module_name <span class="keyword">as</span> mn</span><br></pre></td></tr></table></figure></p><p>同样以前面的 making_pizzas.py 为例：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pizza <span class="keyword">as</span> p</span><br><span class="line"></span><br><span class="line">p.make_pizza(<span class="number">16</span> , <span class="string">'pepperoni'</span>)</span><br><span class="line">p.make_pizza(<span class="number">18</span> , <span class="string">'mushrooms'</span> , <span class="string">'green peppers'</span> , <span class="string">'extra cheese'</span>)</span><br></pre></td></tr></table></figure></p><h1 id="7-6-5-导入模块中的所有函数"><a href="#7-6-5-导入模块中的所有函数" class="headerlink" title=" - 7.6.5 导入模块中的所有函数 "></a><font color="#FF0000"> - 7.6.5 导入模块中的所有函数 </font></h1><p>导入模块中所有函数的通用语法为：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> module_name <span class="keyword">import</span> *</span><br></pre></td></tr></table></figure></p><p>同样以前面的 making_pizzas.py 为例：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pizza <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">make_pizza(<span class="number">16</span> , <span class="string">'pepperoni'</span>)</span><br><span class="line">make_pizza(<span class="number">18</span> , <span class="string">'mushrooms'</span> , <span class="string">'green peppers'</span> , <span class="string">'extra cheese'</span>)</span><br></pre></td></tr></table></figure></p><p>import 语句中的星号让Python将模块 pizza 中的每个函数都复制到这个程序中，由于导入了每个函数，可通过名称来调用每个函数，而不需要用句点表示法，然而，如果模块中有函数的名称与项目中的名称相同，就有可能导致意想不到的结果，<font color="#FF0000">最佳的做法是，要么只导入我们需要使用的函数，要么导入整个模块并使用句点表示法</font></p>]]></content>
      
      
      <categories>
          
          <category> Python3 学习笔记 </category>
          
          <category> 基础学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 函数 </tag>
            
            <tag> 模块 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python3 基础学习笔记 C06</title>
      <link href="/2018/10/30/A12-Python3-basic-C06/"/>
      <url>/2018/10/30/A12-Python3-basic-C06/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><blockquote><center><font color="#1BC3FB" size="4">Python3 基础学习笔记第六章 —— 【用户输入和 while 循环】</font></center></blockquote><a id="more"></a><hr><h1 id="6-1-函数-input-的工作原理"><a href="#6-1-函数-input-的工作原理" class="headerlink" title=" - 6.1 函数 input() 的工作原理 "></a><font color="#FF0000"> - 6.1 函数 input() 的工作原理 </font></h1><p> 函数 input() 让程序暂停运行，等待用户输入一些文本。获取用户输入后，Python将其储存在一个变量当中，以方便你使用；函数 input() 返回为 string 类型</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">message = input(<span class="string">"Please tell me your name:"</span>)</span><br><span class="line">print(<span class="string">"Hello , "</span> + message + <span class="string">"!"</span>)</span><br></pre></td></tr></table></figure><p>输出结果如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Please tell me your name:anliy</span><br><span class="line">Hello , anliy!</span><br></pre></td></tr></table></figure><p>进阶：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">message = <span class="string">"Please tell me your name so that we can personalize the messages you see."</span></span><br><span class="line">message += <span class="string">"\nWhat's your first name?"</span></span><br><span class="line">name = input(message)</span><br><span class="line">print(<span class="string">"\nHello , "</span> + name + <span class="string">"!"</span>)</span><br></pre></td></tr></table></figure><p>输出结果如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Please tell me your name so that we can personalize the messages you see.</span><br><span class="line">What<span class="string">'s your first name?trhx</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Hello , trhx!</span></span><br></pre></td></tr></table></figure><h1 id="6-1-1-使用-int-来获取数值输入"><a href="#6-1-1-使用-int-来获取数值输入" class="headerlink" title=" - 6.1.1 使用 int() 来获取数值输入 "></a><font color="#FF0000"> - 6.1.1 使用 int() 来获取数值输入 </font></h1><p> 使用函数 input() 时，Python会将用户输入解读为字符串：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>age = input(<span class="string">"How old are you?"</span>)</span><br><span class="line">How old are you?19</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>age</span><br><span class="line"><span class="string">'19'</span></span><br></pre></td></tr></table></figure><p>为了解决这个问题，可以使用函数 int() ，它让Python将输入视为数值：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>age = input(<span class="string">"How old are you?"</span>)</span><br><span class="line">How old are you?19</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>age = int(age)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>age</span><br><span class="line"><span class="number">19</span></span><br></pre></td></tr></table></figure><p>实例：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">age = input(<span class="string">"Please tell me your age:"</span>)</span><br><span class="line">age = int(age)</span><br><span class="line"><span class="keyword">if</span> age &gt;= <span class="number">18</span>:</span><br><span class="line">    print(<span class="string">"You are old enough to go to the Internet bar!"</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    print(<span class="string">"You are not old enough to go to Internet bar!"</span>)</span><br></pre></td></tr></table></figure><p>输出结果如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Please tell me your age:<span class="number">17</span></span><br><span class="line">You are <span class="keyword">not</span> old enough to go to Internet bar!</span><br></pre></td></tr></table></figure><h1 id="6-1-2-求模运算符"><a href="#6-1-2-求模运算符" class="headerlink" title=" - 6.1.2 求模运算符 "></a><font color="#FF0000"> - 6.1.2 求模运算符 </font></h1><p> 处理数值信息时，求模运算符（%）是一个很有用的工具，它将两个数相除并返回余数：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="number">4</span> % <span class="number">3</span></span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="number">5</span> % <span class="number">3</span></span><br><span class="line"><span class="number">2</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="number">8</span> % <span class="number">2</span></span><br><span class="line"><span class="number">0</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="number">7</span> % <span class="number">3</span></span><br><span class="line"><span class="number">1</span></span><br></pre></td></tr></table></figure><h1 id="6-1-3-在-Python-2-7-中获取输入"><a href="#6-1-3-在-Python-2-7-中获取输入" class="headerlink" title=" - 6.1.3 在 Python 2.7 中获取输入 "></a><font color="#FF0000"> - 6.1.3 在 Python 2.7 中获取输入 </font></h1><p> 如果使用 Python 2.7，应该使用函数 <code>raw_input()</code> 来提示用户输入，这个函数与 Python 3 中的 <code>input()</code> 一样，也将输入解读为字符串；Python 2.7 也包含函数 <code>input()</code>，但它将用户输入解读为Python代码，并尝试运行它们</p><h1 id="6-2-while-循环"><a href="#6-2-while-循环" class="headerlink" title=" - 6.2 while 循环 "></a><font color="#FF0000"> - 6.2 while 循环 </font></h1><p>  for 循环用于针对集合中的每一个元素的一个代码块，而 while 循环不断地运行，直到指定的条件不满足为止</p><h1 id="6-2-1-使用-while-循环"><a href="#6-2-1-使用-while-循环" class="headerlink" title=" - 6.2.1 使用 while 循环 "></a><font color="#FF0000"> - 6.2.1 使用 while 循环 </font></h1><p> 一个简单的 while 循环：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">num = <span class="number">1</span></span><br><span class="line"><span class="keyword">while</span> num &lt; <span class="number">5</span>:</span><br><span class="line">    print(num)</span><br><span class="line">    num += <span class="number">1</span></span><br></pre></td></tr></table></figure><p>输出结果如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span></span><br><span class="line"><span class="number">2</span></span><br><span class="line"><span class="number">3</span></span><br><span class="line"><span class="number">4</span></span><br></pre></td></tr></table></figure><h1 id="6-2-2-让用户选择退出循环"><a href="#6-2-2-让用户选择退出循环" class="headerlink" title=" - 6.2.2 让用户选择退出循环 "></a><font color="#FF0000"> - 6.2.2 让用户选择退出循环 </font></h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">prompt = <span class="string">"\nTell me something, and I will repeat it back to you:"</span></span><br><span class="line">prompt += <span class="string">"\nEnter 'quit' to end the program."</span></span><br><span class="line">message = <span class="string">" "</span></span><br><span class="line"><span class="keyword">while</span> message != <span class="string">'quit'</span>:</span><br><span class="line">    message = input(prompt)</span><br><span class="line">    print(message)</span><br></pre></td></tr></table></figure><p>运行程序：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">Tell me something, <span class="keyword">and</span> I will repeat it back to you:</span><br><span class="line">Enter <span class="string">'quit'</span> to end the program.Hello everyone!</span><br><span class="line">Hello everyone!</span><br><span class="line"></span><br><span class="line">Tell me something, <span class="keyword">and</span> I will repeat it back to you:</span><br><span class="line">Enter <span class="string">'quit'</span> to end the program.Hello again!</span><br><span class="line">Hello again!</span><br><span class="line"></span><br><span class="line">Tell me something, <span class="keyword">and</span> I will repeat it back to you:</span><br><span class="line">Enter <span class="string">'quit'</span> to end the program.quit</span><br><span class="line">quit</span><br></pre></td></tr></table></figure><h1 id="6-2-3-使用标志"><a href="#6-2-3-使用标志" class="headerlink" title=" - 6.2.3 使用标志 "></a><font color="#FF0000"> - 6.2.3 使用标志 </font></h1><p> 在要求很多条件都满足才继续运行的程序中，可以定义一个变量，用于判断整个程序是否处于活动状态，这个变量称为<font color="#FF0000">标志</font></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">prompt = <span class="string">"\nTell me something, and I will repeat it back to you:"</span></span><br><span class="line">prompt += <span class="string">"\nEnter 'quit' to end the program."</span></span><br><span class="line">active = <span class="keyword">True</span></span><br><span class="line"><span class="keyword">while</span> active:</span><br><span class="line">    message = input(prompt)</span><br><span class="line">    <span class="keyword">if</span> message == <span class="string">'quit'</span>:</span><br><span class="line">        active = <span class="keyword">False</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        print(message)</span><br></pre></td></tr></table></figure><p>运行结果与6.2.2一致</p><h1 id="6-2-4-使用-break-退出循环"><a href="#6-2-4-使用-break-退出循环" class="headerlink" title=" - 6.2.4 使用 break 退出循环 "></a><font color="#FF0000"> - 6.2.4 使用 break 退出循环 </font></h1><p> 要立即退出 while 循环，不再运行循环中余下的代码，也不管条件测试的结果如何，可使用 break 语句，break 语句用于控制程序流程，可使用它来控制哪些代码将执行，哪些代码不执行</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">prompt = <span class="string">"\nPlease enter the name of a city you have visited:"</span></span><br><span class="line">prompt += <span class="string">"\nEnter 'quit' when you are finished."</span></span><br><span class="line">active = <span class="keyword">True</span></span><br><span class="line"><span class="keyword">while</span> active:</span><br><span class="line">    city = input(prompt)</span><br><span class="line">    <span class="keyword">if</span> city == <span class="string">'quit'</span>:</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        print(<span class="string">"I'd love to go to "</span> + city.title() + <span class="string">"!"</span>)</span><br></pre></td></tr></table></figure><p>运行程序：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">Please enter the name of a city you have visited:</span><br><span class="line">Enter <span class="string">'quit'</span> when you are finished.Shanghai</span><br><span class="line">I<span class="string">'d love to go to Shanghai!</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Please enter the name of a city you have visited:</span></span><br><span class="line"><span class="string">Enter '</span>quit<span class="string">' when you are finished.Beijing</span></span><br><span class="line"><span class="string">I'</span>d love to go to Beijing!</span><br><span class="line"></span><br><span class="line">Please enter the name of a city you have visited:</span><br><span class="line">Enter <span class="string">'quit'</span> when you are finished.quit</span><br></pre></td></tr></table></figure><p>在任何Python循环中都可以使用break语句，例如，可以使用break语句来退出遍历列表或字典</p><h1 id="6-2-5-在循环中使用-continue"><a href="#6-2-5-在循环中使用-continue" class="headerlink" title=" - 6.2.5 在循环中使用 continue "></a><font color="#FF0000"> - 6.2.5 在循环中使用 continue </font></h1><p> 要返回到循环开头，并根据条件测试结果决定是否继续执行循环，可使用 continue 语句，它不像 break 语句那样不再执行余下的代码并退出整个循环，例如，从1到10只打印其中奇数：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">number =<span class="number">0</span></span><br><span class="line"><span class="keyword">while</span> number &lt; <span class="number">10</span>:</span><br><span class="line">    number += <span class="number">1</span></span><br><span class="line">    <span class="keyword">if</span> number % <span class="number">2</span> == <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">continue</span></span><br><span class="line">    print(number)</span><br></pre></td></tr></table></figure><p>输出结果如下：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span></span><br><span class="line"><span class="number">3</span></span><br><span class="line"><span class="number">5</span></span><br><span class="line"><span class="number">7</span></span><br><span class="line"><span class="number">9</span></span><br></pre></td></tr></table></figure></p><h1 id="6-3-使用-while-循环来处理列表和字典"><a href="#6-3-使用-while-循环来处理列表和字典" class="headerlink" title=" - 6.3 使用 while 循环来处理列表和字典 "></a><font color="#FF0000"> - 6.3 使用 while 循环来处理列表和字典 </font></h1><p>for循环是一种遍历列表的有效方式，但在for循环中不应修改列表，否则将导致Python难以跟踪其中的元素，要在遍历列表的同时对其进行修改，可使用while循环</p><h1 id="6-3-1-在列表之间移动元素"><a href="#6-3-1-在列表之间移动元素" class="headerlink" title=" - 6.3.1 在列表之间移动元素 "></a><font color="#FF0000"> - 6.3.1 在列表之间移动元素 </font></h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">unconfirmed_users = [<span class="string">'alice'</span> , <span class="string">'brian'</span> , <span class="string">'candace'</span>]</span><br><span class="line">confirmed_users = []</span><br><span class="line"><span class="keyword">while</span> unconfirmed_users:</span><br><span class="line">    current_user = unconfirmed_users.pop()</span><br><span class="line">    print(<span class="string">"Verifying user: "</span> + current_user.title())</span><br><span class="line">    confirmed_users.append(current_user)</span><br><span class="line">print(<span class="string">"\nThe following users have been confirmed:"</span>)</span><br><span class="line"><span class="keyword">for</span> confirmed_user <span class="keyword">in</span> confirmed_users:</span><br><span class="line">    print(confirmed_user.title())</span><br></pre></td></tr></table></figure><p> 首先创建一个未验证用户列表，其中包含用户Alice、Brian和Candace，还创建了一个空列表，用于存储已验证的用户，程序中的 while 循环将不断地运行，直到列表 unconfirmed_users 变成空的。在这个循环中，函数pop() 以每次一个的方式从列表 unconfirmed_users 末尾删除未验证的用户。由于Candace位于列表 unconfirmed_users 的末尾，因此其名字将首先被删除、存储到变量 current_user 中并加入到列表 confirmed_users 中。接下来是Brian，然后是Alice</p><p>为模拟用户验证过程，我们打印一条验证消息并将用户加入到已验证用户列表中。未验证用户列表越来越短，而已验证用户列表越来越长。未验证用户列表为空后结束循环，再打印已验证用户列表：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Verifying user: Candace</span><br><span class="line">Verifying user: Brian</span><br><span class="line">Verifying user: Alice</span><br><span class="line"></span><br><span class="line">The following users have been confirmed:</span><br><span class="line">Candace</span><br><span class="line">Brian</span><br><span class="line">Alice</span><br></pre></td></tr></table></figure><h1 id="6-3-2-删除包含特定值的所有列表元素"><a href="#6-3-2-删除包含特定值的所有列表元素" class="headerlink" title=" - 6.3.2 删除包含特定值的所有列表元素 "></a><font color="#FF0000"> - 6.3.2 删除包含特定值的所有列表元素 </font></h1><p> 可以使用方法 remove() 来删除列表中特定的值，但如果要删除的值在列表中出现了多次，方法 remove() 就不管用了，如果要删除列表中所有包含特定值的元素则可以使用 while 循环：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">names = [<span class="string">'alice'</span> , <span class="string">'candace'</span> , <span class="string">'alice'</span> , <span class="string">'brian'</span> , <span class="string">'alix'</span> , <span class="string">'candace'</span> , <span class="string">'heliy'</span>]</span><br><span class="line">print(names)</span><br><span class="line"><span class="keyword">while</span> <span class="string">'candace'</span> <span class="keyword">in</span> names:</span><br><span class="line">    names.remove(<span class="string">'candace'</span>)</span><br><span class="line">print(names)</span><br></pre></td></tr></table></figure><p> 输出结果如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[<span class="string">'alice'</span>, <span class="string">'candace'</span>, <span class="string">'alice'</span>, <span class="string">'brian'</span>, <span class="string">'alix'</span>, <span class="string">'candace'</span>, <span class="string">'heliy'</span>]</span><br><span class="line">[<span class="string">'alice'</span>, <span class="string">'alice'</span>, <span class="string">'brian'</span>, <span class="string">'alix'</span>, <span class="string">'heliy'</span>]</span><br></pre></td></tr></table></figure><p>使用方法 remove() 做对比：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">names = [<span class="string">'alice'</span> , <span class="string">'candace'</span> , <span class="string">'alice'</span> , <span class="string">'brian'</span> , <span class="string">'alix'</span> , <span class="string">'candace'</span> , <span class="string">'heliy'</span>]</span><br><span class="line">print(names)</span><br><span class="line">names.remove(<span class="string">'candace'</span>)</span><br><span class="line">print(names)</span><br></pre></td></tr></table></figure><p>输出结果如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[<span class="string">'alice'</span>, <span class="string">'candace'</span>, <span class="string">'alice'</span>, <span class="string">'brian'</span>, <span class="string">'alix'</span>, <span class="string">'candace'</span>, <span class="string">'heliy'</span>]</span><br><span class="line">[<span class="string">'alice'</span>, <span class="string">'alice'</span>, <span class="string">'brian'</span>, <span class="string">'alix'</span>, <span class="string">'candace'</span>, <span class="string">'heliy'</span>]</span><br></pre></td></tr></table></figure><h1 id="6-3-3-使用用户输入来填充字典"><a href="#6-3-3-使用用户输入来填充字典" class="headerlink" title=" - 6.3.3 使用用户输入来填充字典 "></a><font color="#FF0000"> - 6.3.3 使用用户输入来填充字典 </font></h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">responses = &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">#设置一个标志，指出调查是否继续</span></span><br><span class="line">polling_active = <span class="keyword">True</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> polling_active:</span><br><span class="line">    <span class="comment">#提示输入被调查者的姓名和回答</span></span><br><span class="line">    name = input(<span class="string">"\nWhat's your name?"</span>)</span><br><span class="line">    response = input(<span class="string">"What kind of fruit do you like?"</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="comment">#将答卷储存在字典中</span></span><br><span class="line">    responses[name] = response</span><br><span class="line">    </span><br><span class="line">    <span class="comment">#询问是否还有其他人要参与回答</span></span><br><span class="line">    repeat = input(<span class="string">"Would you like to let another person respond?(Yes/No)"</span>)</span><br><span class="line">    <span class="keyword">if</span> repeat == <span class="string">'No'</span>:</span><br><span class="line">        polling_active = <span class="keyword">False</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#调查结束，显示结果</span></span><br><span class="line">print(<span class="string">"\n------ Poll Results ------"</span>)</span><br><span class="line"><span class="keyword">for</span> name , response <span class="keyword">in</span> responses.items():</span><br><span class="line">    print(name + <span class="string">" like "</span> + response + <span class="string">"."</span>)</span><br></pre></td></tr></table></figure><p>运行程序：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">What<span class="string">'s your name?TRHX</span></span><br><span class="line"><span class="string">What kind of fruit do you like?apple</span></span><br><span class="line"><span class="string">Would you like to let another person respond?(Yes/No)Yes</span></span><br><span class="line"><span class="string"></span></span><br><span class="line">What's your name?TRHXCC</span><br><span class="line">What kind of fruit do you like?banana</span><br><span class="line">Would you like to let another person respond?(Yes/No)No</span><br><span class="line"></span><br><span class="line">------ Poll Results ------</span><br><span class="line">TRHX like apple.</span><br><span class="line">TRHXCC like banana.</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Python3 学习笔记 </category>
          
          <category> 基础学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> input()函数 </tag>
            
            <tag> while循环 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python3 基础学习笔记 C05</title>
      <link href="/2018/10/27/A11-Python3-basic-C05/"/>
      <url>/2018/10/27/A11-Python3-basic-C05/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><blockquote><center><font color="#1BC3FB" size="4">Python3 基础学习笔记第五章 —— 【字典】</font></center></blockquote><a id="more"></a><hr><h1 id="5-1-一个简单的字典"><a href="#5-1-一个简单的字典" class="headerlink" title=" - 5.1 一个简单的字典 "></a><font color="#FF0000"> - 5.1 一个简单的字典 </font></h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">fruits = &#123;<span class="string">'apple'</span> : <span class="string">'red'</span> , <span class="string">'number'</span> : <span class="number">5</span>&#125;</span><br><span class="line">print(fruits[<span class="string">'apple'</span>])</span><br><span class="line">print(fruits[<span class="string">'number'</span>])</span><br></pre></td></tr></table></figure><p>输出结果如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">red</span><br><span class="line"><span class="number">5</span></span><br></pre></td></tr></table></figure><p>在Python中，字典是一系列<font color="#FF000">键-值对</font>。每个键都与一个值相关联，你可以使用键来访问与之相关联的值。与键相关联的值可以是数字、字符串、列表乃至字典。事实上，可以将任何Python对象用作字典中的值。<font color="#FF0000">键-值对</font>是两个相关联的值。在指定键时，Python将返回与之相关联的值。键和值之间用冒号分隔，而<font color="#FF000">键-值对</font>之间用逗号分隔。在字典中，想储存多少个<font color="#FF000">键-值对</font>都可以</p><h1 id="5-1-1-访问字典中的值"><a href="#5-1-1-访问字典中的值" class="headerlink" title=" - 5.1.1 访问字典中的值 "></a><font color="#FF0000"> - 5.1.1 访问字典中的值 </font></h1><p> 要获取与键相关联的值，可依次指定字典名和放在方括号内的键：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">fruits = &#123;<span class="string">'apple'</span> : <span class="string">'red'</span> , <span class="string">'number'</span> : <span class="number">5</span>&#125;</span><br><span class="line">number_fruits = fruits[<span class="string">'number'</span>]</span><br><span class="line">print(<span class="string">"The number of apple is "</span> + str(number_fruits) + <span class="string">"!"</span>)</span><br></pre></td></tr></table></figure><p>输出结果如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">The number of apple <span class="keyword">is</span> <span class="number">5</span>!</span><br></pre></td></tr></table></figure><h1 id="5-1-2-添加键-值对"><a href="#5-1-2-添加键-值对" class="headerlink" title=" - 5.1.2 添加键-值对 "></a><font color="#FF0000"> - 5.1.2 添加键-值对 </font></h1><p> 字典是一种动态结构，可随时在其中添加键-值对。要添加键-值对，可依次指定字典名、用方括号括起来的键和相关联的值</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">fruits = &#123;<span class="string">'apple'</span> : <span class="string">'red'</span> , <span class="string">'number1'</span> : <span class="number">5</span>&#125;</span><br><span class="line">print(fruits)</span><br><span class="line">fruits[<span class="string">'banana'</span>] = <span class="string">'yellow'</span></span><br><span class="line">fruits[<span class="string">'number2'</span>] = <span class="number">13</span></span><br><span class="line">print(fruits)</span><br></pre></td></tr></table></figure><p>输出结果如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#123;<span class="string">'apple'</span>: <span class="string">'red'</span>, <span class="string">'number1'</span>: <span class="number">5</span>&#125;</span><br><span class="line">&#123;<span class="string">'apple'</span>: <span class="string">'red'</span>, <span class="string">'number1'</span>: <span class="number">5</span>, <span class="string">'banana'</span>: <span class="string">'yellow'</span>, <span class="string">'number2'</span>: <span class="number">13</span>&#125;</span><br></pre></td></tr></table></figure><font color="#FF0000">注意：键-值对的排列顺序与添加顺序不同。Python不关心键-值对的添加顺序，而只关心键和值之间的关联关系</font><p>有时候为了方便也可以先使用一对空的花括号定义一个字典，再分行添加各个键-值对：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">fruits = &#123;&#125;</span><br><span class="line">fruits[<span class="string">'banana'</span>] = <span class="string">'yellow'</span></span><br><span class="line">fruits[<span class="string">'number2'</span>] = <span class="number">13</span></span><br><span class="line">print(fruits)</span><br></pre></td></tr></table></figure><p>输出结果如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;<span class="string">'banana'</span>: <span class="string">'yellow'</span>, <span class="string">'number2'</span>: <span class="number">13</span>&#125;</span><br></pre></td></tr></table></figure><h1 id="5-1-3-修改字典中的值"><a href="#5-1-3-修改字典中的值" class="headerlink" title=" - 5.1.3 修改字典中的值 "></a><font color="#FF0000"> - 5.1.3 修改字典中的值 </font></h1><p> 要修改字典中的值，可依次指定字典名、用方括号括起来的键以及与该键相关联的新值</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">fruits = &#123;<span class="string">'color'</span> : <span class="string">'red'</span>&#125;</span><br><span class="line">print(<span class="string">"The color of the fruits is "</span> + fruits[<span class="string">'color'</span>] + <span class="string">"!"</span>)</span><br><span class="line">fruits[<span class="string">'color'</span>] = <span class="string">'yellow'</span></span><br><span class="line">print(<span class="string">"The color of the fruits is "</span> + fruits[<span class="string">'color'</span>] + <span class="string">" now!"</span>)</span><br></pre></td></tr></table></figure><p>输出结果如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">The color of the fruits <span class="keyword">is</span> red!</span><br><span class="line">The color of the fruits <span class="keyword">is</span> yellow now!</span><br></pre></td></tr></table></figure><p>进阶：对一个能够以不同速度移动的外星人的位置进行跟踪，为此，我们将储存该外星人的当前速度，并据此确定该外星人将向右移动多远：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">alien = &#123;<span class="string">'x_position'</span>: <span class="number">0</span>, <span class="string">'y_position'</span>: <span class="number">25</span>, <span class="string">'speed'</span>: <span class="string">'medium'</span>&#125;</span><br><span class="line">print(<span class="string">"Original x-position: "</span> + str(alien[<span class="string">'x_position'</span>]))</span><br><span class="line"></span><br><span class="line"><span class="comment">#向右移动外星人，据外星人当前速度决定将其移动多远</span></span><br><span class="line"><span class="keyword">if</span> alien[<span class="string">'speed'</span>] == <span class="string">'slow'</span>:</span><br><span class="line">    x_increment = <span class="number">1</span></span><br><span class="line"><span class="keyword">elif</span> alien[<span class="string">'speed'</span>] == <span class="string">'medium'</span>:</span><br><span class="line">    x_increment = <span class="number">2</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    x_increment = <span class="number">3</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#新位置等于老位置加上增量</span></span><br><span class="line">alien[<span class="string">'x_position'</span>] = alien[<span class="string">'x_position'</span>] + x_increment</span><br><span class="line">print(<span class="string">"New x_position: "</span> + str(alien[<span class="string">'x_position'</span>]))</span><br></pre></td></tr></table></figure><p>输出结果如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Original x-position: <span class="number">0</span></span><br><span class="line">New x_position: <span class="number">2</span></span><br></pre></td></tr></table></figure><h1 id="5-1-4-删除键-值对"><a href="#5-1-4-删除键-值对" class="headerlink" title=" - 5.1.4 删除键-值对 "></a><font color="#FF0000"> - 5.1.4 删除键-值对 </font></h1><p> 对于字典中不再需要的信息，可使用del语句将相应的键-值对彻底删除。使用del语句时，必须指定字典名和要删除的键</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">fruits = &#123;<span class="string">'apple'</span> : <span class="string">'red'</span> , <span class="string">'number'</span> : <span class="number">5</span>&#125;</span><br><span class="line">print(fruits)</span><br><span class="line"><span class="keyword">del</span> fruits[<span class="string">'number'</span>]</span><br><span class="line">print(fruits)</span><br></pre></td></tr></table></figure><p>输出结果如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#123;<span class="string">'apple'</span>: <span class="string">'red'</span>, <span class="string">'number'</span>: <span class="number">5</span>&#125;</span><br><span class="line">&#123;<span class="string">'apple'</span>: <span class="string">'red'</span>&#125;</span><br></pre></td></tr></table></figure><h1 id="5-1-5-由类似对象组成的字典"><a href="#5-1-5-由类似对象组成的字典" class="headerlink" title=" - 5.1.5 由类似对象组成的字典 "></a><font color="#FF0000"> - 5.1.5 由类似对象组成的字典 </font></h1><p> 字典储存的可以是一个对象的多种信息，也可以储存众多对象的同一种信息，例如要调查很多人最喜欢的编程语言：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">favorite_languages = &#123;</span><br><span class="line">    <span class="string">'jen'</span> : <span class="string">'python'</span> ,</span><br><span class="line">    <span class="string">'sarah'</span> : <span class="string">'c'</span> ,</span><br><span class="line">    <span class="string">'edward'</span> : <span class="string">'ruby'</span> ,</span><br><span class="line">    <span class="string">'phil'</span> : <span class="string">'java'</span> ,</span><br><span class="line">    &#125;</span><br><span class="line">print(<span class="string">"Sarah's favorite languages is "</span> + favorite_languages[<span class="string">'sarah'</span>].title() + <span class="string">"!"</span>)</span><br></pre></td></tr></table></figure><p>输出结果如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Sarah<span class="string">'s favorite languages is C!</span></span><br></pre></td></tr></table></figure><h1 id="5-2-遍历字典"><a href="#5-2-遍历字典" class="headerlink" title=" - 5.2 遍历字典 "></a><font color="#FF0000"> - 5.2 遍历字典 </font></h1><h1 id="5-2-1-方法-items-遍历所有的键-值对"><a href="#5-2-1-方法-items-遍历所有的键-值对" class="headerlink" title=" - 5.2.1 方法 items() 遍历所有的键-值对 "></a><font color="#FF0000"> - 5.2.1 方法 items() 遍历所有的键-值对 </font></h1><p>使用for循环来遍历字典：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">name = &#123;</span><br><span class="line">    <span class="string">'username'</span> : <span class="string">'efermi'</span> ,</span><br><span class="line">    <span class="string">'first'</span> : <span class="string">'enrico'</span> ,</span><br><span class="line">    <span class="string">'last'</span> : <span class="string">'fermi'</span> ,</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">for</span> key , value <span class="keyword">in</span> name.items():</span><br><span class="line">    print(<span class="string">"\nKey: "</span> + key)</span><br><span class="line">    print(<span class="string">"Value: "</span> + value)</span><br></pre></td></tr></table></figure></p><p>输出结果如下：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">Key: username</span><br><span class="line">Value: efermi</span><br><span class="line"></span><br><span class="line">Key: first</span><br><span class="line">Value: enrico</span><br><span class="line"></span><br><span class="line">Key: last</span><br><span class="line">Value: fermi</span><br></pre></td></tr></table></figure></p><p>for语句的第二部分包含字典和方法items()，它返回一个键-值对列表。接下来，for循环依次将每个键-值对储存到指定的两个变量中</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">favorite_languages = &#123;</span><br><span class="line">    <span class="string">'jen'</span> : <span class="string">'python'</span> ,</span><br><span class="line">    <span class="string">'sarah'</span> : <span class="string">'c'</span> ,</span><br><span class="line">    <span class="string">'edward'</span> : <span class="string">'ruby'</span> ,</span><br><span class="line">    <span class="string">'phil'</span> : <span class="string">'java'</span> ,</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">for</span> name, language <span class="keyword">in</span> favorite_languages.items():</span><br><span class="line">    print(name.title() + <span class="string">"'s favorite language is "</span> + language.title() + <span class="string">"."</span>)</span><br></pre></td></tr></table></figure><p>输出结果如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Jen<span class="string">'s favorite language is Python.</span></span><br><span class="line"><span class="string">Sarah'</span>s favorite language <span class="keyword">is</span> C.</span><br><span class="line">Edward<span class="string">'s favorite language is Ruby.</span></span><br><span class="line"><span class="string">Phil'</span>s favorite language <span class="keyword">is</span> Java.</span><br></pre></td></tr></table></figure><h1 id="5-2-2-方法-keys-遍历字典中所有的键"><a href="#5-2-2-方法-keys-遍历字典中所有的键" class="headerlink" title=" - 5.2.2 方法 keys() 遍历字典中所有的键 "></a><font color="#FF0000"> - 5.2.2 方法 keys() 遍历字典中所有的键 </font></h1><p> 在不需要使用字典中的值时，方法key()很有用，下面来遍历字典favorite_languages，并将每个被调查者的名字都打印出来：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">favorite_languages = &#123;</span><br><span class="line">    <span class="string">'jen'</span> : <span class="string">'python'</span> ,</span><br><span class="line">    <span class="string">'sarah'</span> : <span class="string">'c'</span> ,</span><br><span class="line">    <span class="string">'edward'</span> : <span class="string">'ruby'</span> ,</span><br><span class="line">    <span class="string">'phil'</span> : <span class="string">'java'</span> ,</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">for</span> name <span class="keyword">in</span> favorite_languages.keys():</span><br><span class="line">    print(name.title())</span><br></pre></td></tr></table></figure><p>输出结果如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Jen</span><br><span class="line">Sarah</span><br><span class="line">Edward</span><br><span class="line">Phil</span><br></pre></td></tr></table></figure><p>遍历字典时，会默认遍历所有的键，因此，如果将上述代码中的<code>for name in favorite_languages.keys():</code>替换为<code>for name in favorite_languages:</code>输出结果将不变<br>进阶：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">favorite_languages = &#123;</span><br><span class="line">    <span class="string">'jen'</span> : <span class="string">'python'</span> ,</span><br><span class="line">    <span class="string">'sarah'</span> : <span class="string">'c'</span> ,</span><br><span class="line">    <span class="string">'edward'</span> : <span class="string">'ruby'</span> ,</span><br><span class="line">    <span class="string">'phil'</span> : <span class="string">'java'</span> ,</span><br><span class="line">    &#125;</span><br><span class="line">friends = [<span class="string">'phil'</span>, <span class="string">'sarah'</span>]</span><br><span class="line"><span class="keyword">for</span> name <span class="keyword">in</span> favorite_languages.keys():</span><br><span class="line">    print(name.title())</span><br><span class="line">    <span class="keyword">if</span> name <span class="keyword">in</span> friends:</span><br><span class="line">        print(<span class="string">"Hi "</span> + name + <span class="string">", I see your favorite languages is "</span> + favorite_languages[name].title() + <span class="string">"!"</span>)</span><br></pre></td></tr></table></figure><p>输出结果如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Jen</span><br><span class="line">Sarah</span><br><span class="line">Hi sarah, I see your favorite languages <span class="keyword">is</span> C!</span><br><span class="line">Edward</span><br><span class="line">Phil</span><br><span class="line">Hi phil, I see your favorite languages <span class="keyword">is</span> Java!</span><br></pre></td></tr></table></figure><h1 id="5-2-3-函数-sorted-按顺序遍历字典中的所有键"><a href="#5-2-3-函数-sorted-按顺序遍历字典中的所有键" class="headerlink" title=" - 5.2.3 函数 sorted() 按顺序遍历字典中的所有键 "></a><font color="#FF0000"> - 5.2.3 函数 sorted() 按顺序遍历字典中的所有键 </font></h1><p>字典总是明确地记录键和值之间的关联关系，但获取字典的元素时，获取顺序是不可预测的，要以特定的顺序返回元素，一种办法是在for循环中对返回的键进行排序，为此，可以使用函数sorted()来获得按特定顺序排列的键列表的副本：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">favorite_languages = &#123;</span><br><span class="line">    <span class="string">'jen'</span> : <span class="string">'python'</span> ,</span><br><span class="line">    <span class="string">'sarah'</span> : <span class="string">'c'</span> ,</span><br><span class="line">    <span class="string">'edward'</span> : <span class="string">'ruby'</span> ,</span><br><span class="line">    <span class="string">'phil'</span> : <span class="string">'java'</span> ,</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">for</span> name <span class="keyword">in</span> sorted(favorite_languages.keys()):</span><br><span class="line">    print(name.title())</span><br></pre></td></tr></table></figure><p>输出结果如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Edward</span><br><span class="line">Jen</span><br><span class="line">Phil</span><br><span class="line">Sarah</span><br></pre></td></tr></table></figure><h1 id="5-2-4-方法-values-遍历字典中的所有值"><a href="#5-2-4-方法-values-遍历字典中的所有值" class="headerlink" title=" - 5.2.4 方法 values() 遍历字典中的所有值 "></a><font color="#FF0000"> - 5.2.4 方法 values() 遍历字典中的所有值 </font></h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">favorite_languages = &#123;</span><br><span class="line">    <span class="string">'jen'</span> : <span class="string">'python'</span> ,</span><br><span class="line">    <span class="string">'sarah'</span> : <span class="string">'c'</span> ,</span><br><span class="line">    <span class="string">'edward'</span> : <span class="string">'ruby'</span> ,</span><br><span class="line">    <span class="string">'phil'</span> : <span class="string">'java'</span> ,</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">for</span> languages <span class="keyword">in</span> favorite_languages.values():</span><br><span class="line">    print(languages.title())</span><br></pre></td></tr></table></figure><p>输出结果如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Python</span><br><span class="line">C</span><br><span class="line">Ruby</span><br><span class="line">Java</span><br></pre></td></tr></table></figure><p>这种做法提取字典中所有的值，而没有考虑是否重复，<font color="#FF000">为剔除重复项，可使用集合(set)</font>，集合类似于列表，但每个元素都必须是独一无二的：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">favorite_languages = &#123;</span><br><span class="line">    <span class="string">'jen'</span> : <span class="string">'python'</span> ,</span><br><span class="line">    <span class="string">'sarah'</span> : <span class="string">'c'</span> ,</span><br><span class="line">    <span class="string">'edward'</span> : <span class="string">'ruby'</span> ,</span><br><span class="line">    <span class="string">'phil'</span> : <span class="string">'python'</span> ,</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">for</span> languages <span class="keyword">in</span> set(favorite_languages.values()):</span><br><span class="line">    print(languages.title())</span><br></pre></td></tr></table></figure><p>输出结果如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">C</span><br><span class="line">Python</span><br><span class="line">Ruby</span><br></pre></td></tr></table></figure><h1 id="5-3-嵌套"><a href="#5-3-嵌套" class="headerlink" title=" - 5.3 嵌套 "></a><font color="#FF0000"> - 5.3 嵌套 </font></h1><p>有时候，需要将一系列字典储存在列表中，或将列表作为值储存在字典中，这称为嵌套。可以在列表中嵌套字典、在字典中嵌套列表甚至在字典中嵌套字典</p><h1 id="5-3-1-字典列表"><a href="#5-3-1-字典列表" class="headerlink" title=" - 5.3.1 字典列表 "></a><font color="#FF0000"> - 5.3.1 字典列表 </font></h1><p>下面代码创建三个字典，每个字典都表示一个个学生，将这三个字典都放到一个名为students的列表当中，遍历列表将每个学生都打印出来：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">student_0 = &#123;<span class="string">'name'</span> : <span class="string">'anily'</span> , <span class="string">'class'</span> : <span class="number">2</span>&#125;</span><br><span class="line">student_1 = &#123;<span class="string">'name'</span> : <span class="string">'nikey'</span> , <span class="string">'class'</span> : <span class="number">5</span>&#125;</span><br><span class="line">student_2 = &#123;<span class="string">'name'</span> : <span class="string">'heyk'</span> , <span class="string">'class'</span> : <span class="number">3</span>&#125;</span><br><span class="line">students = [student_0 , student_1 , student_2]</span><br><span class="line"><span class="keyword">for</span> student <span class="keyword">in</span> students:</span><br><span class="line">    print(student)</span><br></pre></td></tr></table></figure><p>输出结果如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;<span class="string">'name'</span>: <span class="string">'anily'</span>, <span class="string">'class'</span>: <span class="number">2</span>&#125;</span><br><span class="line">&#123;<span class="string">'name'</span>: <span class="string">'nikey'</span>, <span class="string">'class'</span>: <span class="number">5</span>&#125;</span><br><span class="line">&#123;<span class="string">'name'</span>: <span class="string">'heyk'</span>, <span class="string">'class'</span>: <span class="number">3</span>&#125;</span><br></pre></td></tr></table></figure><p>进阶：使用 <code>range()</code> 自动生成三十个外星人：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#创建一个用于存储外星人的空列表</span></span><br><span class="line">aliens = []</span><br><span class="line"></span><br><span class="line"><span class="comment">#创建三十个绿色的外星人</span></span><br><span class="line"><span class="keyword">for</span> alien_number <span class="keyword">in</span> range(<span class="number">30</span>):</span><br><span class="line">    new_alien = &#123;<span class="string">'color'</span> : <span class="string">'green'</span> , <span class="string">'points'</span> : <span class="number">5</span> , <span class="string">'speed'</span> : <span class="string">'slow'</span>&#125;</span><br><span class="line">    aliens.append(new_alien)</span><br><span class="line"></span><br><span class="line"><span class="comment">#显示前五个外星人</span></span><br><span class="line"><span class="keyword">for</span> alien <span class="keyword">in</span> aliens[:<span class="number">5</span>]:</span><br><span class="line">    print(alien)</span><br><span class="line">print(<span class="string">"......"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#显示创建了多少外星人</span></span><br><span class="line">print(<span class="string">"Total number of aliens: "</span> + str(len(aliens)))</span><br></pre></td></tr></table></figure><p>输出结果如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123;<span class="string">'color'</span>: <span class="string">'green'</span>, <span class="string">'points'</span>: <span class="number">5</span>, <span class="string">'speed'</span>: <span class="string">'slow'</span>&#125;</span><br><span class="line">&#123;<span class="string">'color'</span>: <span class="string">'green'</span>, <span class="string">'points'</span>: <span class="number">5</span>, <span class="string">'speed'</span>: <span class="string">'slow'</span>&#125;</span><br><span class="line">&#123;<span class="string">'color'</span>: <span class="string">'green'</span>, <span class="string">'points'</span>: <span class="number">5</span>, <span class="string">'speed'</span>: <span class="string">'slow'</span>&#125;</span><br><span class="line">&#123;<span class="string">'color'</span>: <span class="string">'green'</span>, <span class="string">'points'</span>: <span class="number">5</span>, <span class="string">'speed'</span>: <span class="string">'slow'</span>&#125;</span><br><span class="line">&#123;<span class="string">'color'</span>: <span class="string">'green'</span>, <span class="string">'points'</span>: <span class="number">5</span>, <span class="string">'speed'</span>: <span class="string">'slow'</span>&#125;</span><br><span class="line">......</span><br><span class="line">Total number of aliens: <span class="number">30</span></span><br></pre></td></tr></table></figure><p>在上述例子中，虽然每个外星人都具有相同特征，但在Python看来，每个外星人都是独立的，我们可以独立地修改每个外星人：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">aliens = []</span><br><span class="line"><span class="keyword">for</span> alien_number <span class="keyword">in</span> range(<span class="number">30</span>):</span><br><span class="line">    new_alien = &#123;<span class="string">'color'</span> : <span class="string">'green'</span> , <span class="string">'points'</span> : <span class="number">5</span> , <span class="string">'speed'</span> : <span class="string">'slow'</span>&#125;</span><br><span class="line">    aliens.append(new_alien)</span><br><span class="line"><span class="keyword">for</span> alien <span class="keyword">in</span> aliens[<span class="number">0</span>:<span class="number">3</span>]:</span><br><span class="line">    <span class="keyword">if</span> alien[<span class="string">'color'</span>] == <span class="string">'green'</span>:</span><br><span class="line">        alien[<span class="string">'color'</span>] = <span class="string">'yellow'</span></span><br><span class="line">        alien[<span class="string">'points'</span>] = <span class="number">10</span></span><br><span class="line">        alien[<span class="string">'speed'</span>] = <span class="string">'medium'</span></span><br><span class="line"><span class="keyword">for</span> alien <span class="keyword">in</span> aliens[:<span class="number">5</span>]:</span><br><span class="line">    print(alien)</span><br><span class="line">print(<span class="string">"......"</span>)</span><br><span class="line">print(<span class="string">"Total number of aliens: "</span> + str(len(aliens)))</span><br></pre></td></tr></table></figure><p>输出结果如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123;<span class="string">'color'</span>: <span class="string">'yellow'</span>, <span class="string">'points'</span>: <span class="number">10</span>, <span class="string">'speed'</span>: <span class="string">'medium'</span>&#125;</span><br><span class="line">&#123;<span class="string">'color'</span>: <span class="string">'yellow'</span>, <span class="string">'points'</span>: <span class="number">10</span>, <span class="string">'speed'</span>: <span class="string">'medium'</span>&#125;</span><br><span class="line">&#123;<span class="string">'color'</span>: <span class="string">'yellow'</span>, <span class="string">'points'</span>: <span class="number">10</span>, <span class="string">'speed'</span>: <span class="string">'medium'</span>&#125;</span><br><span class="line">&#123;<span class="string">'color'</span>: <span class="string">'green'</span>, <span class="string">'points'</span>: <span class="number">5</span>, <span class="string">'speed'</span>: <span class="string">'slow'</span>&#125;</span><br><span class="line">&#123;<span class="string">'color'</span>: <span class="string">'green'</span>, <span class="string">'points'</span>: <span class="number">5</span>, <span class="string">'speed'</span>: <span class="string">'slow'</span>&#125;</span><br><span class="line">......</span><br><span class="line">Total number of aliens: <span class="number">30</span></span><br></pre></td></tr></table></figure><h1 id="5-3-2-在字典中存储列表"><a href="#5-3-2-在字典中存储列表" class="headerlink" title=" - 5.3.2 在字典中存储列表 "></a><font color="#FF0000"> - 5.3.2 在字典中存储列表 </font></h1><p>有时候需要将列表储存在字典中，而不是将字典储存在列表中：<br>例一：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#储存所点比萨的信息</span></span><br><span class="line">pizza = &#123;</span><br><span class="line">    <span class="string">'crust'</span> : <span class="string">'thick'</span> ,</span><br><span class="line">    <span class="string">'toppings'</span> : [<span class="string">'mushrooms'</span> , <span class="string">'extra chees'</span>] ,</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">#概述所点的比萨</span></span><br><span class="line">print(<span class="string">"You ordered a "</span> + pizza[<span class="string">'crust'</span>] + <span class="string">"-crust pizza"</span> + <span class="string">"with the following toppings :"</span> )</span><br><span class="line"><span class="keyword">for</span> topping <span class="keyword">in</span> pizza[<span class="string">'toppings'</span>]:</span><br><span class="line">    print(<span class="string">"\t"</span> + topping)</span><br></pre></td></tr></table></figure><p>输出结果如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">You ordered a thick-crust pizzawith the following toppings :</span><br><span class="line">mushrooms</span><br><span class="line">extra chees</span><br></pre></td></tr></table></figure><p>例二：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">favorite_languages = &#123;</span><br><span class="line">    <span class="string">'jen'</span> : [<span class="string">'python'</span> , <span class="string">'ruby'</span>] ,</span><br><span class="line">    <span class="string">'sarah'</span> : [<span class="string">'c'</span>] ,</span><br><span class="line">    <span class="string">'edward'</span> : [<span class="string">'go'</span> , <span class="string">'ruby'</span>] ,</span><br><span class="line">    <span class="string">'phil'</span> : [<span class="string">'python'</span> , <span class="string">'java'</span>] ,</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">for</span> name , languages <span class="keyword">in</span> favorite_languages.items():</span><br><span class="line">    print(<span class="string">"\n"</span> + name.title() + <span class="string">"'s favorite languages are:"</span>)</span><br><span class="line">    <span class="keyword">for</span> language <span class="keyword">in</span> languages:</span><br><span class="line">        print(<span class="string">"\t"</span> + language.title())</span><br></pre></td></tr></table></figure><p>输出结果如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">Jen<span class="string">'s favorite languages are:</span></span><br><span class="line"><span class="string">Python</span></span><br><span class="line"><span class="string">Ruby</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Sarah'</span>s favorite languages are:</span><br><span class="line">C</span><br><span class="line"></span><br><span class="line">Edward<span class="string">'s favorite languages are:</span></span><br><span class="line"><span class="string">Go</span></span><br><span class="line"><span class="string">Ruby</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Phil'</span>s favorite languages are:</span><br><span class="line">Python</span><br><span class="line">Java</span><br></pre></td></tr></table></figure><h1 id="5-3-3-在字典中存储字典"><a href="#5-3-3-在字典中存储字典" class="headerlink" title=" - 5.3.3 在字典中存储字典 "></a><font color="#FF0000"> - 5.3.3 在字典中存储字典 </font></h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">users = &#123;</span><br><span class="line">    <span class="string">'aeinstein'</span> : &#123;</span><br><span class="line">        <span class="string">'first'</span> : <span class="string">'albert'</span> ,</span><br><span class="line">        <span class="string">'last'</span> : <span class="string">'einstein'</span> ,</span><br><span class="line">        <span class="string">'location'</span> : <span class="string">'princeton'</span> ,</span><br><span class="line">        &#125; ,</span><br><span class="line">    <span class="string">'mcurie'</span> : &#123;</span><br><span class="line">        <span class="string">'first'</span> : <span class="string">'marie'</span> ,</span><br><span class="line">        <span class="string">'last'</span> : <span class="string">'curie'</span> ,</span><br><span class="line">        <span class="string">'location'</span> : <span class="string">'paris'</span> ,</span><br><span class="line">        &#125; ,</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">for</span> username , user_info <span class="keyword">in</span> users.items():</span><br><span class="line">    print(<span class="string">"\nUsername : "</span> + username)</span><br><span class="line">    full_name = user_info[<span class="string">'first'</span>] + <span class="string">" "</span> + user_info[<span class="string">'last'</span>]</span><br><span class="line">    location = user_info[<span class="string">'location'</span>]</span><br><span class="line">    print(<span class="string">"\tFull name : "</span> + full_name.title())</span><br><span class="line">    print(<span class="string">"\tlocation : "</span> + location .title())</span><br></pre></td></tr></table></figure><p>输出结果如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">Username : aeinstein</span><br><span class="line">Full name : Albert Einstein</span><br><span class="line">location : Princeton</span><br><span class="line"></span><br><span class="line">Username : mcurie</span><br><span class="line">Full name : Marie Curie</span><br><span class="line">location : Paris</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Python3 学习笔记 </category>
          
          <category> 基础学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 字典 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python3 基础学习笔记 C04</title>
      <link href="/2018/10/24/A10-Python3-basic-C04/"/>
      <url>/2018/10/24/A10-Python3-basic-C04/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><blockquote><center><font color="#1BC3FB" size="4">Python3 基础学习笔记第四章 —— 【if语句】</font></center></blockquote><a id="more"></a><hr><h1 id="4-1-一个简单的数列"><a href="#4-1-一个简单的数列" class="headerlink" title=" - 4.1 一个简单的数列 "></a><font color="#FF0000"> - 4.1 一个简单的数列 </font></h1><p> 给定一个汽车列表，将其中每一辆汽车的名称打印出来，要求打印 ‘bmw’ 时所有字母都要大写，其余名称只需要首字母大写：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">cars = [<span class="string">'audi'</span> , <span class="string">'bmw'</span> , <span class="string">'subaru'</span> , <span class="string">'toyota'</span>]</span><br><span class="line"><span class="keyword">for</span> car <span class="keyword">in</span> cars:</span><br><span class="line"><span class="keyword">if</span> car == <span class="string">'bmw'</span>:</span><br><span class="line">print(car.upper())</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">print(car.title())</span><br></pre></td></tr></table></figure><p>输出结果如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Audi</span><br><span class="line">BMW</span><br><span class="line">Subaru</span><br><span class="line">Toyota</span><br></pre></td></tr></table></figure><h1 id="4-1-1-检查特定值是否包含在列表当中"><a href="#4-1-1-检查特定值是否包含在列表当中" class="headerlink" title=" - 4.1.1 检查特定值是否包含在列表当中 "></a><font color="#FF0000"> - 4.1.1 检查特定值是否包含在列表当中 </font></h1><blockquote><p> 要判断特定的值是否已包含在列表当中，可使用关键字 <font color="#FF0000">in</font></p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">user_names = [<span class="string">'andia'</span> , <span class="string">'david'</span> , <span class="string">'liwa'</span>]</span><br><span class="line">user = <span class="string">'andia'</span></span><br><span class="line"><span class="keyword">if</span> user <span class="keyword">in</span> user_names:</span><br><span class="line">print(user.title() + <span class="string">"is in user_name."</span>)</span><br></pre></td></tr></table></figure><p>输出结果如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Andiais <span class="keyword">in</span> user_name.</span><br></pre></td></tr></table></figure><blockquote><p>要判断特定的值是否不包含在列表当中，可使用关键字 <font color="#FF0000"> not in</font></p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">user_names = [<span class="string">'andia'</span> , <span class="string">'david'</span> , <span class="string">'liwa'</span>]</span><br><span class="line">user = <span class="string">'kivle'</span></span><br><span class="line"><span class="keyword">if</span> user <span class="keyword">not</span> <span class="keyword">in</span> user_names:</span><br><span class="line">print(user.title() + <span class="string">"is not in user_name."</span>)</span><br></pre></td></tr></table></figure><p>输出结果如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Kivleis <span class="keyword">not</span> <span class="keyword">in</span> user_name.</span><br></pre></td></tr></table></figure><h1 id="4-2-if-else-语句"><a href="#4-2-if-else-语句" class="headerlink" title=" - 4.2 if-else 语句 "></a><font color="#FF0000"> - 4.2 if-else 语句 </font></h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">age = input(<span class="string">"请输入你的年龄查看是否可以去网吧："</span>)</span><br><span class="line"><span class="keyword">if</span> int(age) &gt;= <span class="number">18</span>:</span><br><span class="line">    print(<span class="string">"You are old enough to go to the net bar!"</span>)</span><br><span class="line">    print(<span class="string">"You should go to net bar less,study more!"</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    print(<span class="string">"You are too young to go to the net bar!"</span>)</span><br><span class="line">    print(<span class="string">"Wait until you are 18 to go to the net bar!"</span>)</span><br></pre></td></tr></table></figure><p>分别输入19和15，输出结果如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">请输入你的年龄查看是否可以去网吧：<span class="number">19</span></span><br><span class="line">You are old enough to go to the net bar!</span><br><span class="line">You should go to net bar less,study more!</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">请输入你的年龄查看是否可以去网吧：<span class="number">15</span></span><br><span class="line">You are too young to go to the net bar!</span><br><span class="line">Wait until you are <span class="number">18</span> to go to the net bar!</span><br></pre></td></tr></table></figure><h1 id="4-3-if-elif-else-结构"><a href="#4-3-if-elif-else-结构" class="headerlink" title=" - 4.3 if-elif-else 结构 "></a><font color="#FF0000"> - 4.3 if-elif-else 结构 </font></h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">age = <span class="number">12</span></span><br><span class="line"><span class="keyword">if</span> age &lt; <span class="number">4</span>:</span><br><span class="line">price = <span class="number">0</span></span><br><span class="line"><span class="keyword">elif</span> age &lt; <span class="number">18</span>:</span><br><span class="line">price = <span class="number">5</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">price = <span class="number">10</span></span><br><span class="line">print(<span class="string">"Your admission cost is $"</span> + str(price) + <span class="string">"."</span>)</span><br></pre></td></tr></table></figure><p>输出结果如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Your admission cost <span class="keyword">is</span> $<span class="number">5.</span></span><br></pre></td></tr></table></figure><h1 id="4-3-1-使用多个-elif-代码块"><a href="#4-3-1-使用多个-elif-代码块" class="headerlink" title=" - 4.3.1 使用多个 elif 代码块 "></a><font color="#FF0000"> - 4.3.1 使用多个 elif 代码块 </font></h1> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">age = <span class="number">20</span></span><br><span class="line"><span class="keyword">if</span> age &lt; <span class="number">4</span>:</span><br><span class="line">price = <span class="number">0</span></span><br><span class="line"><span class="keyword">elif</span> age &lt; <span class="number">18</span>:</span><br><span class="line">price = <span class="number">5</span></span><br><span class="line"><span class="keyword">elif</span> age &lt; <span class="number">65</span>:</span><br><span class="line">price = <span class="number">15</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">price = <span class="number">10</span></span><br><span class="line">print(<span class="string">"Your admission cost is $"</span> + str(price) + <span class="string">"."</span>)</span><br></pre></td></tr></table></figure><p>输出结果如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Your admission cost <span class="keyword">is</span> $<span class="number">15.</span></span><br></pre></td></tr></table></figure><h1 id="4-3-2-省略-else-代码块"><a href="#4-3-2-省略-else-代码块" class="headerlink" title=" - 4.3.2 省略 else 代码块 "></a><font color="#FF0000"> - 4.3.2 省略 else 代码块 </font></h1><p> Python并不要求 if-elif 结构后面必须有 else 代码块：<br> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">age = <span class="number">20</span></span><br><span class="line"><span class="keyword">if</span> age &lt; <span class="number">4</span>:</span><br><span class="line">price = <span class="number">0</span></span><br><span class="line"><span class="keyword">elif</span> age &lt; <span class="number">18</span>:</span><br><span class="line">price = <span class="number">5</span></span><br><span class="line"><span class="keyword">elif</span> age &lt; <span class="number">65</span>:</span><br><span class="line">price = <span class="number">15</span></span><br><span class="line"><span class="keyword">elif</span> age &gt;= <span class="number">65</span>:</span><br><span class="line">price = <span class="number">10</span></span><br><span class="line">print(<span class="string">"Your admission cost is $"</span> + str(price) + <span class="string">"."</span>)</span><br></pre></td></tr></table></figure></p><p>输出结果仍与3.3.1一样</p><h1 id="4-4-测试多个条件"><a href="#4-4-测试多个条件" class="headerlink" title=" - 4.4 测试多个条件 "></a><font color="#FF0000"> - 4.4 测试多个条件 </font></h1><p> if-elif-else结构功能强大，但仅适用于只有一个条件满足的情况：遇到通过了的测试后，Python就会跳过余下的测试：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"> names = [<span class="string">'Zhangshan'</span> , <span class="string">'Wanger'</span>]</span><br><span class="line"><span class="keyword">if</span> <span class="string">'Zhangshan'</span> <span class="keyword">in</span> names:</span><br><span class="line">    print(<span class="string">"Zhangshan is here!"</span>)</span><br><span class="line"><span class="keyword">if</span> <span class="string">'Wanger'</span> <span class="keyword">in</span> names:</span><br><span class="line">    print(<span class="string">"Wanger is here!"</span>)</span><br><span class="line"><span class="keyword">if</span> <span class="string">'Xiaoming'</span> <span class="keyword">in</span> names:</span><br><span class="line">    print(<span class="string">"Xiaoming is here!"</span>)</span><br><span class="line">print(<span class="string">"All the students are here!"</span>)</span><br></pre></td></tr></table></figure><p>输出结果如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Zhangshan <span class="keyword">is</span> here!</span><br><span class="line">Wanger <span class="keyword">is</span> here!</span><br><span class="line">All the students are here!</span><br></pre></td></tr></table></figure><p>相同的程序，如果使用 if-elif-else 结构，代码将不能正确运行：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">names = [<span class="string">'Zhangshan'</span> , <span class="string">'Wanger'</span>]</span><br><span class="line"><span class="keyword">if</span> <span class="string">'Zhangshan'</span> <span class="keyword">in</span> names:</span><br><span class="line">    print(<span class="string">"Zhangshan is here!"</span>)</span><br><span class="line"><span class="keyword">elif</span> <span class="string">'Wanger'</span> <span class="keyword">in</span> names:</span><br><span class="line">    print(<span class="string">"Wanger is here!"</span>)</span><br><span class="line"><span class="keyword">elif</span> <span class="string">'Xiaoming'</span> <span class="keyword">in</span> names:</span><br><span class="line">    print(<span class="string">"Xiaoming is here!"</span>)</span><br><span class="line">print(<span class="string">"All the students are here!"</span>)</span><br></pre></td></tr></table></figure><p>输出结果如下：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Zhangshan <span class="keyword">is</span> here!</span><br><span class="line">All the students are here!</span><br></pre></td></tr></table></figure></p><font color="#FF000">总之，如果我们只想执行一个代码块，就使用 if-elif-else 结构；如果要运行多个代码块，就必须使用一系列独立的 if 语句！</font><h1 id="4-5-使用-if-语句处理列表"><a href="#4-5-使用-if-语句处理列表" class="headerlink" title=" - 4.5 使用 if 语句处理列表 "></a><font color="#FF0000"> - 4.5 使用 if 语句处理列表 </font></h1><h1 id="4-5-1-检查特殊元素"><a href="#4-5-1-检查特殊元素" class="headerlink" title=" - 4.5.1 检查特殊元素"></a><font color="#FF0000"> - 4.5.1 检查特殊元素</font></h1><p>对3.4例子改版，加入姓名 ‘Xiaoming’，当检索到Xiaoming时告诉他，他妈妈叫他回家吃饭<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">names = [<span class="string">'Zhangshan'</span> , <span class="string">'Wanger'</span> , <span class="string">'Xiaoming'</span>]</span><br><span class="line"><span class="keyword">for</span> name <span class="keyword">in</span> names:</span><br><span class="line">    <span class="keyword">if</span> name == <span class="string">'Xiaoming'</span>:</span><br><span class="line">        print(<span class="string">"Xiaoming,Your mother told you to go home for dinner!"</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        print(name +<span class="string">"is here!"</span>)</span><br><span class="line">print(<span class="string">"All the students are here!"</span>)</span><br></pre></td></tr></table></figure></p><p>输出结果如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Zhangshanis here!</span><br><span class="line">Wangeris here!</span><br><span class="line">Xiaoming,Your mother told you to go home <span class="keyword">for</span> dinner!</span><br><span class="line">All the students are here!</span><br></pre></td></tr></table></figure><h1 id="4-5-2-确定列表不是空的"><a href="#4-5-2-确定列表不是空的" class="headerlink" title=" - 4.5.2 确定列表不是空的"></a><font color="#FF0000"> - 4.5.2 确定列表不是空的</font></h1><p>  在检索姓名前检查姓名是否为空，不为空则打印出所有姓名，为空则提示没有姓名：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">names = []</span><br><span class="line"><span class="keyword">if</span> names:</span><br><span class="line">    <span class="keyword">for</span> name <span class="keyword">in</span> names:</span><br><span class="line">        print(name +<span class="string">" is here!"</span>)</span><br><span class="line">    print(<span class="string">"All the students are here!"</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    print(<span class="string">"There is no students!"</span>)</span><br></pre></td></tr></table></figure><p>输出结果如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">There <span class="keyword">is</span> no students!</span><br></pre></td></tr></table></figure><font color="#FF000">在if语句中将列表名用在条件表达式中时，Python将在列表至少包含一个元素时返回Ture，并在列表为空时返回False</font><h1 id="4-5-3-使用多个列表"><a href="#4-5-3-使用多个列表" class="headerlink" title=" - 4.5.3 使用多个列表"></a><font color="#FF0000"> - 4.5.3 使用多个列表</font></h1><p>  两个列表names_1和names_2，要求输出既在names_2中又在names_1中的元素：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">names_1 = [<span class="string">'Zhangshan'</span> , <span class="string">'Liyang'</span>  , <span class="string">'Wanger'</span> , <span class="string">'Tangyang'</span> , <span class="string">'Xiaoming'</span>]</span><br><span class="line">names_2 = [<span class="string">'Liyang'</span> , <span class="string">'Zhangwei'</span> , <span class="string">'Tangyang'</span>]</span><br><span class="line"><span class="keyword">for</span> names <span class="keyword">in</span> names_2:</span><br><span class="line">    <span class="keyword">if</span> names <span class="keyword">in</span> names_1:</span><br><span class="line">        print(names +<span class="string">" is here!"</span>)</span><br><span class="line">print(<span class="string">"All the students are here!"</span>)</span><br></pre></td></tr></table></figure><p>输出结果如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Liyang <span class="keyword">is</span> here!</span><br><span class="line">Tangyang <span class="keyword">is</span> here!</span><br><span class="line">All the students are here!</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Python3 学习笔记 </category>
          
          <category> 基础学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> if语句 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python3 基础学习笔记 C03</title>
      <link href="/2018/10/11/A09-Python3-basic-C03/"/>
      <url>/2018/10/11/A09-Python3-basic-C03/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><blockquote><center><font color="#1BC3FB" size="4">Python3 基础学习笔记第三章 —— 【操作列表】</font></center></blockquote><a id="more"></a><hr><h1 id="3-1遍历整个列表"><a href="#3-1遍历整个列表" class="headerlink" title=" - 3.1遍历整个列表 "></a><font color="#FF0000"> - 3.1遍历整个列表 </font></h1><p> 使用 for 循环来遍历整个列表：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">names = [<span class="string">'alice'</span> , <span class="string">'david'</span> , <span class="string">'liwei'</span>]</span><br><span class="line"><span class="keyword">for</span> name <span class="keyword">in</span> names:</span><br><span class="line">print(name)</span><br></pre></td></tr></table></figure><p> 输出结果如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">alice</span><br><span class="line">david</span><br><span class="line">liwei</span><br></pre></td></tr></table></figure><p>for循环让Python从列表names中取出一个名字，并将其储存在变量name中，最后  让Python打印前面储存到变量name中的名字，对于列表中的每个名字，Python都将 重复执行后两行代码，将列表names中的每个名字都打印出来</p><h1 id="3-1-1在for循环中执行更多的操作"><a href="#3-1-1在for循环中执行更多的操作" class="headerlink" title="- 3.1.1在for循环中执行更多的操作 "></a><font color="#FF0000">- 3.1.1在for循环中执行更多的操作 </font></h1><p>在for循环中，可对每个元素执行任何操作，下面对前面的示例进行扩展：</p><p>例一：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">names = [<span class="string">'alice'</span> , <span class="string">'david'</span> , <span class="string">'liwei'</span>]</span><br><span class="line"><span class="keyword">for</span> name <span class="keyword">in</span> names:</span><br><span class="line">print(name.title() + <span class="string">", that was a good man!"</span>)</span><br></pre></td></tr></table></figure></p><p>输出结果如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Alice, that was a good man!</span><br><span class="line">David, that was a good man!</span><br><span class="line">Liwei, that was a good man!</span><br></pre></td></tr></table></figure><p>例二：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">names = [<span class="string">'alice'</span> , <span class="string">'david'</span> , <span class="string">'liwei'</span>]</span><br><span class="line"><span class="keyword">for</span> name <span class="keyword">in</span> names:</span><br><span class="line">print(name.title() + <span class="string">", that was a good man!"</span>)</span><br><span class="line">print(<span class="string">"I can't wait to see you again,"</span> + name.title() + <span class="string">".\n"</span>)</span><br><span class="line">print(<span class="string">"Nice to meet you!"</span>)</span><br></pre></td></tr></table></figure><p>输出结果如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">Alice, that was a good man!</span><br><span class="line">I can<span class="string">'t wait to see you again,Alice.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">David, that was a good man!</span></span><br><span class="line"><span class="string">I can'</span>t wait to see you again,David.</span><br><span class="line"></span><br><span class="line">Liwei, that was a good man!</span><br><span class="line">I can<span class="string">'t wait to see you again,Liwei.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Nice to meet you!</span></span><br></pre></td></tr></table></figure><h1 id="3-2-range-函数"><a href="#3-2-range-函数" class="headerlink" title="- 3.2 range()函数 "></a><font color="#FF0000">- 3.2 range()函数 </font></h1><blockquote><p>Python使用range()函数能够轻松地生成一系列的数字</p></blockquote><blockquote><p>Python3 range() 函数返回的是一个可迭代对象（类型是对象），而不是列表类型， 所以打印的时候不会打印列表；</p></blockquote><blockquote><p>Python3 list() 函数是对象迭代器，可以把range()返回的可迭代对象转为一个列表，返回的变量类型为列表；</p></blockquote><blockquote><p>Python2 range() 函数返回的是列表</p></blockquote><p>例一：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">5</span>):</span><br><span class="line">print(i)</span><br></pre></td></tr></table></figure></p><p>输出结果如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span></span><br><span class="line"><span class="number">2</span></span><br><span class="line"><span class="number">3</span></span><br><span class="line"><span class="number">4</span></span><br></pre></td></tr></table></figure><p>例二：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">5</span>):</span><br><span class="line">print(i)</span><br></pre></td></tr></table></figure></p><p>输出结果如下：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">0</span></span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="number">2</span></span><br><span class="line"><span class="number">3</span></span><br><span class="line"><span class="number">4</span></span><br></pre></td></tr></table></figure></p><p>例三：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>list(range(<span class="number">5</span>))</span><br><span class="line">[<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>list(range(<span class="number">0</span>))</span><br><span class="line">[]</span><br><span class="line">&gt;&gt;&gt;list(range(<span class="number">0</span>, <span class="number">30</span>, <span class="number">5</span>))</span><br><span class="line">[<span class="number">0</span>, <span class="number">5</span>, <span class="number">10</span>, <span class="number">15</span>, <span class="number">20</span>, <span class="number">25</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>list(range(<span class="number">0</span>, <span class="number">10</span>, <span class="number">2</span>))</span><br><span class="line">[<span class="number">0</span>, <span class="number">2</span>, <span class="number">4</span>, <span class="number">6</span>, <span class="number">8</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>list(range(<span class="number">0</span>, <span class="number">-10</span>, <span class="number">-1</span>))</span><br><span class="line">[<span class="number">0</span>, <span class="number">-1</span>, <span class="number">-2</span>, <span class="number">-3</span>, <span class="number">-4</span>, <span class="number">-5</span>, <span class="number">-6</span>, <span class="number">-7</span>, <span class="number">-8</span>, <span class="number">-9</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>list(range(<span class="number">1</span>, <span class="number">0</span>))</span><br><span class="line">[]</span><br></pre></td></tr></table></figure></p><p>例四：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">squares = []</span><br><span class="line"><span class="keyword">for</span> value <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">11</span>):</span><br><span class="line">square = value ** <span class="number">2</span></span><br><span class="line">squares.append(square)</span><br><span class="line">print(squares)</span><br></pre></td></tr></table></figure><p>输出结果如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[<span class="number">1</span>, <span class="number">4</span>, <span class="number">9</span>, <span class="number">16</span>, <span class="number">25</span>, <span class="number">36</span>, <span class="number">49</span>, <span class="number">64</span>, <span class="number">81</span>, <span class="number">100</span>]</span><br></pre></td></tr></table></figure><h1 id="3-2-1-对数字列表执行简单的统计计算"><a href="#3-2-1-对数字列表执行简单的统计计算" class="headerlink" title="- 3.2.1 对数字列表执行简单的统计计算 "></a><font color="#FF0000">- 3.2.1 对数字列表执行简单的统计计算 </font></h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>digits = [<span class="number">1</span>, <span class="number">2</span> , <span class="number">3</span> , <span class="number">4</span> , <span class="number">5</span> , <span class="number">6</span> , <span class="number">7</span> , <span class="number">8</span> , <span class="number">9</span> , <span class="number">0</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>min(digits)</span><br><span class="line"><span class="number">0</span></span><br><span class="line">&gt;&gt;&gt;max(digits)</span><br><span class="line"><span class="number">9</span></span><br><span class="line">&gt;&gt;&gt;sum(digits)</span><br><span class="line"><span class="number">45</span></span><br></pre></td></tr></table></figure><h1 id="3-2-2-列表解析"><a href="#3-2-2-列表解析" class="headerlink" title="- 3.2.2 列表解析 "></a><font color="#FF0000">- 3.2.2 列表解析 </font></h1><p> 列表解析能够让比如3.2中的例四更加简化，只需要一行代码就能生成这样的列表，列表解析将for循环和创建新元素的代码合并成一行，并自动附加新元素：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">squares = [value ** <span class="number">2</span> <span class="keyword">for</span> value <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">11</span>)]</span><br><span class="line">print(squares)</span><br></pre></td></tr></table></figure><p>在这个示例中，for循环为for value in range(1,11)，它将值1~10提供给表达式value ** 2<br>输出结果如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[<span class="number">1</span>, <span class="number">4</span>, <span class="number">9</span>, <span class="number">16</span>, <span class="number">25</span>, <span class="number">36</span>, <span class="number">49</span>, <span class="number">64</span>, <span class="number">81</span>, <span class="number">100</span>]</span><br></pre></td></tr></table></figure><h1 id="3-3-使用列表的一部分"><a href="#3-3-使用列表的一部分" class="headerlink" title="- 3.3 使用列表的一部分 "></a><font color="#FF0000">- 3.3 使用列表的一部分 </font></h1><p> 处理列表的部分元素——Python称之为切片</p><h1 id="3-3-1-切片"><a href="#3-3-1-切片" class="headerlink" title="- 3.3.1 切片 "></a><font color="#FF0000">- 3.3.1 切片 </font></h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">list = [<span class="string">'a'</span>,<span class="string">'b'</span>,<span class="string">'c'</span>,<span class="string">'d'</span>,<span class="string">'e'</span>,<span class="string">'f'</span>]</span><br><span class="line">print(list[:])     <span class="comment">#省略全部，代表截取全部内容，可以用来将一个列表拷给另一个列表</span></span><br><span class="line">print(list[:<span class="number">3</span>])     <span class="comment">#省略起始位置的索引，默认起始位置从头开始，结束位置索引为2</span></span><br><span class="line">print(list[<span class="number">3</span>:])     <span class="comment">#省略结束位置的索引，默认结束位置为最后一个，开始位置索引为3</span></span><br><span class="line">print(list[<span class="number">1</span>:<span class="number">4</span>])    <span class="comment">#开始位置索引为1，结束位置索引为3，顾头不顾尾</span></span><br><span class="line">print(list[<span class="number">4</span>:<span class="number">1</span>])    <span class="comment">#从左到右索引，因此为空值</span></span><br><span class="line">print(list[<span class="number">-1</span>:<span class="number">-3</span>])   <span class="comment">#从左到右索引，因此为空值</span></span><br><span class="line">print(list[<span class="number">-3</span>:<span class="number">-1</span>])   <span class="comment">#开始位置索引为倒数第三个，结束位置索引为倒数第二个</span></span><br><span class="line">print(list[<span class="number">1</span>:<span class="number">5</span>:<span class="number">2</span>])   <span class="comment">#开始位置索引为1，结束位置索引为4，间隔2</span></span><br><span class="line">print(list[<span class="number">5</span>:<span class="number">1</span>:<span class="number">-1</span>])   <span class="comment">#反向取值，开始位置索引为5，结束位置索引为2</span></span><br><span class="line">print(list[::<span class="number">-1</span>])    <span class="comment">#反向取值，反向输出列表</span></span><br></pre></td></tr></table></figure><h1 id="3-3-2-遍历列表"><a href="#3-3-2-遍历列表" class="headerlink" title="- 3.3.2 遍历列表 "></a><font color="#FF0000">- 3.3.2 遍历列表 </font></h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">players = [<span class="string">'charles'</span> , <span class="string">'martina'</span> , <span class="string">'michael'</span> , <span class="string">'florence'</span> , <span class="string">'eli'</span>]</span><br><span class="line">print(<span class="string">"Here are the first three players on my team:"</span>)</span><br><span class="line"><span class="keyword">for</span> player <span class="keyword">in</span> players[:<span class="number">3</span>]:</span><br><span class="line">print(player.title())</span><br></pre></td></tr></table></figure><p>输出结果如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Here are the first three players on my team:</span><br><span class="line">Charles</span><br><span class="line">Martina</span><br><span class="line">Michael</span><br></pre></td></tr></table></figure><h1 id="3-3-3-复制列表"><a href="#3-3-3-复制列表" class="headerlink" title="- 3.3.3 复制列表 "></a><font color="#FF0000">- 3.3.3 复制列表 </font></h1><p>要复制列表，可以创建一个包含整个列表的切片，方法是同时省略起始索引和终止索引<code>（[:]）</code>，这让Python创建一个始于第一个元素，终止于最后一个元素的切片，即复制整个列表：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">my_foods = [<span class="string">'pizza'</span> , <span class="string">'falafel'</span> , <span class="string">'carrot cake'</span>]</span><br><span class="line">friend_foods = my_foods[:]</span><br><span class="line">print(<span class="string">"My favorite foods are:"</span>)</span><br><span class="line">print(my_foods)</span><br><span class="line">print(<span class="string">"\nMy friend's favorite foods are:"</span>)</span><br><span class="line">print(friend_foods)</span><br></pre></td></tr></table></figure><p>输出结果如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">My favorite foods are:</span><br><span class="line">[<span class="string">'pizza'</span>, <span class="string">'falafel'</span>, <span class="string">'carrot cake'</span>]</span><br><span class="line"></span><br><span class="line">My friend<span class="string">'s favorite foods are:</span></span><br><span class="line"><span class="string">['</span>pizza<span class="string">', '</span>falafel<span class="string">', '</span>carrot cake<span class="string">']</span></span><br></pre></td></tr></table></figure><p>为核实我们的确有两个列表，下面在每个列表中都添加一种食品，并核实每个列表都记录了相应人员喜欢的食品：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">my_foods = [<span class="string">'pizza'</span> , <span class="string">'falafel'</span> , <span class="string">'carrot cake'</span>]</span><br><span class="line">friend_foods = my_foods[:]</span><br><span class="line"></span><br><span class="line">my_foods.append(<span class="string">'cannoli'</span>)</span><br><span class="line">friend_foods.append(<span class="string">'ice cream'</span>)</span><br><span class="line"></span><br><span class="line">print(<span class="string">"My favorite foods are:"</span>)</span><br><span class="line">print(my_foods)</span><br><span class="line">print(<span class="string">"\nMy friend's favorite foods are:"</span>)</span><br><span class="line">print(friend_foods)</span><br></pre></td></tr></table></figure></p><p>输出结果如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">My favorite foods are:</span><br><span class="line">[<span class="string">'pizza'</span>, <span class="string">'falafel'</span>, <span class="string">'carrot cake'</span>, <span class="string">'cannoli'</span>]</span><br><span class="line"></span><br><span class="line">My friend<span class="string">'s favorite foods are:</span></span><br><span class="line"><span class="string">['</span>pizza<span class="string">', '</span>falafel<span class="string">', '</span>carrot cake<span class="string">', '</span>ice cream<span class="string">']</span></span><br></pre></td></tr></table></figure><p>输出结果表明，’cannoli’包含在我喜欢的食品列表中，而’ice cream’没有；’ice cream’包含在我朋友喜欢的食品中，而’cannoli’没有，假如我们只是简单的将my_foods赋给friend_foods，就不能得到两个列表。下面是错误示例：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">my_foods = [<span class="string">'pizza'</span> , <span class="string">'falafel'</span> , <span class="string">'carrot cake'</span>]</span><br><span class="line">friend_foods = my_foods    <span class="comment">#错误写法</span></span><br><span class="line"></span><br><span class="line">my_foods.append(<span class="string">'cannoli'</span>)</span><br><span class="line">friend_foods.append(<span class="string">'ice cream'</span>)</span><br><span class="line"></span><br><span class="line">print(<span class="string">"My favorite foods are:"</span>)</span><br><span class="line">print(my_foods)</span><br><span class="line">print(<span class="string">"\nMy friend's favorite foods are:"</span>)</span><br><span class="line">print(friend_foods)</span><br></pre></td></tr></table></figure><p>错误示例输出结果如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">My favorite foods are:</span><br><span class="line">[<span class="string">'pizza'</span>, <span class="string">'falafel'</span>, <span class="string">'carrot cake'</span>, <span class="string">'cannoli'</span>, <span class="string">'ice cream'</span>]</span><br><span class="line"></span><br><span class="line">My friend<span class="string">'s favorite foods are:</span></span><br><span class="line"><span class="string">['</span>pizza<span class="string">', '</span>falafel<span class="string">', '</span>carrot cake<span class="string">', '</span>cannoli<span class="string">', '</span>ice cream<span class="string">']</span></span><br></pre></td></tr></table></figure><h1 id="3-4-元组"><a href="#3-4-元组" class="headerlink" title="- 3.4 元组 "></a><font color="#FF0000">- 3.4 元组 </font></h1><p> Python将不能修改的值称为不可变的，而不可变的列表被称为元组</p><h1 id="3-4-1-定义元组"><a href="#3-4-1-定义元组" class="headerlink" title="- 3.4.1 定义元组 "></a><font color="#FF0000">- 3.4.1 定义元组 </font></h1><p>  元组看起来就像是列表，但元组使用圆括号而不是方括号来标识，定义元组后，就可以使用索引来访问其元素，就像访问列表元素一样：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">dimensions = (<span class="number">200</span>,<span class="number">50</span>)</span><br><span class="line">print(dimensions[<span class="number">0</span>])</span><br><span class="line">print(dimensions[<span class="number">1</span>])</span><br></pre></td></tr></table></figure><p>  输出结果如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">200</span></span><br><span class="line"><span class="number">50</span></span><br></pre></td></tr></table></figure><p>如果尝试修改元组中元素的值，将会导致Python返回类型错误消息，由于试图修改元组的操作是被禁止的，因此Python指出不能给元组的元素赋值：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">dimensions = (<span class="number">200</span>,<span class="number">50</span>)</span><br><span class="line">dimensions[<span class="number">0</span>] = <span class="number">300</span></span><br></pre></td></tr></table></figure><p>  将会报错：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">"dimensions.py"</span>, line <span class="number">2</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">    dimensions[<span class="number">0</span>] = <span class="number">300</span></span><br><span class="line">TypeError: <span class="string">'tuple'</span> object does <span class="keyword">not</span> support item assignment</span><br></pre></td></tr></table></figure><h1 id="3-4-2-遍历元组中所有的值"><a href="#3-4-2-遍历元组中所有的值" class="headerlink" title="- 3.4.2 遍历元组中所有的值 "></a><font color="#FF0000">- 3.4.2 遍历元组中所有的值 </font></h1><p>  像列表一样，元组也可以使用for循环来遍历元组中的所有值：</p><p>例一：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">dimensions = (<span class="number">200</span>,<span class="number">100</span>,<span class="number">50</span>,<span class="number">6</span>)</span><br><span class="line"><span class="keyword">for</span> dimension <span class="keyword">in</span> dimensions:</span><br><span class="line">print(dimension)</span><br></pre></td></tr></table></figure></p><p>输出结果如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">200</span></span><br><span class="line"><span class="number">100</span></span><br><span class="line"><span class="number">50</span></span><br><span class="line"><span class="number">6</span></span><br></pre></td></tr></table></figure><p>例二：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">dimensions = (<span class="number">200</span>,<span class="number">100</span>,<span class="number">50</span>,<span class="number">6</span>)</span><br><span class="line"><span class="keyword">for</span> dimension <span class="keyword">in</span> dimensions[:<span class="number">3</span>]:</span><br><span class="line">print(dimension)</span><br></pre></td></tr></table></figure><p>输出结果如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">200</span></span><br><span class="line"><span class="number">100</span></span><br><span class="line"><span class="number">50</span></span><br></pre></td></tr></table></figure><h1 id="3-4-3-修改元组变量"><a href="#3-4-3-修改元组变量" class="headerlink" title="- 3.4.3 修改元组变量 "></a><font color="#FF0000">- 3.4.3 修改元组变量 </font></h1><p>  虽然不能修改元组元素，但是可以给储存元组的变量赋值：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">dimensions = (<span class="number">200</span>,<span class="number">50</span>)</span><br><span class="line">print(<span class="string">"Original dimensions:"</span>)</span><br><span class="line"><span class="keyword">for</span> dimension <span class="keyword">in</span> dimensions:</span><br><span class="line">print(dimension)</span><br><span class="line"></span><br><span class="line">dimensions = (<span class="number">400</span>,<span class="number">100</span>)</span><br><span class="line">print(<span class="string">"\nModified dimensions:"</span>)</span><br><span class="line"><span class="keyword">for</span> dimension <span class="keyword">in</span> dimensions:</span><br><span class="line">print(dimension)</span><br></pre></td></tr></table></figure><p>输出结果如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Original dimensions:</span><br><span class="line"><span class="number">200</span></span><br><span class="line"><span class="number">50</span></span><br><span class="line"></span><br><span class="line">Modified dimensions:</span><br><span class="line"><span class="number">400</span></span><br><span class="line"><span class="number">100</span></span><br></pre></td></tr></table></figure><p>我们首先定义了一个元组，并将其储存的尺寸打印了出来；然后将一个新元组储存到变量dimensions中，打印新的尺寸；相比于列表，元组是更简单的数据结构。如果需要储存的一组值在程序的整个生命周期内都不变，可使用元组</p>]]></content>
      
      
      <categories>
          
          <category> Python3 学习笔记 </category>
          
          <category> 基础学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 操作列表 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python3 基础学习笔记 C02</title>
      <link href="/2018/09/16/A08-Python3-basic-C02/"/>
      <url>/2018/09/16/A08-Python3-basic-C02/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><blockquote><center><font color="#1BC3FB" size="4">Python3 基础学习笔记第二章 —— 【列表】</font></center></blockquote><a id="more"></a><hr><h1 id="2-1列表是什么"><a href="#2-1列表是什么" class="headerlink" title=" - 2.1列表是什么 "></a><font color="#FF0000"> - 2.1列表是什么 </font></h1><p> 列表由一系列按特定顺序的元素组成，在 Python 中用方括号（ [ ] ）来表示列表，并用逗号来分隔其中的元素，例：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">list1 = [<span class="string">'a'</span>,<span class="string">'b'</span>,<span class="string">'c'</span>,<span class="string">'d'</span>,<span class="string">'e'</span>,<span class="string">'f'</span>]</span><br><span class="line">list2 = [<span class="string">'abc'</span>, <span class="string">'xyz'</span>, <span class="number">2018</span>, <span class="number">2020</span>]</span><br><span class="line">list3 = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span> ,<span class="number">6</span>]</span><br><span class="line">list4 = [<span class="string">"a"</span>, <span class="string">"b"</span>, <span class="string">"c"</span>, <span class="string">"d"</span>]</span><br><span class="line">print(list1, list2, list3 ,list4)</span><br></pre></td></tr></table></figure><p> 输出结果如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>, <span class="string">'d'</span>, <span class="string">'e'</span>, <span class="string">'f'</span>] [<span class="string">'abc'</span>, <span class="string">'xyz'</span>, <span class="number">2018</span>, <span class="number">2020</span>] [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>] [<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>, <span class="string">'d'</span>]</span><br></pre></td></tr></table></figure><h1 id="2-1-1访问列表元素"><a href="#2-1-1访问列表元素" class="headerlink" title=" - 2.1.1访问列表元素 "></a><font color="#FF0000"> - 2.1.1访问列表元素 </font></h1><p> 列表是有序集合，因此要访问列表的元素，只需要将该元素的位置或索引告诉Python即可，<font color="#FF0000">注意：在Python中的第一个列表元素的索引为0，而不是1</font></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">list = [<span class="string">'a'</span>,<span class="string">'b'</span>,<span class="string">'c'</span>,<span class="string">'d'</span>,<span class="string">'e'</span>,<span class="string">'f'</span>]</span><br><span class="line">print(list[<span class="number">0</span>])</span><br><span class="line">print(list[<span class="number">3</span>])</span><br><span class="line">print(list[<span class="number">-1</span>])   <span class="comment">#Python为访问最后一个列表元素提供了一种特殊语法，通过将索引指定为-1，可以让Python返回最后一个列表元素</span></span><br><span class="line">print(list[<span class="number">-3</span>])</span><br></pre></td></tr></table></figure><p>输出结果如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">a</span><br><span class="line">d</span><br><span class="line">f</span><br><span class="line">d</span><br></pre></td></tr></table></figure><h1 id="2-1-2列表切片"><a href="#2-1-2列表切片" class="headerlink" title=" - 2.1.2列表切片 "></a><font color="#FF0000"> - 2.1.2列表切片 </font></h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">list = [<span class="string">'a'</span>,<span class="string">'b'</span>,<span class="string">'c'</span>,<span class="string">'d'</span>,<span class="string">'e'</span>,<span class="string">'f'</span>]</span><br><span class="line">print(list[:])     <span class="comment">#省略全部，代表截取全部内容，可以用来将一个列表拷给另一个列表</span></span><br><span class="line">print(list[:<span class="number">3</span>])     <span class="comment">#省略起始位置的索引，默认起始位置从头开始，结束位置索引为2</span></span><br><span class="line">print(list[<span class="number">3</span>:])     <span class="comment">#省略结束位置的索引，默认结束位置为最后一个，开始位置索引为3</span></span><br><span class="line">print(list[<span class="number">1</span>:<span class="number">4</span>])    <span class="comment">#开始位置索引为1，结束位置索引为3，顾头不顾尾</span></span><br><span class="line">print(list[<span class="number">4</span>:<span class="number">1</span>])    <span class="comment">#从左到右索引，因此为空值</span></span><br><span class="line">print(list[<span class="number">-1</span>:<span class="number">-3</span>])   <span class="comment">#从左到右索引，因此为空值</span></span><br><span class="line">print(list[<span class="number">-3</span>:<span class="number">-1</span>])   <span class="comment">#开始位置索引为倒数第三个，结束位置索引为倒数第二个</span></span><br><span class="line">print(list[<span class="number">1</span>:<span class="number">5</span>:<span class="number">2</span>])   <span class="comment">#开始位置索引为1，结束位置索引为4，间隔2</span></span><br><span class="line">print(list[<span class="number">5</span>:<span class="number">1</span>:<span class="number">-1</span>])   <span class="comment">#反向取值，开始位置索引为5，结束位置索引为2</span></span><br><span class="line">print(list[::<span class="number">-1</span>])    <span class="comment">#反向取值，反向输出列表</span></span><br></pre></td></tr></table></figure><p>输出结果如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">[<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>, <span class="string">'d'</span>, <span class="string">'e'</span>, <span class="string">'f'</span>]</span><br><span class="line">[<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>]</span><br><span class="line">[<span class="string">'d'</span>, <span class="string">'e'</span>, <span class="string">'f'</span>]</span><br><span class="line">[<span class="string">'b'</span>, <span class="string">'c'</span>, <span class="string">'d'</span>]</span><br><span class="line">[]</span><br><span class="line">[]</span><br><span class="line">[<span class="string">'d'</span>, <span class="string">'e'</span>]</span><br><span class="line">[<span class="string">'b'</span>, <span class="string">'d'</span>]</span><br><span class="line">[<span class="string">'f'</span>, <span class="string">'e'</span>, <span class="string">'d'</span>, <span class="string">'c'</span>]</span><br><span class="line">[<span class="string">'f'</span>, <span class="string">'e'</span>, <span class="string">'d'</span>, <span class="string">'c'</span>, <span class="string">'b'</span>, <span class="string">'a'</span>]</span><br></pre></td></tr></table></figure><h1 id="2-1-3使用列表中的各个值"><a href="#2-1-3使用列表中的各个值" class="headerlink" title=" - 2.1.3使用列表中的各个值 "></a><font color="#FF0000"> - 2.1.3使用列表中的各个值 </font></h1><p> 可像使用其他变量一样使用列表中的各个值，例如，我们可以使用拼接根据列表中的值来创建消息：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">list = [<span class="string">'python'</span>, <span class="string">'c'</span>, <span class="string">'c++'</span>, <span class="string">'java'</span>, <span class="string">'php'</span>]</span><br><span class="line">message = <span class="string">"My favorite language is "</span> + list[<span class="number">0</span>].title() + <span class="string">"!"</span></span><br><span class="line">print(message)</span><br></pre></td></tr></table></figure><p>输出结果如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">My favorite language <span class="keyword">is</span> Python!</span><br></pre></td></tr></table></figure><h1 id="2-1-4修改元素"><a href="#2-1-4修改元素" class="headerlink" title=" - 2.1.4修改元素 "></a><font color="#FF0000"> - 2.1.4修改元素 </font></h1><p> 修改列表元素的语法与访问列表元素的语法类似，要修改列表元素，可指定列表名和要修改的元素的索引，再次指定该元素的新值：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">names = [<span class="string">'zhangsan'</span>, <span class="string">'lishi'</span>, <span class="string">'wanger'</span>, <span class="string">'liming'</span>, <span class="string">'xiaowang'</span>]</span><br><span class="line">print(names)</span><br><span class="line">names[<span class="number">1</span>] = <span class="string">'lifang'</span></span><br><span class="line">print(names)</span><br></pre></td></tr></table></figure><p>输出结果如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[<span class="string">'zhangsan'</span>, <span class="string">'lishi'</span>, <span class="string">'wanger'</span>, <span class="string">'liming'</span>, <span class="string">'xiaowang'</span>]</span><br><span class="line">[<span class="string">'zhangsan'</span>, <span class="string">'lifang'</span>, <span class="string">'wanger'</span>, <span class="string">'liming'</span>, <span class="string">'xiaowang'</span>]</span><br></pre></td></tr></table></figure><h1 id="2-1-5添加元素"><a href="#2-1-5添加元素" class="headerlink" title=" - 2.1.5添加元素 "></a><font color="#FF0000"> - 2.1.5添加元素 </font></h1> <font color="#FF0000"> - 使用方法 append() 在列表末尾添加元素 </font><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">list = [<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>, <span class="string">'d'</span>, <span class="string">'e'</span>, <span class="string">'f'</span>]</span><br><span class="line">print(list)</span><br><span class="line">list.append(<span class="string">'g'</span>)</span><br><span class="line">print(list)</span><br></pre></td></tr></table></figure><br><br>输出结果如下：<br><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>, <span class="string">'d'</span>, <span class="string">'e'</span>, <span class="string">'f'</span>]</span><br><span class="line">[<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>, <span class="string">'d'</span>, <span class="string">'e'</span>, <span class="string">'f'</span>, <span class="string">'g'</span>]</span><br></pre></td></tr></table></figure><br><br> <font color="#FF0000"> - 使用方法 insert() 在列表指定位置添加元素 </font> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">list = [<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>, <span class="string">'d'</span>, <span class="string">'e'</span>, <span class="string">'f'</span>]</span><br><span class="line">print(list)</span><br><span class="line">list.insert(<span class="number">2</span>,<span class="string">"h"</span>)    <span class="comment">#其中括号里的数字表示要插入的位置，此后面的元素将右移一个位置</span></span><br><span class="line">print(list)</span><br></pre></td></tr></table></figure><p>输出结果如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>, <span class="string">'d'</span>, <span class="string">'e'</span>, <span class="string">'f'</span>]</span><br><span class="line">[<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'h'</span>, <span class="string">'c'</span>, <span class="string">'d'</span>, <span class="string">'e'</span>, <span class="string">'f'</span>, <span class="string">'g'</span>]</span><br></pre></td></tr></table></figure><h1 id="2-1-6删除元素"><a href="#2-1-6删除元素" class="headerlink" title=" - 2.1.6删除元素 "></a><font color="#FF0000"> - 2.1.6删除元素 </font></h1><font color="#FF0000"> - 使用 del 语句删除元素 </font><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">list = [<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>, <span class="string">'d'</span>, <span class="string">'e'</span>, <span class="string">'f'</span>]</span><br><span class="line">print(list)</span><br><span class="line"><span class="keyword">del</span> list[<span class="number">3</span>]</span><br><span class="line">print(list)</span><br></pre></td></tr></table></figure><p>输出结果如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">list = [<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>, <span class="string">'d'</span>, <span class="string">'e'</span>, <span class="string">'f'</span>]</span><br><span class="line">list = [<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>, <span class="string">'e'</span>, <span class="string">'f'</span>]</span><br></pre></td></tr></table></figure><font color="#FF0000"> - 使用方法 pop() 删除最后一个元素</font><br>方法 pop() 可以删除列表末尾的元素，并让你能够接着使用它。术语<font color="#FF0000">弹出（pop）</font>源自这样的类比：列表就像是一个栈，而删除列表末尾的元素就相当于弹出栈顶元素：<br><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">list = [<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>, <span class="string">'d'</span>, <span class="string">'e'</span>, <span class="string">'f'</span>]</span><br><span class="line">print(list)</span><br><span class="line">new_list = list.pop()</span><br><span class="line">print(list)</span><br><span class="line">print(new_list)</span><br></pre></td></tr></table></figure><br><br>输出结果如下：<br><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>, <span class="string">'d'</span>, <span class="string">'e'</span>, <span class="string">'f'</span>]</span><br><span class="line">[<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>, <span class="string">'d'</span>, <span class="string">'e'</span>]</span><br><span class="line">f</span><br></pre></td></tr></table></figure><br><br><font color="#FF0000"> - 使用方法 pop() 删除任意位置元素</font><br>可以使用 pop() 来删除列表中任何位置的元素，只需要在括号中指定要删除的元素的索引即可：<br><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">list = [<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>, <span class="string">'d'</span>, <span class="string">'e'</span>, <span class="string">'f'</span>]</span><br><span class="line">print(list)</span><br><span class="line">new_list = list.pop(<span class="number">1</span>)</span><br><span class="line">print(list)</span><br><span class="line">print(new_list)</span><br></pre></td></tr></table></figure><br><br>输出结果如下：<br><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>, <span class="string">'d'</span>, <span class="string">'e'</span>, <span class="string">'f'</span>]</span><br><span class="line">[<span class="string">'a'</span>, <span class="string">'c'</span>, <span class="string">'d'</span>, <span class="string">'e'</span>, <span class="string">'f'</span>]</span><br><span class="line">b</span><br></pre></td></tr></table></figure><br><br><font color="#FF0000"> - 使用方法 remove() 删除未知位置元素</font><br>当我们不知道元素的位置，只知道元素的值的时候，就可以使用方法 remove()<br><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">list = [<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>, <span class="string">'d'</span>, <span class="string">'e'</span>, <span class="string">'f'</span>]</span><br><span class="line">print(list)</span><br><span class="line">list.remove(<span class="string">'d'</span>)</span><br><span class="line">print(list)</span><br></pre></td></tr></table></figure><br><br>输出结果如下：<br><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>, <span class="string">'d'</span>, <span class="string">'e'</span>, <span class="string">'f'</span>]</span><br><span class="line">[<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>, <span class="string">'e'</span>, <span class="string">'f'</span>]</span><br></pre></td></tr></table></figure><br><br> # <font color="#FF0000"> - 2.1.7使用方法 index() 查找指定元素位置 </font><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">list = [<span class="string">"a"</span>, <span class="string">"b"</span>, <span class="string">"c"</span>, <span class="string">"d"</span>, <span class="string">"e"</span>, <span class="string">"a"</span>]</span><br><span class="line">print(list.index(<span class="string">'c'</span>))</span><br></pre></td></tr></table></figure><p>输出结果如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">2</span></span><br></pre></td></tr></table></figure><h1 id="2-1-8使用方法-count-统计指定元素数量"><a href="#2-1-8使用方法-count-统计指定元素数量" class="headerlink" title=" - 2.1.8使用方法 count() 统计指定元素数量 "></a><font color="#FF0000"> - 2.1.8使用方法 count() 统计指定元素数量 </font></h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">list = [<span class="string">"a"</span>, <span class="string">"b"</span>, <span class="string">"c"</span>, <span class="string">"d"</span>, <span class="string">"e"</span>, <span class="string">"a"</span>]</span><br><span class="line">print(list.count(<span class="string">'a'</span>))</span><br></pre></td></tr></table></figure><p>输出结果如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">2</span></span><br></pre></td></tr></table></figure><h1 id="2-1-9清空列表"><a href="#2-1-9清空列表" class="headerlink" title=" - 2.1.9清空列表 "></a><font color="#FF0000"> - 2.1.9清空列表 </font></h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">list = [<span class="string">"a"</span>, <span class="string">"b"</span>, <span class="string">"c"</span>, <span class="string">"d"</span>, <span class="string">"e"</span>, <span class="string">"a"</span>]</span><br><span class="line">list.clear()</span><br><span class="line">print(list)</span><br></pre></td></tr></table></figure><p>输出结果如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[]</span><br></pre></td></tr></table></figure><h1 id="2-2组织列表"><a href="#2-2组织列表" class="headerlink" title=" - 2.2组织列表 "></a><font color="#FF0000"> - 2.2组织列表 </font></h1><p>在创建的列表中，元素的排列顺序常常是无法预测的，因为我们并非总能控制用户提供数据的顺序。有时候，我们希望保留列表元素最初的排列顺序，而有时候又需要调整排列顺序。Python提供了很多组织列表的方式，可根据具体情况选用</p><h1 id="2-2-1使用方法-sort-对列表进行永久排序"><a href="#2-2-1使用方法-sort-对列表进行永久排序" class="headerlink" title=" - 2.2.1使用方法 sort() 对列表进行永久排序 "></a><font color="#FF0000"> - 2.2.1使用方法 sort() 对列表进行永久排序 </font></h1><p>使用方法 sort() 可以对列表按照特殊符号，数字，大写字母，小写字母顺序进行永久排序：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cars = [<span class="string">'bmw'</span>, <span class="string">'audi'</span>, <span class="string">'toyota'</span>, <span class="string">'subaru'</span>]</span><br><span class="line">cars.sort()</span><br><span class="line">print(cars)</span><br></pre></td></tr></table></figure><p>输出结果如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[<span class="string">'audi'</span>, <span class="string">'bmw'</span>, <span class="string">'subaru'</span>, <span class="string">'toyota'</span>]</span><br></pre></td></tr></table></figure><p>还可以按与字母顺序相反的顺序排列列表元素，只需要向 sort() 方法传递参数 reverse = True 就可以了：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cars = [<span class="string">'bmw'</span>, <span class="string">'audi'</span>, <span class="string">'toyota'</span>, <span class="string">'subaru'</span>]</span><br><span class="line">cars.sort(reverse = <span class="keyword">True</span>)</span><br><span class="line">print(cars)</span><br></pre></td></tr></table></figure><p>输出结果如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[<span class="string">'toyota'</span>, <span class="string">'subaru'</span>, <span class="string">'bmw'</span>, <span class="string">'audi'</span>]</span><br></pre></td></tr></table></figure><h1 id="2-2-2使用函数-sorted-对列表进行临时排序"><a href="#2-2-2使用函数-sorted-对列表进行临时排序" class="headerlink" title=" - 2.2.2使用函数 sorted() 对列表进行临时排序 "></a><font color="#FF0000"> - 2.2.2使用函数 sorted() 对列表进行临时排序 </font></h1><p>要保留列表元素原来的排列顺序，同时以特定的顺序呈现它们，可使用函数sorted()。函数sorted()让你能够按特定顺序显示列表元素，同时不影响它们在列表中的原始排列顺序：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">cars = [<span class="string">'bmw'</span>, <span class="string">'audi'</span>, <span class="string">'toyota'</span>, <span class="string">'subaru'</span>]</span><br><span class="line">print(<span class="string">"Here is the original list:"</span>)</span><br><span class="line">print(cars)</span><br><span class="line">print(<span class="string">"\nHere is the sorted list:"</span>)</span><br><span class="line">print(sorted(cars))</span><br><span class="line">print(<span class="string">"\nHere is the sorted reverse list:"</span>)</span><br><span class="line">print(sorted(cars, reverse=<span class="keyword">True</span>))</span><br><span class="line">print(<span class="string">"\nHere is the original list again:"</span>)</span><br><span class="line">print(cars)</span><br></pre></td></tr></table></figure><p>输出结果如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">Here <span class="keyword">is</span> the original list:</span><br><span class="line">[<span class="string">'bmw'</span>, <span class="string">'audi'</span>, <span class="string">'toyota'</span>, <span class="string">'subaru'</span>]</span><br><span class="line"></span><br><span class="line">Here <span class="keyword">is</span> the sorted list:</span><br><span class="line">[<span class="string">'audi'</span>, <span class="string">'bmw'</span>, <span class="string">'subaru'</span>, <span class="string">'toyota'</span>]</span><br><span class="line"></span><br><span class="line">Here <span class="keyword">is</span> the sorted reverse list:</span><br><span class="line">[<span class="string">'toyota'</span>, <span class="string">'subaru'</span>, <span class="string">'bmw'</span>, <span class="string">'audi'</span>]</span><br><span class="line"></span><br><span class="line">Here <span class="keyword">is</span> the original list again:</span><br><span class="line">[<span class="string">'bmw'</span>, <span class="string">'audi'</span>, <span class="string">'toyota'</span>, <span class="string">'subaru'</span>]</span><br></pre></td></tr></table></figure><h1 id="2-2-3使用方法-reverse-对列表进行反向排序"><a href="#2-2-3使用方法-reverse-对列表进行反向排序" class="headerlink" title=" - 2.2.3使用方法 reverse() 对列表进行反向排序 "></a><font color="#FF0000"> - 2.2.3使用方法 reverse() 对列表进行反向排序 </font></h1><p>要反转列表元素的排列顺序，可使用方法 reverse() </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cars = [<span class="string">'bmw'</span>, <span class="string">'audi'</span>, <span class="string">'toyota'</span>, <span class="string">'subaru'</span>]</span><br><span class="line">cars.reverse()</span><br><span class="line">print(cars)</span><br></pre></td></tr></table></figure><p>输出结果如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[<span class="string">'subaru'</span>, <span class="string">'toyota'</span>, <span class="string">'audi'</span>, <span class="string">'bmw'</span>]</span><br></pre></td></tr></table></figure><h1 id="2-2-4确定列表的长度"><a href="#2-2-4确定列表的长度" class="headerlink" title=" - 2.2.4确定列表的长度 "></a><font color="#FF0000"> - 2.2.4确定列表的长度 </font></h1><p>使用函数 len() 可以快速获悉列表的长度：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt;cars = [<span class="string">'bmw'</span>, <span class="string">'audi'</span>, <span class="string">'toyota'</span>, <span class="string">'subaru'</span>]</span><br><span class="line">&gt;&gt;&gt;len(cars)</span><br><span class="line"><span class="number">4</span></span><br></pre></td></tr></table></figure><h1 id="2-2-5合并列表"><a href="#2-2-5合并列表" class="headerlink" title=" - 2.2.5合并列表 "></a><font color="#FF0000"> - 2.2.5合并列表 </font></h1><font color="#FF0000"> - 使用方法 extend() 合并列表</font><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">list1 = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>]</span><br><span class="line">list2 = [<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>, <span class="string">'d'</span>]</span><br><span class="line">list1.extend(list2)    <span class="comment">#将列表list2添加到list1当中去</span></span><br><span class="line">print(list1)</span><br><span class="line">print(list2)</span><br></pre></td></tr></table></figure><p>输出结果如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>, <span class="string">'d'</span>]</span><br><span class="line">[<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>, <span class="string">'d'</span>]</span><br></pre></td></tr></table></figure><font color="#FF0000"> - 使用 “+” 号合并列表</font><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">list1 = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>]</span><br><span class="line">list2 = [<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>, <span class="string">'d'</span>]</span><br><span class="line">print(list1 + list2)</span><br><span class="line">print(list2 + list1)</span><br></pre></td></tr></table></figure><p>输出结果如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>, <span class="string">'d'</span>]</span><br><span class="line">[<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>, <span class="string">'d'</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>]</span><br></pre></td></tr></table></figure><font color="#FF0000"> - 使用切片合并列表</font><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">list1 = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>]</span><br><span class="line">list2 = [<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>, <span class="string">'d'</span>]</span><br><span class="line">list1[len(list1) : len(list1)] = list2   <span class="comment">#len(list1)代表要将list2插入list1中的位置</span></span><br><span class="line">print(list1)</span><br><span class="line"></span><br><span class="line">list1 = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>]</span><br><span class="line">list2 = [<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>, <span class="string">'d'</span>]</span><br><span class="line">list1[<span class="number">0</span> :<span class="number">0</span>] = list2</span><br><span class="line">print(list1)</span><br><span class="line"></span><br><span class="line">list1 = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>]</span><br><span class="line">list2 = [<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>, <span class="string">'d'</span>]</span><br><span class="line">list1[<span class="number">1</span>:<span class="number">1</span>] = list2</span><br><span class="line">print(list1)</span><br></pre></td></tr></table></figure><p>输出结果如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>, <span class="string">'d'</span>]</span><br><span class="line">[<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>, <span class="string">'d'</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>]</span><br><span class="line">[<span class="number">1</span>, <span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>, <span class="string">'d'</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>]</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Python3 学习笔记 </category>
          
          <category> 基础学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 列表 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python3 基础学习笔记 C01</title>
      <link href="/2018/09/13/A07-Python3-basic-C01/"/>
      <url>/2018/09/13/A07-Python3-basic-C01/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><blockquote><center><font color="#1BC3FB" size="4">Python3 基础学习笔记第一章 —— 【变量和简单数据类型】</font></center></blockquote><a id="more"></a><hr><h1 id="1-1变量的命名和使用"><a href="#1-1变量的命名和使用" class="headerlink" title=" - 1.1变量的命名和使用 "></a><font color="#FF0000"> - 1.1变量的命名和使用 </font></h1><blockquote><p>变量名只能包含字母、数字和下划线。变量名可以字母或者下划线打头，但不能以数字开头，例如，可以将变量命名为message_1，但不能将其命名为1_message</p></blockquote><blockquote><p>变量名不能包含空格，但可使用下划线来分割其中的单词，例如，变量名greeting_message可行，但变量名greeting message会引发错误</p></blockquote><blockquote><p>不要将Python关键字和函数名用作变量名，即不要使用Python保留用于特殊用途的单词，如print</p></blockquote><blockquote><p>变量名应既简短又具有描述性，例如，name比n好，student_name比s_n好，name_length比length_of_persons_name好</p></blockquote><blockquote><p>慎用小写字母l和大写字母O，因为它们可能被人看错成数字1和0</p></blockquote><h1 id="1-2字符串"><a href="#1-2字符串" class="headerlink" title=" - 1.2字符串 "></a><font color="#FF0000"> - 1.2字符串 </font></h1><p> 字符串就是一系列字符，在Python中，用引号括起来的都是字符串，其中的引号可以是单引号也可以双引号：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"This is a string."</span></span><br><span class="line"><span class="string">'This is also a string.'</span></span><br></pre></td></tr></table></figure><p>这种灵活性让我们能够在字符串中包含引号和撇号：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">'I told my friend,"Python is my favorite language!"'</span></span><br><span class="line"><span class="string">"The language 'Python' is named er Monty Python,not the snake."</span></span><br><span class="line"><span class="string">"One of Python's strengths is i diverse and supportive community."</span></span><br></pre></td></tr></table></figure><h1 id="1-2-1使用方法修改字符串的大小写"><a href="#1-2-1使用方法修改字符串的大小写" class="headerlink" title=" - 1.2.1使用方法修改字符串的大小写"></a><font color="#FF0000"> - 1.2.1使用方法修改字符串的大小写</font></h1><p>三种处理方法如下：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">title()     <span class="comment">#将字符串每个单词的首字母都改为大写</span></span><br><span class="line">upper()     <span class="comment">#将字符串的每个字母都改为大写</span></span><br><span class="line">lower()     <span class="comment">#将字符串的每个字母都改为小写</span></span><br></pre></td></tr></table></figure></p><p>例如：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">message = <span class="string">"I love you!"</span></span><br><span class="line">print(name.title())</span><br><span class="line">print(name.upper())</span><br><span class="line">print(name.lower())</span><br></pre></td></tr></table></figure></p><p>输出结果如下：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">I Love You!</span><br><span class="line">I LOVE YOU!</span><br><span class="line">i love you!</span><br></pre></td></tr></table></figure></p><h1 id="1-2-2合并（拼接）字符串"><a href="#1-2-2合并（拼接）字符串" class="headerlink" title=" - 1.2.2合并（拼接）字符串"></a><font color="#FF0000"> - 1.2.2合并（拼接）字符串</font></h1><p>Python使用加号（+）来合并字符串，举例说明：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">first_name = <span class="string">"I"</span></span><br><span class="line">second_name = <span class="string">"love"</span></span><br><span class="line">third_name = <span class="string">"python"</span></span><br><span class="line">full_name = first_name + <span class="string">" "</span> + second_name + <span class="string">" "</span> + third_time</span><br><span class="line">print(full_name.title() + <span class="string">"!"</span>)</span><br></pre></td></tr></table></figure><p>输出结果如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">I Love Python!</span><br></pre></td></tr></table></figure><h1 id="1-2-3使用制表符或换行符来添加空白"><a href="#1-2-3使用制表符或换行符来添加空白" class="headerlink" title=" - 1.2.3使用制表符或换行符来添加空白"></a><font color="#FF0000"> - 1.2.3使用制表符或换行符来添加空白</font></h1><p>添加横向制表符：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt;print(<span class="string">"\tPython"</span>)</span><br><span class="line">    Python</span><br></pre></td></tr></table></figure><p>添加换行符：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt;print(<span class="string">"C\nC++\nPython\nJavaScript"</span>)</span><br><span class="line">C</span><br><span class="line">C++</span><br><span class="line">Python</span><br><span class="line">JavaScript</span><br></pre></td></tr></table></figure><center><font color="#FF0000"> 附表：Python转义符 </font><br><br><img src="https://i.imgur.com/Do9ja5A.png" alt=""><br><br></center><h1 id="1-2-4删除空白"><a href="#1-2-4删除空白" class="headerlink" title=" - 1.2.4删除空白"></a><font color="#FF0000"> - 1.2.4删除空白</font></h1><p>在Python中可用 lstrip()、rstrip()、strip() 分别删除字符串开头、结尾、全部的空白，举例说明：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt;message = <span class="string">' python '</span></span><br><span class="line">&gt;&gt;&gt;message</span><br><span class="line"><span class="string">' python '</span></span><br><span class="line">&gt;&gt;&gt;message.lstrip()</span><br><span class="line"><span class="string">'python '</span></span><br><span class="line">&gt;&gt;&gt;message.rstrip()</span><br><span class="line"><span class="string">' python'</span></span><br><span class="line">&gt;&gt;&gt;message.strip()</span><br><span class="line"><span class="string">'python'</span></span><br></pre></td></tr></table></figure><p>如果要永久删除字符串中的空白，必须将删除操作的结果存回到变量中：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt;message = <span class="string">' python '</span></span><br><span class="line">&gt;&gt;&gt;message = message.strip()</span><br><span class="line">&gt;&gt;&gt;message</span><br><span class="line"><span class="string">'python'</span></span><br></pre></td></tr></table></figure><h1 id="1-3数字"><a href="#1-3数字" class="headerlink" title=" - 1.3数字"></a><font color="#FF0000"> - 1.3数字</font></h1><p>在编程中，经常使用数字来记录游戏得分、表示可视化数据、储存Web应用信息等。Python根据数字的用法以不同的方式处理它们</p><h1 id="1-3-1整数"><a href="#1-3-1整数" class="headerlink" title=" - 1.3.1整数"></a><font color="#FF0000"> - 1.3.1整数</font></h1><p>在Python中，可对整数执行加（+）减（-）乘（*）除（/）乘方（**）运算，同时也支持运算次序：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt;<span class="number">3</span> + <span class="number">2</span></span><br><span class="line"><span class="number">5</span></span><br><span class="line">&gt;&gt;&gt;<span class="number">3</span> - <span class="number">2</span></span><br><span class="line"><span class="number">1</span></span><br><span class="line">&gt;&gt;&gt;<span class="number">3</span> * <span class="number">2</span></span><br><span class="line"><span class="number">6</span></span><br><span class="line">&gt;&gt;&gt;<span class="number">3</span> \ <span class="number">2</span></span><br><span class="line"><span class="number">1.5</span></span><br><span class="line">&gt;&gt;&gt;<span class="number">3</span> ** <span class="number">2</span></span><br><span class="line"><span class="number">9</span></span><br><span class="line">&gt;&gt;&gt;<span class="number">3</span> ** <span class="number">3</span></span><br><span class="line"><span class="number">27</span></span><br><span class="line">&gt;&gt;&gt;<span class="number">2</span> + <span class="number">3</span> * <span class="number">4</span></span><br><span class="line"><span class="number">14</span></span><br><span class="line">&gt;&gt;&gt;(<span class="number">2</span> + <span class="number">3</span>) * <span class="number">4</span></span><br><span class="line"><span class="number">20</span></span><br></pre></td></tr></table></figure><h1 id="1-3-2浮点数"><a href="#1-3-2浮点数" class="headerlink" title=" - 1.3.2浮点数"></a><font color="#FF0000"> - 1.3.2浮点数</font></h1><p>Python将带小数点的数字都称为浮点数：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt;<span class="number">0.1</span> + <span class="number">0.1</span></span><br><span class="line"><span class="number">0.2</span></span><br><span class="line">&gt;&gt;&gt;<span class="number">2</span> * <span class="number">0.2</span></span><br><span class="line"><span class="number">0.4</span></span><br></pre></td></tr></table></figure><p>需要注意的是，结果包含的小数位可能是不确定的，就现在而言，暂时忽略多余的小数位即可：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt;<span class="number">0.2</span> + <span class="number">0.1</span></span><br><span class="line"><span class="number">0.30000000000000004</span></span><br><span class="line">&gt;&gt;&gt;<span class="number">3</span> * <span class="number">0.1</span></span><br><span class="line"><span class="number">0.30000000000000004</span></span><br></pre></td></tr></table></figure><h1 id="1-3-3使用函数-str-避免错误"><a href="#1-3-3使用函数-str-避免错误" class="headerlink" title=" - 1.3.3使用函数 str() 避免错误"></a><font color="#FF0000"> - 1.3.3使用函数 str() 避免错误</font></h1><p>错误例子：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">age = <span class="number">23</span></span><br><span class="line">message = <span class="string">"Happy "</span> + age + <span class="string">"rd Birthday!"</span></span><br><span class="line">print(message)</span><br></pre></td></tr></table></figure><p>运行时会报错：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">"birthday.py"</span>, line <span class="number">2</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">    message = <span class="string">"Happy "</span> + age + <span class="string">"rd Birthday!"</span></span><br><span class="line">TypeError: must be str, <span class="keyword">not</span> int</span><br></pre></td></tr></table></figure><p>这是一个类型错误，意味着Python无法识别我们使用的信息。在这个例子中，Python发现我们使用了一个值为整数（int）的变量，但它不知道该如何解读这个值，这个变量表示的可能是数值23，也可能是字符2和3。像上面这样的字符串中使用整数时，需要显式地指出我们希望Python将这个整数用作字符串。为此，可调用函数 str()，它让Python将非字符串值表示为字符串：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">age = <span class="number">23</span></span><br><span class="line">message = <span class="string">"Happy "</span> + str(age) + <span class="string">"rd Birthday!"</span></span><br><span class="line">print(message)</span><br></pre></td></tr></table></figure><p>输出结果如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Happy <span class="number">23</span>rd Birthday!</span><br></pre></td></tr></table></figure><h1 id="1-4注释"><a href="#1-4注释" class="headerlink" title=" - 1.4注释"></a><font color="#FF0000"> - 1.4注释</font></h1><p>注释让我们能够使用自然语言在程序中添加说明，Python中注释有三种方法：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">print(<span class="string">"Hello Python!"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#这是单行注释</span></span><br><span class="line"></span><br><span class="line"><span class="string">'''这是多行注释</span></span><br><span class="line"><span class="string">这是多行注释'''</span></span><br><span class="line"></span><br><span class="line"><span class="string">"""这也是多行注释</span></span><br><span class="line"><span class="string">这也是多行注释"""</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Python3 学习笔记 </category>
          
          <category> 基础学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据类型 </tag>
            
            <tag> 变量 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>VMware Pro 14 安装 Ubuntu 18.04 详细教程</title>
      <link href="/2018/09/09/A06-install-ubuntu18.04/"/>
      <url>/2018/09/09/A06-install-ubuntu18.04/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="1-下载安装-VMware-Workstation-Pro-14"><a href="#1-下载安装-VMware-Workstation-Pro-14" class="headerlink" title="1.下载安装 VMware Workstation Pro 14"></a><font color="#FF0000">1.下载安装 VMware Workstation Pro 14</font></h1><p> 进入 <a href="https://www.vmware.com/products/workstation-pro/workstation-pro-evaluation.html" target="_blank" rel="noopener">VMware 官网</a>或者在软件商店下载最新版VMware虚拟机并安装</p><p> <img src="https://cdn.jsdelivr.net/gh/TRHX/ImageHosting/ITRHX-PIC/A06/01.png" alt="01"></p><h1 id="2-下载-Ubuntu-18-04-系统"><a href="#2-下载-Ubuntu-18-04-系统" class="headerlink" title="2.下载 Ubuntu 18.04 系统"></a><font color="#FF0000">2.下载 Ubuntu 18.04 系统</font></h1><p>  进入 <a href="https://www.ubuntu.com/" target="_blank" rel="noopener">Ubuntu 官网</a>，下载最新版 Ubuntu 系统镜像</p><p><img src="https://cdn.jsdelivr.net/gh/TRHX/ImageHosting/ITRHX-PIC/A06/02.png" alt="02"><br><img src="https://cdn.jsdelivr.net/gh/TRHX/ImageHosting/ITRHX-PIC/A06/03.png" alt="03"></p><h1 id="3-在-VMware-中创建虚拟机"><a href="#3-在-VMware-中创建虚拟机" class="headerlink" title="3.在 VMware 中创建虚拟机"></a><font color="#FF0000">3.在 VMware 中创建虚拟机</font></h1><p>打开安装好的 VMware Workstation Pro 14，选择创建新的虚拟机<br><img src="https://cdn.jsdelivr.net/gh/TRHX/ImageHosting/ITRHX-PIC/A06/04.png" alt="04"></p><p>在新建虚拟机向导中选择自定义（高级）<br><img src="https://cdn.jsdelivr.net/gh/TRHX/ImageHosting/ITRHX-PIC/A06/05.png" alt="05"></p><p>默认直接下一步，直到出现下图，再选择稍后安装操作系统<br><img src="https://cdn.jsdelivr.net/gh/TRHX/ImageHosting/ITRHX-PIC/A06/06.png" alt="06"></p><p>选择客户机操作系统为 Linux ，如果你电脑是32位就选择 Ubuntu 版本，64位就选择 Ubuntu 64 位版本<br><img src="https://cdn.jsdelivr.net/gh/TRHX/ImageHosting/ITRHX-PIC/A06/07.png" alt="07"></p><p>更改虚拟机名称及存放位置<br><img src="https://cdn.jsdelivr.net/gh/TRHX/ImageHosting/ITRHX-PIC/A06/08.png" alt="08"></p><p>为虚拟机指定处理器数量，默认即可<br><img src="https://cdn.jsdelivr.net/gh/TRHX/ImageHosting/ITRHX-PIC/A06/09.png" alt="09"></p><p>为虚拟机分配内存，太大了可能会导致卡顿，太小了也不好，推荐内存大小即可<br><img src="https://cdn.jsdelivr.net/gh/TRHX/ImageHosting/ITRHX-PIC/A06/10.png" alt="10"></p><p>以下均选择默认即可<br><img src="https://cdn.jsdelivr.net/gh/TRHX/ImageHosting/ITRHX-PIC/A06/11.png" alt="11"><br><img src="https://cdn.jsdelivr.net/gh/TRHX/ImageHosting/ITRHX-PIC/A06/13.png" alt="13"><br><img src="https://cdn.jsdelivr.net/gh/TRHX/ImageHosting/ITRHX-PIC/A06/14.png" alt="14"></p><p>选择创建新虚拟磁盘<br><img src="https://cdn.jsdelivr.net/gh/TRHX/ImageHosting/ITRHX-PIC/A06/15.png" alt="15"></p><p>选择将虚拟磁盘储存为单个文件<br><img src="https://cdn.jsdelivr.net/gh/TRHX/ImageHosting/ITRHX-PIC/A06/16.png" alt="16"></p><p>默认下一步<br><img src="https://cdn.jsdelivr.net/gh/TRHX/ImageHosting/ITRHX-PIC/A06/17.png" alt="17"></p><p>点击完成<br><img src="https://cdn.jsdelivr.net/gh/TRHX/ImageHosting/ITRHX-PIC/A06/18.png" alt="18"></p><p>此时我们就可以在虚拟机左侧“我的计算机”下面看到刚刚创建的虚拟机 Ubuntu 64 位，单击 Ubuntu 64 位，选择“编辑虚拟机设置”， 再选择“CD/DVD(SATA)”，选择“使用ISO映像文件”，点击“浏览”，找到先前我们下载好的 Ubuntu 64 位镜像文件，点击“确定”<br><img src="https://cdn.jsdelivr.net/gh/TRHX/ImageHosting/ITRHX-PIC/A06/19.png" alt="19"><br><img src="https://cdn.jsdelivr.net/gh/TRHX/ImageHosting/ITRHX-PIC/A06/20.png" alt="20"></p><h1 id="4-在虚拟机上安装-Ubuntu-系统"><a href="#4-在虚拟机上安装-Ubuntu-系统" class="headerlink" title="4.在虚拟机上安装 Ubuntu 系统"></a><font color="#FF0000">4.在虚拟机上安装 Ubuntu 系统</font></h1><p>单击 Ubuntu 64 位，选择“开启此虚拟机”<br><img src="https://cdn.jsdelivr.net/gh/TRHX/ImageHosting/ITRHX-PIC/A06/21.png" alt="21"></p><p>来到欢迎界面，选择好语言，点击“安装 Ubuntu”<br><img src="https://cdn.jsdelivr.net/gh/TRHX/ImageHosting/ITRHX-PIC/A06/22.png" alt="22"></p><p>选择键盘布局为“汉语”<br><img src="https://cdn.jsdelivr.net/gh/TRHX/ImageHosting/ITRHX-PIC/A06/23.png" alt="23"></p><p>更新和其他软件默认选择即可<br><img src="https://cdn.jsdelivr.net/gh/TRHX/ImageHosting/ITRHX-PIC/A06/24.png" alt="24"></p><p>安装类型选择“清除整个磁盘并安装 Ubuntu”，PS: 因为我们是新安装的系统，且在虚拟机中，所以可以选择清除整个磁盘，这个操作不会清除你原来电脑里面的东西<br><img src="https://cdn.jsdelivr.net/gh/TRHX/ImageHosting/ITRHX-PIC/A06/25.png" alt="25"><br><img src="https://cdn.jsdelivr.net/gh/TRHX/ImageHosting/ITRHX-PIC/A06/26.png" alt="26"></p><p>地区随便，在中国就行，默认即可<br><img src="https://cdn.jsdelivr.net/gh/TRHX/ImageHosting/ITRHX-PIC/A06/27.png" alt="27"></p><p>之后设置计算机名，密码<br><img src="https://cdn.jsdelivr.net/gh/TRHX/ImageHosting/ITRHX-PIC/A06/28.png" alt="28"></p><p>点击继续稍等一会就安装完成啦<br><img src="https://cdn.jsdelivr.net/gh/TRHX/ImageHosting/ITRHX-PIC/A06/29.png" alt="29"></p><hr><h1 id="安装过程中可能会出现的一些问题"><a href="#安装过程中可能会出现的一些问题" class="headerlink" title="安装过程中可能会出现的一些问题"></a><center><font color="#FF0000" size="7">安装过程中可能会出现的一些问题</font></center></h1><hr><h1 id="1-在虚拟机上安装-Ubuntu-系统的过程中卡死不动"><a href="#1-在虚拟机上安装-Ubuntu-系统的过程中卡死不动" class="headerlink" title=" 1.在虚拟机上安装 Ubuntu 系统的过程中卡死不动"></a><font color="#FF0000"> 1.在虚拟机上安装 Ubuntu 系统的过程中卡死不动</font></h1><p> 解决方法：关闭网络，重新安装即可</p><hr><h1 id="2-Ubuntu-不能全屏显示"><a href="#2-Ubuntu-不能全屏显示" class="headerlink" title=" 2.Ubuntu 不能全屏显示"></a><font color="#FF0000"> 2.Ubuntu 不能全屏显示</font></h1><p>解决方法：<br>方法①：安装 open-vm-tools：</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-<span class="built_in">get</span> install <span class="keyword">open</span>-<span class="keyword">vm</span>-tools</span><br></pre></td></tr></table></figure><p>然后执行：</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-<span class="built_in">get</span> install <span class="keyword">open</span>-<span class="keyword">vm</span>*</span><br></pre></td></tr></table></figure><p>重启即可全屏显示</p><p>方法②：在终端输入<code>xrandr</code>，并回车，我们就可以看到很多可以修改的分辨率，选择好分辨率后，比如我们要修改分辨率为 1920x1440 ，则在终端输入 <code>xrandr -s 1920x1440</code>，回车即可，注意 1920x1440 中间是<font color="#FF0000">小写字母 x</font>，本人亲测此方法并不是很完美，不能完全适应屏幕<br><img src="https://cdn.jsdelivr.net/gh/TRHX/ImageHosting/ITRHX-PIC/A06/30.png" alt="30"></p><p>方法③：安装 VMware Tools：<br>1、进入 Ubuntu 系统后，点击虚拟机上的【虚拟机】—＞【安装 VMware Tools】，回到桌面即可看到一个 VMware Tools 的 图标<br>2、复制 VMwareTools-10.0.10-4301679.tar.gz（版本根据自己的实际情况而定）到 home 目录下， 用命令 <code>tar -xzvf  VMwareTools-10.0.10-4301679.tar.gz</code> 进行解压<br>3、解压后 cd vmware_tools_distrib，打开终端<br>4、输入“sudo ./vmware-install.pl”，输入用户密码后开始安装<br>5、接下来会有很多地方需要你按 Enter或者 Yes<br>6、当你看到出现 <code>—the vmware team</code> 的字样后就可以关闭窗口了，此时窗口就会自动全屏了，如果没有全屏，重启过后就可以了<br>7、若还没有全屏显示，则将虚拟机的【查看】—&gt;【自动调整大小】—&gt;【自适应客户机】，都选上，即可实现全屏</p>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> VMware </tag>
            
            <tag> Ubuntu </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>主流 Markdown 编辑器推荐</title>
      <link href="/2018/08/29/A05-markdown-editor/"/>
      <url>/2018/08/29/A05-markdown-editor/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><font color="#4094C7"><br>Markdown ，2004年由 John Gruberis 设计和开发，是一种可以使用普通文本编辑器编写的标记语言，通过简单的标记语法，它可以使普通文本内容具有一定的格式，以下将介绍目前比较流行的一些 Markdown 编辑器（排名不分先后）</font><hr><h1 id="MarkdownPad"><a href="#MarkdownPad" class="headerlink" title=" - MarkdownPad "></a><font color="#FF0000"> - MarkdownPad </font></h1><p>目前分为 MarkdownPad2 和 MarkdownPad Pro 版本，后者收费，我们使用前者足矣，用户可以通过键盘快捷键和工具栏按钮来使用或者移除 Markdown 各种语法格式，支持自定义配色方案、字体、大小和布局 、即时HTML预览、HTML和PDF导出，被很多人称赞为 Windows 平台最好用的 Markdown 编辑器，实用性强，仅支持 Windows 系统，个人觉得在 Windows 10 系统上界面并不是很好看，有时候添加音乐什么的，资源多了，实时预览会显示资源加载失败，<a href="http://markdownpad.com/" target="_blank" rel="noopener">点击此处</a>访问 MarkdownPad 官网</p><p><img src="https://cdn.jsdelivr.net/gh/TRHX/ImageHosting/ITRHX-PIC/A05/MarkdownPad2.png" alt="MarkdownPad 2"></p><hr><h1 id="BookPad"><a href="#BookPad" class="headerlink" title="- BookPad "></a><font color="#FF0000">- BookPad </font></h1><p> 无意间在 Microsoft Store 上发现的，完美搭配 Win10 系统，界面非常简洁漂亮，2017年9月份发布，大小30.82 MB，官方网站：<a href="https://sosfos.wordpress.com/" target="_blank" rel="noopener">https://sosfos.wordpress.com/</a> ，收费13人民币，可免费使用7天，各种功能应有尽有，和其他编辑器不相上下，本来想着百度百度看看有没有破解版，结果全网看不见 BookPad 的影子，估计是新出来的还不为人所知吧，可以直接在 Microsoft Store 搜索下载，或者点击链接获取：<a href="https://www.microsoft.com/store/apps/9N6P5ZH2SJSX" target="_blank" rel="noopener">https://www.microsoft.com/store/apps/9N6P5ZH2SJSX</a></p><p><img src="https://cdn.jsdelivr.net/gh/TRHX/ImageHosting/ITRHX-PIC/A05/BookPad.png" alt="BookPad"></p><p><img src="https://cdn.jsdelivr.net/gh/TRHX/ImageHosting/ITRHX-PIC/A05/BookPad2.jpg" alt="BookPad2"></p><hr><h1 id="小书匠"><a href="#小书匠" class="headerlink" title=" - 小书匠"></a><font color="#FF0000"> - 小书匠</font></h1><p> 分为免费版和收费版，收费版¥20/年，其实免费版的功能已经足够强大了，多种编辑模式、多种主题选择、多种编辑器实现、丰富的语法支持、第三方同步、强大的文件管理功能，让人使用一次就爱上了它，支持 Windows 和 Web，推荐使用，<a href="http://soft.xiaoshujiang.com/" target="_blank" rel="noopener">点击此处</a>访问小书匠官网</p><p><img src="https://cdn.jsdelivr.net/gh/TRHX/ImageHosting/ITRHX-PIC/A05/xiaoshujiang.png" alt="小书匠"><br><img src="https://cdn.jsdelivr.net/gh/TRHX/ImageHosting/ITRHX-PIC/A05/xiaoshujiang2.png" alt="小书匠2"></p><hr><h1 id="Typora"><a href="#Typora" class="headerlink" title=" - Typora"></a><font color="#FF0000"> - Typora</font></h1><p>Typora 同样支持 Windows、OS X 和 Linux，Typora 支持即时渲染技术，这也是与其他 Markdown 编辑器最显著的区别，支持数学编辑，可与 Word 直接格式转换，在 Pandoc 的支持下进行多种文档格式转换，Typora 适合那些对码字手速和排版顺畅度有要求的人群，譬如码农、网站小编等，<a href="https://www.typora.io/" target="_blank" rel="noopener">点击此处</a>访问 Typora 官网</p><p><img src="https://cdn.jsdelivr.net/gh/TRHX/ImageHosting/ITRHX-PIC/A05/Typora.png" alt="Typora"></p><hr><h1 id="Visual-Studio-Code"><a href="#Visual-Studio-Code" class="headerlink" title=" - Visual Studio Code"></a><font color="#FF0000"> - Visual Studio Code</font></h1><p>Visual Studio Code 是众所周知的神器，是微软推出一款轻量级的文本编辑工具，类似于 Sublime，它已经默认集成 Markdown 文档编辑插件，原生就支持高亮 Markdown 的语法，但想要实时预览还需要选择 Markdown: Open Preview to the Side 命令实现，相关教程请<a href="https://www.cnblogs.com/shawWey/p/8931697.html" target="_blank" rel="noopener">点击此处</a>，<a href="https://code.visualstudio.com/" target="_blank" rel="noopener">点击此处</a> 访问 Visual Studio Code 官网</p><p><img src="https://cdn.jsdelivr.net/gh/TRHX/ImageHosting/ITRHX-PIC/A05/VisualStudioCode.png" alt="Visual Studio Code"></p><hr><h1 id="Marxico"><a href="#Marxico" class="headerlink" title="- Marxico"></a><font color="#FF0000">- Marxico</font></h1><p>Marxico 中文名马克飞象，提供桌面客户端以及离线 Chrome App，支持移动端 Web，可以直接把文本存到印象笔记，<a href="http://marxi.co/" target="_blank" rel="noopener">点击此处</a>访问 Marxico，<a href="https://maxiang.io/" target="_blank" rel="noopener">点击此处</a>访问 马克飞象</p><p><img src="https://cdn.jsdelivr.net/gh/TRHX/ImageHosting/ITRHX-PIC/A05/Marxico.png" alt="马克飞象"></p><hr><h1 id="Sublime-Text-3"><a href="#Sublime-Text-3" class="headerlink" title=" - Sublime Text 3"></a><font color="#FF0000"> - Sublime Text 3</font></h1><p>Sublime Text 3 是基于 Vim 开发的跨平台代码编辑器，收费80美元，好像可以免费试用，支持 OS X、Windows、Ubuntu 等 UNIX 及 Linux 操作系统，由于其功能的多样性而广受好评，界面简约大方，定位专业，原生支持的编程语言就多达十几种，通过第三方插件，还能实现更多语法的支持，其中就包括 Markdown ，但也有个缺点，就是不能实时预览，但是用户可以通过 Markdown Preview 的插件实现对 Markdown 的预览，具体教程请<a href="https://blog.csdn.net/qazxswed807/article/details/51235792" target="_blank" rel="noopener">点击此处</a>查看，<a href="http://www.sublimetext.com/" target="_blank" rel="noopener">点击此处</a>访问 Sublime Text 官网</p><p><img src="https://cdn.jsdelivr.net/gh/TRHX/ImageHosting/ITRHX-PIC/A05/SublimeText.png" alt="SublimeText"></p><hr><h1 id="Mou"><a href="#Mou" class="headerlink" title=" - Mou "></a><font color="#FF0000"> - Mou </font></h1><p>Mou 是一款由国人独立开发者罗晨开发的实时预览型 Markdown 编辑器，仅支持 OS X操作系统，是目前同类应用中对汉字兼容性最好的作品，也是目前最好用的免费 Markdown 编辑器，提供语法高亮、在线预览、同步滚动、全屏模式，支持自定保存、自动匹配，允许自定义主题，支持 CSS，HTML 和 PDF 导出等功能，<a href="http://25.io/mou/" target="_blank" rel="noopener">点击此处</a>访问 Mou 官网</p><p><img src="https://cdn.jsdelivr.net/gh/TRHX/ImageHosting/ITRHX-PIC/A05/Mou.png" alt="Mou"></p><hr><h1 id="Atom"><a href="#Atom" class="headerlink" title=" - Atom"></a><font color="#FF0000"> - Atom</font></h1><p>Atom 是 Github 专门为程序员推出的一个跨平台文本编辑器，具有简洁和直观的图形用户界面，并有很多有趣的特点：支持CSS，HTML，JavaScript等网页编程语言，当然也支持 Markdown ，支持宏，自动完成分屏功能，集成了文件管理器，<a href="https://atom.io/" target="_blank" rel="noopener">点击此处</a>访问 Atom 官网</p><p><img src="https://cdn.jsdelivr.net/gh/TRHX/ImageHosting/ITRHX-PIC/A05/Atom.png" alt="Atom"></p><hr><h1 id="Smark"><a href="#Smark" class="headerlink" title=" - Smark"></a><font color="#FF0000"> - Smark</font></h1><p>国人编写的开源软件，Windows / Linux 等主流系统跨平台支持，完美支持 LaTex 数学公式、脚注、尾注等，支持使用本地 MathJax 调用，不需要在线访问 MathJax CDN，用户可配置的 Markdown 语法高亮显示，美观整洁，多种格式文件导出支持，简洁友好的界面布局，完备的各类快捷键，能极大地提高工作效率，<a href="https://gitee.com/elerao/Smark" target="_blank" rel="noopener">点击此处</a>访问 Smark 官网</p><p><img src="https://cdn.jsdelivr.net/gh/TRHX/ImageHosting/ITRHX-PIC/A05/smark.png" alt="Smark"></p><hr><h1 id="Haroopad"><a href="#Haroopad" class="headerlink" title=" - Haroopad"></a><font color="#FF0000"> - Haroopad</font></h1><p>Haroopad 覆盖三大主流桌面系统，支持 Windows、OS X 和 Linux，多种主题样式供你选择，语法标亮支持 54 种编程语言，该工具重点推荐 Ubuntu/Linux 用户使用，<a href="http://pad.haroopress.com/user.html" target="_blank" rel="noopener">点击此处</a>访问 Haroopad 官网</p><p><img src="https://cdn.jsdelivr.net/gh/TRHX/ImageHosting/ITRHX-PIC/A05/Haroopad.png" alt="Haroopad"></p><hr><h1 id="CuteMarkEd"><a href="#CuteMarkEd" class="headerlink" title="- CuteMarkEd"></a><font color="#FF0000">- CuteMarkEd</font></h1><p>CuteMarkEd 是一个基于qt5的跨平台的 Markdown 编辑器，开源的， 提供实时 HTML 预览、数学表达式、源码高亮和PDF导出，<a href="https://cloose.github.io/CuteMarkEd/" target="_blank" rel="noopener">点击此处</a> 访问 CuteMarkEd 官网</p><p><img src="https://cdn.jsdelivr.net/gh/TRHX/ImageHosting/ITRHX-PIC/A05/CuteMarkEd.png" alt="CuteMarkEd"></p><hr><h1 id="MarkPad"><a href="#MarkPad" class="headerlink" title=" - MarkPad"></a><font color="#FF0000"> - MarkPad</font></h1><p>MarkPad 是款开源的 Markdown 编辑器，与 Window 8 风格和谐友好的界面，可以直接在你的博客或者 GitHub 中打开、保存文档，直接将图片粘贴到 Markdown 文档中，<a href="http://code52.org/DownmarkerWPF/" target="_blank" rel="noopener">点击此处</a>访问 MarkPad 官网</p><p><img src="https://cdn.jsdelivr.net/gh/TRHX/ImageHosting/ITRHX-PIC/A05/MarkPad.png" alt="MarkPad"></p><hr><h1 id="Cmd-Markdown"><a href="#Cmd-Markdown" class="headerlink" title="- Cmd Markdown"></a><font color="#FF0000">- Cmd Markdown</font></h1><p>作业部落出品，是一款不错的工具和博客平台兼顾的产品，同时支持 Linux、Mac 和 Windows 操作系统，此外还提供 Web 在线创作，社交化批注、智能云同步，最简单的方法，满足多种写作需要，<a href="https://www.zybuluo.com/cmd/" target="_blank" rel="noopener">点击此处</a>访问 Cmd Markdown 官网</p><p><img src="https://cdn.jsdelivr.net/gh/TRHX/ImageHosting/ITRHX-PIC/A05/CmdMarkdown.png" alt="Cmd Markdown"></p><hr><h1 id="FarBox"><a href="#FarBox" class="headerlink" title="- FarBox"></a><font color="#FF0000">- FarBox</font></h1><p>同样是一款不错的 Markdown 编辑器和博客平台兼顾的产品，让用户通过Dropbox（现在默认是自己的同步服务器）直接建立个人网站。FarBox编辑器免费，同时支持 Linux、Mac 和 Windows 操作系统，Farbox服务可以免费试用，在本地编辑器内写作自动同步发布在个人博客，对于希望有个人博客但却不愿折腾的小白来说，是个不错的选择，<a href="https://www.farbox.com/" target="_blank" rel="noopener">点击此处</a>访问 FarBox 官网</p><p><img src="https://cdn.jsdelivr.net/gh/TRHX/ImageHosting/ITRHX-PIC/A05/FarBox.jpg" alt="FarBox"></p><hr><h1 id="Miu"><a href="#Miu" class="headerlink" title="- Miu"></a><font color="#FF0000">- Miu</font></h1><p>Miu 是一款 Windows 下的 Markdown 编辑器，支持 Markdown 高亮、代码高亮、即时预览，以及可以快速发布到 Github Gist，小众软件，界面美观，已经找不到官网了，小众软件网有提供百度云下载，<a href="https://www.appinn.com/miu-markdown-editor/" target="_blank" rel="noopener">Miu 下载地址</a></p><p><img src="https://cdn.jsdelivr.net/gh/TRHX/ImageHosting/ITRHX-PIC/A05/Miu.jpg" alt="Miu"></p><hr><h1 id="MacDown"><a href="#MacDown" class="headerlink" title="- MacDown"></a><font color="#FF0000">- MacDown</font></h1><p>MacDown 引用了许多 Mou 的设计方式，仅支持 Mac ，开源免费，<a href="http://macdown.uranusjr.com/" target="_blank" rel="noopener">点击此处</a>访问 MacDown 官网</p><p><img src="https://cdn.jsdelivr.net/gh/TRHX/ImageHosting/ITRHX-PIC/A05/MacDown.png" alt="MacDown"></p><hr><h1 id="Ulysses"><a href="#Ulysses" class="headerlink" title="- Ulysses"></a><font color="#FF0000">- Ulysses</font></h1><p>一款由国外开发商 The Soulmen 制作的 Markdown 编辑器。与其它同类应用相比，Ulysses 最大的不同在于，它能根据内置的文件管理器，以及与 iCloud 云服务器的实时同步方案，达到最快捷的文章整理效率，支持OS X , iPad，26人民币每月，14天免费试用，<a href="https://ulysses.app/" target="_blank" rel="noopener">点击此处</a>访问 Ulysses 官网</p><p><img src="https://cdn.jsdelivr.net/gh/TRHX/ImageHosting/ITRHX-PIC/A05/Ulysses.jpg" alt="Ulysses"></p><hr><h1 id="Byword"><a href="#Byword" class="headerlink" title="- Byword"></a><font color="#FF0000">- Byword</font></h1><p>一款轻量级的 Markdown 编辑器，支持Mac，iPhone和iPad，界面极简，功能强大，貌似要付费使用，<a href="https://bywordapp.com/" target="_blank" rel="noopener">点击此处</a> 访问 Byword 官网</p><p><img src="https://cdn.jsdelivr.net/gh/TRHX/ImageHosting/ITRHX-PIC/A05/Byword.jpg" alt="Byword"></p><hr><h1 id="MaHua"><a href="#MaHua" class="headerlink" title="- MaHua"></a><font color="#FF0000">- MaHua</font></h1><p>一个在线编辑 Markdown 文档的编辑器，小众软件，VIM 快捷键支持，完美兼容 Github 的 Markdown 语法，界面稍许简陋，<a href="http://mahua.jser.me/" target="_blank" rel="noopener">点击此处</a>访问 MaHua</p><p><img src="https://cdn.jsdelivr.net/gh/TRHX/ImageHosting/ITRHX-PIC/A05/MaHua.png" alt="MaHua"></p><hr><h1 id="Dillinger"><a href="#Dillinger" class="headerlink" title="- Dillinger"></a><font color="#FF0000">- Dillinger</font></h1><p>来自国外的 Markdown 编辑器，漂亮强大，支持md、 html、pdf 文件导出，支持Dropbox、Github、Google Drive、Onedrive 一键保存，<a href="https://dillinger.io/" target="_blank" rel="noopener">点击此处</a>访问 Dillinger</p><p><img src="https://cdn.jsdelivr.net/gh/TRHX/ImageHosting/ITRHX-PIC/A05/Dillinger.png" alt="Dillinger"></p><hr><h1 id="CSDN"><a href="#CSDN" class="headerlink" title=" - CSDN"></a><font color="#FF0000"> - CSDN</font></h1><p>中国专业IT社区CSDN (Chinese Software Developer Network) 创立于1999年，致力于为中国软件开发者提供知识传播、在线学习、职业发展等全生命周期服务。CSDN的在线编辑器功能强大，支持导出为HTML和md文件，注册账号后即可开始创作，<a href="https://www.csdn.net/" target="_blank" rel="noopener">点击此处</a>访问CSDN官网</p><p><img src="https://cdn.jsdelivr.net/gh/TRHX/ImageHosting/ITRHX-PIC/A05/CSDN.png" alt="CSDN"></p><hr><h1 id="简书"><a href="#简书" class="headerlink" title=" - 简书"></a><font color="#FF0000"> - 简书</font></h1><p>简书是一个优质的创作社区，你可以在线创作并发表到社区，是国内优质原创内容输出平台，简书从一开始就已经支持 Markdown 和富文本编辑，是一个为专门为作者打造的平台，<a href="https://www.jianshu.com/" target="_blank" rel="noopener">点击此处</a>访问简书官网</p><p><img src="https://cdn.jsdelivr.net/gh/TRHX/ImageHosting/ITRHX-PIC/A05/jianshu.jpg" alt="简书"></p><hr><p>要细数 Markdown 编辑器的话，可能永远也数不尽，而且每个人的看法也不同，正所谓萝卜白菜各有所爱，什么编辑器不是最重要的，重要的是我们能写出优质的文章，不断学习进步！不断提升自我！</p><p>参考资料：<br><a href="http://www.williamlong.info/archives/4319.html" target="_blank" rel="noopener">《好用的Markdown编辑器一览》</a>（By：月光）<br><a href="https://blog.csdn.net/jinhui157/article/details/73872795/" target="_blank" rel="noopener">《10款流行的Markdown编辑器，总有一款适合你》</a>（By：xiaoxiao_engineer）<br><a href="https://sspai.com/post/27792" target="_blank" rel="noopener">《解决作者们的焦虑：7 款优秀 Markdown 编辑工具推荐》</a>（By：JailJT）</p>]]></content>
      
      
      <categories>
          
          <category> Markdown </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Markdown </tag>
            
            <tag> 编辑器 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo 博客主题个性化</title>
      <link href="/2018/08/27/A04-Hexo-blog-topic-personalization/"/>
      <url>/2018/08/27/A04-Hexo-blog-topic-personalization/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>本文将讲述一些博客主题的美化、实用功能的添加，本文以作者 <a href="https://luuman.github.io/Home/H1/index.html" target="_blank" rel="noopener">luuman</a> 的 <a href="https://github.com/luuman/hexo-theme-spfk" target="_blank" rel="noopener">spfk</a> 主题和作者 <a href="https://xaoxuu.com/" target="_blank" rel="noopener">xaoxuu</a> 的 <a href="https://xaoxuu.com/wiki/material-x/" target="_blank" rel="noopener">Material X</a> 主题为例，文章会不定时进行更新。文章涉及有关参考资料、教程、链接如有侵权请联系我删除！</p><p>本文在CSDN的链接：<a href="https://itrhx.blog.csdn.net/article/details/85420403" target="_blank" rel="noopener">《Hexo 博客优化之博客美化》</a>、<a href="https://itrhx.blog.csdn.net/article/details/85010191" target="_blank" rel="noopener">《Hexo 博客优化之实用功能添加》</a>，Hexo 博客专栏，从前期搭建到后期美化，帮您解决常见问题：<a href="https://itrhx.blog.csdn.net/category_9285510.html" target="_blank" rel="noopener">《Github/Coding Pages + Hexo》</a>，对您有帮助就点个赞吧❤️</p><p><strong>请注意：</strong>不同主题可能方法有些不同，相同主题不同版本，配置方法也有所差异！</p><p><strong>博客美化前提条件：</strong>有一定的前端基础，了解 HTML、CSS、JS，了解 CSS 预处理语言 Sass、Less、Stylus，搞懂 hexo 的目录结构。</p><p><strong>博客美化通用步骤：</strong>选定主题，认真阅读主题文档，分析主题目录结构，了解每个文件是对应网页哪个部分的，认真阅读美化教程，美化教程本质上只为你提供核心代码和思路，具体代码要添加到哪个地方，需要你自己搞懂主题结构，添加到需要的、合适的位置！</p><p><strong>博客美化终极奥秘：</strong>创作第一，体验第二，避免繁杂，简洁为上！</p><hr><h1 id="【01】添加评论系统"><a href="#【01】添加评论系统" class="headerlink" title=" 【01】添加评论系统 "></a><font color="#FF0000"> 【01】添加评论系统 </font></h1><p>主流的评论系统有很多，比如：网易云跟帖、多说、友言、畅言、来必力（LiveRe）、Disqus、Valine、Gitment等等，目前网易云跟帖、多说、友言都已经关闭了，还有些可能需要翻墙，比较麻烦，百度了一下，最后还是选择了来必力评论系统</p><p>进入<a href="https://livere.com" target="_blank" rel="noopener">来必力官网</a>，注册一个账号（注册时可能需要翻墙）</p><fancybox><br><img src="https://cdn.jsdelivr.net/gh/TRHX/ImageHosting/ITRHX-PIC/A04/001.png" alt="001"><br></fancybox><p>注册完毕之后，登录，进入安装页面，选择 City 免费版安装，安装之后你会得到一段代码</p><fancybox><br><img src="https://cdn.jsdelivr.net/gh/TRHX/ImageHosting/ITRHX-PIC/A04/002.png" alt="002"><br></fancybox><fancybox><br><img src="https://cdn.jsdelivr.net/gh/TRHX/ImageHosting/ITRHX-PIC/A04/003.png" alt="003"><br></fancybox><fancybox><br><img src="https://cdn.jsdelivr.net/gh/TRHX/ImageHosting/ITRHX-PIC/A04/004.png" alt="004"><br></fancybox><p>我们打开主题文件下的 <font color="#FF0000">_config.yml</font> 文件，添加如下代码：</p><fancybox><br><img src="https://cdn.jsdelivr.net/gh/TRHX/ImageHosting/ITRHX-PIC/A04/005.png" alt="005"><br></fancybox><p>在 <font color="#FF0000">\themes\hexo-theme-spfk\layout\_partial\comments</font> 文件夹下新建一个 <font color="#FF0000">livere.ejs</font> 的文件，在里面填写来必力提供的代码：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 来必力City版安装代码 --&gt;</span><br><span class="line">&lt;div id=<span class="string">"lv-container"</span> data-id=<span class="string">"city"</span> data-uid=<span class="string">"这里是你的uid"</span>&gt;</span><br><span class="line">&lt;script type=<span class="string">"text/javascript"</span>&gt;</span><br><span class="line">(<span class="function"><span class="keyword">function</span>(<span class="params">d, s</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> j, e = d.getElementsByTagName(s)[<span class="number">0</span>];</span><br><span class="line">    </span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">typeof</span> LivereTower === <span class="string">'function'</span>) &#123; <span class="keyword">return</span>; &#125;</span><br><span class="line">    </span><br><span class="line">        j = d.createElement(s);</span><br><span class="line">        j.src = <span class="string">'https://cdn-city.livere.com/js/embed.dist.js'</span>;</span><br><span class="line">        j.async = <span class="literal">true</span>;</span><br><span class="line">    </span><br><span class="line">        e.parentNode.insertBefore(j, e);</span><br><span class="line">        &#125;)(<span class="built_in">document</span>, <span class="string">'script'</span>);</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br><span class="line"><span class="regexp">    &lt;noscript&gt;为正常使用来必力评论功能请激活JavaScript&lt;/</span>noscript&gt;</span><br><span class="line">&lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">&lt;!-- City版安装代码已完成 --&gt;</span></span><br></pre></td></tr></table></figure><p>打开 <font color="#FF0000">\themes\hexo-theme-spfk\layout\_partial\article.ejs </font>文件，在适当位置添加如下红框中的代码：</p><fancybox><br><img src="https://cdn.jsdelivr.net/gh/TRHX/ImageHosting/ITRHX-PIC/A04/006.png" alt="006"><br></fancybox><p>完成以上操作之后，我们就可以使用来必力评论系统了</p><fancybox><br><img src="https://cdn.jsdelivr.net/gh/TRHX/ImageHosting/ITRHX-PIC/A04/007.png" alt="007"><br></fancybox><hr><h1 id="【02】添加卡通人物"><a href="#【02】添加卡通人物" class="headerlink" title=" 【02】添加卡通人物 "></a><font color="#FF000"> 【02】添加卡通人物 </font></h1><p>我在逛别人博客的时候偶然发现右下角居然有一个萌萌的卡通人物，还能根据你鼠标位置摇头，瞬间被吸引到了，赶紧也给自己博客添加一个吧！<a href="https://github.com/EYHN/hexo-helper-live2d" target="_blank" rel="noopener">点击此处</a>进入该项目地址  </p><p>输入如下命令获取 live2d ：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> npm install --save hexo-helper-live2d</span><br></pre></td></tr></table></figure><p>输入以下命令，下载相应的模型，将 <font color="#FF0000">packagename</font> 更换成模型名称即可，更多模型选择请<a href="https://github.com/xiazeyu/live2d-widget-models" target="_blank" rel="noopener">点击此处</a>，各个模型的预览请<a href="https://huaji8.top/post/live2d-plugin-2.0/" target="_blank" rel="noopener">访问原作者的博客</a>  </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> npm install packagename</span><br></pre></td></tr></table></figure><p>打开站点目录下的 <font color="#FF0000">_config.yml</font> 文件，添加如下代码：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">live2d:</span></span><br><span class="line"><span class="attr">  enable:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">  scriptFrom:</span> <span class="string">local</span></span><br><span class="line"><span class="attr">  model:</span></span><br><span class="line"><span class="attr">    use:</span> <span class="string">live2d-widget-model-haruto</span> <span class="comment">#模型选择</span></span><br><span class="line"><span class="attr">  display:</span></span><br><span class="line"><span class="attr">    position:</span> <span class="string">right</span>  <span class="comment">#模型位置</span></span><br><span class="line"><span class="attr">    width:</span> <span class="number">150</span>       <span class="comment">#模型宽度</span></span><br><span class="line"><span class="attr">    height:</span> <span class="number">300</span>      <span class="comment">#模型高度</span></span><br><span class="line"><span class="attr">  mobile:</span></span><br><span class="line"><span class="attr">    show:</span> <span class="literal">false</span>      <span class="comment">#是否在手机端显示</span></span><br></pre></td></tr></table></figure><p>设置好过后我们就拥有了一个卡通人物</p><fancybox><br><img src="https://cdn.jsdelivr.net/gh/TRHX/ImageHosting/ITRHX-PIC/A04/008.png" alt="008"><br></fancybox><hr><h1 id="【03】自定义鼠标指针样式"><a href="#【03】自定义鼠标指针样式" class="headerlink" title=" 【03】自定义鼠标指针样式 "></a><font color="#FF0000"> 【03】自定义鼠标指针样式 </font></h1><p>在 <font color="#FF0000"> \themes\material-x\source\less\_base.less</font> 文件 body 样式里写入如下代码：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">    <span class="attribute">cursor</span>: <span class="built_in">url</span>(https://cdn.jsdelivr.net/gh/TRHX/CDN-for-itrhx.com@2.1.6/images/mouse.cur),auto;</span><br><span class="line">    <span class="attribute">background-color</span>: @theme_background;</span><br><span class="line">    ......</span><br><span class="line">    ......</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>鼠标指针可以用 Axialis CursorWorkshop 这个软件自己制作，不同主题具体放的文件有所不同，确保在博客主体 body 的 CSS 文件中即可，其中的鼠标指针链接可替换成自己的，首先尝试加载 <a href="https://cdn.jsdelivr.net/gh/TRHX/CDN-for-itrhx.com@2.1.6/images/mouse.cur" target="_blank" rel="noopener">https://cdn.jsdelivr.net/gh/TRHX/CDN-for-itrhx.com@2.1.6/images/mouse.cur</a> ，如果该文件不存在或由于其他原因无效，那么 auto 会被使用，也就是自动默认效果，图片格式为.ico、.ani、.cur，建议使用.cur，如果使用.ani或者其他格式无效，原因是浏览器兼容问题，请阅读<a href="https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Basic_User_Interface/Using_URL_values_for_the_cursor_property" target="_blank" rel="noopener">参考文档</a>或者参考以下兼容表：</p><table><thead><tr><th style="text-align:center">浏览器</th><th style="text-align:center">最低版本</th><th style="text-align:center">格式</th></tr></thead><tbody><tr><td style="text-align:center">Internet Explorer</td><td style="text-align:center">6.0</td><td style="text-align:center">.cur / .ani</td></tr><tr><td style="text-align:center">Firefox (Gecko), Windows and Linux</td><td style="text-align:center">1.5 (1.8)</td><td style="text-align:center">.cur / .png / .gif / .jpg</td></tr><tr><td style="text-align:center">Firefox (Gecko)</td><td style="text-align:center">4.0 (2.0)</td><td style="text-align:center">.cur / .png / .gif / .jpg / .svg</td></tr><tr><td style="text-align:center">Opera</td><td style="text-align:center">—</td><td style="text-align:center">—</td></tr><tr><td style="text-align:center">Safari (Webkit)</td><td style="text-align:center">3.0 (522-523)</td><td style="text-align:center">.cur / .png / .gif / .jpg</td></tr></tbody></table><p>拓展阅读：<a href="https://blog.csdn.net/ixygj197875/article/details/79338360" target="_blank" rel="noopener">《CSS 鼠标样式 cursor属性》</a> （By：歪脖先生的博客）</p><hr><h1 id="【04】添加鼠标点击爱心效果"><a href="#【04】添加鼠标点击爱心效果" class="headerlink" title=" 【04】添加鼠标点击爱心效果 "></a><font color="#FF0000"> 【04】添加鼠标点击爱心效果 </font></h1><p>在<font color="#FF0000"> \themes\hexo-theme-spfk\source\js</font> 下新建文件 <font color="#FF0000">love.js</font>，在 <font color="#FF0000">love.js</font> 文件中添加以下代码：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">!<span class="function"><span class="keyword">function</span>(<span class="params">e,t,a</span>)</span>&#123;<span class="function"><span class="keyword">function</span> <span class="title">n</span>(<span class="params"></span>)</span>&#123;c(<span class="string">".heart&#123;width: 10px;height: 10px;position: fixed;background: #f00;transform: rotate(45deg);-webkit-transform: rotate(45deg);-moz-transform: rotate(45deg);&#125;.heart:after,.heart:before&#123;content: '';width: inherit;height: inherit;background: inherit;border-radius: 50%;-webkit-border-radius: 500%;-moz-border-radius: 50%;position: fixed;&#125;.heart:after&#123;top: -5px;&#125;.heart:before&#123;left: -5px;&#125;"</span>),o(),r()&#125;<span class="function"><span class="keyword">function</span> <span class="title">r</span>(<span class="params"></span>)</span>&#123;<span class="keyword">for</span>(<span class="keyword">var</span> e=<span class="number">0</span>;e&lt;d.length;e++)d[e].alpha&lt;=<span class="number">0</span>?(t.body.removeChild(d[e].el),d.splice(e,<span class="number">1</span>)):(d[e].y--,d[e].scale+=<span class="number">.004</span>,d[e].alpha-=<span class="number">.013</span>,d[e].el.style.cssText=<span class="string">"left:"</span>+d[e].x+<span class="string">"px;top:"</span>+d[e].y+<span class="string">"px;opacity:"</span>+d[e].alpha+<span class="string">";transform:scale("</span>+d[e].scale+<span class="string">","</span>+d[e].scale+<span class="string">") rotate(45deg);background:"</span>+d[e].color+<span class="string">";z-index:99999"</span>);requestAnimationFrame(r)&#125;<span class="function"><span class="keyword">function</span> <span class="title">o</span>(<span class="params"></span>)</span>&#123;<span class="keyword">var</span> t=<span class="string">"function"</span>==<span class="keyword">typeof</span> e.onclick&amp;&amp;e.onclick;e.onclick=<span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;t&amp;&amp;t(),i(e)&#125;&#125;<span class="function"><span class="keyword">function</span> <span class="title">i</span>(<span class="params">e</span>)</span>&#123;<span class="keyword">var</span> a=t.createElement(<span class="string">"div"</span>);a.className=<span class="string">"heart"</span>,d.push(&#123;<span class="attr">el</span>:a,<span class="attr">x</span>:e.clientX<span class="number">-5</span>,<span class="attr">y</span>:e.clientY<span class="number">-5</span>,<span class="attr">scale</span>:<span class="number">1</span>,<span class="attr">alpha</span>:<span class="number">1</span>,<span class="attr">color</span>:s()&#125;),t.body.appendChild(a)&#125;<span class="function"><span class="keyword">function</span> <span class="title">c</span>(<span class="params">e</span>)</span>&#123;<span class="keyword">var</span> a=t.createElement(<span class="string">"style"</span>);a.type=<span class="string">"text/css"</span>;<span class="keyword">try</span>&#123;a.appendChild(t.createTextNode(e))&#125;<span class="keyword">catch</span>(t)&#123;a.styleSheet.cssText=e&#125;t.getElementsByTagName(<span class="string">"head"</span>)[<span class="number">0</span>].appendChild(a)&#125;<span class="function"><span class="keyword">function</span> <span class="title">s</span>(<span class="params"></span>)</span>&#123;<span class="keyword">return</span><span class="string">"rgb("</span>+~~(<span class="number">255</span>*<span class="built_in">Math</span>.random())+<span class="string">","</span>+~~(<span class="number">255</span>*<span class="built_in">Math</span>.random())+<span class="string">","</span>+~~(<span class="number">255</span>*<span class="built_in">Math</span>.random())+<span class="string">")"</span>&#125;<span class="keyword">var</span> d=[];e.requestAnimationFrame=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;<span class="keyword">return</span> e.requestAnimationFrame||e.webkitRequestAnimationFrame||e.mozRequestAnimationFrame||e.oRequestAnimationFrame||e.msRequestAnimationFrame||<span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;setTimeout(e,<span class="number">1e3</span>/<span class="number">60</span>)&#125;&#125;(),n()&#125;(<span class="built_in">window</span>,<span class="built_in">document</span>);</span><br></pre></td></tr></table></figure><p>在 <font color="#FF0000">\themes\hexo-theme-spfk\layout\layout.ejs</font> 文件末尾添加以下代码：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 页面点击小红心 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"/js/love.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>完成以上操作后，当我们点击鼠标的时候就可以看见爱心的特效了</p><fancybox><br><img src="https://cdn.jsdelivr.net/gh/TRHX/ImageHosting/ITRHX-PIC/A04/009.png" alt="009"><br></fancybox><hr><h1 id="【05】添加鼠标点击显示字体效果"><a href="#【05】添加鼠标点击显示字体效果" class="headerlink" title=" 【05】添加鼠标点击显示字体效果 "></a><font color="#FF0000"> 【05】添加鼠标点击显示字体效果 </font></h1><p>在<font color="#FF0000"> \themes\hexo-theme-spfk\source\js</font> 下新建文件 <font color="#FF0000">click_show_text.js</font>，在 <font color="#FF0000">click_show_text.js</font> 文件中添加以下代码：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a_idx = <span class="number">0</span>;</span><br><span class="line">jQuery(<span class="built_in">document</span>).ready(<span class="function"><span class="keyword">function</span>(<span class="params">$</span>) </span>&#123;</span><br><span class="line">    $(<span class="string">"body"</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> a = <span class="keyword">new</span> <span class="built_in">Array</span></span><br><span class="line">        (<span class="string">"富强"</span>, <span class="string">"民主"</span>, <span class="string">"文明"</span>, <span class="string">"和谐"</span>, <span class="string">"自由"</span>, <span class="string">"平等"</span>, <span class="string">"公正"</span>, <span class="string">"法治"</span>, <span class="string">"爱国"</span>, <span class="string">"敬业"</span>, <span class="string">"诚信"</span>, <span class="string">"友善"</span>);</span><br><span class="line">        <span class="keyword">var</span> $i = $(<span class="string">"&lt;span/&gt;"</span>).text(a[a_idx]);</span><br><span class="line">        a_idx = (a_idx + <span class="number">1</span>) % a.length;</span><br><span class="line">        <span class="keyword">var</span> x = e.pageX,</span><br><span class="line">        y = e.pageY;</span><br><span class="line">        $i.css(&#123;</span><br><span class="line">            <span class="string">"z-index"</span>: <span class="number">5</span>,</span><br><span class="line">            <span class="string">"top"</span>: y - <span class="number">20</span>,</span><br><span class="line">            <span class="string">"left"</span>: x,</span><br><span class="line">            <span class="string">"position"</span>: <span class="string">"absolute"</span>,</span><br><span class="line">            <span class="string">"font-weight"</span>: <span class="string">"bold"</span>,</span><br><span class="line">            <span class="string">"color"</span>: <span class="string">"#FF0000"</span></span><br><span class="line">        &#125;);</span><br><span class="line">        $(<span class="string">"body"</span>).append($i);</span><br><span class="line">        $i.animate(&#123;</span><br><span class="line">            <span class="string">"top"</span>: y - <span class="number">180</span>,</span><br><span class="line">            <span class="string">"opacity"</span>: <span class="number">0</span></span><br><span class="line">        &#125;,</span><br><span class="line">      <span class="number">3000</span>,</span><br><span class="line">      <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">          $i.remove();</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line">    setTimeout(<span class="string">'delay()'</span>, <span class="number">2000</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">delay</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    $(<span class="string">".buryit"</span>).removeAttr(<span class="string">"onclick"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其中的社会主义核心价值观可以根据你自己的创意替换为其他文字</p><p>如果想要每次点击显示的文字为不同颜色，可以将其中 <code>color</code> 值进行如下更改：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"color"</span>: <span class="string">"rgb("</span> + ~~(<span class="number">255</span> * <span class="built_in">Math</span>.random()) + <span class="string">","</span> + ~~(<span class="number">255</span> * <span class="built_in">Math</span>.random()) + <span class="string">","</span> + ~~(<span class="number">255</span> * <span class="built_in">Math</span>.random()) + <span class="string">")"</span></span><br></pre></td></tr></table></figure><p>然后在 <font color="#FF0000">\themes\hexo-theme-spfk\layout\layout.ejs</font> 文件末尾添加以下代码：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--单击显示文字--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"/js/click_show_text.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>最终实现效果如下：</p><fancybox><br><img src="https://cdn.jsdelivr.net/gh/TRHX/ImageHosting/ITRHX-PIC/A04/010.png" alt="010"><br></fancybox><hr><h1 id="【06】添加鼠标点击烟花爆炸效果"><a href="#【06】添加鼠标点击烟花爆炸效果" class="headerlink" title=" 【06】添加鼠标点击烟花爆炸效果 "></a><font color="#FF0000"> 【06】添加鼠标点击烟花爆炸效果 </font></h1><p>在 <font color="#FF0000">\themes\material-x\source\js</font> 目录下新建一个 <font color="#FF0000">fireworks.js</font> 的文件，里面写入以下代码：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">"use strict"</span>;<span class="function"><span class="keyword">function</span> <span class="title">updateCoords</span>(<span class="params">e</span>)</span>&#123;pointerX=(e.clientX||e.touches[<span class="number">0</span>].clientX)-canvasEl.getBoundingClientRect().left,pointerY=e.clientY||e.touches[<span class="number">0</span>].clientY-canvasEl.getBoundingClientRect().top&#125;<span class="function"><span class="keyword">function</span> <span class="title">setParticuleDirection</span>(<span class="params">e</span>)</span>&#123;<span class="keyword">var</span> t=anime.random(<span class="number">0</span>,<span class="number">360</span>)*<span class="built_in">Math</span>.PI/<span class="number">180</span>,a=anime.random(<span class="number">50</span>,<span class="number">180</span>),n=[<span class="number">-1</span>,<span class="number">1</span>][anime.random(<span class="number">0</span>,<span class="number">1</span>)]*a;<span class="keyword">return</span>&#123;<span class="attr">x</span>:e.x+n*<span class="built_in">Math</span>.cos(t),<span class="attr">y</span>:e.y+n*<span class="built_in">Math</span>.sin(t)&#125;&#125;<span class="function"><span class="keyword">function</span> <span class="title">createParticule</span>(<span class="params">e,t</span>)</span>&#123;<span class="keyword">var</span> a=&#123;&#125;;<span class="keyword">return</span> a.x=e,a.y=t,a.color=colors[anime.random(<span class="number">0</span>,colors.length<span class="number">-1</span>)],a.radius=anime.random(<span class="number">16</span>,<span class="number">32</span>),a.endPos=setParticuleDirection(a),a.draw=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;ctx.beginPath(),ctx.arc(a.x,a.y,a.radius,<span class="number">0</span>,<span class="number">2</span>*<span class="built_in">Math</span>.PI,!<span class="number">0</span>),ctx.fillStyle=a.color,ctx.fill()&#125;,a&#125;<span class="function"><span class="keyword">function</span> <span class="title">createCircle</span>(<span class="params">e,t</span>)</span>&#123;<span class="keyword">var</span> a=&#123;&#125;;<span class="keyword">return</span> a.x=e,a.y=t,a.color=<span class="string">"#F00"</span>,a.radius=<span class="number">0.1</span>,a.alpha=<span class="number">0.5</span>,a.lineWidth=<span class="number">6</span>,a.draw=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;ctx.globalAlpha=a.alpha,ctx.beginPath(),ctx.arc(a.x,a.y,a.radius,<span class="number">0</span>,<span class="number">2</span>*<span class="built_in">Math</span>.PI,!<span class="number">0</span>),ctx.lineWidth=a.lineWidth,ctx.strokeStyle=a.color,ctx.stroke(),ctx.globalAlpha=<span class="number">1</span>&#125;,a&#125;<span class="function"><span class="keyword">function</span> <span class="title">renderParticule</span>(<span class="params">e</span>)</span>&#123;<span class="keyword">for</span>(<span class="keyword">var</span> t=<span class="number">0</span>;t&lt;e.animatables.length;t++)&#123;e.animatables[t].target.draw()&#125;&#125;<span class="function"><span class="keyword">function</span> <span class="title">animateParticules</span>(<span class="params">e,t</span>)</span>&#123;<span class="keyword">for</span>(<span class="keyword">var</span> a=createCircle(e,t),n=[],i=<span class="number">0</span>;i&lt;numberOfParticules;i++)&#123;n.push(createParticule(e,t))&#125;anime.timeline().add(&#123;<span class="attr">targets</span>:n,<span class="attr">x</span>:<span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;<span class="keyword">return</span> e.endPos.x&#125;,<span class="attr">y</span>:<span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;<span class="keyword">return</span> e.endPos.y&#125;,<span class="attr">radius</span>:<span class="number">0.1</span>,<span class="attr">duration</span>:anime.random(<span class="number">1200</span>,<span class="number">1800</span>),<span class="attr">easing</span>:<span class="string">"easeOutExpo"</span>,<span class="attr">update</span>:renderParticule&#125;).add(&#123;<span class="attr">targets</span>:a,<span class="attr">radius</span>:anime.random(<span class="number">80</span>,<span class="number">160</span>),<span class="attr">lineWidth</span>:<span class="number">0</span>,<span class="attr">alpha</span>:&#123;<span class="attr">value</span>:<span class="number">0</span>,<span class="attr">easing</span>:<span class="string">"linear"</span>,<span class="attr">duration</span>:anime.random(<span class="number">600</span>,<span class="number">800</span>)&#125;,<span class="attr">duration</span>:anime.random(<span class="number">1200</span>,<span class="number">1800</span>),<span class="attr">easing</span>:<span class="string">"easeOutExpo"</span>,<span class="attr">update</span>:renderParticule,<span class="attr">offset</span>:<span class="number">0</span>&#125;)&#125;<span class="function"><span class="keyword">function</span> <span class="title">debounce</span>(<span class="params">e,t</span>)</span>&#123;<span class="keyword">var</span> a;<span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;<span class="keyword">var</span> n=<span class="keyword">this</span>,i=<span class="built_in">arguments</span>;clearTimeout(a),a=setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;e.apply(n,i)&#125;,t)&#125;&#125;<span class="keyword">var</span> canvasEl=<span class="built_in">document</span>.querySelector(<span class="string">".fireworks"</span>);<span class="keyword">if</span>(canvasEl)&#123;<span class="keyword">var</span> ctx=canvasEl.getContext(<span class="string">"2d"</span>),numberOfParticules=<span class="number">30</span>,pointerX=<span class="number">0</span>,pointerY=<span class="number">0</span>,tap=<span class="string">"mousedown"</span>,colors=[<span class="string">"#FF1461"</span>,<span class="string">"#18FF92"</span>,<span class="string">"#5A87FF"</span>,<span class="string">"#FBF38C"</span>],setCanvasSize=debounce(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;canvasEl.width=<span class="number">2</span>*<span class="built_in">window</span>.innerWidth,canvasEl.height=<span class="number">2</span>*<span class="built_in">window</span>.innerHeight,canvasEl.style.width=<span class="built_in">window</span>.innerWidth+<span class="string">"px"</span>,canvasEl.style.height=<span class="built_in">window</span>.innerHeight+<span class="string">"px"</span>,canvasEl.getContext(<span class="string">"2d"</span>).scale(<span class="number">2</span>,<span class="number">2</span>)&#125;,<span class="number">500</span>),render=anime(&#123;<span class="attr">duration</span>:<span class="number">1</span>/<span class="number">0</span>,<span class="attr">update</span>:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;ctx.clearRect(<span class="number">0</span>,<span class="number">0</span>,canvasEl.width,canvasEl.height)&#125;&#125;);<span class="built_in">document</span>.addEventListener(tap,<span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;<span class="string">"sidebar"</span>!==e.target.id&amp;&amp;<span class="string">"toggle-sidebar"</span>!==e.target.id&amp;&amp;<span class="string">"A"</span>!==e.target.nodeName&amp;&amp;<span class="string">"IMG"</span>!==e.target.nodeName&amp;&amp;(render.play(),updateCoords(e),animateParticules(pointerX,pointerY))&#125;,!<span class="number">1</span>),setCanvasSize(),<span class="built_in">window</span>.addEventListener(<span class="string">"resize"</span>,setCanvasSize,!<span class="number">1</span>)&#125;<span class="string">"use strict"</span>;<span class="function"><span class="keyword">function</span> <span class="title">updateCoords</span>(<span class="params">e</span>)</span>&#123;pointerX=(e.clientX||e.touches[<span class="number">0</span>].clientX)-canvasEl.getBoundingClientRect().left,pointerY=e.clientY||e.touches[<span class="number">0</span>].clientY-canvasEl.getBoundingClientRect().top&#125;<span class="function"><span class="keyword">function</span> <span class="title">setParticuleDirection</span>(<span class="params">e</span>)</span>&#123;<span class="keyword">var</span> t=anime.random(<span class="number">0</span>,<span class="number">360</span>)*<span class="built_in">Math</span>.PI/<span class="number">180</span>,a=anime.random(<span class="number">50</span>,<span class="number">180</span>),n=[<span class="number">-1</span>,<span class="number">1</span>][anime.random(<span class="number">0</span>,<span class="number">1</span>)]*a;<span class="keyword">return</span>&#123;<span class="attr">x</span>:e.x+n*<span class="built_in">Math</span>.cos(t),<span class="attr">y</span>:e.y+n*<span class="built_in">Math</span>.sin(t)&#125;&#125;<span class="function"><span class="keyword">function</span> <span class="title">createParticule</span>(<span class="params">e,t</span>)</span>&#123;<span class="keyword">var</span> a=&#123;&#125;;<span class="keyword">return</span> a.x=e,a.y=t,a.color=colors[anime.random(<span class="number">0</span>,colors.length<span class="number">-1</span>)],a.radius=anime.random(<span class="number">16</span>,<span class="number">32</span>),a.endPos=setParticuleDirection(a),a.draw=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;ctx.beginPath(),ctx.arc(a.x,a.y,a.radius,<span class="number">0</span>,<span class="number">2</span>*<span class="built_in">Math</span>.PI,!<span class="number">0</span>),ctx.fillStyle=a.color,ctx.fill()&#125;,a&#125;<span class="function"><span class="keyword">function</span> <span class="title">createCircle</span>(<span class="params">e,t</span>)</span>&#123;<span class="keyword">var</span> a=&#123;&#125;;<span class="keyword">return</span> a.x=e,a.y=t,a.color=<span class="string">"#F00"</span>,a.radius=<span class="number">0.1</span>,a.alpha=<span class="number">0.5</span>,a.lineWidth=<span class="number">6</span>,a.draw=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;ctx.globalAlpha=a.alpha,ctx.beginPath(),ctx.arc(a.x,a.y,a.radius,<span class="number">0</span>,<span class="number">2</span>*<span class="built_in">Math</span>.PI,!<span class="number">0</span>),ctx.lineWidth=a.lineWidth,ctx.strokeStyle=a.color,ctx.stroke(),ctx.globalAlpha=<span class="number">1</span>&#125;,a&#125;<span class="function"><span class="keyword">function</span> <span class="title">renderParticule</span>(<span class="params">e</span>)</span>&#123;<span class="keyword">for</span>(<span class="keyword">var</span> t=<span class="number">0</span>;t&lt;e.animatables.length;t++)&#123;e.animatables[t].target.draw()&#125;&#125;<span class="function"><span class="keyword">function</span> <span class="title">animateParticules</span>(<span class="params">e,t</span>)</span>&#123;<span class="keyword">for</span>(<span class="keyword">var</span> a=createCircle(e,t),n=[],i=<span class="number">0</span>;i&lt;numberOfParticules;i++)&#123;n.push(createParticule(e,t))&#125;anime.timeline().add(&#123;<span class="attr">targets</span>:n,<span class="attr">x</span>:<span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;<span class="keyword">return</span> e.endPos.x&#125;,<span class="attr">y</span>:<span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;<span class="keyword">return</span> e.endPos.y&#125;,<span class="attr">radius</span>:<span class="number">0.1</span>,<span class="attr">duration</span>:anime.random(<span class="number">1200</span>,<span class="number">1800</span>),<span class="attr">easing</span>:<span class="string">"easeOutExpo"</span>,<span class="attr">update</span>:renderParticule&#125;).add(&#123;<span class="attr">targets</span>:a,<span class="attr">radius</span>:anime.random(<span class="number">80</span>,<span class="number">160</span>),<span class="attr">lineWidth</span>:<span class="number">0</span>,<span class="attr">alpha</span>:&#123;<span class="attr">value</span>:<span class="number">0</span>,<span class="attr">easing</span>:<span class="string">"linear"</span>,<span class="attr">duration</span>:anime.random(<span class="number">600</span>,<span class="number">800</span>)&#125;,<span class="attr">duration</span>:anime.random(<span class="number">1200</span>,<span class="number">1800</span>),<span class="attr">easing</span>:<span class="string">"easeOutExpo"</span>,<span class="attr">update</span>:renderParticule,<span class="attr">offset</span>:<span class="number">0</span>&#125;)&#125;<span class="function"><span class="keyword">function</span> <span class="title">debounce</span>(<span class="params">e,t</span>)</span>&#123;<span class="keyword">var</span> a;<span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;<span class="keyword">var</span> n=<span class="keyword">this</span>,i=<span class="built_in">arguments</span>;clearTimeout(a),a=setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;e.apply(n,i)&#125;,t)&#125;&#125;<span class="keyword">var</span> canvasEl=<span class="built_in">document</span>.querySelector(<span class="string">".fireworks"</span>);<span class="keyword">if</span>(canvasEl)&#123;<span class="keyword">var</span> ctx=canvasEl.getContext(<span class="string">"2d"</span>),numberOfParticules=<span class="number">30</span>,pointerX=<span class="number">0</span>,pointerY=<span class="number">0</span>,tap=<span class="string">"mousedown"</span>,colors=[<span class="string">"#FF1461"</span>,<span class="string">"#18FF92"</span>,<span class="string">"#5A87FF"</span>,<span class="string">"#FBF38C"</span>],setCanvasSize=debounce(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;canvasEl.width=<span class="number">2</span>*<span class="built_in">window</span>.innerWidth,canvasEl.height=<span class="number">2</span>*<span class="built_in">window</span>.innerHeight,canvasEl.style.width=<span class="built_in">window</span>.innerWidth+<span class="string">"px"</span>,canvasEl.style.height=<span class="built_in">window</span>.innerHeight+<span class="string">"px"</span>,canvasEl.getContext(<span class="string">"2d"</span>).scale(<span class="number">2</span>,<span class="number">2</span>)&#125;,<span class="number">500</span>),render=anime(&#123;<span class="attr">duration</span>:<span class="number">1</span>/<span class="number">0</span>,<span class="attr">update</span>:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;ctx.clearRect(<span class="number">0</span>,<span class="number">0</span>,canvasEl.width,canvasEl.height)&#125;&#125;);<span class="built_in">document</span>.addEventListener(tap,<span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;<span class="string">"sidebar"</span>!==e.target.id&amp;&amp;<span class="string">"toggle-sidebar"</span>!==e.target.id&amp;&amp;<span class="string">"A"</span>!==e.target.nodeName&amp;&amp;<span class="string">"IMG"</span>!==e.target.nodeName&amp;&amp;(render.play(),updateCoords(e),animateParticules(pointerX,pointerY))&#125;,!<span class="number">1</span>),setCanvasSize(),<span class="built_in">window</span>.addEventListener(<span class="string">"resize"</span>,setCanvasSize,!<span class="number">1</span>)&#125;;</span><br></pre></td></tr></table></figure><p>然后在 <font color="#FF0000">\themes\material-x\layout\layout.ejs</font> 文件中写入以下代码：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">canvas</span> <span class="attr">class</span>=<span class="string">"fireworks"</span> <span class="attr">style</span>=<span class="string">"position: fixed;left: 0;top: 0;z-index: 1; pointer-events: none;"</span> &gt;</span><span class="tag">&lt;/<span class="name">canvas</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"//cdn.bootcss.com/animejs/2.2.0/anime.min.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"/js/fireworks.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>最终效果：</p><fancybox><br><img src="https://cdn.jsdelivr.net/gh/TRHX/ImageHosting/ITRHX-PIC/A04/011.gif" alt="011"><br></fancybox><hr><h1 id="【07】添加彩色滚动变换字体"><a href="#【07】添加彩色滚动变换字体" class="headerlink" title=" 【07】添加彩色滚动变换字体 "></a><font color="#FF0000"> 【07】添加彩色滚动变换字体 </font></h1><p>在你想要添加彩色滚动变换字体的地方写入以下代码即可，其中文字可自行更改：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id=<span class="string">"binft"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  &lt;script&gt;</span><br><span class="line">    <span class="keyword">var</span> binft = <span class="function"><span class="keyword">function</span> (<span class="params">r</span>) </span>&#123;</span><br><span class="line">      <span class="function"><span class="keyword">function</span> <span class="title">t</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> b[<span class="built_in">Math</span>.floor(<span class="built_in">Math</span>.random() * b.length)]</span><br><span class="line">      &#125;  </span><br><span class="line">      <span class="function"><span class="keyword">function</span> <span class="title">e</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">String</span>.fromCharCode(<span class="number">94</span> * <span class="built_in">Math</span>.random() + <span class="number">33</span>)</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="function"><span class="keyword">function</span> <span class="title">n</span>(<span class="params">r</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> n = <span class="built_in">document</span>.createDocumentFragment(), i = <span class="number">0</span>; r &gt; i; i++) &#123;</span><br><span class="line">          <span class="keyword">var</span> l = <span class="built_in">document</span>.createElement(<span class="string">"span"</span>);</span><br><span class="line">          l.textContent = e(), l.style.color = t(), n.appendChild(l)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> n</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="function"><span class="keyword">function</span> <span class="title">i</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> t = o[c.skillI];</span><br><span class="line">        c.step ? c.step-- : (c.step = g, c.prefixP &lt; l.length ? (c.prefixP &gt;= <span class="number">0</span> &amp;&amp; (c.text += l[c.prefixP]), c.prefixP++) : <span class="string">"forward"</span> === c.direction ? c.skillP &lt; t.length ? (c.text += t[c.skillP], c.skillP++) : c.delay ? c.delay-- : (c.direction = <span class="string">"backward"</span>, c.delay = a) : c.skillP &gt; <span class="number">0</span> ? (c.text = c.text.slice(<span class="number">0</span>, <span class="number">-1</span>), c.skillP--) : (c.skillI = (c.skillI + <span class="number">1</span>) % o.length, c.direction = <span class="string">"forward"</span>)), r.textContent = c.text, r.appendChild(n(c.prefixP &lt; l.length ? <span class="built_in">Math</span>.min(s, s + c.prefixP) : <span class="built_in">Math</span>.min(s, t.length - c.skillP))), setTimeout(i, d)</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">var</span> l = <span class="string">""</span>,</span><br><span class="line">      o = [<span class="string">"青青陵上柏，磊磊涧中石。"</span>, <span class="string">"人生天地间，忽如远行客。"</span>,<span class="string">"斗酒相娱乐，聊厚不为薄。"</span>, <span class="string">"驱车策驽马，游戏宛与洛。"</span>,<span class="string">"洛中何郁郁，冠带自相索。"</span>,<span class="string">"长衢罗夹巷，王侯多第宅。"</span>,<span class="string">"两宫遥相望，双阙百余尺。"</span>,<span class="string">"极宴娱心意，戚戚何所迫？"</span>].map(<span class="function"><span class="keyword">function</span> (<span class="params">r</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> r + <span class="string">""</span></span><br><span class="line">      &#125;),</span><br><span class="line">      a = <span class="number">2</span>,</span><br><span class="line">      g = <span class="number">1</span>,</span><br><span class="line">      s = <span class="number">5</span>,</span><br><span class="line">      d = <span class="number">75</span>,</span><br><span class="line">      b = [<span class="string">"rgb(110,64,170)"</span>, <span class="string">"rgb(150,61,179)"</span>, <span class="string">"rgb(191,60,175)"</span>, <span class="string">"rgb(228,65,157)"</span>, <span class="string">"rgb(254,75,131)"</span>, <span class="string">"rgb(255,94,99)"</span>, <span class="string">"rgb(255,120,71)"</span>, <span class="string">"rgb(251,150,51)"</span>, <span class="string">"rgb(226,183,47)"</span>, <span class="string">"rgb(198,214,60)"</span>, <span class="string">"rgb(175,240,91)"</span>, <span class="string">"rgb(127,246,88)"</span>, <span class="string">"rgb(82,246,103)"</span>, <span class="string">"rgb(48,239,130)"</span>, <span class="string">"rgb(29,223,163)"</span>, <span class="string">"rgb(26,199,194)"</span>, <span class="string">"rgb(35,171,216)"</span>, <span class="string">"rgb(54,140,225)"</span>, <span class="string">"rgb(76,110,219)"</span>, <span class="string">"rgb(96,84,200)"</span>],</span><br><span class="line">      c = &#123;</span><br><span class="line">        text: <span class="string">""</span>,</span><br><span class="line">        prefixP: -s,</span><br><span class="line">        skillI: <span class="number">0</span>,</span><br><span class="line">        skillP: <span class="number">0</span>,</span><br><span class="line">        direction: <span class="string">"forward"</span>,</span><br><span class="line">        delay: a,</span><br><span class="line">        step: g</span><br><span class="line">      &#125;;</span><br><span class="line">      i()</span><br><span class="line">      &#125;;</span><br><span class="line">      binft(<span class="built_in">document</span>.getElementById(<span class="string">'binft'</span>));</span><br><span class="line">  &lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure><p>最终效果：</p><fancybox><br><img src="https://cdn.jsdelivr.net/gh/TRHX/ImageHosting/ITRHX-PIC/A04/012.gif" alt="012"><br></fancybox><hr><h1 id="【08】添加字数统计和阅读时长"><a href="#【08】添加字数统计和阅读时长" class="headerlink" title=" 【08】添加字数统计和阅读时长 "></a><font color="#FF0000"> 【08】添加字数统计和阅读时长 </font></h1><p>先在博客目录下执行以下命令安装 <font color="#FF0000">hexo-wordcount</font> 插件：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> npm i --save hexo-wordcount</span><br></pre></td></tr></table></figure><p>注意：在 <a href="https://xaoxuu.com/wiki/material-x/" target="_blank" rel="noopener">Material X</a> 主题中，字数统计和阅读时长的功能我已提交 PR，在最新版本中，只需要安装插件后，在主题 <code>config.yml</code> 配置文件里，将 <code>word_count</code> 关键字设置为 <code>true</code> 即可，对于旧版本，可以通过以下方法实现：</p><p>以 <a href="https://xaoxuu.com/wiki/material-x/" target="_blank" rel="noopener">Material X</a> 主题（版本 1.2.1）为例，在 <font color="#FF0000">\themes\material-x\layout\_meta</font> 目录下创建 <font color="#FF0000">word.ejs</font> 文件，在 <font color="#FF0000">word.ejs</font> 文件中写入以下代码：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">&lt;% <span class="keyword">if</span>(isPostList || !isPostList)&#123; %&gt;</span><br><span class="line">  &lt;% <span class="keyword">if</span> (theme.word_count &amp;&amp; !post.no_word_count) &#123; %&gt;</span><br><span class="line">    &lt;div style=<span class="string">"margin-right: 10px;"</span>&gt;</span><br><span class="line">      &lt;span <span class="class"><span class="keyword">class</span></span>=<span class="string">"post-time"</span>&gt;</span><br><span class="line">        &lt;span <span class="class"><span class="keyword">class</span></span>=<span class="string">"post-meta-item-icon"</span>&gt;</span><br><span class="line">          &lt;i <span class="class"><span class="keyword">class</span></span>=<span class="string">"fa fa-keyboard"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span></span><br><span class="line">          &lt;span <span class="class"><span class="keyword">class</span></span>=<span class="string">"post-meta-item-text"</span>&gt;  字数统计: <span class="xml"><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line">          &lt;span <span class="class"><span class="keyword">class</span></span>=<span class="string">"post-count"</span>&gt;<span class="xml"><span class="tag">&lt;<span class="name">%=</span> <span class="attr">wordcount</span>(<span class="attr">post.content</span>) %&gt;</span>字<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line">        &lt;<span class="regexp">/span&gt;</span></span><br><span class="line"><span class="regexp">      &lt;/</span>span&gt;</span><br><span class="line">      &amp;nbsp; | &amp;nbsp;</span><br><span class="line">      &lt;span <span class="class"><span class="keyword">class</span></span>=<span class="string">"post-time"</span>&gt;</span><br><span class="line">        &lt;span <span class="class"><span class="keyword">class</span></span>=<span class="string">"post-meta-item-icon"</span>&gt;</span><br><span class="line">          &lt;i <span class="class"><span class="keyword">class</span></span>=<span class="string">"fa fa-hourglass-half"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span></span><br><span class="line">          &lt;span <span class="class"><span class="keyword">class</span></span>=<span class="string">"post-meta-item-text"</span>&gt;  阅读时长≈&lt;<span class="regexp">/span&gt;</span></span><br><span class="line"><span class="regexp">          &lt;span class="post-count"&gt;&lt;%= min2read(post.content) %&gt;分&lt;/</span>span&gt;</span><br><span class="line">        &lt;<span class="regexp">/span&gt;</span></span><br><span class="line"><span class="regexp">      &lt;/</span>span&gt;</span><br><span class="line">    &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">  &lt;% &#125; %&gt;</span></span><br><span class="line"><span class="regexp">&lt;% &#125; %&gt;</span></span><br></pre></td></tr></table></figure><p>然后在主题的配置文件 <font color="#FF0000">_config.yml</font> 找到 <font color="#FF0000">meta</font> 关键字，将 <font color="#FF0000">word</font> 填入 <font color="#FF0000">header</font> 中：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">meta:</span><br><span class="line">  header: [title, author, date, categories, tags, counter, word, top]</span><br><span class="line">  footer: [updated, share]</span><br></pre></td></tr></table></figure><p>最后在主题目录下的 <font color="#FF0000">_config.yml</font> 添加以下配置即可</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">word_count:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><p>效果图：</p><fancybox><br><img src="https://cdn.jsdelivr.net/gh/TRHX/ImageHosting/ITRHX-PIC/A04/036.png" alt="036"><br></fancybox><hr><p>同样的，以 <a href="https://github.com/luuman/hexo-theme-spfk" target="_blank" rel="noopener">spfk</a> 主题为例，在 <font color="#FF0000">\themes\hexo-theme-spfk\layout\_partial\post</font> 目录下创建 <font color="#FF0000">word.ejs</font> 文件，在 <font color="#FF0000">word.ejs</font> 文件中写入以下代码：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&lt;div style=<span class="string">"margin-top:10px;"</span>&gt;</span><br><span class="line">    &lt;span <span class="class"><span class="keyword">class</span></span>=<span class="string">"post-time"</span>&gt;</span><br><span class="line">      &lt;span <span class="class"><span class="keyword">class</span></span>=<span class="string">"post-meta-item-icon"</span>&gt;</span><br><span class="line">        &lt;i <span class="class"><span class="keyword">class</span></span>=<span class="string">"fa fa-keyboard-o"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span></span><br><span class="line">        &lt;span <span class="class"><span class="keyword">class</span></span>=<span class="string">"post-meta-item-text"</span>&gt;  字数统计: <span class="xml"><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line">        &lt;span <span class="class"><span class="keyword">class</span></span>=<span class="string">"post-count"</span>&gt;<span class="xml"><span class="tag">&lt;<span class="name">%=</span> <span class="attr">wordcount</span>(<span class="attr">post.content</span>) %&gt;</span>字<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line">      &lt;<span class="regexp">/span&gt;</span></span><br><span class="line"><span class="regexp">    &lt;/</span>span&gt;</span><br><span class="line">    &amp;nbsp; | &amp;nbsp;</span><br><span class="line">    &lt;span <span class="class"><span class="keyword">class</span></span>=<span class="string">"post-time"</span>&gt;</span><br><span class="line">      &lt;span <span class="class"><span class="keyword">class</span></span>=<span class="string">"post-meta-item-icon"</span>&gt;</span><br><span class="line">        &lt;i <span class="class"><span class="keyword">class</span></span>=<span class="string">"fa fa-hourglass-half"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span></span><br><span class="line">        &lt;span <span class="class"><span class="keyword">class</span></span>=<span class="string">"post-meta-item-text"</span>&gt;  阅读时长: <span class="xml"><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line">        &lt;span <span class="class"><span class="keyword">class</span></span>=<span class="string">"post-count"</span>&gt;<span class="xml"><span class="tag">&lt;<span class="name">%=</span> <span class="attr">min2read</span>(<span class="attr">post.content</span>) %&gt;</span>分<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line">      &lt;<span class="regexp">/span&gt;</span></span><br><span class="line"><span class="regexp">    &lt;/</span>span&gt;</span><br><span class="line">&lt;<span class="regexp">/div&gt;</span></span><br></pre></td></tr></table></figure><p>然后在 <font color="#FF0000">\themes\hexo-theme-spfk\layout\_partial\article.ejs</font> 中适当位置添加以下代码：</p><fancybox><br><img src="https://cdn.jsdelivr.net/gh/TRHX/ImageHosting/ITRHX-PIC/A04/013.png" alt="013"><br></fancybox><p>最后在主题目录下的 <font color="#FF0000">_config.yml</font> 添加以下配置</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">word_count:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><p>如果显示的位置不好，可以自行更改其位置，成功配置后的效果如下：</p><fancybox><br><img src="https://cdn.jsdelivr.net/gh/TRHX/ImageHosting/ITRHX-PIC/A04/014.png" alt="014"><br></fancybox><fancybox><br><img src="https://cdn.jsdelivr.net/gh/TRHX/ImageHosting/ITRHX-PIC/A04/015.png" alt="015"><br></fancybox><p>另外：要在博客底部显示所有文章的总字数，可以<a href="https://www.npmjs.com/package/hexo-wordcount" target="_blank" rel="noopener">点击此处</a>，根据你博客底部文件的类型选择相应的代码放在适当的位置即可，前提是要安装好 <font color="#FF0000">hexo-wordcount</font> 插件，例如我使用 <a href="https://xaoxuu.com/wiki/material-x/" target="_blank" rel="noopener">Material X</a> 主题，在 <font color="#FF0000">\themes\material-x\layout\_partial</font> 目录下的 <font color="#FF0000">footer.ejs</font> 文件中添加如下代码：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;i <span class="class"><span class="keyword">class</span></span>=<span class="string">"fas fa-chart-area"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span></span><br><span class="line">&lt;span <span class="class"><span class="keyword">class</span></span>=<span class="string">"post-count"</span>&gt;字数统计：&lt;%= totalcount(site) %&gt;<span class="xml"><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br></pre></td></tr></table></figure><p>实现效果如下：</p><fancybox><br><img src="https://cdn.jsdelivr.net/gh/TRHX/ImageHosting/ITRHX-PIC/A04/016.png" alt="016"><br></fancybox><hr><h1 id="【09】添加背景音乐"><a href="#【09】添加背景音乐" class="headerlink" title=" 【09】添加背景音乐 "></a><font color="#FF0000"> 【09】添加背景音乐 </font></h1><p>打开网页版<a href="https://music.163.com/" target="_blank" rel="noopener">网易云音乐</a>，选择你准备添加的背景音乐，点击生成外链播放器，前提是要有版权，不然是无法生成外链播放器的，复制底下的HTML代码</p><fancybox><br><img src="https://cdn.jsdelivr.net/gh/TRHX/ImageHosting/ITRHX-PIC/A04/017.png" alt="017"><br></fancybox><fancybox><br><img src="https://cdn.jsdelivr.net/gh/TRHX/ImageHosting/ITRHX-PIC/A04/018.png" alt="018"><br></fancybox><p>然后将此代码放到你想要放的地方，比如放在博客的左侧，则打开 <font color="#FF0000">\themes\hexo-theme-spfk\layout\_partial\left-col.ejs</font> 文件，将复制的HTML代码粘贴进去，再进行适当的位置设置让播放器更美观，其中 <font color="#FF0000">auto=1</font> 表示打开网页自动播放音乐，<font color="#FF0000">auto=0</font> 表示关闭自动播放音乐</p><fancybox><br><img src="https://cdn.jsdelivr.net/gh/TRHX/ImageHosting/ITRHX-PIC/A04/019.png" alt="019"><br></fancybox><p>最后效果如下：</p><fancybox><br><img src="https://cdn.jsdelivr.net/gh/TRHX/ImageHosting/ITRHX-PIC/A04/020.png" alt="020"><br></fancybox><p>这种网易云音乐外链的方式有很多局限性，因此推荐使用<font color="#FF0000">aplayer</font>，GitHub地址为：<a href="https://github.com/MoePlayer/APlayer" target="_blank" rel="noopener">https://github.com/MoePlayer/APlayer</a> ，参考教程：<a href="https://blog.yleao.com/2018/0902/hexo%E4%B8%8A%E7%9A%84aplayer%E5%BA%94%E7%94%A8.html" target="_blank" rel="noopener">《hexo上的aplayer应用》</a></p><hr><h1 id="【10】添加网站运行时间"><a href="#【10】添加网站运行时间" class="headerlink" title=" 【10】添加网站运行时间 "></a><font color="#FF0000"> 【10】添加网站运行时间 </font></h1><p>一个比较好的小功能，可以看见自己的博客运行多久了，时间一天天的增加，成就感也会一天天增加的<br>在 <font color="#FF0000">\themes\hexo-theme-spfk\layout\_partial\footer.ejs</font> 文件下添加以下代码：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&lt;span id=<span class="string">"timeDate"</span>&gt;载入天数...&lt;<span class="regexp">/span&gt;&lt;span id="times"&gt;载入时分秒...&lt;/</span>span&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="keyword">var</span> now = <span class="keyword">new</span> <span class="built_in">Date</span>(); </span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">createtime</span>(<span class="params"></span>) </span>&#123; </span><br><span class="line">        <span class="keyword">var</span> grt= <span class="keyword">new</span> <span class="built_in">Date</span>(<span class="string">"08/10/2018 17:38:00"</span>);<span class="comment">//在此处修改你的建站时间，格式：月/日/年 时:分:秒</span></span><br><span class="line">        now.setTime(now.getTime()+<span class="number">250</span>); </span><br><span class="line">        days = (now - grt ) / <span class="number">1000</span> / <span class="number">60</span> / <span class="number">60</span> / <span class="number">24</span>; dnum = <span class="built_in">Math</span>.floor(days); </span><br><span class="line">        hours = (now - grt ) / <span class="number">1000</span> / <span class="number">60</span> / <span class="number">60</span> - (<span class="number">24</span> * dnum); hnum = <span class="built_in">Math</span>.floor(hours); </span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">String</span>(hnum).length ==<span class="number">1</span> )&#123;hnum = <span class="string">"0"</span> + hnum;&#125; minutes = (now - grt ) / <span class="number">1000</span> /<span class="number">60</span> - (<span class="number">24</span> * <span class="number">60</span> * dnum) - (<span class="number">60</span> * hnum); </span><br><span class="line">        mnum = <span class="built_in">Math</span>.floor(minutes); <span class="keyword">if</span>(<span class="built_in">String</span>(mnum).length ==<span class="number">1</span> )&#123;mnum = <span class="string">"0"</span> + mnum;&#125; </span><br><span class="line">        seconds = (now - grt ) / <span class="number">1000</span> - (<span class="number">24</span> * <span class="number">60</span> * <span class="number">60</span> * dnum) - (<span class="number">60</span> * <span class="number">60</span> * hnum) - (<span class="number">60</span> * mnum); </span><br><span class="line">        snum = <span class="built_in">Math</span>.round(seconds); <span class="keyword">if</span>(<span class="built_in">String</span>(snum).length ==<span class="number">1</span> )&#123;snum = <span class="string">"0"</span> + snum;&#125; </span><br><span class="line">        <span class="built_in">document</span>.getElementById(<span class="string">"timeDate"</span>).innerHTML = <span class="string">"本站已安全运行 "</span>+dnum+<span class="string">" 天 "</span>; </span><br><span class="line">        <span class="built_in">document</span>.getElementById(<span class="string">"times"</span>).innerHTML = hnum + <span class="string">" 小时 "</span> + mnum + <span class="string">" 分 "</span> + snum + <span class="string">" 秒"</span>; </span><br><span class="line">    &#125; </span><br><span class="line">setInterval(<span class="string">"createtime()"</span>,<span class="number">250</span>);</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure><p>最后效果如下：</p><fancybox><br><img src="https://cdn.jsdelivr.net/gh/TRHX/ImageHosting/ITRHX-PIC/A04/021.png" alt="021"><br></fancybox><hr><h1 id="【11】添加百度统计"><a href="#【11】添加百度统计" class="headerlink" title=" 【11】添加百度统计 "></a><font color="#FF0000"> 【11】添加百度统计 </font></h1><p>百度统计是百度推出的一款免费的专业网站流量分析工具，能够告诉用户访客是如何找到并浏览用户的网站，在网站上做了些什么，非常有趣，接下来我们把百度统计添加到自己博客当中</p><p>访问<a href="https://tongji.baidu.com" target="_blank" rel="noopener">百度统计首页</a>，注册一个账号后登陆，添加你的博客网站</p><fancybox><br><img src="https://cdn.jsdelivr.net/gh/TRHX/ImageHosting/ITRHX-PIC/A04/022.png" alt="022"><br></fancybox><p>接着点击代码获取，复制该代码</p><fancybox><br><img src="https://cdn.jsdelivr.net/gh/TRHX/ImageHosting/ITRHX-PIC/A04/023.png" alt="023"><br></fancybox><p>然后到目录 <font color="#FF0000">\Hexo\themes\hexo-theme-spfk\layout\_partial</font> 下新建一个 <font color="#FF0000">baidu-analytics.ejs</font> 文件，里面粘贴你刚刚复制的代码</p><fancybox><br><img src="https://cdn.jsdelivr.net/gh/TRHX/ImageHosting/ITRHX-PIC/A04/024.png" alt="024"><br></fancybox><p>修改主题文件夹下的 <font color="#FF0000">_config.yml</font> 文件，将你的key（图中涂掉部分）填写进去：</p><fancybox><br><img src="https://cdn.jsdelivr.net/gh/TRHX/ImageHosting/ITRHX-PIC/A04/025.png" alt="025"><br></fancybox><p>所有操作完成后可以在百度统计管理页面检查代码是否安装成功，如果代码安装正确，一般20分钟后，可以查看网站分析数据</p><fancybox><br><img src="https://cdn.jsdelivr.net/gh/TRHX/ImageHosting/ITRHX-PIC/A04/026.png" alt="026"><br></fancybox><p>另外推荐：<a href="https://web.umeng.com/main.php?c=user&amp;a=index" target="_blank" rel="noopener">友盟</a>，2010年4月在北京成立，安全、可靠、公正、第三方的网站流量统计分析系统</p><hr><h1 id="【12】浏览器网页标题恶搞"><a href="#【12】浏览器网页标题恶搞" class="headerlink" title="【12】浏览器网页标题恶搞"></a><font color="#FF0000">【12】浏览器网页标题恶搞</font></h1><p>当用户访问你的博客时点击到了其他网页，我们可以恶搞一下网页标题，呼唤用户回来，首先在目录 <font color="#FF0000">\themes\material-x\source\js</font> 下新建一个 <font color="#FF0000">FunnyTitle.js</font> 文件，在里面填写如下代码：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 浏览器搞笑标题</span></span><br><span class="line"><span class="keyword">var</span> OriginTitle = <span class="built_in">document</span>.title;</span><br><span class="line"><span class="keyword">var</span> titleTime;</span><br><span class="line"><span class="built_in">document</span>.addEventListener(<span class="string">'visibilitychange'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">document</span>.hidden) &#123;</span><br><span class="line">        $(<span class="string">'[rel="icon"]'</span>).attr(<span class="string">'href'</span>, <span class="string">"/funny.ico"</span>);</span><br><span class="line">        <span class="built_in">document</span>.title = <span class="string">'╭(°A°`)╮ 页面崩溃啦 ~'</span>;</span><br><span class="line">        clearTimeout(titleTime);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        $(<span class="string">'[rel="icon"]'</span>).attr(<span class="string">'href'</span>, <span class="string">"/favicon.ico"</span>);</span><br><span class="line">        <span class="built_in">document</span>.title = <span class="string">'(ฅ&gt;ω&lt;*ฅ) 噫又好啦 ~'</span> + OriginTitle;</span><br><span class="line">        titleTime = setTimeout(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="built_in">document</span>.title = OriginTitle;</span><br><span class="line">        &#125;, <span class="number">2000</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>其中 <code>funny.ico</code> 是用户切换到其他标签后你网站的图标，<code>favicon.ico</code> 是正常图标，然后在 <font color="#FF0000">\themes\material-x\layout\layout.ejs</font> 文件中添加如下代码：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--浏览器搞笑标题--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"/js/FunnyTitle.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>再次部署博客后就可以看见标题搞笑的效果了：</p><fancybox><br><img src="https://cdn.jsdelivr.net/gh/TRHX/ImageHosting/ITRHX-PIC/A04/027_1.png" alt="027"><br></fancybox><fancybox><br><img src="https://cdn.jsdelivr.net/gh/TRHX/ImageHosting/ITRHX-PIC/A04/028_1.png" alt="028"><br></fancybox><hr><h1 id="【13】背景添加动态线条效果"><a href="#【13】背景添加动态线条效果" class="headerlink" title="【13】背景添加动态线条效果 "></a><font color="#FF0000">【13】背景添加动态线条效果 </font></h1><p>在 <font color="#FF0000">\Hexo\themes\hexo-theme-spfk\layout\layout.ejs</font> 文件中添加如下代码：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--动态线条背景--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span></span></span><br><span class="line"><span class="tag"><span class="attr">color</span>=<span class="string">"220,220,220"</span> <span class="attr">opacity</span>=<span class="string">'0.7'</span> <span class="attr">zIndex</span>=<span class="string">"-2"</span> <span class="attr">count</span>=<span class="string">"200"</span> <span class="attr">src</span>=<span class="string">"//cdn.bootcss.com/canvas-nest.js/1.0.0/canvas-nest.min.js"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>其中：</p><ul><li>color：表示线条颜色，三个数字分别为(R,G,B)，默认：（0,0,0）</li><li>opacity：表示线条透明度（0~1），默认：0.5</li><li>count：表示线条的总数量，默认：150</li><li>zIndex：表示背景的z-index属性，css属性用于控制所在层的位置，默认：-1</li></ul><p>最终实现效果：</p><fancybox><br><img src="https://cdn.jsdelivr.net/gh/TRHX/ImageHosting/ITRHX-PIC/A04/029.png" alt="029"><br></fancybox><hr><h1 id="【14】添加人体时钟"><a href="#【14】添加人体时钟" class="headerlink" title="【14】添加人体时钟 "></a><font color="#FF0000">【14】添加人体时钟 </font></h1><p>无意中发现了个有趣的人体时钟 HONE HONE CLOCK，作者是个日本人，<a href="http://chabudai.org/blog/" target="_blank" rel="noopener">点击此处</a>访问作者博客，<a href="http://chabudai.org/blog/?p=59" target="_blank" rel="noopener">点击此处</a>在作者原博客上查看动态样式，<a href="http://chabudai.sakura.ne.jp/blogparts/honehoneclock/honehone_clock_tr.swf" target="_blank" rel="noopener">点击此处</a>查看动态大图，如果你的博客上有合适的地方，加上一个人体时钟会很有趣的</p><fancybox><br><img src="https://cdn.jsdelivr.net/gh/TRHX/ImageHosting/ITRHX-PIC/A04/030.png" alt="030"><br></fancybox><p>实现代码：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--人体时钟背景透明--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">charset</span>=<span class="string">"Shift_JIS"</span> <span class="attr">src</span>=<span class="string">"http://chabudai.sakura.ne.jp/blogparts/honehoneclock/honehone_clock_tr.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--人体时钟背景白--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">charset</span>=<span class="string">"Shift_JIS"</span> <span class="attr">src</span>=<span class="string">"http://chabudai.sakura.ne.jp/blogparts/honehoneclock/honehone_clock_wh.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>其他网页小挂件推荐：</p><ul><li><a href="http://abowman.com/" target="_blank" rel="noopener">http://abowman.com/</a> 里面有很多有趣的小挂件，可以养养鱼、龟、狗、仓鼠等各式各样的虚拟宠物，能根据你的鼠标指针位置移动，直接复制代码就可以用</li><li><a href="http://www.revolvermaps.com/" target="_blank" rel="noopener">http://www.revolvermaps.com/</a> 它提供网站访客地理信息，可以以2D、3D等形式显示</li><li><a href="http://www.amazingcounters.com/" target="_blank" rel="noopener">http://www.amazingcounters.com/</a> 免费网站计数器，有非常多的样式供你选择，可以设置计数器初始数值，可以设置按访问量计数，也可以按独立访问者计数</li><li><a href="https://www.seniverse.com/widget/get" target="_blank" rel="noopener">https://www.seniverse.com/widget/get</a> 心知天气提供基于Web的免费天气插件，可以为你的网站添加一项简洁美观的天气预报功能，并自动适配PC和手机上的浏览</li></ul><hr><h1 id="【15】添加RSS订阅"><a href="#【15】添加RSS订阅" class="headerlink" title="【15】添加RSS订阅 "></a><font color="#FF0000">【15】添加RSS订阅 </font></h1><p>RSS订阅是站点用来和其他站点之间共享内容的一种简易方式，即Really Simple Syndication（简易信息聚合），如果不会使用，可以参见百度百科：<a href="https://baike.baidu.com/item/RSS%E8%AE%A2%E9%98%85/663114" target="_blank" rel="noopener">https://baike.baidu.com/item/RSS%E8%AE%A2%E9%98%85/663114</a> ；首先我们安装feed插件，在本地hexo目录下右键<code>git bash here</code>，输入以下命令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> npm install hexo-generator-feed</span></span><br></pre></td></tr></table></figure><p>等待安装完成后，打开hexo目录下配置文件的<code>_config.yml</code>，在末尾添加以下配置：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Extensions</span></span><br><span class="line"><span class="comment">## Plugins: http://hexo.io/plugins/</span></span><br><span class="line"><span class="comment">#RSS订阅</span></span><br><span class="line"><span class="attr">plugin:</span></span><br><span class="line"><span class="bullet">-</span> <span class="string">hexo-generator-feed</span></span><br><span class="line"><span class="comment">#Feed Atom</span></span><br><span class="line"><span class="attr">feed:</span></span><br><span class="line"><span class="attr">type:</span> <span class="string">atom</span></span><br><span class="line"><span class="attr">path:</span> <span class="string">atom.xml</span></span><br><span class="line"><span class="attr">limit:</span> <span class="number">20</span></span><br></pre></td></tr></table></figure><p>随后打开主题配置文件<code>_config.yml</code>，添加以下配置：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">rss:</span> <span class="string">/atom.xml</span></span><br></pre></td></tr></table></figure><p>至此，RSS订阅功能添加完成</p><hr><h1 id="【16】添加网站雪花飘落效果"><a href="#【16】添加网站雪花飘落效果" class="headerlink" title="【16】添加网站雪花飘落效果 "></a><font color="#FF0000">【16】添加网站雪花飘落效果 </font></h1><p>样式一和样式二分别如下：</p><fancybox><br><img src="https://cdn.jsdelivr.net/gh/TRHX/ImageHosting/ITRHX-PIC/A04/031.png" alt="031样式一"><br></fancybox><fancybox><br><img src="https://cdn.jsdelivr.net/gh/TRHX/ImageHosting/ITRHX-PIC/A04/032.png" alt="032样式二"><br></fancybox><p>实现方法：在 <font color="#FF0000">\Hexo\themes\hexo-theme-spfk\source\js</font> 目录下新建一个 <font color="#FF0000">snow.js</font> 文件，粘贴以下代码：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*样式一*/</span></span><br><span class="line">(<span class="function"><span class="keyword">function</span>(<span class="params">$</span>)</span>&#123;</span><br><span class="line">$.fn.snow = <span class="function"><span class="keyword">function</span>(<span class="params">options</span>)</span>&#123;</span><br><span class="line"><span class="keyword">var</span> $flake = $(<span class="string">'&lt;div id="snowbox" /&gt;'</span>).css(&#123;<span class="string">'position'</span>: <span class="string">'absolute'</span>,<span class="string">'z-index'</span>:<span class="string">'9999'</span>, <span class="string">'top'</span>: <span class="string">'-50px'</span>&#125;).html(<span class="string">'&amp;#10052;'</span>),</span><br><span class="line">documentHeight = $(<span class="built_in">document</span>).height(),</span><br><span class="line">documentWidth= $(<span class="built_in">document</span>).width(),</span><br><span class="line">defaults = &#123;</span><br><span class="line">minSize: <span class="number">10</span>,</span><br><span class="line">maxSize: <span class="number">20</span>,</span><br><span class="line">newOn: <span class="number">1000</span>,</span><br><span class="line">flakeColor: <span class="string">"#AFDAEF"</span> <span class="comment">/* 此处可以定义雪花颜色，若要白色可以改为#FFFFFF */</span></span><br><span class="line">&#125;,</span><br><span class="line">options= $.extend(&#123;&#125;, defaults, options);</span><br><span class="line"><span class="keyword">var</span> interval= setInterval( <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="keyword">var</span> startPositionLeft = <span class="built_in">Math</span>.random() * documentWidth - <span class="number">100</span>,</span><br><span class="line">startOpacity = <span class="number">0.5</span> + <span class="built_in">Math</span>.random(),</span><br><span class="line">sizeFlake = options.minSize + <span class="built_in">Math</span>.random() * options.maxSize,</span><br><span class="line">endPositionTop = documentHeight - <span class="number">200</span>,</span><br><span class="line">endPositionLeft = startPositionLeft - <span class="number">500</span> + <span class="built_in">Math</span>.random() * <span class="number">500</span>,</span><br><span class="line">durationFall = documentHeight * <span class="number">10</span> + <span class="built_in">Math</span>.random() * <span class="number">5000</span>;</span><br><span class="line">$flake.clone().appendTo(<span class="string">'body'</span>).css(&#123;</span><br><span class="line">left: startPositionLeft,</span><br><span class="line">opacity: startOpacity,</span><br><span class="line"><span class="string">'font-size'</span>: sizeFlake,</span><br><span class="line">color: options.flakeColor</span><br><span class="line">&#125;).animate(&#123;</span><br><span class="line">top: endPositionTop,</span><br><span class="line">left: endPositionLeft,</span><br><span class="line">opacity: <span class="number">0.2</span></span><br><span class="line">&#125;,durationFall,<span class="string">'linear'</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">$(<span class="keyword">this</span>).remove()</span><br><span class="line">&#125;);</span><br><span class="line">&#125;, options.newOn);</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;)(jQuery);</span><br><span class="line">$(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    $.fn.snow(&#123; </span><br><span class="line">    minSize: <span class="number">5</span>, <span class="comment">/* 定义雪花最小尺寸 */</span></span><br><span class="line">    maxSize: <span class="number">50</span>,<span class="comment">/* 定义雪花最大尺寸 */</span></span><br><span class="line">    newOn: <span class="number">300</span>  <span class="comment">/* 定义密集程度，数字越小越密集 */</span></span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*样式二*/</span></span><br><span class="line"><span class="comment">/* 控制下雪 */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">snowFall</span>(<span class="params">snow</span>) </span>&#123;</span><br><span class="line">    <span class="comment">/* 可配置属性 */</span></span><br><span class="line">    snow = snow || &#123;&#125;;</span><br><span class="line">    <span class="keyword">this</span>.maxFlake = snow.maxFlake || <span class="number">200</span>;   <span class="comment">/* 最多片数 */</span></span><br><span class="line">    <span class="keyword">this</span>.flakeSize = snow.flakeSize || <span class="number">10</span>;  <span class="comment">/* 雪花形状 */</span></span><br><span class="line">    <span class="keyword">this</span>.fallSpeed = snow.fallSpeed || <span class="number">1</span>;   <span class="comment">/* 坠落速度 */</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* 兼容写法 */</span></span><br><span class="line">requestAnimationFrame = <span class="built_in">window</span>.requestAnimationFrame ||</span><br><span class="line">    <span class="built_in">window</span>.mozRequestAnimationFrame ||</span><br><span class="line">    <span class="built_in">window</span>.webkitRequestAnimationFrame ||</span><br><span class="line">    <span class="built_in">window</span>.msRequestAnimationFrame ||</span><br><span class="line">    <span class="built_in">window</span>.oRequestAnimationFrame ||</span><br><span class="line">    <span class="function"><span class="keyword">function</span>(<span class="params">callback</span>) </span>&#123; setTimeout(callback, <span class="number">1000</span> / <span class="number">60</span>); &#125;;</span><br><span class="line"></span><br><span class="line">cancelAnimationFrame = <span class="built_in">window</span>.cancelAnimationFrame ||</span><br><span class="line">    <span class="built_in">window</span>.mozCancelAnimationFrame ||</span><br><span class="line">    <span class="built_in">window</span>.webkitCancelAnimationFrame ||</span><br><span class="line">    <span class="built_in">window</span>.msCancelAnimationFrame ||</span><br><span class="line"><span class="built_in">window</span>.oCancelAnimationFrame;</span><br><span class="line"><span class="comment">/* 开始下雪 */</span></span><br><span class="line">snowFall.prototype.start = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="comment">/* 创建画布 */</span></span><br><span class="line">    snowCanvas.apply(<span class="keyword">this</span>);</span><br><span class="line">    <span class="comment">/* 创建雪花形状 */</span></span><br><span class="line">    createFlakes.apply(<span class="keyword">this</span>);</span><br><span class="line">    <span class="comment">/* 画雪 */</span></span><br><span class="line">    drawSnow.apply(<span class="keyword">this</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* 创建画布 */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">snowCanvas</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">/* 添加Dom结点 */</span></span><br><span class="line">    <span class="keyword">var</span> snowcanvas = <span class="built_in">document</span>.createElement(<span class="string">"canvas"</span>);</span><br><span class="line">    snowcanvas.id = <span class="string">"snowfall"</span>;</span><br><span class="line">    snowcanvas.width = <span class="built_in">window</span>.innerWidth;</span><br><span class="line">    snowcanvas.height = <span class="built_in">document</span>.body.clientHeight;</span><br><span class="line">    snowcanvas.setAttribute(<span class="string">"style"</span>, <span class="string">"position:absolute; top: 0; left: 0; z-index: 1; pointer-events: none;"</span>);</span><br><span class="line">    <span class="built_in">document</span>.getElementsByTagName(<span class="string">"body"</span>)[<span class="number">0</span>].appendChild(snowcanvas);</span><br><span class="line">    <span class="keyword">this</span>.canvas = snowcanvas;</span><br><span class="line">    <span class="keyword">this</span>.ctx = snowcanvas.getContext(<span class="string">"2d"</span>);</span><br><span class="line">    <span class="comment">/* 窗口大小改变的处理 */</span></span><br><span class="line">    <span class="built_in">window</span>.onresize = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        snowcanvas.width = <span class="built_in">window</span>.innerWidth;</span><br><span class="line">        <span class="comment">/* snowcanvas.height = window.innerHeight */</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* 雪运动对象 */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">flakeMove</span>(<span class="params">canvasWidth, canvasHeight, flakeSize, fallSpeed</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.x = <span class="built_in">Math</span>.floor(<span class="built_in">Math</span>.random() * canvasWidth);   <span class="comment">/* x坐标 */</span></span><br><span class="line">    <span class="keyword">this</span>.y = <span class="built_in">Math</span>.floor(<span class="built_in">Math</span>.random() * canvasHeight);  <span class="comment">/* y坐标 */</span></span><br><span class="line">    <span class="keyword">this</span>.size = <span class="built_in">Math</span>.random() * flakeSize + <span class="number">2</span>;          <span class="comment">/* 形状 */</span></span><br><span class="line">    <span class="keyword">this</span>.maxSize = flakeSize;                           <span class="comment">/* 最大形状 */</span></span><br><span class="line">    <span class="keyword">this</span>.speed = <span class="built_in">Math</span>.random() * <span class="number">1</span> + fallSpeed;         <span class="comment">/* 坠落速度 */</span></span><br><span class="line">    <span class="keyword">this</span>.fallSpeed = fallSpeed;                         <span class="comment">/* 坠落速度 */</span></span><br><span class="line">    <span class="keyword">this</span>.velY = <span class="keyword">this</span>.speed;                             <span class="comment">/* Y方向速度 */</span></span><br><span class="line">    <span class="keyword">this</span>.velX = <span class="number">0</span>;                                      <span class="comment">/* X方向速度 */</span></span><br><span class="line">    <span class="keyword">this</span>.stepSize = <span class="built_in">Math</span>.random() / <span class="number">30</span>;                 <span class="comment">/* 步长 */</span></span><br><span class="line">    <span class="keyword">this</span>.step = <span class="number">0</span>                                       <span class="comment">/* 步数 */</span></span><br><span class="line">&#125;</span><br><span class="line">flakeMove.prototype.update = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> x = <span class="keyword">this</span>.x,</span><br><span class="line">        y = <span class="keyword">this</span>.y;</span><br><span class="line">    <span class="comment">/* 左右摆动(余弦) */</span></span><br><span class="line">    <span class="keyword">this</span>.velX *= <span class="number">0.98</span>;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.velY &lt;= <span class="keyword">this</span>.speed) &#123;</span><br><span class="line">        <span class="keyword">this</span>.velY = <span class="keyword">this</span>.speed</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">this</span>.velX += <span class="built_in">Math</span>.cos(<span class="keyword">this</span>.step += <span class="number">.05</span>) * <span class="keyword">this</span>.stepSize;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">this</span>.y += <span class="keyword">this</span>.velY;</span><br><span class="line">    <span class="keyword">this</span>.x += <span class="keyword">this</span>.velX;</span><br><span class="line">    <span class="comment">/* 飞出边界的处理 */</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.x &gt;= canvas.width || <span class="keyword">this</span>.x &lt;= <span class="number">0</span> || <span class="keyword">this</span>.y &gt;= canvas.height || <span class="keyword">this</span>.y &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">this</span>.reset(canvas.width, canvas.height)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">/* 飞出边界-放置最顶端继续坠落 */</span></span><br><span class="line">flakeMove.prototype.reset = <span class="function"><span class="keyword">function</span>(<span class="params">width, height</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.x = <span class="built_in">Math</span>.floor(<span class="built_in">Math</span>.random() * width);</span><br><span class="line">    <span class="keyword">this</span>.y = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">this</span>.size = <span class="built_in">Math</span>.random() * <span class="keyword">this</span>.maxSize + <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">this</span>.speed = <span class="built_in">Math</span>.random() * <span class="number">1</span> + <span class="keyword">this</span>.fallSpeed;</span><br><span class="line">    <span class="keyword">this</span>.velY = <span class="keyword">this</span>.speed;</span><br><span class="line">    <span class="keyword">this</span>.velX = <span class="number">0</span>;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// 渲染雪花-随机形状（此处可修改雪花颜色！！！）</span></span><br><span class="line">flakeMove.prototype.render = <span class="function"><span class="keyword">function</span>(<span class="params">ctx</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> snowFlake = ctx.createRadialGradient(<span class="keyword">this</span>.x, <span class="keyword">this</span>.y, <span class="number">0</span>, <span class="keyword">this</span>.x, <span class="keyword">this</span>.y, <span class="keyword">this</span>.size);</span><br><span class="line">    snowFlake.addColorStop(<span class="number">0</span>, <span class="string">"rgba(255, 255, 255, 0.9)"</span>);  <span class="comment">/* 此处是雪花颜色，默认是白色 */</span></span><br><span class="line">    snowFlake.addColorStop(<span class="number">.5</span>, <span class="string">"rgba(255, 255, 255, 0.5)"</span>); <span class="comment">/* 若要改为其他颜色，请自行查 */</span></span><br><span class="line">    snowFlake.addColorStop(<span class="number">1</span>, <span class="string">"rgba(255, 255, 255, 0)"</span>);    <span class="comment">/* 找16进制的RGB 颜色代码。 */</span></span><br><span class="line">    ctx.save();</span><br><span class="line">    ctx.fillStyle = snowFlake;</span><br><span class="line">    ctx.beginPath();</span><br><span class="line">    ctx.arc(<span class="keyword">this</span>.x, <span class="keyword">this</span>.y, <span class="keyword">this</span>.size, <span class="number">0</span>, <span class="built_in">Math</span>.PI * <span class="number">2</span>);</span><br><span class="line">    ctx.fill();</span><br><span class="line">    ctx.restore();</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">/* 创建雪花-定义形状 */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">createFlakes</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> maxFlake = <span class="keyword">this</span>.maxFlake,</span><br><span class="line">        flakes = <span class="keyword">this</span>.flakes = [],</span><br><span class="line">        canvas = <span class="keyword">this</span>.canvas;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; maxFlake; i++) &#123;</span><br><span class="line">        flakes.push(<span class="keyword">new</span> flakeMove(canvas.width, canvas.height, <span class="keyword">this</span>.flakeSize, <span class="keyword">this</span>.fallSpeed))</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* 画雪 */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">drawSnow</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> maxFlake = <span class="keyword">this</span>.maxFlake,</span><br><span class="line">        flakes = <span class="keyword">this</span>.flakes;</span><br><span class="line">    ctx = <span class="keyword">this</span>.ctx, canvas = <span class="keyword">this</span>.canvas, that = <span class="keyword">this</span>;</span><br><span class="line">    <span class="comment">/* 清空雪花 */</span></span><br><span class="line">    ctx.clearRect(<span class="number">0</span>, <span class="number">0</span>, canvas.width, canvas.height);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> e = <span class="number">0</span>; e &lt; maxFlake; e++) &#123;</span><br><span class="line">        flakes[e].update();</span><br><span class="line">        flakes[e].render(ctx);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/*  一帧一帧的画 */</span></span><br><span class="line">    <span class="keyword">this</span>.loop = requestAnimationFrame(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        drawSnow.apply(that);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* 调用及控制方法 */</span></span><br><span class="line"><span class="keyword">var</span> snow = <span class="keyword">new</span> snowFall(&#123;<span class="attr">maxFlake</span>:<span class="number">60</span>&#125;);</span><br><span class="line">snow.start();</span><br></pre></td></tr></table></figure><p>然后在 <font color="#FF0000">\Hexo\themes\hexo-theme-spfk\layout\layout.ejs</font> 文件里引用即可：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 雪花特效 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"\js\snow.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>如果没效果，请确认网页是否已载入JQurey，如果没有请在下雪代码之前引入JQ即可：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"http://libs.baidu.com/jquery/1.8.3/jquery.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"http://libs.baidu.com/jquery/1.8.3/jquery.min.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>原文链接：<a href="https://ihuan.me/2172.html" target="_blank" rel="noopener">《分享两种圣诞节雪花特效JS代码(网站下雪效果)》</a></p><hr><h1 id="【17】添加-Fork-me-on-GitHub-效果"><a href="#【17】添加-Fork-me-on-GitHub-效果" class="headerlink" title="【17】添加 Fork me on GitHub 效果 "></a><font color="#FF0000">【17】添加 Fork me on GitHub 效果 </font></h1><p>效果图：</p><fancybox><br><img src="https://cdn.jsdelivr.net/gh/TRHX/ImageHosting/ITRHX-PIC/A04/033.png" alt="033"><br></fancybox><p><a href="https://blog.github.com/2008-12-19-github-ribbons/" target="_blank" rel="noopener">点击此处</a>可以查看更多样式，将相应样式的代码复制到你想要放的地方就OK了，代码里的链接也要替换成你的，更多创意，比如 Follow me on CSDN ，只需要用PS改掉图片里的文字，替换掉相应链接即可</p><hr><h1 id="【18】添加背景动态彩带效果"><a href="#【18】添加背景动态彩带效果" class="headerlink" title="【18】添加背景动态彩带效果 "></a><font color="#FF0000">【18】添加背景动态彩带效果 </font></h1><p>样式一是鼠标点击后彩带自动更换样式，样式二是飘动的彩带：</p><fancybox><br><img src="https://cdn.jsdelivr.net/gh/TRHX/ImageHosting/ITRHX-PIC/A04/034.png" alt="034"><br></fancybox><p>实现方法：在 <font color="#FF0000">\themes\material-x\layout\layout.ejs</font> 文件的<font color="#FF0000">body</font>前面添加如下代码：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 样式一（鼠标点击更换样式） --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://g.joyinshare.com/hc/ribbon.min.js"</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 样式二（飘动的彩带） --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://g.joyinshare.com/hc/piao.js"</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><hr><h1 id="【19】添加背景代码雨特效"><a href="#【19】添加背景代码雨特效" class="headerlink" title="【19】添加背景代码雨特效 "></a><font color="#FF0000">【19】添加背景代码雨特效 </font></h1><p>新建 <code>DigitalRain.js</code>，写入以下代码：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="comment">//获取画布对象</span></span><br><span class="line">    <span class="keyword">var</span> canvas = <span class="built_in">document</span>.getElementById(<span class="string">"canvas"</span>);</span><br><span class="line">    <span class="comment">//获取画布的上下文</span></span><br><span class="line">    <span class="keyword">var</span> context =canvas.getContext(<span class="string">"2d"</span>);</span><br><span class="line">    <span class="keyword">var</span> s = <span class="built_in">window</span>.screen;</span><br><span class="line">    <span class="keyword">var</span> W = canvas.width = s.width;</span><br><span class="line">    <span class="keyword">var</span> H = canvas.height;</span><br><span class="line">    <span class="comment">//获取浏览器屏幕的宽度和高度</span></span><br><span class="line">    <span class="comment">//var W = window.innerWidth;</span></span><br><span class="line">    <span class="comment">//var H = window.innerHeight;</span></span><br><span class="line">    <span class="comment">//设置canvas的宽度和高度</span></span><br><span class="line">    canvas.width = W;</span><br><span class="line">    canvas.height = H;</span><br><span class="line">    <span class="comment">//每个文字的字体大小</span></span><br><span class="line">    <span class="keyword">var</span> fontSize = <span class="number">12</span>;</span><br><span class="line">    <span class="comment">//计算列</span></span><br><span class="line">    <span class="keyword">var</span> colunms = <span class="built_in">Math</span>.floor(W /fontSize);</span><br><span class="line">    <span class="comment">//记录每列文字的y轴坐标</span></span><br><span class="line">    <span class="keyword">var</span> drops = [];</span><br><span class="line">    <span class="comment">//给每一个文字初始化一个起始点的位置</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;colunms;i++)&#123;</span><br><span class="line">        drops.push(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//运动的文字</span></span><br><span class="line">    <span class="keyword">var</span> str =<span class="string">"WELCOME TO WWW.ITRHX.COM"</span>;</span><br><span class="line">    <span class="comment">//4:fillText(str,x,y);原理就是去更改y的坐标位置</span></span><br><span class="line">    <span class="comment">//绘画的函数</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">draw</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        context.fillStyle = <span class="string">"rgba(238,238,238,.08)"</span>;<span class="comment">//遮盖层</span></span><br><span class="line">        context.fillRect(<span class="number">0</span>,<span class="number">0</span>,W,H);</span><br><span class="line">        <span class="comment">//给字体设置样式</span></span><br><span class="line">        context.font = <span class="string">"600 "</span>+fontSize+<span class="string">"px  Georgia"</span>;</span><br><span class="line">        <span class="comment">//给字体添加颜色</span></span><br><span class="line">        context.fillStyle = [<span class="string">"#33B5E5"</span>, <span class="string">"#0099CC"</span>, <span class="string">"#AA66CC"</span>, <span class="string">"#9933CC"</span>, <span class="string">"#99CC00"</span>, <span class="string">"#669900"</span>, <span class="string">"#FFBB33"</span>, <span class="string">"#FF8800"</span>, <span class="string">"#FF4444"</span>, <span class="string">"#CC0000"</span>][<span class="built_in">parseInt</span>(<span class="built_in">Math</span>.random() * <span class="number">10</span>)];<span class="comment">//randColor();可以rgb,hsl, 标准色，十六进制颜色</span></span><br><span class="line">        <span class="comment">//写入画布中</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;colunms;i++)&#123;</span><br><span class="line">            <span class="keyword">var</span> index = <span class="built_in">Math</span>.floor(<span class="built_in">Math</span>.random() * str.length);</span><br><span class="line">            <span class="keyword">var</span> x = i*fontSize;</span><br><span class="line">            <span class="keyword">var</span> y = drops[i] *fontSize;</span><br><span class="line">            context.fillText(str[index],x,y);</span><br><span class="line">            <span class="comment">//如果要改变时间，肯定就是改变每次他的起点</span></span><br><span class="line">            <span class="keyword">if</span>(y &gt;= canvas.height &amp;&amp; <span class="built_in">Math</span>.random() &gt; <span class="number">0.99</span>)&#123;</span><br><span class="line">                drops[i] = <span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            drops[i]++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">randColor</span>(<span class="params"></span>)</span>&#123;<span class="comment">//随机颜色</span></span><br><span class="line">        <span class="keyword">var</span> r = <span class="built_in">Math</span>.floor(<span class="built_in">Math</span>.random() * <span class="number">256</span>);</span><br><span class="line">        <span class="keyword">var</span> g = <span class="built_in">Math</span>.floor(<span class="built_in">Math</span>.random() * <span class="number">256</span>);</span><br><span class="line">        <span class="keyword">var</span> b = <span class="built_in">Math</span>.floor(<span class="built_in">Math</span>.random() * <span class="number">256</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"rgb("</span>+r+<span class="string">","</span>+g+<span class="string">","</span>+b+<span class="string">")"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    draw();</span><br><span class="line">    setInterval(draw,<span class="number">35</span>);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>在主题文件的相关css文件中（以 <font color="#FF0000">Material X 1.2.1</font> 主题为例，在<font color="#FF0000">\themes\material-x-1.2.1\source\less\_main.less</font> 文件末尾）添加以下代码：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">canvas</span> &#123;</span><br><span class="line">  <span class="attribute">position</span>: fixed;</span><br><span class="line">  <span class="attribute">right</span>: <span class="number">0px</span>;</span><br><span class="line">  <span class="attribute">bottom</span>: <span class="number">0px</span>;</span><br><span class="line">  <span class="attribute">min-width</span>: <span class="number">100%</span>;</span><br><span class="line">  <span class="attribute">min-height</span>: <span class="number">100%</span>;</span><br><span class="line">  <span class="attribute">height</span>: auto;</span><br><span class="line">  <span class="attribute">width</span>: auto;</span><br><span class="line">  <span class="attribute">z-index</span>: -<span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后在主题的 <font color="#FF0000">layout.ejs</font> 文件中引入即可：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 数字雨 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">canvas</span> <span class="attr">id</span>=<span class="string">"canvas"</span> <span class="attr">width</span>=<span class="string">"1440"</span> <span class="attr">height</span>=<span class="string">"900"</span> &gt;</span><span class="tag">&lt;/<span class="name">canvas</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"/js/DigitalRain.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>最终效果：</p><fancybox><br><img src="https://cdn.jsdelivr.net/gh/TRHX/ImageHosting/ITRHX-PIC/A04/035.png" alt="035"><br></fancybox><p>代码来源：<a href="http://www.lxl8800.cn/Main/Resource" target="_blank" rel="noopener">http://www.lxl8800.cn/Main/Resource</a></p><hr><h1 id="【20】自定义一个不使用主题模板渲染的独立页面"><a href="#【20】自定义一个不使用主题模板渲染的独立页面" class="headerlink" title="【20】自定义一个不使用主题模板渲染的独立页面 "></a><font color="#FF0000">【20】自定义一个不使用主题模板渲染的独立页面 </font></h1><p>&nbsp;&nbsp;&nbsp;&nbsp;有时候我们需要新建一个独立的页面，这个页面<font color="#FF0000">不使用主题的渲染，具有自己独立的样式</font>，可以放一些自己的作品，相册什么的，以下就介绍这种独立页面的实现方法。</p><font color="#FF0000">方法一：</font><p>&nbsp;&nbsp;&nbsp;&nbsp;使用 Hexo 提供的跳过渲染配置，在博客根目录的配置文件 <code>_config.yml</code> 里找到 <code>skip_render</code> 关键字，在后面添加想要跳过渲染的页面，比如我们创建 <code>\source\about\index.html</code>， 配置文件填写：<code>skip_render: about\**</code>，那么就表示 <code>\source\about</code> 里所有的文件将跳过渲染，里面的文件将会被直接复制到 public 文件夹，此时就会得到一个独立的 about 页面；官方文档：<a href="https://hexo.io/docs/configuration" target="_blank" rel="noopener">https://hexo.io/docs/configuration</a></p><font color="#FF0000">方法二：</font><p>&nbsp;&nbsp;&nbsp;&nbsp;在文章头部的 Front-matter 里添加配置 <code>layout: false</code> 来跳过渲染配置，比如我们要使 about 页面跳过渲染，创建 <code>\source\about\index.md</code>，将这个页面的相关 HTML 代码写进<code>.md</code>文件并保存，然后在 <code>index.md</code> 的头部写入：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">layout:</span> <span class="literal">false</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"></span><br><span class="line"><span class="string">&#123;%</span> <span class="string">raw</span> <span class="string">%&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="string">这里是</span> <span class="string">HTML</span> <span class="string">代码</span></span><br><span class="line"></span><br><span class="line"><span class="string">&#123;%</span> <span class="string">endraw</span> <span class="string">%&#125;</span></span><br></pre></td></tr></table></figure><p>PS：Front-matter 是 <code>.md</code> 文件最上方以 — 分隔的区域，用于指定个别文件的变量，官方文档：<a href="https://hexo.io/docs/front-matter" target="_blank" rel="noopener">https://hexo.io/docs/front-matter</a></p><p>效果可以对比我的<a href="https://www.itrhx.com/">博客主页</a>和<a href="https://www.itrhx.com/about/">关于页面</a></p><hr><h1 id="【21】更改本地预览端口号"><a href="#【21】更改本地预览端口号" class="headerlink" title="【21】更改本地预览端口号"></a><font color="#FF0000">【21】更改本地预览端口号</font></h1><p>hexo博客在执行 <code>hexo s</code> 进行本地预览的时候，默认端口号是4000，当该端口号被占用时会报错 <code>Error: listen EADDRINUSE 0.0.0.0:4000</code> ，此时可以关闭占用该端口的进程，也可以更换端口号，更换端口号可以通过以下两种方法实现：</p><p>方法一：在根目录的 <code>_config.yml</code> 配置文件内加上如下代码更改 <code>hexo s</code> 运行时的端口号：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">server:</span><br><span class="line">  port: 5000</span><br><span class="line">  compress: true</span><br><span class="line">  header: true</span><br></pre></td></tr></table></figure><p>方法二：通过 <code>hexo server -p 5000</code> 命令来指定端口，这种方法只是本次执行有效</p><hr><h1 id="未完待续……"><a href="#未完待续……" class="headerlink" title="未完待续……"></a><center><font color="#FF0000">未完待续……</font></center></h1>]]></content>
      
      
      <categories>
          
          <category> Hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
            <tag> 主题个性化 </tag>
            
            <tag> Material X </tag>
            
            <tag> spfk </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Markdown 语法&amp;技巧总结</title>
      <link href="/2018/08/25/A03-markdown/"/>
      <url>/2018/08/25/A03-markdown/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p><strong><font color="#4094C7">在写博客的时候，我们不希望都是千篇一律的没有色彩，多了解一些 Markdown 语法技巧有利于丰富我们的博客，看起来更有 feel ！</font></strong></p><hr><h1 id="–-插入图片"><a href="#–-插入图片" class="headerlink" title=" – 插入图片 "></a><font color="#FF0000"> – 插入图片 </font></h1><p><img src="https://cdn.jsdelivr.net/gh/TRHX/ImageHosting/ITRHX-PIC/A03/01.jpg" alt="车"></p><p>如果你使用 MarkdownPad 的话就比较方便，可以直接选择插入本地图片或者是网络图片，实质是通过以下代码实现的，小括号里面就是你的图片地址，中括号里面是图片的替代文字，比如上面的图片代码如下：<br><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">![<span class="string">车</span>](<span class="link">https://cdn.jsdelivr.net/gh/TRHX/ImageHosting/ITRHX-PIC/A03/01.jpg</span>)</span><br></pre></td></tr></table></figure></p><h1 id="–-插入音乐"><a href="#–-插入音乐" class="headerlink" title=" – 插入音乐 "></a><font color="#FF0000"> – 插入音乐 </font></h1><p>打开网页版<a href="https://music.163.com/" target="_blank" rel="noopener">网易云音乐</a>，选择你准备插入的音乐，点击生成外链播放器，前提是要有版权，不然是无法生成外链播放器的，选择好尺寸后，复制底下的HTML代码</p><p>然后将此HTML代码粘贴到你想要放的地方，可自行调节播放器的大小，其中 <font color="#FF0000">auto=1</font> 表示打开网页自动播放音乐，<font color="#FF0000">auto=0</font> 表示关闭自动播放音乐，比如See You Again (中英文版) - 罗艺恒这首歌曲代码如下：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">iframe</span> <span class="attr">frameborder</span>=<span class="string">"no"</span> <span class="attr">border</span>=<span class="string">"0"</span> <span class="attr">marginwidth</span>=<span class="string">"0"</span> <span class="attr">marginheight</span>=<span class="string">"0"</span> <span class="attr">width</span>=<span class="string">330</span> <span class="attr">height</span>=<span class="string">86</span> <span class="attr">src</span>=<span class="string">"//music.163.com/outchain/player?type=2&amp;id=32405683&amp;auto=1&amp;height=66"</span>&gt;</span><span class="tag">&lt;/<span class="name">iframe</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/TRHX/ImageHosting/ITRHX-PIC/A03/02.png" alt="02"><br><img src="https://cdn.jsdelivr.net/gh/TRHX/ImageHosting/ITRHX-PIC/A03/03.png" alt="03"></p><h1 id="–-插入视频"><a href="#–-插入视频" class="headerlink" title=" – 插入视频 "></a><font color="#FF0000"> – 插入视频 </font></h1><p>高考毕业了我们为下一届的学弟学妹们录制高考加油视频，我担任后期制作，在这里就以该视频为例٩(๑❛ᴗ❛๑)۶，在腾讯视频播放页面找到分享按钮，复制该视频的通用代码（其他视频播放平台也一样）,粘贴到文章中对应位置即可，可根据情况调整视频播放器的大小<br><img src="https://cdn.jsdelivr.net/gh/TRHX/ImageHosting/ITRHX-PIC/A03/04.png" alt="04"></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">iframe</span> <span class="attr">frameborder</span>=<span class="string">"0"</span> <span class="attr">width</span>=<span class="string">"840"</span>  <span class="attr">height</span>=<span class="string">"500"</span> <span class="attr">src</span>=<span class="string">"https://v.qq.com/txp/iframe/player.html?vid=x0643zvgtf7"</span> <span class="attr">allowFullScreen</span>=<span class="string">"true"</span>&gt;</span><span class="tag">&lt;/<span class="name">iframe</span>&gt;</span></span><br></pre></td></tr></table></figure><iframe frameborder="0" width="840" height="500" src="https://v.qq.com/txp/iframe/player.html?vid=x0643zvgtf7" allowfullscreen="true"></iframe><hr><h1 id="未完待续……"><a href="#未完待续……" class="headerlink" title="未完待续…… "></a><center><font color="#FF0000">未完待续…… </font></center></h1><hr>]]></content>
      
      
      <categories>
          
          <category> Markdown </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Markdown </tag>
            
            <tag> 技巧 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用 Github Pages 和 Hexo 搭建自己的独立博客</title>
      <link href="/2018/08/15/A02-hexo-blog/"/>
      <url>/2018/08/15/A02-hexo-blog/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p><img src="https://cdn.jsdelivr.net/gh/TRHX/ImageHosting/ITRHX-PIC/A02/01.png" alt="01"></p><a id="more"></a><h1 id="–-前言"><a href="#–-前言" class="headerlink" title="– 前言"></a><font color="#FF000">– 前言</font></h1><blockquote><p>首先感谢您能访问我的博客：<a href="https://trhx.github.io" target="_blank" rel="noopener">TRHX’S BLOG</a></p></blockquote><p>这是一篇有关如何使用 <font color="#DC143C">Github Pages</font> 和 <font color="#DC143C">Hexo</font> 搭建属于自己独立博客的详尽教程，本人是软件工程专业本科生，目前只学习了C和C++编程语言，对网站开发的有关知识几乎为零，这也是我搭建好自己的博客之后写的第一篇博客，刚开始搭建博客的时候自己也是网上各种百度，由于自己属于<font color="#DC143C">小白</font>那种，历经了千辛万苦才弄好，所以借这个机会写一篇小白真正能看懂的博客搭建教程，教你一步一步走向成功的彼岸！</p><p>推荐文章： <a href="http://www.cnblogs.com/jhzhu/p/3893297.html" target="_blank" rel="noopener">《我为什么写博客》</a> （By 知明所以）<br>　　　　 　<a href="http://mindhacks.cn/2009/02/15/why-you-should-start-blogging-now/" target="_blank" rel="noopener">《为什么你应该（从现在开始就）写博客》</a>  (By 刘未鹏 | Mind Hacks)</p><h1 id="–-入门"><a href="#–-入门" class="headerlink" title="– 入门"></a><font color="#FF000">– 入门</font></h1><blockquote><p><strong>Github Pages</strong></p></blockquote><p>Github Pages可以被认为是用户编写的、托管在github上的静态网页。使用Github Pages可以为你提供一个免费的服务器，免去了自己搭建服务器和写数据库的麻烦。此外还可以绑定自己的域名。</p><blockquote><p><strong>Hexo</strong></p></blockquote><p>Hexo 是一个快速、简洁且高效的博客框架。Hexo 使用 Markdown（或其他渲染引擎）解析文章，在几秒内，即可利用靓丽的主题生成静态网页。</p><h1 id="–-安装-Node-js"><a href="#–-安装-Node-js" class="headerlink" title="– 安装 Node.js"></a><font color="#FF000">– 安装 Node.js</font></h1><p><a href="https://nodejs.org/en/download/" target="_blank" rel="noopener">点击此处</a>访问官网，按需下载相应版本，默认安装可以了</p><p><img src="https://cdn.jsdelivr.net/gh/TRHX/ImageHosting/ITRHX-PIC/A02/02.png" alt="02"></p><p>注：本人在安装过程中出现了Warning 1909,无法创建快捷方式，这种情况很少出现，如果在安装过程中也有这种情况请参考百度文库（win10系统实测可行）：<a href="https://wenku.baidu.com/view/4ad59110964bcf84b9d57ba5.html" target="_blank" rel="noopener">《Win7安装程序警告1909无法创建快捷方式》</a></p><p><img src="https://cdn.jsdelivr.net/gh/TRHX/ImageHosting/ITRHX-PIC/A02/03.png" alt="03"></p><h1 id="–-安装-Git"><a href="#–-安装-Git" class="headerlink" title="– 安装 Git"></a><font color="#FF000">– 安装 Git</font></h1><p><a href="https://git-scm.com/download/win" target="_blank" rel="noopener">点击此处</a>访问官网，按需下载相应版本，默认安装即可<br>参考资料：<a href="https://www.cnblogs.com/jytx/p/5602927.html" target="_blank" rel="noopener">《如何在windows下安装GIT》</a> 　（By 俊雨廷休）<br>　　　　　<a href="http://git.oschina.net/progit/" target="_blank" rel="noopener">《Pro Git（中文版）》</a></p><h1 id="–-检验软件是否安装成功"><a href="#–-检验软件是否安装成功" class="headerlink" title="– 检验软件是否安装成功"></a><font color="#FF000">– 检验软件是否安装成功</font></h1><p>同时按下 Win 键和 R 键打开运行窗口,输入 <font color="#DC143C">cmd</font> ，然后输入以下命令，有相应版本信息显示则安装成功，若不正确可以卸载软件重新安装，此外若安装成功，在桌面右键鼠标，可以看到菜单里多了 <font color="#DC143C">Git GUI Here</font> 和 <font color="#DC143C">Git Bash Here</font>两个选项，第一个是<font color="#DC143C">图形界面的Git操作</font>，另一个是<font color="#DC143C">命令行</font><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ git --version</span><br><span class="line">$ node -v</span><br><span class="line">$ npm -v</span><br></pre></td></tr></table></figure></p><p><img src="https://cdn.jsdelivr.net/gh/TRHX/ImageHosting/ITRHX-PIC/A02/04.png" alt="04"></p><p><img src="https://cdn.jsdelivr.net/gh/TRHX/ImageHosting/ITRHX-PIC/A02/05.png" alt="05"></p><h1 id="–-Hexo-安装"><a href="#–-Hexo-安装" class="headerlink" title="– Hexo 安装"></a><font color="#FF000">– Hexo 安装</font></h1><p>选择一个磁盘，新建一个文件夹，自己重命名文件夹（如：我的文件夹为：<font color="#DC143C">Ｅ\TRHX_Blog</font>），博客相关文件将储存在此文件夹下，在该文件夹下右键鼠标，点击 <font color="#DC143C">Git Bash Here</font>，输入以下 npm 命令即可安装，第一个命令表示安装 hexo，第二个命令表示安装 hexo 部署到 git page 的 deployer，如图所示即为安装成功<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ npm install hexo-cli -g</span><br><span class="line">$ npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure></p><p><img src="https://cdn.jsdelivr.net/gh/TRHX/ImageHosting/ITRHX-PIC/A02/06.png" alt="06"></p><h1 id="–-Hexo-初始化配置"><a href="#–-Hexo-初始化配置" class="headerlink" title="– Hexo 初始化配置"></a><font color="#FF000">– Hexo 初始化配置</font></h1><p>在刚才新建的文件夹里面再次新建一个 <font color="#DC143C">Hexo</font> 文件夹（如：我的文件夹为：<font color="#DC143C">E\TRHX_Blog\Hexo</font>）,进入该 <font color="#DC143C">Hexo</font> 文件夹右键鼠标，点击 <font color="#DC143C">Git Bash Here</font>，输入以下命令，如图所示则安装成功<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo init</span><br></pre></td></tr></table></figure></p><p><img src="https://cdn.jsdelivr.net/gh/TRHX/ImageHosting/ITRHX-PIC/A02/07.png" alt="07"></p><p>Hexo 安装完成后，将会在指定文件夹中新建所需要的文件，Hexo 文件夹下的目录如下：<br><img src="https://cdn.jsdelivr.net/gh/TRHX/ImageHosting/ITRHX-PIC/A02/08.png" alt="08"></p><h1 id="–-本地查看效果"><a href="#–-本地查看效果" class="headerlink" title="– 本地查看效果"></a><font color="#FF000">– 本地查看效果</font></h1><p>执行以下命令，执行完即可登录 <a href="http://localhost:4000/" target="_blank" rel="noopener">http://localhost:4000/</a> 查看效果<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br><span class="line">$ hexo server</span><br></pre></td></tr></table></figure></p><p>显示以下信息说明操作成功：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">INFO Hexo is running at http://0.0.0.0:4000/. Press Ctrl+C to stop.</span><br></pre></td></tr></table></figure></p><p>登录 <a href="http://localhost:4000/" target="_blank" rel="noopener">http://localhost:4000/</a> 查看效果：<br><img src="https://cdn.jsdelivr.net/gh/TRHX/ImageHosting/ITRHX-PIC/A02/09.png" alt="09"></p><h1 id="–-将博客部署到-Github-Pages-上"><a href="#–-将博客部署到-Github-Pages-上" class="headerlink" title="– 将博客部署到 Github Pages 上"></a><font color="#FF000">– 将博客部署到 Github Pages 上</font></h1><p>到目前为止，我们的本地博客就成功搭建了，但是现在我们只能通过本地连接查看博客，我们要做的是让其他人也能够访问我们的博客，这就需要我们将博客部署到Github Pages上</p><p>一、注册 Github 账户：<a href="https://github.com" target="_blank" rel="noopener">点击此处</a>访问 Github 官网，点击 Sign Up 注册账户</p><p>二、创建项目代码库：点击 <font color="#DC143C">New repository</font> 开始创建，步骤及注意事项见图：<br><img src="https://cdn.jsdelivr.net/gh/TRHX/ImageHosting/ITRHX-PIC/A02/10.png" alt="10"></p><p>三、配置 <font color="#DC143C">SSH</font> 密钥：只有配置好 <font color="#DC143C">SSH</font> 密钥后，我们才可以通过 git 操作实现本地代码库与 Github 代码库同步，在你第一次新建的文件夹里面（如：我的文件夹为：<font color="#DC143C">Ｅ\TRHX_Blog</font>） <font color="#DC143C">Git Bash Here</font> 输入以下命令：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ ssh-keygen -t rsa -C &quot;your email@example.com&quot;</span><br><span class="line">//引号里面填写你的邮箱地址，比如我的是tanrenhou@126.com</span><br></pre></td></tr></table></figure></p><p>之后会出现：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Generating public/private rsa key pair.</span><br><span class="line">Enter file in which to save the key (/c/Users/you/.ssh/id_rsa):</span><br><span class="line">//到这里可以直接回车将密钥按默认文件进行存储</span><br></pre></td></tr></table></figure></p><p>然后会出现：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Enter passphrase (empty for no passphrase):</span><br><span class="line">//这里是要你输入密码，其实不需要输什么密码，直接回车就行</span><br><span class="line">Enter same passphrase again:</span><br></pre></td></tr></table></figure></p><p>接下来屏幕会显示：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Your identification has been saved in /c/Users/you/.ssh/id_rsa.</span><br><span class="line">Your public key has been saved in /c/Users/you/.ssh/id_rsa.pub.</span><br><span class="line">The key fingerprint is:</span><br><span class="line">这里是各种字母数字组成的字符串，结尾是你的邮箱</span><br><span class="line">The key&apos;s randomart image is:</span><br><span class="line">这里也是各种字母数字符号组成的字符串</span><br></pre></td></tr></table></figure></p><p>运行以下命令，将公钥的内容复制到系统粘贴板上<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ clip &lt; ~/.ssh/id_rsa.pub</span><br></pre></td></tr></table></figure></p><p>四、在 GitHub 账户中添加你的公钥</p><p>1.登陆 GitHub，进入 <font color="#DC143C">Settings</font>：<br><img src="https://cdn.jsdelivr.net/gh/TRHX/ImageHosting/ITRHX-PIC/A02/11.png" alt="11"></p><p>2.点击 <font color="#DC143C">SSH and GPG Keys</font>：<br><img src="https://cdn.jsdelivr.net/gh/TRHX/ImageHosting/ITRHX-PIC/A02/12.png" alt="12"></p><p>3.选择 <font color="#DC143C">New SSH key</font>：<br><img src="https://cdn.jsdelivr.net/gh/TRHX/ImageHosting/ITRHX-PIC/A02/13.png" alt="13"></p><p>4.粘贴密钥：<br><img src="https://cdn.jsdelivr.net/gh/TRHX/ImageHosting/ITRHX-PIC/A02/14.png" alt="14"></p><p>五、测试</p><p>输入以下命令：<font color="#DC143C">注意：<a href="mailto:git@github.com" target="_blank" rel="noopener">git@github.com</a>不要做任何更改！</font><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ssh -T git@github.com</span><br></pre></td></tr></table></figure></p><p>之后会显示：<br><img src="https://cdn.jsdelivr.net/gh/TRHX/ImageHosting/ITRHX-PIC/A02/15.png" alt="15"></p><p>输入 <font color="#DC143C">yes</font> 后会显示：<br><img src="https://cdn.jsdelivr.net/gh/TRHX/ImageHosting/ITRHX-PIC/A02/16.png" alt="16"><br>此时表示设置正确</p><p>六、配置 Git 个人信息</p><p>Git 会根据用户的名字和邮箱来记录提交，GitHub 也是用这些信息来做权限的处理，输入以下命令进行个人信息的设置，把名称和邮箱替换成你自己的，名字可以不是 GitHub 的昵称，但为了方便记忆，建议与 GitHub  一致<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ git config --global user.name &quot;此处填你的用户名&quot;</span><br><span class="line">$ git config --global user.email &quot;此处填你的邮箱&quot;</span><br></pre></td></tr></table></figure></p><p>到此为止 SSH Key 配置成功，本机已成功连接到 Github</p><h1 id="–-将本地的-Hexo-文件更新到-Github-的库中"><a href="#–-将本地的-Hexo-文件更新到-Github-的库中" class="headerlink" title="– 将本地的 Hexo 文件更新到 Github 的库中"></a><font color="#FF000">– 将本地的 Hexo 文件更新到 Github 的库中</font></h1><p>一、登录 Github 打开自己的项目 <font color="#DC143C">yourname.github.io</font><br><img src="https://cdn.jsdelivr.net/gh/TRHX/ImageHosting/ITRHX-PIC/A02/17.png" alt="17"></p><p>二、鼠标移到 <font color="#DC143C">Clone or download</font> 按钮，选择 <font color="#DC143C">Use SSH</font><br><img src="https://cdn.jsdelivr.net/gh/TRHX/ImageHosting/ITRHX-PIC/A02/18.png" alt="18"></p><p>三、一键复制地址<br><img src="https://cdn.jsdelivr.net/gh/TRHX/ImageHosting/ITRHX-PIC/A02/19.png" alt="19"></p><p>四、打开你创建的 <font color="#DC143C">Hexo</font> 文件夹（如：<font color="#DC143C">E:\TRHX_Blog\Hexo</font>），右键用记事本（或者Notepad++、Vs Code等）打开该文件夹下的 <font color="#DC143C">_config.yml</font> 文件<br><img src="https://cdn.jsdelivr.net/gh/TRHX/ImageHosting/ITRHX-PIC/A02/20.png" alt="20"></p><p>五、按下图修改 <font color="#DC143C">_config.yml</font> 文件并保存<br><img src="https://cdn.jsdelivr.net/gh/TRHX/ImageHosting/ITRHX-PIC/A02/21.png" alt="21"></p><p>六、在 <font color="#DC143C">Hexo</font> 文件夹下分别执行以下命令<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ hexo g</span><br><span class="line">$ hexo d</span><br></pre></td></tr></table></figure></p><p>或者直接执行<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo g -d</span><br></pre></td></tr></table></figure></p><p>执行完之后会让你输入你的 Github 的账号和密码，如果此时报以下错误，说明你的 deployer 没有安装成功<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ERROR Deployer not found: git</span><br></pre></td></tr></table></figure></p><p>需要执行以下命令再安装一次：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure></p><p>再执行 <font color="#DC143C"><code>hexo g -d</code></font>，你的博客就会部署到 Github 上了</p><p>七、访问博客</p><p>你的博客地址：<font color="#DC143C">https://你的用户名.github.io</font>，比如我的是：<font color="#DC143C"><a href="https://trhx.github.io" target="_blank" rel="noopener">https://trhx.github.io</a></font> ，现在每个人都可以通过此链接访问你的博客了</p><h1 id="–-如何在博客上发表文章"><a href="#–-如何在博客上发表文章" class="headerlink" title="– 如何在博客上发表文章"></a><font color="#FF000">– 如何在博客上发表文章</font></h1><p>博客已经成功搭建了，但是我们该怎么写博客呢？</p><p>一、新建一个空文章，输入以下命令，会在项目 <font color="#DC143C">\Hexo\source\_posts</font> 中生成 <font color="#DC143C">文章标题.md</font> 文件，文章标题根据需要命名<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo n &quot;文章标题&quot;</span><br></pre></td></tr></table></figure></p><p>也可以直接在 <font color="#DC143C">\Hexo\source\_posts</font> 目录下右键鼠标新建文本文档，改后缀为 <font color="#DC143C">.md</font> 即可，这种方法比较方便</p><p>二、用编辑器编写文章</p><font color="#DC143C">md</font> 全称 Markdown， Markdown 是 2004 年由 John Gruberis 设计和开发的纯文本格式的语法，非常的简单实用，常用的标记符号屈指可数，几分钟即可学会， <font color="#DC143C">.md</font> 文件可以使用支持 Markdown 语法的编辑器编辑，然后将写好的文章（.md文件）保存到 <font color="#DC143C">\Hexo\source\_posts</font> 文件夹下即可<br><br>推荐 Windows 上使用 <font color="#DC143C">MarkdownPad2</font> 或者 <font color="#DC143C">小书匠</font> 编辑器，macOS 上使用 <font color="#DC143C">Mou</font> 编辑器，Linux 上使用 <font color="#DC143C">Remarkable</font> 编辑器，Web 端上使用<font color="#DC143C"> 简书</font> ，另外可以参考我的另一篇文章：<a href="https://www.itrhx.com/2018/08/29/A05-Markdown-editor-recommendation/">《主流 Markdown 编辑器推荐》</a><br>当我们用编辑器写好文章后，可以使用以下命令将其推送到服务器上<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ hexo g</span><br><span class="line">$ hexo d</span><br></pre></td></tr></table></figure><br><br>或者将两个命令合二为一输入以下命令：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo d -g</span><br></pre></td></tr></table></figure><br><br>现在访问你的博客就可以看见写好的文章啦！<br>参考资料：<a href="https://blog.csdn.net/jinhui157/article/details/73872795" target="_blank" rel="noopener">《10款流行的Markdown编辑器》</a> （By xiaoxiao_engineer）<br>　　　　　<a href="https://www.jianshu.com/p/q81RER/" target="_blank" rel="noopener">《献给写作者的 Markdown 新手指南》</a> （By 简书）<br>　　　　　<a href="https://sspai.com/post/25137" target="_blank" rel="noopener">《认识与入门 Markdown》</a> （By Te_Lee）<br>　　　　　<a href="http://ibruce.info/2013/11/26/markdown/" target="_blank" rel="noopener">《markdown简明语法》</a> （By 不如）<br>　　　　　<a href="https://www.jianshu.com/p/191d1e21f7ed" target="_blank" rel="noopener">《markdown基本语法》</a> （By 高鸿祥）<br>　　　　　<a href="http://www.liuhaihua.cn/archives/143443.html" target="_blank" rel="noopener">《Markdown 公式指导手册》</a> （By Harries）<br><br><br># <font color="#FF000">– 如何为博客更换自己喜欢的主题</font><p>博客也搭建好了，文章也会写了，但是！！！默认的主题并不喜欢怎么办？现在，我们就来为自己的博客更换自己喜欢的主题</p><p><a href="https://hexo.io/themes/" target="_blank" rel="noopener">点击此处</a>进入 Hexo 官网的主题专栏，我们可以看见有许多的主题供我们选择<br><img src="https://cdn.jsdelivr.net/gh/TRHX/ImageHosting/ITRHX-PIC/A02/22.png" alt="22"></p><p>我们要做的就是把主题克隆过来，在此我们以主题 <font color="#DC143C">Aero-Dual</font> 为例，点进去我们就可以看见该主题作者的博客，鼠标滑到底，我们可以看见 <font color="#DC143C">Theme By Levblanc</font> 的字样（其他主题类似），点击作者 <font color="#DC143C">Levblanc</font> ，页面就会跳转到该主题所有的相关文件在 Github 上的地址，复制该地址<br><img src="https://cdn.jsdelivr.net/gh/TRHX/ImageHosting/ITRHX-PIC/A02/23.png" alt="23"><br><img src="https://cdn.jsdelivr.net/gh/TRHX/ImageHosting/ITRHX-PIC/A02/24.png" alt="24"><br><img src="https://cdn.jsdelivr.net/gh/TRHX/ImageHosting/ITRHX-PIC/A02/25.png" alt="25"></p><p>再打开 <font color="#DC143C">Hexo</font> 文件夹下的 <font color="#DC143C">themes</font> 目录（如：<font color="#DC143C">E:\TRHX_Blog\Hexo\themes</font>），右键 <font color="#DC143C">Git Bash Here</font>，输入以下命令：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git clone 此处填写你刚才复制的主题地址</span><br></pre></td></tr></table></figure></p><p>比如要安装 <font color="#DC143C">Aero-Dual</font> 主题，则输入命令：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git clone https://github.com/levblanc/hexo-theme-aero-dual</span><br></pre></td></tr></table></figure></p><p>等待下载完成后即可在 <font color="#DC143C">themes</font> 目录下生成 <font color="#DC143C">hexo-theme-aero-dual</font> 文件夹，然后打开 <font color="#DC143C">Hexo</font> 文件夹下的配置文件 <font color="#DC143C">_config.yml</font> ，找到关键字 <font color="#DC143C">theme</font>，修改参数为：<font color="#DC143C">theme：hexo-theme-aero-dual</font> （其他主题修改成相应名称即可），再次注意冒号后面有一个空格！<br><img src="https://cdn.jsdelivr.net/gh/TRHX/ImageHosting/ITRHX-PIC/A02/26.png" alt="26"></p><p>返回 <font color="#DC143C">Hexo</font> 目录，右键 <font color="#DC143C">Git Bash Here</font> ，输入以下命令开始部署主题：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ hexo g   </span><br><span class="line">$ hexo s</span><br></pre></td></tr></table></figure></p><p>此时打开浏览器，访问 <a href="http://localhost:4000/" target="_blank" rel="noopener">http://localhost:4000/</a>  就可看见我们的主题已经更换了，如果感觉效果满意，我们就可以把它部署到Github上了</p><p>打开 <font color="#DC143C">Hexo</font> 文件夹，右键 <font color="#DC143C">Git Bash Here</font> ，输入以下命令：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ hexo clean  </span><br><span class="line">//该命令的作用是清除缓存，若不输入此命令，服务器有可能更新不了主题</span><br><span class="line">$ hexo g -d</span><br></pre></td></tr></table></figure></p><p>此时访问自己的博客即可看见更换后的主题，但我们仍然需要对主题的相关配置进行修改，比如网站标题，图标等等，Hexo 中有两份主要的配置文件，名称都是  <font color="#DC143C">_config.yml</font> ，它们均是用于站点配置使用的。其中，一份位于站点根目录下（比如我的：<font color="#DC143C">E:\TRHX_Blog\Hexo\_config.yml</font>），主要包含 Hexo 本身整站的配置；另一份位于主题目录下（比如我的：<font color="#DC143C">E:\TRHX_Blog\Hexo\themes\hexo-theme-aero-dual\_config.yml</font>），这份配置由主题作者提供，主要用于配置主题相关的选项，一般  <font color="#DC143C">_config.yml</font>  文件里都有相关注释，按需修改即可</p><p>参考资料：<a href="https://www.zhihu.com/question/24422335" target="_blank" rel="noopener">《有哪些好看的 Hexo 主题？》</a> （知乎）<br>　　　　　<a href="https://hexo.io/zh-cn/docs/configuration.html" target="_blank" rel="noopener">《Hexo | 配置》</a> （Hexo官方文档）<br>　　　　　<a href="https://segmentfault.com/a/1190000002632530" target="_blank" rel="noopener">《hexo常用命令笔记》</a> （By 小弟调调）</p><h1 id="–-为你的-Hexo-博客配置个性域名"><a href="#–-为你的-Hexo-博客配置个性域名" class="headerlink" title="– 为你的 Hexo 博客配置个性域名"></a><font color="#FF000">– 为你的 Hexo 博客配置个性域名</font></h1><p>本人在配置域名的时候问题百出，百度的各种方法都不管用，打开网站总是 404，可能是我太笨了 　o(╥﹏╥)o　，不过好在后来终于解决了这个问题</p><p>首先我们要购买域名，<a href="https://www.aliyun.com" target="_blank" rel="noopener">阿里云</a>，<a href="https://cloud.tencent.com" target="_blank" rel="noopener">腾讯云</a>都可以，也不贵，一年几十块钱，最便宜几块钱也能买到，以阿里云为例，我购买的域名是 <a href="https://www.itrhx.com">itrhx.com</a>，购买过程就不赘述了，选择阿里云的解析平台，来到阿里云的管理控制台，点击进入域名解析列表或者直接点击域名后面的解析<br><img src="https://cdn.jsdelivr.net/gh/TRHX/ImageHosting/ITRHX-PIC/A02/27.png" alt="27"></p><p>方法一：点击添加记录，需要添加两个记录，两个记录类型都是 <font color="#DC143C">CNAME</font> ，第一个主机记录为 <font color="#DC143C">@</font> ，第二个主机记录为 <font color="#DC143C">www</font>，记录值都是填你自己的博客地址（比如我的是：<font color="#DC143C"><a href="http://trhx.github.io" target="_blank" rel="noopener">trhx.github.io</a></font>），保存之后域名解析就完成了！<br><img src="https://cdn.jsdelivr.net/gh/TRHX/ImageHosting/ITRHX-PIC/A02/28.png" alt="28"><br>方法二：两个记录类型为 <font color="#DC143C">A</font> ，第一个主机记录为 <font color="#DC143C">@</font> ，第二个主机记录为 <font color="#DC143C">www</font>，记录值都为博客的 <font color="#DC143C">IP</font> 地址，<font color="#DC143C">IP</font> 地址可以 <font color="#DC143C">cmd</font> 中输入 <font color="#DC143C">ping 你的博客地址</font> 获得（比如我的：<font color="#DC143C">ping trhx.github.io</font>），保存之后域名解析就完成了！<br><img src="https://cdn.jsdelivr.net/gh/TRHX/ImageHosting/ITRHX-PIC/A02/29.png" alt=""><br>有关解析记录类型的区别可以参考<a href="https://blog.csdn.net/it_man/article/details/9017307" target="_blank" rel="noopener">《域名解析中A记录、CNAME、MX记录、NS记录的区别和联系》</a> </p><p>为了使 GitHub 接收我们的域名，还需要在博客的根目录下添加一个名为 <font color="#DC143C">CNAME</font> 的文件（<font color="#DC143C">注意不要加.txt，没有任何后缀名！</font>），这个文件放到 <font color="#DC143C">Hexo</font> 文件夹的 <font color="#DC143C">source</font> 里面，（比如我的是：<font color="#DC143C">E:\TRHX_Blog\Hexo\source</font>），文件里面填写你的域名（<font color="#DC143C">加不加www都行</font>），比如要填写我的域名，文件里面就写：<font color="#DC143C"><a href="http://www.itrhx.com">www.itrhx.com</a></font> 或者 <font color="#DC143C">itrhx.com</font>，经过以上操作，别人就可以通过 <a href="http://www.itrhx.com">www.itrhx.com</a> 、<a href="https://itrhx.com" target="_blank" rel="noopener">itrhx.com</a> 、<a href="https://trhx.github.io" target="_blank" rel="noopener">trhx.github.io</a> 三个当中任意一个访问我的博客了！你的也一样！</p><p>有关加不加www的问题有以下区别：</p><blockquote><p>如果你填写的是没有www的，比如 itrhx.com，那么无论是访问 <a href="https://www.itrhx.com">https://www.itrhx.com</a> 还是 <a href="https://itrhx.com" target="_blank" rel="noopener">https://itrhx.com</a> ，都会自动跳转到 <a href="https://itrhx.com" target="_blank" rel="noopener">https://itrhx.com</a></p></blockquote><blockquote><p>如果你填写的是带www的，比如 <a href="http://www.itrhx.com">www.itrhx.com</a> ，那么无论是访问 <a href="https://www.itrhx.com">https://www.itrhx.com</a> 还是 <a href="https://itrhx.com" target="_blank" rel="noopener">https://itrhx.com</a> ，都会自动跳转到 <a href="http://www.itrhx.com">http://www.itrhx.com</a></p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/TRHX/ImageHosting/ITRHX-PIC/A02/30.png" alt="30"></p><p>如果你在其他平台购买域名，或者选择 <a href="https://www.dnspod.cn" target="_blank" rel="noopener">DNSPod</a> 等其他域名解析，操作方法大同小异，遇到问题可自行百度解决！</p><p>参考资料：<a href="https://zhuanlan.zhihu.com/p/27349039" target="_blank" rel="noopener">《推荐几家域名注册服务商》</a>  （By Jelly Bool）<br>　　　　　<a href="http://www.chinaz.com/web/2015/0122/380042.shtml" target="_blank" rel="noopener">《盘点十大免费DNS域名解析服务：稳定、可靠》</a></p><h1 id="–-结语"><a href="#–-结语" class="headerlink" title="– 结语"></a><font color="#FF000">– 结语</font></h1><p>一顿操作下来虽然有点儿累，但看见拥有了自己的博客还是非常有成就感的，人生就是需要折腾，那么现在就开始你的创作之旅吧！文章的不断积累，你会从中受益很多的！另外，这是一篇小白写的适用于小白的博客搭建教程，比较详细，有这方面基础的可以百度有简略一点儿的教程，文中如有错误还请大佬指出改正！文中涉及参考资料如有侵权请联系我删除！</p>]]></content>
      
      
      <categories>
          
          <category> Hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Github Pages </tag>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World!</title>
      <link href="/2018/08/10/A01-hello-world/"/>
      <url>/2018/08/10/A01-hello-world/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><hr><blockquote><p>人类的幸福和欢乐在于奋斗，而最有价值的是为理想而奋斗！ ———  苏格拉底</p></blockquote><blockquote><p>Human happiness and joy lie in struggle, and what is most valuable is striving for ideals! ———   Socrates</p></blockquote><hr><iframe frameborder="0" width="840" height="500" src="https://v.qq.com/txp/iframe/player.html?vid=m0768lhl5uh" allowfullscreen="true"></iframe><iframe frameborder="0" width="840" height="500" src="https://v.qq.com/txp/iframe/player.html?vid=a0371nd7kqt" allowfullscreen="true"></iframe>]]></content>
      
      
      <categories>
          
          <category> BLOG </category>
          
      </categories>
      
      
        <tags>
            
            <tag> BLOG </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
