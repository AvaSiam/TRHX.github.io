<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>TRHX&#39;S BLOG</title>
  
  <subtitle>一入 IT 深似海 从此学习无绝期</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://www.itrhx.com/"/>
  <updated>2020-07-06T14:35:55.758Z</updated>
  <id>https://www.itrhx.com/</id>
  
  <author>
    <name>TRHX</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>COVID-19 肺炎疫情数据实时监控（Python 爬虫 + Pyecharts 数据可视化 + Wordcloud 词云图）</title>
    <link href="https://www.itrhx.com/2020/07/06/A89-COVID-19/"/>
    <id>https://www.itrhx.com/2020/07/06/A89-COVID-19/</id>
    <published>2020-07-06T04:25:20.285Z</published>
    <updated>2020-07-06T14:35:55.758Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">这里是一段防爬虫文本，请读者忽略。</span></span><br><span class="line"><span class="string">本文原创首发于</span> <span class="string">CSDN，作者</span> <span class="string">TRHX。</span></span><br><span class="line"><span class="string">博客首页：https://itrhx.blog.csdn.net/</span></span><br><span class="line"><span class="string">本文链接：https://itrhx.blog.csdn.net/article/details/107140534</span></span><br><span class="line"><span class="string">未经授权，禁止转载！恶意转载，后果自负！尊重原创，远离剽窃！</span></span><br></pre></td></tr></table></figure><hr><h2 id="【1x00】前言"><a href="#【1x00】前言" class="headerlink" title="【1x00】前言"></a><font color="#FF0000">【1x00】前言</font></h2><p>本来两三个月之前就想搞个疫情数据实时数据展示的，由于各种不可抗拒因素一而再再而三的鸽了，最近终于抽空写了一个，数据是用 Python 爬取的<a href="https://voice.baidu.com/act/newpneumonia/newpneumonia/" target="_blank" rel="noopener">百度疫情实时大数据报告</a>，请求库用的 requests，解析用的 Xpath 语法，词云用的 wordcloud 库，数据可视化用 pyecharts 绘制的地图和折线图，数据储存在 Excel 表格里面，使用 openpyxl 对表格进行处理。</p><p>本程序实现了累计确诊地图展示和每日数据变化折线图展示，其他更多数据的获取和展示均可在程序中进行拓展，可以将程序部署在服务器上，设置定时运行，即可实时展示数据，pyecharts 绘图模块也可以整合到 Web 框架（Django、Flask等）中使用。</p><p>在获取数据时有<font color="#FF0000"><strong>全球</strong></font>和<font color="#FF0000"><strong>境外</strong></font>两个概念，全球包含中国，境外不包含中国，后期绘制的四个图：中国累计确诊地图、全球累计确诊地图（包含中国）、中国每日数据折线图、境外每日数据折线图（不包含中国）。</p><font color="#FF0000"><strong>注意项：直接向该网页发送请求获取的响应中，没有每个国家的每日数据，该数据获取的地址是：<a href="https://voice.baidu.com/newpneumonia/get?target=trend&amp;isCaseIn=1&amp;stage=publish" target="_blank" rel="noopener">https://voice.baidu.com/newpneumonia/get?target=trend&amp;isCaseIn=1&amp;stage=publish</a></strong></font><ul><li><p><strong>预览地址</strong>：<a href="http://cov.itrhx.com/" target="_blank" rel="noopener">http://cov.itrhx.com/</a></p></li><li><p><strong>数据来源</strong>：<a href="https://voice.baidu.com/act/newpneumonia/newpneumonia/" target="_blank" rel="noopener">https://voice.baidu.com/act/newpneumonia/newpneumonia/</a></p></li><li><p><strong>pyecharts 文档</strong>：<a href="https://pyecharts.org/" target="_blank" rel="noopener">https://pyecharts.org/</a></p></li><li><p><strong>openpyxl 文档</strong>：<a href="https://openpyxl.readthedocs.io/" target="_blank" rel="noopener">https://openpyxl.readthedocs.io/</a></p></li><li><p><strong>wordcloud 文档</strong>：<a href="http://amueller.github.io/word_cloud/" target="_blank" rel="noopener">http://amueller.github.io/word_cloud/</a></p></li></ul><h2 id="【2x00】思维导图"><a href="#【2x00】思维导图" class="headerlink" title="【2x00】思维导图"></a><font color="#FF0000">【2x00】思维导图</font></h2><p><img src="https://cdn.jsdelivr.net/gh/TRHX/ImageHosting/ITRHX-PIC/A89/01.png" alt="01"></p><h2 id="【3x00】数据结构分析"><a href="#【3x00】数据结构分析" class="headerlink" title="【3x00】数据结构分析"></a><font color="#FF0000">【3x00】数据结构分析</font></h2><p>通过查看百度的疫情数据页面，可以看到很多整齐的数据，猜测就是疫情相关的数据，保存该页面，对其进行格式化，很容易可以分析出所有的数据都在 <code>&lt;script type=&quot;application/json&quot; id=&quot;captain-config&quot;&gt;&lt;/script&gt;</code> 里面，其中 title 里面是一些 Unicode 编码，将其转为中文后更容易得到不同的分类数据。</p><p><img src="https://cdn.jsdelivr.net/gh/TRHX/ImageHosting/ITRHX-PIC/A89/02.png" alt="02"></p><p>由于数据繁多，可以将数据主体部分提取出来，删除一些重复项和其他杂项，留下数据大体位置并分析数据结构，便于后期的数据提取，经过处理后的数据大致结构如下：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br></pre></td><td class="code"><pre><span class="line">&lt;script type="application/json" id="captain-config"&gt;</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="attr">"component"</span>: [</span><br><span class="line">            &#123;</span><br><span class="line">                "mapLastUpdatedTime": "2020.07.05 16:13",        // 国内疫情数据最后更新时间</span><br><span class="line">                "caseList": [                                    // caseList 列表，每一个元素是一个字典</span><br><span class="line">                    &#123;</span><br><span class="line">                        "confirmed": "1",                        // 每个字典包含中国每个省的每一项疫情数据</span><br><span class="line">                        "died": "0",</span><br><span class="line">                        "crued": "1",</span><br><span class="line">                        "relativeTime": "1593792000",</span><br><span class="line">                        "confirmedRelative": "0",</span><br><span class="line">                        "diedRelative": "0",</span><br><span class="line">                        "curedRelative": "0",</span><br><span class="line">                        "curConfirm": "0",</span><br><span class="line">                        "curConfirmRelative": "0",</span><br><span class="line">                        "icuDisable": "1",</span><br><span class="line">                        "area": "西藏",</span><br><span class="line">                        "subList": [                            // subList 列表，每一个元素是一个字典</span><br><span class="line">                            &#123;</span><br><span class="line">                                "city": "拉萨",                 // 每个字典包含该省份对应的每个城市疫情数据</span><br><span class="line">                                "confirmed": "1",</span><br><span class="line">                                "died": "0",</span><br><span class="line">                                "crued": "1",</span><br><span class="line">                                "confirmedRelative": "0",</span><br><span class="line">                                "curConfirm": "0",</span><br><span class="line">                                "cityCode": "100"</span><br><span class="line">                            &#125;</span><br><span class="line">                        ]</span><br><span class="line">                    &#125;</span><br><span class="line">                ],</span><br><span class="line">                "caseOutsideList": [                           // caseOutsideList 列表，每一个元素是一个字典</span><br><span class="line">                    &#123;</span><br><span class="line">                        "confirmed": "241419",                 // 每个字典包含各国的每一项疫情数据</span><br><span class="line">                        "died": "34854",</span><br><span class="line">                        "crued": "191944",</span><br><span class="line">                        "relativeTime": "1593792000",</span><br><span class="line">                        "confirmedRelative": "223",</span><br><span class="line">                        "curConfirm": "14621",</span><br><span class="line">                        "icuDisable": "1",</span><br><span class="line">                        "area": "意大利",</span><br><span class="line">                        "subList": [                          // subList 列表，每一个元素是一个字典</span><br><span class="line">                            &#123;</span><br><span class="line">                                "city": "伦巴第",              // 每个字典包含每个国家对应的每个城市疫情数据</span><br><span class="line">                                "confirmed": "94318",</span><br><span class="line">                                "died": "16691",</span><br><span class="line">                                "crued": "68201",</span><br><span class="line">                                "curConfirm": "9426"</span><br><span class="line">                            &#125;</span><br><span class="line">                        ]</span><br><span class="line">                    &#125;</span><br><span class="line">                ],</span><br><span class="line">                "summaryDataIn": &#123;                           // summaryDataIn 国内总的疫情数据</span><br><span class="line">                    "confirmed": "85307",</span><br><span class="line">                    "died": "4648",</span><br><span class="line">                    "cured": "80144",</span><br><span class="line">                    "asymptomatic": "99",</span><br><span class="line">                    "asymptomaticRelative": "7",</span><br><span class="line">                    "unconfirmed": "7",</span><br><span class="line">                    "relativeTime": "1593792000",</span><br><span class="line">                    "confirmedRelative": "19",</span><br><span class="line">                    "unconfirmedRelative": "1",</span><br><span class="line">                    "curedRelative": "27",</span><br><span class="line">                    "diedRelative": "0",</span><br><span class="line">                    "icu": "6",</span><br><span class="line">                    "icuRelative": "0",</span><br><span class="line">                    "overseasInput": "1931",</span><br><span class="line">                    "unOverseasInputCumulative": "83375",</span><br><span class="line">                    "overseasInputRelative": "6",</span><br><span class="line">                    "unOverseasInputNewAdd": "13",</span><br><span class="line">                    "curConfirm": "515",</span><br><span class="line">                    "curConfirmRelative": "-8",</span><br><span class="line">                    "icuDisable": "1"</span><br><span class="line">                &#125;,</span><br><span class="line">                "summaryDataOut": &#123;                           // summaryDataOut 国外总的疫情数据</span><br><span class="line">                    "confirmed": "11302569",</span><br><span class="line">                    "died": "528977",</span><br><span class="line">                    "curConfirm": "4410601",</span><br><span class="line">                    "cured": "6362991",</span><br><span class="line">                    "confirmedRelative": "206165",</span><br><span class="line">                    "curedRelative": "190018",</span><br><span class="line">                    "diedRelative": "4876",</span><br><span class="line">                    "curConfirmRelative": "11271",</span><br><span class="line">                    "relativeTime": "1593792000"</span><br><span class="line">                &#125;,</span><br><span class="line">                "trend": &#123;                                    // trend 字典，包含国内每日的疫情数据</span><br><span class="line">                    "updateDate": [],                         // 日期</span><br><span class="line">                    "list": [                                 // list 列表，每项数据及其对应的值</span><br><span class="line">                        &#123;</span><br><span class="line">                            <span class="attr">"name"</span>: <span class="string">"确诊"</span>,</span><br><span class="line">                            <span class="attr">"data"</span>: []</span><br><span class="line">                        &#125;,</span><br><span class="line">                        &#123;</span><br><span class="line">                            <span class="attr">"name"</span>: <span class="string">"疑似"</span>,</span><br><span class="line">                            <span class="attr">"data"</span>: []</span><br><span class="line">                        &#125;,</span><br><span class="line">                        &#123;</span><br><span class="line">                            <span class="attr">"name"</span>: <span class="string">"治愈"</span>,</span><br><span class="line">                            <span class="attr">"data"</span>: []</span><br><span class="line">                        &#125;,</span><br><span class="line">                        &#123;</span><br><span class="line">                            <span class="attr">"name"</span>: <span class="string">"死亡"</span>,</span><br><span class="line">                            <span class="attr">"data"</span>: []</span><br><span class="line">                        &#125;,</span><br><span class="line">                        &#123;</span><br><span class="line">                            <span class="attr">"name"</span>: <span class="string">"新增确诊"</span>,</span><br><span class="line">                            <span class="attr">"data"</span>: []</span><br><span class="line">                        &#125;,</span><br><span class="line">                        &#123;</span><br><span class="line">                            <span class="attr">"name"</span>: <span class="string">"新增疑似"</span>,</span><br><span class="line">                            <span class="attr">"data"</span>: []</span><br><span class="line">                        &#125;,</span><br><span class="line">                        &#123;</span><br><span class="line">                            <span class="attr">"name"</span>: <span class="string">"新增治愈"</span>,</span><br><span class="line">                            <span class="attr">"data"</span>: []</span><br><span class="line">                        &#125;,</span><br><span class="line">                        &#123;</span><br><span class="line">                            <span class="attr">"name"</span>: <span class="string">"新增死亡"</span>,</span><br><span class="line">                            <span class="attr">"data"</span>: []</span><br><span class="line">                        &#125;,</span><br><span class="line">                        &#123;</span><br><span class="line">                            <span class="attr">"name"</span>: <span class="string">"累计境外输入"</span>,</span><br><span class="line">                            <span class="attr">"data"</span>: []</span><br><span class="line">                        &#125;,</span><br><span class="line">                        &#123;</span><br><span class="line">                            <span class="attr">"name"</span>: <span class="string">"新增境外输入"</span>,</span><br><span class="line">                            <span class="attr">"data"</span>: []</span><br><span class="line">                        &#125;</span><br><span class="line">                    ]</span><br><span class="line">                &#125;,</span><br><span class="line">                "foreignLastUpdatedTime": "2020.07.05 16:13",       // 国外疫情数据最后更新时间</span><br><span class="line">                "globalList": [                                     // globalList 列表，每一个元素是一个字典</span><br><span class="line">                    &#123;</span><br><span class="line">                        "area": "亚洲",                              // 按照不同洲进行分类</span><br><span class="line">                        "subList": [                                // subList 列表，每个洲各个国家的疫情数据</span><br><span class="line">                            &#123;</span><br><span class="line">                                <span class="attr">"died"</span>: <span class="string">"52"</span>,</span><br><span class="line">                                <span class="attr">"confirmed"</span>: <span class="string">"6159"</span>,</span><br><span class="line">                                <span class="attr">"crued"</span>: <span class="string">"4809"</span>,</span><br><span class="line">                                <span class="attr">"curConfirm"</span>: <span class="string">"1298"</span>,</span><br><span class="line">                                <span class="attr">"confirmedRelative"</span>: <span class="string">"0"</span>,</span><br><span class="line">                                <span class="attr">"relativeTime"</span>: <span class="string">"1593792000"</span>,</span><br><span class="line">                                <span class="attr">"country"</span>: <span class="string">"塔吉克斯坦"</span></span><br><span class="line">                            &#125;</span><br><span class="line">                        ],</span><br><span class="line">                        "died": "56556",                            // 每个洲总的疫情数据</span><br><span class="line">                        "crued": "1625562",</span><br><span class="line">                        "confirmed": "2447873",</span><br><span class="line">                        "curConfirm": "765755",</span><br><span class="line">                        "confirmedRelative": "60574"</span><br><span class="line">                    &#125;,</span><br><span class="line">                    &#123;</span><br><span class="line">                        "area": "其他",                             // 其他特殊区域疫情数据</span><br><span class="line">                        "subList": [</span><br><span class="line">                            &#123;</span><br><span class="line">                                <span class="attr">"died"</span>: <span class="string">"13"</span>,</span><br><span class="line">                                <span class="attr">"confirmed"</span>: <span class="string">"712"</span>,</span><br><span class="line">                                <span class="attr">"crued"</span>: <span class="string">"651"</span>,</span><br><span class="line">                                <span class="attr">"curConfirm"</span>: <span class="string">"48"</span>,</span><br><span class="line">                                <span class="attr">"confirmedRelative"</span>: <span class="string">"0"</span>,</span><br><span class="line">                                <span class="attr">"relativeTime"</span>: <span class="string">"1593792000"</span>,</span><br><span class="line">                                <span class="attr">"country"</span>: <span class="string">"钻石公主号邮轮"</span></span><br><span class="line">                            &#125;</span><br><span class="line">                        ],</span><br><span class="line">                        "died": "13",                              // 其他特殊区域疫情总的数据</span><br><span class="line">                        "crued": "651",</span><br><span class="line">                        "confirmed": "712",</span><br><span class="line">                        "curConfirm": "48",</span><br><span class="line">                        "confirmedRelative": "0"</span><br><span class="line">                    &#125;,</span><br><span class="line">                    &#123;</span><br><span class="line">                        "area": "热门",                            // 热门国家疫情数据</span><br><span class="line">                        "subList": [</span><br><span class="line">                            &#123;</span><br><span class="line">                                <span class="attr">"died"</span>: <span class="string">"5206"</span>,</span><br><span class="line">                                <span class="attr">"confirmed"</span>: <span class="string">"204610"</span>,</span><br><span class="line">                                <span class="attr">"crued"</span>: <span class="string">"179492"</span>,</span><br><span class="line">                                <span class="attr">"curConfirm"</span>: <span class="string">"19912"</span>,</span><br><span class="line">                                <span class="attr">"confirmedRelative"</span>: <span class="string">"1172"</span>,</span><br><span class="line">                                <span class="attr">"relativeTime"</span>: <span class="string">"1593792000"</span>,</span><br><span class="line">                                <span class="attr">"country"</span>: <span class="string">"土耳其"</span></span><br><span class="line">                            &#125;</span><br><span class="line">                        ],</span><br><span class="line">                        "died": "528967",                         // 热门国家疫情总的数据</span><br><span class="line">                        "crued": "6362924",</span><br><span class="line">                        "confirmed": "11302357",</span><br><span class="line">                        "confirmedRelative": "216478",</span><br><span class="line">                        "curConfirm": "4410466"</span><br><span class="line">                    &#125;],</span><br><span class="line">                "allForeignTrend": &#123;                            // allForeignTrend 字典，包含国外每日的疫情数据</span><br><span class="line">                        "updateDate": [],                       // 日期</span><br><span class="line">                        "list": [                               // list 列表，每项数据及其对应的值</span><br><span class="line">                            &#123;</span><br><span class="line">                                <span class="attr">"name"</span>: <span class="string">"累计确诊"</span>,</span><br><span class="line">                                <span class="attr">"data"</span>: []</span><br><span class="line">                            &#125;,</span><br><span class="line">                            &#123;</span><br><span class="line">                                <span class="attr">"name"</span>: <span class="string">"治愈"</span>,</span><br><span class="line">                                <span class="attr">"data"</span>: []</span><br><span class="line">                            &#125;,</span><br><span class="line">                            &#123;</span><br><span class="line">                                <span class="attr">"name"</span>: <span class="string">"死亡"</span>,</span><br><span class="line">                                <span class="attr">"data"</span>: []</span><br><span class="line">                            &#125;,</span><br><span class="line">                            &#123;</span><br><span class="line">                                <span class="attr">"name"</span>: <span class="string">"现有确诊"</span>,</span><br><span class="line">                                <span class="attr">"data"</span>: []</span><br><span class="line">                            &#125;,</span><br><span class="line">                            &#123;</span><br><span class="line">                                <span class="attr">"name"</span>: <span class="string">"新增确诊"</span>,</span><br><span class="line">                                <span class="attr">"data"</span>: []</span><br><span class="line">                            &#125;</span><br><span class="line">                        ]</span><br><span class="line">                    &#125;,</span><br><span class="line">                "topAddCountry": [                    // 确诊增量最高的国家</span><br><span class="line">                        &#123;</span><br><span class="line">                            <span class="attr">"name"</span>: <span class="string">"美国"</span>,</span><br><span class="line">                            <span class="attr">"value"</span>: <span class="number">53162</span></span><br><span class="line">                        &#125;</span><br><span class="line">                    ],</span><br><span class="line">                "topOverseasInput": [                // 境外输入最多的省份</span><br><span class="line">                    &#123;</span><br><span class="line">                        <span class="attr">"name"</span>: <span class="string">"黑龙江"</span>,</span><br><span class="line">                        <span class="attr">"value"</span>: <span class="number">386</span></span><br><span class="line">                    &#125;</span><br><span class="line">                ]</span><br><span class="line">            &#125;</span><br><span class="line">        ]</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h2 id="【4x00】主函数-main"><a href="#【4x00】主函数-main" class="headerlink" title="【4x00】主函数 main()"></a><font color="#FF0000">【4x00】主函数 main()</font></h2><p>分别将数据获取、词云图绘制、地图绘制写入三个文件：<code>data_get()</code>、<code>data_wordcloud()</code>、<code>data_map()</code>，然后使用一个主函数文件 main.py 来调用这三个文件里面的函数。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> data_get</span><br><span class="line"><span class="keyword">import</span> data_wordcloud</span><br><span class="line"><span class="keyword">import</span> data_map</span><br><span class="line"></span><br><span class="line">data_dict = data_get.init()</span><br><span class="line">data_get.china_total_data(data_dict)</span><br><span class="line">data_get.global_total_data(data_dict)</span><br><span class="line">data_get.china_daily_data(data_dict)</span><br><span class="line">data_get.foreign_daily_data(data_dict)</span><br><span class="line"></span><br><span class="line">data_wordcloud.china_wordcloud()</span><br><span class="line">data_wordcloud.global_wordcloud()</span><br><span class="line"></span><br><span class="line">data_map.all_map()</span><br></pre></td></tr></table></figure><h2 id="【5x00】数据获取模块-data-get"><a href="#【5x00】数据获取模块-data-get" class="headerlink" title="【5x00】数据获取模块 data_get"></a><font color="#FF0000">【5x00】数据获取模块 data_get</font></h2><h3 id="【5x01】初始化函数-init"><a href="#【5x01】初始化函数-init" class="headerlink" title="【5x01】初始化函数 init()"></a><font color="#4876FF">【5x01】初始化函数 init()</font></h3><p>使用 xpath 语法 <code>//script[@id=&quot;captain-config&quot;]/text()</code> 提取里面的值，利用 <code>json.loads</code> 方法将其转换为字典对象，以便后续的其他函数调用。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">init</span><span class="params">()</span>:</span></span><br><span class="line">    headers = &#123;</span><br><span class="line">        <span class="string">'user-agent'</span>: <span class="string">'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/84.0.4147.13 Safari/537.36'</span></span><br><span class="line">    &#125;</span><br><span class="line">    url = <span class="string">'https://voice.baidu.com/act/newpneumonia/newpneumonia/'</span></span><br><span class="line">    response = requests.get(url=url, headers=headers)</span><br><span class="line">    tree = etree.HTML(response.text)</span><br><span class="line">    dict1 = tree.xpath(<span class="string">'//script[@id="captain-config"]/text()'</span>)</span><br><span class="line">    print(type(dict1[<span class="number">0</span>]))</span><br><span class="line">    dict2 = json.loads(dict1[<span class="number">0</span>])</span><br><span class="line">    <span class="keyword">return</span> dict2</span><br></pre></td></tr></table></figure><h3 id="【5x02】中国总数据-china-total-data"><a href="#【5x02】中国总数据-china-total-data" class="headerlink" title="【5x02】中国总数据 china_total_data()"></a><font color="#4876FF">【5x02】中国总数据 china_total_data()</font></h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">china_total_data</span><span class="params">(data)</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    1、中国省/直辖市/自治区/行政区疫情数据</span></span><br><span class="line"><span class="string">    省/直辖市/自治区/行政区：area</span></span><br><span class="line"><span class="string">    现有确诊：    curConfirm</span></span><br><span class="line"><span class="string">    累计确诊：    confirmed</span></span><br><span class="line"><span class="string">    累计治愈：    crued</span></span><br><span class="line"><span class="string">    累计死亡：    died</span></span><br><span class="line"><span class="string">    现有确诊增量： curConfirmRelative</span></span><br><span class="line"><span class="string">    累计确诊增量： confirmedRelative</span></span><br><span class="line"><span class="string">    累计治愈增量： curedRelative</span></span><br><span class="line"><span class="string">    累计死亡增量： diedRelative</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line"></span><br><span class="line">    wb = openpyxl.Workbook()            <span class="comment"># 创建工作簿</span></span><br><span class="line">    ws_china = wb.active                <span class="comment"># 获取工作表</span></span><br><span class="line">    ws_china.title = <span class="string">"中国省份疫情数据"</span>   <span class="comment"># 命名工作表</span></span><br><span class="line">    ws_china.append([<span class="string">'省/直辖市/自治区/行政区'</span>, <span class="string">'现有确诊'</span>, <span class="string">'累计确诊'</span>, <span class="string">'累计治愈'</span>,</span><br><span class="line">                     <span class="string">'累计死亡'</span>, <span class="string">'现有确诊增量'</span>, <span class="string">'累计确诊增量'</span>,</span><br><span class="line">                     <span class="string">'累计治愈增量'</span>, <span class="string">'累计死亡增量'</span>])</span><br><span class="line">    china = data[<span class="string">'component'</span>][<span class="number">0</span>][<span class="string">'caseList'</span>]</span><br><span class="line">    <span class="keyword">for</span> province <span class="keyword">in</span> china:</span><br><span class="line">        ws_china.append([province[<span class="string">'area'</span>],</span><br><span class="line">                        province[<span class="string">'curConfirm'</span>],</span><br><span class="line">                        province[<span class="string">'confirmed'</span>],</span><br><span class="line">                        province[<span class="string">'crued'</span>],</span><br><span class="line">                        province[<span class="string">'died'</span>],</span><br><span class="line">                        province[<span class="string">'curConfirmRelative'</span>],</span><br><span class="line">                        province[<span class="string">'confirmedRelative'</span>],</span><br><span class="line">                        province[<span class="string">'curedRelative'</span>],</span><br><span class="line">                        province[<span class="string">'diedRelative'</span>]])</span><br><span class="line"></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    2、中国城市疫情数据</span></span><br><span class="line"><span class="string">    城市：city</span></span><br><span class="line"><span class="string">    现有确诊：curConfirm</span></span><br><span class="line"><span class="string">    累计确诊：confirmed</span></span><br><span class="line"><span class="string">    累计治愈：crued</span></span><br><span class="line"><span class="string">    累计死亡：died</span></span><br><span class="line"><span class="string">    累计确诊增量：confirmedRelative</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line"></span><br><span class="line">    ws_city = wb.create_sheet(<span class="string">'中国城市疫情数据'</span>)</span><br><span class="line">    ws_city.append([<span class="string">'城市'</span>, <span class="string">'现有确诊'</span>, <span class="string">'累计确诊'</span>,</span><br><span class="line">                    <span class="string">'累计治愈'</span>, <span class="string">'累计死亡'</span>, <span class="string">'累计确诊增量'</span>])</span><br><span class="line">    <span class="keyword">for</span> province <span class="keyword">in</span> china:</span><br><span class="line">        <span class="keyword">for</span> city <span class="keyword">in</span> province[<span class="string">'subList'</span>]:</span><br><span class="line">            <span class="comment"># 某些城市没有 curConfirm 数据，则将其设置为 0，crued 和 died 为空时，替换成 0</span></span><br><span class="line">            <span class="keyword">if</span> <span class="string">'curConfirm'</span> <span class="keyword">not</span> <span class="keyword">in</span> city:</span><br><span class="line">                city[<span class="string">'curConfirm'</span>] = <span class="string">'0'</span></span><br><span class="line">            <span class="keyword">if</span> city[<span class="string">'crued'</span>] == <span class="string">''</span>:</span><br><span class="line">                city[<span class="string">'crued'</span>] = <span class="string">'0'</span></span><br><span class="line">            <span class="keyword">if</span> city[<span class="string">'died'</span>] == <span class="string">''</span>:</span><br><span class="line">                city[<span class="string">'died'</span>] = <span class="string">'0'</span></span><br><span class="line">            ws_city.append([city[<span class="string">'city'</span>], <span class="string">'0'</span>, city[<span class="string">'confirmed'</span>],</span><br><span class="line">                           city[<span class="string">'crued'</span>], city[<span class="string">'died'</span>], city[<span class="string">'confirmedRelative'</span>]])</span><br><span class="line"></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    3、中国疫情数据更新时间：mapLastUpdatedTime</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line"></span><br><span class="line">    time_domestic = data[<span class="string">'component'</span>][<span class="number">0</span>][<span class="string">'mapLastUpdatedTime'</span>]</span><br><span class="line">    ws_time = wb.create_sheet(<span class="string">'中国疫情数据更新时间'</span>)</span><br><span class="line">    ws_time.column_dimensions[<span class="string">'A'</span>].width = <span class="number">22</span>  <span class="comment"># 调整列宽</span></span><br><span class="line">    ws_time.append([<span class="string">'中国疫情数据更新时间'</span>])</span><br><span class="line">    ws_time.append([time_domestic])</span><br><span class="line"></span><br><span class="line">    wb.save(<span class="string">'COVID-19-China.xlsx'</span>)</span><br><span class="line">    print(<span class="string">'中国疫情数据已保存至 COVID-19-China.xlsx！'</span>)</span><br></pre></td></tr></table></figure><h3 id="【5x03】全球总数据-global-total-data"><a href="#【5x03】全球总数据-global-total-data" class="headerlink" title="【5x03】全球总数据 global_total_data()"></a><font color="#4876FF">【5x03】全球总数据 global_total_data()</font></h3><p>全球总数据在提取完成后，进行地图绘制时发现并没有中国的数据，因此在写入全球数据时注意要单独将中国的数据插入 Excel 中。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">global_total_data</span><span class="params">(data)</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    1、全球各国疫情数据</span></span><br><span class="line"><span class="string">    国家：country</span></span><br><span class="line"><span class="string">    现有确诊：curConfirm</span></span><br><span class="line"><span class="string">    累计确诊：confirmed</span></span><br><span class="line"><span class="string">    累计治愈：crued</span></span><br><span class="line"><span class="string">    累计死亡：died</span></span><br><span class="line"><span class="string">    累计确诊增量：confirmedRelative</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line"></span><br><span class="line">    wb = openpyxl.Workbook()</span><br><span class="line">    ws_global = wb.active</span><br><span class="line">    ws_global.title = <span class="string">"全球各国疫情数据"</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 按照国家保存数据</span></span><br><span class="line">    countries = data[<span class="string">'component'</span>][<span class="number">0</span>][<span class="string">'caseOutsideList'</span>]</span><br><span class="line">    ws_global.append([<span class="string">'国家'</span>, <span class="string">'现有确诊'</span>, <span class="string">'累计确诊'</span>, <span class="string">'累计治愈'</span>, <span class="string">'累计死亡'</span>, <span class="string">'累计确诊增量'</span>])</span><br><span class="line">    <span class="keyword">for</span> country <span class="keyword">in</span> countries:</span><br><span class="line">        ws_global.append([country[<span class="string">'area'</span>],</span><br><span class="line">                          country[<span class="string">'curConfirm'</span>],</span><br><span class="line">                          country[<span class="string">'confirmed'</span>],</span><br><span class="line">                          country[<span class="string">'crued'</span>],</span><br><span class="line">                          country[<span class="string">'died'</span>],</span><br><span class="line">                          country[<span class="string">'confirmedRelative'</span>]])</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 按照洲保存数据</span></span><br><span class="line">    continent = data[<span class="string">'component'</span>][<span class="number">0</span>][<span class="string">'globalList'</span>]</span><br><span class="line">    <span class="keyword">for</span> area <span class="keyword">in</span> continent:</span><br><span class="line">        ws_foreign = wb.create_sheet(area[<span class="string">'area'</span>] + <span class="string">'疫情数据'</span>)</span><br><span class="line">        ws_foreign.append([<span class="string">'国家'</span>, <span class="string">'现有确诊'</span>, <span class="string">'累计确诊'</span>, <span class="string">'累计治愈'</span>, <span class="string">'累计死亡'</span>, <span class="string">'累计确诊增量'</span>])</span><br><span class="line">        <span class="keyword">for</span> country <span class="keyword">in</span> area[<span class="string">'subList'</span>]:</span><br><span class="line">            ws_foreign.append([country[<span class="string">'country'</span>],</span><br><span class="line">                               country[<span class="string">'curConfirm'</span>],</span><br><span class="line">                               country[<span class="string">'confirmed'</span>],</span><br><span class="line">                               country[<span class="string">'crued'</span>],</span><br><span class="line">                               country[<span class="string">'died'</span>],</span><br><span class="line">                               country[<span class="string">'confirmedRelative'</span>]])</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 在“全球各国疫情数据”和“亚洲疫情数据”两张表中写入中国疫情数据</span></span><br><span class="line">    ws1, ws2 = wb[<span class="string">'全球各国疫情数据'</span>], wb[<span class="string">'亚洲疫情数据'</span>]</span><br><span class="line">    original_data = data[<span class="string">'component'</span>][<span class="number">0</span>][<span class="string">'summaryDataIn'</span>]</span><br><span class="line">    add_china_data = [<span class="string">'中国'</span>,</span><br><span class="line">                      original_data[<span class="string">'curConfirm'</span>],</span><br><span class="line">                      original_data[<span class="string">'confirmed'</span>],</span><br><span class="line">                      original_data[<span class="string">'cured'</span>],</span><br><span class="line">                      original_data[<span class="string">'died'</span>],</span><br><span class="line">                      original_data[<span class="string">'confirmedRelative'</span>]]</span><br><span class="line">    ws1.append(add_china_data)</span><br><span class="line">    ws2.append(add_china_data)</span><br><span class="line"></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    2、全球疫情数据更新时间：foreignLastUpdatedTime</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line"></span><br><span class="line">    time_foreign = data[<span class="string">'component'</span>][<span class="number">0</span>][<span class="string">'foreignLastUpdatedTime'</span>]</span><br><span class="line">    ws_time = wb.create_sheet(<span class="string">'全球疫情数据更新时间'</span>)</span><br><span class="line">    ws_time.column_dimensions[<span class="string">'A'</span>].width = <span class="number">22</span>  <span class="comment"># 调整列宽</span></span><br><span class="line">    ws_time.append([<span class="string">'全球疫情数据更新时间'</span>])</span><br><span class="line">    ws_time.append([time_foreign])</span><br><span class="line"></span><br><span class="line">    wb.save(<span class="string">'COVID-19-Global.xlsx'</span>)</span><br><span class="line">    print(<span class="string">'全球疫情数据已保存至 COVID-19-Global.xlsx！'</span>)</span><br></pre></td></tr></table></figure><h3 id="【5x04】中国每日数据-china-daily-data"><a href="#【5x04】中国每日数据-china-daily-data" class="headerlink" title="【5x04】中国每日数据 china_daily_data()"></a><font color="#4876FF">【5x04】中国每日数据 china_daily_data()</font></h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">china_daily_data</span><span class="params">(data)</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    i_dict = data['component'][0]['trend']</span></span><br><span class="line"><span class="string">    i_dict['updateDate']：日期</span></span><br><span class="line"><span class="string">    i_dict['list'][0]：确诊</span></span><br><span class="line"><span class="string">    i_dict['list'][1]：疑似</span></span><br><span class="line"><span class="string">    i_dict['list'][2]：治愈</span></span><br><span class="line"><span class="string">    i_dict['list'][3]：死亡</span></span><br><span class="line"><span class="string">    i_dict['list'][4]：新增确诊</span></span><br><span class="line"><span class="string">    i_dict['list'][5]：新增疑似</span></span><br><span class="line"><span class="string">    i_dict['list'][6]：新增治愈</span></span><br><span class="line"><span class="string">    i_dict['list'][7]：新增死亡</span></span><br><span class="line"><span class="string">    i_dict['list'][8]：累计境外输入</span></span><br><span class="line"><span class="string">    i_dict['list'][9]：新增境外输入</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line"></span><br><span class="line">    ccd_dict = data[<span class="string">'component'</span>][<span class="number">0</span>][<span class="string">'trend'</span>]</span><br><span class="line">    update_date = ccd_dict[<span class="string">'updateDate'</span>]              <span class="comment"># 日期</span></span><br><span class="line">    china_confirmed = ccd_dict[<span class="string">'list'</span>][<span class="number">0</span>][<span class="string">'data'</span>]     <span class="comment"># 每日累计确诊数据</span></span><br><span class="line">    china_crued = ccd_dict[<span class="string">'list'</span>][<span class="number">2</span>][<span class="string">'data'</span>]         <span class="comment"># 每日累计治愈数据</span></span><br><span class="line">    china_died = ccd_dict[<span class="string">'list'</span>][<span class="number">3</span>][<span class="string">'data'</span>]          <span class="comment"># 每日累计死亡数据</span></span><br><span class="line">    wb = openpyxl.load_workbook(<span class="string">'COVID-19-China.xlsx'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 写入每日累计确诊数据</span></span><br><span class="line">    ws_china_confirmed = wb.create_sheet(<span class="string">'中国每日累计确诊数据'</span>)</span><br><span class="line">    ws_china_confirmed.append([<span class="string">'日期'</span>, <span class="string">'数据'</span>])</span><br><span class="line">    <span class="keyword">for</span> data <span class="keyword">in</span> zip(update_date, china_confirmed):</span><br><span class="line">        ws_china_confirmed.append(data)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 写入每日累计治愈数据</span></span><br><span class="line">    ws_china_crued = wb.create_sheet(<span class="string">'中国每日累计治愈数据'</span>)</span><br><span class="line">    ws_china_crued.append([<span class="string">'日期'</span>, <span class="string">'数据'</span>])</span><br><span class="line">    <span class="keyword">for</span> data <span class="keyword">in</span> zip(update_date, china_crued):</span><br><span class="line">        ws_china_crued.append(data)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 写入每日累计死亡数据</span></span><br><span class="line">    ws_china_died = wb.create_sheet(<span class="string">'中国每日累计死亡数据'</span>)</span><br><span class="line">    ws_china_died.append([<span class="string">'日期'</span>, <span class="string">'数据'</span>])</span><br><span class="line">    <span class="keyword">for</span> data <span class="keyword">in</span> zip(update_date, china_died):</span><br><span class="line">        ws_china_died.append(data)</span><br><span class="line"></span><br><span class="line">    wb.save(<span class="string">'COVID-19-China.xlsx'</span>)</span><br><span class="line">    print(<span class="string">'中国每日累计确诊/治愈/死亡数据已保存至 COVID-19-China.xlsx！'</span>)</span><br></pre></td></tr></table></figure><h3 id="【5x05】境外每日数据-foreign-daily-data"><a href="#【5x05】境外每日数据-foreign-daily-data" class="headerlink" title="【5x05】境外每日数据 foreign_daily_data()"></a><font color="#4876FF">【5x05】境外每日数据 foreign_daily_data()</font></h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">foreign_daily_data</span><span class="params">(data)</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    te_dict = data['component'][0]['allForeignTrend']</span></span><br><span class="line"><span class="string">    te_dict['updateDate']：日期</span></span><br><span class="line"><span class="string">    te_dict['list'][0]：累计确诊</span></span><br><span class="line"><span class="string">    te_dict['list'][1]：治愈</span></span><br><span class="line"><span class="string">    te_dict['list'][2]：死亡</span></span><br><span class="line"><span class="string">    te_dict['list'][3]：现有确诊</span></span><br><span class="line"><span class="string">    te_dict['list'][4]：新增确诊</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line"></span><br><span class="line">    te_dict = data[<span class="string">'component'</span>][<span class="number">0</span>][<span class="string">'allForeignTrend'</span>]</span><br><span class="line">    update_date = te_dict[<span class="string">'updateDate'</span>]                <span class="comment"># 日期</span></span><br><span class="line">    foreign_confirmed = te_dict[<span class="string">'list'</span>][<span class="number">0</span>][<span class="string">'data'</span>]     <span class="comment"># 每日累计确诊数据</span></span><br><span class="line">    foreign_crued = te_dict[<span class="string">'list'</span>][<span class="number">1</span>][<span class="string">'data'</span>]         <span class="comment"># 每日累计治愈数据</span></span><br><span class="line">    foreign_died = te_dict[<span class="string">'list'</span>][<span class="number">2</span>][<span class="string">'data'</span>]          <span class="comment"># 每日累计死亡数据</span></span><br><span class="line">    wb = openpyxl.load_workbook(<span class="string">'COVID-19-Global.xlsx'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 写入每日累计确诊数据</span></span><br><span class="line">    ws_foreign_confirmed = wb.create_sheet(<span class="string">'境外每日累计确诊数据'</span>)</span><br><span class="line">    ws_foreign_confirmed.append([<span class="string">'日期'</span>, <span class="string">'数据'</span>])</span><br><span class="line">    <span class="keyword">for</span> data <span class="keyword">in</span> zip(update_date, foreign_confirmed):</span><br><span class="line">        ws_foreign_confirmed.append(data)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 写入累计治愈数据</span></span><br><span class="line">    ws_foreign_crued = wb.create_sheet(<span class="string">'境外每日累计治愈数据'</span>)</span><br><span class="line">    ws_foreign_crued.append([<span class="string">'日期'</span>, <span class="string">'数据'</span>])</span><br><span class="line">    <span class="keyword">for</span> data <span class="keyword">in</span> zip(update_date, foreign_crued):</span><br><span class="line">        ws_foreign_crued.append(data)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 写入累计死亡数据</span></span><br><span class="line">    ws_foreign_died = wb.create_sheet(<span class="string">'境外每日累计死亡数据'</span>)</span><br><span class="line">    ws_foreign_died.append([<span class="string">'日期'</span>, <span class="string">'数据'</span>])</span><br><span class="line">    <span class="keyword">for</span> data <span class="keyword">in</span> zip(update_date, foreign_died):</span><br><span class="line">        ws_foreign_died.append(data)</span><br><span class="line"></span><br><span class="line">    wb.save(<span class="string">'COVID-19-Global.xlsx'</span>)</span><br><span class="line">    print(<span class="string">'境外每日累计确诊/治愈/死亡数据已保存至 COVID-19-Global.xlsx！'</span>)</span><br></pre></td></tr></table></figure><h2 id="【6x00】词云图绘制模块-data-wordcloud"><a href="#【6x00】词云图绘制模块-data-wordcloud" class="headerlink" title="【6x00】词云图绘制模块 data_wordcloud"></a><font color="#FF0000">【6x00】词云图绘制模块 data_wordcloud</font></h2><h3 id="【6x01】中国累计确诊词云图-foreign-daily-data"><a href="#【6x01】中国累计确诊词云图-foreign-daily-data" class="headerlink" title="【6x01】中国累计确诊词云图 foreign_daily_data()"></a><font color="#4876FF">【6x01】中国累计确诊词云图 foreign_daily_data()</font></h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">china_wordcloud</span><span class="params">()</span>:</span></span><br><span class="line">    wb = openpyxl.load_workbook(<span class="string">'COVID-19-China.xlsx'</span>)  <span class="comment"># 获取已有的xlsx文件</span></span><br><span class="line">    ws_china = wb[<span class="string">'中国省份疫情数据'</span>]                     <span class="comment"># 获取中国省份疫情数据表</span></span><br><span class="line">    ws_china.delete_rows(<span class="number">1</span>)                             <span class="comment"># 删除第一行</span></span><br><span class="line">    china_dict = &#123;&#125;                                     <span class="comment"># 将省份及其累计确诊按照键值对形式储存在字典中</span></span><br><span class="line">    <span class="keyword">for</span> data <span class="keyword">in</span> ws_china.values:</span><br><span class="line">        china_dict[data[<span class="number">0</span>]] = int(data[<span class="number">2</span>])</span><br><span class="line">    word_cloud = wordcloud.WordCloud(font_path=<span class="string">'C:/Windows/Fonts/simsun.ttc'</span>,</span><br><span class="line">                                     background_color=<span class="string">'#CDC9C9'</span>,</span><br><span class="line">                                     min_font_size=<span class="number">15</span>,</span><br><span class="line">                                     width=<span class="number">900</span>, height=<span class="number">500</span>)</span><br><span class="line">    word_cloud.generate_from_frequencies(china_dict)</span><br><span class="line">    word_cloud.to_file(<span class="string">'WordCloud-China.png'</span>)</span><br><span class="line">    print(<span class="string">'中国省份疫情词云图绘制完毕！'</span>)</span><br></pre></td></tr></table></figure><h3 id="【6x02】全球累计确诊词云图-foreign-daily-data"><a href="#【6x02】全球累计确诊词云图-foreign-daily-data" class="headerlink" title="【6x02】全球累计确诊词云图 foreign_daily_data()"></a><font color="#4876FF">【6x02】全球累计确诊词云图 foreign_daily_data()</font></h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">global_wordcloud</span><span class="params">()</span>:</span></span><br><span class="line">    wb = openpyxl.load_workbook(<span class="string">'COVID-19-Global.xlsx'</span>)</span><br><span class="line">    ws_global = wb[<span class="string">'全球各国疫情数据'</span>]</span><br><span class="line">    ws_global.delete_rows(<span class="number">1</span>)</span><br><span class="line">    global_dict = &#123;&#125;</span><br><span class="line">    <span class="keyword">for</span> data <span class="keyword">in</span> ws_global.values:</span><br><span class="line">        global_dict[data[<span class="number">0</span>]] = int(data[<span class="number">2</span>])</span><br><span class="line">    word_cloud = wordcloud.WordCloud(font_path=<span class="string">'C:/Windows/Fonts/simsun.ttc'</span>,</span><br><span class="line">                                     background_color=<span class="string">'#CDC9C9'</span>,</span><br><span class="line">                                     width=<span class="number">900</span>, height=<span class="number">500</span>)</span><br><span class="line">    word_cloud.generate_from_frequencies(global_dict)</span><br><span class="line">    word_cloud.to_file(<span class="string">'WordCloud-Global.png'</span>)</span><br><span class="line">    print(<span class="string">'全球各国疫情词云图绘制完毕！'</span>)</span><br></pre></td></tr></table></figure><hr><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">这里是一段防爬虫文本，请读者忽略。</span></span><br><span class="line"><span class="string">本文原创首发于</span> <span class="string">CSDN，作者</span> <span class="string">TRHX。</span></span><br><span class="line"><span class="string">博客首页：https://itrhx.blog.csdn.net/</span></span><br><span class="line"><span class="string">本文链接：https://itrhx.blog.csdn.net/article/details/107140534</span></span><br><span class="line"><span class="string">未经授权，禁止转载！恶意转载，后果自负！尊重原创，远离剽窃！</span></span><br></pre></td></tr></table></figure><hr><h2 id="【7x00】地图绘制模块-data-map"><a href="#【7x00】地图绘制模块-data-map" class="headerlink" title="【7x00】地图绘制模块 data_map"></a><font color="#FF0000">【7x00】地图绘制模块 data_map</font></h2><h3 id="【7x01】中国累计确诊地图-china-total-map"><a href="#【7x01】中国累计确诊地图-china-total-map" class="headerlink" title="【7x01】中国累计确诊地图 china_total_map()"></a><font color="#4876FF">【7x01】中国累计确诊地图 china_total_map()</font></h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">china_total_map</span><span class="params">()</span>:</span></span><br><span class="line">    wb = openpyxl.load_workbook(<span class="string">'COVID-19-China.xlsx'</span>)  <span class="comment"># 获取已有的xlsx文件</span></span><br><span class="line">    ws_time = wb[<span class="string">'中国疫情数据更新时间'</span>]                   <span class="comment"># 获取文件中中国疫情数据更新时间表</span></span><br><span class="line">    ws_data = wb[<span class="string">'中国省份疫情数据'</span>]                      <span class="comment"># 获取文件中中国省份疫情数据表</span></span><br><span class="line">    ws_data.delete_rows(<span class="number">1</span>)                              <span class="comment"># 删除第一行</span></span><br><span class="line">    province = []                                       <span class="comment"># 省份</span></span><br><span class="line">    curconfirm = []                                     <span class="comment"># 累计确诊</span></span><br><span class="line">    <span class="keyword">for</span> data <span class="keyword">in</span> ws_data.values:</span><br><span class="line">        province.append(data[<span class="number">0</span>])</span><br><span class="line">        curconfirm.append(data[<span class="number">2</span>])</span><br><span class="line">    time_china = ws_time[<span class="string">'A2'</span>].value                    <span class="comment"># 更新时间</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 设置分级颜色</span></span><br><span class="line">    pieces = [</span><br><span class="line">        &#123;<span class="string">'max'</span>: <span class="number">0</span>, <span class="string">'min'</span>: <span class="number">0</span>, <span class="string">'label'</span>: <span class="string">'0'</span>, <span class="string">'color'</span>: <span class="string">'#FFFFFF'</span>&#125;,</span><br><span class="line">        &#123;<span class="string">'max'</span>: <span class="number">9</span>, <span class="string">'min'</span>: <span class="number">1</span>, <span class="string">'label'</span>: <span class="string">'1-9'</span>, <span class="string">'color'</span>: <span class="string">'#FFE5DB'</span>&#125;,</span><br><span class="line">        &#123;<span class="string">'max'</span>: <span class="number">99</span>, <span class="string">'min'</span>: <span class="number">10</span>, <span class="string">'label'</span>: <span class="string">'10-99'</span>, <span class="string">'color'</span>: <span class="string">'#FF9985'</span>&#125;,</span><br><span class="line">        &#123;<span class="string">'max'</span>: <span class="number">999</span>, <span class="string">'min'</span>: <span class="number">100</span>, <span class="string">'label'</span>: <span class="string">'100-999'</span>, <span class="string">'color'</span>: <span class="string">'#F57567'</span>&#125;,</span><br><span class="line">        &#123;<span class="string">'max'</span>: <span class="number">9999</span>, <span class="string">'min'</span>: <span class="number">1000</span>, <span class="string">'label'</span>: <span class="string">'1000-9999'</span>, <span class="string">'color'</span>: <span class="string">'#E64546'</span>&#125;,</span><br><span class="line">        &#123;<span class="string">'max'</span>: <span class="number">99999</span>, <span class="string">'min'</span>: <span class="number">10000</span>, <span class="string">'label'</span>: <span class="string">'≧10000'</span>, <span class="string">'color'</span>: <span class="string">'#B80909'</span>&#125;</span><br><span class="line">    ]</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 绘制地图</span></span><br><span class="line">    ct_map = (</span><br><span class="line">        Map()</span><br><span class="line">        .add(series_name=<span class="string">'累计确诊人数'</span>, data_pair=[list(z) <span class="keyword">for</span> z <span class="keyword">in</span> zip(province, curconfirm)], maptype=<span class="string">"china"</span>)</span><br><span class="line">        .set_global_opts(</span><br><span class="line">            title_opts=opts.TitleOpts(title=<span class="string">"中国疫情数据（累计确诊）"</span>,</span><br><span class="line">                                      subtitle=<span class="string">'数据更新至：'</span> + time_china + <span class="string">'\n\n来源：百度疫情实时大数据报告'</span>),</span><br><span class="line">            visualmap_opts=opts.VisualMapOpts(max_=<span class="number">300</span>, is_piecewise=<span class="keyword">True</span>, pieces=pieces)</span><br><span class="line">        )</span><br><span class="line">    )</span><br><span class="line">    <span class="keyword">return</span> ct_map</span><br></pre></td></tr></table></figure><h3 id="【7x02】全球累计确诊地图-global-total-map"><a href="#【7x02】全球累计确诊地图-global-total-map" class="headerlink" title="【7x02】全球累计确诊地图 global_total_map()"></a><font color="#4876FF">【7x02】全球累计确诊地图 global_total_map()</font></h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">global_total_map</span><span class="params">()</span>:</span></span><br><span class="line">    wb = openpyxl.load_workbook(<span class="string">'COVID-19-Global.xlsx'</span>)</span><br><span class="line">    ws_time = wb[<span class="string">'全球疫情数据更新时间'</span>]</span><br><span class="line">    ws_data = wb[<span class="string">'全球各国疫情数据'</span>]</span><br><span class="line">    ws_data.delete_rows(<span class="number">1</span>)</span><br><span class="line">    country = []                        <span class="comment"># 国家</span></span><br><span class="line">    curconfirm = []                     <span class="comment"># 累计确诊</span></span><br><span class="line">    <span class="keyword">for</span> data <span class="keyword">in</span> ws_data.values:</span><br><span class="line">        country.append(data[<span class="number">0</span>])</span><br><span class="line">        curconfirm.append(data[<span class="number">2</span>])</span><br><span class="line">    time_global = ws_time[<span class="string">'A2'</span>].value   <span class="comment"># 更新时间</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 国家名称中英文映射表</span></span><br><span class="line">    name_map = &#123;</span><br><span class="line">          <span class="string">"Somalia"</span>: <span class="string">"索马里"</span>,</span><br><span class="line">          <span class="string">"Liechtenstein"</span>: <span class="string">"列支敦士登"</span>,</span><br><span class="line">          <span class="string">"Morocco"</span>: <span class="string">"摩洛哥"</span>,</span><br><span class="line">          <span class="string">"W. Sahara"</span>: <span class="string">"西撒哈拉"</span>,</span><br><span class="line">          <span class="string">"Serbia"</span>: <span class="string">"塞尔维亚"</span>,</span><br><span class="line">          <span class="string">"Afghanistan"</span>: <span class="string">"阿富汗"</span>,</span><br><span class="line">          <span class="string">"Angola"</span>: <span class="string">"安哥拉"</span>,</span><br><span class="line">          <span class="string">"Albania"</span>: <span class="string">"阿尔巴尼亚"</span>,</span><br><span class="line">          <span class="string">"Andorra"</span>: <span class="string">"安道尔共和国"</span>,</span><br><span class="line">          <span class="string">"United Arab Emirates"</span>: <span class="string">"阿拉伯联合酋长国"</span>,</span><br><span class="line">          <span class="string">"Argentina"</span>: <span class="string">"阿根廷"</span>,</span><br><span class="line">          <span class="string">"Armenia"</span>: <span class="string">"亚美尼亚"</span>,</span><br><span class="line">          <span class="string">"Australia"</span>: <span class="string">"澳大利亚"</span>,</span><br><span class="line">          <span class="string">"Austria"</span>: <span class="string">"奥地利"</span>,</span><br><span class="line">          <span class="string">"Azerbaijan"</span>: <span class="string">"阿塞拜疆"</span>,</span><br><span class="line">          <span class="string">"Burundi"</span>: <span class="string">"布隆迪"</span>,</span><br><span class="line">          <span class="string">"Belgium"</span>: <span class="string">"比利时"</span>,</span><br><span class="line">          <span class="string">"Benin"</span>: <span class="string">"贝宁"</span>,</span><br><span class="line">          <span class="string">"Burkina Faso"</span>: <span class="string">"布基纳法索"</span>,</span><br><span class="line">          <span class="string">"Bangladesh"</span>: <span class="string">"孟加拉国"</span>,</span><br><span class="line">          <span class="string">"Bulgaria"</span>: <span class="string">"保加利亚"</span>,</span><br><span class="line">          <span class="string">"Bahrain"</span>: <span class="string">"巴林"</span>,</span><br><span class="line">          <span class="string">"Bahamas"</span>: <span class="string">"巴哈马"</span>,</span><br><span class="line">          <span class="string">"Bosnia and Herz."</span>: <span class="string">"波斯尼亚和黑塞哥维那"</span>,</span><br><span class="line">          <span class="string">"Belarus"</span>: <span class="string">"白俄罗斯"</span>,</span><br><span class="line">          <span class="string">"Belize"</span>: <span class="string">"伯利兹"</span>,</span><br><span class="line">          <span class="string">"Bermuda"</span>: <span class="string">"百慕大"</span>,</span><br><span class="line">          <span class="string">"Bolivia"</span>: <span class="string">"玻利维亚"</span>,</span><br><span class="line">          <span class="string">"Brazil"</span>: <span class="string">"巴西"</span>,</span><br><span class="line">          <span class="string">"Barbados"</span>: <span class="string">"巴巴多斯"</span>,</span><br><span class="line">          <span class="string">"Brunei"</span>: <span class="string">"文莱"</span>,</span><br><span class="line">          <span class="string">"Bhutan"</span>: <span class="string">"不丹"</span>,</span><br><span class="line">          <span class="string">"Botswana"</span>: <span class="string">"博茨瓦纳"</span>,</span><br><span class="line">          <span class="string">"Central African Rep."</span>: <span class="string">"中非共和国"</span>,</span><br><span class="line">          <span class="string">"Canada"</span>: <span class="string">"加拿大"</span>,</span><br><span class="line">          <span class="string">"Switzerland"</span>: <span class="string">"瑞士"</span>,</span><br><span class="line">          <span class="string">"Chile"</span>: <span class="string">"智利"</span>,</span><br><span class="line">          <span class="string">"China"</span>: <span class="string">"中国"</span>,</span><br><span class="line">          <span class="string">"Côte d'Ivoire"</span>: <span class="string">"科特迪瓦"</span>,</span><br><span class="line">          <span class="string">"Cameroon"</span>: <span class="string">"喀麦隆"</span>,</span><br><span class="line">          <span class="string">"Dem. Rep. Congo"</span>: <span class="string">"刚果（布）"</span>,</span><br><span class="line">          <span class="string">"Congo"</span>: <span class="string">"刚果（金）"</span>,</span><br><span class="line">          <span class="string">"Colombia"</span>: <span class="string">"哥伦比亚"</span>,</span><br><span class="line">          <span class="string">"Cape Verde"</span>: <span class="string">"佛得角"</span>,</span><br><span class="line">          <span class="string">"Costa Rica"</span>: <span class="string">"哥斯达黎加"</span>,</span><br><span class="line">          <span class="string">"Cuba"</span>: <span class="string">"古巴"</span>,</span><br><span class="line">          <span class="string">"N. Cyprus"</span>: <span class="string">"北塞浦路斯"</span>,</span><br><span class="line">          <span class="string">"Cyprus"</span>: <span class="string">"塞浦路斯"</span>,</span><br><span class="line">          <span class="string">"Czech Rep."</span>: <span class="string">"捷克"</span>,</span><br><span class="line">          <span class="string">"Germany"</span>: <span class="string">"德国"</span>,</span><br><span class="line">          <span class="string">"Djibouti"</span>: <span class="string">"吉布提"</span>,</span><br><span class="line">          <span class="string">"Denmark"</span>: <span class="string">"丹麦"</span>,</span><br><span class="line">          <span class="string">"Dominican Rep."</span>: <span class="string">"多米尼加"</span>,</span><br><span class="line">          <span class="string">"Algeria"</span>: <span class="string">"阿尔及利亚"</span>,</span><br><span class="line">          <span class="string">"Ecuador"</span>: <span class="string">"厄瓜多尔"</span>,</span><br><span class="line">          <span class="string">"Egypt"</span>: <span class="string">"埃及"</span>,</span><br><span class="line">          <span class="string">"Eritrea"</span>: <span class="string">"厄立特里亚"</span>,</span><br><span class="line">          <span class="string">"Spain"</span>: <span class="string">"西班牙"</span>,</span><br><span class="line">          <span class="string">"Estonia"</span>: <span class="string">"爱沙尼亚"</span>,</span><br><span class="line">          <span class="string">"Ethiopia"</span>: <span class="string">"埃塞俄比亚"</span>,</span><br><span class="line">          <span class="string">"Finland"</span>: <span class="string">"芬兰"</span>,</span><br><span class="line">          <span class="string">"Fiji"</span>: <span class="string">"斐济"</span>,</span><br><span class="line">          <span class="string">"France"</span>: <span class="string">"法国"</span>,</span><br><span class="line">          <span class="string">"Gabon"</span>: <span class="string">"加蓬"</span>,</span><br><span class="line">          <span class="string">"United Kingdom"</span>: <span class="string">"英国"</span>,</span><br><span class="line">          <span class="string">"Georgia"</span>: <span class="string">"格鲁吉亚"</span>,</span><br><span class="line">          <span class="string">"Ghana"</span>: <span class="string">"加纳"</span>,</span><br><span class="line">          <span class="string">"Guinea"</span>: <span class="string">"几内亚"</span>,</span><br><span class="line">          <span class="string">"Gambia"</span>: <span class="string">"冈比亚"</span>,</span><br><span class="line">          <span class="string">"Guinea-Bissau"</span>: <span class="string">"几内亚比绍"</span>,</span><br><span class="line">          <span class="string">"Eq. Guinea"</span>: <span class="string">"赤道几内亚"</span>,</span><br><span class="line">          <span class="string">"Greece"</span>: <span class="string">"希腊"</span>,</span><br><span class="line">          <span class="string">"Grenada"</span>: <span class="string">"格林纳达"</span>,</span><br><span class="line">          <span class="string">"Greenland"</span>: <span class="string">"格陵兰岛"</span>,</span><br><span class="line">          <span class="string">"Guatemala"</span>: <span class="string">"危地马拉"</span>,</span><br><span class="line">          <span class="string">"Guam"</span>: <span class="string">"关岛"</span>,</span><br><span class="line">          <span class="string">"Guyana"</span>: <span class="string">"圭亚那合作共和国"</span>,</span><br><span class="line">          <span class="string">"Honduras"</span>: <span class="string">"洪都拉斯"</span>,</span><br><span class="line">          <span class="string">"Croatia"</span>: <span class="string">"克罗地亚"</span>,</span><br><span class="line">          <span class="string">"Haiti"</span>: <span class="string">"海地"</span>,</span><br><span class="line">          <span class="string">"Hungary"</span>: <span class="string">"匈牙利"</span>,</span><br><span class="line">          <span class="string">"Indonesia"</span>: <span class="string">"印度尼西亚"</span>,</span><br><span class="line">          <span class="string">"India"</span>: <span class="string">"印度"</span>,</span><br><span class="line">          <span class="string">"Br. Indian Ocean Ter."</span>: <span class="string">"英属印度洋领土"</span>,</span><br><span class="line">          <span class="string">"Ireland"</span>: <span class="string">"爱尔兰"</span>,</span><br><span class="line">          <span class="string">"Iran"</span>: <span class="string">"伊朗"</span>,</span><br><span class="line">          <span class="string">"Iraq"</span>: <span class="string">"伊拉克"</span>,</span><br><span class="line">          <span class="string">"Iceland"</span>: <span class="string">"冰岛"</span>,</span><br><span class="line">          <span class="string">"Israel"</span>: <span class="string">"以色列"</span>,</span><br><span class="line">          <span class="string">"Italy"</span>: <span class="string">"意大利"</span>,</span><br><span class="line">          <span class="string">"Jamaica"</span>: <span class="string">"牙买加"</span>,</span><br><span class="line">          <span class="string">"Jordan"</span>: <span class="string">"约旦"</span>,</span><br><span class="line">          <span class="string">"Japan"</span>: <span class="string">"日本"</span>,</span><br><span class="line">          <span class="string">"Siachen Glacier"</span>: <span class="string">"锡亚琴冰川"</span>,</span><br><span class="line">          <span class="string">"Kazakhstan"</span>: <span class="string">"哈萨克斯坦"</span>,</span><br><span class="line">          <span class="string">"Kenya"</span>: <span class="string">"肯尼亚"</span>,</span><br><span class="line">          <span class="string">"Kyrgyzstan"</span>: <span class="string">"吉尔吉斯斯坦"</span>,</span><br><span class="line">          <span class="string">"Cambodia"</span>: <span class="string">"柬埔寨"</span>,</span><br><span class="line">          <span class="string">"Korea"</span>: <span class="string">"韩国"</span>,</span><br><span class="line">          <span class="string">"Kuwait"</span>: <span class="string">"科威特"</span>,</span><br><span class="line">          <span class="string">"Lao PDR"</span>: <span class="string">"老挝"</span>,</span><br><span class="line">          <span class="string">"Lebanon"</span>: <span class="string">"黎巴嫩"</span>,</span><br><span class="line">          <span class="string">"Liberia"</span>: <span class="string">"利比里亚"</span>,</span><br><span class="line">          <span class="string">"Libya"</span>: <span class="string">"利比亚"</span>,</span><br><span class="line">          <span class="string">"Sri Lanka"</span>: <span class="string">"斯里兰卡"</span>,</span><br><span class="line">          <span class="string">"Lesotho"</span>: <span class="string">"莱索托"</span>,</span><br><span class="line">          <span class="string">"Lithuania"</span>: <span class="string">"立陶宛"</span>,</span><br><span class="line">          <span class="string">"Luxembourg"</span>: <span class="string">"卢森堡"</span>,</span><br><span class="line">          <span class="string">"Latvia"</span>: <span class="string">"拉脱维亚"</span>,</span><br><span class="line">          <span class="string">"Moldova"</span>: <span class="string">"摩尔多瓦"</span>,</span><br><span class="line">          <span class="string">"Madagascar"</span>: <span class="string">"马达加斯加"</span>,</span><br><span class="line">          <span class="string">"Mexico"</span>: <span class="string">"墨西哥"</span>,</span><br><span class="line">          <span class="string">"Macedonia"</span>: <span class="string">"马其顿"</span>,</span><br><span class="line">          <span class="string">"Mali"</span>: <span class="string">"马里"</span>,</span><br><span class="line">          <span class="string">"Malta"</span>: <span class="string">"马耳他"</span>,</span><br><span class="line">          <span class="string">"Myanmar"</span>: <span class="string">"缅甸"</span>,</span><br><span class="line">          <span class="string">"Montenegro"</span>: <span class="string">"黑山"</span>,</span><br><span class="line">          <span class="string">"Mongolia"</span>: <span class="string">"蒙古国"</span>,</span><br><span class="line">          <span class="string">"Mozambique"</span>: <span class="string">"莫桑比克"</span>,</span><br><span class="line">          <span class="string">"Mauritania"</span>: <span class="string">"毛里塔尼亚"</span>,</span><br><span class="line">          <span class="string">"Mauritius"</span>: <span class="string">"毛里求斯"</span>,</span><br><span class="line">          <span class="string">"Malawi"</span>: <span class="string">"马拉维"</span>,</span><br><span class="line">          <span class="string">"Malaysia"</span>: <span class="string">"马来西亚"</span>,</span><br><span class="line">          <span class="string">"Namibia"</span>: <span class="string">"纳米比亚"</span>,</span><br><span class="line">          <span class="string">"New Caledonia"</span>: <span class="string">"新喀里多尼亚"</span>,</span><br><span class="line">          <span class="string">"Niger"</span>: <span class="string">"尼日尔"</span>,</span><br><span class="line">          <span class="string">"Nigeria"</span>: <span class="string">"尼日利亚"</span>,</span><br><span class="line">          <span class="string">"Nicaragua"</span>: <span class="string">"尼加拉瓜"</span>,</span><br><span class="line">          <span class="string">"Netherlands"</span>: <span class="string">"荷兰"</span>,</span><br><span class="line">          <span class="string">"Norway"</span>: <span class="string">"挪威"</span>,</span><br><span class="line">          <span class="string">"Nepal"</span>: <span class="string">"尼泊尔"</span>,</span><br><span class="line">          <span class="string">"New Zealand"</span>: <span class="string">"新西兰"</span>,</span><br><span class="line">          <span class="string">"Oman"</span>: <span class="string">"阿曼"</span>,</span><br><span class="line">          <span class="string">"Pakistan"</span>: <span class="string">"巴基斯坦"</span>,</span><br><span class="line">          <span class="string">"Panama"</span>: <span class="string">"巴拿马"</span>,</span><br><span class="line">          <span class="string">"Peru"</span>: <span class="string">"秘鲁"</span>,</span><br><span class="line">          <span class="string">"Philippines"</span>: <span class="string">"菲律宾"</span>,</span><br><span class="line">          <span class="string">"Papua New Guinea"</span>: <span class="string">"巴布亚新几内亚"</span>,</span><br><span class="line">          <span class="string">"Poland"</span>: <span class="string">"波兰"</span>,</span><br><span class="line">          <span class="string">"Puerto Rico"</span>: <span class="string">"波多黎各"</span>,</span><br><span class="line">          <span class="string">"Dem. Rep. Korea"</span>: <span class="string">"朝鲜"</span>,</span><br><span class="line">          <span class="string">"Portugal"</span>: <span class="string">"葡萄牙"</span>,</span><br><span class="line">          <span class="string">"Paraguay"</span>: <span class="string">"巴拉圭"</span>,</span><br><span class="line">          <span class="string">"Palestine"</span>: <span class="string">"巴勒斯坦"</span>,</span><br><span class="line">          <span class="string">"Qatar"</span>: <span class="string">"卡塔尔"</span>,</span><br><span class="line">          <span class="string">"Romania"</span>: <span class="string">"罗马尼亚"</span>,</span><br><span class="line">          <span class="string">"Russia"</span>: <span class="string">"俄罗斯"</span>,</span><br><span class="line">          <span class="string">"Rwanda"</span>: <span class="string">"卢旺达"</span>,</span><br><span class="line">          <span class="string">"Saudi Arabia"</span>: <span class="string">"沙特阿拉伯"</span>,</span><br><span class="line">          <span class="string">"Sudan"</span>: <span class="string">"苏丹"</span>,</span><br><span class="line">          <span class="string">"S. Sudan"</span>: <span class="string">"南苏丹"</span>,</span><br><span class="line">          <span class="string">"Senegal"</span>: <span class="string">"塞内加尔"</span>,</span><br><span class="line">          <span class="string">"Singapore"</span>: <span class="string">"新加坡"</span>,</span><br><span class="line">          <span class="string">"Solomon Is."</span>: <span class="string">"所罗门群岛"</span>,</span><br><span class="line">          <span class="string">"Sierra Leone"</span>: <span class="string">"塞拉利昂"</span>,</span><br><span class="line">          <span class="string">"El Salvador"</span>: <span class="string">"萨尔瓦多"</span>,</span><br><span class="line">          <span class="string">"Suriname"</span>: <span class="string">"苏里南"</span>,</span><br><span class="line">          <span class="string">"Slovakia"</span>: <span class="string">"斯洛伐克"</span>,</span><br><span class="line">          <span class="string">"Slovenia"</span>: <span class="string">"斯洛文尼亚"</span>,</span><br><span class="line">          <span class="string">"Sweden"</span>: <span class="string">"瑞典"</span>,</span><br><span class="line">          <span class="string">"Swaziland"</span>: <span class="string">"斯威士兰"</span>,</span><br><span class="line">          <span class="string">"Seychelles"</span>: <span class="string">"塞舌尔"</span>,</span><br><span class="line">          <span class="string">"Syria"</span>: <span class="string">"叙利亚"</span>,</span><br><span class="line">          <span class="string">"Chad"</span>: <span class="string">"乍得"</span>,</span><br><span class="line">          <span class="string">"Togo"</span>: <span class="string">"多哥"</span>,</span><br><span class="line">          <span class="string">"Thailand"</span>: <span class="string">"泰国"</span>,</span><br><span class="line">          <span class="string">"Tajikistan"</span>: <span class="string">"塔吉克斯坦"</span>,</span><br><span class="line">          <span class="string">"Turkmenistan"</span>: <span class="string">"土库曼斯坦"</span>,</span><br><span class="line">          <span class="string">"Timor-Leste"</span>: <span class="string">"东帝汶"</span>,</span><br><span class="line">          <span class="string">"Tonga"</span>: <span class="string">"汤加"</span>,</span><br><span class="line">          <span class="string">"Trinidad and Tobago"</span>: <span class="string">"特立尼达和多巴哥"</span>,</span><br><span class="line">          <span class="string">"Tunisia"</span>: <span class="string">"突尼斯"</span>,</span><br><span class="line">          <span class="string">"Turkey"</span>: <span class="string">"土耳其"</span>,</span><br><span class="line">          <span class="string">"Tanzania"</span>: <span class="string">"坦桑尼亚"</span>,</span><br><span class="line">          <span class="string">"Uganda"</span>: <span class="string">"乌干达"</span>,</span><br><span class="line">          <span class="string">"Ukraine"</span>: <span class="string">"乌克兰"</span>,</span><br><span class="line">          <span class="string">"Uruguay"</span>: <span class="string">"乌拉圭"</span>,</span><br><span class="line">          <span class="string">"United States"</span>: <span class="string">"美国"</span>,</span><br><span class="line">          <span class="string">"Uzbekistan"</span>: <span class="string">"乌兹别克斯坦"</span>,</span><br><span class="line">          <span class="string">"Venezuela"</span>: <span class="string">"委内瑞拉"</span>,</span><br><span class="line">          <span class="string">"Vietnam"</span>: <span class="string">"越南"</span>,</span><br><span class="line">          <span class="string">"Vanuatu"</span>: <span class="string">"瓦努阿图"</span>,</span><br><span class="line">          <span class="string">"Yemen"</span>: <span class="string">"也门"</span>,</span><br><span class="line">          <span class="string">"South Africa"</span>: <span class="string">"南非"</span>,</span><br><span class="line">          <span class="string">"Zambia"</span>: <span class="string">"赞比亚"</span>,</span><br><span class="line">          <span class="string">"Zimbabwe"</span>: <span class="string">"津巴布韦"</span>,</span><br><span class="line">          <span class="string">"Aland"</span>: <span class="string">"奥兰群岛"</span>,</span><br><span class="line">          <span class="string">"American Samoa"</span>: <span class="string">"美属萨摩亚"</span>,</span><br><span class="line">          <span class="string">"Fr. S. Antarctic Lands"</span>: <span class="string">"南极洲"</span>,</span><br><span class="line">          <span class="string">"Antigua and Barb."</span>: <span class="string">"安提瓜和巴布达"</span>,</span><br><span class="line">          <span class="string">"Comoros"</span>: <span class="string">"科摩罗"</span>,</span><br><span class="line">          <span class="string">"Curaçao"</span>: <span class="string">"库拉索岛"</span>,</span><br><span class="line">          <span class="string">"Cayman Is."</span>: <span class="string">"开曼群岛"</span>,</span><br><span class="line">          <span class="string">"Dominica"</span>: <span class="string">"多米尼加"</span>,</span><br><span class="line">          <span class="string">"Falkland Is."</span>: <span class="string">"福克兰群岛马尔维纳斯"</span>,</span><br><span class="line">          <span class="string">"Faeroe Is."</span>: <span class="string">"法罗群岛"</span>,</span><br><span class="line">          <span class="string">"Micronesia"</span>: <span class="string">"密克罗尼西亚"</span>,</span><br><span class="line">          <span class="string">"Heard I. and McDonald Is."</span>: <span class="string">"赫德岛和麦克唐纳群岛"</span>,</span><br><span class="line">          <span class="string">"Isle of Man"</span>: <span class="string">"曼岛"</span>,</span><br><span class="line">          <span class="string">"Jersey"</span>: <span class="string">"泽西岛"</span>,</span><br><span class="line">          <span class="string">"Kiribati"</span>: <span class="string">"基里巴斯"</span>,</span><br><span class="line">          <span class="string">"Saint Lucia"</span>: <span class="string">"圣卢西亚"</span>,</span><br><span class="line">          <span class="string">"N. Mariana Is."</span>: <span class="string">"北马里亚纳群岛"</span>,</span><br><span class="line">          <span class="string">"Montserrat"</span>: <span class="string">"蒙特塞拉特"</span>,</span><br><span class="line">          <span class="string">"Niue"</span>: <span class="string">"纽埃"</span>,</span><br><span class="line">          <span class="string">"Palau"</span>: <span class="string">"帕劳"</span>,</span><br><span class="line">          <span class="string">"Fr. Polynesia"</span>: <span class="string">"法属波利尼西亚"</span>,</span><br><span class="line">          <span class="string">"S. Geo. and S. Sandw. Is."</span>: <span class="string">"南乔治亚岛和南桑威奇群岛"</span>,</span><br><span class="line">          <span class="string">"Saint Helena"</span>: <span class="string">"圣赫勒拿"</span>,</span><br><span class="line">          <span class="string">"St. Pierre and Miquelon"</span>: <span class="string">"圣皮埃尔和密克隆群岛"</span>,</span><br><span class="line">          <span class="string">"São Tomé and Principe"</span>: <span class="string">"圣多美和普林西比"</span>,</span><br><span class="line">          <span class="string">"Turks and Caicos Is."</span>: <span class="string">"特克斯和凯科斯群岛"</span>,</span><br><span class="line">          <span class="string">"St. Vin. and Gren."</span>: <span class="string">"圣文森特和格林纳丁斯"</span>,</span><br><span class="line">          <span class="string">"U.S. Virgin Is."</span>: <span class="string">"美属维尔京群岛"</span>,</span><br><span class="line">          <span class="string">"Samoa"</span>: <span class="string">"萨摩亚"</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    pieces = [</span><br><span class="line">        &#123;<span class="string">'max'</span>: <span class="number">0</span>, <span class="string">'min'</span>: <span class="number">0</span>, <span class="string">'label'</span>: <span class="string">'0'</span>, <span class="string">'color'</span>: <span class="string">'#FFFFFF'</span>&#125;,</span><br><span class="line">        &#123;<span class="string">'max'</span>: <span class="number">49</span>, <span class="string">'min'</span>: <span class="number">1</span>, <span class="string">'label'</span>: <span class="string">'1-49'</span>, <span class="string">'color'</span>: <span class="string">'#FFE5DB'</span>&#125;,</span><br><span class="line">        &#123;<span class="string">'max'</span>: <span class="number">99</span>, <span class="string">'min'</span>: <span class="number">50</span>, <span class="string">'label'</span>: <span class="string">'50-99'</span>, <span class="string">'color'</span>: <span class="string">'#FFC4B3'</span>&#125;,</span><br><span class="line">        &#123;<span class="string">'max'</span>: <span class="number">999</span>, <span class="string">'min'</span>: <span class="number">100</span>, <span class="string">'label'</span>: <span class="string">'100-999'</span>, <span class="string">'color'</span>: <span class="string">'#FF9985'</span>&#125;,</span><br><span class="line">        &#123;<span class="string">'max'</span>: <span class="number">9999</span>, <span class="string">'min'</span>: <span class="number">1000</span>, <span class="string">'label'</span>: <span class="string">'1000-9999'</span>, <span class="string">'color'</span>: <span class="string">'#F57567'</span>&#125;,</span><br><span class="line">        &#123;<span class="string">'max'</span>: <span class="number">99999</span>, <span class="string">'min'</span>: <span class="number">10000</span>, <span class="string">'label'</span>: <span class="string">'10000-99999'</span>, <span class="string">'color'</span>: <span class="string">'#E64546'</span>&#125;,</span><br><span class="line">        &#123;<span class="string">'max'</span>: <span class="number">999999</span>, <span class="string">'min'</span>: <span class="number">100000</span>, <span class="string">'label'</span>: <span class="string">'100000-999999'</span>, <span class="string">'color'</span>: <span class="string">'#B80909'</span>&#125;,</span><br><span class="line">        &#123;<span class="string">'max'</span>: <span class="number">9999999</span>, <span class="string">'min'</span>: <span class="number">1000000</span>, <span class="string">'label'</span>: <span class="string">'≧1000000'</span>, <span class="string">'color'</span>: <span class="string">'#8A0808'</span>&#125;</span><br><span class="line">    ]</span><br><span class="line"></span><br><span class="line">    gt_map = (</span><br><span class="line">        Map()</span><br><span class="line">        .add(series_name=<span class="string">'累计确诊人数'</span>, data_pair=[list(z) <span class="keyword">for</span> z <span class="keyword">in</span> zip(country, curconfirm)], maptype=<span class="string">"world"</span>, name_map=name_map, is_map_symbol_show=<span class="keyword">False</span>)</span><br><span class="line">        .set_series_opts(label_opts=opts.LabelOpts(is_show=<span class="keyword">False</span>))</span><br><span class="line">        .set_global_opts(</span><br><span class="line">            title_opts=opts.TitleOpts(title=<span class="string">"全球疫情数据（累计确诊）"</span>,</span><br><span class="line">                                      subtitle=<span class="string">'数据更新至：'</span> + time_global + <span class="string">'\n\n来源：百度疫情实时大数据报告'</span>),</span><br><span class="line">            visualmap_opts=opts.VisualMapOpts(max_=<span class="number">300</span>, is_piecewise=<span class="keyword">True</span>, pieces=pieces),</span><br><span class="line">        )</span><br><span class="line">    )</span><br><span class="line">    <span class="keyword">return</span> gt_map</span><br></pre></td></tr></table></figure><h3 id="【7x03】中国每日数据折线图-china-daily-map"><a href="#【7x03】中国每日数据折线图-china-daily-map" class="headerlink" title="【7x03】中国每日数据折线图 china_daily_map()"></a><font color="#4876FF">【7x03】中国每日数据折线图 china_daily_map()</font></h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">china_daily_map</span><span class="params">()</span>:</span></span><br><span class="line">    wb = openpyxl.load_workbook(<span class="string">'COVID-19-China.xlsx'</span>)</span><br><span class="line">    ws_china_confirmed = wb[<span class="string">'中国每日累计确诊数据'</span>]</span><br><span class="line">    ws_china_crued = wb[<span class="string">'中国每日累计治愈数据'</span>]</span><br><span class="line">    ws_china_died = wb[<span class="string">'中国每日累计死亡数据'</span>]</span><br><span class="line"></span><br><span class="line">    ws_china_confirmed.delete_rows(<span class="number">1</span>)</span><br><span class="line">    ws_china_crued.delete_rows(<span class="number">1</span>)</span><br><span class="line">    ws_china_died.delete_rows(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">    x_date = []               <span class="comment"># 日期</span></span><br><span class="line">    y_china_confirmed = []    <span class="comment"># 每日累计确诊</span></span><br><span class="line">    y_china_crued = []        <span class="comment"># 每日累计治愈</span></span><br><span class="line">    y_china_died = []         <span class="comment"># 每日累计死亡</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> china_confirmed <span class="keyword">in</span> ws_china_confirmed.values:</span><br><span class="line">        y_china_confirmed.append(china_confirmed[<span class="number">1</span>])</span><br><span class="line">    <span class="keyword">for</span> china_crued <span class="keyword">in</span> ws_china_crued.values:</span><br><span class="line">        x_date.append(china_crued[<span class="number">0</span>])</span><br><span class="line">        y_china_crued.append(china_crued[<span class="number">1</span>])</span><br><span class="line">    <span class="keyword">for</span> china_died <span class="keyword">in</span> ws_china_died.values:</span><br><span class="line">        y_china_died.append(china_died[<span class="number">1</span>])</span><br><span class="line"></span><br><span class="line">    fi_map = (</span><br><span class="line">        Line(init_opts=opts.InitOpts(height=<span class="string">'420px'</span>))</span><br><span class="line">            .add_xaxis(xaxis_data=x_date)</span><br><span class="line">            .add_yaxis(</span><br><span class="line">            series_name=<span class="string">"中国累计确诊数据"</span>,</span><br><span class="line">            y_axis=y_china_confirmed,</span><br><span class="line">            label_opts=opts.LabelOpts(is_show=<span class="keyword">False</span>),</span><br><span class="line">        )</span><br><span class="line">            .add_yaxis(</span><br><span class="line">            series_name=<span class="string">"中国累计治愈趋势"</span>,</span><br><span class="line">            y_axis=y_china_crued,</span><br><span class="line">            label_opts=opts.LabelOpts(is_show=<span class="keyword">False</span>),</span><br><span class="line">        )</span><br><span class="line">            .add_yaxis(</span><br><span class="line">            series_name=<span class="string">"中国累计死亡趋势"</span>,</span><br><span class="line">            y_axis=y_china_died,</span><br><span class="line">            label_opts=opts.LabelOpts(is_show=<span class="keyword">False</span>),</span><br><span class="line">        )</span><br><span class="line">            .set_global_opts(</span><br><span class="line">            title_opts=opts.TitleOpts(title=<span class="string">"中国每日累计确诊/治愈/死亡趋势"</span>),</span><br><span class="line">            legend_opts=opts.LegendOpts(pos_bottom=<span class="string">"bottom"</span>, orient=<span class="string">'horizontal'</span>),</span><br><span class="line">            tooltip_opts=opts.TooltipOpts(trigger=<span class="string">"axis"</span>),</span><br><span class="line">            yaxis_opts=opts.AxisOpts(</span><br><span class="line">                type_=<span class="string">"value"</span>,</span><br><span class="line">                axistick_opts=opts.AxisTickOpts(is_show=<span class="keyword">True</span>),</span><br><span class="line">                splitline_opts=opts.SplitLineOpts(is_show=<span class="keyword">True</span>),</span><br><span class="line">            ),</span><br><span class="line">            xaxis_opts=opts.AxisOpts(type_=<span class="string">"category"</span>, boundary_gap=<span class="keyword">False</span>),</span><br><span class="line">        )</span><br><span class="line">    )</span><br><span class="line">    <span class="keyword">return</span> fi_map</span><br></pre></td></tr></table></figure><h3 id="【7x04】境外每日数据折线图-foreign-daily-map"><a href="#【7x04】境外每日数据折线图-foreign-daily-map" class="headerlink" title="【7x04】境外每日数据折线图 foreign_daily_map()"></a><font color="#4876FF">【7x04】境外每日数据折线图 foreign_daily_map()</font></h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">foreign_daily_map</span><span class="params">()</span>:</span></span><br><span class="line">    wb = openpyxl.load_workbook(<span class="string">'COVID-19-Global.xlsx'</span>)</span><br><span class="line">    ws_foreign_confirmed = wb[<span class="string">'境外每日累计确诊数据'</span>]</span><br><span class="line">    ws_foreign_crued = wb[<span class="string">'境外每日累计治愈数据'</span>]</span><br><span class="line">    ws_foreign_died = wb[<span class="string">'境外每日累计死亡数据'</span>]</span><br><span class="line"></span><br><span class="line">    ws_foreign_confirmed.delete_rows(<span class="number">1</span>)</span><br><span class="line">    ws_foreign_crued.delete_rows(<span class="number">1</span>)</span><br><span class="line">    ws_foreign_died.delete_rows(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">    x_date = []                <span class="comment"># 日期</span></span><br><span class="line">    y_foreign_confirmed = []   <span class="comment"># 累计确诊</span></span><br><span class="line">    y_foreign_crued = []       <span class="comment"># 累计治愈</span></span><br><span class="line">    y_foreign_died = []        <span class="comment"># 累计死亡</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> foreign_confirmed <span class="keyword">in</span> ws_foreign_confirmed.values:</span><br><span class="line">        y_foreign_confirmed.append(foreign_confirmed[<span class="number">1</span>])</span><br><span class="line">    <span class="keyword">for</span> foreign_crued <span class="keyword">in</span> ws_foreign_crued.values:</span><br><span class="line">        x_date.append(foreign_crued[<span class="number">0</span>])</span><br><span class="line">        y_foreign_crued.append(foreign_crued[<span class="number">1</span>])</span><br><span class="line">    <span class="keyword">for</span> foreign_died <span class="keyword">in</span> ws_foreign_died.values:</span><br><span class="line">        y_foreign_died.append(foreign_died[<span class="number">1</span>])</span><br><span class="line"></span><br><span class="line">    fte_map = (</span><br><span class="line">        Line(init_opts=opts.InitOpts(height=<span class="string">'420px'</span>))</span><br><span class="line">            .add_xaxis(xaxis_data=x_date)</span><br><span class="line">            .add_yaxis(</span><br><span class="line">            series_name=<span class="string">"境外累计确诊趋势"</span>,</span><br><span class="line">            y_axis=y_foreign_confirmed,</span><br><span class="line">            label_opts=opts.LabelOpts(is_show=<span class="keyword">False</span>),</span><br><span class="line">        )</span><br><span class="line">            .add_yaxis(</span><br><span class="line">            series_name=<span class="string">"境外累计治愈趋势"</span>,</span><br><span class="line">            y_axis=y_foreign_crued,</span><br><span class="line">            label_opts=opts.LabelOpts(is_show=<span class="keyword">False</span>),</span><br><span class="line">        )</span><br><span class="line">            .add_yaxis(</span><br><span class="line">            series_name=<span class="string">"境外累计死亡趋势"</span>,</span><br><span class="line">            y_axis=y_foreign_died,</span><br><span class="line">            label_opts=opts.LabelOpts(is_show=<span class="keyword">False</span>),</span><br><span class="line">        )</span><br><span class="line">            .set_global_opts(</span><br><span class="line">            title_opts=opts.TitleOpts(title=<span class="string">"境外每日累计确诊/治愈/死亡趋势"</span>),</span><br><span class="line">            legend_opts=opts.LegendOpts(pos_bottom=<span class="string">"bottom"</span>, orient=<span class="string">'horizontal'</span>),</span><br><span class="line">            tooltip_opts=opts.TooltipOpts(trigger=<span class="string">"axis"</span>),</span><br><span class="line">            yaxis_opts=opts.AxisOpts(</span><br><span class="line">                type_=<span class="string">"value"</span>,</span><br><span class="line">                axistick_opts=opts.AxisTickOpts(is_show=<span class="keyword">True</span>),</span><br><span class="line">                splitline_opts=opts.SplitLineOpts(is_show=<span class="keyword">True</span>),</span><br><span class="line">            ),</span><br><span class="line">            xaxis_opts=opts.AxisOpts(type_=<span class="string">"category"</span>, boundary_gap=<span class="keyword">False</span>),</span><br><span class="line">        )</span><br><span class="line">    )</span><br><span class="line">    <span class="keyword">return</span> fte_map</span><br></pre></td></tr></table></figure><h2 id="【8x00】结果截图"><a href="#【8x00】结果截图" class="headerlink" title="【8x00】结果截图"></a><font color="#FF0000">【8x00】结果截图</font></h2><h3 id="【8x01】数据储存-Excel"><a href="#【8x01】数据储存-Excel" class="headerlink" title="【8x01】数据储存 Excel"></a><font color="#4876FF">【8x01】数据储存 Excel</font></h3><p><img src="https://cdn.jsdelivr.net/gh/TRHX/ImageHosting/ITRHX-PIC/A89/03.png" alt="03"></p><p><img src="https://cdn.jsdelivr.net/gh/TRHX/ImageHosting/ITRHX-PIC/A89/04.png" alt="04"></p><h3 id="【8x02】词云图"><a href="#【8x02】词云图" class="headerlink" title="【8x02】词云图"></a><font color="#4876FF">【8x02】词云图</font></h3><p><img src="https://cdn.jsdelivr.net/gh/TRHX/ImageHosting/ITRHX-PIC/A89/05.png" alt="05"></p><p><img src="https://cdn.jsdelivr.net/gh/TRHX/ImageHosting/ITRHX-PIC/A89/06.png" alt="06"></p><h3 id="【8x03】地图-折线图"><a href="#【8x03】地图-折线图" class="headerlink" title="【8x03】地图 + 折线图"></a><font color="#4876FF">【8x03】地图 + 折线图</font></h3><p><img src="https://cdn.jsdelivr.net/gh/TRHX/ImageHosting/ITRHX-PIC/A89/07.png" alt="07"></p><h2 id="【9x00】完整代码"><a href="#【9x00】完整代码" class="headerlink" title="【9x00】完整代码"></a><font color="#FF0000">【9x00】完整代码</font></h2><p>预览地址：<a href="http://cov.itrhx.com/" target="_blank" rel="noopener">http://cov.itrhx.com/</a></p><p>完整代码地址（点亮 star 有 buff 加成）：<a href="https://github.com/TRHX/Python3-Spider-Practice/tree/master/COVID-19" target="_blank" rel="noopener">https://github.com/TRHX/Python3-Spider-Practice/tree/master/COVID-19</a></p><p>其他爬虫实战代码合集（持续更新）：<a href="https://github.com/TRHX/Python3-Spider-Practice" target="_blank" rel="noopener">https://github.com/TRHX/Python3-Spider-Practice</a></p><p>爬虫实战专栏（持续更新）：<a href="https://itrhx.blog.csdn.net/article/category/9351278" target="_blank" rel="noopener">https://itrhx.blog.csdn.net/article/category/9351278</a></p><hr><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">这里是一段防爬虫文本，请读者忽略。</span></span><br><span class="line"><span class="string">本文原创首发于</span> <span class="string">CSDN，作者</span> <span class="string">TRHX。</span></span><br><span class="line"><span class="string">博客首页：https://itrhx.blog.csdn.net/</span></span><br><span class="line"><span class="string">本文链接：https://itrhx.blog.csdn.net/article/details/107140534</span></span><br><span class="line"><span class="string">未经授权，禁止转载！恶意转载，后果自负！尊重原创，远离剽窃！</span></span><br></pre></td></tr></table></figure><hr>]]></content>
    
    <summary type="html">
    
      COVID-19 肺炎疫情数据实时监控，基于 python 爬虫 + pyecharts 数据可视化 + wordcloud 词云图实现。
    
    </summary>
    
      <category term="Python3 学习笔记" scheme="https://www.itrhx.com/categories/Python3-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
      <category term="爬虫实战" scheme="https://www.itrhx.com/categories/Python3-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E7%88%AC%E8%99%AB%E5%AE%9E%E6%88%98/"/>
    
    
      <category term="爬虫" scheme="https://www.itrhx.com/tags/%E7%88%AC%E8%99%AB/"/>
    
      <category term="肺炎疫情" scheme="https://www.itrhx.com/tags/%E8%82%BA%E7%82%8E%E7%96%AB%E6%83%85/"/>
    
  </entry>
  
  <entry>
    <title>Python 数据分析三剑客之 Pandas（十）：数据读写</title>
    <link href="https://www.itrhx.com/2020/06/26/A88-Pandas-10/"/>
    <id>https://www.itrhx.com/2020/06/26/A88-Pandas-10/</id>
    <published>2020-06-26T15:13:58.975Z</published>
    <updated>2020-07-06T13:45:37.926Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>Pandas 系列文章：</p><ul><li><a href="https://www.itrhx.com/2020/06/11/A79-Pandas-01/">Python 数据分析三剑客之 Pandas（一）：认识 Pandas 及其 Series、DataFrame 对象</a></li><li><a href="https://www.itrhx.com/2020/06/13/A80-Pandas-02/">Python 数据分析三剑客之 Pandas（二）：Index 索引对象以及各种索引操作</a></li><li><a href="https://www.itrhx.com/2020/06/14/A81-Pandas-03/">Python 数据分析三剑客之 Pandas（三）：算术运算与缺失值的处理</a></li><li><a href="https://www.itrhx.com/2020/06/15/A82-Pandas-04/">Python 数据分析三剑客之 Pandas（四）：函数应用、映射、排序和层级索引</a></li><li><a href="https://www.itrhx.com/2020/06/16/A83-Pandas-05/">Python 数据分析三剑客之 Pandas（五）：统计计算与统计描述</a></li><li><a href="https://www.itrhx.com/2020/06/17/A84-Pandas-06/">Python 数据分析三剑客之 Pandas（六）：GroupBy 数据分裂、应用与合并</a></li><li><a href="https://www.itrhx.com/2020/06/21/A85-Pandas-07/">Python 数据分析三剑客之 Pandas（七）：合并数据集</a></li><li><a href="https://www.itrhx.com/2020/06/22/A86-Pandas-08/">Python 数据分析三剑客之 Pandas（八）：数据重塑、重复数据处理与数据替换</a></li><li><a href="https://www.itrhx.com/2020/06/25/A87-Pandas-09/">Python 数据分析三剑客之 Pandas（九）：时间序列</a></li><li><a href="https://www.itrhx.com/2020/06/26/A88-Pandas-10/">Python 数据分析三剑客之 Pandas（十）：数据读写</a></li></ul><hr><p>专栏：</p><p>【<a href="https://www.itrhx.com/categories/Python-%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/NumPy/">NumPy 专栏</a>】【<a href="https://www.itrhx.com/categories/Python-%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/Pandas/">Pandas 专栏</a>】【<a href="https://www.itrhx.com/categories/Python-%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/Matplotlib/">Matplotlib 专栏</a>】</p><p>推荐学习资料与网站：</p><p>【<a href="https://www.numpy.org.cn/" target="_blank" rel="noopener">NumPy 中文网</a>】【<a href="https://www.pypandas.cn/" target="_blank" rel="noopener">Pandas 中文网</a>】【<a href="https://www.matplotlib.org.cn/" target="_blank" rel="noopener">Matplotlib 中文网</a>】【<a href="https://github.com/TRHX/Python-quick-reference-table" target="_blank" rel="noopener">NumPy、Matplotlib、Pandas 速查表</a>】</p><hr><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">这里是一段防爬虫文本，请读者忽略。</span></span><br><span class="line"><span class="string">本文原创首发于</span> <span class="string">CSDN，作者</span> <span class="string">TRHX。</span></span><br><span class="line"><span class="string">博客首页：https://itrhx.blog.csdn.net/</span></span><br><span class="line"><span class="string">本文链接：https://itrhx.blog.csdn.net/article/details/106963135</span></span><br><span class="line"><span class="string">未经授权，禁止转载！恶意转载，后果自负！尊重原创，远离剽窃！</span></span><br></pre></td></tr></table></figure><hr><h2 id="【01x00】读取数据"><a href="#【01x00】读取数据" class="headerlink" title="【01x00】读取数据"></a><font color="#FF0000">【01x00】读取数据</font></h2><p>Pandas 提供了一些用于将表格型数据读取为 DataFrame 对象的函数。常见方法如下：</p><p>Pandas 官方对 IO 工具的介绍：<a href="https://pandas.pydata.org/pandas-docs/stable/user_guide/io.html" target="_blank" rel="noopener">https://pandas.pydata.org/pandas-docs/stable/user_guide/io.html</a></p><table><thead><tr><th>函数</th><th>描述</th></tr></thead><tbody><tr><td>read_csv</td><td>从文件、URL、文件型对象中加载带分隔符的数据。默认分隔符为逗号</td></tr><tr><td>read_table</td><td>从文件、URL、文件型对象中加载带分隔符的数据。默认分隔符为制表符（<code>&#39;\t&#39;</code>）</td></tr><tr><td>read_fwf</td><td>读取定宽列格式数据（没有分隔符）</td></tr><tr><td>read_clipboard</td><td>读取剪贴板中的数据，可以看做 read_table 的剪贴板版本。在将网页转换为表格时很有用</td></tr><tr><td>read_excel</td><td>从 Excel XLS 或 XLSX file 读取表格数据</td></tr><tr><td>read_hdf</td><td>读取 pandas写的 HDF5 文件</td></tr><tr><td>read_html</td><td>读取 HTML 文档中的所有表格</td></tr><tr><td>read_json</td><td>读取 JSON（ JavaScript Object Notation）字符串中的数据</td></tr><tr><td>read_msgpack</td><td>读取二进制格式编码的 pandas 数据（Pandas v1.0.0 中已删除对 msgpack 的支持，建议使用 <a href="https://pandas.pydata.org/docs/user_guide/io.html#io-msgpack" target="_blank" rel="noopener">pyarrow</a>）</td></tr><tr><td>read_pickle</td><td>读取 Python pickle 格式中存储的任意对象</td></tr><tr><td>read_sas</td><td>读取存储于 SAS 系统自定义存储格式的 SAS 数据集</td></tr><tr><td>read_sql</td><td>（使用 SQLAlchemy）读取 SQL 查询结果为 pandas 的 DataFrame</td></tr><tr><td>read_stata</td><td>读取 Stata 文件格式的数据集</td></tr><tr><td>read_feather</td><td>读取 Feather 二进制格式文件</td></tr></tbody></table><p>以下以 read_csv 和 read_table 为例，它们的参数多达 50 多个，具体可参见官方文档：</p><p>read_csv：<a href="https://pandas.pydata.org/docs/reference/api/pandas.read_csv.html" target="_blank" rel="noopener">https://pandas.pydata.org/docs/reference/api/pandas.read_csv.html</a></p><p>read_table：<a href="https://pandas.pydata.org/docs/reference/api/pandas.read_table.html" target="_blank" rel="noopener">https://pandas.pydata.org/docs/reference/api/pandas.read_table.html</a></p><p>常用参数：</p><table><thead><tr><th>参数</th><th>描述</th></tr></thead><tbody><tr><td>path</td><td>表示文件系统位置、URL、文件型对象的字符串</td></tr><tr><td>sep / delimiter</td><td>用于对行中各字段进行拆分的字符序列或正则表达式</td></tr><tr><td>header</td><td>用作列名的行号，默认为 0（第一行），如果没有 header 行就应该设置为 None</td></tr><tr><td>index_col</td><td>用作行索引的列编号或列名。可以是单个名称、数字或由多个名称、数字组成的列表（层次化索引）</td></tr><tr><td>names</td><td>用于结果的列名列表，结合 header=None</td></tr><tr><td>skiprows</td><td>需要忽略的行数（从文件开始处算起），或需要跳过的行号列表（从0开始）</td></tr><tr><td>na_values</td><td>指定一组值，将该组值设置为 NaN（缺失值）</td></tr><tr><td>comment</td><td>用于将注释信息从行尾拆分出去的字符（一个或多个）</td></tr><tr><td>parse_dates</td><td>尝试将数据解析为日期，默认为 False。如果为 True，则尝试解析所有列。此外，还可以指定需要解析的一组列号或列名。<br>如果列表的元素为列表或元组，就会将多个列组合到一起再进行日期解析工作（例如，日期、时间分别位于两个列中）</td></tr><tr><td>keep_date_col</td><td>如果连接多列解析日期，则保持参与连接的列。默认为 False</td></tr><tr><td>converters</td><td>由列号 / 列名跟函数之间的映射关系组成的字典。例如，<code>{&#39;foo&#39;: f}</code> 会对 foo 列的所有值应用函数 f</td></tr><tr><td>dayfirst</td><td>当解析有歧义的日期时，将其看做国际格式（例如，7/6/2012 —&gt; June 7,2012），默认为 Fase</td></tr><tr><td>date_parser</td><td>用于解析日期的函数</td></tr><tr><td>nrows</td><td>需要读取的行数（从文件开始处算起）</td></tr><tr><td>iterator</td><td>返回一个 TextParser 以便逐块读取文件</td></tr><tr><td>chunksize</td><td>文件块的大小（用于迭代）</td></tr><tr><td>skip_footer</td><td>需要忽略的行数（从文件末尾处算起）</td></tr><tr><td>verbose</td><td>打印各种解析器输出信息，比如“非数值列中缺失值的数量”等</td></tr><tr><td>encoding</td><td>用于 unicode 的文本编码格式。例如，“utf-8” 表示用 UTF-8 编码的文本</td></tr><tr><td>squeeze</td><td>如果数据经解析后仅含一列，则返回 Series</td></tr><tr><td>thousands</td><td>千分位分隔符，如 <code>,</code> 或 <code>.</code></td></tr></tbody></table><h3 id="【01x01】简单示例"><a href="#【01x01】简单示例" class="headerlink" title="【01x01】简单示例"></a><font color="#4876FF">【01x01】简单示例</font></h3><p>首先创建一个 test1.csv 文件：</p><p><img src="https://cdn.jsdelivr.net/gh/TRHX/ImageHosting/ITRHX-PIC/A88/01.png" alt="01"></p><p>使用 read_csv 方法将其读出为一个 DataFrame 对象：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>obj = pd.read_csv(<span class="string">r'C:\Users\TanRe\Desktop\test1.csv'</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>obj</span><br><span class="line">   a   b   c   d message</span><br><span class="line"><span class="number">0</span>  <span class="number">1</span>   <span class="number">2</span>   <span class="number">3</span>   <span class="number">4</span>   hello</span><br><span class="line"><span class="number">1</span>  <span class="number">5</span>   <span class="number">6</span>   <span class="number">7</span>   <span class="number">8</span>   world</span><br><span class="line"><span class="number">2</span>  <span class="number">9</span>  <span class="number">10</span>  <span class="number">11</span>  <span class="number">12</span>  python</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>type(obj)</span><br><span class="line">&lt;<span class="class"><span class="keyword">class</span> '<span class="title">pandas</span>.<span class="title">core</span>.<span class="title">frame</span>.<span class="title">DataFrame</span>'&gt;</span></span><br></pre></td></tr></table></figure><p>前面的 csv 文件是以逗号分隔的，可以使用 read_table 方法并指定分隔符来读取：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>obj = pd.read_table(<span class="string">r'C:\Users\TanRe\Desktop\test1.csv'</span>, sep=<span class="string">','</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>obj</span><br><span class="line">   a   b   c   d message</span><br><span class="line"><span class="number">0</span>  <span class="number">1</span>   <span class="number">2</span>   <span class="number">3</span>   <span class="number">4</span>   hello</span><br><span class="line"><span class="number">1</span>  <span class="number">5</span>   <span class="number">6</span>   <span class="number">7</span>   <span class="number">8</span>   world</span><br><span class="line"><span class="number">2</span>  <span class="number">9</span>  <span class="number">10</span>  <span class="number">11</span>  <span class="number">12</span>  python</span><br></pre></td></tr></table></figure><h3 id="【01x02】header-names-定制列标签"><a href="#【01x02】header-names-定制列标签" class="headerlink" title="【01x02】header / names 定制列标签"></a><font color="#4876FF">【01x02】header / names 定制列标签</font></h3><p>以上示例中第一行为列标签，如果没有单独定义列标签，使用 read_csv 方法也会默认将第一行当作列标签：</p><p><img src="https://cdn.jsdelivr.net/gh/TRHX/ImageHosting/ITRHX-PIC/A88/02.png" alt="02"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>obj = pd.read_csv(<span class="string">r'C:\Users\TanRe\Desktop\test2.csv'</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>obj</span><br><span class="line">   <span class="number">1</span>   <span class="number">2</span>   <span class="number">3</span>   <span class="number">4</span>   hello</span><br><span class="line"><span class="number">0</span>  <span class="number">5</span>   <span class="number">6</span>   <span class="number">7</span>   <span class="number">8</span>   world</span><br><span class="line"><span class="number">1</span>  <span class="number">9</span>  <span class="number">10</span>  <span class="number">11</span>  <span class="number">12</span>  python</span><br></pre></td></tr></table></figure><p>避免以上情况，可以设置 <code>header=None</code>，Pandas 会为其自动分配列标签：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>pd.read_csv(<span class="string">r'C:\Users\TanRe\Desktop\test2.csv'</span>, header=<span class="keyword">None</span>)</span><br><span class="line">   <span class="number">0</span>   <span class="number">1</span>   <span class="number">2</span>   <span class="number">3</span>       <span class="number">4</span></span><br><span class="line"><span class="number">0</span>  <span class="number">1</span>   <span class="number">2</span>   <span class="number">3</span>   <span class="number">4</span>   hello</span><br><span class="line"><span class="number">1</span>  <span class="number">5</span>   <span class="number">6</span>   <span class="number">7</span>   <span class="number">8</span>   world</span><br><span class="line"><span class="number">2</span>  <span class="number">9</span>  <span class="number">10</span>  <span class="number">11</span>  <span class="number">12</span>  python</span><br></pre></td></tr></table></figure><p>也可以使用 <code>names</code> 参数自定义列标签，传递的是一个列表：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>pd.read_csv(<span class="string">r'C:\Users\TanRe\Desktop\test2.csv'</span>, names=[<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>, <span class="string">'d'</span>, <span class="string">'message'</span>])</span><br><span class="line">   a   b   c   d message</span><br><span class="line"><span class="number">0</span>  <span class="number">1</span>   <span class="number">2</span>   <span class="number">3</span>   <span class="number">4</span>   hello</span><br><span class="line"><span class="number">1</span>  <span class="number">5</span>   <span class="number">6</span>   <span class="number">7</span>   <span class="number">8</span>   world</span><br><span class="line"><span class="number">2</span>  <span class="number">9</span>  <span class="number">10</span>  <span class="number">11</span>  <span class="number">12</span>  python</span><br></pre></td></tr></table></figure><h3 id="【01x03】index-col-指定列为行索引"><a href="#【01x03】index-col-指定列为行索引" class="headerlink" title="【01x03】index_col 指定列为行索引"></a><font color="#4876FF">【01x03】index_col 指定列为行索引</font></h3><p><code>index_col</code> 参数可以指定某一列作为 DataFrame 的行索引，传递的参数是列名称，在以下示例中，会将列名为 <code>message</code> 的列作为 DataFrame 的行索引：</p><p><img src="https://cdn.jsdelivr.net/gh/TRHX/ImageHosting/ITRHX-PIC/A88/03.png" alt="03"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>pd.read_csv(<span class="string">r'C:\Users\TanRe\Desktop\test2.csv'</span>, </span><br><span class="line">names=[<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>, <span class="string">'d'</span>, <span class="string">'message'</span>], </span><br><span class="line">index_col=<span class="string">'message'</span>)</span><br><span class="line">         a   b   c   d</span><br><span class="line">message               </span><br><span class="line">hello    <span class="number">1</span>   <span class="number">2</span>   <span class="number">3</span>   <span class="number">4</span></span><br><span class="line">world    <span class="number">5</span>   <span class="number">6</span>   <span class="number">7</span>   <span class="number">8</span></span><br><span class="line">python   <span class="number">9</span>  <span class="number">10</span>  <span class="number">11</span>  <span class="number">12</span></span><br></pre></td></tr></table></figure><p>如果需要构造多层索引的 DataFrame 对象，则只需传入由列编号或列名组成的列表即可：</p><p><img src="https://cdn.jsdelivr.net/gh/TRHX/ImageHosting/ITRHX-PIC/A88/04.png" alt="04"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>pd.read_csv(<span class="string">r'C:\Users\TanRe\Desktop\test3.csv'</span>, index_col=[<span class="string">'key1'</span>, <span class="string">'key2'</span>])</span><br><span class="line">           value1  value2</span><br><span class="line">key1 key2                </span><br><span class="line">one  a          <span class="number">1</span>       <span class="number">2</span></span><br><span class="line">     b          <span class="number">3</span>       <span class="number">4</span></span><br><span class="line">     c          <span class="number">5</span>       <span class="number">6</span></span><br><span class="line">     d          <span class="number">7</span>       <span class="number">8</span></span><br><span class="line">two  a          <span class="number">9</span>      <span class="number">10</span></span><br><span class="line">     b         <span class="number">11</span>      <span class="number">12</span></span><br><span class="line">     c         <span class="number">13</span>      <span class="number">14</span></span><br><span class="line">     d         <span class="number">15</span>      <span class="number">16</span></span><br></pre></td></tr></table></figure><h3 id="【01x04】sep-指定分隔符"><a href="#【01x04】sep-指定分隔符" class="headerlink" title="【01x04】sep 指定分隔符"></a><font color="#4876FF">【01x04】sep 指定分隔符</font></h3><p>在 read_table 中，sep 参数用于接收分隔符，如果遇到不是用固定的分隔符去分隔字段的，也可以传递一个正则表达式作为 read_table 的分隔符，如下面的 txt 文件数据之间是由不同的空白字符间隔开的：</p><p><img src="https://cdn.jsdelivr.net/gh/TRHX/ImageHosting/ITRHX-PIC/A88/05.png" alt="05"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>pd.read_table(<span class="string">r'C:\Users\TanRe\Desktop\test1.txt'</span>, sep=<span class="string">'\s+'</span>)</span><br><span class="line">            A         B         C</span><br><span class="line">aaa <span class="number">-0.264438</span> <span class="number">-1.026059</span> <span class="number">-0.619500</span></span><br><span class="line">bbb  <span class="number">0.927272</span>  <span class="number">0.302904</span> <span class="number">-0.032399</span></span><br><span class="line">ccc <span class="number">-0.264273</span> <span class="number">-0.386314</span> <span class="number">-0.217601</span></span><br><span class="line">ddd <span class="number">-0.871858</span> <span class="number">-0.348382</span>  <span class="number">1.100491</span></span><br></pre></td></tr></table></figure><h3 id="【01x05】skiprows-忽略行"><a href="#【01x05】skiprows-忽略行" class="headerlink" title="【01x05】skiprows 忽略行"></a><font color="#4876FF">【01x05】skiprows 忽略行</font></h3><p>skiprows    参数可用于设置需要忽略的行数，或需要跳过的行号列表，在下面的示例中，读取文件时选择跳过第1、3、4行（索引值分别为0、2、3）：</p><p><img src="https://cdn.jsdelivr.net/gh/TRHX/ImageHosting/ITRHX-PIC/A88/06.png" alt="06"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>pd.read_csv(<span class="string">r'C:\Users\TanRe\Desktop\test4.csv'</span>, skiprows=[<span class="number">0</span>, <span class="number">2</span>, <span class="number">3</span>])</span><br><span class="line">   a   b   c   d message</span><br><span class="line"><span class="number">0</span>  <span class="number">1</span>   <span class="number">2</span>   <span class="number">3</span>   <span class="number">4</span>   hello</span><br><span class="line"><span class="number">1</span>  <span class="number">5</span>   <span class="number">6</span>   <span class="number">7</span>   <span class="number">8</span>   world</span><br><span class="line"><span class="number">2</span>  <span class="number">9</span>  <span class="number">10</span>  <span class="number">11</span>  <span class="number">12</span>  python</span><br></pre></td></tr></table></figure><h3 id="【01x06】na-values-设置缺失值"><a href="#【01x06】na-values-设置缺失值" class="headerlink" title="【01x06】na_values 设置缺失值"></a><font color="#4876FF">【01x06】na_values 设置缺失值</font></h3><p>当文件中出现了空字符串或者 NA 值，Pandas 会将其标记成 NaN（缺失值），同样也可以使用 <code>isnull</code> 方法来判断结果值是否为缺失值：</p><p><img src="https://cdn.jsdelivr.net/gh/TRHX/ImageHosting/ITRHX-PIC/A88/07.png" alt="07"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>obj = pd.read_csv(<span class="string">r'C:\Users\TanRe\Desktop\test5.csv'</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>obj</span><br><span class="line">  something  a   b     c   d message</span><br><span class="line"><span class="number">0</span>       one  <span class="number">1</span>   <span class="number">2</span>   <span class="number">3.0</span>   <span class="number">4</span>     NaN</span><br><span class="line"><span class="number">1</span>       two  <span class="number">5</span>   <span class="number">6</span>   NaN   <span class="number">8</span>   world</span><br><span class="line"><span class="number">2</span>     three  <span class="number">9</span>  <span class="number">10</span>  <span class="number">11.0</span>  <span class="number">12</span>  python</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>pd.isnull(obj)</span><br><span class="line">   something      a      b      c      d  message</span><br><span class="line"><span class="number">0</span>      <span class="keyword">False</span>  <span class="keyword">False</span>  <span class="keyword">False</span>  <span class="keyword">False</span>  <span class="keyword">False</span>     <span class="keyword">True</span></span><br><span class="line"><span class="number">1</span>      <span class="keyword">False</span>  <span class="keyword">False</span>  <span class="keyword">False</span>   <span class="keyword">True</span>  <span class="keyword">False</span>    <span class="keyword">False</span></span><br><span class="line"><span class="number">2</span>      <span class="keyword">False</span>  <span class="keyword">False</span>  <span class="keyword">False</span>  <span class="keyword">False</span>  <span class="keyword">False</span>    <span class="keyword">False</span></span><br></pre></td></tr></table></figure><p><code>na_values</code> 方法可以传递一组值，将这组值设置为缺失值，如果传递的为字典对象，则字典的各值将被设置为 NaN：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>obj1 = pd.read_csv(<span class="string">r'C:\Users\TanRe\Desktop\test5.csv'</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>obj1</span><br><span class="line">  something  a   b     c   d message</span><br><span class="line"><span class="number">0</span>       one  <span class="number">1</span>   <span class="number">2</span>   <span class="number">3.0</span>   <span class="number">4</span>     NaN</span><br><span class="line"><span class="number">1</span>       two  <span class="number">5</span>   <span class="number">6</span>   NaN   <span class="number">8</span>   world</span><br><span class="line"><span class="number">2</span>     three  <span class="number">9</span>  <span class="number">10</span>  <span class="number">11.0</span>  <span class="number">12</span>  python</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>obj2 = pd.read_csv(<span class="string">r'C:\Users\TanRe\Desktop\test5.csv'</span>, na_values=[<span class="string">'1'</span>, <span class="string">'12'</span>])</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>obj2</span><br><span class="line">  something    a   b     c    d message</span><br><span class="line"><span class="number">0</span>       one  NaN   <span class="number">2</span>   <span class="number">3.0</span>  <span class="number">4.0</span>     NaN</span><br><span class="line"><span class="number">1</span>       two  <span class="number">5.0</span>   <span class="number">6</span>   NaN  <span class="number">8.0</span>   world</span><br><span class="line"><span class="number">2</span>     three  <span class="number">9.0</span>  <span class="number">10</span>  <span class="number">11.0</span>  NaN  python</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>sentinels = &#123;<span class="string">'message'</span>: [<span class="string">'python'</span>, <span class="string">'world'</span>], <span class="string">'something'</span>: [<span class="string">'two'</span>]&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>obj3 = pd.read_csv(<span class="string">r'C:\Users\TanRe\Desktop\test5.csv'</span>, na_values=sentinels)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>obj3</span><br><span class="line">  something  a   b     c   d  message</span><br><span class="line"><span class="number">0</span>       one  <span class="number">1</span>   <span class="number">2</span>   <span class="number">3.0</span>   <span class="number">4</span>      NaN</span><br><span class="line"><span class="number">1</span>       NaN  <span class="number">5</span>   <span class="number">6</span>   NaN   <span class="number">8</span>      NaN</span><br><span class="line"><span class="number">2</span>     three  <span class="number">9</span>  <span class="number">10</span>  <span class="number">11.0</span>  <span class="number">12</span>      NaN</span><br></pre></td></tr></table></figure><h3 id="【01x07】nrows-chunksize-行与块"><a href="#【01x07】nrows-chunksize-行与块" class="headerlink" title="【01x07】nrows / chunksize 行与块"></a><font color="#4876FF">【01x07】nrows / chunksize 行与块</font></h3><p>以下 test6.csv 文件中包含 50 行数据：</p><p><img src="https://cdn.jsdelivr.net/gh/TRHX/ImageHosting/ITRHX-PIC/A88/08.png" alt="08"></p><p>可以设置 <code>pd.options.display.max_rows</code> 来紧凑地显示指定行数的数据：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>pd.options.display.max_rows = <span class="number">10</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>pd.read_csv(<span class="string">r'C:\Users\TanRe\Desktop\test6.csv'</span>)</span><br><span class="line">         one       two     three      four key</span><br><span class="line"><span class="number">0</span>   <span class="number">0.467976</span> <span class="number">-0.038649</span> <span class="number">-0.295344</span> <span class="number">-1.824726</span>   L</span><br><span class="line"><span class="number">1</span>  <span class="number">-0.358893</span>  <span class="number">1.404453</span>  <span class="number">0.704965</span> <span class="number">-0.200638</span>   B</span><br><span class="line"><span class="number">2</span>  <span class="number">-0.501840</span>  <span class="number">0.659254</span> <span class="number">-0.421691</span> <span class="number">-0.057688</span>   G</span><br><span class="line"><span class="number">3</span>   <span class="number">0.204886</span>  <span class="number">1.074134</span>  <span class="number">1.388361</span> <span class="number">-0.982404</span>   R</span><br><span class="line"><span class="number">4</span>   <span class="number">0.354628</span> <span class="number">-0.133116</span>  <span class="number">0.283763</span> <span class="number">-0.837063</span>   Q</span><br><span class="line">..       ...       ...       ...       ...  ..</span><br><span class="line"><span class="number">45</span>  <span class="number">2.311896</span> <span class="number">-0.417070</span> <span class="number">-1.409599</span> <span class="number">-0.515821</span>   L</span><br><span class="line"><span class="number">46</span> <span class="number">-0.479893</span> <span class="number">-0.633419</span>  <span class="number">0.745152</span> <span class="number">-0.646038</span>   E</span><br><span class="line"><span class="number">47</span>  <span class="number">0.523331</span>  <span class="number">0.787112</span>  <span class="number">0.486066</span>  <span class="number">1.093156</span>   K</span><br><span class="line"><span class="number">48</span> <span class="number">-0.362559</span>  <span class="number">0.598894</span> <span class="number">-1.843201</span>  <span class="number">0.887292</span>   G</span><br><span class="line"><span class="number">49</span> <span class="number">-0.096376</span> <span class="number">-1.012999</span> <span class="number">-0.657431</span> <span class="number">-0.573315</span>   <span class="number">0</span></span><br><span class="line"></span><br><span class="line">[<span class="number">50</span> rows x <span class="number">5</span> columns]</span><br></pre></td></tr></table></figure><p>通过 nrows 参数可以读取指定行数：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>pd.read_csv(<span class="string">r'C:\Users\TanRe\Desktop\test6.csv'</span>, nrows=<span class="number">5</span>)</span><br><span class="line">        one       two     three      four key</span><br><span class="line"><span class="number">0</span>  <span class="number">0.467976</span> <span class="number">-0.038649</span> <span class="number">-0.295344</span> <span class="number">-1.824726</span>   L</span><br><span class="line"><span class="number">1</span> <span class="number">-0.358893</span>  <span class="number">1.404453</span>  <span class="number">0.704965</span> <span class="number">-0.200638</span>   B</span><br><span class="line"><span class="number">2</span> <span class="number">-0.501840</span>  <span class="number">0.659254</span> <span class="number">-0.421691</span> <span class="number">-0.057688</span>   G</span><br><span class="line"><span class="number">3</span>  <span class="number">0.204886</span>  <span class="number">1.074134</span>  <span class="number">1.388361</span> <span class="number">-0.982404</span>   R</span><br><span class="line"><span class="number">4</span>  <span class="number">0.354628</span> <span class="number">-0.133116</span>  <span class="number">0.283763</span> <span class="number">-0.837063</span>   Q</span><br></pre></td></tr></table></figure><p>要逐块读取文件，可以指定 chunksize（行数）：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>chunker = pd.read_csv(<span class="string">r'C:\Users\TanRe\Desktop\test6.csv'</span>, chunksize=<span class="number">50</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>chunker</span><br><span class="line">&lt;pandas.io.parsers.TextFileReader object at <span class="number">0x07A20D60</span>&gt;</span><br></pre></td></tr></table></figure><p>返回的 TextParser 对象，可以根据 chunksize 对文件进行逐块迭代。以下示例中，对 test6.csv 文件数据进行迭代处理，将值计数聚合到 “key” 列中：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>chunker = pd.read_csv(<span class="string">r'C:\Users\TanRe\Desktop\test6.csv'</span>, chunksize=<span class="number">50</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>tot = pd.Series([], dtype=<span class="string">'float64'</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">for</span> piece <span class="keyword">in</span> chunker:</span><br><span class="line">tot = tot.add(piece[<span class="string">'key'</span>].value_counts(), fill_value=<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>tot = tot.sort_values(ascending=<span class="keyword">False</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>tot[:<span class="number">10</span>]</span><br><span class="line">G    <span class="number">6.0</span></span><br><span class="line">E    <span class="number">5.0</span></span><br><span class="line">B    <span class="number">5.0</span></span><br><span class="line">L    <span class="number">5.0</span></span><br><span class="line"><span class="number">0</span>    <span class="number">5.0</span></span><br><span class="line">K    <span class="number">4.0</span></span><br><span class="line">A    <span class="number">4.0</span></span><br><span class="line">R    <span class="number">4.0</span></span><br><span class="line">C    <span class="number">2.0</span></span><br><span class="line">Q    <span class="number">2.0</span></span><br><span class="line">dtype: float64</span><br></pre></td></tr></table></figure><hr><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">这里是一段防爬虫文本，请读者忽略。</span></span><br><span class="line"><span class="string">本文原创首发于</span> <span class="string">CSDN，作者</span> <span class="string">TRHX。</span></span><br><span class="line"><span class="string">博客首页：https://itrhx.blog.csdn.net/</span></span><br><span class="line"><span class="string">本文链接：https://itrhx.blog.csdn.net/article/details/106963135</span></span><br><span class="line"><span class="string">未经授权，禁止转载！恶意转载，后果自负！尊重原创，远离剽窃！</span></span><br></pre></td></tr></table></figure><hr><h2 id="【02x00】写入数据"><a href="#【02x00】写入数据" class="headerlink" title="【02x00】写入数据"></a><font color="#FF0000">【02x00】写入数据</font></h2><p>Pandas 提供了一些用于将表格型数据读取为 DataFrame 对象的函数。常见方法如下：</p><table><thead><tr><th>函数</th><th>描述</th></tr></thead><tbody><tr><td>to_csv</td><td>将对象写入逗号分隔值（csv）文件</td></tr><tr><td>to_clipboard</td><td>将对象复制到系统剪贴板</td></tr><tr><td>to_excel</td><td>将对象写入 Excel 工作表</td></tr><tr><td>to_hdf</td><td>使用 HDFStore 将包含的数据写入 HDF5 文件</td></tr><tr><td>to_html</td><td>将 DataFrame 呈现为 HTML 表格</td></tr><tr><td>to_json</td><td>将对象转换为 JSON（ JavaScript Object Notation）字符串</td></tr><tr><td>to_msgpack</td><td>将对象写入二进制格式编码的文件（Pandas v1.0.0 中已删除对 msgpack 的支持，建议使用 <a href="https://pandas.pydata.org/docs/user_guide/io.html#io-msgpack" target="_blank" rel="noopener">pyarrow</a>）</td></tr><tr><td>to_pickle</td><td>Pickle（序列化）对象到文件</td></tr><tr><td>to_sql</td><td>将存储在 DataFrame 中的数据写入 SQL 数据库</td></tr><tr><td>to_stata</td><td>将 DataFrame 对象导出为 Stata 格式</td></tr><tr><td>to_feather</td><td>将 DataFrames 写入 Feather 二进制格式文件</td></tr></tbody></table><p>以下以 to_csv 为例，它的参数同样多达 50 多个，具体可参见官方文档：</p><ul><li><p><a href="https://pandas.pydata.org/docs/reference/api/pandas.DataFrame.to_csv.html" target="_blank" rel="noopener">https://pandas.pydata.org/docs/reference/api/pandas.DataFrame.to_csv.html</a></p></li><li><p><a href="https://pandas.pydata.org/docs/reference/api/pandas.Series.to_csv.html" target="_blank" rel="noopener">https://pandas.pydata.org/docs/reference/api/pandas.Series.to_csv.html</a></p></li></ul><h3 id="【02x01】简单示例"><a href="#【02x01】简单示例" class="headerlink" title="【02x01】简单示例"></a><font color="#4876FF">【02x01】简单示例</font></h3><p>以之前的 test5.csv 文件为例，先读出数据，再将数据写入另外的文件：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>data = pd.read_csv(<span class="string">r'C:\Users\TanRe\Desktop\test5.csv'</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>data</span><br><span class="line">  something  a   b     c   d message</span><br><span class="line"><span class="number">0</span>       one  <span class="number">1</span>   <span class="number">2</span>   <span class="number">3.0</span>   <span class="number">4</span>     NaN</span><br><span class="line"><span class="number">1</span>       two  <span class="number">5</span>   <span class="number">6</span>   NaN   <span class="number">8</span>   world</span><br><span class="line"><span class="number">2</span>     three  <span class="number">9</span>  <span class="number">10</span>  <span class="number">11.0</span>  <span class="number">12</span>  python</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>data.to_csv(<span class="string">r'C:\Users\TanRe\Desktop\out1.csv'</span>)</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/TRHX/ImageHosting/ITRHX-PIC/A88/09.png" alt="09"></p><h3 id="【02x02】sep-指定分隔符"><a href="#【02x02】sep-指定分隔符" class="headerlink" title="【02x02】sep 指定分隔符"></a><font color="#4876FF">【02x02】sep 指定分隔符</font></h3><p>sep 参数可用于其他分隔符：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>data = pd.read_csv(<span class="string">r'C:\Users\TanRe\Desktop\test5.csv'</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>data</span><br><span class="line">  something  a   b     c   d message</span><br><span class="line"><span class="number">0</span>       one  <span class="number">1</span>   <span class="number">2</span>   <span class="number">3.0</span>   <span class="number">4</span>     NaN</span><br><span class="line"><span class="number">1</span>       two  <span class="number">5</span>   <span class="number">6</span>   NaN   <span class="number">8</span>   world</span><br><span class="line"><span class="number">2</span>     three  <span class="number">9</span>  <span class="number">10</span>  <span class="number">11.0</span>  <span class="number">12</span>  python</span><br><span class="line">&gt;&gt;&gt;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>data.to_csv(<span class="string">r'C:\Users\TanRe\Desktop\out2.csv'</span>, sep=<span class="string">'|'</span>)</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/TRHX/ImageHosting/ITRHX-PIC/A88/10.png" alt="10"></p><h3 id="【02x03】na-rep-替换缺失值"><a href="#【02x03】na-rep-替换缺失值" class="headerlink" title="【02x03】na_rep 替换缺失值"></a><font color="#4876FF">【02x03】na_rep 替换缺失值</font></h3><p>na_rep 参数可将缺失值（NaN）替换成其他字符串：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>data = pd.read_csv(<span class="string">r'C:\Users\TanRe\Desktop\test5.csv'</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>data</span><br><span class="line">  something  a   b     c   d message</span><br><span class="line"><span class="number">0</span>       one  <span class="number">1</span>   <span class="number">2</span>   <span class="number">3.0</span>   <span class="number">4</span>     NaN</span><br><span class="line"><span class="number">1</span>       two  <span class="number">5</span>   <span class="number">6</span>   NaN   <span class="number">8</span>   world</span><br><span class="line"><span class="number">2</span>     three  <span class="number">9</span>  <span class="number">10</span>  <span class="number">11.0</span>  <span class="number">12</span>  python</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>data.to_csv(<span class="string">r'C:\Users\TanRe\Desktop\out3.csv'</span>, na_rep=<span class="string">'X'</span>)</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/TRHX/ImageHosting/ITRHX-PIC/A88/11.png" alt="11"></p><h3 id="【02x04】index-header-行与列标签"><a href="#【02x04】index-header-行与列标签" class="headerlink" title="【02x04】index / header 行与列标签"></a><font color="#4876FF">【02x04】index / header 行与列标签</font></h3><p>设置 <code>index=False</code>, <code>header=False</code>，可以禁用行标签与列标签：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>data = pd.read_csv(<span class="string">r'C:\Users\TanRe\Desktop\test5.csv'</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>data</span><br><span class="line">  something  a   b     c   d message</span><br><span class="line"><span class="number">0</span>       one  <span class="number">1</span>   <span class="number">2</span>   <span class="number">3.0</span>   <span class="number">4</span>     NaN</span><br><span class="line"><span class="number">1</span>       two  <span class="number">5</span>   <span class="number">6</span>   NaN   <span class="number">8</span>   world</span><br><span class="line"><span class="number">2</span>     three  <span class="number">9</span>  <span class="number">10</span>  <span class="number">11.0</span>  <span class="number">12</span>  python</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>data.to_csv(<span class="string">r'C:\Users\TanRe\Desktop\out4.csv'</span>, index=<span class="keyword">False</span>, header=<span class="keyword">False</span>)</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/TRHX/ImageHosting/ITRHX-PIC/A88/12.png" alt="12"></p><p>还可以传入列表来重新设置列标签：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>data = pd.read_csv(<span class="string">r'C:\Users\TanRe\Desktop\test5.csv'</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>data</span><br><span class="line">  something  a   b     c   d message</span><br><span class="line"><span class="number">0</span>       one  <span class="number">1</span>   <span class="number">2</span>   <span class="number">3.0</span>   <span class="number">4</span>     NaN</span><br><span class="line"><span class="number">1</span>       two  <span class="number">5</span>   <span class="number">6</span>   NaN   <span class="number">8</span>   world</span><br><span class="line"><span class="number">2</span>     three  <span class="number">9</span>  <span class="number">10</span>  <span class="number">11.0</span>  <span class="number">12</span>  python</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>data.to_csv(<span class="string">r'C:\Users\TanRe\Desktop\out5.csv'</span>, header=[<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>, <span class="string">'d'</span>, <span class="string">'e'</span>, <span class="string">'f'</span>])</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/TRHX/ImageHosting/ITRHX-PIC/A88/13.png" alt="13"></p><h3 id="【02x05】columns-指定列"><a href="#【02x05】columns-指定列" class="headerlink" title="【02x05】columns 指定列"></a><font color="#4876FF">【02x05】columns 指定列</font></h3><p>可以通过设置 columns 参数，只写入部分列，并按照指定顺序排序：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>data = pd.read_csv(<span class="string">r'C:\Users\TanRe\Desktop\test5.csv'</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>data</span><br><span class="line">  something  a   b     c   d message</span><br><span class="line"><span class="number">0</span>       one  <span class="number">1</span>   <span class="number">2</span>   <span class="number">3.0</span>   <span class="number">4</span>     NaN</span><br><span class="line"><span class="number">1</span>       two  <span class="number">5</span>   <span class="number">6</span>   NaN   <span class="number">8</span>   world</span><br><span class="line"><span class="number">2</span>     three  <span class="number">9</span>  <span class="number">10</span>  <span class="number">11.0</span>  <span class="number">12</span>  python</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>data.to_csv(<span class="string">r'C:\Users\TanRe\Desktop\out6.csv'</span>, columns=[<span class="string">'c'</span>, <span class="string">'b'</span>, <span class="string">'a'</span>])</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/TRHX/ImageHosting/ITRHX-PIC/A88/14.png" alt="14"></p><hr><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">这里是一段防爬虫文本，请读者忽略。</span></span><br><span class="line"><span class="string">本文原创首发于</span> <span class="string">CSDN，作者</span> <span class="string">TRHX。</span></span><br><span class="line"><span class="string">博客首页：https://itrhx.blog.csdn.net/</span></span><br><span class="line"><span class="string">本文链接：https://itrhx.blog.csdn.net/article/details/106963135</span></span><br><span class="line"><span class="string">未经授权，禁止转载！恶意转载，后果自负！尊重原创，远离剽窃！</span></span><br></pre></td></tr></table></figure><hr>]]></content>
    
    <summary type="html">
    
      Python 数据分析三剑客之 Pandas（十）：数据读写操作。
    
    </summary>
    
      <category term="Python 数据分析" scheme="https://www.itrhx.com/categories/Python-%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/"/>
    
      <category term="Pandas" scheme="https://www.itrhx.com/categories/Python-%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/Pandas/"/>
    
    
      <category term="IO操作" scheme="https://www.itrhx.com/tags/IO%E6%93%8D%E4%BD%9C/"/>
    
      <category term="Pandas" scheme="https://www.itrhx.com/tags/Pandas/"/>
    
      <category term="数据读写" scheme="https://www.itrhx.com/tags/%E6%95%B0%E6%8D%AE%E8%AF%BB%E5%86%99/"/>
    
  </entry>
  
  <entry>
    <title>Python 数据分析三剑客之 Pandas（九）：时间序列</title>
    <link href="https://www.itrhx.com/2020/06/25/A87-Pandas-09/"/>
    <id>https://www.itrhx.com/2020/06/25/A87-Pandas-09/</id>
    <published>2020-06-25T14:03:28.198Z</published>
    <updated>2020-07-06T13:45:31.263Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>Pandas 系列文章：</p><ul><li><a href="https://www.itrhx.com/2020/06/11/A79-Pandas-01/">Python 数据分析三剑客之 Pandas（一）：认识 Pandas 及其 Series、DataFrame 对象</a></li><li><a href="https://www.itrhx.com/2020/06/13/A80-Pandas-02/">Python 数据分析三剑客之 Pandas（二）：Index 索引对象以及各种索引操作</a></li><li><a href="https://www.itrhx.com/2020/06/14/A81-Pandas-03/">Python 数据分析三剑客之 Pandas（三）：算术运算与缺失值的处理</a></li><li><a href="https://www.itrhx.com/2020/06/15/A82-Pandas-04/">Python 数据分析三剑客之 Pandas（四）：函数应用、映射、排序和层级索引</a></li><li><a href="https://www.itrhx.com/2020/06/16/A83-Pandas-05/">Python 数据分析三剑客之 Pandas（五）：统计计算与统计描述</a></li><li><a href="https://www.itrhx.com/2020/06/17/A84-Pandas-06/">Python 数据分析三剑客之 Pandas（六）：GroupBy 数据分裂、应用与合并</a></li><li><a href="https://www.itrhx.com/2020/06/21/A85-Pandas-07/">Python 数据分析三剑客之 Pandas（七）：合并数据集</a></li><li><a href="https://www.itrhx.com/2020/06/22/A86-Pandas-08/">Python 数据分析三剑客之 Pandas（八）：数据重塑、重复数据处理与数据替换</a></li><li><a href="https://www.itrhx.com/2020/06/25/A87-Pandas-09/">Python 数据分析三剑客之 Pandas（九）：时间序列</a></li><li><a href="https://www.itrhx.com/2020/06/26/A88-Pandas-10/">Python 数据分析三剑客之 Pandas（十）：数据读写</a></li></ul><hr><p>专栏：</p><p>【<a href="https://www.itrhx.com/categories/Python-%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/NumPy/">NumPy 专栏</a>】【<a href="https://www.itrhx.com/categories/Python-%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/Pandas/">Pandas 专栏</a>】【<a href="https://www.itrhx.com/categories/Python-%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/Matplotlib/">Matplotlib 专栏</a>】</p><p>推荐学习资料与网站：</p><p>【<a href="https://www.numpy.org.cn/" target="_blank" rel="noopener">NumPy 中文网</a>】【<a href="https://www.pypandas.cn/" target="_blank" rel="noopener">Pandas 中文网</a>】【<a href="https://www.matplotlib.org.cn/" target="_blank" rel="noopener">Matplotlib 中文网</a>】【<a href="https://github.com/TRHX/Python-quick-reference-table" target="_blank" rel="noopener">NumPy、Matplotlib、Pandas 速查表</a>】</p><hr><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">这里是一段防爬虫文本，请读者忽略。</span></span><br><span class="line"><span class="string">本文原创首发于</span> <span class="string">CSDN，作者</span> <span class="string">TRHX。</span></span><br><span class="line"><span class="string">博客首页：https://itrhx.blog.csdn.net/</span></span><br><span class="line"><span class="string">本文链接：https://itrhx.blog.csdn.net/article/details/106947061</span></span><br><span class="line"><span class="string">未经授权，禁止转载！恶意转载，后果自负！尊重原创，远离剽窃！</span></span><br></pre></td></tr></table></figure><hr><h2 id="【01x00】时间序列"><a href="#【01x00】时间序列" class="headerlink" title="【01x00】时间序列"></a><font color="#FF0000">【01x00】时间序列</font></h2><p>官网对于时间序列的介绍：<a href="https://pandas.pydata.org/pandas-docs/stable/user_guide/timeseries.html" target="_blank" rel="noopener">https://pandas.pydata.org/pandas-docs/stable/user_guide/timeseries.html</a></p><p>时间序列（time series）是一种重要的结构化数据形式，应用于多个领域，包括金融学、经济学、生态学、神经科学、物理学等。在多个时间点观察或测量到的任何事物都可以形成一段时间序列。很多时间序列是固定频率的，也就是说，数据点是根据某种规律定期出现的（比如每15秒、每5分钟、每月出现一次）。时间序列也可以是不定期的，没有固定的时间单位或单位之间的偏移量。时间序列数据的意义取决于具体的应用场景，主要有以下几种：</p><ul><li><font color="#4169E1"><strong>时间戳（timestamp），表示某个具体的时间点，例如 2020-6-24 15:30；</strong></font></li><li><font color="#4169E1"><strong>固定周期（period），表示某个时间周期，例如 2020-01；</strong></font></li><li><font color="#4169E1"><strong>时间间隔（timedelta），持续时间，即两个日期或时间之间的差异。</strong></font></li><li><font color="#FFA500"><strong>针对时间戳数据，Pandas 提供了 Timestamp 类型。它本质上是 Python 的原生 datetime 类型的替代品，但是在性能更好的 numpy.datetime64 类型的基础上创建。对应的索引数据结构是 DatetimeIndex。</strong></font></li><li><font color="#FFA500"><strong>针对时间周期数据，Pandas 提供了 Period 类型。这是利用 numpy.datetime64 类型将固定频率的时间间隔进行编码。对应的索引数据结构是 PeriodIndex。</strong></font></li><li><font color="#FFA500"><strong>针对时间增量或持续时间，Pandas 提供了 Timedelta 类型。Timedelta 是一种代替 Python 原生datetime.timedelta 类型的高性能数据结构，同样是基于 numpy.timedelta64 类型。对应的索引数据结构是 TimedeltaIndex。</strong></font></li></ul><h2 id="【02x00】Timestamp-时间戳"><a href="#【02x00】Timestamp-时间戳" class="headerlink" title="【02x00】Timestamp 时间戳"></a><font color="#FF0000">【02x00】Timestamp 时间戳</font></h2><h3 id="【02x01】pandas-Timestamp"><a href="#【02x01】pandas-Timestamp" class="headerlink" title="【02x01】pandas.Timestamp"></a><font color="#4876FF">【02x01】pandas.Timestamp</font></h3><p>在 pandas 中，<code>pandas.Timestamp</code> 方法用来代替 Python 中的 <code>datetime.datetime</code> 方法。</p><p>Timestamp 与 Python 的 Datetime 等效，在大多数情况下都可以互换。 此类型用于组成 DatetimeIndex 以及 Pandas 中其他面向时间序列的数据结构。</p><p>官方文档：<a href="https://pandas.pydata.org/docs/reference/api/pandas.Timestamp.html" target="_blank" rel="noopener">https://pandas.pydata.org/docs/reference/api/pandas.Timestamp.html</a></p><p>基本语法：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">pandas</span>.<span class="title">Timestamp</span><span class="params">(ts_input=&lt;object object&gt;, </span></span></span><br><span class="line"><span class="class"><span class="params">   freq=None, tz=None, unit=None, </span></span></span><br><span class="line"><span class="class"><span class="params">   year=None, month=None, day=None, </span></span></span><br><span class="line"><span class="class"><span class="params">   hour=None, minute=None, second=None, </span></span></span><br><span class="line"><span class="class"><span class="params">   microsecond=None, nanosecond=None, tzinfo=None)</span></span></span><br></pre></td></tr></table></figure><p>常用参数：</p><table><thead><tr><th>参数</th><th>描述</th></tr></thead><tbody><tr><td>ts_input</td><td>要转换为时间戳的对象，可以是 datetime-like，str，int，float 类型</td></tr><tr><td>freq</td><td>时间戳将具有的偏移量，可以是 str，日期偏移量类型，取值参见<a href="#t4">【02x02】freq 频率部分取值</a></td></tr><tr><td>tz</td><td>时间戳将具有的时区</td></tr><tr><td>unit</td><td>如果 ts_input 是整数或浮点数，该参数用于设置其单位（D、s、ms、us、ns）</td></tr></tbody></table><p>简单示例：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>pd.Timestamp(<span class="string">'2017-01-01T12'</span>)</span><br><span class="line">Timestamp(<span class="string">'2017-01-01 12:00:00'</span>)</span><br></pre></td></tr></table></figure><p>设置 <code>unit=&#39;s&#39;</code>，即待转换对象单位为秒：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>pd.Timestamp(<span class="number">1513393355.5</span>, unit=<span class="string">'s'</span>)</span><br><span class="line">Timestamp(<span class="string">'2017-12-16 03:02:35.500000'</span>)</span><br></pre></td></tr></table></figure><p>使用 <code>tz</code> 参数设置时区：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>pd.Timestamp(<span class="number">1513393355</span>, unit=<span class="string">'s'</span>, tz=<span class="string">'US/Pacific'</span>)</span><br><span class="line">Timestamp(<span class="string">'2017-12-15 19:02:35-0800'</span>, tz=<span class="string">'US/Pacific'</span>)</span><br></pre></td></tr></table></figure><p>单独设置年月日：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>pd.Timestamp(year=<span class="number">2020</span>, month=<span class="number">6</span>, day=<span class="number">24</span>, hour=<span class="number">12</span>)</span><br><span class="line">Timestamp(<span class="string">'2020-06-24 12:00:00'</span>)</span><br></pre></td></tr></table></figure><h3 id="【02x02】freq-频率部分取值"><a href="#【02x02】freq-频率部分取值" class="headerlink" title="【02x02】freq 频率部分取值"></a><font color="#4876FF">【02x02】freq 频率部分取值</font></h3><p>完整取值参见官方文档：<a href="https://pandas.pydata.org/docs/user_guide/timeseries.html#timeseries-offset-aliases" target="_blank" rel="noopener">https://pandas.pydata.org/docs/user_guide/timeseries.html#timeseries-offset-aliases</a></p><table><thead><tr><th>参数</th><th>类型</th><th>描述</th></tr></thead><tbody><tr><td>D</td><td>Day</td><td>每日历日</td></tr><tr><td>B</td><td>BusinessDay</td><td>每工作日</td></tr><tr><td>H</td><td>Hour</td><td>每小时</td></tr><tr><td>T 或 min</td><td>Minute</td><td>每分</td></tr><tr><td>S</td><td>Second</td><td>每秒</td></tr><tr><td>L 或 ms</td><td>Milli</td><td>每毫秒（即每千分之一秒）</td></tr><tr><td>U</td><td>Micro</td><td>每微秒（即每百万分之一秒）</td></tr><tr><td>M</td><td>MonthEnd</td><td>每月最后一个日历日</td></tr><tr><td>BM</td><td>BusinessMonthEnd</td><td>每月最后一个工作日</td></tr><tr><td>MS</td><td>MonthBegin</td><td>每月第一个日历日</td></tr><tr><td>BMS</td><td>BusinessMonthBegin</td><td>每月第一个工作日</td></tr><tr><td>W-MON、W-TUE…</td><td>Week</td><td>从指定的星期几（MON、TUE、 WED、THU、FR、SAT、SUN）开始算起，每周</td></tr><tr><td>WoM-1MON、WOM-2MON…</td><td>WeekOfMonth</td><td>产生每月第一、第二、第三或第四周的星期几。例如，WoM-3FRI 表示每月第3个星期五</td></tr><tr><td>Q-JAN、Q-FEB…</td><td>QuarterEnd</td><td>对于以指定月份（JAN、FEB、MAR、APR、MAY、JUN、JUL、AUG、SEP、OCT、NOV、DEC）结束的年度，每季度最后一月的最后个日历日</td></tr><tr><td>BQ-JAN、BQ-FEB…</td><td>BusinessQuarterEnd</td><td>对于以指定月份结束的年度，每季度最后一月的最后一个工作日</td></tr><tr><td>QS-JAN、QS-FEB…</td><td>QuarterBegin</td><td>对于以指定月份结束的年度，每季度最后一月的第一个日历日</td></tr><tr><td>BQS-JAN、 BQS-FEB…</td><td>BusinessQuarterBegin</td><td>对于以指定月份结束的年度，每季度最后一月的第一个工作日</td></tr><tr><td>A-JAN、A-FEB…</td><td>YearEnd</td><td>每年指定月份（JAN、FEB、MAR、APR、MAY、JUN、JUL、AUG、SEP、 OCT、NOV、DEC）的最后一个日历日</td></tr><tr><td>BA-JAN、BA-FEB…</td><td>BusinessYearEnd</td><td>每年指定月份的最后一个工作日</td></tr><tr><td>AS-JAN、AS-FEB…</td><td>YearBegin</td><td>每年指定月份的第一个历日日</td></tr><tr><td>BAS-JAN、BAS-FEB…</td><td>BusinessYearBegin</td><td>每年指定月份的第一个工作日</td></tr></tbody></table><h3 id="【02x03】to-datetime"><a href="#【02x03】to-datetime" class="headerlink" title="【02x03】to_datetime"></a><font color="#4876FF">【02x03】to_datetime</font></h3><p>在 Python 中，datetime 库提供了日期和时间处理方法，利用 <code>str</code> 或 <code>strftime</code> 方法可以将 datetime 对象转化成字符串，具体用法可参见<a href="https://blog.csdn.net/qq_36759224/article/details/104427220" target="_blank" rel="noopener">【Python 标准库学习】日期和时间处理库 — datetime</a>。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">from</span> datetime <span class="keyword">import</span> datetime</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>stamp = datetime(<span class="number">2020</span>, <span class="number">6</span>, <span class="number">24</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>stamp</span><br><span class="line">datetime.datetime(<span class="number">2020</span>, <span class="number">6</span>, <span class="number">24</span>, <span class="number">0</span>, <span class="number">0</span>)</span><br><span class="line">&gt;&gt;&gt;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>str(stamp)</span><br><span class="line"><span class="string">'2020-06-24 00:00:00'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>stamp.strftime(<span class="string">'%Y-%m-%d'</span>)</span><br><span class="line"><span class="string">'2020-06-24'</span></span><br></pre></td></tr></table></figure><font color="#FF0000"><strong>在 pandas 中 to_datetime 方法可以将字符串解析成多种不同的 Timestamp（时间戳） 对象：</strong></font><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>datestrs = <span class="string">'2011-07-06 12:00:00'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>type(datestrs)</span><br><span class="line">&lt;<span class="class"><span class="keyword">class</span> '<span class="title">str</span>'&gt;</span></span><br><span class="line"><span class="class">&gt;&gt;&gt; </span></span><br><span class="line"><span class="class">&gt;&gt;&gt; <span class="title">pd</span>.<span class="title">to_datetime</span><span class="params">(datestrs)</span></span></span><br><span class="line"><span class="class"><span class="title">Timestamp</span><span class="params">(<span class="string">'2011-07-06 12:00:00'</span>)</span></span></span><br></pre></td></tr></table></figure><p>基本语法：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">pandas.to_datetime(arg, errors=<span class="string">'raise'</span>, dayfirst=<span class="keyword">False</span>, </span><br><span class="line">   yearfirst=<span class="keyword">False</span>, utc=<span class="keyword">None</span>, format=<span class="keyword">None</span>, </span><br><span class="line">   exact=<span class="keyword">True</span>, unit=<span class="keyword">None</span>, infer_datetime_format=<span class="keyword">False</span>, </span><br><span class="line">   origin=<span class="string">'unix'</span>, cache=<span class="keyword">True</span>)</span><br></pre></td></tr></table></figure><p>官方文档：<a href="https://pandas.pydata.org/docs/reference/api/pandas.to_datetime.html" target="_blank" rel="noopener">https://pandas.pydata.org/docs/reference/api/pandas.to_datetime.html</a></p><p>常用参数：</p><table><thead><tr><th>参数</th><th>描述</th></tr></thead><tbody><tr><td>arg</td><td>要转换为日期时间的对象，可以接受 int, float, str, datetime, list, tuple, 1-d array, Series DataFrame/dict-like 类型</td></tr><tr><td>errors</td><td>如果字符串不满足时间戳的形式，是否会发生异常<br><code>ignore</code>：不引发异常，返回原始输入；<code>raise</code>：无效解析将引发异常（默认）；<code>coerce</code>：无效解析将被设置为NaT</td></tr><tr><td>dayfirst</td><td>bool 类型，默认 False，如果 arg 是 str 或列表，是否首先解析为日期<br>例如 dayfirst 为 True，<code>10/11/12</code> 被解析为 <code>2012-11-10</code>，为 False 则解析为 <code>2012-10-11</code></td></tr><tr><td>yearfirst</td><td>bool 类型，默认 False，如果 arg 是 str 或列表，是否首先解析为年份<br>例如 dayfirst 为 True，<code>10/11/12</code> 被解析为 <code>2010-11-12</code>，为 False 则解析为 <code>2012-10-11</code><br>如果 dayfirst 和 yearfirst 都为 True，则优先 yearfirst</td></tr><tr><td>utc</td><td>bool 类型，是否转换为协调世界时，默认 None</td></tr><tr><td>format</td><td>格式化时间，如 <code>21/2/20 16:10</code> 使用 <code>%d/%m/%y %H:%M</code> 会被解析为 <code>2020-02-21 16:10:00</code><br>符号含义常见文章：<a href="https://blog.csdn.net/qq_36759224/article/details/104427220" target="_blank" rel="noopener">【Python 标准库学习】日期和时间处理库 — datetime</a> 或者<a href="https://docs.python.org/3/library/datetime.html#strftime-and-strptime-behavior" target="_blank" rel="noopener">官方文档</a></td></tr><tr><td>exact</td><td>如果为 True，则需要精确的格式匹配。如果为 False，则允许格式与目标字符串中的任何位置匹配</td></tr><tr><td>unit</td><td>如果 arg 是整数或浮点数，该参数用于设置其单位（D、s、ms、us、ns）</td></tr></tbody></table><p>简单应用：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>obj = pd.DataFrame(&#123;<span class="string">'year'</span>: [<span class="number">2015</span>, <span class="number">2016</span>], <span class="string">'month'</span>: [<span class="number">2</span>, <span class="number">3</span>], <span class="string">'day'</span>: [<span class="number">4</span>, <span class="number">5</span>]&#125;)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>obj</span><br><span class="line">   year  month  day</span><br><span class="line"><span class="number">0</span>  <span class="number">2015</span>      <span class="number">2</span>    <span class="number">4</span></span><br><span class="line"><span class="number">1</span>  <span class="number">2016</span>      <span class="number">3</span>    <span class="number">5</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>pd.to_datetime(obj)</span><br><span class="line"><span class="number">0</span>   <span class="number">2015</span><span class="number">-02</span><span class="number">-04</span></span><br><span class="line"><span class="number">1</span>   <span class="number">2016</span><span class="number">-03</span><span class="number">-05</span></span><br><span class="line">dtype: datetime64[ns]</span><br></pre></td></tr></table></figure><p>设置 <code>format</code> 和 <code>errors</code> 参数：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>pd.to_datetime(<span class="string">'13000101'</span>, format=<span class="string">'%Y%m%d'</span>, errors=<span class="string">'ignore'</span>)</span><br><span class="line">datetime.datetime(<span class="number">1300</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>pd.to_datetime(<span class="string">'13000101'</span>, format=<span class="string">'%Y%m%d'</span>, errors=<span class="string">'coerce'</span>)</span><br><span class="line">NaT</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>pd.to_datetime(<span class="string">'13000101'</span>, format=<span class="string">'%Y%m%d'</span>, errors=<span class="string">'raise'</span>)</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">...</span><br><span class="line">pandas._libs.tslibs.np_datetime.OutOfBoundsDatetime: Out of bounds nanosecond timestamp: <span class="number">1300</span><span class="number">-01</span><span class="number">-01</span> <span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span></span><br></pre></td></tr></table></figure><p>设置 <code>unit</code> 参数：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>pd.to_datetime(<span class="number">1490195805</span>, unit=<span class="string">'s'</span>)</span><br><span class="line">Timestamp(<span class="string">'2017-03-22 15:16:45'</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>pd.to_datetime(<span class="number">1490195805433502912</span>, unit=<span class="string">'ns'</span>)</span><br><span class="line">Timestamp(<span class="string">'2017-03-22 15:16:45.433502912'</span>)</span><br></pre></td></tr></table></figure><h3 id="【02x04】date-range"><a href="#【02x04】date-range" class="headerlink" title="【02x04】date_range"></a><font color="#4876FF">【02x04】date_range</font></h3><p><code>pandas.date_range</code> 方法可用于根据指定的频率生成指定长度的 DatetimeIndex。</p><p>基本语法：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">pandas.date_range(start=<span class="keyword">None</span>, end=<span class="keyword">None</span>, periods=<span class="keyword">None</span>, freq=<span class="keyword">None</span>, </span><br><span class="line">  tz=<span class="keyword">None</span>, normalize=<span class="keyword">False</span>, name=<span class="keyword">None</span>, closed=<span class="keyword">None</span>, </span><br><span class="line">  **kwargs) → pandas.core.indexes.datetimes.DatetimeIndex</span><br></pre></td></tr></table></figure><p>官方文档：<a href="https://pandas.pydata.org/docs/reference/api/pandas.date_range.html" target="_blank" rel="noopener">https://pandas.pydata.org/docs/reference/api/pandas.date_range.html</a></p><table><thead><tr><th>参数</th><th>描述</th></tr></thead><tbody><tr><td>start</td><td>开始日期</td></tr><tr><td>end</td><td>结束日期</td></tr><tr><td>periods</td><td>int 类型，要生成的时段数（天）</td></tr><tr><td>freq</td><td>频率字符串，即按照某种特定的频率来生成日期，取值参见<a href="#t4">【02x02】freq 频率部分取值</a></td></tr><tr><td>tz</td><td>设置时区，例如 “Asia/Hong_Kong”</td></tr><tr><td>normalize</td><td>bool 类型，默认 False，是否在生成日期之前对其进行规范化（仅保留年月日）</td></tr><tr><td>name</td><td>结果 DatetimeIndex 的名称</td></tr><tr><td>closed</td><td><code>None</code>：默认值，同时保留开始日期和结束日期<br><code>&#39;left&#39;</code>：保留开始日期，不保留结束日期<br><code>&#39;right&#39;</code>：保留结束日期，不保留开始日期</td></tr></tbody></table><p>简单示例：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>pd.date_range(start=<span class="string">'1/1/2018'</span>, end=<span class="string">'1/08/2018'</span>)</span><br><span class="line">DatetimeIndex([<span class="string">'2018-01-01'</span>, <span class="string">'2018-01-02'</span>, <span class="string">'2018-01-03'</span>, <span class="string">'2018-01-04'</span>,</span><br><span class="line">               <span class="string">'2018-01-05'</span>, <span class="string">'2018-01-06'</span>, <span class="string">'2018-01-07'</span>, <span class="string">'2018-01-08'</span>],</span><br><span class="line">              dtype=<span class="string">'datetime64[ns]'</span>, freq=<span class="string">'D'</span>)</span><br></pre></td></tr></table></figure><p>指定 <code>periods</code> 参数：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>pd.date_range(start=<span class="string">'2012-04-01'</span>, periods=<span class="number">20</span>)</span><br><span class="line">DatetimeIndex([<span class="string">'2012-04-01'</span>, <span class="string">'2012-04-02'</span>, <span class="string">'2012-04-03'</span>, <span class="string">'2012-04-04'</span>,</span><br><span class="line">               <span class="string">'2012-04-05'</span>, <span class="string">'2012-04-06'</span>, <span class="string">'2012-04-07'</span>, <span class="string">'2012-04-08'</span>,</span><br><span class="line">               <span class="string">'2012-04-09'</span>, <span class="string">'2012-04-10'</span>, <span class="string">'2012-04-11'</span>, <span class="string">'2012-04-12'</span>,</span><br><span class="line">               <span class="string">'2012-04-13'</span>, <span class="string">'2012-04-14'</span>, <span class="string">'2012-04-15'</span>, <span class="string">'2012-04-16'</span>,</span><br><span class="line">               <span class="string">'2012-04-17'</span>, <span class="string">'2012-04-18'</span>, <span class="string">'2012-04-19'</span>, <span class="string">'2012-04-20'</span>],</span><br><span class="line">              dtype=<span class="string">'datetime64[ns]'</span>, freq=<span class="string">'D'</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>pd.date_range(end=<span class="string">'2012-06-01'</span>, periods=<span class="number">20</span>)</span><br><span class="line">DatetimeIndex([<span class="string">'2012-05-13'</span>, <span class="string">'2012-05-14'</span>, <span class="string">'2012-05-15'</span>, <span class="string">'2012-05-16'</span>,</span><br><span class="line">               <span class="string">'2012-05-17'</span>, <span class="string">'2012-05-18'</span>, <span class="string">'2012-05-19'</span>, <span class="string">'2012-05-20'</span>,</span><br><span class="line">               <span class="string">'2012-05-21'</span>, <span class="string">'2012-05-22'</span>, <span class="string">'2012-05-23'</span>, <span class="string">'2012-05-24'</span>,</span><br><span class="line">               <span class="string">'2012-05-25'</span>, <span class="string">'2012-05-26'</span>, <span class="string">'2012-05-27'</span>, <span class="string">'2012-05-28'</span>,</span><br><span class="line">               <span class="string">'2012-05-29'</span>, <span class="string">'2012-05-30'</span>, <span class="string">'2012-05-31'</span>, <span class="string">'2012-06-01'</span>],</span><br><span class="line">              dtype=<span class="string">'datetime64[ns]'</span>, freq=<span class="string">'D'</span>)</span><br><span class="line">&gt;&gt;&gt;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>pd.date_range(start=<span class="string">'2018-04-24'</span>, end=<span class="string">'2018-04-27'</span>, periods=<span class="number">3</span>)</span><br><span class="line">DatetimeIndex([<span class="string">'2018-04-24 00:00:00'</span>, <span class="string">'2018-04-25 12:00:00'</span>, <span class="string">'2018-04-27 00:00:00'</span>],</span><br><span class="line">              dtype=<span class="string">'datetime64[ns]'</span>, freq=<span class="keyword">None</span>)</span><br><span class="line">&gt;&gt;&gt;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>pd.date_range(start=<span class="string">'2018-04-24'</span>, end=<span class="string">'2018-04-28'</span>, periods=<span class="number">3</span>)</span><br><span class="line">DatetimeIndex([<span class="string">'2018-04-24'</span>, <span class="string">'2018-04-26'</span>, <span class="string">'2018-04-28'</span>], dtype=<span class="string">'datetime64[ns]'</span>, freq=<span class="keyword">None</span>)</span><br></pre></td></tr></table></figure><p>指定 <code>freq=&#39;M&#39;</code> 会按照每月最后一个日历日的频率生成日期，指定 <code>freq=&#39;3M&#39;</code> 会每隔3个月按照每月最后一个日历日的频率生成日期：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>pd.date_range(start=<span class="string">'1/1/2018'</span>, periods=<span class="number">5</span>, freq=<span class="string">'M'</span>)</span><br><span class="line">DatetimeIndex([<span class="string">'2018-01-31'</span>, <span class="string">'2018-02-28'</span>, <span class="string">'2018-03-31'</span>, <span class="string">'2018-04-30'</span>,</span><br><span class="line">               <span class="string">'2018-05-31'</span>],</span><br><span class="line">              dtype=<span class="string">'datetime64[ns]'</span>, freq=<span class="string">'M'</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>pd.date_range(start=<span class="string">'1/1/2018'</span>, periods=<span class="number">5</span>, freq=<span class="string">'3M'</span>)</span><br><span class="line">DatetimeIndex([<span class="string">'2018-01-31'</span>, <span class="string">'2018-04-30'</span>, <span class="string">'2018-07-31'</span>, <span class="string">'2018-10-31'</span>,</span><br><span class="line">               <span class="string">'2019-01-31'</span>],</span><br><span class="line">              dtype=<span class="string">'datetime64[ns]'</span>, freq=<span class="string">'3M'</span>)</span><br><span class="line">&gt;&gt;&gt;</span><br></pre></td></tr></table></figure><p>使用 <code>tz</code> 参数设置时区：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>pd.date_range(start=<span class="string">'1/1/2018'</span>, periods=<span class="number">5</span>, tz=<span class="string">'Asia/Tokyo'</span>)</span><br><span class="line">DatetimeIndex([<span class="string">'2018-01-01 00:00:00+09:00'</span>, <span class="string">'2018-01-02 00:00:00+09:00'</span>,</span><br><span class="line">               <span class="string">'2018-01-03 00:00:00+09:00'</span>, <span class="string">'2018-01-04 00:00:00+09:00'</span>,</span><br><span class="line">               <span class="string">'2018-01-05 00:00:00+09:00'</span>],</span><br><span class="line">              dtype=<span class="string">'datetime64[ns, Asia/Tokyo]'</span>, freq=<span class="string">'D'</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>pd.date_range(start=<span class="string">'6/24/2020'</span>, periods=<span class="number">5</span>, tz=<span class="string">'Asia/Hong_Kong'</span>)</span><br><span class="line">DatetimeIndex([<span class="string">'2020-06-24 00:00:00+08:00'</span>, <span class="string">'2020-06-25 00:00:00+08:00'</span>,</span><br><span class="line">               <span class="string">'2020-06-26 00:00:00+08:00'</span>, <span class="string">'2020-06-27 00:00:00+08:00'</span>,</span><br><span class="line">               <span class="string">'2020-06-28 00:00:00+08:00'</span>],</span><br><span class="line">              dtype=<span class="string">'datetime64[ns, Asia/Hong_Kong]'</span>, freq=<span class="string">'D'</span>)</span><br></pre></td></tr></table></figure><p>设置 <code>normalize</code> 参数，在生成时间戳之前对其进行格式化操作：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>pd.date_range(<span class="string">'2020-06-24 12:56:31'</span>, periods=<span class="number">5</span>, normalize=<span class="keyword">True</span>)</span><br><span class="line">DatetimeIndex([<span class="string">'2020-06-24'</span>, <span class="string">'2020-06-25'</span>, <span class="string">'2020-06-26'</span>, <span class="string">'2020-06-27'</span>,</span><br><span class="line">               <span class="string">'2020-06-28'</span>],</span><br><span class="line">              dtype=<span class="string">'datetime64[ns]'</span>, freq=<span class="string">'D'</span>)</span><br></pre></td></tr></table></figure><p>设置 <code>closed</code> 参数：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>pd.date_range(start=<span class="string">'2020-06-20'</span>, end=<span class="string">'2020-06-24'</span>, closed=<span class="keyword">None</span>)</span><br><span class="line">DatetimeIndex([<span class="string">'2020-06-20'</span>, <span class="string">'2020-06-21'</span>, <span class="string">'2020-06-22'</span>, <span class="string">'2020-06-23'</span>,</span><br><span class="line">               <span class="string">'2020-06-24'</span>],</span><br><span class="line">              dtype=<span class="string">'datetime64[ns]'</span>, freq=<span class="string">'D'</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>pd.date_range(start=<span class="string">'2020-06-20'</span>, end=<span class="string">'2020-06-24'</span>, closed=<span class="string">'left'</span>)</span><br><span class="line">DatetimeIndex([<span class="string">'2020-06-20'</span>, <span class="string">'2020-06-21'</span>, <span class="string">'2020-06-22'</span>, <span class="string">'2020-06-23'</span>], dtype=<span class="string">'datetime64[ns]'</span>, freq=<span class="string">'D'</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>pd.date_range(start=<span class="string">'2020-06-20'</span>, end=<span class="string">'2020-06-24'</span>, closed=<span class="string">'right'</span>)</span><br><span class="line">DatetimeIndex([<span class="string">'2020-06-21'</span>, <span class="string">'2020-06-22'</span>, <span class="string">'2020-06-23'</span>, <span class="string">'2020-06-24'</span>], dtype=<span class="string">'datetime64[ns]'</span>, freq=<span class="string">'D'</span>)</span><br></pre></td></tr></table></figure><h3 id="【02x05】索引与切片"><a href="#【02x05】索引与切片" class="headerlink" title="【02x05】索引与切片"></a><font color="#4876FF">【02x05】索引与切片</font></h3><p>Pandas 最基本的时间序列类型就是以时间戳（通常以 Python 字符串或 datatime 对象表示）为索引的Series，这些 datetime 对象实际上是被放在 DatetimeIndex 中的，可以使用类似 pandas.Series 对象的切片方法对其进行索引：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>dates = [datetime(<span class="number">2011</span>, <span class="number">1</span>, <span class="number">2</span>), datetime(<span class="number">2011</span>, <span class="number">1</span>, <span class="number">5</span>),</span><br><span class="line">         datetime(<span class="number">2011</span>, <span class="number">1</span>, <span class="number">7</span>), datetime(<span class="number">2011</span>, <span class="number">1</span>, <span class="number">8</span>),</span><br><span class="line">         datetime(<span class="number">2011</span>, <span class="number">1</span>, <span class="number">10</span>), datetime(<span class="number">2011</span>, <span class="number">1</span>, <span class="number">12</span>)]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>obj = pd.Series(np.random.randn(<span class="number">6</span>), index=dates)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>obj</span><br><span class="line"><span class="number">2011</span><span class="number">-01</span><span class="number">-02</span>   <span class="number">-0.407110</span></span><br><span class="line"><span class="number">2011</span><span class="number">-01</span><span class="number">-05</span>   <span class="number">-0.186661</span></span><br><span class="line"><span class="number">2011</span><span class="number">-01</span><span class="number">-07</span>   <span class="number">-0.731080</span></span><br><span class="line"><span class="number">2011</span><span class="number">-01</span><span class="number">-08</span>    <span class="number">0.860970</span></span><br><span class="line"><span class="number">2011</span><span class="number">-01</span><span class="number">-10</span>    <span class="number">1.929973</span></span><br><span class="line"><span class="number">2011</span><span class="number">-01</span><span class="number">-12</span>   <span class="number">-0.168599</span></span><br><span class="line">dtype: float64</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>obj.index</span><br><span class="line">DatetimeIndex([<span class="string">'2011-01-02'</span>, <span class="string">'2011-01-05'</span>, <span class="string">'2011-01-07'</span>, <span class="string">'2011-01-08'</span>,</span><br><span class="line">               <span class="string">'2011-01-10'</span>, <span class="string">'2011-01-12'</span>],</span><br><span class="line">              dtype=<span class="string">'datetime64[ns]'</span>, freq=<span class="keyword">None</span>)</span><br><span class="line">&gt;&gt;&gt;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>obj.index[<span class="number">0</span>]</span><br><span class="line">Timestamp(<span class="string">'2011-01-02 00:00:00'</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>obj.index[<span class="number">0</span>:<span class="number">3</span>]</span><br><span class="line">DatetimeIndex([<span class="string">'2011-01-02'</span>, <span class="string">'2011-01-05'</span>, <span class="string">'2011-01-07'</span>], dtype=<span class="string">'datetime64[ns]'</span>, freq=<span class="keyword">None</span>)</span><br></pre></td></tr></table></figure><p>另外还可以传入一个可以被解释为日期的字符串，或者只需传入“年”或“年月”即可轻松选取数据的切片：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>obj = pd.Series(np.random.randn(<span class="number">1000</span>), index=pd.date_range(<span class="string">'1/1/2000'</span>, periods=<span class="number">1000</span>))</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>obj</span><br><span class="line"><span class="number">2000</span><span class="number">-01</span><span class="number">-01</span>   <span class="number">-1.142284</span></span><br><span class="line"><span class="number">2000</span><span class="number">-01</span><span class="number">-02</span>    <span class="number">1.198785</span></span><br><span class="line"><span class="number">2000</span><span class="number">-01</span><span class="number">-03</span>    <span class="number">2.466909</span></span><br><span class="line"><span class="number">2000</span><span class="number">-01</span><span class="number">-04</span>   <span class="number">-0.086728</span></span><br><span class="line"><span class="number">2000</span><span class="number">-01</span><span class="number">-05</span>   <span class="number">-0.978437</span></span><br><span class="line">                ...   </span><br><span class="line"><span class="number">2002</span><span class="number">-09</span><span class="number">-22</span>   <span class="number">-0.252240</span></span><br><span class="line"><span class="number">2002</span><span class="number">-09</span><span class="number">-23</span>    <span class="number">0.148561</span></span><br><span class="line"><span class="number">2002</span><span class="number">-09</span><span class="number">-24</span>   <span class="number">-1.330409</span></span><br><span class="line"><span class="number">2002</span><span class="number">-09</span><span class="number">-25</span>   <span class="number">-0.673471</span></span><br><span class="line"><span class="number">2002</span><span class="number">-09</span><span class="number">-26</span>   <span class="number">-0.253271</span></span><br><span class="line">Freq: D, Length: <span class="number">1000</span>, dtype: float64</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>obj[<span class="string">'26/9/2002'</span>]</span><br><span class="line"><span class="number">-0.25327100684233356</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>obj[<span class="string">'2002'</span>]</span><br><span class="line"><span class="number">2002</span><span class="number">-01</span><span class="number">-01</span>    <span class="number">1.058715</span></span><br><span class="line"><span class="number">2002</span><span class="number">-01</span><span class="number">-02</span>    <span class="number">0.900859</span></span><br><span class="line"><span class="number">2002</span><span class="number">-01</span><span class="number">-03</span>    <span class="number">1.993508</span></span><br><span class="line"><span class="number">2002</span><span class="number">-01</span><span class="number">-04</span>   <span class="number">-0.103211</span></span><br><span class="line"><span class="number">2002</span><span class="number">-01</span><span class="number">-05</span>   <span class="number">-0.950090</span></span><br><span class="line">                ...   </span><br><span class="line"><span class="number">2002</span><span class="number">-09</span><span class="number">-22</span>   <span class="number">-0.252240</span></span><br><span class="line"><span class="number">2002</span><span class="number">-09</span><span class="number">-23</span>    <span class="number">0.148561</span></span><br><span class="line"><span class="number">2002</span><span class="number">-09</span><span class="number">-24</span>   <span class="number">-1.330409</span></span><br><span class="line"><span class="number">2002</span><span class="number">-09</span><span class="number">-25</span>   <span class="number">-0.673471</span></span><br><span class="line"><span class="number">2002</span><span class="number">-09</span><span class="number">-26</span>   <span class="number">-0.253271</span></span><br><span class="line">Freq: D, Length: <span class="number">269</span>, dtype: float64</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>obj[<span class="string">'2002-09'</span>]</span><br><span class="line"><span class="number">2002</span><span class="number">-09</span><span class="number">-01</span>   <span class="number">-0.995528</span></span><br><span class="line"><span class="number">2002</span><span class="number">-09</span><span class="number">-02</span>    <span class="number">0.501528</span></span><br><span class="line"><span class="number">2002</span><span class="number">-09</span><span class="number">-03</span>   <span class="number">-0.486753</span></span><br><span class="line"><span class="number">2002</span><span class="number">-09</span><span class="number">-04</span>   <span class="number">-1.083906</span></span><br><span class="line"><span class="number">2002</span><span class="number">-09</span><span class="number">-05</span>    <span class="number">1.458975</span></span><br><span class="line"><span class="number">2002</span><span class="number">-09</span><span class="number">-06</span>   <span class="number">-1.331685</span></span><br><span class="line"><span class="number">2002</span><span class="number">-09</span><span class="number">-07</span>    <span class="number">0.195338</span></span><br><span class="line"><span class="number">2002</span><span class="number">-09</span><span class="number">-08</span>   <span class="number">-0.429613</span></span><br><span class="line"><span class="number">2002</span><span class="number">-09</span><span class="number">-09</span>    <span class="number">1.125823</span></span><br><span class="line"><span class="number">2002</span><span class="number">-09</span><span class="number">-10</span>    <span class="number">1.607051</span></span><br><span class="line"><span class="number">2002</span><span class="number">-09</span><span class="number">-11</span>    <span class="number">0.530387</span></span><br><span class="line"><span class="number">2002</span><span class="number">-09</span><span class="number">-12</span>   <span class="number">-0.015938</span></span><br><span class="line"><span class="number">2002</span><span class="number">-09</span><span class="number">-13</span>    <span class="number">1.781043</span></span><br><span class="line"><span class="number">2002</span><span class="number">-09</span><span class="number">-14</span>   <span class="number">-0.277123</span></span><br><span class="line"><span class="number">2002</span><span class="number">-09</span><span class="number">-15</span>    <span class="number">0.344569</span></span><br><span class="line"><span class="number">2002</span><span class="number">-09</span><span class="number">-16</span>   <span class="number">-1.010810</span></span><br><span class="line"><span class="number">2002</span><span class="number">-09</span><span class="number">-17</span>    <span class="number">0.463001</span></span><br><span class="line"><span class="number">2002</span><span class="number">-09</span><span class="number">-18</span>    <span class="number">1.883636</span></span><br><span class="line"><span class="number">2002</span><span class="number">-09</span><span class="number">-19</span>    <span class="number">0.274520</span></span><br><span class="line"><span class="number">2002</span><span class="number">-09</span><span class="number">-20</span>    <span class="number">0.624184</span></span><br><span class="line"><span class="number">2002</span><span class="number">-09</span><span class="number">-21</span>   <span class="number">-1.203057</span></span><br><span class="line"><span class="number">2002</span><span class="number">-09</span><span class="number">-22</span>   <span class="number">-0.252240</span></span><br><span class="line"><span class="number">2002</span><span class="number">-09</span><span class="number">-23</span>    <span class="number">0.148561</span></span><br><span class="line"><span class="number">2002</span><span class="number">-09</span><span class="number">-24</span>   <span class="number">-1.330409</span></span><br><span class="line"><span class="number">2002</span><span class="number">-09</span><span class="number">-25</span>   <span class="number">-0.673471</span></span><br><span class="line"><span class="number">2002</span><span class="number">-09</span><span class="number">-26</span>   <span class="number">-0.253271</span></span><br><span class="line">Freq: D, dtype: float64</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>obj[<span class="string">'20/9/2002'</span>:<span class="string">'26/9/2002'</span>]</span><br><span class="line"><span class="number">2002</span><span class="number">-09</span><span class="number">-20</span>    <span class="number">0.624184</span></span><br><span class="line"><span class="number">2002</span><span class="number">-09</span><span class="number">-21</span>   <span class="number">-1.203057</span></span><br><span class="line"><span class="number">2002</span><span class="number">-09</span><span class="number">-22</span>   <span class="number">-0.252240</span></span><br><span class="line"><span class="number">2002</span><span class="number">-09</span><span class="number">-23</span>    <span class="number">0.148561</span></span><br><span class="line"><span class="number">2002</span><span class="number">-09</span><span class="number">-24</span>   <span class="number">-1.330409</span></span><br><span class="line"><span class="number">2002</span><span class="number">-09</span><span class="number">-25</span>   <span class="number">-0.673471</span></span><br><span class="line"><span class="number">2002</span><span class="number">-09</span><span class="number">-26</span>   <span class="number">-0.253271</span></span><br><span class="line">Freq: D, dtype: float64</span><br></pre></td></tr></table></figure><h3 id="【02x06】移动数据与数据偏移"><a href="#【02x06】移动数据与数据偏移" class="headerlink" title="【02x06】移动数据与数据偏移"></a><font color="#4876FF">【02x06】移动数据与数据偏移</font></h3><p>移动（shifting）指的是沿着时间轴将数据前移或后移。Series 和 DataFrame 都有一个 shift 方法用于执行单纯的前移或后移操作，保持索引不变：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>obj = pd.Series(np.random.randn(<span class="number">4</span>),</span><br><span class="line">    index=pd.date_range(<span class="string">'1/1/2000'</span>, periods=<span class="number">4</span>, freq=<span class="string">'M'</span>))</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>obj</span><br><span class="line"><span class="number">2000</span><span class="number">-01</span><span class="number">-31</span>   <span class="number">-0.100217</span></span><br><span class="line"><span class="number">2000</span><span class="number">-02</span><span class="number">-29</span>    <span class="number">1.177834</span></span><br><span class="line"><span class="number">2000</span><span class="number">-03</span><span class="number">-31</span>   <span class="number">-0.644353</span></span><br><span class="line"><span class="number">2000</span><span class="number">-04</span><span class="number">-30</span>   <span class="number">-1.954679</span></span><br><span class="line">Freq: M, dtype: float64</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>obj.shift(<span class="number">2</span>)</span><br><span class="line"><span class="number">2000</span><span class="number">-01</span><span class="number">-31</span>         NaN</span><br><span class="line"><span class="number">2000</span><span class="number">-02</span><span class="number">-29</span>         NaN</span><br><span class="line"><span class="number">2000</span><span class="number">-03</span><span class="number">-31</span>   <span class="number">-0.100217</span></span><br><span class="line"><span class="number">2000</span><span class="number">-04</span><span class="number">-30</span>    <span class="number">1.177834</span></span><br><span class="line">Freq: M, dtype: float64</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>obj.shift(<span class="number">-2</span>)</span><br><span class="line"><span class="number">2000</span><span class="number">-01</span><span class="number">-31</span>   <span class="number">-0.644353</span></span><br><span class="line"><span class="number">2000</span><span class="number">-02</span><span class="number">-29</span>   <span class="number">-1.954679</span></span><br><span class="line"><span class="number">2000</span><span class="number">-03</span><span class="number">-31</span>         NaN</span><br><span class="line"><span class="number">2000</span><span class="number">-04</span><span class="number">-30</span>         NaN</span><br><span class="line">Freq: M, dtype: float64</span><br></pre></td></tr></table></figure><p>因为简单的移位操作不会修改索引，所以部分数据会被丢弃并引入 NaN（缺失值）。因此，如果频率已知，则可以将其传给 shift 以便实现对时间戳进行位移而不是对数据进行简单位移：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>obj = pd.Series(np.random.randn(<span class="number">4</span>),</span><br><span class="line">    index=pd.date_range(<span class="string">'1/1/2000'</span>, periods=<span class="number">4</span>, freq=<span class="string">'M'</span>))</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>obj</span><br><span class="line"><span class="number">2000</span><span class="number">-01</span><span class="number">-31</span>   <span class="number">-0.100217</span></span><br><span class="line"><span class="number">2000</span><span class="number">-02</span><span class="number">-29</span>    <span class="number">1.177834</span></span><br><span class="line"><span class="number">2000</span><span class="number">-03</span><span class="number">-31</span>   <span class="number">-0.644353</span></span><br><span class="line"><span class="number">2000</span><span class="number">-04</span><span class="number">-30</span>   <span class="number">-1.954679</span></span><br><span class="line">Freq: M, dtype: float64</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>obj.shift(<span class="number">2</span>, freq=<span class="string">'M'</span>)</span><br><span class="line"><span class="number">2000</span><span class="number">-03</span><span class="number">-31</span>   <span class="number">-0.100217</span></span><br><span class="line"><span class="number">2000</span><span class="number">-04</span><span class="number">-30</span>    <span class="number">1.177834</span></span><br><span class="line"><span class="number">2000</span><span class="number">-05</span><span class="number">-31</span>   <span class="number">-0.644353</span></span><br><span class="line"><span class="number">2000</span><span class="number">-06</span><span class="number">-30</span>   <span class="number">-1.954679</span></span><br><span class="line">Freq: M, dtype: float64</span><br></pre></td></tr></table></figure><p>Pandas 中的频率是由一个基础频率（base frequency）和一个乘数组成的。基础频率通常以一个字符串别名表示，比如 <code>&quot;M&quot;</code> 表示每月，<code>&quot;H&quot;</code> 表示每小时。对于每个基础频率，都有一个被称为日期偏移量（date offset）的对象与之对应。例如，按小时计算的频率可以用 <code>Hour</code> 类表示：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">from</span> pandas.tseries.offsets <span class="keyword">import</span> Hour, Minute</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>hour = Hour()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>hour</span><br><span class="line">&lt;Hour&gt;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>four_hours = Hour(<span class="number">4</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>four_hours</span><br><span class="line">&lt;<span class="number">4</span> * Hours&gt;</span><br></pre></td></tr></table></figure><p>一般来说，无需明确创建这样的对象，只需使用诸如 <code>&quot;H&quot;</code> 或 <code>&quot;4H&quot;</code> 这样的字符串别名即可。在基础频率前面放上一个整数即可创建倍数：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>pd.date_range(<span class="string">'2000-01-01'</span>, <span class="string">'2000-01-03 23:59'</span>, freq=<span class="string">'4h'</span>)</span><br><span class="line">DatetimeIndex([<span class="string">'2000-01-01 00:00:00'</span>, <span class="string">'2000-01-01 04:00:00'</span>,</span><br><span class="line">               <span class="string">'2000-01-01 08:00:00'</span>, <span class="string">'2000-01-01 12:00:00'</span>,</span><br><span class="line">               <span class="string">'2000-01-01 16:00:00'</span>, <span class="string">'2000-01-01 20:00:00'</span>,</span><br><span class="line">               <span class="string">'2000-01-02 00:00:00'</span>, <span class="string">'2000-01-02 04:00:00'</span>,</span><br><span class="line">               <span class="string">'2000-01-02 08:00:00'</span>, <span class="string">'2000-01-02 12:00:00'</span>,</span><br><span class="line">               <span class="string">'2000-01-02 16:00:00'</span>, <span class="string">'2000-01-02 20:00:00'</span>,</span><br><span class="line">               <span class="string">'2000-01-03 00:00:00'</span>, <span class="string">'2000-01-03 04:00:00'</span>,</span><br><span class="line">               <span class="string">'2000-01-03 08:00:00'</span>, <span class="string">'2000-01-03 12:00:00'</span>,</span><br><span class="line">               <span class="string">'2000-01-03 16:00:00'</span>, <span class="string">'2000-01-03 20:00:00'</span>],</span><br><span class="line">              dtype=<span class="string">'datetime64[ns]'</span>, freq=<span class="string">'4H'</span>)</span><br></pre></td></tr></table></figure><p>大部分偏移量对象都可通过加法进行连接：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">from</span> pandas.tseries.offsets <span class="keyword">import</span> Hour, Minute</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>Hour(<span class="number">2</span>) + Minute(<span class="number">30</span>)</span><br><span class="line">&lt;<span class="number">150</span> * Minutes&gt;</span><br></pre></td></tr></table></figure><p>对于 <code>freq</code> 参数也可以传入频率字符串（如 <code>&quot;2h30min&quot;</code>），这种字符串可以被高效地解析为等效的表达式：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>pd.date_range(<span class="string">'2000-01-01'</span>, periods=<span class="number">10</span>, freq=<span class="string">'1h30min'</span>)</span><br><span class="line">DatetimeIndex([<span class="string">'2000-01-01 00:00:00'</span>, <span class="string">'2000-01-01 01:30:00'</span>,</span><br><span class="line">               <span class="string">'2000-01-01 03:00:00'</span>, <span class="string">'2000-01-01 04:30:00'</span>,</span><br><span class="line">               <span class="string">'2000-01-01 06:00:00'</span>, <span class="string">'2000-01-01 07:30:00'</span>,</span><br><span class="line">               <span class="string">'2000-01-01 09:00:00'</span>, <span class="string">'2000-01-01 10:30:00'</span>,</span><br><span class="line">               <span class="string">'2000-01-01 12:00:00'</span>, <span class="string">'2000-01-01 13:30:00'</span>],</span><br><span class="line">              dtype=<span class="string">'datetime64[ns]'</span>, freq=<span class="string">'90T'</span>)</span><br></pre></td></tr></table></figure><p>这种偏移量还可以用在 datetime 或 Timestamp 对象上：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">from</span> pandas.tseries.offsets <span class="keyword">import</span> Day, MonthEnd</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>now = datetime(<span class="number">2011</span>, <span class="number">11</span>, <span class="number">17</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>now + <span class="number">3</span> * Day()</span><br><span class="line">Timestamp(<span class="string">'2011-11-20 00:00:00'</span>)</span><br></pre></td></tr></table></figure><p>如果加的是锚点偏移量，比如 MonthEnd，第一次增量会将原日期向前滚动到符合频率规则的下一个日期：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">from</span> pandas.tseries.offsets <span class="keyword">import</span> Day, MonthEnd</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>now = datetime(<span class="number">2011</span>, <span class="number">11</span>, <span class="number">17</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>now + MonthEnd()</span><br><span class="line">Timestamp(<span class="string">'2011-11-30 00:00:00'</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>now + MonthEnd(<span class="number">2</span>)</span><br><span class="line">Timestamp(<span class="string">'2011-12-31 00:00:00'</span>)</span><br></pre></td></tr></table></figure><p>通过锚点偏移量的 rollforward 和 rollback 方法，可明确地将日期向前或向后滚动：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">from</span> pandas.tseries.offsets <span class="keyword">import</span> Day, MonthEnd</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>now = datetime(<span class="number">2011</span>, <span class="number">11</span>, <span class="number">17</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>offset = MonthEnd()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>offset.rollforward(now)</span><br><span class="line">Timestamp(<span class="string">'2011-11-30 00:00:00'</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>offset.rollback(now)</span><br><span class="line">Timestamp(<span class="string">'2011-10-31 00:00:00'</span>)</span><br></pre></td></tr></table></figure><p>与 <code>groupby</code> 方法结合使用：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">from</span> pandas.tseries.offsets <span class="keyword">import</span> Day, MonthEnd</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>obj = pd.Series(np.random.randn(<span class="number">20</span>),</span><br><span class="line">    index=pd.date_range(<span class="string">'1/15/2000'</span>, periods=<span class="number">20</span>, freq=<span class="string">'4d'</span>))</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>obj</span><br><span class="line"><span class="number">2000</span><span class="number">-01</span><span class="number">-15</span>   <span class="number">-0.591729</span></span><br><span class="line"><span class="number">2000</span><span class="number">-01</span><span class="number">-19</span>   <span class="number">-0.775844</span></span><br><span class="line"><span class="number">2000</span><span class="number">-01</span><span class="number">-23</span>   <span class="number">-0.745603</span></span><br><span class="line"><span class="number">2000</span><span class="number">-01</span><span class="number">-27</span>   <span class="number">-0.076439</span></span><br><span class="line"><span class="number">2000</span><span class="number">-01</span><span class="number">-31</span>    <span class="number">1.796417</span></span><br><span class="line"><span class="number">2000</span><span class="number">-02</span><span class="number">-04</span>   <span class="number">-0.500349</span></span><br><span class="line"><span class="number">2000</span><span class="number">-02</span><span class="number">-08</span>    <span class="number">0.515851</span></span><br><span class="line"><span class="number">2000</span><span class="number">-02</span><span class="number">-12</span>   <span class="number">-0.344171</span></span><br><span class="line"><span class="number">2000</span><span class="number">-02</span><span class="number">-16</span>    <span class="number">0.419657</span></span><br><span class="line"><span class="number">2000</span><span class="number">-02</span><span class="number">-20</span>    <span class="number">0.307288</span></span><br><span class="line"><span class="number">2000</span><span class="number">-02</span><span class="number">-24</span>    <span class="number">0.115113</span></span><br><span class="line"><span class="number">2000</span><span class="number">-02</span><span class="number">-28</span>   <span class="number">-0.362585</span></span><br><span class="line"><span class="number">2000</span><span class="number">-03</span><span class="number">-03</span>    <span class="number">1.074892</span></span><br><span class="line"><span class="number">2000</span><span class="number">-03</span><span class="number">-07</span>    <span class="number">1.111366</span></span><br><span class="line"><span class="number">2000</span><span class="number">-03</span><span class="number">-11</span>    <span class="number">0.949910</span></span><br><span class="line"><span class="number">2000</span><span class="number">-03</span><span class="number">-15</span>   <span class="number">-1.535727</span></span><br><span class="line"><span class="number">2000</span><span class="number">-03</span><span class="number">-19</span>    <span class="number">0.545944</span></span><br><span class="line"><span class="number">2000</span><span class="number">-03</span><span class="number">-23</span>   <span class="number">-0.810139</span></span><br><span class="line"><span class="number">2000</span><span class="number">-03</span><span class="number">-27</span>   <span class="number">-1.260627</span></span><br><span class="line"><span class="number">2000</span><span class="number">-03</span><span class="number">-31</span>   <span class="number">-0.128403</span></span><br><span class="line">Freq: <span class="number">4</span>D, dtype: float64</span><br><span class="line">&gt;&gt;&gt;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>offset = MonthEnd()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>obj.groupby(offset.rollforward).mean()</span><br><span class="line"><span class="number">2000</span><span class="number">-01</span><span class="number">-31</span>   <span class="number">-0.078640</span></span><br><span class="line"><span class="number">2000</span><span class="number">-02</span><span class="number">-29</span>    <span class="number">0.021543</span></span><br><span class="line"><span class="number">2000</span><span class="number">-03</span><span class="number">-31</span>   <span class="number">-0.006598</span></span><br><span class="line">dtype: float64</span><br></pre></td></tr></table></figure><h3 id="【02x07】时区处理"><a href="#【02x07】时区处理" class="headerlink" title="【02x07】时区处理"></a><font color="#4876FF">【02x07】时区处理</font></h3><p>在 Python 中，时区信息来自第三方库 pytz，使用 <code>pytz.common_timezones</code> 方法可以查看所有的时区名称，使用 <code>pytz.timezone</code> 方法从 pytz 中获取时区对象：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> pytz</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>pytz.common_timezones</span><br><span class="line">[<span class="string">'Africa/Abidjan'</span>, <span class="string">'Africa/Accra'</span>, <span class="string">'Africa/Addis_Ababa'</span>, ..., <span class="string">'UTC'</span>]</span><br><span class="line">&gt;&gt;&gt;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>tz = pytz.timezone(<span class="string">'Asia/Shanghai'</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>tz</span><br><span class="line">&lt;DstTzInfo <span class="string">'Asia/Shanghai'</span> LMT+<span class="number">8</span>:<span class="number">06</span>:<span class="number">00</span> STD&gt;  <span class="comment"># 表示与 UTC 时间相差8小时6分</span></span><br></pre></td></tr></table></figure><p>在 <code>date_range</code> 方法中，<code>tz</code> 参数用于指定时区，默认为 None，可以使用 <code>tz_localize</code> 方法将其进行本地化时区转换，如下示例中，将无时区转本地化 UTC 时区：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>rng = pd.date_range(<span class="string">'3/9/2012 9:30'</span>, periods=<span class="number">6</span>, freq=<span class="string">'D'</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>ts = pd.Series(np.random.randn(len(rng)), index=rng)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>ts</span><br><span class="line"><span class="number">2012</span><span class="number">-03</span><span class="number">-09</span> <span class="number">09</span>:<span class="number">30</span>:<span class="number">00</span>   <span class="number">-1.527913</span></span><br><span class="line"><span class="number">2012</span><span class="number">-03</span><span class="number">-10</span> <span class="number">09</span>:<span class="number">30</span>:<span class="number">00</span>   <span class="number">-1.116101</span></span><br><span class="line"><span class="number">2012</span><span class="number">-03</span><span class="number">-11</span> <span class="number">09</span>:<span class="number">30</span>:<span class="number">00</span>    <span class="number">0.359358</span></span><br><span class="line"><span class="number">2012</span><span class="number">-03</span><span class="number">-12</span> <span class="number">09</span>:<span class="number">30</span>:<span class="number">00</span>   <span class="number">-0.475920</span></span><br><span class="line"><span class="number">2012</span><span class="number">-03</span><span class="number">-13</span> <span class="number">09</span>:<span class="number">30</span>:<span class="number">00</span>   <span class="number">-0.336570</span></span><br><span class="line"><span class="number">2012</span><span class="number">-03</span><span class="number">-14</span> <span class="number">09</span>:<span class="number">30</span>:<span class="number">00</span>   <span class="number">-1.075952</span></span><br><span class="line">Freq: D, dtype: float64</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(ts.index.tz)</span><br><span class="line"><span class="keyword">None</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>ts_utc = ts.tz_localize(<span class="string">'UTC'</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>ts_utc</span><br><span class="line"><span class="number">2012</span><span class="number">-03</span><span class="number">-09</span> <span class="number">09</span>:<span class="number">30</span>:<span class="number">00</span>+<span class="number">00</span>:<span class="number">00</span>   <span class="number">-1.527913</span></span><br><span class="line"><span class="number">2012</span><span class="number">-03</span><span class="number">-10</span> <span class="number">09</span>:<span class="number">30</span>:<span class="number">00</span>+<span class="number">00</span>:<span class="number">00</span>   <span class="number">-1.116101</span></span><br><span class="line"><span class="number">2012</span><span class="number">-03</span><span class="number">-11</span> <span class="number">09</span>:<span class="number">30</span>:<span class="number">00</span>+<span class="number">00</span>:<span class="number">00</span>    <span class="number">0.359358</span></span><br><span class="line"><span class="number">2012</span><span class="number">-03</span><span class="number">-12</span> <span class="number">09</span>:<span class="number">30</span>:<span class="number">00</span>+<span class="number">00</span>:<span class="number">00</span>   <span class="number">-0.475920</span></span><br><span class="line"><span class="number">2012</span><span class="number">-03</span><span class="number">-13</span> <span class="number">09</span>:<span class="number">30</span>:<span class="number">00</span>+<span class="number">00</span>:<span class="number">00</span>   <span class="number">-0.336570</span></span><br><span class="line"><span class="number">2012</span><span class="number">-03</span><span class="number">-14</span> <span class="number">09</span>:<span class="number">30</span>:<span class="number">00</span>+<span class="number">00</span>:<span class="number">00</span>   <span class="number">-1.075952</span></span><br><span class="line">Freq: D, dtype: float64</span><br><span class="line">&gt;&gt;&gt;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>ts_utc.index</span><br><span class="line">DatetimeIndex([<span class="string">'2012-03-09 09:30:00+00:00'</span>, <span class="string">'2012-03-10 09:30:00+00:00'</span>,</span><br><span class="line">               <span class="string">'2012-03-11 09:30:00+00:00'</span>, <span class="string">'2012-03-12 09:30:00+00:00'</span>,</span><br><span class="line">               <span class="string">'2012-03-13 09:30:00+00:00'</span>, <span class="string">'2012-03-14 09:30:00+00:00'</span>],</span><br><span class="line">              dtype=<span class="string">'datetime64[ns, UTC]'</span>, freq=<span class="string">'D'</span>)</span><br></pre></td></tr></table></figure><p>时间序列被本地化到某个特定时区后，就可以用 <code>tz_convert</code> 方法将其转换到别的时区了：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>rng = pd.date_range(<span class="string">'3/9/2012 9:30'</span>, periods=<span class="number">6</span>, freq=<span class="string">'D'</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>ts = pd.Series(np.random.randn(len(rng)), index=rng)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>ts</span><br><span class="line"><span class="number">2012</span><span class="number">-03</span><span class="number">-09</span> <span class="number">09</span>:<span class="number">30</span>:<span class="number">00</span>    <span class="number">0.480303</span></span><br><span class="line"><span class="number">2012</span><span class="number">-03</span><span class="number">-10</span> <span class="number">09</span>:<span class="number">30</span>:<span class="number">00</span>   <span class="number">-1.461039</span></span><br><span class="line"><span class="number">2012</span><span class="number">-03</span><span class="number">-11</span> <span class="number">09</span>:<span class="number">30</span>:<span class="number">00</span>   <span class="number">-1.512749</span></span><br><span class="line"><span class="number">2012</span><span class="number">-03</span><span class="number">-12</span> <span class="number">09</span>:<span class="number">30</span>:<span class="number">00</span>   <span class="number">-2.185421</span></span><br><span class="line"><span class="number">2012</span><span class="number">-03</span><span class="number">-13</span> <span class="number">09</span>:<span class="number">30</span>:<span class="number">00</span>    <span class="number">1.657845</span></span><br><span class="line"><span class="number">2012</span><span class="number">-03</span><span class="number">-14</span> <span class="number">09</span>:<span class="number">30</span>:<span class="number">00</span>    <span class="number">0.175633</span></span><br><span class="line">Freq: D, dtype: float64</span><br><span class="line">&gt;&gt;&gt;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>ts.tz_localize(<span class="string">'UTC'</span>).tz_convert(<span class="string">'Asia/Shanghai'</span>)</span><br><span class="line"><span class="number">2012</span><span class="number">-03</span><span class="number">-09</span> <span class="number">17</span>:<span class="number">30</span>:<span class="number">00</span>+<span class="number">08</span>:<span class="number">00</span>    <span class="number">0.480303</span></span><br><span class="line"><span class="number">2012</span><span class="number">-03</span><span class="number">-10</span> <span class="number">17</span>:<span class="number">30</span>:<span class="number">00</span>+<span class="number">08</span>:<span class="number">00</span>   <span class="number">-1.461039</span></span><br><span class="line"><span class="number">2012</span><span class="number">-03</span><span class="number">-11</span> <span class="number">17</span>:<span class="number">30</span>:<span class="number">00</span>+<span class="number">08</span>:<span class="number">00</span>   <span class="number">-1.512749</span></span><br><span class="line"><span class="number">2012</span><span class="number">-03</span><span class="number">-12</span> <span class="number">17</span>:<span class="number">30</span>:<span class="number">00</span>+<span class="number">08</span>:<span class="number">00</span>   <span class="number">-2.185421</span></span><br><span class="line"><span class="number">2012</span><span class="number">-03</span><span class="number">-13</span> <span class="number">17</span>:<span class="number">30</span>:<span class="number">00</span>+<span class="number">08</span>:<span class="number">00</span>    <span class="number">1.657845</span></span><br><span class="line"><span class="number">2012</span><span class="number">-03</span><span class="number">-14</span> <span class="number">17</span>:<span class="number">30</span>:<span class="number">00</span>+<span class="number">08</span>:<span class="number">00</span>    <span class="number">0.175633</span></span><br><span class="line">Freq: D, dtype: float64</span><br></pre></td></tr></table></figure><hr><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">这里是一段防爬虫文本，请读者忽略。</span></span><br><span class="line"><span class="string">本文原创首发于</span> <span class="string">CSDN，作者</span> <span class="string">TRHX。</span></span><br><span class="line"><span class="string">博客首页：https://itrhx.blog.csdn.net/</span></span><br><span class="line"><span class="string">本文链接：https://itrhx.blog.csdn.net/article/details/106947061</span></span><br><span class="line"><span class="string">未经授权，禁止转载！恶意转载，后果自负！尊重原创，远离剽窃！</span></span><br></pre></td></tr></table></figure><hr><h2 id="【03x00】period-固定时期"><a href="#【03x00】period-固定时期" class="headerlink" title="【03x00】period 固定时期"></a><font color="#FF0000">【03x00】period 固定时期</font></h2><h3 id="【03x01】pandas-Period"><a href="#【03x01】pandas-Period" class="headerlink" title="【03x01】pandas.Period"></a><font color="#4876FF">【03x01】pandas.Period</font></h3><p>固定时期（period）表示的是时间区间，比如数日、数月、数季、数年等。Period 类所表示的就是这种数据类型，其构造函数需要用到一个字符串或整数。</p><p>基本语法：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">pandas</span>.<span class="title">Period</span><span class="params">(value=None, freq=None, ordinal=None, </span></span></span><br><span class="line"><span class="class"><span class="params">year=None, month=None, quarter=None, </span></span></span><br><span class="line"><span class="class"><span class="params">day=None, hour=None, minute=None, second=None)</span></span></span><br></pre></td></tr></table></figure><p>官方文档：<a href="https://pandas.pydata.org/docs/reference/api/pandas.Period.html" target="_blank" rel="noopener">https://pandas.pydata.org/docs/reference/api/pandas.Period.html</a></p><p>常用参数：</p><table><thead><tr><th>参数</th><th>描述</th></tr></thead><tbody><tr><td>value</td><td>时间段</td></tr><tr><td>freq</td><td>时间戳将具有的偏移量，可以是 str，日期偏移量类型，取值参见<a href="#t4">【02x02】freq 频率部分取值</a></td></tr></tbody></table><p>以下示例中，Period 对象表示的是从2020年1月1日到2020年12月31日之间的整段时间</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>pd.Period(<span class="number">2020</span>, freq=<span class="string">'A-DEC'</span>)</span><br><span class="line">Period(<span class="string">'2020'</span>, <span class="string">'A-DEC'</span>)</span><br></pre></td></tr></table></figure><p>利用加减法对其按照频率进行位移：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>obj = pd.Period(<span class="number">2020</span>, freq=<span class="string">'A-DEC'</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>obj</span><br><span class="line">Period(<span class="string">'2020'</span>, <span class="string">'A-DEC'</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>obj + <span class="number">5</span></span><br><span class="line">Period(<span class="string">'2025'</span>, <span class="string">'A-DEC'</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>obj - <span class="number">5</span></span><br><span class="line">Period(<span class="string">'2015'</span>, <span class="string">'A-DEC'</span>)</span><br></pre></td></tr></table></figure><p>PeriodIndex 类保存了一组 Period，它可以在任何 pandas 数据结构中被用作轴索引：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>rng = [pd.Period(<span class="string">'2000-01'</span>), pd.Period(<span class="string">'2000-02'</span>), pd.Period(<span class="string">'2000-03'</span>), </span><br><span class="line">   pd.Period(<span class="string">'2000-04'</span>), pd.Period(<span class="string">'2000-05'</span>), pd.Period(<span class="string">'2000-06'</span>)]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>obj = pd.Series(np.random.randn(<span class="number">6</span>), index=rng)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>obj</span><br><span class="line"><span class="number">2000</span><span class="number">-01</span>    <span class="number">0.229092</span></span><br><span class="line"><span class="number">2000</span><span class="number">-02</span>    <span class="number">1.515498</span></span><br><span class="line"><span class="number">2000</span><span class="number">-03</span>   <span class="number">-0.334401</span></span><br><span class="line"><span class="number">2000</span><span class="number">-04</span>   <span class="number">-0.492681</span></span><br><span class="line"><span class="number">2000</span><span class="number">-05</span>   <span class="number">-2.012818</span></span><br><span class="line"><span class="number">2000</span><span class="number">-06</span>    <span class="number">0.338804</span></span><br><span class="line">Freq: M, dtype: float64</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>obj.index</span><br><span class="line">PeriodIndex([<span class="string">'2000-01'</span>, <span class="string">'2000-02'</span>, <span class="string">'2000-03'</span>, <span class="string">'2000-04'</span>, <span class="string">'2000-05'</span>, <span class="string">'2000-06'</span>], dtype=<span class="string">'period[M]'</span>, freq=<span class="string">'M'</span>)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>values = [<span class="string">'2001Q3'</span>, <span class="string">'2002Q2'</span>, <span class="string">'2003Q1'</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>index = pd.PeriodIndex(values, freq=<span class="string">'Q-DEC'</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>index</span><br><span class="line">PeriodIndex([<span class="string">'2001Q3'</span>, <span class="string">'2002Q2'</span>, <span class="string">'2003Q1'</span>], dtype=<span class="string">'period[Q-DEC]'</span>, freq=<span class="string">'Q-DEC'</span>)</span><br><span class="line">&gt;&gt;&gt;</span><br></pre></td></tr></table></figure><h3 id="【03x02】period-range"><a href="#【03x02】period-range" class="headerlink" title="【03x02】period_range"></a><font color="#4876FF">【03x02】period_range</font></h3><p><code>pandas.period_range</code> 方法可根据指定的频率生成指定长度的 PeriodIndex。</p><p>基本语法：</p><p><code>pandas.period_range(start=None, end=None, periods=None, freq=None, name=None) → pandas.core.indexes.period.PeriodIndex</code></p><p>官方文档：<a href="https://pandas.pydata.org/docs/reference/api/pandas.period_range.html" target="_blank" rel="noopener">https://pandas.pydata.org/docs/reference/api/pandas.period_range.html</a></p><p>常用参数：</p><table><thead><tr><th>参数</th><th>描述</th></tr></thead><tbody><tr><td>start</td><td>起始日期</td></tr><tr><td>end</td><td>结束日期</td></tr><tr><td>periods</td><td>要生成的时段数</td></tr><tr><td>freq</td><td>时间戳将具有的偏移量，可以是 str，日期偏移量类型，取值参见<a href="#t4">【02x02】freq 频率部分取值</a></td></tr><tr><td>name</td><td>结果 PeriodIndex 对象名称</td></tr></tbody></table><p>简单应用：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>pd.period_range(start=<span class="string">'2019-01-01'</span>, end=<span class="string">'2020-01-01'</span>, freq=<span class="string">'M'</span>)</span><br><span class="line">PeriodIndex([<span class="string">'2019-01'</span>, <span class="string">'2019-02'</span>, <span class="string">'2019-03'</span>, <span class="string">'2019-04'</span>, <span class="string">'2019-05'</span>, <span class="string">'2019-06'</span>,</span><br><span class="line">             <span class="string">'2019-07'</span>, <span class="string">'2019-08'</span>, <span class="string">'2019-09'</span>, <span class="string">'2019-10'</span>, <span class="string">'2019-11'</span>, <span class="string">'2019-12'</span>,</span><br><span class="line">             <span class="string">'2020-01'</span>],</span><br><span class="line">            dtype=<span class="string">'period[M]'</span>, freq=<span class="string">'M'</span>)</span><br><span class="line">&gt;&gt;&gt;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>pd.period_range(start=pd.Period(<span class="string">'2017Q1'</span>, freq=<span class="string">'Q'</span>),</span><br><span class="line">                end=pd.Period(<span class="string">'2017Q2'</span>, freq=<span class="string">'Q'</span>), freq=<span class="string">'M'</span>)</span><br><span class="line">PeriodIndex([<span class="string">'2017-03'</span>, <span class="string">'2017-04'</span>, <span class="string">'2017-05'</span>, <span class="string">'2017-06'</span>], dtype=<span class="string">'period[M]'</span>, freq=<span class="string">'M'</span>)</span><br></pre></td></tr></table></figure><h3 id="【03x03】asfreq-时期频率转换"><a href="#【03x03】asfreq-时期频率转换" class="headerlink" title="【03x03】asfreq 时期频率转换"></a><font color="#4876FF">【03x03】asfreq 时期频率转换</font></h3><p>Period 和 PeriodIndex 对象都可以通过 asfreq 方法被转换成别的频率。</p><p>基本语法：<code>PeriodIndex.asfreq(self, *args, **kwargs)</code></p><p>常用参数：</p><table><thead><tr><th>参数</th><th>描述</th></tr></thead><tbody><tr><td>freq</td><td>新的频率（偏移量），取值参见<a href="#t4">【02x02】freq 频率部分取值</a></td></tr><tr><td>how</td><td>按照开始或者结束对齐，<code>&#39;E&#39;</code> or <code>&#39;END&#39;</code> or <code>&#39;FINISH&#39;</code>；<code>&#39;S&#39;</code> or <code>&#39;START&#39;</code> or <code>&#39;BEGIN&#39;</code></td></tr></tbody></table><p>应用示例：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>pidx = pd.period_range(<span class="string">'2010-01-01'</span>, <span class="string">'2015-01-01'</span>, freq=<span class="string">'A'</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>pidx</span><br><span class="line">PeriodIndex([<span class="string">'2010'</span>, <span class="string">'2011'</span>, <span class="string">'2012'</span>, <span class="string">'2013'</span>, <span class="string">'2014'</span>, <span class="string">'2015'</span>], dtype=<span class="string">'period[A-DEC]'</span>, freq=<span class="string">'A-DEC'</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>pidx.asfreq(<span class="string">'M'</span>)</span><br><span class="line">PeriodIndex([<span class="string">'2010-12'</span>, <span class="string">'2011-12'</span>, <span class="string">'2012-12'</span>, <span class="string">'2013-12'</span>, <span class="string">'2014-12'</span>, <span class="string">'2015-12'</span>], dtype=<span class="string">'period[M]'</span>, freq=<span class="string">'M'</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>pidx.asfreq(<span class="string">'M'</span>, how=<span class="string">'S'</span>)</span><br><span class="line">PeriodIndex([<span class="string">'2010-01'</span>, <span class="string">'2011-01'</span>, <span class="string">'2012-01'</span>, <span class="string">'2013-01'</span>, <span class="string">'2014-01'</span>, <span class="string">'2015-01'</span>], dtype=<span class="string">'period[M]'</span>, freq=<span class="string">'M'</span>)</span><br></pre></td></tr></table></figure><h3 id="【03x04】to-period-与-to-timestamp"><a href="#【03x04】to-period-与-to-timestamp" class="headerlink" title="【03x04】to_period 与 to_timestamp()"></a><font color="#4876FF">【03x04】to_period 与 to_timestamp()</font></h3><p><code>to_period</code> 方法可以将 Timestamp（时间戳） 转换为 Period（固定时期）；</p><p><code>to_timestamp</code> 方法可以将 Period（固定时期）转换为 Timestamp（时间戳） 。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>rng = pd.date_range(<span class="string">'2000-01-01'</span>, periods=<span class="number">3</span>, freq=<span class="string">'M'</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>ts = pd.Series(np.random.randn(<span class="number">3</span>), index=rng)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>ts</span><br><span class="line"><span class="number">2000</span><span class="number">-01</span><span class="number">-31</span>    <span class="number">0.220759</span></span><br><span class="line"><span class="number">2000</span><span class="number">-02</span><span class="number">-29</span>   <span class="number">-0.108221</span></span><br><span class="line"><span class="number">2000</span><span class="number">-03</span><span class="number">-31</span>    <span class="number">0.819433</span></span><br><span class="line">Freq: M, dtype: float64</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>pts = ts.to_period()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>pts</span><br><span class="line"><span class="number">2000</span><span class="number">-01</span>    <span class="number">0.220759</span></span><br><span class="line"><span class="number">2000</span><span class="number">-02</span>   <span class="number">-0.108221</span></span><br><span class="line"><span class="number">2000</span><span class="number">-03</span>    <span class="number">0.819433</span></span><br><span class="line">Freq: M, dtype: float64</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>pts2 = pts.to_timestamp()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>pts2</span><br><span class="line"><span class="number">2000</span><span class="number">-01</span><span class="number">-01</span>    <span class="number">0.220759</span></span><br><span class="line"><span class="number">2000</span><span class="number">-02</span><span class="number">-01</span>   <span class="number">-0.108221</span></span><br><span class="line"><span class="number">2000</span><span class="number">-03</span><span class="number">-01</span>    <span class="number">0.819433</span></span><br><span class="line">Freq: MS, dtype: float64</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>ts.index</span><br><span class="line">DatetimeIndex([<span class="string">'2000-01-31'</span>, <span class="string">'2000-02-29'</span>, <span class="string">'2000-03-31'</span>], dtype=<span class="string">'datetime64[ns]'</span>, freq=<span class="string">'M'</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>pts.index</span><br><span class="line">PeriodIndex([<span class="string">'2000-01'</span>, <span class="string">'2000-02'</span>, <span class="string">'2000-03'</span>], dtype=<span class="string">'period[M]'</span>, freq=<span class="string">'M'</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>pts2.index</span><br><span class="line">DatetimeIndex([<span class="string">'2000-01-01'</span>, <span class="string">'2000-02-01'</span>, <span class="string">'2000-03-01'</span>], dtype=<span class="string">'datetime64[ns]'</span>, freq=<span class="string">'MS'</span>)</span><br></pre></td></tr></table></figure><h2 id="【04x00】timedelta-时间间隔"><a href="#【04x00】timedelta-时间间隔" class="headerlink" title="【04x00】timedelta 时间间隔"></a><font color="#FF0000">【04x00】timedelta 时间间隔</font></h2><h3 id="【04x01】pandas-Timedelta"><a href="#【04x01】pandas-Timedelta" class="headerlink" title="【04x01】pandas.Timedelta"></a><font color="#4876FF">【04x01】pandas.Timedelta</font></h3><p>Timedelta 表示持续时间，即两个日期或时间之间的差。</p><p>Timedelta 相当于 Python 的 datetime.timedelta，在大多数情况下两者可以互换。</p><p>基本语法：<code>class pandas.Timedelta(value=&lt;object object&gt;, unit=None, **kwargs)</code></p><p>官方文档：<a href="https://pandas.pydata.org/docs/reference/api/pandas.Timedelta.html" target="_blank" rel="noopener">https://pandas.pydata.org/docs/reference/api/pandas.Timedelta.html</a></p><p>常用参数：</p><table><thead><tr><th>参数</th><th>描述</th></tr></thead><tbody><tr><td>value</td><td>传入的值，可以是 Timedelta，timedelta，np.timedelta64，string 或 integer 对象</td></tr><tr><td>unit</td><td>用于设置 value 的单位，具体取值参见官方文档</td></tr></tbody></table><p>表示两个 datetime 对象之间的时间差：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>pd.to_datetime(<span class="string">'2020-6-24'</span>) - pd.to_datetime(<span class="string">'2016-1-1'</span>)</span><br><span class="line">Timedelta(<span class="string">'1636 days 00:00:00'</span>)</span><br></pre></td></tr></table></figure><p>通过字符串传递参数：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>pd.Timedelta(<span class="string">'3 days 3 hours 3 minutes 30 seconds'</span>)</span><br><span class="line">Timedelta(<span class="string">'3 days 03:03:30'</span>)</span><br></pre></td></tr></table></figure><p>通过整数传递参数：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>pd.Timedelta(<span class="number">5</span>,unit=<span class="string">'h'</span>)</span><br><span class="line">Timedelta(<span class="string">'0 days 05:00:00'</span>)</span><br></pre></td></tr></table></figure><p>获取属性：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>obj = pd.Timedelta(<span class="string">'3 days 3 hours 3 minutes 30 seconds'</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>obj</span><br><span class="line">Timedelta(<span class="string">'3 days 03:03:30'</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>obj.days</span><br><span class="line"><span class="number">3</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>obj.seconds</span><br><span class="line"><span class="number">11010</span></span><br></pre></td></tr></table></figure><h3 id="【04x02】to-timedelta"><a href="#【04x02】to-timedelta" class="headerlink" title="【04x02】to_timedelta"></a><font color="#4876FF">【04x02】to_timedelta</font></h3><p>to_timedelta 方法可以将传入的对象转换成 timedelta 对象。</p><p>基本语法：<code>pandas.to_timedelta(arg, unit=&#39;ns&#39;, errors=&#39;raise&#39;)</code></p><p>官方文档：<a href="https://pandas.pydata.org/docs/reference/api/pandas.to_timedelta.html" target="_blank" rel="noopener">https://pandas.pydata.org/docs/reference/api/pandas.to_timedelta.html</a></p><p>常用参数：</p><table><thead><tr><th>参数</th><th>描述</th></tr></thead><tbody><tr><td>arg</td><td>要转换为 timedelta 的对象，可以是 str，timedelta，list-like 或 Series 对象</td></tr><tr><td>unit</td><td>用于设置 arg 的单位，具体取值参见官方文档</td></tr><tr><td>errors</td><td>如果 arg 不满足时间戳的形式，是否会发生异常<br><code>ignore</code>：不引发异常，返回原始输入；<code>raise</code>：无效解析将引发异常（默认）；<code>coerce</code>：无效解析将被设置为NaT</td></tr></tbody></table><p>将单个字符串解析为 timedelta 对象：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>pd.to_timedelta(<span class="string">'1 days 06:05:01.00003'</span>)</span><br><span class="line">Timedelta(<span class="string">'1 days 06:05:01.000030'</span>)</span><br><span class="line">&gt;&gt;&gt;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>pd.to_timedelta(<span class="string">'15.5us'</span>)</span><br><span class="line">Timedelta(<span class="string">'0 days 00:00:00.000015'</span>)</span><br></pre></td></tr></table></figure><p>将字符串列表或数组解析为  timedelta 对象：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>pd.to_timedelta([<span class="string">'1 days 06:05:01.00003'</span>, <span class="string">'15.5us'</span>, <span class="string">'nan'</span>])</span><br><span class="line">TimedeltaIndex([<span class="string">'1 days 06:05:01.000030'</span>, <span class="string">'0 days 00:00:00.000015'</span>, NaT], dtype=<span class="string">'timedelta64[ns]'</span>, freq=<span class="keyword">None</span>)</span><br></pre></td></tr></table></figure><p>指定 <code>unit</code> 参数：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>pd.to_timedelta(np.arange(<span class="number">5</span>), unit=<span class="string">'s'</span>)</span><br><span class="line">TimedeltaIndex([<span class="string">'00:00:00'</span>, <span class="string">'00:00:01'</span>, <span class="string">'00:00:02'</span>, <span class="string">'00:00:03'</span>, <span class="string">'00:00:04'</span>], dtype=<span class="string">'timedelta64[ns]'</span>, freq=<span class="keyword">None</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>pd.to_timedelta(np.arange(<span class="number">5</span>), unit=<span class="string">'d'</span>)</span><br><span class="line">TimedeltaIndex([<span class="string">'0 days'</span>, <span class="string">'1 days'</span>, <span class="string">'2 days'</span>, <span class="string">'3 days'</span>, <span class="string">'4 days'</span>], dtype=<span class="string">'timedelta64[ns]'</span>, freq=<span class="keyword">None</span>)</span><br></pre></td></tr></table></figure><h3 id="【04x03】timedelta-range"><a href="#【04x03】timedelta-range" class="headerlink" title="【04x03】timedelta_range"></a><font color="#4876FF">【04x03】timedelta_range</font></h3><p><code>timedelta_range</code> 方法可根据指定的频率生成指定长度的 TimedeltaIndex。</p><p>基本语法：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">pandas.timedelta_range(start=<span class="keyword">None</span>, end=<span class="keyword">None</span>, periods=<span class="keyword">None</span>,</span><br><span class="line">   freq=<span class="keyword">None</span>, name=<span class="keyword">None</span>, closed=<span class="keyword">None</span>) → pandas.core.indexes.timedeltas.TimedeltaIndex</span><br></pre></td></tr></table></figure><p>官方文档：<a href="https://pandas.pydata.org/docs/reference/api/pandas.timedelta_range.html" target="_blank" rel="noopener">https://pandas.pydata.org/docs/reference/api/pandas.timedelta_range.html</a></p><p>常用参数：</p><table><thead><tr><th>参数</th><th>描述</th></tr></thead><tbody><tr><td>start</td><td>开始日期</td></tr><tr><td>end</td><td>结束日期</td></tr><tr><td>periods</td><td>int 类型，要生成的时段数</td></tr><tr><td>freq</td><td>频率字符串，即按照某种特定的频率来生成日期，取值参见<a href="#t4">【02x02】freq 频率部分取值</a></td></tr><tr><td>name</td><td>结果 TimedeltaIndex 的名称</td></tr><tr><td>closed</td><td><code>None</code>：默认值，同时保留开始日期和结束日期<br><code>&#39;left&#39;</code>：保留开始日期，不保留结束日期<br><code>&#39;right&#39;</code>：保留结束日期，不保留开始日期</td></tr></tbody></table><p>应用示例：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>pd.timedelta_range(start=<span class="string">'1 day'</span>, periods=<span class="number">4</span>)</span><br><span class="line">TimedeltaIndex([<span class="string">'1 days'</span>, <span class="string">'2 days'</span>, <span class="string">'3 days'</span>, <span class="string">'4 days'</span>], dtype=<span class="string">'timedelta64[ns]'</span>, freq=<span class="string">'D'</span>)</span><br></pre></td></tr></table></figure><p>closed 参数指定保留哪个端点。默认保留两个端点：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>pd.timedelta_range(start=<span class="string">'1 day'</span>, periods=<span class="number">4</span>, closed=<span class="string">'right'</span>)</span><br><span class="line">TimedeltaIndex([<span class="string">'2 days'</span>, <span class="string">'3 days'</span>, <span class="string">'4 days'</span>], dtype=<span class="string">'timedelta64[ns]'</span>, freq=<span class="string">'D'</span>)</span><br></pre></td></tr></table></figure><p>freq 参数指定 TimedeltaIndex 的频率。只接受固定频率，非固定频率如 <code>&#39;M&#39;</code> 将会报错：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>pd.timedelta_range(start=<span class="string">'1 day'</span>, end=<span class="string">'2 days'</span>, freq=<span class="string">'6H'</span>)</span><br><span class="line">TimedeltaIndex([<span class="string">'1 days 00:00:00'</span>, <span class="string">'1 days 06:00:00'</span>, <span class="string">'1 days 12:00:00'</span>,</span><br><span class="line">                <span class="string">'1 days 18:00:00'</span>, <span class="string">'2 days 00:00:00'</span>],</span><br><span class="line">               dtype=<span class="string">'timedelta64[ns]'</span>, freq=<span class="string">'6H'</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>pd.timedelta_range(start=<span class="string">'1 day'</span>, end=<span class="string">'2 days'</span>, freq=<span class="string">'M'</span>)</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">...</span><br><span class="line">ValueError: &lt;MonthEnd&gt; <span class="keyword">is</span> a non-fixed frequency</span><br></pre></td></tr></table></figure><h2 id="【05x00】重采样及频率转换"><a href="#【05x00】重采样及频率转换" class="headerlink" title="【05x00】重采样及频率转换"></a><font color="#FF0000">【05x00】重采样及频率转换</font></h2><p>重采样（resampling）指的是将时间序列从一个频率转换到另一个频率的处理过程。将高频率数据聚合到低频率称为降采样（downsampling），而将低频率数据转换到高频率则称为升采样（upsampling）。并不是所有的重采样都能被划分到这两个大类中。例如，将 W-WED（每周三）转换为 W-FRI 既不是降采样也不是升采样。</p><p>Pandas 中提供了 resample 方法来帮助我们实现重采样。Pandas 对象都带有一个 resample 方法，它是各种频率转换工作的主力函数。</p><p>基本语法：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Series.resample(self, rule, axis=<span class="number">0</span>, </span><br><span class="line">closed: Union[str, NoneType] = <span class="keyword">None</span>, </span><br><span class="line">label: Union[str, NoneType] = <span class="keyword">None</span>, </span><br><span class="line">convention: str = <span class="string">'start'</span>, </span><br><span class="line">kind: Union[str, NoneType] = <span class="keyword">None</span>, </span><br><span class="line">loffset=<span class="keyword">None</span>, base: int = <span class="number">0</span>, </span><br><span class="line">on=<span class="keyword">None</span>, level=<span class="keyword">None</span>)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">DataFrame.resample(self, rule, axis=<span class="number">0</span>, </span><br><span class="line">   closed: Union[str, NoneType] = <span class="keyword">None</span>, </span><br><span class="line">   label: Union[str, NoneType] = <span class="keyword">None</span>, </span><br><span class="line">   convention: str = <span class="string">'start'</span>, </span><br><span class="line">   kind: Union[str, NoneType] = <span class="keyword">None</span>, </span><br><span class="line">   loffset=<span class="keyword">None</span>, base: int = <span class="number">0</span>, </span><br><span class="line">   on=<span class="keyword">None</span>, level=<span class="keyword">None</span>)</span><br></pre></td></tr></table></figure><p>常用参数：</p><table><thead><tr><th>参数</th><th>描述</th></tr></thead><tbody><tr><td>rule</td></tr><tr><td>axis</td><td>重采样的轴，默认 0</td></tr><tr><td>closed</td><td>在重采样中，各时间段的哪一端是闭合（即包含）的，<br>除 <code>&#39;M&#39;</code>、<code>&#39;A&#39;</code>、<code>&#39;Q&#39;</code>、<code>&#39;BM&#39;</code>、<code>&#39;BA&#39;</code>、<code>&#39;BQ&#39;</code> 和 <code>&#39;W&#39;</code> 默认值为 ‘right’ 外，其他默认值为 ‘left‘</td></tr><tr><td>label</td><td>在重采样中，如何设置聚合值的标签， right 或 left，默认为 None，<br>例如，9:30 到 9:35 之间的这 5 分钟会被标记为 9:30 或 9:35</td></tr><tr><td>convention</td><td>仅用于 PeriodIndex（固定时期），对周期进行重采样，<code>&#39;start&#39;</code> or <code>&#39;s&#39;</code>，<code>&#39;end&#39;</code> or <code>&#39;e&#39;</code></td></tr><tr><td>on</td><td>对于 DataFrame 对象，可用该参数指定重采样后的数据的 index（行索引） 为原数据中的某列</td></tr><tr><td>level</td><td>对于具有层级索引（MultiIndex）的 DataFrame 对象，可以使用该参数来指定需要在哪个级别上进行重新采样</td></tr></tbody></table><p>将序列重采样到三分钟的频率，并将每个频率的值相加：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>index = pd.date_range(<span class="string">'1/1/2000'</span>, periods=<span class="number">9</span>, freq=<span class="string">'T'</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>series = pd.Series(range(<span class="number">9</span>), index=index)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>series</span><br><span class="line"><span class="number">2000</span><span class="number">-01</span><span class="number">-01</span> <span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span>    <span class="number">0</span></span><br><span class="line"><span class="number">2000</span><span class="number">-01</span><span class="number">-01</span> <span class="number">00</span>:<span class="number">01</span>:<span class="number">00</span>    <span class="number">1</span></span><br><span class="line"><span class="number">2000</span><span class="number">-01</span><span class="number">-01</span> <span class="number">00</span>:<span class="number">02</span>:<span class="number">00</span>    <span class="number">2</span></span><br><span class="line"><span class="number">2000</span><span class="number">-01</span><span class="number">-01</span> <span class="number">00</span>:<span class="number">03</span>:<span class="number">00</span>    <span class="number">3</span></span><br><span class="line"><span class="number">2000</span><span class="number">-01</span><span class="number">-01</span> <span class="number">00</span>:<span class="number">04</span>:<span class="number">00</span>    <span class="number">4</span></span><br><span class="line"><span class="number">2000</span><span class="number">-01</span><span class="number">-01</span> <span class="number">00</span>:<span class="number">05</span>:<span class="number">00</span>    <span class="number">5</span></span><br><span class="line"><span class="number">2000</span><span class="number">-01</span><span class="number">-01</span> <span class="number">00</span>:<span class="number">06</span>:<span class="number">00</span>    <span class="number">6</span></span><br><span class="line"><span class="number">2000</span><span class="number">-01</span><span class="number">-01</span> <span class="number">00</span>:<span class="number">07</span>:<span class="number">00</span>    <span class="number">7</span></span><br><span class="line"><span class="number">2000</span><span class="number">-01</span><span class="number">-01</span> <span class="number">00</span>:<span class="number">08</span>:<span class="number">00</span>    <span class="number">8</span></span><br><span class="line">Freq: T, dtype: int64</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>series.resample(<span class="string">'3T'</span>).sum()</span><br><span class="line"><span class="number">2000</span><span class="number">-01</span><span class="number">-01</span> <span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span>     <span class="number">3</span></span><br><span class="line"><span class="number">2000</span><span class="number">-01</span><span class="number">-01</span> <span class="number">00</span>:<span class="number">03</span>:<span class="number">00</span>    <span class="number">12</span></span><br><span class="line"><span class="number">2000</span><span class="number">-01</span><span class="number">-01</span> <span class="number">00</span>:<span class="number">06</span>:<span class="number">00</span>    <span class="number">21</span></span><br><span class="line">Freq: <span class="number">3</span>T, dtype: int64</span><br></pre></td></tr></table></figure><p>设置 <code>label=&#39;right&#39;</code>，即每个索引 index 会使用靠右侧（较大值）的标签：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>index = pd.date_range(<span class="string">'1/1/2000'</span>, periods=<span class="number">9</span>, freq=<span class="string">'T'</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>series = pd.Series(range(<span class="number">9</span>), index=index)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>series</span><br><span class="line"><span class="number">2000</span><span class="number">-01</span><span class="number">-01</span> <span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span>    <span class="number">0</span></span><br><span class="line"><span class="number">2000</span><span class="number">-01</span><span class="number">-01</span> <span class="number">00</span>:<span class="number">01</span>:<span class="number">00</span>    <span class="number">1</span></span><br><span class="line"><span class="number">2000</span><span class="number">-01</span><span class="number">-01</span> <span class="number">00</span>:<span class="number">02</span>:<span class="number">00</span>    <span class="number">2</span></span><br><span class="line"><span class="number">2000</span><span class="number">-01</span><span class="number">-01</span> <span class="number">00</span>:<span class="number">03</span>:<span class="number">00</span>    <span class="number">3</span></span><br><span class="line"><span class="number">2000</span><span class="number">-01</span><span class="number">-01</span> <span class="number">00</span>:<span class="number">04</span>:<span class="number">00</span>    <span class="number">4</span></span><br><span class="line"><span class="number">2000</span><span class="number">-01</span><span class="number">-01</span> <span class="number">00</span>:<span class="number">05</span>:<span class="number">00</span>    <span class="number">5</span></span><br><span class="line"><span class="number">2000</span><span class="number">-01</span><span class="number">-01</span> <span class="number">00</span>:<span class="number">06</span>:<span class="number">00</span>    <span class="number">6</span></span><br><span class="line"><span class="number">2000</span><span class="number">-01</span><span class="number">-01</span> <span class="number">00</span>:<span class="number">07</span>:<span class="number">00</span>    <span class="number">7</span></span><br><span class="line"><span class="number">2000</span><span class="number">-01</span><span class="number">-01</span> <span class="number">00</span>:<span class="number">08</span>:<span class="number">00</span>    <span class="number">8</span></span><br><span class="line">Freq: T, dtype: int64</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>series.resample(<span class="string">'3T'</span>, label=<span class="string">'right'</span>).sum()</span><br><span class="line"><span class="number">2000</span><span class="number">-01</span><span class="number">-01</span> <span class="number">00</span>:<span class="number">03</span>:<span class="number">00</span>     <span class="number">3</span></span><br><span class="line"><span class="number">2000</span><span class="number">-01</span><span class="number">-01</span> <span class="number">00</span>:<span class="number">06</span>:<span class="number">00</span>    <span class="number">12</span></span><br><span class="line"><span class="number">2000</span><span class="number">-01</span><span class="number">-01</span> <span class="number">00</span>:<span class="number">09</span>:<span class="number">00</span>    <span class="number">21</span></span><br><span class="line">Freq: <span class="number">3</span>T, dtype: int64</span><br></pre></td></tr></table></figure><p>设置 <code>closed=&#39;right&#39;</code>，即结果中会包含原数据中最右侧（较大）的值：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>index = pd.date_range(<span class="string">'1/1/2000'</span>, periods=<span class="number">9</span>, freq=<span class="string">'T'</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>series = pd.Series(range(<span class="number">9</span>), index=index)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>series</span><br><span class="line"><span class="number">2000</span><span class="number">-01</span><span class="number">-01</span> <span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span>    <span class="number">0</span></span><br><span class="line"><span class="number">2000</span><span class="number">-01</span><span class="number">-01</span> <span class="number">00</span>:<span class="number">01</span>:<span class="number">00</span>    <span class="number">1</span></span><br><span class="line"><span class="number">2000</span><span class="number">-01</span><span class="number">-01</span> <span class="number">00</span>:<span class="number">02</span>:<span class="number">00</span>    <span class="number">2</span></span><br><span class="line"><span class="number">2000</span><span class="number">-01</span><span class="number">-01</span> <span class="number">00</span>:<span class="number">03</span>:<span class="number">00</span>    <span class="number">3</span></span><br><span class="line"><span class="number">2000</span><span class="number">-01</span><span class="number">-01</span> <span class="number">00</span>:<span class="number">04</span>:<span class="number">00</span>    <span class="number">4</span></span><br><span class="line"><span class="number">2000</span><span class="number">-01</span><span class="number">-01</span> <span class="number">00</span>:<span class="number">05</span>:<span class="number">00</span>    <span class="number">5</span></span><br><span class="line"><span class="number">2000</span><span class="number">-01</span><span class="number">-01</span> <span class="number">00</span>:<span class="number">06</span>:<span class="number">00</span>    <span class="number">6</span></span><br><span class="line"><span class="number">2000</span><span class="number">-01</span><span class="number">-01</span> <span class="number">00</span>:<span class="number">07</span>:<span class="number">00</span>    <span class="number">7</span></span><br><span class="line"><span class="number">2000</span><span class="number">-01</span><span class="number">-01</span> <span class="number">00</span>:<span class="number">08</span>:<span class="number">00</span>    <span class="number">8</span></span><br><span class="line">Freq: T, dtype: int64</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>series.resample(<span class="string">'3T'</span>, label=<span class="string">'right'</span>, closed=<span class="string">'right'</span>).sum()</span><br><span class="line"><span class="number">2000</span><span class="number">-01</span><span class="number">-01</span> <span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span>     <span class="number">0</span></span><br><span class="line"><span class="number">2000</span><span class="number">-01</span><span class="number">-01</span> <span class="number">00</span>:<span class="number">03</span>:<span class="number">00</span>     <span class="number">6</span></span><br><span class="line"><span class="number">2000</span><span class="number">-01</span><span class="number">-01</span> <span class="number">00</span>:<span class="number">06</span>:<span class="number">00</span>    <span class="number">15</span></span><br><span class="line"><span class="number">2000</span><span class="number">-01</span><span class="number">-01</span> <span class="number">00</span>:<span class="number">09</span>:<span class="number">00</span>    <span class="number">15</span></span><br><span class="line">Freq: <span class="number">3</span>T, dtype: int64</span><br></pre></td></tr></table></figure><p>以下示例将序列重采样到30秒的频率，<code>asfreq()[0:5]</code> 用于选择前5行数据：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>index = pd.date_range(<span class="string">'1/1/2000'</span>, periods=<span class="number">9</span>, freq=<span class="string">'T'</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>series = pd.Series(range(<span class="number">9</span>), index=index)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>series</span><br><span class="line"><span class="number">2000</span><span class="number">-01</span><span class="number">-01</span> <span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span>    <span class="number">0</span></span><br><span class="line"><span class="number">2000</span><span class="number">-01</span><span class="number">-01</span> <span class="number">00</span>:<span class="number">01</span>:<span class="number">00</span>    <span class="number">1</span></span><br><span class="line"><span class="number">2000</span><span class="number">-01</span><span class="number">-01</span> <span class="number">00</span>:<span class="number">02</span>:<span class="number">00</span>    <span class="number">2</span></span><br><span class="line"><span class="number">2000</span><span class="number">-01</span><span class="number">-01</span> <span class="number">00</span>:<span class="number">03</span>:<span class="number">00</span>    <span class="number">3</span></span><br><span class="line"><span class="number">2000</span><span class="number">-01</span><span class="number">-01</span> <span class="number">00</span>:<span class="number">04</span>:<span class="number">00</span>    <span class="number">4</span></span><br><span class="line"><span class="number">2000</span><span class="number">-01</span><span class="number">-01</span> <span class="number">00</span>:<span class="number">05</span>:<span class="number">00</span>    <span class="number">5</span></span><br><span class="line"><span class="number">2000</span><span class="number">-01</span><span class="number">-01</span> <span class="number">00</span>:<span class="number">06</span>:<span class="number">00</span>    <span class="number">6</span></span><br><span class="line"><span class="number">2000</span><span class="number">-01</span><span class="number">-01</span> <span class="number">00</span>:<span class="number">07</span>:<span class="number">00</span>    <span class="number">7</span></span><br><span class="line"><span class="number">2000</span><span class="number">-01</span><span class="number">-01</span> <span class="number">00</span>:<span class="number">08</span>:<span class="number">00</span>    <span class="number">8</span></span><br><span class="line">Freq: T, dtype: int64</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>series.resample(<span class="string">'30S'</span>).asfreq()[<span class="number">0</span>:<span class="number">5</span>]</span><br><span class="line"><span class="number">2000</span><span class="number">-01</span><span class="number">-01</span> <span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span>    <span class="number">0.0</span></span><br><span class="line"><span class="number">2000</span><span class="number">-01</span><span class="number">-01</span> <span class="number">00</span>:<span class="number">00</span>:<span class="number">30</span>    NaN</span><br><span class="line"><span class="number">2000</span><span class="number">-01</span><span class="number">-01</span> <span class="number">00</span>:<span class="number">01</span>:<span class="number">00</span>    <span class="number">1.0</span></span><br><span class="line"><span class="number">2000</span><span class="number">-01</span><span class="number">-01</span> <span class="number">00</span>:<span class="number">01</span>:<span class="number">30</span>    NaN</span><br><span class="line"><span class="number">2000</span><span class="number">-01</span><span class="number">-01</span> <span class="number">00</span>:<span class="number">02</span>:<span class="number">00</span>    <span class="number">2.0</span></span><br><span class="line">Freq: <span class="number">30</span>S, dtype: float64</span><br></pre></td></tr></table></figure><p>使用 <code>pad</code> 方法向后填充缺失值（NaN）：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>index = pd.date_range(<span class="string">'1/1/2000'</span>, periods=<span class="number">9</span>, freq=<span class="string">'T'</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>series = pd.Series(range(<span class="number">9</span>), index=index)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>series</span><br><span class="line"><span class="number">2000</span><span class="number">-01</span><span class="number">-01</span> <span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span>    <span class="number">0</span></span><br><span class="line"><span class="number">2000</span><span class="number">-01</span><span class="number">-01</span> <span class="number">00</span>:<span class="number">01</span>:<span class="number">00</span>    <span class="number">1</span></span><br><span class="line"><span class="number">2000</span><span class="number">-01</span><span class="number">-01</span> <span class="number">00</span>:<span class="number">02</span>:<span class="number">00</span>    <span class="number">2</span></span><br><span class="line"><span class="number">2000</span><span class="number">-01</span><span class="number">-01</span> <span class="number">00</span>:<span class="number">03</span>:<span class="number">00</span>    <span class="number">3</span></span><br><span class="line"><span class="number">2000</span><span class="number">-01</span><span class="number">-01</span> <span class="number">00</span>:<span class="number">04</span>:<span class="number">00</span>    <span class="number">4</span></span><br><span class="line"><span class="number">2000</span><span class="number">-01</span><span class="number">-01</span> <span class="number">00</span>:<span class="number">05</span>:<span class="number">00</span>    <span class="number">5</span></span><br><span class="line"><span class="number">2000</span><span class="number">-01</span><span class="number">-01</span> <span class="number">00</span>:<span class="number">06</span>:<span class="number">00</span>    <span class="number">6</span></span><br><span class="line"><span class="number">2000</span><span class="number">-01</span><span class="number">-01</span> <span class="number">00</span>:<span class="number">07</span>:<span class="number">00</span>    <span class="number">7</span></span><br><span class="line"><span class="number">2000</span><span class="number">-01</span><span class="number">-01</span> <span class="number">00</span>:<span class="number">08</span>:<span class="number">00</span>    <span class="number">8</span></span><br><span class="line">Freq: T, dtype: int64</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>series.resample(<span class="string">'30S'</span>).pad()[<span class="number">0</span>:<span class="number">5</span>]</span><br><span class="line"><span class="number">2000</span><span class="number">-01</span><span class="number">-01</span> <span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span>    <span class="number">0</span></span><br><span class="line"><span class="number">2000</span><span class="number">-01</span><span class="number">-01</span> <span class="number">00</span>:<span class="number">00</span>:<span class="number">30</span>    <span class="number">0</span></span><br><span class="line"><span class="number">2000</span><span class="number">-01</span><span class="number">-01</span> <span class="number">00</span>:<span class="number">01</span>:<span class="number">00</span>    <span class="number">1</span></span><br><span class="line"><span class="number">2000</span><span class="number">-01</span><span class="number">-01</span> <span class="number">00</span>:<span class="number">01</span>:<span class="number">30</span>    <span class="number">1</span></span><br><span class="line"><span class="number">2000</span><span class="number">-01</span><span class="number">-01</span> <span class="number">00</span>:<span class="number">02</span>:<span class="number">00</span>    <span class="number">2</span></span><br><span class="line">Freq: <span class="number">30</span>S, dtype: int64</span><br></pre></td></tr></table></figure><p>使用 <code>bfill</code> 方法向前填充缺失值（NaN）：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>index = pd.date_range(<span class="string">'1/1/2000'</span>, periods=<span class="number">9</span>, freq=<span class="string">'T'</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>series = pd.Series(range(<span class="number">9</span>), index=index)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>series</span><br><span class="line"><span class="number">2000</span><span class="number">-01</span><span class="number">-01</span> <span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span>    <span class="number">0</span></span><br><span class="line"><span class="number">2000</span><span class="number">-01</span><span class="number">-01</span> <span class="number">00</span>:<span class="number">01</span>:<span class="number">00</span>    <span class="number">1</span></span><br><span class="line"><span class="number">2000</span><span class="number">-01</span><span class="number">-01</span> <span class="number">00</span>:<span class="number">02</span>:<span class="number">00</span>    <span class="number">2</span></span><br><span class="line"><span class="number">2000</span><span class="number">-01</span><span class="number">-01</span> <span class="number">00</span>:<span class="number">03</span>:<span class="number">00</span>    <span class="number">3</span></span><br><span class="line"><span class="number">2000</span><span class="number">-01</span><span class="number">-01</span> <span class="number">00</span>:<span class="number">04</span>:<span class="number">00</span>    <span class="number">4</span></span><br><span class="line"><span class="number">2000</span><span class="number">-01</span><span class="number">-01</span> <span class="number">00</span>:<span class="number">05</span>:<span class="number">00</span>    <span class="number">5</span></span><br><span class="line"><span class="number">2000</span><span class="number">-01</span><span class="number">-01</span> <span class="number">00</span>:<span class="number">06</span>:<span class="number">00</span>    <span class="number">6</span></span><br><span class="line"><span class="number">2000</span><span class="number">-01</span><span class="number">-01</span> <span class="number">00</span>:<span class="number">07</span>:<span class="number">00</span>    <span class="number">7</span></span><br><span class="line"><span class="number">2000</span><span class="number">-01</span><span class="number">-01</span> <span class="number">00</span>:<span class="number">08</span>:<span class="number">00</span>    <span class="number">8</span></span><br><span class="line">Freq: T, dtype: int64</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>series.resample(<span class="string">'30S'</span>).bfill()[<span class="number">0</span>:<span class="number">5</span>]</span><br><span class="line"><span class="number">2000</span><span class="number">-01</span><span class="number">-01</span> <span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span>    <span class="number">0</span></span><br><span class="line"><span class="number">2000</span><span class="number">-01</span><span class="number">-01</span> <span class="number">00</span>:<span class="number">00</span>:<span class="number">30</span>    <span class="number">1</span></span><br><span class="line"><span class="number">2000</span><span class="number">-01</span><span class="number">-01</span> <span class="number">00</span>:<span class="number">01</span>:<span class="number">00</span>    <span class="number">1</span></span><br><span class="line"><span class="number">2000</span><span class="number">-01</span><span class="number">-01</span> <span class="number">00</span>:<span class="number">01</span>:<span class="number">30</span>    <span class="number">2</span></span><br><span class="line"><span class="number">2000</span><span class="number">-01</span><span class="number">-01</span> <span class="number">00</span>:<span class="number">02</span>:<span class="number">00</span>    <span class="number">2</span></span><br><span class="line">Freq: <span class="number">30</span>S, dtype: int64</span><br></pre></td></tr></table></figure><p>通过 <code>apply</code> 方法传递自定义函数：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>index = pd.date_range(<span class="string">'1/1/2000'</span>, periods=<span class="number">9</span>, freq=<span class="string">'T'</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>series = pd.Series(range(<span class="number">9</span>), index=index)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>series</span><br><span class="line"><span class="number">2000</span><span class="number">-01</span><span class="number">-01</span> <span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span>    <span class="number">0</span></span><br><span class="line"><span class="number">2000</span><span class="number">-01</span><span class="number">-01</span> <span class="number">00</span>:<span class="number">01</span>:<span class="number">00</span>    <span class="number">1</span></span><br><span class="line"><span class="number">2000</span><span class="number">-01</span><span class="number">-01</span> <span class="number">00</span>:<span class="number">02</span>:<span class="number">00</span>    <span class="number">2</span></span><br><span class="line"><span class="number">2000</span><span class="number">-01</span><span class="number">-01</span> <span class="number">00</span>:<span class="number">03</span>:<span class="number">00</span>    <span class="number">3</span></span><br><span class="line"><span class="number">2000</span><span class="number">-01</span><span class="number">-01</span> <span class="number">00</span>:<span class="number">04</span>:<span class="number">00</span>    <span class="number">4</span></span><br><span class="line"><span class="number">2000</span><span class="number">-01</span><span class="number">-01</span> <span class="number">00</span>:<span class="number">05</span>:<span class="number">00</span>    <span class="number">5</span></span><br><span class="line"><span class="number">2000</span><span class="number">-01</span><span class="number">-01</span> <span class="number">00</span>:<span class="number">06</span>:<span class="number">00</span>    <span class="number">6</span></span><br><span class="line"><span class="number">2000</span><span class="number">-01</span><span class="number">-01</span> <span class="number">00</span>:<span class="number">07</span>:<span class="number">00</span>    <span class="number">7</span></span><br><span class="line"><span class="number">2000</span><span class="number">-01</span><span class="number">-01</span> <span class="number">00</span>:<span class="number">08</span>:<span class="number">00</span>    <span class="number">8</span></span><br><span class="line">Freq: T, dtype: int64</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="function"><span class="keyword">def</span> <span class="title">custom_resampler</span><span class="params">(array_like)</span>:</span></span><br><span class="line"><span class="keyword">return</span> np.sum(array_like) + <span class="number">5</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>series.resample(<span class="string">'3T'</span>).apply(custom_resampler)</span><br><span class="line"><span class="number">2000</span><span class="number">-01</span><span class="number">-01</span> <span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span>     <span class="number">8</span></span><br><span class="line"><span class="number">2000</span><span class="number">-01</span><span class="number">-01</span> <span class="number">00</span>:<span class="number">03</span>:<span class="number">00</span>    <span class="number">17</span></span><br><span class="line"><span class="number">2000</span><span class="number">-01</span><span class="number">-01</span> <span class="number">00</span>:<span class="number">06</span>:<span class="number">00</span>    <span class="number">26</span></span><br><span class="line">Freq: <span class="number">3</span>T, dtype: int64</span><br></pre></td></tr></table></figure><p>convention 参数的应用：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s = pd.Series([<span class="number">1</span>, <span class="number">2</span>], index=pd.period_range(<span class="string">'2012-01-01'</span>, freq=<span class="string">'A'</span>, periods=<span class="number">2</span>))</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s</span><br><span class="line"><span class="number">2012</span>    <span class="number">1</span></span><br><span class="line"><span class="number">2013</span>    <span class="number">2</span></span><br><span class="line">Freq: A-DEC, dtype: int64</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s.resample(<span class="string">'Q'</span>, convention=<span class="string">'start'</span>).asfreq()</span><br><span class="line"><span class="number">2012</span>Q1    <span class="number">1.0</span></span><br><span class="line"><span class="number">2012</span>Q2    NaN</span><br><span class="line"><span class="number">2012</span>Q3    NaN</span><br><span class="line"><span class="number">2012</span>Q4    NaN</span><br><span class="line"><span class="number">2013</span>Q1    <span class="number">2.0</span></span><br><span class="line"><span class="number">2013</span>Q2    NaN</span><br><span class="line"><span class="number">2013</span>Q3    NaN</span><br><span class="line"><span class="number">2013</span>Q4    NaN</span><br><span class="line">Freq: Q-DEC, dtype: float64</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s.resample(<span class="string">'Q'</span>, convention=<span class="string">'end'</span>).asfreq()</span><br><span class="line"><span class="number">2012</span>Q4    <span class="number">1.0</span></span><br><span class="line"><span class="number">2013</span>Q1    NaN</span><br><span class="line"><span class="number">2013</span>Q2    NaN</span><br><span class="line"><span class="number">2013</span>Q3    NaN</span><br><span class="line"><span class="number">2013</span>Q4    <span class="number">2.0</span></span><br><span class="line">Freq: Q-DEC, dtype: float64</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>q = pd.Series([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>], index=pd.period_range(<span class="string">'2018-01-01'</span>, freq=<span class="string">'Q'</span>, periods=<span class="number">4</span>))</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>q</span><br><span class="line"><span class="number">2018</span>Q1    <span class="number">1</span></span><br><span class="line"><span class="number">2018</span>Q2    <span class="number">2</span></span><br><span class="line"><span class="number">2018</span>Q3    <span class="number">3</span></span><br><span class="line"><span class="number">2018</span>Q4    <span class="number">4</span></span><br><span class="line">Freq: Q-DEC, dtype: int64</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>q.resample(<span class="string">'M'</span>, convention=<span class="string">'end'</span>).asfreq()</span><br><span class="line"><span class="number">2018</span><span class="number">-03</span>    <span class="number">1.0</span></span><br><span class="line"><span class="number">2018</span><span class="number">-04</span>    NaN</span><br><span class="line"><span class="number">2018</span><span class="number">-05</span>    NaN</span><br><span class="line"><span class="number">2018</span><span class="number">-06</span>    <span class="number">2.0</span></span><br><span class="line"><span class="number">2018</span><span class="number">-07</span>    NaN</span><br><span class="line"><span class="number">2018</span><span class="number">-08</span>    NaN</span><br><span class="line"><span class="number">2018</span><span class="number">-09</span>    <span class="number">3.0</span></span><br><span class="line"><span class="number">2018</span><span class="number">-10</span>    NaN</span><br><span class="line"><span class="number">2018</span><span class="number">-11</span>    NaN</span><br><span class="line"><span class="number">2018</span><span class="number">-12</span>    <span class="number">4.0</span></span><br><span class="line">Freq: M, dtype: float64</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>q.resample(<span class="string">'M'</span>, convention=<span class="string">'start'</span>).asfreq()</span><br><span class="line"><span class="number">2018</span><span class="number">-01</span>    <span class="number">1.0</span></span><br><span class="line"><span class="number">2018</span><span class="number">-02</span>    NaN</span><br><span class="line"><span class="number">2018</span><span class="number">-03</span>    NaN</span><br><span class="line"><span class="number">2018</span><span class="number">-04</span>    <span class="number">2.0</span></span><br><span class="line"><span class="number">2018</span><span class="number">-05</span>    NaN</span><br><span class="line"><span class="number">2018</span><span class="number">-06</span>    NaN</span><br><span class="line"><span class="number">2018</span><span class="number">-07</span>    <span class="number">3.0</span></span><br><span class="line"><span class="number">2018</span><span class="number">-08</span>    NaN</span><br><span class="line"><span class="number">2018</span><span class="number">-09</span>    NaN</span><br><span class="line"><span class="number">2018</span><span class="number">-10</span>    <span class="number">4.0</span></span><br><span class="line"><span class="number">2018</span><span class="number">-11</span>    NaN</span><br><span class="line"><span class="number">2018</span><span class="number">-12</span>    NaN</span><br><span class="line">Freq: M, dtype: float64</span><br></pre></td></tr></table></figure><p>对于 DataFrame 对象，可以使用关键字 on 来指定原数据中的某列为重采样后数据的行索引：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>d = dict(&#123;<span class="string">'price'</span>: [<span class="number">10</span>, <span class="number">11</span>, <span class="number">9</span>, <span class="number">13</span>, <span class="number">14</span>, <span class="number">18</span>, <span class="number">17</span>, <span class="number">19</span>],</span><br><span class="line">            <span class="string">'volume'</span>: [<span class="number">50</span>, <span class="number">60</span>, <span class="number">40</span>, <span class="number">100</span>, <span class="number">50</span>, <span class="number">100</span>, <span class="number">40</span>, <span class="number">50</span>]&#125;)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>df = pd.DataFrame(d)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>df[<span class="string">'week_starting'</span>] = pd.date_range(<span class="string">'01/01/2018'</span>, periods=<span class="number">8</span>, freq=<span class="string">'W'</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>df</span><br><span class="line">   price  volume week_starting</span><br><span class="line"><span class="number">0</span>     <span class="number">10</span>      <span class="number">50</span>    <span class="number">2018</span><span class="number">-01</span><span class="number">-07</span></span><br><span class="line"><span class="number">1</span>     <span class="number">11</span>      <span class="number">60</span>    <span class="number">2018</span><span class="number">-01</span><span class="number">-14</span></span><br><span class="line"><span class="number">2</span>      <span class="number">9</span>      <span class="number">40</span>    <span class="number">2018</span><span class="number">-01</span><span class="number">-21</span></span><br><span class="line"><span class="number">3</span>     <span class="number">13</span>     <span class="number">100</span>    <span class="number">2018</span><span class="number">-01</span><span class="number">-28</span></span><br><span class="line"><span class="number">4</span>     <span class="number">14</span>      <span class="number">50</span>    <span class="number">2018</span><span class="number">-02</span><span class="number">-04</span></span><br><span class="line"><span class="number">5</span>     <span class="number">18</span>     <span class="number">100</span>    <span class="number">2018</span><span class="number">-02</span><span class="number">-11</span></span><br><span class="line"><span class="number">6</span>     <span class="number">17</span>      <span class="number">40</span>    <span class="number">2018</span><span class="number">-02</span><span class="number">-18</span></span><br><span class="line"><span class="number">7</span>     <span class="number">19</span>      <span class="number">50</span>    <span class="number">2018</span><span class="number">-02</span><span class="number">-25</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>df.resample(<span class="string">'M'</span>, on=<span class="string">'week_starting'</span>).mean()</span><br><span class="line">               price  volume</span><br><span class="line">week_starting               </span><br><span class="line"><span class="number">2018</span><span class="number">-01</span><span class="number">-31</span>     <span class="number">10.75</span>    <span class="number">62.5</span></span><br><span class="line"><span class="number">2018</span><span class="number">-02</span><span class="number">-28</span>     <span class="number">17.00</span>    <span class="number">60.0</span></span><br></pre></td></tr></table></figure><p>对于具有层级索引（MultiIndex）的 DataFrame 对象，可以使用关键字 <code>level</code> 来指定需要在哪个级别上进行重新采样：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>days = pd.date_range(<span class="string">'1/1/2000'</span>, periods=<span class="number">4</span>, freq=<span class="string">'D'</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>d2 = dict(&#123;<span class="string">'price'</span>: [<span class="number">10</span>, <span class="number">11</span>, <span class="number">9</span>, <span class="number">13</span>, <span class="number">14</span>, <span class="number">18</span>, <span class="number">17</span>, <span class="number">19</span>],</span><br><span class="line">              <span class="string">'volume'</span>: [<span class="number">50</span>, <span class="number">60</span>, <span class="number">40</span>, <span class="number">100</span>, <span class="number">50</span>, <span class="number">100</span>, <span class="number">40</span>, <span class="number">50</span>]&#125;)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>df2 = pd.DataFrame(d2, index=pd.MultiIndex.from_product([days, [<span class="string">'morning'</span>, <span class="string">'afternoon'</span>]]))</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>df2</span><br><span class="line">                      price  volume</span><br><span class="line"><span class="number">2000</span><span class="number">-01</span><span class="number">-01</span> morning       <span class="number">10</span>      <span class="number">50</span></span><br><span class="line">           afternoon     <span class="number">11</span>      <span class="number">60</span></span><br><span class="line"><span class="number">2000</span><span class="number">-01</span><span class="number">-02</span> morning        <span class="number">9</span>      <span class="number">40</span></span><br><span class="line">           afternoon     <span class="number">13</span>     <span class="number">100</span></span><br><span class="line"><span class="number">2000</span><span class="number">-01</span><span class="number">-03</span> morning       <span class="number">14</span>      <span class="number">50</span></span><br><span class="line">           afternoon     <span class="number">18</span>     <span class="number">100</span></span><br><span class="line"><span class="number">2000</span><span class="number">-01</span><span class="number">-04</span> morning       <span class="number">17</span>      <span class="number">40</span></span><br><span class="line">           afternoon     <span class="number">19</span>      <span class="number">50</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>df2.resample(<span class="string">'D'</span>, level=<span class="number">0</span>).sum()</span><br><span class="line">            price  volume</span><br><span class="line"><span class="number">2000</span><span class="number">-01</span><span class="number">-01</span>     <span class="number">21</span>     <span class="number">110</span></span><br><span class="line"><span class="number">2000</span><span class="number">-01</span><span class="number">-02</span>     <span class="number">22</span>     <span class="number">140</span></span><br><span class="line"><span class="number">2000</span><span class="number">-01</span><span class="number">-03</span>     <span class="number">32</span>     <span class="number">150</span></span><br><span class="line"><span class="number">2000</span><span class="number">-01</span><span class="number">-04</span>     <span class="number">36</span>      <span class="number">90</span></span><br></pre></td></tr></table></figure><hr><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">这里是一段防爬虫文本，请读者忽略。</span></span><br><span class="line"><span class="string">本文原创首发于</span> <span class="string">CSDN，作者</span> <span class="string">TRHX。</span></span><br><span class="line"><span class="string">博客首页：https://itrhx.blog.csdn.net/</span></span><br><span class="line"><span class="string">本文链接：https://itrhx.blog.csdn.net/article/details/106947061</span></span><br><span class="line"><span class="string">未经授权，禁止转载！恶意转载，后果自负！尊重原创，远离剽窃！</span></span><br></pre></td></tr></table></figure><hr>]]></content>
    
    <summary type="html">
    
      Python 数据分析三剑客之 Pandas（九）：时间序列。
    
    </summary>
    
      <category term="Python 数据分析" scheme="https://www.itrhx.com/categories/Python-%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/"/>
    
      <category term="Pandas" scheme="https://www.itrhx.com/categories/Python-%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/Pandas/"/>
    
    
      <category term="Pandas" scheme="https://www.itrhx.com/tags/Pandas/"/>
    
      <category term="时间序列" scheme="https://www.itrhx.com/tags/%E6%97%B6%E9%97%B4%E5%BA%8F%E5%88%97/"/>
    
  </entry>
  
  <entry>
    <title>Python 数据分析三剑客之 Pandas（八）：数据重塑/重复数据处理/数据替换</title>
    <link href="https://www.itrhx.com/2020/06/22/A86-Pandas-08/"/>
    <id>https://www.itrhx.com/2020/06/22/A86-Pandas-08/</id>
    <published>2020-06-22T13:01:54.429Z</published>
    <updated>2020-07-06T13:45:25.429Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>Pandas 系列文章：</p><ul><li><a href="https://www.itrhx.com/2020/06/11/A79-Pandas-01/">Python 数据分析三剑客之 Pandas（一）：认识 Pandas 及其 Series、DataFrame 对象</a></li><li><a href="https://www.itrhx.com/2020/06/13/A80-Pandas-02/">Python 数据分析三剑客之 Pandas（二）：Index 索引对象以及各种索引操作</a></li><li><a href="https://www.itrhx.com/2020/06/14/A81-Pandas-03/">Python 数据分析三剑客之 Pandas（三）：算术运算与缺失值的处理</a></li><li><a href="https://www.itrhx.com/2020/06/15/A82-Pandas-04/">Python 数据分析三剑客之 Pandas（四）：函数应用、映射、排序和层级索引</a></li><li><a href="https://www.itrhx.com/2020/06/16/A83-Pandas-05/">Python 数据分析三剑客之 Pandas（五）：统计计算与统计描述</a></li><li><a href="https://www.itrhx.com/2020/06/17/A84-Pandas-06/">Python 数据分析三剑客之 Pandas（六）：GroupBy 数据分裂、应用与合并</a></li><li><a href="https://www.itrhx.com/2020/06/21/A85-Pandas-07/">Python 数据分析三剑客之 Pandas（七）：合并数据集</a></li><li><a href="https://www.itrhx.com/2020/06/22/A86-Pandas-08/">Python 数据分析三剑客之 Pandas（八）：数据重塑、重复数据处理与数据替换</a></li><li><a href="https://www.itrhx.com/2020/06/25/A87-Pandas-09/">Python 数据分析三剑客之 Pandas（九）：时间序列</a></li><li><a href="https://www.itrhx.com/2020/06/26/A88-Pandas-10/">Python 数据分析三剑客之 Pandas（十）：数据读写</a></li></ul><hr><p>专栏：</p><p>【<a href="https://www.itrhx.com/categories/Python-%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/NumPy/">NumPy 专栏</a>】【<a href="https://www.itrhx.com/categories/Python-%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/Pandas/">Pandas 专栏</a>】【<a href="https://www.itrhx.com/categories/Python-%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/Matplotlib/">Matplotlib 专栏</a>】</p><p>推荐学习资料与网站：</p><p>【<a href="https://www.numpy.org.cn/" target="_blank" rel="noopener">NumPy 中文网</a>】【<a href="https://www.pypandas.cn/" target="_blank" rel="noopener">Pandas 中文网</a>】【<a href="https://www.matplotlib.org.cn/" target="_blank" rel="noopener">Matplotlib 中文网</a>】【<a href="https://github.com/TRHX/Python-quick-reference-table" target="_blank" rel="noopener">NumPy、Matplotlib、Pandas 速查表</a>】</p><hr><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">这里是一段防爬虫文本，请读者忽略。</span></span><br><span class="line"><span class="string">本文原创首发于</span> <span class="string">CSDN，作者</span> <span class="string">TRHX。</span></span><br><span class="line"><span class="string">博客首页：https://itrhx.blog.csdn.net/</span></span><br><span class="line"><span class="string">本文链接：https://itrhx.blog.csdn.net/article/details/106900748</span></span><br><span class="line"><span class="string">未经授权，禁止转载！恶意转载，后果自负！尊重原创，远离剽窃！</span></span><br></pre></td></tr></table></figure><hr><h2 id="【01x00】数据重塑"><a href="#【01x00】数据重塑" class="headerlink" title="【01x00】数据重塑"></a><font color="#FF0000">【01x00】数据重塑</font></h2><p>有许多用于重新排列表格型数据的基础运算。这些函数也称作重塑（reshape）或轴向旋转（pivot）运算。重塑层次化索引主要有以下两个方法：</p><ul><li><p><code>stack</code>：将数据的列转换成行；</p></li><li><p><code>unstack</code>：将数据的行转换成列。</p></li></ul><h3 id="【01x01】stack"><a href="#【01x01】stack" class="headerlink" title="【01x01】stack"></a><font color="#4876FF">【01x01】stack</font></h3><p><code>stack</code> 方法用于将数据的列转换成为行；</p><p>基本语法：<code>DataFrame.stack(self, level=-1, dropna=True)</code></p><p>官方文档：<a href="https://pandas.pydata.org/docs/reference/api/pandas.DataFrame.stack.html" target="_blank" rel="noopener">https://pandas.pydata.org/docs/reference/api/pandas.DataFrame.stack.html</a></p><table><thead><tr><th>参数</th><th>描述</th></tr></thead><tbody><tr><td>level</td><td>从列转换到行，指定不同层级的列索引或列标签、由列索引或列标签组成的数组，默认-1</td></tr><tr><td>dropna</td><td>bool 类型，是否删除重塑后数据中所有值为 NaN 的行，默认 True</td></tr></tbody></table><p>单层列（Single level columns）：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>obj = pd.DataFrame([[<span class="number">0</span>, <span class="number">1</span>], [<span class="number">2</span>, <span class="number">3</span>]], index=[<span class="string">'cat'</span>, <span class="string">'dog'</span>], columns=[<span class="string">'weight'</span>, <span class="string">'height'</span>])</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>obj</span><br><span class="line">     weight  height</span><br><span class="line">cat       <span class="number">0</span>       <span class="number">1</span></span><br><span class="line">dog       <span class="number">2</span>       <span class="number">3</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>obj.stack()</span><br><span class="line">cat  weight    <span class="number">0</span></span><br><span class="line">     height    <span class="number">1</span></span><br><span class="line">dog  weight    <span class="number">2</span></span><br><span class="line">     height    <span class="number">3</span></span><br><span class="line">dtype: int64</span><br></pre></td></tr></table></figure><p>多层列（Multi level columns）：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>multicol = pd.MultiIndex.from_tuples([(<span class="string">'weight'</span>, <span class="string">'kg'</span>), (<span class="string">'weight'</span>, <span class="string">'pounds'</span>)])</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>obj = pd.DataFrame([[<span class="number">1</span>, <span class="number">2</span>], [<span class="number">2</span>, <span class="number">4</span>]], index=[<span class="string">'cat'</span>, <span class="string">'dog'</span>], columns=multicol)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>obj</span><br><span class="line">    weight       </span><br><span class="line">        kg pounds</span><br><span class="line">cat      <span class="number">1</span>      <span class="number">2</span></span><br><span class="line">dog      <span class="number">2</span>      <span class="number">4</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>obj.stack()</span><br><span class="line">            weight</span><br><span class="line">cat kg           <span class="number">1</span></span><br><span class="line">    pounds       <span class="number">2</span></span><br><span class="line">dog kg           <span class="number">2</span></span><br><span class="line">    pounds       <span class="number">4</span></span><br></pre></td></tr></table></figure><p>缺失值填充：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>multicol = pd.MultiIndex.from_tuples([(<span class="string">'weight'</span>, <span class="string">'kg'</span>), (<span class="string">'height'</span>, <span class="string">'m'</span>)])</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>obj = pd.DataFrame([[<span class="number">1.0</span>, <span class="number">2.0</span>], [<span class="number">3.0</span>, <span class="number">4.0</span>]], index=[<span class="string">'cat'</span>, <span class="string">'dog'</span>], columns=multicol)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>obj</span><br><span class="line">    weight height</span><br><span class="line">        kg      m</span><br><span class="line">cat    <span class="number">1.0</span>    <span class="number">2.0</span></span><br><span class="line">dog    <span class="number">3.0</span>    <span class="number">4.0</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>obj.stack()</span><br><span class="line">        height  weight</span><br><span class="line">cat kg     NaN     <span class="number">1.0</span></span><br><span class="line">    m      <span class="number">2.0</span>     NaN</span><br><span class="line">dog kg     NaN     <span class="number">3.0</span></span><br><span class="line">    m      <span class="number">4.0</span>     NaN</span><br></pre></td></tr></table></figure><p>通过 <code>level</code> 参数指定不同层级的轴进行重塑：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>multicol = pd.MultiIndex.from_tuples([(<span class="string">'weight'</span>, <span class="string">'kg'</span>), (<span class="string">'height'</span>, <span class="string">'m'</span>)])</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>obj = pd.DataFrame([[<span class="number">1.0</span>, <span class="number">2.0</span>], [<span class="number">3.0</span>, <span class="number">4.0</span>]], index=[<span class="string">'cat'</span>, <span class="string">'dog'</span>], columns=multicol)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>obj</span><br><span class="line">    weight height</span><br><span class="line">        kg      m</span><br><span class="line">cat    <span class="number">1.0</span>    <span class="number">2.0</span></span><br><span class="line">dog    <span class="number">3.0</span>    <span class="number">4.0</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>obj.stack(level=<span class="number">0</span>)</span><br><span class="line">             kg    m</span><br><span class="line">cat height  NaN  <span class="number">2.0</span></span><br><span class="line">    weight  <span class="number">1.0</span>  NaN</span><br><span class="line">dog height  NaN  <span class="number">4.0</span></span><br><span class="line">    weight  <span class="number">3.0</span>  NaN</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>obj.stack(level=<span class="number">1</span>)</span><br><span class="line">        height  weight</span><br><span class="line">cat kg     NaN     <span class="number">1.0</span></span><br><span class="line">    m      <span class="number">2.0</span>     NaN</span><br><span class="line">dog kg     NaN     <span class="number">3.0</span></span><br><span class="line">    m      <span class="number">4.0</span>     NaN</span><br><span class="line">&gt;&gt;&gt;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>obj.stack(level=[<span class="number">0</span>, <span class="number">1</span>])</span><br><span class="line">cat  height  m     <span class="number">2.0</span></span><br><span class="line">     weight  kg    <span class="number">1.0</span></span><br><span class="line">dog  height  m     <span class="number">4.0</span></span><br><span class="line">     weight  kg    <span class="number">3.0</span></span><br><span class="line">dtype: float64</span><br></pre></td></tr></table></figure><p>对于重塑后的数据，若有一行的值均为 NaN，则默认会被删除，可以设置 <code>dropna=False</code> 来保留缺失值：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>multicol = pd.MultiIndex.from_tuples([(<span class="string">'weight'</span>, <span class="string">'kg'</span>), (<span class="string">'height'</span>, <span class="string">'m'</span>)])</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>obj = pd.DataFrame([[<span class="keyword">None</span>, <span class="number">1.0</span>], [<span class="number">2.0</span>, <span class="number">3.0</span>]], index=[<span class="string">'cat'</span>, <span class="string">'dog'</span>], columns=multicol)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>obj</span><br><span class="line">    weight height</span><br><span class="line">        kg      m</span><br><span class="line">cat    NaN    <span class="number">1.0</span></span><br><span class="line">dog    <span class="number">2.0</span>    <span class="number">3.0</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>obj.stack(dropna=<span class="keyword">False</span>)</span><br><span class="line">        height  weight</span><br><span class="line">cat kg     NaN     NaN</span><br><span class="line">    m      <span class="number">1.0</span>     NaN</span><br><span class="line">dog kg     NaN     <span class="number">2.0</span></span><br><span class="line">    m      <span class="number">3.0</span>     NaN</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>obj.stack(dropna=<span class="keyword">True</span>)</span><br><span class="line">        height  weight</span><br><span class="line">cat m      <span class="number">1.0</span>     NaN</span><br><span class="line">dog kg     NaN     <span class="number">2.0</span></span><br><span class="line">    m      <span class="number">3.0</span>     NaN</span><br></pre></td></tr></table></figure><h3 id="【01x02】unstack"><a href="#【01x02】unstack" class="headerlink" title="【01x02】unstack"></a><font color="#4876FF">【01x02】unstack</font></h3><p><code>unstack</code>：将数据的行转换成列。</p><p>基本语法：</p><ul><li><p><code>Series.unstack(self, level=-1, fill_value=None)</code></p></li><li><p><code>DataFrame.unstack(self, level=-1, fill_value=None)</code></p></li></ul><p>官方文档：</p><ul><li><p><a href="https://pandas.pydata.org/docs/reference/api/pandas.Series.unstack.html" target="_blank" rel="noopener">https://pandas.pydata.org/docs/reference/api/pandas.Series.unstack.html</a></p></li><li><p><a href="https://pandas.pydata.org/docs/reference/api/pandas.DataFrame.unstack.html" target="_blank" rel="noopener">https://pandas.pydata.org/docs/reference/api/pandas.DataFrame.unstack.html</a></p></li></ul><table><thead><tr><th>参数</th><th>描述</th></tr></thead><tbody><tr><td>level</td><td>从行转换到列，指定不同层级的行索引，默认-1</td></tr><tr><td>fill_value</td><td>用于替换 NaN 的值</td></tr></tbody></table><p>在 Series 对象中的应用：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>obj = pd.Series([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>], index=pd.MultiIndex.from_product([[<span class="string">'one'</span>, <span class="string">'two'</span>], [<span class="string">'a'</span>, <span class="string">'b'</span>]]))</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>obj</span><br><span class="line">one  a    <span class="number">1</span></span><br><span class="line">     b    <span class="number">2</span></span><br><span class="line">two  a    <span class="number">3</span></span><br><span class="line">     b    <span class="number">4</span></span><br><span class="line">dtype: int64</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>obj.unstack()</span><br><span class="line">     a  b</span><br><span class="line">one  <span class="number">1</span>  <span class="number">2</span></span><br><span class="line">two  <span class="number">3</span>  <span class="number">4</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>obj.unstack(level=<span class="number">0</span>)</span><br><span class="line">   one  two</span><br><span class="line">a    <span class="number">1</span>    <span class="number">3</span></span><br><span class="line">b    <span class="number">2</span>    <span class="number">4</span></span><br></pre></td></tr></table></figure><p>和 <code>stack</code> 方法类似，如果值不存在将会引入缺失值（NaN）：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>obj1 = pd.Series([<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>], index=[<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>, <span class="string">'d'</span>])</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>obj2 = pd.Series([<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>], index=[<span class="string">'c'</span>, <span class="string">'d'</span>, <span class="string">'e'</span>])</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>obj3 = pd.concat([obj1, obj2], keys=[<span class="string">'one'</span>, <span class="string">'two'</span>])</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>obj3</span><br><span class="line">one  a    <span class="number">0</span></span><br><span class="line">     b    <span class="number">1</span></span><br><span class="line">     c    <span class="number">2</span></span><br><span class="line">     d    <span class="number">3</span></span><br><span class="line">two  c    <span class="number">4</span></span><br><span class="line">     d    <span class="number">5</span></span><br><span class="line">     e    <span class="number">6</span></span><br><span class="line">dtype: int64</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>obj3.unstack()</span><br><span class="line">       a    b    c    d    e</span><br><span class="line">one  <span class="number">0.0</span>  <span class="number">1.0</span>  <span class="number">2.0</span>  <span class="number">3.0</span>  NaN</span><br><span class="line">two  NaN  NaN  <span class="number">4.0</span>  <span class="number">5.0</span>  <span class="number">6.0</span></span><br></pre></td></tr></table></figure><p>在 DataFrame 对象中的应用：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>obj = pd.DataFrame(np.arange(<span class="number">6</span>).reshape((<span class="number">2</span>, <span class="number">3</span>)),</span><br><span class="line">       index=pd.Index([<span class="string">'Ohio'</span>,<span class="string">'Colorado'</span>], name=<span class="string">'state'</span>),</span><br><span class="line">       columns=pd.Index([<span class="string">'one'</span>, <span class="string">'two'</span>, <span class="string">'three'</span>],</span><br><span class="line">       name=<span class="string">'number'</span>))</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>obj</span><br><span class="line">number    one  two  three</span><br><span class="line">state                    </span><br><span class="line">Ohio        <span class="number">0</span>    <span class="number">1</span>      <span class="number">2</span></span><br><span class="line">Colorado    <span class="number">3</span>    <span class="number">4</span>      <span class="number">5</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>obj2 = obj.stack()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>obj2</span><br><span class="line">state     number</span><br><span class="line">Ohio      one       <span class="number">0</span></span><br><span class="line">          two       <span class="number">1</span></span><br><span class="line">          three     <span class="number">2</span></span><br><span class="line">Colorado  one       <span class="number">3</span></span><br><span class="line">          two       <span class="number">4</span></span><br><span class="line">          three     <span class="number">5</span></span><br><span class="line">dtype: int32</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>obj3 = pd.DataFrame(&#123;<span class="string">'left'</span>: obj2, <span class="string">'right'</span>: obj2 + <span class="number">5</span>&#125;,</span><br><span class="line">columns=pd.Index([<span class="string">'left'</span>, <span class="string">'right'</span>], name=<span class="string">'side'</span>))</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>obj3</span><br><span class="line">side             left  right</span><br><span class="line">state    number             </span><br><span class="line">Ohio     one        <span class="number">0</span>      <span class="number">5</span></span><br><span class="line">         two        <span class="number">1</span>      <span class="number">6</span></span><br><span class="line">         three      <span class="number">2</span>      <span class="number">7</span></span><br><span class="line">Colorado one        <span class="number">3</span>      <span class="number">8</span></span><br><span class="line">         two        <span class="number">4</span>      <span class="number">9</span></span><br><span class="line">         three      <span class="number">5</span>     <span class="number">10</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>obj3.unstack(<span class="string">'state'</span>)</span><br><span class="line">side   left          right         </span><br><span class="line">state  Ohio Colorado  Ohio Colorado</span><br><span class="line">number                             </span><br><span class="line">one       <span class="number">0</span>        <span class="number">3</span>     <span class="number">5</span>        <span class="number">8</span></span><br><span class="line">two       <span class="number">1</span>        <span class="number">4</span>     <span class="number">6</span>        <span class="number">9</span></span><br><span class="line">three     <span class="number">2</span>        <span class="number">5</span>     <span class="number">7</span>       <span class="number">10</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>obj3.unstack(<span class="string">'state'</span>).stack(<span class="string">'side'</span>)</span><br><span class="line">state         Colorado  Ohio</span><br><span class="line">number side                 </span><br><span class="line">one    left          <span class="number">3</span>     <span class="number">0</span></span><br><span class="line">       right         <span class="number">8</span>     <span class="number">5</span></span><br><span class="line">two    left          <span class="number">4</span>     <span class="number">1</span></span><br><span class="line">       right         <span class="number">9</span>     <span class="number">6</span></span><br><span class="line">three  left          <span class="number">5</span>     <span class="number">2</span></span><br><span class="line">       right        <span class="number">10</span>     <span class="number">7</span></span><br></pre></td></tr></table></figure><hr><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">这里是一段防爬虫文本，请读者忽略。</span></span><br><span class="line"><span class="string">本文原创首发于</span> <span class="string">CSDN，作者</span> <span class="string">TRHX。</span></span><br><span class="line"><span class="string">博客首页：https://itrhx.blog.csdn.net/</span></span><br><span class="line"><span class="string">本文链接：https://itrhx.blog.csdn.net/article/details/106900748</span></span><br><span class="line"><span class="string">未经授权，禁止转载！恶意转载，后果自负！尊重原创，远离剽窃！</span></span><br></pre></td></tr></table></figure><hr><h2 id="【02x00】重复数据处理"><a href="#【02x00】重复数据处理" class="headerlink" title="【02x00】重复数据处理"></a><font color="#FF0000">【02x00】重复数据处理</font></h2><ul><li><p><code>duplicated</code>：判断是否为重复值；</p></li><li><p><code>drop_duplicates</code>：删除重复值。</p></li></ul><h3 id="【02x01】duplicated"><a href="#【02x01】duplicated" class="headerlink" title="【02x01】duplicated"></a><font color="#4876FF">【02x01】duplicated</font></h3><p><code>duplicated</code> 方法可以判断值是否为重复数据。</p><p>基本语法：</p><ul><li><p><code>Series.duplicated(self, keep=&#39;first&#39;)</code></p></li><li><p><code>DataFrame.duplicated(self, subset: Union[Hashable, Sequence[Hashable], NoneType] = None, keep: Union[str, bool] = &#39;first&#39;) → ’Series’</code></p></li></ul><p>官方文档：</p><ul><li><p><a href="https://pandas.pydata.org/docs/reference/api/pandas.Series.duplicated.html" target="_blank" rel="noopener">https://pandas.pydata.org/docs/reference/api/pandas.Series.duplicated.html</a></p></li><li><p><a href="https://pandas.pydata.org/docs/reference/api/pandas.DataFrame.duplicated.html" target="_blank" rel="noopener">https://pandas.pydata.org/docs/reference/api/pandas.DataFrame.duplicated.html</a></p></li></ul><table><thead><tr><th>参数</th><th>描述</th></tr></thead><tbody><tr><td>keep</td><td>标记重复项的方法，默认 <code>&#39;first&#39;</code><br><code>&#39;first&#39;</code>：将非重复项和第一个重复项标记为 False，其他重复项标记为 True<br><code>&#39;last&#39;</code>：将非重复项和最后一个重复项标记为 False，其他重复项标记为 True<br><code>False</code>：将所有重复项标记为 True，非重复项标记为 False</td></tr><tr><td>subset</td><td>列标签或标签序列，在 DataFrame 对象中才有此参数，<br>用于指定某列，仅标记该列的重复项，默认情况下将考虑所有列</td></tr></tbody></table><p>默认情况下，对于每组重复的值，第一个出现的重复值标记为 False，其他重复项标记为 True，非重复项标记为 False，相当于 <code>keep=&#39;first&#39;</code>：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>obj = pd.Series([<span class="string">'lama'</span>, <span class="string">'cow'</span>, <span class="string">'lama'</span>, <span class="string">'beetle'</span>, <span class="string">'lama'</span>])</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>obj</span><br><span class="line"><span class="number">0</span>      lama</span><br><span class="line"><span class="number">1</span>       cow</span><br><span class="line"><span class="number">2</span>      lama</span><br><span class="line"><span class="number">3</span>    beetle</span><br><span class="line"><span class="number">4</span>      lama</span><br><span class="line">dtype: object</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>obj.duplicated()</span><br><span class="line"><span class="number">0</span>    <span class="keyword">False</span></span><br><span class="line"><span class="number">1</span>    <span class="keyword">False</span></span><br><span class="line"><span class="number">2</span>     <span class="keyword">True</span></span><br><span class="line"><span class="number">3</span>    <span class="keyword">False</span></span><br><span class="line"><span class="number">4</span>     <span class="keyword">True</span></span><br><span class="line">dtype: bool</span><br><span class="line">&gt;&gt;&gt;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>obj.duplicated(keep=<span class="string">'first'</span>)</span><br><span class="line"><span class="number">0</span>    <span class="keyword">False</span></span><br><span class="line"><span class="number">1</span>    <span class="keyword">False</span></span><br><span class="line"><span class="number">2</span>     <span class="keyword">True</span></span><br><span class="line"><span class="number">3</span>    <span class="keyword">False</span></span><br><span class="line"><span class="number">4</span>     <span class="keyword">True</span></span><br><span class="line">dtype: bool</span><br></pre></td></tr></table></figure><p>设置 <code>keep=&#39;last&#39;</code>，将每组非重复项和最后一次出现的重复项标记为 False，其他重复项标记为 True，设置 <code>keep=False</code>，则所有重复项均为 True，其他值为 False：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>obj = pd.Series([<span class="string">'lama'</span>, <span class="string">'cow'</span>, <span class="string">'lama'</span>, <span class="string">'beetle'</span>, <span class="string">'lama'</span>])</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>obj</span><br><span class="line"><span class="number">0</span>      lama</span><br><span class="line"><span class="number">1</span>       cow</span><br><span class="line"><span class="number">2</span>      lama</span><br><span class="line"><span class="number">3</span>    beetle</span><br><span class="line"><span class="number">4</span>      lama</span><br><span class="line">dtype: object</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>obj.duplicated(keep=<span class="string">'last'</span>)</span><br><span class="line"><span class="number">0</span>     <span class="keyword">True</span></span><br><span class="line"><span class="number">1</span>    <span class="keyword">False</span></span><br><span class="line"><span class="number">2</span>     <span class="keyword">True</span></span><br><span class="line"><span class="number">3</span>    <span class="keyword">False</span></span><br><span class="line"><span class="number">4</span>    <span class="keyword">False</span></span><br><span class="line">dtype: bool</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>obj.duplicated(keep=<span class="keyword">False</span>)</span><br><span class="line"><span class="number">0</span>     <span class="keyword">True</span></span><br><span class="line"><span class="number">1</span>    <span class="keyword">False</span></span><br><span class="line"><span class="number">2</span>     <span class="keyword">True</span></span><br><span class="line"><span class="number">3</span>    <span class="keyword">False</span></span><br><span class="line"><span class="number">4</span>     <span class="keyword">True</span></span><br><span class="line">dtype: bool</span><br></pre></td></tr></table></figure><p>在 DataFrame 对象中，subset 参数用于指定某列，仅标记该列的重复项，默认情况下将考虑所有列：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>obj = pd.DataFrame(&#123;<span class="string">'data1'</span> : [<span class="string">'a'</span>] * <span class="number">4</span> + [<span class="string">'b'</span>] * <span class="number">4</span>,</span><br><span class="line">                       <span class="string">'data2'</span> : np.random.randint(<span class="number">0</span>, <span class="number">4</span>, <span class="number">8</span>)&#125;)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>obj</span><br><span class="line">  data1  data2</span><br><span class="line"><span class="number">0</span>     a      <span class="number">0</span></span><br><span class="line"><span class="number">1</span>     a      <span class="number">0</span></span><br><span class="line"><span class="number">2</span>     a      <span class="number">0</span></span><br><span class="line"><span class="number">3</span>     a      <span class="number">3</span></span><br><span class="line"><span class="number">4</span>     b      <span class="number">3</span></span><br><span class="line"><span class="number">5</span>     b      <span class="number">3</span></span><br><span class="line"><span class="number">6</span>     b      <span class="number">0</span></span><br><span class="line"><span class="number">7</span>     b      <span class="number">2</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>obj.duplicated()</span><br><span class="line"><span class="number">0</span>    <span class="keyword">False</span></span><br><span class="line"><span class="number">1</span>     <span class="keyword">True</span></span><br><span class="line"><span class="number">2</span>     <span class="keyword">True</span></span><br><span class="line"><span class="number">3</span>    <span class="keyword">False</span></span><br><span class="line"><span class="number">4</span>    <span class="keyword">False</span></span><br><span class="line"><span class="number">5</span>     <span class="keyword">True</span></span><br><span class="line"><span class="number">6</span>    <span class="keyword">False</span></span><br><span class="line"><span class="number">7</span>    <span class="keyword">False</span></span><br><span class="line">dtype: bool</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>obj.duplicated(subset=<span class="string">'data1'</span>)</span><br><span class="line"><span class="number">0</span>    <span class="keyword">False</span></span><br><span class="line"><span class="number">1</span>     <span class="keyword">True</span></span><br><span class="line"><span class="number">2</span>     <span class="keyword">True</span></span><br><span class="line"><span class="number">3</span>     <span class="keyword">True</span></span><br><span class="line"><span class="number">4</span>    <span class="keyword">False</span></span><br><span class="line"><span class="number">5</span>     <span class="keyword">True</span></span><br><span class="line"><span class="number">6</span>     <span class="keyword">True</span></span><br><span class="line"><span class="number">7</span>     <span class="keyword">True</span></span><br><span class="line">dtype: bool</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>obj.duplicated(subset=<span class="string">'data2'</span>, keep=<span class="string">'last'</span>)</span><br><span class="line"><span class="number">0</span>     <span class="keyword">True</span></span><br><span class="line"><span class="number">1</span>     <span class="keyword">True</span></span><br><span class="line"><span class="number">2</span>     <span class="keyword">True</span></span><br><span class="line"><span class="number">3</span>     <span class="keyword">True</span></span><br><span class="line"><span class="number">4</span>     <span class="keyword">True</span></span><br><span class="line"><span class="number">5</span>    <span class="keyword">False</span></span><br><span class="line"><span class="number">6</span>    <span class="keyword">False</span></span><br><span class="line"><span class="number">7</span>    <span class="keyword">False</span></span><br><span class="line">dtype: bool</span><br></pre></td></tr></table></figure><h3 id="【02x02】drop-duplicates"><a href="#【02x02】drop-duplicates" class="headerlink" title="【02x02】drop_duplicates"></a><font color="#4876FF">【02x02】drop_duplicates</font></h3><p><code>drop_duplicates</code> 方法会返回一个删除了重复值的序列。</p><p>基本语法：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Series.drop_duplicates(self, keep=<span class="string">'first'</span>, inplace=<span class="keyword">False</span>)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">DataFrame.drop_duplicates(self,</span><br><span class="line">  subset: Union[Hashable, Sequence[Hashable], NoneType] = <span class="keyword">None</span>,</span><br><span class="line">  keep: Union[str, bool] = <span class="string">'first'</span>,</span><br><span class="line">  inplace: bool = <span class="keyword">False</span>,</span><br><span class="line">  ignore_index: bool = <span class="keyword">False</span>) → Union[ForwardRef(‘DataFrame’), NoneType]</span><br></pre></td></tr></table></figure><p>官方文档：</p><ul><li><p><a href="https://pandas.pydata.org/docs/reference/api/pandas.Series.drop_duplicates.html" target="_blank" rel="noopener">https://pandas.pydata.org/docs/reference/api/pandas.Series.drop_duplicates.html</a></p></li><li><p><a href="https://pandas.pydata.org/docs/reference/api/pandas.DataFrame.drop_duplicates.html" target="_blank" rel="noopener">https://pandas.pydata.org/docs/reference/api/pandas.DataFrame.drop_duplicates.html</a></p></li></ul><table><thead><tr><th>参数</th><th>描述</th></tr></thead><tbody><tr><td>keep</td><td>删除重复项的方法，默认 <code>&#39;first&#39;</code><br><code>&#39;first&#39;</code>：保留非重复项和第一个重复项，其他重复项标记均删除<br><code>&#39;last&#39;</code>：保留非重复项和最后一个重复项，其他重复项删除<br><code>False</code>：将所有重复项删除，非重复项保留</td></tr><tr><td>inplace</td><td>是否返回删除重复项后的值，默认 False，若设置为 True，则不返回值，直接改变原数据</td></tr><tr><td>subset</td><td>列标签或标签序列，在 DataFrame 对象中才有此参数，<br>用于指定某列，仅标记该列的重复项，默认情况下将考虑所有列</td></tr><tr><td>ignore_index</td><td>bool 类型，在 DataFrame 对象中才有此参数，是否忽略原对象的轴标记，<br>默认 False，如果为 True，则新对象的索引将是 0, 1, 2, …, n-1</td></tr></tbody></table><p>keep 参数的使用：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>obj = pd.Series([<span class="string">'lama'</span>, <span class="string">'cow'</span>, <span class="string">'lama'</span>, <span class="string">'beetle'</span>, <span class="string">'lama'</span>, <span class="string">'hippo'</span>], name=<span class="string">'animal'</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>obj</span><br><span class="line"><span class="number">0</span>      lama</span><br><span class="line"><span class="number">1</span>       cow</span><br><span class="line"><span class="number">2</span>      lama</span><br><span class="line"><span class="number">3</span>    beetle</span><br><span class="line"><span class="number">4</span>      lama</span><br><span class="line"><span class="number">5</span>     hippo</span><br><span class="line">Name: animal, dtype: object</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>obj.drop_duplicates()</span><br><span class="line"><span class="number">0</span>      lama</span><br><span class="line"><span class="number">1</span>       cow</span><br><span class="line"><span class="number">3</span>    beetle</span><br><span class="line"><span class="number">5</span>     hippo</span><br><span class="line">Name: animal, dtype: object</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>obj.drop_duplicates(keep=<span class="string">'last'</span>)</span><br><span class="line"><span class="number">1</span>       cow</span><br><span class="line"><span class="number">3</span>    beetle</span><br><span class="line"><span class="number">4</span>      lama</span><br><span class="line"><span class="number">5</span>     hippo</span><br><span class="line">Name: animal, dtype: object</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>obj.drop_duplicates(keep=<span class="keyword">False</span>)</span><br><span class="line"><span class="number">1</span>       cow</span><br><span class="line"><span class="number">3</span>    beetle</span><br><span class="line"><span class="number">5</span>     hippo</span><br><span class="line">Name: animal, dtype: object</span><br></pre></td></tr></table></figure><p>如果设置 <code>inplace=True</code>，则不会返回任何值，但原对象的值已被改变：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>obj1 = pd.Series([<span class="string">'lama'</span>, <span class="string">'cow'</span>, <span class="string">'lama'</span>, <span class="string">'beetle'</span>, <span class="string">'lama'</span>, <span class="string">'hippo'</span>], name=<span class="string">'animal'</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>obj1</span><br><span class="line"><span class="number">0</span>      lama</span><br><span class="line"><span class="number">1</span>       cow</span><br><span class="line"><span class="number">2</span>      lama</span><br><span class="line"><span class="number">3</span>    beetle</span><br><span class="line"><span class="number">4</span>      lama</span><br><span class="line"><span class="number">5</span>     hippo</span><br><span class="line">Name: animal, dtype: object</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>obj2 = obj1.drop_duplicates()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>obj2          <span class="comment"># 有返回值</span></span><br><span class="line"><span class="number">0</span>      lama</span><br><span class="line"><span class="number">1</span>       cow</span><br><span class="line"><span class="number">3</span>    beetle</span><br><span class="line"><span class="number">5</span>     hippo</span><br><span class="line">Name: animal, dtype: object</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>obj3 = obj1.drop_duplicates(inplace=<span class="keyword">True</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>obj3         <span class="comment"># 无返回值</span></span><br><span class="line">&gt;&gt;&gt;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>obj1         <span class="comment"># 原对象的值已改变</span></span><br><span class="line"><span class="number">0</span>      lama</span><br><span class="line"><span class="number">1</span>       cow</span><br><span class="line"><span class="number">3</span>    beetle</span><br><span class="line"><span class="number">5</span>     hippo</span><br><span class="line">Name: animal, dtype: object</span><br></pre></td></tr></table></figure><p>在 DataFrame 对象中的使用：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>obj = pd.DataFrame(&#123;<span class="string">'data1'</span> : [<span class="string">'a'</span>] * <span class="number">4</span> + [<span class="string">'b'</span>] * <span class="number">4</span>,</span><br><span class="line">                       <span class="string">'data2'</span> : np.random.randint(<span class="number">0</span>, <span class="number">4</span>, <span class="number">8</span>)&#125;)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>obj</span><br><span class="line">  data1  data2</span><br><span class="line"><span class="number">0</span>     a      <span class="number">2</span></span><br><span class="line"><span class="number">1</span>     a      <span class="number">1</span></span><br><span class="line"><span class="number">2</span>     a      <span class="number">1</span></span><br><span class="line"><span class="number">3</span>     a      <span class="number">2</span></span><br><span class="line"><span class="number">4</span>     b      <span class="number">1</span></span><br><span class="line"><span class="number">5</span>     b      <span class="number">2</span></span><br><span class="line"><span class="number">6</span>     b      <span class="number">0</span></span><br><span class="line"><span class="number">7</span>     b      <span class="number">0</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>obj.drop_duplicates()</span><br><span class="line">  data1  data2</span><br><span class="line"><span class="number">0</span>     a      <span class="number">2</span></span><br><span class="line"><span class="number">1</span>     a      <span class="number">1</span></span><br><span class="line"><span class="number">4</span>     b      <span class="number">1</span></span><br><span class="line"><span class="number">5</span>     b      <span class="number">2</span></span><br><span class="line"><span class="number">6</span>     b      <span class="number">0</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>obj.drop_duplicates(subset=<span class="string">'data2'</span>)</span><br><span class="line">  data1  data2</span><br><span class="line"><span class="number">0</span>     a      <span class="number">2</span></span><br><span class="line"><span class="number">1</span>     a      <span class="number">1</span></span><br><span class="line"><span class="number">6</span>     b      <span class="number">0</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>obj.drop_duplicates(subset=<span class="string">'data2'</span>, ignore_index=<span class="keyword">True</span>)</span><br><span class="line">  data1  data2</span><br><span class="line"><span class="number">0</span>     a      <span class="number">2</span></span><br><span class="line"><span class="number">1</span>     a      <span class="number">1</span></span><br><span class="line"><span class="number">2</span>     b      <span class="number">0</span></span><br></pre></td></tr></table></figure><h2 id="【03x00】数据替换"><a href="#【03x00】数据替换" class="headerlink" title="【03x00】数据替换"></a><font color="#FF0000">【03x00】数据替换</font></h2><h3 id="【03x01】replace"><a href="#【03x01】replace" class="headerlink" title="【03x01】replace"></a><font color="#4876FF">【03x01】replace</font></h3><p><code>replace</code> 方法可以根据值的内容进行替换。</p><p>基本语法：</p><ul><li><p><code>Series.replace(self, to_replace=None, value=None, inplace=False, limit=None, regex=False, method=&#39;pad&#39;)</code></p></li><li><p><code>DataFrame.replace(self, to_replace=None, value=None, inplace=False, limit=None, regex=False, method=&#39;pad&#39;)</code></p></li></ul><p>官方文档：</p><ul><li><p><a href="https://pandas.pydata.org/docs/reference/api/pandas.Series.replace.html" target="_blank" rel="noopener">https://pandas.pydata.org/docs/reference/api/pandas.Series.replace.html</a></p></li><li><p><a href="https://pandas.pydata.org/docs/reference/api/pandas.DataFrame.replace.html" target="_blank" rel="noopener">https://pandas.pydata.org/docs/reference/api/pandas.DataFrame.replace.html</a></p></li></ul><p>常用参数：</p><table><thead><tr><th>参数</th><th>描述</th></tr></thead><tbody><tr><td>to_replace</td><td>找到要替换值的方法，可以是：字符串、正则表达式、列表、字典、整数、浮点数、Series 对象或者 None<br>使用不同参数的区别参见官方文档</td></tr><tr><td>value</td><td>用于替换匹配项的值， 对于 DataFrame，可以使用字典的值来指定每列要使用的值，<br>还允许使用此类对象的正则表达式，字符串和列表或字典</td></tr><tr><td>inplace</td><td>bool 类型，是否直接改变原数据且不返回值，默认 False</td></tr><tr><td>regex</td><td>bool 类型或者与 to_replace 相同的类型，<br>当 to_replace 参数为正则表达式时，regex 应为 True，或者直接使用该参数代替 to_replace</td></tr></tbody></table><p><code>to_replace</code> 和 <code>value</code> 参数只传入一个值，单个值替换单个值：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>obj = pd.Series([<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>])</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>obj</span><br><span class="line"><span class="number">0</span>    <span class="number">0</span></span><br><span class="line"><span class="number">1</span>    <span class="number">1</span></span><br><span class="line"><span class="number">2</span>    <span class="number">2</span></span><br><span class="line"><span class="number">3</span>    <span class="number">3</span></span><br><span class="line"><span class="number">4</span>    <span class="number">4</span></span><br><span class="line">dtype: int64</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>obj.replace(<span class="number">0</span>, <span class="number">5</span>)</span><br><span class="line"><span class="number">0</span>    <span class="number">5</span></span><br><span class="line"><span class="number">1</span>    <span class="number">1</span></span><br><span class="line"><span class="number">2</span>    <span class="number">2</span></span><br><span class="line"><span class="number">3</span>    <span class="number">3</span></span><br><span class="line"><span class="number">4</span>    <span class="number">4</span></span><br><span class="line">dtype: int64</span><br></pre></td></tr></table></figure><p><code>to_replace</code> 传入多个值，<code>value</code> 传入一个值，多个值替换一个值：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>obj = pd.Series([<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>])</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>obj</span><br><span class="line"><span class="number">0</span>    <span class="number">0</span></span><br><span class="line"><span class="number">1</span>    <span class="number">1</span></span><br><span class="line"><span class="number">2</span>    <span class="number">2</span></span><br><span class="line"><span class="number">3</span>    <span class="number">3</span></span><br><span class="line"><span class="number">4</span>    <span class="number">4</span></span><br><span class="line">dtype: int64</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>obj.replace([<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>], <span class="number">4</span>)</span><br><span class="line"><span class="number">0</span>    <span class="number">4</span></span><br><span class="line"><span class="number">1</span>    <span class="number">4</span></span><br><span class="line"><span class="number">2</span>    <span class="number">4</span></span><br><span class="line"><span class="number">3</span>    <span class="number">4</span></span><br><span class="line"><span class="number">4</span>    <span class="number">4</span></span><br><span class="line">dtype: int64</span><br></pre></td></tr></table></figure><p><code>to_replace</code> 和 <code>value</code> 参数都传入多个值，多个值替换多个值：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>obj = pd.Series([<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>])</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>obj</span><br><span class="line"><span class="number">0</span>    <span class="number">0</span></span><br><span class="line"><span class="number">1</span>    <span class="number">1</span></span><br><span class="line"><span class="number">2</span>    <span class="number">2</span></span><br><span class="line"><span class="number">3</span>    <span class="number">3</span></span><br><span class="line"><span class="number">4</span>    <span class="number">4</span></span><br><span class="line">dtype: int64</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>obj.replace([<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>], [<span class="number">4</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">1</span>])</span><br><span class="line"><span class="number">0</span>    <span class="number">4</span></span><br><span class="line"><span class="number">1</span>    <span class="number">3</span></span><br><span class="line"><span class="number">2</span>    <span class="number">2</span></span><br><span class="line"><span class="number">3</span>    <span class="number">1</span></span><br><span class="line"><span class="number">4</span>    <span class="number">4</span></span><br><span class="line">dtype: int64</span><br></pre></td></tr></table></figure><p><code>to_replace</code> 传入字典：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>obj = pd.DataFrame(&#123;<span class="string">'A'</span>: [<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>],</span><br><span class="line"><span class="string">'B'</span>: [<span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>],</span><br><span class="line"><span class="string">'C'</span>: [<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>, <span class="string">'d'</span>, <span class="string">'e'</span>]&#125;)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>obj</span><br><span class="line">   A  B  C</span><br><span class="line"><span class="number">0</span>  <span class="number">0</span>  <span class="number">5</span>  a</span><br><span class="line"><span class="number">1</span>  <span class="number">1</span>  <span class="number">6</span>  b</span><br><span class="line"><span class="number">2</span>  <span class="number">2</span>  <span class="number">7</span>  c</span><br><span class="line"><span class="number">3</span>  <span class="number">3</span>  <span class="number">8</span>  d</span><br><span class="line"><span class="number">4</span>  <span class="number">4</span>  <span class="number">9</span>  e</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>obj.replace(<span class="number">0</span>, <span class="number">5</span>)</span><br><span class="line">   A  B  C</span><br><span class="line"><span class="number">0</span>  <span class="number">5</span>  <span class="number">5</span>  a</span><br><span class="line"><span class="number">1</span>  <span class="number">1</span>  <span class="number">6</span>  b</span><br><span class="line"><span class="number">2</span>  <span class="number">2</span>  <span class="number">7</span>  c</span><br><span class="line"><span class="number">3</span>  <span class="number">3</span>  <span class="number">8</span>  d</span><br><span class="line"><span class="number">4</span>  <span class="number">4</span>  <span class="number">9</span>  e</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>obj.replace(&#123;<span class="number">0</span>: <span class="number">10</span>, <span class="number">1</span>: <span class="number">100</span>&#125;)</span><br><span class="line">     A  B  C</span><br><span class="line"><span class="number">0</span>   <span class="number">10</span>  <span class="number">5</span>  a</span><br><span class="line"><span class="number">1</span>  <span class="number">100</span>  <span class="number">6</span>  b</span><br><span class="line"><span class="number">2</span>    <span class="number">2</span>  <span class="number">7</span>  c</span><br><span class="line"><span class="number">3</span>    <span class="number">3</span>  <span class="number">8</span>  d</span><br><span class="line"><span class="number">4</span>    <span class="number">4</span>  <span class="number">9</span>  e</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>obj.replace(&#123;<span class="string">'A'</span>: <span class="number">0</span>, <span class="string">'B'</span>: <span class="number">5</span>&#125;, <span class="number">100</span>)</span><br><span class="line">     A    B  C</span><br><span class="line"><span class="number">0</span>  <span class="number">100</span>  <span class="number">100</span>  a</span><br><span class="line"><span class="number">1</span>    <span class="number">1</span>    <span class="number">6</span>  b</span><br><span class="line"><span class="number">2</span>    <span class="number">2</span>    <span class="number">7</span>  c</span><br><span class="line"><span class="number">3</span>    <span class="number">3</span>    <span class="number">8</span>  d</span><br><span class="line"><span class="number">4</span>    <span class="number">4</span>    <span class="number">9</span>  e</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>obj.replace(&#123;<span class="string">'A'</span>: &#123;<span class="number">0</span>: <span class="number">100</span>, <span class="number">4</span>: <span class="number">400</span>&#125;&#125;)</span><br><span class="line">     A  B  C</span><br><span class="line"><span class="number">0</span>  <span class="number">100</span>  <span class="number">5</span>  a</span><br><span class="line"><span class="number">1</span>    <span class="number">1</span>  <span class="number">6</span>  b</span><br><span class="line"><span class="number">2</span>    <span class="number">2</span>  <span class="number">7</span>  c</span><br><span class="line"><span class="number">3</span>    <span class="number">3</span>  <span class="number">8</span>  d</span><br><span class="line"><span class="number">4</span>  <span class="number">400</span>  <span class="number">9</span>  e</span><br></pre></td></tr></table></figure><p><code>to_replace</code> 传入正则表达式：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>obj = pd.DataFrame(&#123;<span class="string">'A'</span>: [<span class="string">'bat'</span>, <span class="string">'foo'</span>, <span class="string">'bait'</span>],</span><br><span class="line"><span class="string">'B'</span>: [<span class="string">'abc'</span>, <span class="string">'bar'</span>, <span class="string">'xyz'</span>]&#125;)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>obj</span><br><span class="line">      A    B</span><br><span class="line"><span class="number">0</span>   bat  abc</span><br><span class="line"><span class="number">1</span>   foo  bar</span><br><span class="line"><span class="number">2</span>  bait  xyz</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>obj.replace(to_replace=<span class="string">r'^ba.$'</span>, value=<span class="string">'new'</span>, regex=<span class="keyword">True</span>)</span><br><span class="line">      A    B</span><br><span class="line"><span class="number">0</span>   new  abc</span><br><span class="line"><span class="number">1</span>   foo  new</span><br><span class="line"><span class="number">2</span>  bait  xyz</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>obj.replace(&#123;<span class="string">'A'</span>: <span class="string">r'^ba.$'</span>&#125;, &#123;<span class="string">'A'</span>: <span class="string">'new'</span>&#125;, regex=<span class="keyword">True</span>)</span><br><span class="line">      A    B</span><br><span class="line"><span class="number">0</span>   new  abc</span><br><span class="line"><span class="number">1</span>   foo  bar</span><br><span class="line"><span class="number">2</span>  bait  xyz</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>obj.replace(regex=<span class="string">r'^ba.$'</span>, value=<span class="string">'new'</span>)</span><br><span class="line">      A    B</span><br><span class="line"><span class="number">0</span>   new  abc</span><br><span class="line"><span class="number">1</span>   foo  new</span><br><span class="line"><span class="number">2</span>  bait  xyz</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>obj.replace(regex=&#123;<span class="string">r'^ba.$'</span>: <span class="string">'new'</span>, <span class="string">'foo'</span>: <span class="string">'xyz'</span>&#125;)</span><br><span class="line">      A    B</span><br><span class="line"><span class="number">0</span>   new  abc</span><br><span class="line"><span class="number">1</span>   xyz  new</span><br><span class="line"><span class="number">2</span>  bait  xyz</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>obj.replace(regex=[<span class="string">r'^ba.$'</span>, <span class="string">'foo'</span>], value=<span class="string">'new'</span>)</span><br><span class="line">      A    B</span><br><span class="line"><span class="number">0</span>   new  abc</span><br><span class="line"><span class="number">1</span>   new  new</span><br><span class="line"><span class="number">2</span>  bait  xyz</span><br></pre></td></tr></table></figure><h3 id="【03x02】where"><a href="#【03x02】where" class="headerlink" title="【03x02】where"></a><font color="#4876FF">【03x02】where</font></h3><p><code>where</code> 方法用于替换条件为 False 的值。</p><p>基本语法：</p><ul><li><p><code>Series.where(self, cond, other=nan, inplace=False, axis=None, level=None, errors=&#39;raise&#39;, try_cast=False)</code></p></li><li><p><code>DataFrame.where(self, cond, other=nan, inplace=False, axis=None, level=None, errors=&#39;raise&#39;, try_cast=False)</code></p></li></ul><p>官方文档：</p><ul><li><p><a href="https://pandas.pydata.org/docs/reference/api/pandas.Series.where.html" target="_blank" rel="noopener">https://pandas.pydata.org/docs/reference/api/pandas.Series.where.html</a></p></li><li><p><a href="https://pandas.pydata.org/docs/reference/api/pandas.DataFrame.where.html" target="_blank" rel="noopener">https://pandas.pydata.org/docs/reference/api/pandas.DataFrame.where.html</a></p></li></ul><p>常用参数：</p><table><thead><tr><th>参数</th><th>描述</th></tr></thead><tbody><tr><td>cond</td><td>替换条件，如果 cond 为 True，则保留原始值。如果为 False，则替换为来自 other 的相应值</td></tr><tr><td>other</td><td>替换值，如果 cond 为 False，则替换为来自该参数的相应值</td></tr><tr><td>inplace</td><td>bool 类型，是否直接改变原数据且不返回值，默认 False</td></tr></tbody></table><p>在 Series 中的应用：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>obj = pd.Series(range(<span class="number">5</span>))</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>obj</span><br><span class="line"><span class="number">0</span>    <span class="number">0</span></span><br><span class="line"><span class="number">1</span>    <span class="number">1</span></span><br><span class="line"><span class="number">2</span>    <span class="number">2</span></span><br><span class="line"><span class="number">3</span>    <span class="number">3</span></span><br><span class="line"><span class="number">4</span>    <span class="number">4</span></span><br><span class="line">dtype: int64</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>obj.where(obj &gt; <span class="number">0</span>)</span><br><span class="line"><span class="number">0</span>    NaN</span><br><span class="line"><span class="number">1</span>    <span class="number">1.0</span></span><br><span class="line"><span class="number">2</span>    <span class="number">2.0</span></span><br><span class="line"><span class="number">3</span>    <span class="number">3.0</span></span><br><span class="line"><span class="number">4</span>    <span class="number">4.0</span></span><br><span class="line">dtype: float64</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>obj.where(obj &gt; <span class="number">1</span>, <span class="number">10</span>)</span><br><span class="line"><span class="number">0</span>    <span class="number">10</span></span><br><span class="line"><span class="number">1</span>    <span class="number">10</span></span><br><span class="line"><span class="number">2</span>     <span class="number">2</span></span><br><span class="line"><span class="number">3</span>     <span class="number">3</span></span><br><span class="line"><span class="number">4</span>     <span class="number">4</span></span><br><span class="line">dtype: int64</span><br></pre></td></tr></table></figure><p>在 DataFrame 中的应用：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>obj = pd.DataFrame(np.arange(<span class="number">10</span>).reshape(<span class="number">-1</span>, <span class="number">2</span>), columns=[<span class="string">'A'</span>, <span class="string">'B'</span>])</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>obj</span><br><span class="line">   A  B</span><br><span class="line"><span class="number">0</span>  <span class="number">0</span>  <span class="number">1</span></span><br><span class="line"><span class="number">1</span>  <span class="number">2</span>  <span class="number">3</span></span><br><span class="line"><span class="number">2</span>  <span class="number">4</span>  <span class="number">5</span></span><br><span class="line"><span class="number">3</span>  <span class="number">6</span>  <span class="number">7</span></span><br><span class="line"><span class="number">4</span>  <span class="number">8</span>  <span class="number">9</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>m = obj % <span class="number">3</span> == <span class="number">0</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>obj.where(m, -obj)</span><br><span class="line">   A  B</span><br><span class="line"><span class="number">0</span>  <span class="number">0</span> <span class="number">-1</span></span><br><span class="line"><span class="number">1</span> <span class="number">-2</span>  <span class="number">3</span></span><br><span class="line"><span class="number">2</span> <span class="number">-4</span> <span class="number">-5</span></span><br><span class="line"><span class="number">3</span>  <span class="number">6</span> <span class="number">-7</span></span><br><span class="line"><span class="number">4</span> <span class="number">-8</span>  <span class="number">9</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>obj.where(m, -obj) == np.where(m, obj, -obj)</span><br><span class="line">      A     B</span><br><span class="line"><span class="number">0</span>  <span class="keyword">True</span>  <span class="keyword">True</span></span><br><span class="line"><span class="number">1</span>  <span class="keyword">True</span>  <span class="keyword">True</span></span><br><span class="line"><span class="number">2</span>  <span class="keyword">True</span>  <span class="keyword">True</span></span><br><span class="line"><span class="number">3</span>  <span class="keyword">True</span>  <span class="keyword">True</span></span><br><span class="line"><span class="number">4</span>  <span class="keyword">True</span>  <span class="keyword">True</span></span><br></pre></td></tr></table></figure><h3 id="【03x03】mask"><a href="#【03x03】mask" class="headerlink" title="【03x03】mask"></a><font color="#4876FF">【03x03】mask</font></h3><p><code>mask</code> 方法与 <code>where</code> 方法相反，<code>mask</code> 用于替换条件为 False 的值。</p><p>基本语法：</p><ul><li><p><code>Series.mask(self, cond, other=nan, inplace=False, axis=None, level=None, errors=&#39;raise&#39;, try_cast=False)</code></p></li><li><p><code>DataFrame.mask(self, cond, other=nan, inplace=False, axis=None, level=None, errors=&#39;raise&#39;, try_cast=False)</code></p></li></ul><p>官方文档：</p><ul><li><p><a href="https://pandas.pydata.org/docs/reference/api/pandas.Series.mask.html" target="_blank" rel="noopener">https://pandas.pydata.org/docs/reference/api/pandas.Series.mask.html</a></p></li><li><p><a href="https://pandas.pydata.org/docs/reference/api/pandas.DataFrame.mask.html" target="_blank" rel="noopener">https://pandas.pydata.org/docs/reference/api/pandas.DataFrame.mask.html</a></p></li></ul><p>常用参数：</p><table><thead><tr><th>参数</th><th>描述</th></tr></thead><tbody><tr><td>cond</td><td>替换条件，如果 cond 为 False，则保留原始值。如果为 True，则替换为来自 other 的相应值</td></tr><tr><td>other</td><td>替换值，如果 cond 为 False，则替换为来自该参数的相应值</td></tr><tr><td>inplace</td><td>bool 类型，是否直接改变原数据且不返回值，默认 False</td></tr></tbody></table><p>在 Series 中的应用：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>obj = pd.Series(range(<span class="number">5</span>))</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>obj</span><br><span class="line"><span class="number">0</span>    <span class="number">0</span></span><br><span class="line"><span class="number">1</span>    <span class="number">1</span></span><br><span class="line"><span class="number">2</span>    <span class="number">2</span></span><br><span class="line"><span class="number">3</span>    <span class="number">3</span></span><br><span class="line"><span class="number">4</span>    <span class="number">4</span></span><br><span class="line">dtype: int64</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>obj.mask(obj &gt; <span class="number">0</span>)</span><br><span class="line"><span class="number">0</span>    <span class="number">0.0</span></span><br><span class="line"><span class="number">1</span>    NaN</span><br><span class="line"><span class="number">2</span>    NaN</span><br><span class="line"><span class="number">3</span>    NaN</span><br><span class="line"><span class="number">4</span>    NaN</span><br><span class="line">dtype: float64</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>obj.mask(obj &gt; <span class="number">1</span>, <span class="number">10</span>)</span><br><span class="line"><span class="number">0</span>     <span class="number">0</span></span><br><span class="line"><span class="number">1</span>     <span class="number">1</span></span><br><span class="line"><span class="number">2</span>    <span class="number">10</span></span><br><span class="line"><span class="number">3</span>    <span class="number">10</span></span><br><span class="line"><span class="number">4</span>    <span class="number">10</span></span><br><span class="line">dtype: int64</span><br></pre></td></tr></table></figure><p>在 DataFrame 中的应用：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>obj = pd.DataFrame(np.arange(<span class="number">10</span>).reshape(<span class="number">-1</span>, <span class="number">2</span>), columns=[<span class="string">'A'</span>, <span class="string">'B'</span>])</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>obj</span><br><span class="line">   A  B</span><br><span class="line"><span class="number">0</span>  <span class="number">0</span>  <span class="number">1</span></span><br><span class="line"><span class="number">1</span>  <span class="number">2</span>  <span class="number">3</span></span><br><span class="line"><span class="number">2</span>  <span class="number">4</span>  <span class="number">5</span></span><br><span class="line"><span class="number">3</span>  <span class="number">6</span>  <span class="number">7</span></span><br><span class="line"><span class="number">4</span>  <span class="number">8</span>  <span class="number">9</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>m = obj % <span class="number">3</span> == <span class="number">0</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>obj.mask(m, -obj)</span><br><span class="line">   A  B</span><br><span class="line"><span class="number">0</span>  <span class="number">0</span>  <span class="number">1</span></span><br><span class="line"><span class="number">1</span>  <span class="number">2</span> <span class="number">-3</span></span><br><span class="line"><span class="number">2</span>  <span class="number">4</span>  <span class="number">5</span></span><br><span class="line"><span class="number">3</span> <span class="number">-6</span>  <span class="number">7</span></span><br><span class="line"><span class="number">4</span>  <span class="number">8</span> <span class="number">-9</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>obj.where(m, -obj) == obj.mask(~m, -obj)</span><br><span class="line">      A     B</span><br><span class="line"><span class="number">0</span>  <span class="keyword">True</span>  <span class="keyword">True</span></span><br><span class="line"><span class="number">1</span>  <span class="keyword">True</span>  <span class="keyword">True</span></span><br><span class="line"><span class="number">2</span>  <span class="keyword">True</span>  <span class="keyword">True</span></span><br><span class="line"><span class="number">3</span>  <span class="keyword">True</span>  <span class="keyword">True</span></span><br><span class="line"><span class="number">4</span>  <span class="keyword">True</span>  <span class="keyword">True</span></span><br></pre></td></tr></table></figure><hr><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">这里是一段防爬虫文本，请读者忽略。</span></span><br><span class="line"><span class="string">本文原创首发于</span> <span class="string">CSDN，作者</span> <span class="string">TRHX。</span></span><br><span class="line"><span class="string">博客首页：https://itrhx.blog.csdn.net/</span></span><br><span class="line"><span class="string">本文链接：https://itrhx.blog.csdn.net/article/details/106900748</span></span><br><span class="line"><span class="string">未经授权，禁止转载！恶意转载，后果自负！尊重原创，远离剽窃！</span></span><br></pre></td></tr></table></figure><hr>]]></content>
    
    <summary type="html">
    
      Python 数据分析三剑客之 Pandas（八）：数据重塑、重复数据处理与数据替换。
    
    </summary>
    
      <category term="Python 数据分析" scheme="https://www.itrhx.com/categories/Python-%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/"/>
    
      <category term="Pandas" scheme="https://www.itrhx.com/categories/Python-%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/Pandas/"/>
    
    
      <category term="Pandas" scheme="https://www.itrhx.com/tags/Pandas/"/>
    
      <category term="数据重塑" scheme="https://www.itrhx.com/tags/%E6%95%B0%E6%8D%AE%E9%87%8D%E5%A1%91/"/>
    
      <category term="数据替换" scheme="https://www.itrhx.com/tags/%E6%95%B0%E6%8D%AE%E6%9B%BF%E6%8D%A2/"/>
    
  </entry>
  
  <entry>
    <title>Python 数据分析三剑客之 Pandas（七）：合并数据集</title>
    <link href="https://www.itrhx.com/2020/06/21/A85-Pandas-07/"/>
    <id>https://www.itrhx.com/2020/06/21/A85-Pandas-07/</id>
    <published>2020-06-21T13:04:21.174Z</published>
    <updated>2020-07-06T13:45:11.851Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>Pandas 系列文章：</p><ul><li><a href="https://www.itrhx.com/2020/06/11/A79-Pandas-01/">Python 数据分析三剑客之 Pandas（一）：认识 Pandas 及其 Series、DataFrame 对象</a></li><li><a href="https://www.itrhx.com/2020/06/13/A80-Pandas-02/">Python 数据分析三剑客之 Pandas（二）：Index 索引对象以及各种索引操作</a></li><li><a href="https://www.itrhx.com/2020/06/14/A81-Pandas-03/">Python 数据分析三剑客之 Pandas（三）：算术运算与缺失值的处理</a></li><li><a href="https://www.itrhx.com/2020/06/15/A82-Pandas-04/">Python 数据分析三剑客之 Pandas（四）：函数应用、映射、排序和层级索引</a></li><li><a href="https://www.itrhx.com/2020/06/16/A83-Pandas-05/">Python 数据分析三剑客之 Pandas（五）：统计计算与统计描述</a></li><li><a href="https://www.itrhx.com/2020/06/17/A84-Pandas-06/">Python 数据分析三剑客之 Pandas（六）：GroupBy 数据分裂、应用与合并</a></li><li><a href="https://www.itrhx.com/2020/06/21/A85-Pandas-07/">Python 数据分析三剑客之 Pandas（七）：合并数据集</a></li><li><a href="https://www.itrhx.com/2020/06/22/A86-Pandas-08/">Python 数据分析三剑客之 Pandas（八）：数据重塑、重复数据处理与数据替换</a></li><li><a href="https://www.itrhx.com/2020/06/25/A87-Pandas-09/">Python 数据分析三剑客之 Pandas（九）：时间序列</a></li><li><a href="https://www.itrhx.com/2020/06/26/A88-Pandas-10/">Python 数据分析三剑客之 Pandas（十）：数据读写</a></li></ul><hr><p>专栏：</p><p>【<a href="https://www.itrhx.com/categories/Python-%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/NumPy/">NumPy 专栏</a>】【<a href="https://www.itrhx.com/categories/Python-%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/Pandas/">Pandas 专栏</a>】【<a href="https://www.itrhx.com/categories/Python-%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/Matplotlib/">Matplotlib 专栏</a>】</p><p>推荐学习资料与网站：</p><p>【<a href="https://www.numpy.org.cn/" target="_blank" rel="noopener">NumPy 中文网</a>】【<a href="https://www.pypandas.cn/" target="_blank" rel="noopener">Pandas 中文网</a>】【<a href="https://www.matplotlib.org.cn/" target="_blank" rel="noopener">Matplotlib 中文网</a>】【<a href="https://github.com/TRHX/Python-quick-reference-table" target="_blank" rel="noopener">NumPy、Matplotlib、Pandas 速查表</a>】</p><hr><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">这里是一段防爬虫文本，请读者忽略。</span></span><br><span class="line"><span class="string">本文原创首发于</span> <span class="string">CSDN，作者</span> <span class="string">TRHX。</span></span><br><span class="line"><span class="string">博客首页：https://itrhx.blog.csdn.net/</span></span><br><span class="line"><span class="string">本文链接：https://itrhx.blog.csdn.net/article/details/106830112</span></span><br><span class="line"><span class="string">未经授权，禁止转载！恶意转载，后果自负！尊重原创，远离剽窃！</span></span><br></pre></td></tr></table></figure><hr><h2 id="【01x00】concat"><a href="#【01x00】concat" class="headerlink" title="【01x00】concat"></a><font color="#FF0000">【01x00】concat</font></h2><p><code>pandas.concat</code> 可以沿着指定轴将多个对象堆叠到一起。</p><p>官方文档：<a href="https://pandas.pydata.org/docs/reference/api/pandas.concat.html" target="_blank" rel="noopener">https://pandas.pydata.org/docs/reference/api/pandas.concat.html</a></p><p>基本语法：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">pandas.concat(objs: Union[Iterable[‘DataFrame’], Mapping[Optional[Hashable], ‘DataFrame’]],</span><br><span class="line">  axis=<span class="string">'0'</span>,</span><br><span class="line">  join: str = <span class="string">"'outer'"</span>,</span><br><span class="line">  ignore_index: bool = <span class="string">'False'</span>,</span><br><span class="line">  keys=<span class="string">'None'</span>,</span><br><span class="line">  levels=<span class="string">'None'</span>,</span><br><span class="line">  names=<span class="string">'None'</span>,</span><br><span class="line">  verify_integrity: bool = <span class="string">'False'</span>,</span><br><span class="line">  sort: bool = <span class="string">'False'</span>,</span><br><span class="line">  copy: bool = <span class="string">'True'</span>) → ’DataFrame’</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">pandas.concat(objs: Union[Iterable[FrameOrSeriesUnion], Mapping[Optional[Hashable], FrameOrSeriesUnion]],</span><br><span class="line">  axis=<span class="string">'0'</span>,</span><br><span class="line">  join: str = <span class="string">"'outer'"</span>,</span><br><span class="line">  ignore_index: bool = <span class="string">'False'</span>,</span><br><span class="line">  keys=<span class="string">'None'</span>,</span><br><span class="line">  levels=<span class="string">'None'</span>,</span><br><span class="line">  names=<span class="string">'None'</span>,</span><br><span class="line">  verify_integrity: bool = <span class="string">'False'</span>,</span><br><span class="line">  sort: bool = <span class="string">'False'</span>,</span><br><span class="line">  copy: bool = <span class="string">'True'</span>) → FrameOrSeriesUnion</span><br></pre></td></tr></table></figure><p>常用参数描述：</p><table><thead><tr><th>参数</th><th>描述</th></tr></thead><tbody><tr><td>objs</td><td>Series 或 DataFrame 对象的序列或映射，要合并的对象</td></tr><tr><td>axis</td><td>沿指定轴合并，<code>0</code> or <code>‘index’</code>，<code>1</code> or <code>‘columns’</code>，只有在 DataFrame 中才有 <code>1</code> or <code>&#39;columns’</code></td></tr><tr><td>join</td><td>如何处理其他轴（或多个轴）上的索引，可取值：<code>‘inner’</code>，<code>‘outer’</code>（默认值）<br><code>‘outer’</code>：当 axis = 0 时，列名相同的列会合并，其余列都保留（并集），空值填充；<br><code>‘inner’</code>：当 axis = 0 时，列名相同的列会合并，其余列都舍弃（交集）</td></tr><tr><td>ignore_index</td><td>bool 类型，连接后的值是否使用原索引值，如果为 True，则索引将会是 0, 1, …, n-1</td></tr><tr><td>keys</td><td>序列形式，默认 None，传递 keys 后，会构造一个层次索引，即 MultiIndex 对象，keys 为最外层索引</td></tr><tr><td>levels</td><td>用于构造 MultiIndex 的特定级别（唯一值）。未指定则将从键中推断出来</td></tr><tr><td>names</td><td>列表类型，为索引添加标签</td></tr><tr><td>verify_integrity</td><td>bool 类型，是否检查合并后的索引有无重复项，设置为 <code>True</code> 若有重复项则会报错</td></tr><tr><td>sort</td><td>当 <code>join=&#39;outer&#39;</code> 时对列索引进行排序。当 <code>join=&#39;inner&#39;</code> 时此操作无效</td></tr></tbody></table><p>合并两个 Series 对象：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>obj1 = pd.Series([<span class="string">'a'</span>, <span class="string">'b'</span>])</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>obj2 = pd.Series([<span class="string">'c'</span>, <span class="string">'d'</span>])</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>pd.concat([obj1, obj2])</span><br><span class="line"><span class="number">0</span>    a</span><br><span class="line"><span class="number">1</span>    b</span><br><span class="line"><span class="number">0</span>    c</span><br><span class="line"><span class="number">1</span>    d</span><br><span class="line">dtype: object</span><br></pre></td></tr></table></figure><p>设置 <code>ignore_index=True</code>，放弃原有的索引值：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>obj1 = pd.Series([<span class="string">'a'</span>, <span class="string">'b'</span>])</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>obj2 = pd.Series([<span class="string">'c'</span>, <span class="string">'d'</span>])</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>pd.concat([obj1, obj2], ignore_index=<span class="keyword">True</span>)</span><br><span class="line"><span class="number">0</span>    a</span><br><span class="line"><span class="number">1</span>    b</span><br><span class="line"><span class="number">2</span>    c</span><br><span class="line"><span class="number">3</span>    d</span><br><span class="line">dtype: object</span><br></pre></td></tr></table></figure><p>设置 <code>keys</code> 参数，添加最外层的索引：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>obj1 = pd.Series([<span class="string">'a'</span>, <span class="string">'b'</span>])</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>obj2 = pd.Series([<span class="string">'c'</span>, <span class="string">'d'</span>])</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>pd.concat([obj1, obj2], keys=[<span class="string">'s1'</span>, <span class="string">'s2'</span>])</span><br><span class="line">s1  <span class="number">0</span>    a</span><br><span class="line">    <span class="number">1</span>    b</span><br><span class="line">s2  <span class="number">0</span>    c</span><br><span class="line">    <span class="number">1</span>    d</span><br><span class="line">dtype: object</span><br></pre></td></tr></table></figure><p>设置 <code>names</code> 参数，为索引添加标签：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>obj1 = pd.Series([<span class="string">'a'</span>, <span class="string">'b'</span>])</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>obj2 = pd.Series([<span class="string">'c'</span>, <span class="string">'d'</span>])</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>pd.concat([obj1, obj2], keys=[<span class="string">'s1'</span>, <span class="string">'s2'</span>], names=[<span class="string">'Series name'</span>, <span class="string">'Row ID'</span>])</span><br><span class="line">Series name  Row ID</span><br><span class="line">s1           <span class="number">0</span>         a</span><br><span class="line">             <span class="number">1</span>         b</span><br><span class="line">s2           <span class="number">0</span>         c</span><br><span class="line">             <span class="number">1</span>         d</span><br><span class="line">dtype: object</span><br></pre></td></tr></table></figure><p>合并 <code>DataFrame</code> 对象：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>obj1 = pd.DataFrame([[<span class="string">'a'</span>, <span class="number">1</span>], [<span class="string">'b'</span>, <span class="number">2</span>]], columns=[<span class="string">'letter'</span>, <span class="string">'number'</span>])</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>obj2 = pd.DataFrame([[<span class="string">'c'</span>, <span class="number">3</span>], [<span class="string">'d'</span>, <span class="number">4</span>]], columns=[<span class="string">'letter'</span>, <span class="string">'number'</span>])</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>obj1</span><br><span class="line">  letter  number</span><br><span class="line"><span class="number">0</span>      a       <span class="number">1</span></span><br><span class="line"><span class="number">1</span>      b       <span class="number">2</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>obj2</span><br><span class="line">  letter  number</span><br><span class="line"><span class="number">0</span>      c       <span class="number">3</span></span><br><span class="line"><span class="number">1</span>      d       <span class="number">4</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>pd.concat([obj1, obj2])</span><br><span class="line">  letter  number</span><br><span class="line"><span class="number">0</span>      a       <span class="number">1</span></span><br><span class="line"><span class="number">1</span>      b       <span class="number">2</span></span><br><span class="line"><span class="number">0</span>      c       <span class="number">3</span></span><br><span class="line"><span class="number">1</span>      d       <span class="number">4</span></span><br></pre></td></tr></table></figure><p>合并 <code>DataFrame</code> 对象，不存在的值将会被 NaN 填充：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>obj1 = pd.DataFrame([[<span class="string">'a'</span>, <span class="number">1</span>], [<span class="string">'b'</span>, <span class="number">2</span>]], columns=[<span class="string">'letter'</span>, <span class="string">'number'</span>])</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>obj2 = pd.DataFrame([[<span class="string">'c'</span>, <span class="number">3</span>, <span class="string">'cat'</span>], [<span class="string">'d'</span>, <span class="number">4</span>, <span class="string">'dog'</span>]], columns=[<span class="string">'letter'</span>, <span class="string">'number'</span>, <span class="string">'animal'</span>])</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>obj1</span><br><span class="line">  letter  number</span><br><span class="line"><span class="number">0</span>      a       <span class="number">1</span></span><br><span class="line"><span class="number">1</span>      b       <span class="number">2</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>obj2</span><br><span class="line">  letter  number animal</span><br><span class="line"><span class="number">0</span>      c       <span class="number">3</span>    cat</span><br><span class="line"><span class="number">1</span>      d       <span class="number">4</span>    dog</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>pd.concat([obj1, obj2])</span><br><span class="line">  letter  number animal</span><br><span class="line"><span class="number">0</span>      a       <span class="number">1</span>    NaN</span><br><span class="line"><span class="number">1</span>      b       <span class="number">2</span>    NaN</span><br><span class="line"><span class="number">0</span>      c       <span class="number">3</span>    cat</span><br><span class="line"><span class="number">1</span>      d       <span class="number">4</span>    dog</span><br></pre></td></tr></table></figure><p>合并 <code>DataFrame</code> 对象，设置 <code>join=&quot;inner&quot;</code> 不存在的列将会舍弃：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>obj1 = pd.DataFrame([[<span class="string">'a'</span>, <span class="number">1</span>], [<span class="string">'b'</span>, <span class="number">2</span>]], columns=[<span class="string">'letter'</span>, <span class="string">'number'</span>])</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>obj2 = pd.DataFrame([[<span class="string">'c'</span>, <span class="number">3</span>, <span class="string">'cat'</span>], [<span class="string">'d'</span>, <span class="number">4</span>, <span class="string">'dog'</span>]], columns=[<span class="string">'letter'</span>, <span class="string">'number'</span>, <span class="string">'animal'</span>])</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>obj1</span><br><span class="line">  letter  number</span><br><span class="line"><span class="number">0</span>      a       <span class="number">1</span></span><br><span class="line"><span class="number">1</span>      b       <span class="number">2</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>obj2</span><br><span class="line">  letter  number animal</span><br><span class="line"><span class="number">0</span>      c       <span class="number">3</span>    cat</span><br><span class="line"><span class="number">1</span>      d       <span class="number">4</span>    dog</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>pd.concat([obj1, obj2], join=<span class="string">"inner"</span>)</span><br><span class="line">  letter  number</span><br><span class="line"><span class="number">0</span>      a       <span class="number">1</span></span><br><span class="line"><span class="number">1</span>      b       <span class="number">2</span></span><br><span class="line"><span class="number">0</span>      c       <span class="number">3</span></span><br><span class="line"><span class="number">1</span>      d       <span class="number">4</span></span><br></pre></td></tr></table></figure><p>合并 <code>DataFrame</code> 对象，设置 <code>axis=1</code> 沿 y 轴合并（增加列）：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>obj1 = pd.DataFrame([[<span class="string">'a'</span>, <span class="number">1</span>], [<span class="string">'b'</span>, <span class="number">2</span>]], columns=[<span class="string">'letter'</span>, <span class="string">'number'</span>])</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>obj2 = pd.DataFrame([[<span class="string">'bird'</span>, <span class="string">'polly'</span>], [<span class="string">'monkey'</span>, <span class="string">'george'</span>]], columns=[<span class="string">'animal'</span>, <span class="string">'name'</span>])</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>obj1</span><br><span class="line">  letter  number</span><br><span class="line"><span class="number">0</span>      a       <span class="number">1</span></span><br><span class="line"><span class="number">1</span>      b       <span class="number">2</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>obj2</span><br><span class="line">   animal    name</span><br><span class="line"><span class="number">0</span>    bird   polly</span><br><span class="line"><span class="number">1</span>  monkey  george</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>pd.concat([obj1, obj2], axis=<span class="number">1</span>)</span><br><span class="line">  letter  number  animal    name</span><br><span class="line"><span class="number">0</span>      a       <span class="number">1</span>    bird   polly</span><br><span class="line"><span class="number">1</span>      b       <span class="number">2</span>  monkey  george</span><br></pre></td></tr></table></figure><p>设置 <code>verify_integrity=True</code> ，检查新的索引是否有重复项，有重复项会报错：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>obj1 = pd.DataFrame([<span class="number">1</span>], index=[<span class="string">'a'</span>])</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>obj2 = pd.DataFrame([<span class="number">2</span>], index=[<span class="string">'a'</span>])</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>obj1</span><br><span class="line">   <span class="number">0</span></span><br><span class="line">a  <span class="number">1</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>obj2</span><br><span class="line">   <span class="number">0</span></span><br><span class="line">a  <span class="number">2</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>pd.concat([obj1, obj2], verify_integrity=<span class="keyword">True</span>)</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">    ...</span><br><span class="line">ValueError: Indexes have overlapping values: [<span class="string">'a'</span>]</span><br></pre></td></tr></table></figure><p>设置 <code>sort=True</code>，会对列索引进行排序输出：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>obj1 = pd.DataFrame([[<span class="string">'a'</span>, <span class="number">3</span>], [<span class="string">'d'</span>, <span class="number">2</span>]], columns=[<span class="string">'letter'</span>, <span class="string">'number'</span>])</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>obj2 = pd.DataFrame([[<span class="string">'c'</span>, <span class="number">1</span>, <span class="string">'cat'</span>], [<span class="string">'b'</span>, <span class="number">4</span>, <span class="string">'dog'</span>]], columns=[<span class="string">'letter'</span>, <span class="string">'number'</span>, <span class="string">'animal'</span>])</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>obj1</span><br><span class="line">  letter  number</span><br><span class="line"><span class="number">0</span>      a       <span class="number">3</span></span><br><span class="line"><span class="number">1</span>      d       <span class="number">2</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>obj2</span><br><span class="line">  letter  number animal</span><br><span class="line"><span class="number">0</span>      c       <span class="number">1</span>    cat</span><br><span class="line"><span class="number">1</span>      b       <span class="number">4</span>    dog</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>pd.concat([obj1, obj2], sort=<span class="keyword">True</span>)</span><br><span class="line">  animal letter  number</span><br><span class="line"><span class="number">0</span>    NaN      a       <span class="number">3</span></span><br><span class="line"><span class="number">1</span>    NaN      d       <span class="number">2</span></span><br><span class="line"><span class="number">0</span>    cat      c       <span class="number">1</span></span><br><span class="line"><span class="number">1</span>    dog      b       <span class="number">4</span></span><br></pre></td></tr></table></figure><h2 id="【02x00】append"><a href="#【02x00】append" class="headerlink" title="【02x00】append"></a><font color="#FF0000">【02x00】append</font></h2><p>Append 方法事实上是在一个 Series / DataFrame 对象后最追加另一个 Series / DataFrame 对象并返回一个新对象，不改变原对象的值。</p><p>基本语法：</p><ul><li><p><code>Series.append(self, to_append, ignore_index=False, verify_integrity=False)</code></p></li><li><p><code>DataFrame.append(self, other, ignore_index=False, verify_integrity=False, sort=False)</code></p></li></ul><p>官方文档：</p><ul><li><p><a href="https://pandas.pydata.org/docs/reference/api/pandas.Series.append.html" target="_blank" rel="noopener">https://pandas.pydata.org/docs/reference/api/pandas.Series.append.html</a></p></li><li><p><a href="https://pandas.pydata.org/docs/reference/api/pandas.DataFrame.append.html" target="_blank" rel="noopener">https://pandas.pydata.org/docs/reference/api/pandas.DataFrame.append.html</a></p></li></ul><p>参数描述：</p><table><thead><tr><th>参数</th><th>描述</th></tr></thead><tbody><tr><td>to_append / other</td><td>要追加的数据</td></tr><tr><td>ignore_index</td><td>bool 类型，连接后的值是否使用原索引值，如果为 True，则索引将会是 0, 1, …, n-1</td></tr><tr><td>verify_integrity</td><td>bool 类型，是否检查合并后的索引有无重复项，设置为 <code>True</code> 若有重复项则会报错</td></tr><tr><td>sort</td><td>bool 类型，是否对列索引（columns）进行排序，默认 False</td></tr></tbody></table><p>合并 Series 对象：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>obj1 = pd.Series([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>])</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>obj2 = pd.Series([<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>])</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>obj3 = pd.Series([<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>], index=[<span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>])</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>obj1</span><br><span class="line"><span class="number">0</span>    <span class="number">1</span></span><br><span class="line"><span class="number">1</span>    <span class="number">2</span></span><br><span class="line"><span class="number">2</span>    <span class="number">3</span></span><br><span class="line">dtype: int64</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>obj2</span><br><span class="line"><span class="number">0</span>    <span class="number">4</span></span><br><span class="line"><span class="number">1</span>    <span class="number">5</span></span><br><span class="line"><span class="number">2</span>    <span class="number">6</span></span><br><span class="line">dtype: int64</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>obj3</span><br><span class="line"><span class="number">3</span>    <span class="number">4</span></span><br><span class="line"><span class="number">4</span>    <span class="number">5</span></span><br><span class="line"><span class="number">5</span>    <span class="number">6</span></span><br><span class="line">dtype: int64</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>obj1.append(obj2)</span><br><span class="line"><span class="number">0</span>    <span class="number">1</span></span><br><span class="line"><span class="number">1</span>    <span class="number">2</span></span><br><span class="line"><span class="number">2</span>    <span class="number">3</span></span><br><span class="line"><span class="number">0</span>    <span class="number">4</span></span><br><span class="line"><span class="number">1</span>    <span class="number">5</span></span><br><span class="line"><span class="number">2</span>    <span class="number">6</span></span><br><span class="line">dtype: int64</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>obj1.append(obj3)</span><br><span class="line"><span class="number">0</span>    <span class="number">1</span></span><br><span class="line"><span class="number">1</span>    <span class="number">2</span></span><br><span class="line"><span class="number">2</span>    <span class="number">3</span></span><br><span class="line"><span class="number">3</span>    <span class="number">4</span></span><br><span class="line"><span class="number">4</span>    <span class="number">5</span></span><br><span class="line"><span class="number">5</span>    <span class="number">6</span></span><br><span class="line">dtype: int64</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>obj1.append(obj2, ignore_index=<span class="keyword">True</span>)</span><br><span class="line"><span class="number">0</span>    <span class="number">1</span></span><br><span class="line"><span class="number">1</span>    <span class="number">2</span></span><br><span class="line"><span class="number">2</span>    <span class="number">3</span></span><br><span class="line"><span class="number">3</span>    <span class="number">4</span></span><br><span class="line"><span class="number">4</span>    <span class="number">5</span></span><br><span class="line"><span class="number">5</span>    <span class="number">6</span></span><br><span class="line">dtype: int64</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>obj1.append(obj2, verify_integrity=<span class="keyword">True</span>)</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">...</span><br><span class="line">ValueError: Indexes have overlapping values: Int64Index([<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>], dtype=<span class="string">'int64'</span>)</span><br></pre></td></tr></table></figure><p>合并 DataFrame 对象：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>obj1 = pd.DataFrame([[<span class="number">1</span>, <span class="number">2</span>], [<span class="number">3</span>, <span class="number">4</span>]], columns=list(<span class="string">'AB'</span>))</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>obj2 = pd.DataFrame([[<span class="number">5</span>, <span class="number">6</span>], [<span class="number">7</span>, <span class="number">8</span>]], columns=list(<span class="string">'AB'</span>))</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>obj1</span><br><span class="line">   A  B</span><br><span class="line"><span class="number">0</span>  <span class="number">1</span>  <span class="number">2</span></span><br><span class="line"><span class="number">1</span>  <span class="number">3</span>  <span class="number">4</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>obj2</span><br><span class="line">   A  B</span><br><span class="line"><span class="number">0</span>  <span class="number">5</span>  <span class="number">6</span></span><br><span class="line"><span class="number">1</span>  <span class="number">7</span>  <span class="number">8</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>obj1.append(obj2)</span><br><span class="line">   A  B</span><br><span class="line"><span class="number">0</span>  <span class="number">1</span>  <span class="number">2</span></span><br><span class="line"><span class="number">1</span>  <span class="number">3</span>  <span class="number">4</span></span><br><span class="line"><span class="number">0</span>  <span class="number">5</span>  <span class="number">6</span></span><br><span class="line"><span class="number">1</span>  <span class="number">7</span>  <span class="number">8</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>obj1.append(obj2, ignore_index=<span class="keyword">True</span>)</span><br><span class="line">   A  B</span><br><span class="line"><span class="number">0</span>  <span class="number">1</span>  <span class="number">2</span></span><br><span class="line"><span class="number">1</span>  <span class="number">3</span>  <span class="number">4</span></span><br><span class="line"><span class="number">2</span>  <span class="number">5</span>  <span class="number">6</span></span><br><span class="line"><span class="number">3</span>  <span class="number">7</span>  <span class="number">8</span></span><br></pre></td></tr></table></figure><p>以下虽然不是生成 DataFrames 的推荐方法，但演示了从多个数据源生成 DataFrames 的两种方法：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>obj = pd.DataFrame(columns=[<span class="string">'A'</span>])</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">5</span>):</span><br><span class="line">obj = obj.append(&#123;<span class="string">'A'</span>: i&#125;, ignore_index=<span class="keyword">True</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>obj</span><br><span class="line">   A</span><br><span class="line"><span class="number">0</span>  <span class="number">0</span></span><br><span class="line"><span class="number">1</span>  <span class="number">1</span></span><br><span class="line"><span class="number">2</span>  <span class="number">2</span></span><br><span class="line"><span class="number">3</span>  <span class="number">3</span></span><br><span class="line"><span class="number">4</span>  <span class="number">4</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>pd.concat([pd.DataFrame([i], columns=[<span class="string">'A'</span>]) <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">5</span>)], ignore_index=<span class="keyword">True</span>)</span><br><span class="line">   A</span><br><span class="line"><span class="number">0</span>  <span class="number">0</span></span><br><span class="line"><span class="number">1</span>  <span class="number">1</span></span><br><span class="line"><span class="number">2</span>  <span class="number">2</span></span><br><span class="line"><span class="number">3</span>  <span class="number">3</span></span><br><span class="line"><span class="number">4</span>  <span class="number">4</span></span><br></pre></td></tr></table></figure><h2 id="【03x00】merge"><a href="#【03x00】merge" class="headerlink" title="【03x00】merge"></a><font color="#FF0000">【03x00】merge</font></h2><p>将不同的数据源进行合并是数据科学中常见的操作，这既包括将两个不同的数据集非常简单地拼接在一起，也包括用数据库那样的连接（join）与合并（merge）操作处理有重叠字段的数据集。Series 与DataFrame 都具备这类操作，Pandas 的函数与方法让数据合并变得快速简单。</p><p>数据集的合并（merge）或连接（join）运算是通过一个或多个键将行连接起来的。这些运算是关系型数据库（基于SQL）的核心。Pandas 的 merge 函数是对数据应用这些算法的主要切入点。</p><font color="#FF0000"> <strong><code>pandas.merge</code> 可根据一个或多个连接键将不同 DataFrame 中的行连接起来。</strong></font><p>基本语法：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">pandas.merge(left,</span><br><span class="line"> right,</span><br><span class="line"> how: str = <span class="string">'inner'</span>,</span><br><span class="line"> on=<span class="keyword">None</span>,</span><br><span class="line"> left_on=<span class="keyword">None</span>,</span><br><span class="line"> right_on=<span class="keyword">None</span>,</span><br><span class="line"> left_index: bool = <span class="keyword">False</span>,</span><br><span class="line"> right_index: bool = <span class="keyword">False</span>,</span><br><span class="line"> sort: bool = <span class="keyword">False</span>,</span><br><span class="line"> suffixes=<span class="string">'_x'</span>, <span class="string">'_y'</span>,</span><br><span class="line"> copy: bool = <span class="keyword">True</span>,</span><br><span class="line"> indicator: bool = <span class="keyword">False</span>,</span><br><span class="line"> validate=<span class="keyword">None</span>) → ’DataFrame’</span><br></pre></td></tr></table></figure><p>官方文档：<a href="https://pandas.pydata.org/docs/reference/api/pandas.merge.html" target="_blank" rel="noopener">https://pandas.pydata.org/docs/reference/api/pandas.merge.html</a></p><p>常见参数描述：</p><table><thead><tr><th>参数</th><th>描述</th></tr></thead><tbody><tr><td>left</td><td>参与合并的左侧 DataFrame 对象</td></tr><tr><td>right</td><td>参与合并的右侧 DataFrame 对象</td></tr><tr><td>how</td><td>合并方式，默认 <code>&#39;inner&#39;</code><br><code>&#39;inner&#39;</code>：内连接，即使用两个对象中<font color="#FF0000"><strong>都有</strong></font>的键（交集）；<br><code>&#39;outer&#39;</code>：外连接，即使用两个对象中<font color="#FF0000"><strong>所有</strong></font>的键（并集）；<br><code>&#39;left&#39;</code>：左连接，即使用<font color="#FF0000"><strong>左</strong></font>对象中所有的键；<br><code>&#39;right&#39;</code>：右连接，即使用<font color="#FF0000"><strong>右</strong></font>对象中所有的键；</td></tr><tr><td>on</td><td>用于连接的列名。必须存在于左右两个 Dataframe对象中<br>如果未指定，且其他连接键也未指定，则以 left 和 right 列名的交集作为连接键</td></tr><tr><td>left_on</td><td>左侧 DataFrame 对象中用作连接键的列</td></tr><tr><td>right_on</td><td>右侧 DataFrame 对象中用作连接键的列</td></tr><tr><td>left_index</td><td>bool 类型，是否使用左侧 DataFrame 对象中的索引（index）作为连接键，默认 False</td></tr><tr><td>right_index</td><td>bool 类型，是否使用右侧 DataFrame 对象中的索引（index）作为连接键，默认 False</td></tr><tr><td>sort</td><td>bool 类型，是否在结果中按顺序对连接键排序，默认 False。<br>如果为 False，则连接键的顺序取决于联接类型（how 关键字）</td></tr><tr><td>suffixes</td><td>字符串值元组，用于追加到重叠列名的末尾，默认为 <code>(&#39;_x&#39;, &#39;_y&#39;)</code>。<br>例如，如果左右两个 DataFrame 对象都有 <code>data</code> 列时，则结果中就会出现 <code>data_x</code> 和 <code>data_y</code></td></tr></tbody></table><h3 id="【03x01】一对一连接"><a href="#【03x01】一对一连接" class="headerlink" title="【03x01】一对一连接"></a><font color="#4876FF">【03x01】一对一连接</font></h3><font color="#FF0000"><strong>一对一连接是指两个 DataFrame 对象的列的值没有重复值。</strong></font><p>如果不指定任何参数，调用 <code>merge</code> 方法，<code>merge</code> 就会将重叠的列的列名当做键来合并。</p><p>在下面的示例中，两个 DataFrame 对象都有一个列名为 <code>key</code> 的列，未指定按照哪一列来合并，<code>merge</code> 就会默认按照 <code>key</code> 来合并：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>obj1 = pd.DataFrame(&#123;<span class="string">'key'</span>: [<span class="string">'b'</span>, <span class="string">'a'</span>, <span class="string">'c'</span>], <span class="string">'data1'</span>: range(<span class="number">3</span>)&#125;)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>obj2 = pd.DataFrame(&#123;<span class="string">'key'</span>: [<span class="string">'a'</span>, <span class="string">'c'</span>, <span class="string">'b'</span>], <span class="string">'data2'</span>: range(<span class="number">3</span>)&#125;)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>obj1</span><br><span class="line">  key  data1</span><br><span class="line"><span class="number">0</span>   b      <span class="number">0</span></span><br><span class="line"><span class="number">1</span>   a      <span class="number">1</span></span><br><span class="line"><span class="number">2</span>   c      <span class="number">2</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>obj2</span><br><span class="line">  key  data2</span><br><span class="line"><span class="number">0</span>   a      <span class="number">0</span></span><br><span class="line"><span class="number">1</span>   c      <span class="number">1</span></span><br><span class="line"><span class="number">2</span>   b      <span class="number">2</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>pd.merge(obj1, obj2)</span><br><span class="line">  key  data1  data2</span><br><span class="line"><span class="number">0</span>   b      <span class="number">0</span>      <span class="number">2</span></span><br><span class="line"><span class="number">1</span>   a      <span class="number">1</span>      <span class="number">0</span></span><br><span class="line"><span class="number">2</span>   c      <span class="number">2</span>      <span class="number">1</span></span><br></pre></td></tr></table></figure><h3 id="【03x02】多对一连接"><a href="#【03x02】多对一连接" class="headerlink" title="【03x02】多对一连接"></a><font color="#4876FF">【03x02】多对一连接</font></h3><font color="#FF0000"><strong>多对一连接是指两个 DataFrame 对象中，有一个的列的值有重复值。</strong></font>通过多对一连接获得的结果，DataFrame  将会保留重复值。<br><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>obj1 = pd.DataFrame(&#123;<span class="string">'key'</span>: [<span class="string">'b'</span>, <span class="string">'b'</span>, <span class="string">'a'</span>, <span class="string">'c'</span>, <span class="string">'a'</span>, <span class="string">'a'</span>, <span class="string">'b'</span>], <span class="string">'data1'</span>: range(<span class="number">7</span>)&#125;)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>obj2 = pd.DataFrame(&#123;<span class="string">'key'</span>: [<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'d'</span>], <span class="string">'data2'</span>: range(<span class="number">3</span>)&#125;)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>obj1</span><br><span class="line">  key  data1</span><br><span class="line"><span class="number">0</span>   b      <span class="number">0</span></span><br><span class="line"><span class="number">1</span>   b      <span class="number">1</span></span><br><span class="line"><span class="number">2</span>   a      <span class="number">2</span></span><br><span class="line"><span class="number">3</span>   c      <span class="number">3</span></span><br><span class="line"><span class="number">4</span>   a      <span class="number">4</span></span><br><span class="line"><span class="number">5</span>   a      <span class="number">5</span></span><br><span class="line"><span class="number">6</span>   b      <span class="number">6</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>obj2</span><br><span class="line">  key  data2</span><br><span class="line"><span class="number">0</span>   a      <span class="number">0</span></span><br><span class="line"><span class="number">1</span>   b      <span class="number">1</span></span><br><span class="line"><span class="number">2</span>   d      <span class="number">2</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>pd.merge(obj1, obj2)</span><br><span class="line">  key  data1  data2</span><br><span class="line"><span class="number">0</span>   b      <span class="number">0</span>      <span class="number">1</span></span><br><span class="line"><span class="number">1</span>   b      <span class="number">1</span>      <span class="number">1</span></span><br><span class="line"><span class="number">2</span>   b      <span class="number">6</span>      <span class="number">1</span></span><br><span class="line"><span class="number">3</span>   a      <span class="number">2</span>      <span class="number">0</span></span><br><span class="line"><span class="number">4</span>   a      <span class="number">4</span>      <span class="number">0</span></span><br><span class="line"><span class="number">5</span>   a      <span class="number">5</span>      <span class="number">0</span></span><br></pre></td></tr></table></figure><br><br>### <font color="#4876FF">【03x03】多对多连接</font><font color="#FF0000"><strong>多对多连接是指两个 DataFrame 对象中的列的值都有重复值。</strong></font><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>obj1 = pd.DataFrame(&#123;<span class="string">'key'</span>: [<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>], <span class="string">'data1'</span>: range(<span class="number">4</span>)&#125;)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>obj2 = pd.DataFrame(&#123;<span class="string">'key'</span>: [<span class="string">'a'</span>, <span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>, <span class="string">'c'</span>], <span class="string">'data2'</span>: range(<span class="number">6</span>)&#125;)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>obj1</span><br><span class="line">  key  data1</span><br><span class="line"><span class="number">0</span>   a      <span class="number">0</span></span><br><span class="line"><span class="number">1</span>   b      <span class="number">1</span></span><br><span class="line"><span class="number">2</span>   b      <span class="number">2</span></span><br><span class="line"><span class="number">3</span>   c      <span class="number">3</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>obj2</span><br><span class="line">  key  data2</span><br><span class="line"><span class="number">0</span>   a      <span class="number">0</span></span><br><span class="line"><span class="number">1</span>   a      <span class="number">1</span></span><br><span class="line"><span class="number">2</span>   b      <span class="number">2</span></span><br><span class="line"><span class="number">3</span>   b      <span class="number">3</span></span><br><span class="line"><span class="number">4</span>   c      <span class="number">4</span></span><br><span class="line"><span class="number">5</span>   c      <span class="number">5</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>pd.merge(obj1, obj2)</span><br><span class="line">  key  data1  data2</span><br><span class="line"><span class="number">0</span>   a      <span class="number">0</span>      <span class="number">0</span></span><br><span class="line"><span class="number">1</span>   a      <span class="number">0</span>      <span class="number">1</span></span><br><span class="line"><span class="number">2</span>   b      <span class="number">1</span>      <span class="number">2</span></span><br><span class="line"><span class="number">3</span>   b      <span class="number">1</span>      <span class="number">3</span></span><br><span class="line"><span class="number">4</span>   b      <span class="number">2</span>      <span class="number">2</span></span><br><span class="line"><span class="number">5</span>   b      <span class="number">2</span>      <span class="number">3</span></span><br><span class="line"><span class="number">6</span>   c      <span class="number">3</span>      <span class="number">4</span></span><br><span class="line"><span class="number">7</span>   c      <span class="number">3</span>      <span class="number">5</span></span><br></pre></td></tr></table></figure><hr><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">这里是一段防爬虫文本，请读者忽略。</span></span><br><span class="line"><span class="string">本文原创首发于</span> <span class="string">CSDN，作者</span> <span class="string">TRHX。</span></span><br><span class="line"><span class="string">博客首页：https://itrhx.blog.csdn.net/</span></span><br><span class="line"><span class="string">本文链接：https://itrhx.blog.csdn.net/article/details/106830112</span></span><br><span class="line"><span class="string">未经授权，禁止转载！恶意转载，后果自负！尊重原创，远离剽窃！</span></span><br></pre></td></tr></table></figure><hr><h3 id="【03x04】参数-on-left-on-right-on"><a href="#【03x04】参数-on-left-on-right-on" class="headerlink" title="【03x04】参数 on / left_on / right_on"></a><font color="#4876FF">【03x04】参数 on / left_on / right_on</font></h3><p>参数 <code>on</code> 用于指定按照某一列来进行合并，若不指定该参数，则会默认按照重叠的列的列名当做键来合并：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>obj1 = pd.DataFrame(&#123;<span class="string">'key'</span>: [<span class="string">'b'</span>, <span class="string">'a'</span>, <span class="string">'c'</span>], <span class="string">'data1'</span>: range(<span class="number">3</span>)&#125;)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>obj2 = pd.DataFrame(&#123;<span class="string">'key'</span>: [<span class="string">'a'</span>, <span class="string">'c'</span>, <span class="string">'b'</span>], <span class="string">'data2'</span>: range(<span class="number">3</span>)&#125;)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>obj1</span><br><span class="line">  key  data1</span><br><span class="line"><span class="number">0</span>   b      <span class="number">0</span></span><br><span class="line"><span class="number">1</span>   a      <span class="number">1</span></span><br><span class="line"><span class="number">2</span>   c      <span class="number">2</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>obj2</span><br><span class="line">  key  data2</span><br><span class="line"><span class="number">0</span>   a      <span class="number">0</span></span><br><span class="line"><span class="number">1</span>   c      <span class="number">1</span></span><br><span class="line"><span class="number">2</span>   b      <span class="number">2</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>pd.merge(obj1, obj2, on=<span class="string">'key'</span>)</span><br><span class="line">  key  data1  data2</span><br><span class="line"><span class="number">0</span>   b      <span class="number">0</span>      <span class="number">2</span></span><br><span class="line"><span class="number">1</span>   a      <span class="number">1</span>      <span class="number">0</span></span><br><span class="line"><span class="number">2</span>   c      <span class="number">2</span>      <span class="number">1</span></span><br></pre></td></tr></table></figure><p>如果要根据多个键进行合并，传入一个由列名组成的列表即可：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>left = pd.DataFrame(&#123;<span class="string">'key1'</span>: [<span class="string">'foo'</span>, <span class="string">'foo'</span>, <span class="string">'bar'</span>],</span><br><span class="line"> <span class="string">'key2'</span>: [<span class="string">'one'</span>, <span class="string">'two'</span>, <span class="string">'one'</span>],</span><br><span class="line"> <span class="string">'lval'</span>: [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]&#125;)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>right = pd.DataFrame(&#123;<span class="string">'key1'</span>: [<span class="string">'foo'</span>, <span class="string">'foo'</span>, <span class="string">'bar'</span>, <span class="string">'bar'</span>],</span><br><span class="line">  <span class="string">'key2'</span>: [<span class="string">'one'</span>, <span class="string">'one'</span>, <span class="string">'one'</span>, <span class="string">'two'</span>],</span><br><span class="line">  <span class="string">'rval'</span>: [<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>]&#125;)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>left</span><br><span class="line">  key1 key2  lval</span><br><span class="line"><span class="number">0</span>  foo  one     <span class="number">1</span></span><br><span class="line"><span class="number">1</span>  foo  two     <span class="number">2</span></span><br><span class="line"><span class="number">2</span>  bar  one     <span class="number">3</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>right</span><br><span class="line">  key1 key2  rval</span><br><span class="line"><span class="number">0</span>  foo  one     <span class="number">4</span></span><br><span class="line"><span class="number">1</span>  foo  one     <span class="number">5</span></span><br><span class="line"><span class="number">2</span>  bar  one     <span class="number">6</span></span><br><span class="line"><span class="number">3</span>  bar  two     <span class="number">7</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>pd.merge(left, right, on=[<span class="string">'key1'</span>, <span class="string">'key2'</span>])</span><br><span class="line">  key1 key2  lval  rval</span><br><span class="line"><span class="number">0</span>  foo  one     <span class="number">1</span>     <span class="number">4</span></span><br><span class="line"><span class="number">1</span>  foo  one     <span class="number">1</span>     <span class="number">5</span></span><br><span class="line"><span class="number">2</span>  bar  one     <span class="number">3</span>     <span class="number">6</span></span><br></pre></td></tr></table></figure><p>如果两个对象的列名不同，就可以使用 <code>left_on</code>、<code>right_on</code> 参数分别进行指定：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>obj1 = pd.DataFrame(&#123;<span class="string">'lkey'</span>: [<span class="string">'b'</span>, <span class="string">'b'</span>, <span class="string">'a'</span>, <span class="string">'c'</span>, <span class="string">'a'</span>, <span class="string">'a'</span>, <span class="string">'b'</span>], <span class="string">'data1'</span>: range(<span class="number">7</span>)&#125;)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>obj2 = pd.DataFrame(&#123;<span class="string">'rkey'</span>: [<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'d'</span>], <span class="string">'data2'</span>: range(<span class="number">3</span>)&#125;)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>obj1</span><br><span class="line">  lkey  data1</span><br><span class="line"><span class="number">0</span>    b      <span class="number">0</span></span><br><span class="line"><span class="number">1</span>    b      <span class="number">1</span></span><br><span class="line"><span class="number">2</span>    a      <span class="number">2</span></span><br><span class="line"><span class="number">3</span>    c      <span class="number">3</span></span><br><span class="line"><span class="number">4</span>    a      <span class="number">4</span></span><br><span class="line"><span class="number">5</span>    a      <span class="number">5</span></span><br><span class="line"><span class="number">6</span>    b      <span class="number">6</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>obj2</span><br><span class="line">  rkey  data2</span><br><span class="line"><span class="number">0</span>    a      <span class="number">0</span></span><br><span class="line"><span class="number">1</span>    b      <span class="number">1</span></span><br><span class="line"><span class="number">2</span>    d      <span class="number">2</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>pd.merge(obj1, obj2, left_on=<span class="string">'lkey'</span>, right_on=<span class="string">'rkey'</span>)</span><br><span class="line">  lkey  data1 rkey  data2</span><br><span class="line"><span class="number">0</span>    b      <span class="number">0</span>    b      <span class="number">1</span></span><br><span class="line"><span class="number">1</span>    b      <span class="number">1</span>    b      <span class="number">1</span></span><br><span class="line"><span class="number">2</span>    b      <span class="number">6</span>    b      <span class="number">1</span></span><br><span class="line"><span class="number">3</span>    a      <span class="number">2</span>    a      <span class="number">0</span></span><br><span class="line"><span class="number">4</span>    a      <span class="number">4</span>    a      <span class="number">0</span></span><br><span class="line"><span class="number">5</span>    a      <span class="number">5</span>    a      <span class="number">0</span></span><br></pre></td></tr></table></figure><h3 id="【03x05】参数-how"><a href="#【03x05】参数-how" class="headerlink" title="【03x05】参数 how"></a><font color="#4876FF">【03x05】参数 how</font></h3><p>在前面的示例中，结果里面 c 和 d 以及与之相关的数据消失了。默认情况下，<code>merge</code> 做的是内连接（<code>&#39;inner&#39;</code>），结果中的键是交集。其他方式还有：<code>&#39;left&#39;</code>、<code>&#39;right&#39;</code>、<code>&#39;outer&#39;</code>，含义如下：</p><ul><li><code>&#39;inner&#39;</code>：内连接，即使用两个对象中<font color="#FF0000"><strong>都有</strong></font>的键（交集）；</li><li><code>&#39;outer&#39;</code>：外连接，即使用两个对象中<font color="#FF0000"><strong>所有</strong></font>的键（并集）；</li><li><code>&#39;left&#39;</code>：左连接，即使用<font color="#FF0000"><strong>左</strong></font>对象中所有的键；</li><li><code>&#39;right&#39;</code>：右连接，即使用<font color="#FF0000"><strong>右</strong></font>对象中所有的键；</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>obj1 = pd.DataFrame(&#123;<span class="string">'key'</span>: [<span class="string">'b'</span>, <span class="string">'b'</span>, <span class="string">'a'</span>, <span class="string">'c'</span>, <span class="string">'a'</span>, <span class="string">'a'</span>, <span class="string">'b'</span>], <span class="string">'data1'</span>: range(<span class="number">7</span>)&#125;)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>obj2 = pd.DataFrame(&#123;<span class="string">'key'</span>: [<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'d'</span>], <span class="string">'data2'</span>: range(<span class="number">3</span>)&#125;)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>obj1</span><br><span class="line">  key  data1</span><br><span class="line"><span class="number">0</span>   b      <span class="number">0</span></span><br><span class="line"><span class="number">1</span>   b      <span class="number">1</span></span><br><span class="line"><span class="number">2</span>   a      <span class="number">2</span></span><br><span class="line"><span class="number">3</span>   c      <span class="number">3</span></span><br><span class="line"><span class="number">4</span>   a      <span class="number">4</span></span><br><span class="line"><span class="number">5</span>   a      <span class="number">5</span></span><br><span class="line"><span class="number">6</span>   b      <span class="number">6</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>obj2</span><br><span class="line">  key  data2</span><br><span class="line"><span class="number">0</span>   a      <span class="number">0</span></span><br><span class="line"><span class="number">1</span>   b      <span class="number">1</span></span><br><span class="line"><span class="number">2</span>   d      <span class="number">2</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>pd.merge(obj1, obj2, on=<span class="string">'key'</span>, how=<span class="string">'inner'</span>)</span><br><span class="line">  key  data1  data2</span><br><span class="line"><span class="number">0</span>   b      <span class="number">0</span>      <span class="number">1</span></span><br><span class="line"><span class="number">1</span>   b      <span class="number">1</span>      <span class="number">1</span></span><br><span class="line"><span class="number">2</span>   b      <span class="number">6</span>      <span class="number">1</span></span><br><span class="line"><span class="number">3</span>   a      <span class="number">2</span>      <span class="number">0</span></span><br><span class="line"><span class="number">4</span>   a      <span class="number">4</span>      <span class="number">0</span></span><br><span class="line"><span class="number">5</span>   a      <span class="number">5</span>      <span class="number">0</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>pd.merge(obj1, obj2, on=<span class="string">'key'</span>, how=<span class="string">'outer'</span>)</span><br><span class="line">  key  data1  data2</span><br><span class="line"><span class="number">0</span>   b    <span class="number">0.0</span>    <span class="number">1.0</span></span><br><span class="line"><span class="number">1</span>   b    <span class="number">1.0</span>    <span class="number">1.0</span></span><br><span class="line"><span class="number">2</span>   b    <span class="number">6.0</span>    <span class="number">1.0</span></span><br><span class="line"><span class="number">3</span>   a    <span class="number">2.0</span>    <span class="number">0.0</span></span><br><span class="line"><span class="number">4</span>   a    <span class="number">4.0</span>    <span class="number">0.0</span></span><br><span class="line"><span class="number">5</span>   a    <span class="number">5.0</span>    <span class="number">0.0</span></span><br><span class="line"><span class="number">6</span>   c    <span class="number">3.0</span>    NaN</span><br><span class="line"><span class="number">7</span>   d    NaN    <span class="number">2.0</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>pd.merge(obj1, obj2, on=<span class="string">'key'</span>, how=<span class="string">'left'</span>)</span><br><span class="line">  key  data1  data2</span><br><span class="line"><span class="number">0</span>   b      <span class="number">0</span>    <span class="number">1.0</span></span><br><span class="line"><span class="number">1</span>   b      <span class="number">1</span>    <span class="number">1.0</span></span><br><span class="line"><span class="number">2</span>   a      <span class="number">2</span>    <span class="number">0.0</span></span><br><span class="line"><span class="number">3</span>   c      <span class="number">3</span>    NaN</span><br><span class="line"><span class="number">4</span>   a      <span class="number">4</span>    <span class="number">0.0</span></span><br><span class="line"><span class="number">5</span>   a      <span class="number">5</span>    <span class="number">0.0</span></span><br><span class="line"><span class="number">6</span>   b      <span class="number">6</span>    <span class="number">1.0</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>pd.merge(obj1, obj2, on=<span class="string">'key'</span>, how=<span class="string">'right'</span>)</span><br><span class="line">  key  data1  data2</span><br><span class="line"><span class="number">0</span>   b    <span class="number">0.0</span>      <span class="number">1</span></span><br><span class="line"><span class="number">1</span>   b    <span class="number">1.0</span>      <span class="number">1</span></span><br><span class="line"><span class="number">2</span>   b    <span class="number">6.0</span>      <span class="number">1</span></span><br><span class="line"><span class="number">3</span>   a    <span class="number">2.0</span>      <span class="number">0</span></span><br><span class="line"><span class="number">4</span>   a    <span class="number">4.0</span>      <span class="number">0</span></span><br><span class="line"><span class="number">5</span>   a    <span class="number">5.0</span>      <span class="number">0</span></span><br><span class="line"><span class="number">6</span>   d    NaN      <span class="number">2</span></span><br></pre></td></tr></table></figure><h3 id="【03x06】参数-suffixes"><a href="#【03x06】参数-suffixes" class="headerlink" title="【03x06】参数 suffixes"></a><font color="#4876FF">【03x06】参数 suffixes</font></h3><p><code>suffixes</code> 参数用于指定附加到左右两个 DataFrame 对象的重叠列名上的字符串：</p><p>在以下示例中，选择按照 <code>key1</code> 进行合并，而两个 DataFrame 对象都包含 <code>key2</code> 列，如果未指定 <code>suffixes</code> 参数，则默认会为两个对象的 <code>key2</code> 加上 <code>_x</code> 和 <code>_y</code>，以便区分它们，如果指定了 <code>suffixes</code> 参数，就会按照添加指定的后缀：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>left = pd.DataFrame(&#123;<span class="string">'key1'</span>: [<span class="string">'foo'</span>, <span class="string">'foo'</span>, <span class="string">'bar'</span>],</span><br><span class="line"> <span class="string">'key2'</span>: [<span class="string">'one'</span>, <span class="string">'two'</span>, <span class="string">'one'</span>],</span><br><span class="line"> <span class="string">'lval'</span>: [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]&#125;)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>right = pd.DataFrame(&#123;<span class="string">'key1'</span>: [<span class="string">'foo'</span>, <span class="string">'foo'</span>, <span class="string">'bar'</span>, <span class="string">'bar'</span>],</span><br><span class="line">  <span class="string">'key2'</span>: [<span class="string">'one'</span>, <span class="string">'one'</span>, <span class="string">'one'</span>, <span class="string">'two'</span>],</span><br><span class="line">  <span class="string">'rval'</span>: [<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>]&#125;)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>left</span><br><span class="line">  key1 key2  lval</span><br><span class="line"><span class="number">0</span>  foo  one     <span class="number">1</span></span><br><span class="line"><span class="number">1</span>  foo  two     <span class="number">2</span></span><br><span class="line"><span class="number">2</span>  bar  one     <span class="number">3</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>right</span><br><span class="line">  key1 key2  rval</span><br><span class="line"><span class="number">0</span>  foo  one     <span class="number">4</span></span><br><span class="line"><span class="number">1</span>  foo  one     <span class="number">5</span></span><br><span class="line"><span class="number">2</span>  bar  one     <span class="number">6</span></span><br><span class="line"><span class="number">3</span>  bar  two     <span class="number">7</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>pd.merge(left, right, on=<span class="string">'key1'</span>)</span><br><span class="line">  key1 key2_x  lval key2_y  rval</span><br><span class="line"><span class="number">0</span>  foo    one     <span class="number">1</span>    one     <span class="number">4</span></span><br><span class="line"><span class="number">1</span>  foo    one     <span class="number">1</span>    one     <span class="number">5</span></span><br><span class="line"><span class="number">2</span>  foo    two     <span class="number">2</span>    one     <span class="number">4</span></span><br><span class="line"><span class="number">3</span>  foo    two     <span class="number">2</span>    one     <span class="number">5</span></span><br><span class="line"><span class="number">4</span>  bar    one     <span class="number">3</span>    one     <span class="number">6</span></span><br><span class="line"><span class="number">5</span>  bar    one     <span class="number">3</span>    two     <span class="number">7</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>pd.merge(left, right, on=<span class="string">'key1'</span>, suffixes=(<span class="string">'_left'</span>, <span class="string">'_right'</span>))</span><br><span class="line">  key1 key2_left  lval key2_right  rval</span><br><span class="line"><span class="number">0</span>  foo       one     <span class="number">1</span>        one     <span class="number">4</span></span><br><span class="line"><span class="number">1</span>  foo       one     <span class="number">1</span>        one     <span class="number">5</span></span><br><span class="line"><span class="number">2</span>  foo       two     <span class="number">2</span>        one     <span class="number">4</span></span><br><span class="line"><span class="number">3</span>  foo       two     <span class="number">2</span>        one     <span class="number">5</span></span><br><span class="line"><span class="number">4</span>  bar       one     <span class="number">3</span>        one     <span class="number">6</span></span><br><span class="line"><span class="number">5</span>  bar       one     <span class="number">3</span>        two     <span class="number">7</span></span><br></pre></td></tr></table></figure><h3 id="【03x07】参数-left-index-right-index"><a href="#【03x07】参数-left-index-right-index" class="headerlink" title="【03x07】参数 left_index / right_index"></a><font color="#4876FF">【03x07】参数 left_index / right_index</font></h3><p>有时候，DataFrame 中的连接键位于其索引中。在这种情况下，可以使用 <code>left_index=True</code> 或<code>right_index=True</code>（或两个都传）以说明索引应该被用作连接键。这种方法称为按索引连接，在 Pandas 中还有个 <code>join</code> 方法可以实现这个功能。</p><p>在以下示例中，按照 left 的 key 列进行连接，而 right 对象的连接键位于其索引中，因此要指定 <code>right_index=True</code>：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>left = pd.DataFrame(&#123;<span class="string">'key'</span>: [<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'a'</span>, <span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>], <span class="string">'value'</span>: range(<span class="number">6</span>)&#125;)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>right = pd.DataFrame(&#123;<span class="string">'group_val'</span>: [<span class="number">3.5</span>, <span class="number">7</span>]&#125;, index=[<span class="string">'a'</span>, <span class="string">'b'</span>])</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>left</span><br><span class="line">  key  value</span><br><span class="line"><span class="number">0</span>   a      <span class="number">0</span></span><br><span class="line"><span class="number">1</span>   b      <span class="number">1</span></span><br><span class="line"><span class="number">2</span>   a      <span class="number">2</span></span><br><span class="line"><span class="number">3</span>   a      <span class="number">3</span></span><br><span class="line"><span class="number">4</span>   b      <span class="number">4</span></span><br><span class="line"><span class="number">5</span>   c      <span class="number">5</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>right</span><br><span class="line">   group_val</span><br><span class="line">a        <span class="number">3.5</span></span><br><span class="line">b        <span class="number">7.0</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>pd.merge(left, right, left_on=<span class="string">'key'</span>, right_index=<span class="keyword">True</span>)</span><br><span class="line">  key  value  group_val</span><br><span class="line"><span class="number">0</span>   a      <span class="number">0</span>        <span class="number">3.5</span></span><br><span class="line"><span class="number">2</span>   a      <span class="number">2</span>        <span class="number">3.5</span></span><br><span class="line"><span class="number">3</span>   a      <span class="number">3</span>        <span class="number">3.5</span></span><br><span class="line"><span class="number">1</span>   b      <span class="number">1</span>        <span class="number">7.0</span></span><br><span class="line"><span class="number">4</span>   b      <span class="number">4</span>        <span class="number">7.0</span></span><br></pre></td></tr></table></figure><h2 id="【04x00】join"><a href="#【04x00】join" class="headerlink" title="【04x00】join"></a><font color="#FF0000">【04x00】join</font></h2><p>join 方法只适用于 DataFrame 对象，Series 对象没有该方法，该方法用于连接另一个 DataFrame 对象的列（columns）。</p><p>基本语法：<code>DataFrame.join(self, other, on=None, how=&#39;left&#39;, lsuffix=&#39;&#39;, rsuffix=&#39;&#39;, sort=False) → ’DataFrame’</code></p><p>参数描述：</p><table><thead><tr><th>参数</th><th>描述</th></tr></thead><tbody><tr><td>other</td><td>另一个 DataFrame、Series 或 DataFrame 列表对象</td></tr><tr><td>on</td><td>列名称，或者列名称组成的列表、元组，连接的列</td></tr><tr><td>how</td><td>合并方式，默认 <code>&#39;left&#39;</code><br><code>&#39;inner&#39;</code>：内连接，即使用两个对象中<font color="#FF0000"><strong>都有</strong></font>的键（交集）；<br><code>&#39;outer&#39;</code>：外连接，即使用两个对象中<font color="#FF0000"><strong>所有</strong></font>的键（并集）；<br><code>&#39;left&#39;</code>：左连接，即使用<font color="#FF0000"><strong>左</strong></font>对象中所有的键；<br><code>&#39;right&#39;</code>：右连接，即使用<font color="#FF0000"><strong>右</strong></font>对象中所有的键；</td></tr><tr><td>lsuffix</td><td>当两个对象有相同的列名时，合并后左边数据列名的后缀</td></tr><tr><td>rsuffix</td><td>当两个对象有相同的列名时，合并后右边数据列名的后缀</td></tr><tr><td>sort</td><td>bool 类型，是否在结果中按顺序对连接键排序，默认 False。<br>如果为 False，则连接键的顺序取决于联接类型（how 关键字）</td></tr></tbody></table><p>使用 <code>lsuffix</code> 和 <code>rsuffix</code> 参数：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>obj = pd.DataFrame(&#123;<span class="string">'key'</span>: [<span class="string">'K0'</span>, <span class="string">'K1'</span>, <span class="string">'K2'</span>, <span class="string">'K3'</span>, <span class="string">'K4'</span>, <span class="string">'K5'</span>],</span><br><span class="line"><span class="string">'A'</span>: [<span class="string">'A0'</span>, <span class="string">'A1'</span>, <span class="string">'A2'</span>, <span class="string">'A3'</span>, <span class="string">'A4'</span>, <span class="string">'A5'</span>]&#125;)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>other = pd.DataFrame(&#123;<span class="string">'key'</span>: [<span class="string">'K0'</span>, <span class="string">'K1'</span>, <span class="string">'K2'</span>],</span><br><span class="line">  <span class="string">'B'</span>: [<span class="string">'B0'</span>, <span class="string">'B1'</span>, <span class="string">'B2'</span>]&#125;)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>obj</span><br><span class="line">  key   A</span><br><span class="line"><span class="number">0</span>  K0  A0</span><br><span class="line"><span class="number">1</span>  K1  A1</span><br><span class="line"><span class="number">2</span>  K2  A2</span><br><span class="line"><span class="number">3</span>  K3  A3</span><br><span class="line"><span class="number">4</span>  K4  A4</span><br><span class="line"><span class="number">5</span>  K5  A5</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>other</span><br><span class="line">  key   B</span><br><span class="line"><span class="number">0</span>  K0  B0</span><br><span class="line"><span class="number">1</span>  K1  B1</span><br><span class="line"><span class="number">2</span>  K2  B2</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>obj.join(other, lsuffix=<span class="string">'_1'</span>, rsuffix=<span class="string">'_2'</span>)</span><br><span class="line">  key_1   A key_2    B</span><br><span class="line"><span class="number">0</span>    K0  A0    K0   B0</span><br><span class="line"><span class="number">1</span>    K1  A1    K1   B1</span><br><span class="line"><span class="number">2</span>    K2  A2    K2   B2</span><br><span class="line"><span class="number">3</span>    K3  A3   NaN  NaN</span><br><span class="line"><span class="number">4</span>    K4  A4   NaN  NaN</span><br><span class="line"><span class="number">5</span>    K5  A5   NaN  NaN</span><br></pre></td></tr></table></figure><p>如果右表的索引是左表的某一列的值，这时可以将右表的索引和左表的列对齐合并这样的灵活方式进行合并：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>obj = pd.DataFrame(&#123;<span class="string">'A'</span>: [<span class="string">'A0'</span>, <span class="string">'A1'</span>, <span class="string">'A2'</span>, <span class="string">'A3'</span>], <span class="string">'B'</span>: [<span class="string">'B0'</span>, <span class="string">'B1'</span>, <span class="string">'B2'</span>, <span class="string">'B3'</span>],<span class="string">'key'</span>: [<span class="string">'K0'</span>, <span class="string">'K1'</span>, <span class="string">'K0'</span>, <span class="string">'K1'</span>]&#125;)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>other = pd.DataFrame(&#123;<span class="string">'C'</span>: [<span class="string">'C0'</span>, <span class="string">'C1'</span>],<span class="string">'D'</span>: [<span class="string">'D0'</span>, <span class="string">'D1'</span>]&#125;,index=[<span class="string">'K0'</span>, <span class="string">'K1'</span>])</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>obj</span><br><span class="line">    A   B key</span><br><span class="line"><span class="number">0</span>  A0  B0  K0</span><br><span class="line"><span class="number">1</span>  A1  B1  K1</span><br><span class="line"><span class="number">2</span>  A2  B2  K0</span><br><span class="line"><span class="number">3</span>  A3  B3  K1</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>other</span><br><span class="line">     C   D</span><br><span class="line">K0  C0  D0</span><br><span class="line">K1  C1  D1</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>obj.join(other, on=<span class="string">'key'</span>)</span><br><span class="line">    A   B key   C   D</span><br><span class="line"><span class="number">0</span>  A0  B0  K0  C0  D0</span><br><span class="line"><span class="number">1</span>  A1  B1  K1  C1  D1</span><br><span class="line"><span class="number">2</span>  A2  B2  K0  C0  D0</span><br><span class="line"><span class="number">3</span>  A3  B3  K1  C1  D1</span><br></pre></td></tr></table></figure><h2 id="【05x00】四种方法的区别"><a href="#【05x00】四种方法的区别" class="headerlink" title="【05x00】四种方法的区别"></a><font color="#FF0000">【05x00】四种方法的区别</font></h2><ul><li><p><code>concat</code>：可用于两个或多个 Series 或 DataFrame 对象间，通过 <code>axis</code> 参数指定按照行方向（增加行）或列方向（增加列）进合并操作，默认行合并（增加行），取并集；</p></li><li><p><code>append</code>：在一个 Series 或 DataFrame 对象后最追加另一个 Series 或 DataFrame 对象并返回一个新对象，不改变原对象的值。只能按行合并（增加行）。</p></li><li><p><code>merge</code>：只能对两个 DataFrame 对象进行合并，一般按照列方向（增加列）进行合并操作，按照行方向合并一般用 join 方法代替，默认列合并（增加列），取交集；</p></li><li><p><code>join</code>：只能对两个 DataFrame 对象进行合并，按照列方向（增加列）进行合并操作，默认左连接。</p></li></ul><hr><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">这里是一段防爬虫文本，请读者忽略。</span></span><br><span class="line"><span class="string">本文原创首发于</span> <span class="string">CSDN，作者</span> <span class="string">TRHX。</span></span><br><span class="line"><span class="string">博客首页：https://itrhx.blog.csdn.net/</span></span><br><span class="line"><span class="string">本文链接：https://itrhx.blog.csdn.net/article/details/106830112</span></span><br><span class="line"><span class="string">未经授权，禁止转载！恶意转载，后果自负！尊重原创，远离剽窃！</span></span><br></pre></td></tr></table></figure><hr>]]></content>
    
    <summary type="html">
    
      Python 数据分析三剑客之 Pandas（七）：数据集的合并。
    
    </summary>
    
      <category term="Python 数据分析" scheme="https://www.itrhx.com/categories/Python-%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/"/>
    
      <category term="Pandas" scheme="https://www.itrhx.com/categories/Python-%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/Pandas/"/>
    
    
      <category term="Pandas" scheme="https://www.itrhx.com/tags/Pandas/"/>
    
      <category term="合并数据集" scheme="https://www.itrhx.com/tags/%E5%90%88%E5%B9%B6%E6%95%B0%E6%8D%AE%E9%9B%86/"/>
    
  </entry>
  
  <entry>
    <title>Python 数据分析三剑客之 Pandas（六）：GroupBy 数据分裂/应用/合并</title>
    <link href="https://www.itrhx.com/2020/06/17/A84-Pandas-06/"/>
    <id>https://www.itrhx.com/2020/06/17/A84-Pandas-06/</id>
    <published>2020-06-17T15:58:49.204Z</published>
    <updated>2020-07-06T13:45:04.513Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>Pandas 系列文章：</p><ul><li><a href="https://www.itrhx.com/2020/06/11/A79-Pandas-01/">Python 数据分析三剑客之 Pandas（一）：认识 Pandas 及其 Series、DataFrame 对象</a></li><li><a href="https://www.itrhx.com/2020/06/13/A80-Pandas-02/">Python 数据分析三剑客之 Pandas（二）：Index 索引对象以及各种索引操作</a></li><li><a href="https://www.itrhx.com/2020/06/14/A81-Pandas-03/">Python 数据分析三剑客之 Pandas（三）：算术运算与缺失值的处理</a></li><li><a href="https://www.itrhx.com/2020/06/15/A82-Pandas-04/">Python 数据分析三剑客之 Pandas（四）：函数应用、映射、排序和层级索引</a></li><li><a href="https://www.itrhx.com/2020/06/16/A83-Pandas-05/">Python 数据分析三剑客之 Pandas（五）：统计计算与统计描述</a></li><li><a href="https://www.itrhx.com/2020/06/17/A84-Pandas-06/">Python 数据分析三剑客之 Pandas（六）：GroupBy 数据分裂、应用与合并</a></li><li><a href="https://www.itrhx.com/2020/06/21/A85-Pandas-07/">Python 数据分析三剑客之 Pandas（七）：合并数据集</a></li><li><a href="https://www.itrhx.com/2020/06/22/A86-Pandas-08/">Python 数据分析三剑客之 Pandas（八）：数据重塑、重复数据处理与数据替换</a></li><li><a href="https://www.itrhx.com/2020/06/25/A87-Pandas-09/">Python 数据分析三剑客之 Pandas（九）：时间序列</a></li><li><a href="https://www.itrhx.com/2020/06/26/A88-Pandas-10/">Python 数据分析三剑客之 Pandas（十）：数据读写</a></li></ul><hr><p>专栏：</p><p>【<a href="https://www.itrhx.com/categories/Python-%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/NumPy/">NumPy 专栏</a>】【<a href="https://www.itrhx.com/categories/Python-%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/Pandas/">Pandas 专栏</a>】【<a href="https://www.itrhx.com/categories/Python-%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/Matplotlib/">Matplotlib 专栏</a>】</p><p>推荐学习资料与网站：</p><p>【<a href="https://www.numpy.org.cn/" target="_blank" rel="noopener">NumPy 中文网</a>】【<a href="https://www.pypandas.cn/" target="_blank" rel="noopener">Pandas 中文网</a>】【<a href="https://www.matplotlib.org.cn/" target="_blank" rel="noopener">Matplotlib 中文网</a>】【<a href="https://github.com/TRHX/Python-quick-reference-table" target="_blank" rel="noopener">NumPy、Matplotlib、Pandas 速查表</a>】</p><hr><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">这里是一段防爬虫文本，请读者忽略。</span></span><br><span class="line"><span class="string">本文原创首发于</span> <span class="string">CSDN，作者</span> <span class="string">TRHX。</span></span><br><span class="line"><span class="string">博客首页：https://itrhx.blog.csdn.net/</span></span><br><span class="line"><span class="string">本文链接：https://itrhx.blog.csdn.net/article/details/106804881</span></span><br><span class="line"><span class="string">未经授权，禁止转载！恶意转载，后果自负！尊重原创，远离剽窃！</span></span><br></pre></td></tr></table></figure><hr><h2 id="【01x00】GroupBy-机制"><a href="#【01x00】GroupBy-机制" class="headerlink" title="【01x00】GroupBy 机制"></a><font color="#FF0000">【01x00】GroupBy 机制</font></h2><p>对数据集进行分组并对各组应用一个函数（无论是聚合还是转换），通常是数据分析工作中的重要环节。在将数据集加载、融合、准备好之后，通常就是计算分组统计或生成透视表。Pandas 提供了一个灵活高效的 GroupBy 功能，虽然“分组”（group by）这个名字是借用 SQL 数据库语言的命令，但其理念引用发明 R 语言 frame 的 Hadley Wickham 的观点可能更合适：分裂（Split）、应用（Apply）和组合（Combine）。</p><p>分组运算过程：Split —&gt; Apply —&gt; Combine</p><ul><li>分裂（Split）：根据某些标准将数据分组；</li><li>应用（Apply）：对每个组独立应用一个函数；</li><li>合并（Combine）：把每个分组的计算结果合并起来。</li></ul><p>官方介绍：<a href="https://pandas.pydata.org/docs/user_guide/groupby.html" target="_blank" rel="noopener">https://pandas.pydata.org/docs/user_guide/groupby.html</a></p><p><img src="https://cdn.jsdelivr.net/gh/TRHX/ImageHosting/ITRHX-PIC/A84/01.png" alt="01"></p><h2 id="【02x00】GroupBy-对象"><a href="#【02x00】GroupBy-对象" class="headerlink" title="【02x00】GroupBy 对象"></a><font color="#FF0000">【02x00】GroupBy 对象</font></h2><p>常见的 GroupBy 对象：Series.groupby、DataFrame.groupby，基本语法如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Series.groupby(self,</span><br><span class="line">   by=<span class="keyword">None</span>,</span><br><span class="line">   axis=<span class="number">0</span>,</span><br><span class="line">   level=<span class="keyword">None</span>,</span><br><span class="line">   as_index: bool = <span class="keyword">True</span>,</span><br><span class="line">   sort: bool = <span class="keyword">True</span>,</span><br><span class="line">   group_keys: bool = <span class="keyword">True</span>,</span><br><span class="line">   squeeze: bool = <span class="keyword">False</span>,</span><br><span class="line">   observed: bool = <span class="keyword">False</span>) → ’groupby_generic.SeriesGroupBy’</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">DataFrame.groupby(self,</span><br><span class="line">  by=<span class="keyword">None</span>,</span><br><span class="line">  axis=<span class="number">0</span>,</span><br><span class="line">  level=<span class="keyword">None</span>,</span><br><span class="line">  as_index: bool = <span class="keyword">True</span>,</span><br><span class="line">  sort: bool = <span class="keyword">True</span>,</span><br><span class="line">  group_keys: bool = <span class="keyword">True</span>,</span><br><span class="line">  squeeze: bool = <span class="keyword">False</span>,</span><br><span class="line">  observed: bool = <span class="keyword">False</span>) → ’groupby_generic.DataFrameGroupBy’</span><br></pre></td></tr></table></figure><p>官方文档：</p><ul><li><p><a href="https://pandas.pydata.org/docs/reference/api/pandas.Series.groupby.html" target="_blank" rel="noopener">https://pandas.pydata.org/docs/reference/api/pandas.Series.groupby.html</a></p></li><li><p><a href="https://pandas.pydata.org/docs/reference/api/pandas.DataFrame.groupby.html" target="_blank" rel="noopener">https://pandas.pydata.org/docs/reference/api/pandas.DataFrame.groupby.html</a></p></li></ul><p>常用参数解释如下：</p><table><thead><tr><th>参数</th><th>描述</th></tr></thead><tbody><tr><td>by</td><td>映射、函数、标签或标签列表，用于确定分组依据的分组。如果 by 是函数，则会在对象索引的每个值上调用它。 <br>如果传递了 dict 或 Series，则将使用 Series 或 dict 的值来确定组（将 Series 的值首先对齐；请参见.align() 方法）。<br> 如果传递了 ndarray，则按原样使用这些值来确定组。标签或标签列表可以按自身中的列传递给分组。 注意，元组被解释为（单个）键</td></tr><tr><td>axis</td><td>沿指定轴拆分，默认 <code>0</code>，<code>0</code> or <code>‘index’</code>，<code>1</code> or <code>‘columns’</code>，只有在 DataFrame 中才有 <code>1</code> or <code>&#39;columns’</code></td></tr><tr><td>level</td><td>如果轴是  MultiIndex（层次结构），则按特定层级进行分组，默认 None</td></tr><tr><td>as_index</td><td>bool 类型，默认 True，对于聚合输出，返回以组标签为索引的对象。仅与 DataFrame 输入相关。<br><code>as_index=False</code> 实际上是“SQL样式”分组输出</td></tr><tr><td>sort</td><td>bool 类型，默认 True，对组键排序。关闭此选项可获得更好的性能。注：这不影响每组的观察顺序。Groupby 保留每个组中行的顺序</td></tr><tr><td>group_keys</td><td>bool 类型，默认 True，调用 apply 方法时，是否将组键（keys）添加到索引（ index）以标识块</td></tr><tr><td>squeeze</td><td>bool 类型，默认 False，如果可能，减少返回类型的维度，否则返回一致的类型</td></tr></tbody></table><p>groupby() 进行分组，GroupBy 对象没有进行实际运算，只是包含分组的中间数据，示例如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>data = &#123;<span class="string">'key1'</span> : [<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'a'</span>, <span class="string">'a'</span>],</span><br><span class="line"><span class="string">'key2'</span> : [<span class="string">'one'</span>, <span class="string">'one'</span>, <span class="string">'two'</span>, <span class="string">'three'</span>, <span class="string">'two'</span>, <span class="string">'two'</span>, <span class="string">'one'</span>, <span class="string">'three'</span>],</span><br><span class="line"><span class="string">'data1'</span>: np.random.randn(<span class="number">8</span>),</span><br><span class="line"><span class="string">'data2'</span>: np.random.randn(<span class="number">8</span>)&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>obj = pd.DataFrame(data)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>obj</span><br><span class="line">  key1   key2     data1     data2</span><br><span class="line"><span class="number">0</span>    a    one <span class="number">-0.804160</span> <span class="number">-0.868905</span></span><br><span class="line"><span class="number">1</span>    b    one <span class="number">-0.086990</span>  <span class="number">0.325741</span></span><br><span class="line"><span class="number">2</span>    a    two  <span class="number">0.757992</span>  <span class="number">0.541101</span></span><br><span class="line"><span class="number">3</span>    b  three <span class="number">-0.281435</span>  <span class="number">0.097841</span></span><br><span class="line"><span class="number">4</span>    a    two  <span class="number">0.817757</span> <span class="number">-0.643699</span></span><br><span class="line"><span class="number">5</span>    b    two <span class="number">-0.462760</span> <span class="number">-0.321196</span></span><br><span class="line"><span class="number">6</span>    a    one <span class="number">-0.403699</span>  <span class="number">0.602138</span></span><br><span class="line"><span class="number">7</span>    a  three  <span class="number">0.883940</span> <span class="number">-0.850526</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>obj.groupby(<span class="string">'key1'</span>)</span><br><span class="line">&lt;pandas.core.groupby.generic.DataFrameGroupBy object at <span class="number">0x03CDB7C0</span>&gt;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>obj[<span class="string">'data1'</span>].groupby(obj[<span class="string">'key1'</span>])</span><br><span class="line">&lt;pandas.core.groupby.generic.SeriesGroupBy object at <span class="number">0x03CDB748</span>&gt;</span><br></pre></td></tr></table></figure><h2 id="【03x00】GroupBy-Split-数据分裂"><a href="#【03x00】GroupBy-Split-数据分裂" class="headerlink" title="【03x00】GroupBy Split 数据分裂"></a><font color="#FF0000">【03x00】GroupBy Split 数据分裂</font></h2><h3 id="【03x01】分组运算"><a href="#【03x01】分组运算" class="headerlink" title="【03x01】分组运算"></a><font color="#4876FF">【03x01】分组运算</font></h3><p>前面通过 <code>groupby()</code> 方法获得了一个 GroupBy 对象，它实际上还没有进行任何计算，只是含有一些有关分组键 <code>obj[&#39;key1&#39;]</code> 的中间数据而已。换句话说，该对象已经有了接下来对各分组执行运算所需的一切信息。例如，我们可以调用 GroupBy 的 <code>mean()</code> 方法来计算分组平均值，<code>size()</code> 方法返回每个分组的元素个数：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>data = &#123;<span class="string">'key1'</span> : [<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'a'</span>, <span class="string">'a'</span>],</span><br><span class="line"><span class="string">'key2'</span> : [<span class="string">'one'</span>, <span class="string">'one'</span>, <span class="string">'two'</span>, <span class="string">'three'</span>, <span class="string">'two'</span>, <span class="string">'two'</span>, <span class="string">'one'</span>, <span class="string">'three'</span>],</span><br><span class="line"><span class="string">'data1'</span>: np.random.randn(<span class="number">8</span>),</span><br><span class="line"><span class="string">'data2'</span>: np.random.randn(<span class="number">8</span>)&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>obj = pd.DataFrame(data)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>obj</span><br><span class="line">  key1   key2     data1     data2</span><br><span class="line"><span class="number">0</span>    a    one <span class="number">-0.544099</span> <span class="number">-0.614079</span></span><br><span class="line"><span class="number">1</span>    b    one  <span class="number">2.193712</span>  <span class="number">0.101005</span></span><br><span class="line"><span class="number">2</span>    a    two <span class="number">-0.004683</span>  <span class="number">0.882770</span></span><br><span class="line"><span class="number">3</span>    b  three  <span class="number">0.312858</span>  <span class="number">1.732105</span></span><br><span class="line"><span class="number">4</span>    a    two  <span class="number">0.011089</span>  <span class="number">0.089587</span></span><br><span class="line"><span class="number">5</span>    b    two  <span class="number">0.292165</span>  <span class="number">1.327638</span></span><br><span class="line"><span class="number">6</span>    a    one <span class="number">-1.433291</span> <span class="number">-0.238971</span></span><br><span class="line"><span class="number">7</span>    a  three <span class="number">-0.004724</span> <span class="number">-2.117326</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>grouped1 = obj.groupby(<span class="string">'key1'</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>grouped2 = obj[<span class="string">'data1'</span>].groupby(obj[<span class="string">'key1'</span>])</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>grouped1.mean()</span><br><span class="line">         data1     data2</span><br><span class="line">key1                    </span><br><span class="line">a    <span class="number">-0.395142</span> <span class="number">-0.399604</span></span><br><span class="line">b     <span class="number">0.932912</span>  <span class="number">1.053583</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>grouped2.mean()</span><br><span class="line">key1</span><br><span class="line">a   <span class="number">-0.395142</span></span><br><span class="line">b    <span class="number">0.932912</span></span><br><span class="line">Name: data1, dtype: float64</span><br><span class="line">&gt;&gt;&gt;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>grouped1.size()</span><br><span class="line">key1</span><br><span class="line">a    <span class="number">5</span></span><br><span class="line">b    <span class="number">3</span></span><br><span class="line">dtype: int64</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>grouped2.size()</span><br><span class="line">key1</span><br><span class="line">a    <span class="number">5</span></span><br><span class="line">b    <span class="number">3</span></span><br><span class="line">Name: data1, dtype: int64</span><br></pre></td></tr></table></figure><h3 id="【03x02】按类型按列分组"><a href="#【03x02】按类型按列分组" class="headerlink" title="【03x02】按类型按列分组"></a><font color="#4876FF">【03x02】按类型按列分组</font></h3><p><code>groupby()</code> 方法 <code>axis</code> 参数默认是 0，通过设置也可以在其他任何轴上进行分组，也支持按照类型（dtype）进行分组：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>data = &#123;<span class="string">'key1'</span> : [<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'a'</span>, <span class="string">'a'</span>],</span><br><span class="line"><span class="string">'key2'</span> : [<span class="string">'one'</span>, <span class="string">'one'</span>, <span class="string">'two'</span>, <span class="string">'three'</span>, <span class="string">'two'</span>, <span class="string">'two'</span>, <span class="string">'one'</span>, <span class="string">'three'</span>],</span><br><span class="line"><span class="string">'data1'</span>: np.random.randn(<span class="number">8</span>),</span><br><span class="line"><span class="string">'data2'</span>: np.random.randn(<span class="number">8</span>)&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>obj = pd.DataFrame(data)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>obj</span><br><span class="line">  key1   key2     data1     data2</span><br><span class="line"><span class="number">0</span>    a    one <span class="number">-0.607009</span>  <span class="number">1.948301</span></span><br><span class="line"><span class="number">1</span>    b    one  <span class="number">0.150818</span> <span class="number">-0.025095</span></span><br><span class="line"><span class="number">2</span>    a    two <span class="number">-2.086024</span>  <span class="number">0.358164</span></span><br><span class="line"><span class="number">3</span>    b  three  <span class="number">0.446061</span>  <span class="number">1.708797</span></span><br><span class="line"><span class="number">4</span>    a    two  <span class="number">0.745457</span> <span class="number">-0.980948</span></span><br><span class="line"><span class="number">5</span>    b    two  <span class="number">0.981877</span>  <span class="number">2.159327</span></span><br><span class="line"><span class="number">6</span>    a    one  <span class="number">0.804480</span> <span class="number">-0.499661</span></span><br><span class="line"><span class="number">7</span>    a  three  <span class="number">0.112884</span>  <span class="number">0.004367</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>obj.dtypes</span><br><span class="line">key1      object</span><br><span class="line">key2      object</span><br><span class="line">data1    float64</span><br><span class="line">data2    float64</span><br><span class="line">dtype: object</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>obj.groupby(obj.dtypes, axis=<span class="number">1</span>).size()</span><br><span class="line">float64    <span class="number">2</span></span><br><span class="line">object     <span class="number">2</span></span><br><span class="line">dtype: int64</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>obj.groupby(obj.dtypes, axis=<span class="number">1</span>).sum()</span><br><span class="line">    float64  object</span><br><span class="line"><span class="number">0</span>  <span class="number">1.341291</span>    aone</span><br><span class="line"><span class="number">1</span>  <span class="number">0.125723</span>    bone</span><br><span class="line"><span class="number">2</span> <span class="number">-1.727860</span>    atwo</span><br><span class="line"><span class="number">3</span>  <span class="number">2.154858</span>  bthree</span><br><span class="line"><span class="number">4</span> <span class="number">-0.235491</span>    atwo</span><br><span class="line"><span class="number">5</span>  <span class="number">3.141203</span>    btwo</span><br><span class="line"><span class="number">6</span>  <span class="number">0.304819</span>    aone</span><br><span class="line"><span class="number">7</span>  <span class="number">0.117251</span>  athree</span><br></pre></td></tr></table></figure><h3 id="【03x03】自定义分组"><a href="#【03x03】自定义分组" class="headerlink" title="【03x03】自定义分组"></a><font color="#4876FF">【03x03】自定义分组</font></h3><p><code>groupby()</code> 方法中可以一次传入多个数组的列表，也可以自定义一组分组键。也可以通过一个字典、一个函数，或者按照索引层级进行分组。</p><p>传入多个数组的列表：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>data = &#123;<span class="string">'key1'</span> : [<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'a'</span>, <span class="string">'a'</span>],</span><br><span class="line"><span class="string">'key2'</span> : [<span class="string">'one'</span>, <span class="string">'one'</span>, <span class="string">'two'</span>, <span class="string">'three'</span>, <span class="string">'two'</span>, <span class="string">'two'</span>, <span class="string">'one'</span>, <span class="string">'three'</span>],</span><br><span class="line"><span class="string">'data1'</span>: np.random.randn(<span class="number">8</span>),</span><br><span class="line"><span class="string">'data2'</span>: np.random.randn(<span class="number">8</span>)&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>obj = pd.DataFrame(data)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>obj</span><br><span class="line">  key1   key2     data1     data2</span><br><span class="line"><span class="number">0</span>    a    one <span class="number">-0.841652</span>  <span class="number">0.688055</span></span><br><span class="line"><span class="number">1</span>    b    one  <span class="number">0.510042</span> <span class="number">-0.561171</span></span><br><span class="line"><span class="number">2</span>    a    two <span class="number">-0.418862</span> <span class="number">-0.145983</span></span><br><span class="line"><span class="number">3</span>    b  three <span class="number">-1.104698</span>  <span class="number">0.563158</span></span><br><span class="line"><span class="number">4</span>    a    two  <span class="number">0.329527</span> <span class="number">-0.893108</span></span><br><span class="line"><span class="number">5</span>    b    two  <span class="number">0.753653</span> <span class="number">-0.342520</span></span><br><span class="line"><span class="number">6</span>    a    one <span class="number">-0.882527</span> <span class="number">-1.121329</span></span><br><span class="line"><span class="number">7</span>    a  three  <span class="number">1.726794</span>  <span class="number">0.160244</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>means = obj[<span class="string">'data1'</span>].groupby([obj[<span class="string">'key1'</span>], obj[<span class="string">'key2'</span>]]).mean()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>means</span><br><span class="line">key1  key2 </span><br><span class="line">a     one     <span class="number">-0.862090</span></span><br><span class="line">      three    <span class="number">1.726794</span></span><br><span class="line">      two     <span class="number">-0.044667</span></span><br><span class="line">b     one      <span class="number">0.510042</span></span><br><span class="line">      three   <span class="number">-1.104698</span></span><br><span class="line">      two      <span class="number">0.753653</span></span><br><span class="line">Name: data1, dtype: float64</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>means.unstack()</span><br><span class="line">key2       one     three       two</span><br><span class="line">key1                              </span><br><span class="line">a    <span class="number">-0.862090</span>  <span class="number">1.726794</span> <span class="number">-0.044667</span></span><br><span class="line">b     <span class="number">0.510042</span> <span class="number">-1.104698</span>  <span class="number">0.753653</span></span><br></pre></td></tr></table></figure><p>自定义分组键：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>obj = pd.DataFrame(&#123;<span class="string">'key1'</span> : [<span class="string">'a'</span>, <span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'b'</span>, <span class="string">'a'</span>],</span><br><span class="line"><span class="string">'key2'</span> : [<span class="string">'one'</span>, <span class="string">'two'</span>, <span class="string">'one'</span>, <span class="string">'two'</span>, <span class="string">'one'</span>],</span><br><span class="line"><span class="string">'data1'</span> : np.random.randn(<span class="number">5</span>),</span><br><span class="line"><span class="string">'data2'</span> : np.random.randn(<span class="number">5</span>)&#125;)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>obj</span><br><span class="line">  key1 key2     data1     data2</span><br><span class="line"><span class="number">0</span>    a  one <span class="number">-0.024003</span>  <span class="number">0.350480</span></span><br><span class="line"><span class="number">1</span>    a  two <span class="number">-0.767534</span> <span class="number">-0.100426</span></span><br><span class="line"><span class="number">2</span>    b  one <span class="number">-0.594983</span> <span class="number">-1.945580</span></span><br><span class="line"><span class="number">3</span>    b  two <span class="number">-0.374482</span>  <span class="number">0.817592</span></span><br><span class="line"><span class="number">4</span>    a  one  <span class="number">0.755452</span> <span class="number">-0.137759</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>states = np.array([<span class="string">'Wuhan'</span>, <span class="string">'Beijing'</span>, <span class="string">'Beijing'</span>, <span class="string">'Wuhan'</span>, <span class="string">'Wuhan'</span>])</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>years = np.array([<span class="number">2005</span>, <span class="number">2005</span>, <span class="number">2006</span>, <span class="number">2005</span>, <span class="number">2006</span>])</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>obj[<span class="string">'data1'</span>].groupby([states, years]).mean()</span><br><span class="line">Beijing  <span class="number">2005</span>   <span class="number">-0.767534</span></span><br><span class="line">         <span class="number">2006</span>   <span class="number">-0.594983</span></span><br><span class="line">Wuhan    <span class="number">2005</span>   <span class="number">-0.199242</span></span><br><span class="line">         <span class="number">2006</span>    <span class="number">0.755452</span></span><br><span class="line">Name: data1, dtype: float64</span><br></pre></td></tr></table></figure><h4 id="【03x03x01】字典分组"><a href="#【03x03x01】字典分组" class="headerlink" title="【03x03x01】字典分组"></a><font color="#FFA500">【03x03x01】字典分组</font></h4><p>通过字典进行分组：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>obj = pd.DataFrame(np.random.randint(<span class="number">1</span>, <span class="number">10</span>, (<span class="number">5</span>,<span class="number">5</span>)),</span><br><span class="line">columns=[<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>, <span class="string">'d'</span>, <span class="string">'e'</span>],</span><br><span class="line">index=[<span class="string">'A'</span>, <span class="string">'B'</span>, <span class="string">'C'</span>, <span class="string">'D'</span>, <span class="string">'E'</span>])</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>obj</span><br><span class="line">   a  b  c  d  e</span><br><span class="line">A  <span class="number">1</span>  <span class="number">4</span>  <span class="number">7</span>  <span class="number">1</span>  <span class="number">9</span></span><br><span class="line">B  <span class="number">8</span>  <span class="number">2</span>  <span class="number">4</span>  <span class="number">7</span>  <span class="number">8</span></span><br><span class="line">C  <span class="number">9</span>  <span class="number">8</span>  <span class="number">2</span>  <span class="number">5</span>  <span class="number">1</span></span><br><span class="line">D  <span class="number">2</span>  <span class="number">4</span>  <span class="number">2</span>  <span class="number">8</span>  <span class="number">3</span></span><br><span class="line">E  <span class="number">7</span>  <span class="number">5</span>  <span class="number">7</span>  <span class="number">2</span>  <span class="number">3</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>obj_dict = &#123;<span class="string">'a'</span>:<span class="string">'Python'</span>, <span class="string">'b'</span>:<span class="string">'Python'</span>, <span class="string">'c'</span>:<span class="string">'Java'</span>, <span class="string">'d'</span>:<span class="string">'C++'</span>, <span class="string">'e'</span>:<span class="string">'Java'</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>obj.groupby(obj_dict, axis=<span class="number">1</span>).size()</span><br><span class="line">C++       <span class="number">1</span></span><br><span class="line">Java      <span class="number">2</span></span><br><span class="line">Python    <span class="number">2</span></span><br><span class="line">dtype: int64</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>obj.groupby(obj_dict, axis=<span class="number">1</span>).count()</span><br><span class="line">   C++  Java  Python</span><br><span class="line">A    <span class="number">1</span>     <span class="number">2</span>       <span class="number">2</span></span><br><span class="line">B    <span class="number">1</span>     <span class="number">2</span>       <span class="number">2</span></span><br><span class="line">C    <span class="number">1</span>     <span class="number">2</span>       <span class="number">2</span></span><br><span class="line">D    <span class="number">1</span>     <span class="number">2</span>       <span class="number">2</span></span><br><span class="line">E    <span class="number">1</span>     <span class="number">2</span>       <span class="number">2</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>obj.groupby(obj_dict, axis=<span class="number">1</span>).sum()</span><br><span class="line">   C++  Java  Python</span><br><span class="line">A    <span class="number">1</span>    <span class="number">16</span>       <span class="number">5</span></span><br><span class="line">B    <span class="number">7</span>    <span class="number">12</span>      <span class="number">10</span></span><br><span class="line">C    <span class="number">5</span>     <span class="number">3</span>      <span class="number">17</span></span><br><span class="line">D    <span class="number">8</span>     <span class="number">5</span>       <span class="number">6</span></span><br><span class="line">E    <span class="number">2</span>    <span class="number">10</span>      <span class="number">12</span></span><br></pre></td></tr></table></figure><h4 id="【03x03x02】函数分组"><a href="#【03x03x02】函数分组" class="headerlink" title="【03x03x02】函数分组"></a><font color="#FFA500">【03x03x02】函数分组</font></h4><p>通过函数进行分组：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>obj = pd.DataFrame(np.random.randint(<span class="number">1</span>, <span class="number">10</span>, (<span class="number">5</span>,<span class="number">5</span>)),</span><br><span class="line">columns=[<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>, <span class="string">'d'</span>, <span class="string">'e'</span>],</span><br><span class="line">index=[<span class="string">'AA'</span>, <span class="string">'BBB'</span>, <span class="string">'CC'</span>, <span class="string">'D'</span>, <span class="string">'EE'</span>])</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>obj</span><br><span class="line">     a  b  c  d  e</span><br><span class="line">AA   <span class="number">3</span>  <span class="number">9</span>  <span class="number">5</span>  <span class="number">8</span>  <span class="number">2</span></span><br><span class="line">BBB  <span class="number">1</span>  <span class="number">4</span>  <span class="number">2</span>  <span class="number">2</span>  <span class="number">6</span></span><br><span class="line">CC   <span class="number">9</span>  <span class="number">2</span>  <span class="number">4</span>  <span class="number">7</span>  <span class="number">6</span></span><br><span class="line">D    <span class="number">2</span>  <span class="number">5</span>  <span class="number">5</span>  <span class="number">7</span>  <span class="number">1</span></span><br><span class="line">EE   <span class="number">8</span>  <span class="number">8</span>  <span class="number">8</span>  <span class="number">2</span>  <span class="number">2</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="function"><span class="keyword">def</span> <span class="title">group_key</span><span class="params">(idx)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">        idx 为列索引或行索引</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line"><span class="keyword">return</span> len(idx)</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>obj.groupby(group_key).size()    <span class="comment"># 等价于 obj.groupby(len).size()</span></span><br><span class="line"><span class="number">1</span>    <span class="number">1</span></span><br><span class="line"><span class="number">2</span>    <span class="number">3</span></span><br><span class="line"><span class="number">3</span>    <span class="number">1</span></span><br><span class="line">dtype: int64</span><br></pre></td></tr></table></figure><h4 id="【03x03x03】索引层级分组"><a href="#【03x03x03】索引层级分组" class="headerlink" title="【03x03x03】索引层级分组"></a><font color="#FFA500">【03x03x03】索引层级分组</font></h4><p>通过不同索引层级进行分组：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>columns = pd.MultiIndex.from_arrays([[<span class="string">'Python'</span>, <span class="string">'Java'</span>, <span class="string">'Python'</span>, <span class="string">'Java'</span>, <span class="string">'Python'</span>],</span><br><span class="line">[<span class="string">'A'</span>, <span class="string">'A'</span>, <span class="string">'B'</span>, <span class="string">'C'</span>, <span class="string">'B'</span>]], names=[<span class="string">'language'</span>, <span class="string">'index'</span>])</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>obj = pd.DataFrame(np.random.randint(<span class="number">1</span>, <span class="number">10</span>, (<span class="number">5</span>, <span class="number">5</span>)), columns=columns)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>obj</span><br><span class="line">language Python Java Python Java Python</span><br><span class="line">index         A    A      B    C      B</span><br><span class="line"><span class="number">0</span>             <span class="number">7</span>    <span class="number">1</span>      <span class="number">9</span>    <span class="number">8</span>      <span class="number">5</span></span><br><span class="line"><span class="number">1</span>             <span class="number">4</span>    <span class="number">5</span>      <span class="number">4</span>    <span class="number">5</span>      <span class="number">6</span></span><br><span class="line"><span class="number">2</span>             <span class="number">4</span>    <span class="number">3</span>      <span class="number">1</span>    <span class="number">9</span>      <span class="number">5</span></span><br><span class="line"><span class="number">3</span>             <span class="number">6</span>    <span class="number">6</span>      <span class="number">3</span>    <span class="number">8</span>      <span class="number">1</span></span><br><span class="line"><span class="number">4</span>             <span class="number">7</span>    <span class="number">9</span>      <span class="number">2</span>    <span class="number">8</span>      <span class="number">2</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>obj.groupby(level=<span class="string">'language'</span>, axis=<span class="number">1</span>).sum()</span><br><span class="line">language  Java  Python</span><br><span class="line"><span class="number">0</span>            <span class="number">9</span>      <span class="number">21</span></span><br><span class="line"><span class="number">1</span>           <span class="number">10</span>      <span class="number">14</span></span><br><span class="line"><span class="number">2</span>           <span class="number">12</span>      <span class="number">10</span></span><br><span class="line"><span class="number">3</span>           <span class="number">14</span>      <span class="number">10</span></span><br><span class="line"><span class="number">4</span>           <span class="number">17</span>      <span class="number">11</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>obj.groupby(level=<span class="string">'index'</span>, axis=<span class="number">1</span>).sum()</span><br><span class="line">index   A   B  C</span><br><span class="line"><span class="number">0</span>       <span class="number">8</span>  <span class="number">14</span>  <span class="number">8</span></span><br><span class="line"><span class="number">1</span>       <span class="number">9</span>  <span class="number">10</span>  <span class="number">5</span></span><br><span class="line"><span class="number">2</span>       <span class="number">7</span>   <span class="number">6</span>  <span class="number">9</span></span><br><span class="line"><span class="number">3</span>      <span class="number">12</span>   <span class="number">4</span>  <span class="number">8</span></span><br><span class="line"><span class="number">4</span>      <span class="number">16</span>   <span class="number">4</span>  <span class="number">8</span></span><br></pre></td></tr></table></figure><h3 id="【03x04】分组迭代"><a href="#【03x04】分组迭代" class="headerlink" title="【03x04】分组迭代"></a><font color="#4876FF">【03x04】分组迭代</font></h3><p>GroupBy 对象支持迭代，对于单层分组，可以产生一组二元元组，由分组名和数据块组成：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>data = &#123;<span class="string">'key1'</span> : [<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'a'</span>, <span class="string">'a'</span>],</span><br><span class="line"><span class="string">'key2'</span> : [<span class="string">'one'</span>, <span class="string">'one'</span>, <span class="string">'two'</span>, <span class="string">'three'</span>, <span class="string">'two'</span>, <span class="string">'two'</span>, <span class="string">'one'</span>, <span class="string">'three'</span>],</span><br><span class="line"><span class="string">'data1'</span>: np.random.randn(<span class="number">8</span>),</span><br><span class="line"><span class="string">'data2'</span>: np.random.randn(<span class="number">8</span>)&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>obj = pd.DataFrame(data)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>obj</span><br><span class="line">  key1   key2     data1     data2</span><br><span class="line"><span class="number">0</span>    a    one <span class="number">-1.088762</span>  <span class="number">0.668504</span></span><br><span class="line"><span class="number">1</span>    b    one  <span class="number">0.275500</span>  <span class="number">0.787844</span></span><br><span class="line"><span class="number">2</span>    a    two <span class="number">-0.108417</span> <span class="number">-0.491296</span></span><br><span class="line"><span class="number">3</span>    b  three  <span class="number">0.019524</span> <span class="number">-0.363390</span></span><br><span class="line"><span class="number">4</span>    a    two  <span class="number">0.453612</span>  <span class="number">0.796999</span></span><br><span class="line"><span class="number">5</span>    b    two  <span class="number">1.982858</span>  <span class="number">1.501877</span></span><br><span class="line"><span class="number">6</span>    a    one  <span class="number">1.101132</span> <span class="number">-1.928362</span></span><br><span class="line"><span class="number">7</span>    a  three  <span class="number">0.524775</span> <span class="number">-1.205842</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">for</span> group_name, group_data <span class="keyword">in</span> obj.groupby(<span class="string">'key1'</span>):</span><br><span class="line">print(group_name)</span><br><span class="line">print(group_data)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">a</span><br><span class="line">  key1   key2     data1     data2</span><br><span class="line"><span class="number">0</span>    a    one <span class="number">-1.088762</span>  <span class="number">0.668504</span></span><br><span class="line"><span class="number">2</span>    a    two <span class="number">-0.108417</span> <span class="number">-0.491296</span></span><br><span class="line"><span class="number">4</span>    a    two  <span class="number">0.453612</span>  <span class="number">0.796999</span></span><br><span class="line"><span class="number">6</span>    a    one  <span class="number">1.101132</span> <span class="number">-1.928362</span></span><br><span class="line"><span class="number">7</span>    a  three  <span class="number">0.524775</span> <span class="number">-1.205842</span></span><br><span class="line">b</span><br><span class="line">  key1   key2     data1     data2</span><br><span class="line"><span class="number">1</span>    b    one  <span class="number">0.275500</span>  <span class="number">0.787844</span></span><br><span class="line"><span class="number">3</span>    b  three  <span class="number">0.019524</span> <span class="number">-0.363390</span></span><br><span class="line"><span class="number">5</span>    b    two  <span class="number">1.982858</span>  <span class="number">1.501877</span></span><br></pre></td></tr></table></figure><p>对于多层分组，元组的第一个元素将会是由键值组成的元组，第二个元素为数据块：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>data = &#123;<span class="string">'key1'</span> : [<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'a'</span>, <span class="string">'a'</span>],</span><br><span class="line"><span class="string">'key2'</span> : [<span class="string">'one'</span>, <span class="string">'one'</span>, <span class="string">'two'</span>, <span class="string">'three'</span>, <span class="string">'two'</span>, <span class="string">'two'</span>, <span class="string">'one'</span>, <span class="string">'three'</span>],</span><br><span class="line"><span class="string">'data1'</span>: np.random.randn(<span class="number">8</span>),</span><br><span class="line"><span class="string">'data2'</span>: np.random.randn(<span class="number">8</span>)&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>obj = pd.DataFrame(data)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>obj</span><br><span class="line">  key1   key2     data1     data2</span><br><span class="line"><span class="number">0</span>    a    one <span class="number">-1.088762</span>  <span class="number">0.668504</span></span><br><span class="line"><span class="number">1</span>    b    one  <span class="number">0.275500</span>  <span class="number">0.787844</span></span><br><span class="line"><span class="number">2</span>    a    two <span class="number">-0.108417</span> <span class="number">-0.491296</span></span><br><span class="line"><span class="number">3</span>    b  three  <span class="number">0.019524</span> <span class="number">-0.363390</span></span><br><span class="line"><span class="number">4</span>    a    two  <span class="number">0.453612</span>  <span class="number">0.796999</span></span><br><span class="line"><span class="number">5</span>    b    two  <span class="number">1.982858</span>  <span class="number">1.501877</span></span><br><span class="line"><span class="number">6</span>    a    one  <span class="number">1.101132</span> <span class="number">-1.928362</span></span><br><span class="line"><span class="number">7</span>    a  three  <span class="number">0.524775</span> <span class="number">-1.205842</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">for</span> group_name, group_data <span class="keyword">in</span> obj.groupby([<span class="string">'key1'</span>, <span class="string">'key2'</span>]):</span><br><span class="line">print(group_name)</span><br><span class="line">print(group_data)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">(<span class="string">'a'</span>, <span class="string">'one'</span>)</span><br><span class="line">  key1 key2     data1     data2</span><br><span class="line"><span class="number">0</span>    a  one <span class="number">-1.088762</span>  <span class="number">0.668504</span></span><br><span class="line"><span class="number">6</span>    a  one  <span class="number">1.101132</span> <span class="number">-1.928362</span></span><br><span class="line">(<span class="string">'a'</span>, <span class="string">'three'</span>)</span><br><span class="line">  key1   key2     data1     data2</span><br><span class="line"><span class="number">7</span>    a  three  <span class="number">0.524775</span> <span class="number">-1.205842</span></span><br><span class="line">(<span class="string">'a'</span>, <span class="string">'two'</span>)</span><br><span class="line">  key1 key2     data1     data2</span><br><span class="line"><span class="number">2</span>    a  two <span class="number">-0.108417</span> <span class="number">-0.491296</span></span><br><span class="line"><span class="number">4</span>    a  two  <span class="number">0.453612</span>  <span class="number">0.796999</span></span><br><span class="line">(<span class="string">'b'</span>, <span class="string">'one'</span>)</span><br><span class="line">  key1 key2   data1     data2</span><br><span class="line"><span class="number">1</span>    b  one  <span class="number">0.2755</span>  <span class="number">0.787844</span></span><br><span class="line">(<span class="string">'b'</span>, <span class="string">'three'</span>)</span><br><span class="line">  key1   key2     data1    data2</span><br><span class="line"><span class="number">3</span>    b  three  <span class="number">0.019524</span> <span class="number">-0.36339</span></span><br><span class="line">(<span class="string">'b'</span>, <span class="string">'two'</span>)</span><br><span class="line">  key1 key2     data1     data2</span><br><span class="line"><span class="number">5</span>    b  two  <span class="number">1.982858</span>  <span class="number">1.501877</span></span><br></pre></td></tr></table></figure><h3 id="【03x05】对象转换"><a href="#【03x05】对象转换" class="headerlink" title="【03x05】对象转换"></a><font color="#4876FF">【03x05】对象转换</font></h3><p>GroupBy 对象支持转换成列表或字典：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>data = &#123;<span class="string">'key1'</span> : [<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'a'</span>, <span class="string">'a'</span>],</span><br><span class="line"><span class="string">'key2'</span> : [<span class="string">'one'</span>, <span class="string">'one'</span>, <span class="string">'two'</span>, <span class="string">'three'</span>, <span class="string">'two'</span>, <span class="string">'two'</span>, <span class="string">'one'</span>, <span class="string">'three'</span>],</span><br><span class="line"><span class="string">'data1'</span>: np.random.randn(<span class="number">8</span>),</span><br><span class="line"><span class="string">'data2'</span>: np.random.randn(<span class="number">8</span>)&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>obj = pd.DataFrame(data)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>obj</span><br><span class="line">  key1   key2     data1     data2</span><br><span class="line"><span class="number">0</span>    a    one <span class="number">-0.607009</span>  <span class="number">1.948301</span></span><br><span class="line"><span class="number">1</span>    b    one  <span class="number">0.150818</span> <span class="number">-0.025095</span></span><br><span class="line"><span class="number">2</span>    a    two <span class="number">-2.086024</span>  <span class="number">0.358164</span></span><br><span class="line"><span class="number">3</span>    b  three  <span class="number">0.446061</span>  <span class="number">1.708797</span></span><br><span class="line"><span class="number">4</span>    a    two  <span class="number">0.745457</span> <span class="number">-0.980948</span></span><br><span class="line"><span class="number">5</span>    b    two  <span class="number">0.981877</span>  <span class="number">2.159327</span></span><br><span class="line"><span class="number">6</span>    a    one  <span class="number">0.804480</span> <span class="number">-0.499661</span></span><br><span class="line"><span class="number">7</span>    a  three  <span class="number">0.112884</span>  <span class="number">0.004367</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>grouped = obj.groupby(<span class="string">'key1'</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>list(grouped1)</span><br><span class="line">[(<span class="string">'a'</span>,   key1   key2     data1     data2</span><br><span class="line"><span class="number">0</span>    a    one <span class="number">-0.607009</span>  <span class="number">1.948301</span></span><br><span class="line"><span class="number">2</span>    a    two <span class="number">-2.086024</span>  <span class="number">0.358164</span></span><br><span class="line"><span class="number">4</span>    a    two  <span class="number">0.745457</span> <span class="number">-0.980948</span></span><br><span class="line"><span class="number">6</span>    a    one  <span class="number">0.804480</span> <span class="number">-0.499661</span></span><br><span class="line"><span class="number">7</span>    a  three  <span class="number">0.112884</span>  <span class="number">0.004367</span>),</span><br><span class="line">(<span class="string">'b'</span>,   key1   key2     data1     data2</span><br><span class="line"><span class="number">1</span>    b    one  <span class="number">0.150818</span> <span class="number">-0.025095</span></span><br><span class="line"><span class="number">3</span>    b  three  <span class="number">0.446061</span>  <span class="number">1.708797</span></span><br><span class="line"><span class="number">5</span>    b    two  <span class="number">0.981877</span>  <span class="number">2.159327</span>)]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>dict(list(grouped1))</span><br><span class="line">&#123;<span class="string">'a'</span>:   key1   key2     data1     data2</span><br><span class="line"><span class="number">0</span>    a    one <span class="number">-0.607009</span>  <span class="number">1.948301</span></span><br><span class="line"><span class="number">2</span>    a    two <span class="number">-2.086024</span>  <span class="number">0.358164</span></span><br><span class="line"><span class="number">4</span>    a    two  <span class="number">0.745457</span> <span class="number">-0.980948</span></span><br><span class="line"><span class="number">6</span>    a    one  <span class="number">0.804480</span> <span class="number">-0.499661</span></span><br><span class="line"><span class="number">7</span>    a  three  <span class="number">0.112884</span>  <span class="number">0.004367</span>,</span><br><span class="line"><span class="string">'b'</span>:   key1   key2     data1     data2</span><br><span class="line"><span class="number">1</span>    b    one  <span class="number">0.150818</span> <span class="number">-0.025095</span></span><br><span class="line"><span class="number">3</span>    b  three  <span class="number">0.446061</span>  <span class="number">1.708797</span></span><br><span class="line"><span class="number">5</span>    b    two  <span class="number">0.981877</span>  <span class="number">2.159327</span>&#125;</span><br></pre></td></tr></table></figure><h2 id="【04x00】GroupBy-Apply-数据应用"><a href="#【04x00】GroupBy-Apply-数据应用" class="headerlink" title="【04x00】GroupBy Apply 数据应用"></a><font color="#FF0000">【04x00】GroupBy Apply 数据应用</font></h2><p>聚合指的是任何能够从数组产生标量值的数据转换过程，常用于对分组后的数据进行计算</p><h3 id="【04x01】聚合函数"><a href="#【04x01】聚合函数" class="headerlink" title="【04x01】聚合函数"></a><font color="#4876FF">【04x01】聚合函数</font></h3><p>之前的例子已经用过一些内置的聚合函数，比如 mean、count、min 以及 sum 等。常见的聚合运算如下表所示：</p><p>官方文档：<a href="https://pandas.pydata.org/docs/reference/groupby.html" target="_blank" rel="noopener">https://pandas.pydata.org/docs/reference/groupby.html</a></p><table><thead><tr><th>方法</th><th>描述</th></tr></thead><tbody><tr><td>count</td><td>非NA值的数量</td></tr><tr><td>describe</td><td>针对Series或各DataFrame列计算汇总统计</td></tr><tr><td>min</td><td>计算最小值</td></tr><tr><td>max</td><td>计算最大值</td></tr><tr><td>argmin</td><td>计算能够获取到最小值的索引位置（整数）</td></tr><tr><td>argmax</td><td>计算能够获取到最大值的索引位置（整数）</td></tr><tr><td>idxmin</td><td>计算能够获取到最小值的索引值</td></tr><tr><td>idxmax</td><td>计算能够获取到最大值的索引值</td></tr><tr><td>quantile</td><td>计算样本的分位数（0到1）</td></tr><tr><td>sum</td><td>值的总和</td></tr><tr><td>mean</td><td>值的平均数</td></tr><tr><td>median</td><td>值的算术中位数（50%分位数）</td></tr><tr><td>mad</td><td>根据平均值计算平均绝对离差</td></tr><tr><td>var</td><td>样本值的方差</td></tr><tr><td>std</td><td>样本值的标准差</td></tr></tbody></table><p>应用示例：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>obj = &#123;<span class="string">'key1'</span> : [<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'a'</span>, <span class="string">'a'</span>],</span><br><span class="line"><span class="string">'key2'</span> : [<span class="string">'one'</span>, <span class="string">'one'</span>, <span class="string">'two'</span>, <span class="string">'three'</span>, <span class="string">'two'</span>, <span class="string">'two'</span>, <span class="string">'one'</span>, <span class="string">'three'</span>],</span><br><span class="line"><span class="string">'data1'</span>: np.random.randint(<span class="number">1</span>,<span class="number">10</span>, <span class="number">8</span>),</span><br><span class="line"><span class="string">'data2'</span>: np.random.randint(<span class="number">1</span>,<span class="number">10</span>, <span class="number">8</span>)&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>obj = pd.DataFrame(obj)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>obj</span><br><span class="line">  key1   key2  data1  data2</span><br><span class="line"><span class="number">0</span>    a    one      <span class="number">9</span>      <span class="number">7</span></span><br><span class="line"><span class="number">1</span>    b    one      <span class="number">5</span>      <span class="number">9</span></span><br><span class="line"><span class="number">2</span>    a    two      <span class="number">2</span>      <span class="number">4</span></span><br><span class="line"><span class="number">3</span>    b  three      <span class="number">3</span>      <span class="number">4</span></span><br><span class="line"><span class="number">4</span>    a    two      <span class="number">5</span>      <span class="number">1</span></span><br><span class="line"><span class="number">5</span>    b    two      <span class="number">5</span>      <span class="number">9</span></span><br><span class="line"><span class="number">6</span>    a    one      <span class="number">1</span>      <span class="number">8</span></span><br><span class="line"><span class="number">7</span>    a  three      <span class="number">2</span>      <span class="number">4</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>obj.groupby(<span class="string">'key1'</span>).sum()</span><br><span class="line">      data1  data2</span><br><span class="line">key1              </span><br><span class="line">a        <span class="number">19</span>     <span class="number">24</span></span><br><span class="line">b        <span class="number">13</span>     <span class="number">22</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>obj.groupby(<span class="string">'key1'</span>).max()</span><br><span class="line">     key2  data1  data2</span><br><span class="line">key1                   </span><br><span class="line">a     two      <span class="number">9</span>      <span class="number">8</span></span><br><span class="line">b     two      <span class="number">5</span>      <span class="number">9</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>obj.groupby(<span class="string">'key1'</span>).min()</span><br><span class="line">     key2  data1  data2</span><br><span class="line">key1                   </span><br><span class="line">a     one      <span class="number">1</span>      <span class="number">1</span></span><br><span class="line">b     one      <span class="number">3</span>      <span class="number">4</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>obj.groupby(<span class="string">'key1'</span>).mean()</span><br><span class="line">         data1     data2</span><br><span class="line">key1                    </span><br><span class="line">a     <span class="number">3.800000</span>  <span class="number">4.800000</span></span><br><span class="line">b     <span class="number">4.333333</span>  <span class="number">7.333333</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>obj.groupby(<span class="string">'key1'</span>).size()</span><br><span class="line">key1</span><br><span class="line">a    <span class="number">5</span></span><br><span class="line">b    <span class="number">3</span></span><br><span class="line">dtype: int64</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>obj.groupby(<span class="string">'key1'</span>).count()</span><br><span class="line">      key2  data1  data2</span><br><span class="line">key1                    </span><br><span class="line">a        <span class="number">5</span>      <span class="number">5</span>      <span class="number">5</span></span><br><span class="line">b        <span class="number">3</span>      <span class="number">3</span>      <span class="number">3</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>obj.groupby(<span class="string">'key1'</span>).describe()</span><br><span class="line">     data1                                ... data2                    </span><br><span class="line">     count      mean       std  min  <span class="number">25</span>%  ...   min  <span class="number">25</span>%  <span class="number">50</span>%  <span class="number">75</span>%  max</span><br><span class="line">key1                                      ...                          </span><br><span class="line">a      <span class="number">5.0</span>  <span class="number">3.800000</span>  <span class="number">3.271085</span>  <span class="number">1.0</span>  <span class="number">2.0</span>  ...   <span class="number">1.0</span>  <span class="number">4.0</span>  <span class="number">4.0</span>  <span class="number">7.0</span>  <span class="number">8.0</span></span><br><span class="line">b      <span class="number">3.0</span>  <span class="number">4.333333</span>  <span class="number">1.154701</span>  <span class="number">3.0</span>  <span class="number">4.0</span>  ...   <span class="number">4.0</span>  <span class="number">6.5</span>  <span class="number">9.0</span>  <span class="number">9.0</span>  <span class="number">9.0</span></span><br><span class="line"></span><br><span class="line">[<span class="number">2</span> rows x <span class="number">16</span> columns]</span><br></pre></td></tr></table></figure><h3 id="【04x02】自定义函数"><a href="#【04x02】自定义函数" class="headerlink" title="【04x02】自定义函数"></a><font color="#4876FF">【04x02】自定义函数</font></h3><p>如果自带的内置函数满足不了我们的要求，则可以自定义一个聚合函数，然后传入 <code>GroupBy.agg(func)</code> 或 <code>GroupBy.aggregate(func)</code> 方法中即可。func 的参数为 groupby 索引对应的记录。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>obj = &#123;<span class="string">'key1'</span> : [<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'a'</span>, <span class="string">'a'</span>],</span><br><span class="line"><span class="string">'key2'</span> : [<span class="string">'one'</span>, <span class="string">'one'</span>, <span class="string">'two'</span>, <span class="string">'three'</span>, <span class="string">'two'</span>, <span class="string">'two'</span>, <span class="string">'one'</span>, <span class="string">'three'</span>],</span><br><span class="line"><span class="string">'data1'</span>: np.random.randint(<span class="number">1</span>,<span class="number">10</span>, <span class="number">8</span>),</span><br><span class="line"><span class="string">'data2'</span>: np.random.randint(<span class="number">1</span>,<span class="number">10</span>, <span class="number">8</span>)&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>obj = pd.DataFrame(obj)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>obj</span><br><span class="line">  key1   key2  data1  data2</span><br><span class="line"><span class="number">0</span>    a    one      <span class="number">9</span>      <span class="number">7</span></span><br><span class="line"><span class="number">1</span>    b    one      <span class="number">5</span>      <span class="number">9</span></span><br><span class="line"><span class="number">2</span>    a    two      <span class="number">2</span>      <span class="number">4</span></span><br><span class="line"><span class="number">3</span>    b  three      <span class="number">3</span>      <span class="number">4</span></span><br><span class="line"><span class="number">4</span>    a    two      <span class="number">5</span>      <span class="number">1</span></span><br><span class="line"><span class="number">5</span>    b    two      <span class="number">5</span>      <span class="number">9</span></span><br><span class="line"><span class="number">6</span>    a    one      <span class="number">1</span>      <span class="number">8</span></span><br><span class="line"><span class="number">7</span>    a  three      <span class="number">2</span>      <span class="number">4</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="function"><span class="keyword">def</span> <span class="title">peak_range</span><span class="params">(df)</span>:</span></span><br><span class="line"><span class="keyword">return</span> df.max() - df.min()</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>obj.groupby(<span class="string">'key1'</span>).agg(peak_range)</span><br><span class="line">      data1  data2</span><br><span class="line">key1              </span><br><span class="line">a         <span class="number">8</span>      <span class="number">7</span></span><br><span class="line">b         <span class="number">2</span>      <span class="number">5</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>obj.groupby(<span class="string">'key1'</span>).agg(<span class="keyword">lambda</span> df : df.max() - df.min())</span><br><span class="line">      data1  data2</span><br><span class="line">key1              </span><br><span class="line">a         <span class="number">8</span>      <span class="number">7</span></span><br><span class="line">b         <span class="number">2</span>      <span class="number">5</span></span><br></pre></td></tr></table></figure><h3 id="【04x03】对不同列作用不同函数"><a href="#【04x03】对不同列作用不同函数" class="headerlink" title="【04x03】对不同列作用不同函数"></a><font color="#4876FF">【04x03】对不同列作用不同函数</font></h3><p>使用字典可以对不同列作用不同的聚合函数：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>obj = &#123;<span class="string">'key1'</span> : [<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'a'</span>, <span class="string">'a'</span>],</span><br><span class="line"><span class="string">'key2'</span> : [<span class="string">'one'</span>, <span class="string">'one'</span>, <span class="string">'two'</span>, <span class="string">'three'</span>, <span class="string">'two'</span>, <span class="string">'two'</span>, <span class="string">'one'</span>, <span class="string">'three'</span>],</span><br><span class="line"><span class="string">'data1'</span>: np.random.randint(<span class="number">1</span>,<span class="number">10</span>, <span class="number">8</span>),</span><br><span class="line"><span class="string">'data2'</span>: np.random.randint(<span class="number">1</span>,<span class="number">10</span>, <span class="number">8</span>)&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>obj = pd.DataFrame(obj)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>obj</span><br><span class="line">  key1   key2  data1  data2</span><br><span class="line"><span class="number">0</span>    a    one      <span class="number">9</span>      <span class="number">7</span></span><br><span class="line"><span class="number">1</span>    b    one      <span class="number">5</span>      <span class="number">9</span></span><br><span class="line"><span class="number">2</span>    a    two      <span class="number">2</span>      <span class="number">4</span></span><br><span class="line"><span class="number">3</span>    b  three      <span class="number">3</span>      <span class="number">4</span></span><br><span class="line"><span class="number">4</span>    a    two      <span class="number">5</span>      <span class="number">1</span></span><br><span class="line"><span class="number">5</span>    b    two      <span class="number">5</span>      <span class="number">9</span></span><br><span class="line"><span class="number">6</span>    a    one      <span class="number">1</span>      <span class="number">8</span></span><br><span class="line"><span class="number">7</span>    a  three      <span class="number">2</span>      <span class="number">4</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>dict1 = &#123;<span class="string">'data1'</span>:<span class="string">'mean'</span>, <span class="string">'data2'</span>:<span class="string">'sum'</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>dict2 = &#123;<span class="string">'data1'</span>:[<span class="string">'mean'</span>,<span class="string">'max'</span>], <span class="string">'data2'</span>:<span class="string">'sum'</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>obj.groupby(<span class="string">'key1'</span>).agg(dict1)</span><br><span class="line">         data1  data2</span><br><span class="line">key1                 </span><br><span class="line">a     <span class="number">3.800000</span>     <span class="number">24</span></span><br><span class="line">b     <span class="number">4.333333</span>     <span class="number">22</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>obj.groupby(<span class="string">'key1'</span>).agg(dict2)</span><br><span class="line">         data1     data2</span><br><span class="line">          mean max   sum</span><br><span class="line">key1                    </span><br><span class="line">a     <span class="number">3.800000</span>   <span class="number">9</span>    <span class="number">24</span></span><br><span class="line">b     <span class="number">4.333333</span>   <span class="number">5</span>    <span class="number">22</span></span><br></pre></td></tr></table></figure><h3 id="【04x04】GroupBy-apply"><a href="#【04x04】GroupBy-apply" class="headerlink" title="【04x04】GroupBy.apply()"></a><font color="#4876FF">【04x04】GroupBy.apply()</font></h3><p><code>apply()</code> 方法会将待处理的对象拆分成多个片段，然后对各片段调用传入的函数，最后尝试将各片段组合到一起。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>obj = pd.DataFrame(&#123;<span class="string">'A'</span>:[<span class="string">'bob'</span>,<span class="string">'sos'</span>,<span class="string">'bob'</span>,<span class="string">'sos'</span>,<span class="string">'bob'</span>,<span class="string">'sos'</span>,<span class="string">'bob'</span>,<span class="string">'bob'</span>],</span><br><span class="line">              <span class="string">'B'</span>:[<span class="string">'one'</span>,<span class="string">'one'</span>,<span class="string">'two'</span>,<span class="string">'three'</span>,<span class="string">'two'</span>,<span class="string">'two'</span>,<span class="string">'one'</span>,<span class="string">'three'</span>],</span><br><span class="line">              <span class="string">'C'</span>:[<span class="number">3</span>,<span class="number">1</span>,<span class="number">4</span>,<span class="number">1</span>,<span class="number">5</span>,<span class="number">9</span>,<span class="number">2</span>,<span class="number">6</span>],</span><br><span class="line">              <span class="string">'D'</span>:[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>]&#125;)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>obj</span><br><span class="line">     A      B  C  D</span><br><span class="line"><span class="number">0</span>  bob    one  <span class="number">3</span>  <span class="number">1</span></span><br><span class="line"><span class="number">1</span>  sos    one  <span class="number">1</span>  <span class="number">2</span></span><br><span class="line"><span class="number">2</span>  bob    two  <span class="number">4</span>  <span class="number">3</span></span><br><span class="line"><span class="number">3</span>  sos  three  <span class="number">1</span>  <span class="number">4</span></span><br><span class="line"><span class="number">4</span>  bob    two  <span class="number">5</span>  <span class="number">5</span></span><br><span class="line"><span class="number">5</span>  sos    two  <span class="number">9</span>  <span class="number">6</span></span><br><span class="line"><span class="number">6</span>  bob    one  <span class="number">2</span>  <span class="number">7</span></span><br><span class="line"><span class="number">7</span>  bob  three  <span class="number">6</span>  <span class="number">8</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>grouped = obj.groupby(<span class="string">'A'</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">for</span> name, group <span class="keyword">in</span> grouped:</span><br><span class="line">print(name)</span><br><span class="line">print(group)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">bob</span><br><span class="line">     A      B  C  D</span><br><span class="line"><span class="number">0</span>  bob    one  <span class="number">3</span>  <span class="number">1</span></span><br><span class="line"><span class="number">2</span>  bob    two  <span class="number">4</span>  <span class="number">3</span></span><br><span class="line"><span class="number">4</span>  bob    two  <span class="number">5</span>  <span class="number">5</span></span><br><span class="line"><span class="number">6</span>  bob    one  <span class="number">2</span>  <span class="number">7</span></span><br><span class="line"><span class="number">7</span>  bob  three  <span class="number">6</span>  <span class="number">8</span></span><br><span class="line">sos</span><br><span class="line">     A      B  C  D</span><br><span class="line"><span class="number">1</span>  sos    one  <span class="number">1</span>  <span class="number">2</span></span><br><span class="line"><span class="number">3</span>  sos  three  <span class="number">1</span>  <span class="number">4</span></span><br><span class="line"><span class="number">5</span>  sos    two  <span class="number">9</span>  <span class="number">6</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>grouped.apply(<span class="keyword">lambda</span> x:x.describe())  <span class="comment"># 对 bob 和 sos 两组数据使用 describe 方法</span></span><br><span class="line">                  C         D</span><br><span class="line">A                            </span><br><span class="line">bob count  <span class="number">5.000000</span>  <span class="number">5.000000</span></span><br><span class="line">    mean   <span class="number">4.000000</span>  <span class="number">4.800000</span></span><br><span class="line">    std    <span class="number">1.581139</span>  <span class="number">2.863564</span></span><br><span class="line">    min    <span class="number">2.000000</span>  <span class="number">1.000000</span></span><br><span class="line">    <span class="number">25</span>%    <span class="number">3.000000</span>  <span class="number">3.000000</span></span><br><span class="line">    <span class="number">50</span>%    <span class="number">4.000000</span>  <span class="number">5.000000</span></span><br><span class="line">    <span class="number">75</span>%    <span class="number">5.000000</span>  <span class="number">7.000000</span></span><br><span class="line">    max    <span class="number">6.000000</span>  <span class="number">8.000000</span></span><br><span class="line">sos count  <span class="number">3.000000</span>  <span class="number">3.000000</span></span><br><span class="line">    mean   <span class="number">3.666667</span>  <span class="number">4.000000</span></span><br><span class="line">    std    <span class="number">4.618802</span>  <span class="number">2.000000</span></span><br><span class="line">    min    <span class="number">1.000000</span>  <span class="number">2.000000</span></span><br><span class="line">    <span class="number">25</span>%    <span class="number">1.000000</span>  <span class="number">3.000000</span></span><br><span class="line">    <span class="number">50</span>%    <span class="number">1.000000</span>  <span class="number">4.000000</span></span><br><span class="line">    <span class="number">75</span>%    <span class="number">5.000000</span>  <span class="number">5.000000</span></span><br><span class="line">    max    <span class="number">9.000000</span>  <span class="number">6.000000</span></span><br><span class="line">&gt;&gt;&gt;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>grouped.apply(<span class="keyword">lambda</span> x:x.min())  <span class="comment"># # 对 bob 和 sos 两组数据使用 min 方法</span></span><br><span class="line">       A    B  C  D</span><br><span class="line">A                  </span><br><span class="line">bob  bob  one  <span class="number">2</span>  <span class="number">1</span></span><br><span class="line">sos  sos  one  <span class="number">1</span>  <span class="number">2</span></span><br></pre></td></tr></table></figure><hr><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">这里是一段防爬虫文本，请读者忽略。</span></span><br><span class="line"><span class="string">本文原创首发于</span> <span class="string">CSDN，作者</span> <span class="string">TRHX。</span></span><br><span class="line"><span class="string">博客首页：https://itrhx.blog.csdn.net/</span></span><br><span class="line"><span class="string">本文链接：https://itrhx.blog.csdn.net/article/details/106804881</span></span><br><span class="line"><span class="string">未经授权，禁止转载！恶意转载，后果自负！尊重原创，远离剽窃！</span></span><br></pre></td></tr></table></figure><hr>]]></content>
    
    <summary type="html">
    
      Python 数据分析三剑客之 Pandas（六）：GroupBy 数据分裂、应用与合并。
    
    </summary>
    
      <category term="Python 数据分析" scheme="https://www.itrhx.com/categories/Python-%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/"/>
    
      <category term="Pandas" scheme="https://www.itrhx.com/categories/Python-%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/Pandas/"/>
    
    
      <category term="Pandas" scheme="https://www.itrhx.com/tags/Pandas/"/>
    
      <category term="GroupBy" scheme="https://www.itrhx.com/tags/GroupBy/"/>
    
      <category term="数据分裂" scheme="https://www.itrhx.com/tags/%E6%95%B0%E6%8D%AE%E5%88%86%E8%A3%82/"/>
    
      <category term="数据合并" scheme="https://www.itrhx.com/tags/%E6%95%B0%E6%8D%AE%E5%90%88%E5%B9%B6/"/>
    
  </entry>
  
  <entry>
    <title>Python 数据分析三剑客之 Pandas（五）：统计计算与统计描述</title>
    <link href="https://www.itrhx.com/2020/06/16/A83-Pandas-05/"/>
    <id>https://www.itrhx.com/2020/06/16/A83-Pandas-05/</id>
    <published>2020-06-16T13:33:14.569Z</published>
    <updated>2020-07-06T13:44:54.663Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>Pandas 系列文章：</p><ul><li><a href="https://www.itrhx.com/2020/06/11/A79-Pandas-01/">Python 数据分析三剑客之 Pandas（一）：认识 Pandas 及其 Series、DataFrame 对象</a></li><li><a href="https://www.itrhx.com/2020/06/13/A80-Pandas-02/">Python 数据分析三剑客之 Pandas（二）：Index 索引对象以及各种索引操作</a></li><li><a href="https://www.itrhx.com/2020/06/14/A81-Pandas-03/">Python 数据分析三剑客之 Pandas（三）：算术运算与缺失值的处理</a></li><li><a href="https://www.itrhx.com/2020/06/15/A82-Pandas-04/">Python 数据分析三剑客之 Pandas（四）：函数应用、映射、排序和层级索引</a></li><li><a href="https://www.itrhx.com/2020/06/16/A83-Pandas-05/">Python 数据分析三剑客之 Pandas（五）：统计计算与统计描述</a></li><li><a href="https://www.itrhx.com/2020/06/17/A84-Pandas-06/">Python 数据分析三剑客之 Pandas（六）：GroupBy 数据分裂、应用与合并</a></li><li><a href="https://www.itrhx.com/2020/06/21/A85-Pandas-07/">Python 数据分析三剑客之 Pandas（七）：合并数据集</a></li><li><a href="https://www.itrhx.com/2020/06/22/A86-Pandas-08/">Python 数据分析三剑客之 Pandas（八）：数据重塑、重复数据处理与数据替换</a></li><li><a href="https://www.itrhx.com/2020/06/25/A87-Pandas-09/">Python 数据分析三剑客之 Pandas（九）：时间序列</a></li><li><a href="https://www.itrhx.com/2020/06/26/A88-Pandas-10/">Python 数据分析三剑客之 Pandas（十）：数据读写</a></li></ul><hr><p>专栏：</p><p>【<a href="https://www.itrhx.com/categories/Python-%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/NumPy/">NumPy 专栏</a>】【<a href="https://www.itrhx.com/categories/Python-%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/Pandas/">Pandas 专栏</a>】【<a href="https://www.itrhx.com/categories/Python-%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/Matplotlib/">Matplotlib 专栏</a>】</p><p>推荐学习资料与网站：</p><p>【<a href="https://www.numpy.org.cn/" target="_blank" rel="noopener">NumPy 中文网</a>】【<a href="https://www.pypandas.cn/" target="_blank" rel="noopener">Pandas 中文网</a>】【<a href="https://www.matplotlib.org.cn/" target="_blank" rel="noopener">Matplotlib 中文网</a>】【<a href="https://github.com/TRHX/Python-quick-reference-table" target="_blank" rel="noopener">NumPy、Matplotlib、Pandas 速查表</a>】</p><hr><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">这里是一段防爬虫文本，请读者忽略。</span></span><br><span class="line"><span class="string">本文原创首发于</span> <span class="string">CSDN，作者</span> <span class="string">TRHX。</span></span><br><span class="line"><span class="string">博客首页：https://itrhx.blog.csdn.net/</span></span><br><span class="line"><span class="string">本文链接：https://itrhx.blog.csdn.net/article/details/106788501</span></span><br><span class="line"><span class="string">未经授权，禁止转载！恶意转载，后果自负！尊重原创，远离剽窃！</span></span><br></pre></td></tr></table></figure><hr><h2 id="【01x00】统计计算"><a href="#【01x00】统计计算" class="headerlink" title="【01x00】统计计算"></a><font color="#FF0000">【01x00】统计计算</font></h2><p>Pandas 对象拥有一组常用的数学和统计方法。它们大部分都属于约简和汇总统计，用于从 Series 中提取单个值（如 sum 或 mean）或从 DataFrame 的行或列中提取一个 Series。跟对应的 NumPy 数组方法相比，它们都是基于没有缺失数据的假设而构建的。</p><h3 id="【01x01】sum-求和"><a href="#【01x01】sum-求和" class="headerlink" title="【01x01】sum() 求和"></a><font color="#4876FF">【01x01】sum() 求和</font></h3><p><code>sum()</code> 方法用于返回指定轴的和，相当于 <code>numpy.sum()</code>。</p><p>在 Series 和 DataFrame 中的基本语法如下：</p><ul><li><p><code>Series.sum(self, axis=None, skipna=None, level=None, numeric_only=None, min_count=0, **kwargs)</code></p></li><li><p><code>DataFrame.sum(self, axis=None, skipna=None, level=None, numeric_only=None, min_count=0, **kwargs)</code></p></li></ul><p>官方文档：</p><ul><li><p><a href="https://pandas.pydata.org/docs/reference/api/pandas.Series.sum.html" target="_blank" rel="noopener">https://pandas.pydata.org/docs/reference/api/pandas.Series.sum.html</a></p></li><li><p><a href="https://pandas.pydata.org/docs/reference/api/pandas.DataFrame.sum.html" target="_blank" rel="noopener">https://pandas.pydata.org/docs/reference/api/pandas.DataFrame.sum.html</a></p></li></ul><p>常用参数描述如下：</p><table><thead><tr><th>参数</th><th>描述</th></tr></thead><tbody><tr><td>axis</td><td>指定轴求和，<code>0</code> or <code>‘index’</code>，<code>1</code> or <code>‘columns’</code>，只有在 DataFrame 中才有 <code>1</code> or <code>&#39;columns’</code></td></tr><tr><td>skipna</td><td>bool 类型，求和时是否排除缺失值（NA/null），默认 True</td></tr><tr><td>level</td><td>如果轴是 MultiIndex（层次结构），则沿指定层次求和</td></tr></tbody></table><p>在 Series 中的应用：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>idx = pd.MultiIndex.from_arrays([</span><br><span class="line">    [<span class="string">'warm'</span>, <span class="string">'warm'</span>, <span class="string">'cold'</span>, <span class="string">'cold'</span>],</span><br><span class="line">    [<span class="string">'dog'</span>, <span class="string">'falcon'</span>, <span class="string">'fish'</span>, <span class="string">'spider'</span>]],</span><br><span class="line">    names=[<span class="string">'blooded'</span>, <span class="string">'animal'</span>])</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>obj = pd.Series([<span class="number">4</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">8</span>], name=<span class="string">'legs'</span>, index=idx)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>obj</span><br><span class="line">blooded  animal</span><br><span class="line">warm     dog       <span class="number">4</span></span><br><span class="line">         falcon    <span class="number">2</span></span><br><span class="line">cold     fish      <span class="number">0</span></span><br><span class="line">         spider    <span class="number">8</span></span><br><span class="line">Name: legs, dtype: int64</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>obj.sum()</span><br><span class="line"><span class="number">14</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>obj.sum(level=<span class="string">'blooded'</span>)</span><br><span class="line">blooded</span><br><span class="line">warm    <span class="number">6</span></span><br><span class="line">cold    <span class="number">8</span></span><br><span class="line">Name: legs, dtype: int64</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>obj.sum(level=<span class="number">0</span>)</span><br><span class="line">blooded</span><br><span class="line">warm    <span class="number">6</span></span><br><span class="line">cold    <span class="number">8</span></span><br><span class="line">Name: legs, dtype: int64</span><br></pre></td></tr></table></figure><p>在 DataFrame 中的应用：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>obj = pd.DataFrame([[<span class="number">1.4</span>, np.nan], [<span class="number">7.1</span>, <span class="number">-4.5</span>],</span><br><span class="line">    [np.nan, np.nan], [<span class="number">0.75</span>, <span class="number">-1.3</span>]],</span><br><span class="line">    index=[<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>, <span class="string">'d'</span>],</span><br><span class="line">    columns=[<span class="string">'one'</span>, <span class="string">'two'</span>])</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>obj</span><br><span class="line">    one  two</span><br><span class="line">a  <span class="number">1.40</span>  NaN</span><br><span class="line">b  <span class="number">7.10</span> <span class="number">-4.5</span></span><br><span class="line">c   NaN  NaN</span><br><span class="line">d  <span class="number">0.75</span> <span class="number">-1.3</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>obj.sum()</span><br><span class="line">one    <span class="number">9.25</span></span><br><span class="line">two   <span class="number">-5.80</span></span><br><span class="line">dtype: float64</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>obj.sum(axis=<span class="number">1</span>)</span><br><span class="line">a    <span class="number">1.40</span></span><br><span class="line">b    <span class="number">2.60</span></span><br><span class="line">c    <span class="number">0.00</span></span><br><span class="line">d   <span class="number">-0.55</span></span><br><span class="line">dtype: float64</span><br></pre></td></tr></table></figure><h3 id="【01x02】min-最小值"><a href="#【01x02】min-最小值" class="headerlink" title="【01x02】min() 最小值"></a><font color="#4876FF">【01x02】min() 最小值</font></h3><p><code>min()</code> 方法用于返回指定轴的最小值。</p><p>在 Series 和 DataFrame 中的基本语法如下：</p><ul><li><p><code>Series.min(self, axis=None, skipna=None, level=None, numeric_only=None, **kwargs)</code></p></li><li><p><code>DataFrame.min(self, axis=None, skipna=None, level=None, numeric_only=None, **kwargs)</code></p></li></ul><p>官方文档：</p><ul><li><p><a href="https://pandas.pydata.org/docs/reference/api/pandas.Series.min.html" target="_blank" rel="noopener">https://pandas.pydata.org/docs/reference/api/pandas.Series.min.html</a></p></li><li><p><a href="https://pandas.pydata.org/docs/reference/api/pandas.DataFrame.min.html" target="_blank" rel="noopener">https://pandas.pydata.org/docs/reference/api/pandas.DataFrame.min.html</a></p></li></ul><p>常用参数描述如下：</p><table><thead><tr><th>参数</th><th>描述</th></tr></thead><tbody><tr><td>axis</td><td>指定轴求最小值，<code>0</code> or <code>‘index’</code>，<code>1</code> or <code>‘columns’</code>，只有在 DataFrame 中才有 <code>1</code> or <code>&#39;columns’</code></td></tr><tr><td>skipna</td><td>bool 类型，求最小值时是否排除缺失值（NA/null），默认 True</td></tr><tr><td>level</td><td>如果轴是 MultiIndex（层次结构），则沿指定层次求最小值</td></tr></tbody></table><p>在 Series 中的应用：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>idx = pd.MultiIndex.from_arrays([</span><br><span class="line">    [<span class="string">'warm'</span>, <span class="string">'warm'</span>, <span class="string">'cold'</span>, <span class="string">'cold'</span>],</span><br><span class="line">    [<span class="string">'dog'</span>, <span class="string">'falcon'</span>, <span class="string">'fish'</span>, <span class="string">'spider'</span>]],</span><br><span class="line">    names=[<span class="string">'blooded'</span>, <span class="string">'animal'</span>])</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>obj = pd.Series([<span class="number">4</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">8</span>], name=<span class="string">'legs'</span>, index=idx)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>obj</span><br><span class="line">blooded  animal</span><br><span class="line">warm     dog       <span class="number">4</span></span><br><span class="line">         falcon    <span class="number">2</span></span><br><span class="line">cold     fish      <span class="number">0</span></span><br><span class="line">         spider    <span class="number">8</span></span><br><span class="line">Name: legs, dtype: int64</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>obj.min()</span><br><span class="line"><span class="number">0</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>obj.min(level=<span class="string">'blooded'</span>)</span><br><span class="line">blooded</span><br><span class="line">warm    <span class="number">2</span></span><br><span class="line">cold    <span class="number">0</span></span><br><span class="line">Name: legs, dtype: int64</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>obj.min(level=<span class="number">0</span>)</span><br><span class="line">blooded</span><br><span class="line">warm    <span class="number">2</span></span><br><span class="line">cold    <span class="number">0</span></span><br><span class="line">Name: legs, dtype: int64</span><br></pre></td></tr></table></figure><p>在 DataFrame 中的应用：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>obj = pd.DataFrame([[<span class="number">1.4</span>, np.nan], [<span class="number">7.1</span>, <span class="number">-4.5</span>],</span><br><span class="line">    [np.nan, np.nan], [<span class="number">0.75</span>, <span class="number">-1.3</span>]],</span><br><span class="line">    index=[<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>, <span class="string">'d'</span>],columns=[<span class="string">'one'</span>, <span class="string">'two'</span>])</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>obj</span><br><span class="line">    one  two</span><br><span class="line">a  <span class="number">1.40</span>  NaN</span><br><span class="line">b  <span class="number">7.10</span> <span class="number">-4.5</span></span><br><span class="line">c   NaN  NaN</span><br><span class="line">d  <span class="number">0.75</span> <span class="number">-1.3</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>obj.min()</span><br><span class="line">one    <span class="number">0.75</span></span><br><span class="line">two   <span class="number">-4.50</span></span><br><span class="line">dtype: float64</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>obj.min(axis=<span class="number">1</span>)</span><br><span class="line">a    <span class="number">1.4</span></span><br><span class="line">b   <span class="number">-4.5</span></span><br><span class="line">c    NaN</span><br><span class="line">d   <span class="number">-1.3</span></span><br><span class="line">dtype: float64</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>obj.min(axis=<span class="string">'columns'</span>, skipna=<span class="keyword">False</span>)</span><br><span class="line">a    NaN</span><br><span class="line">b   <span class="number">-4.5</span></span><br><span class="line">c    NaN</span><br><span class="line">d   <span class="number">-1.3</span></span><br><span class="line">dtype: float64</span><br></pre></td></tr></table></figure><h3 id="【01x03】max-最大值"><a href="#【01x03】max-最大值" class="headerlink" title="【01x03】max() 最大值"></a><font color="#4876FF">【01x03】max() 最大值</font></h3><p><code>max()</code> 方法用于返回指定轴的最大值。</p><p>在 Series 和 DataFrame 中的基本语法如下：</p><ul><li><p><code>Series.max(self, axis=None, skipna=None, level=None, numeric_only=None, **kwargs)</code></p></li><li><p><code>DataFrame.max(self, axis=None, skipna=None, level=None, numeric_only=None, **kwargs)</code></p></li></ul><p>官方文档：</p><ul><li><p><a href="https://pandas.pydata.org/docs/reference/api/pandas.Series.max.html" target="_blank" rel="noopener">https://pandas.pydata.org/docs/reference/api/pandas.Series.max.html</a></p></li><li><p><a href="https://pandas.pydata.org/docs/reference/api/pandas.DataFrame.max.html" target="_blank" rel="noopener">https://pandas.pydata.org/docs/reference/api/pandas.DataFrame.max.html</a></p></li></ul><p>常用参数描述如下：</p><table><thead><tr><th>参数</th><th>描述</th></tr></thead><tbody><tr><td>axis</td><td>指定轴求最大值，<code>0</code> or <code>‘index’</code>，<code>1</code> or <code>‘columns’</code>，只有在 DataFrame 中才有 <code>1</code> or <code>&#39;columns’</code></td></tr><tr><td>skipna</td><td>bool 类型，求最大值时是否排除缺失值（NA/null），默认 True</td></tr><tr><td>level</td><td>如果轴是 MultiIndex（层次结构），则沿指定层次求最大值</td></tr></tbody></table><p>在 Series 中的应用：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>idx = pd.MultiIndex.from_arrays([</span><br><span class="line">    [<span class="string">'warm'</span>, <span class="string">'warm'</span>, <span class="string">'cold'</span>, <span class="string">'cold'</span>],</span><br><span class="line">    [<span class="string">'dog'</span>, <span class="string">'falcon'</span>, <span class="string">'fish'</span>, <span class="string">'spider'</span>]],</span><br><span class="line">    names=[<span class="string">'blooded'</span>, <span class="string">'animal'</span>])</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>obj = pd.Series([<span class="number">4</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">8</span>], name=<span class="string">'legs'</span>, index=idx)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>obj</span><br><span class="line">blooded  animal</span><br><span class="line">warm     dog       <span class="number">4</span></span><br><span class="line">         falcon    <span class="number">2</span></span><br><span class="line">cold     fish      <span class="number">0</span></span><br><span class="line">         spider    <span class="number">8</span></span><br><span class="line">Name: legs, dtype: int64</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>obj.max()</span><br><span class="line"><span class="number">8</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>obj.max(level=<span class="string">'blooded'</span>)</span><br><span class="line">blooded</span><br><span class="line">warm    <span class="number">4</span></span><br><span class="line">cold    <span class="number">8</span></span><br><span class="line">Name: legs, dtype: int64</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>obj.max(level=<span class="number">0</span>)</span><br><span class="line">blooded</span><br><span class="line">warm    <span class="number">4</span></span><br><span class="line">cold    <span class="number">8</span></span><br><span class="line">Name: legs, dtype: int64</span><br></pre></td></tr></table></figure><p>在 DataFrame 中的应用：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>obj = pd.DataFrame([[<span class="number">1.4</span>, np.nan], [<span class="number">7.1</span>, <span class="number">-4.5</span>],</span><br><span class="line">    [np.nan, np.nan], [<span class="number">0.75</span>, <span class="number">-1.3</span>]],</span><br><span class="line">    index=[<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>, <span class="string">'d'</span>],columns=[<span class="string">'one'</span>, <span class="string">'two'</span>])</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>obj</span><br><span class="line">    one  two</span><br><span class="line">a  <span class="number">1.40</span>  NaN</span><br><span class="line">b  <span class="number">7.10</span> <span class="number">-4.5</span></span><br><span class="line">c   NaN  NaN</span><br><span class="line">d  <span class="number">0.75</span> <span class="number">-1.3</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>obj.max()</span><br><span class="line">one    <span class="number">7.1</span></span><br><span class="line">two   <span class="number">-1.3</span></span><br><span class="line">dtype: float64</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>obj.max(axis=<span class="number">1</span>)</span><br><span class="line">a    <span class="number">1.40</span></span><br><span class="line">b    <span class="number">7.10</span></span><br><span class="line">c     NaN</span><br><span class="line">d    <span class="number">0.75</span></span><br><span class="line">dtype: float64</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>obj.max(axis=<span class="string">'columns'</span>, skipna=<span class="keyword">False</span>)</span><br><span class="line">a     NaN</span><br><span class="line">b    <span class="number">7.10</span></span><br><span class="line">c     NaN</span><br><span class="line">d    <span class="number">0.75</span></span><br><span class="line">dtype: float64</span><br></pre></td></tr></table></figure><h3 id="【01x04】mean-平均值"><a href="#【01x04】mean-平均值" class="headerlink" title="【01x04】mean() 平均值"></a><font color="#4876FF">【01x04】mean() 平均值</font></h3><p><code>mean()</code> 方法用于返回指定轴的平均值。</p><p>在 Series 和 DataFrame 中的基本语法如下：</p><ul><li><p><code>Series.mean(self, axis=None, skipna=None, level=None, numeric_only=None, **kwargs)</code></p></li><li><p><code>DataFrame.mean(self, axis=None, skipna=None, level=None, numeric_only=None, **kwargs)</code></p></li></ul><p>官方文档：</p><ul><li><p><a href="https://pandas.pydata.org/docs/reference/api/pandas.Series.mean.html" target="_blank" rel="noopener">https://pandas.pydata.org/docs/reference/api/pandas.Series.mean.html</a></p></li><li><p><a href="https://pandas.pydata.org/docs/reference/api/pandas.DataFrame.mean.html" target="_blank" rel="noopener">https://pandas.pydata.org/docs/reference/api/pandas.DataFrame.mean.html</a></p></li></ul><p>常用参数描述如下：</p><table><thead><tr><th>参数</th><th>描述</th></tr></thead><tbody><tr><td>axis</td><td>指定轴求平均值，<code>0</code> or <code>‘index’</code>，<code>1</code> or <code>‘columns’</code>，只有在 DataFrame 中才有 <code>1</code> or <code>&#39;columns’</code></td></tr><tr><td>skipna</td><td>bool 类型，求平均值时是否排除缺失值（NA/null），默认 True</td></tr><tr><td>level</td><td>如果轴是 MultiIndex（层次结构），则沿指定层次求平均值</td></tr></tbody></table><p>在 Series 中的应用：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>idx = pd.MultiIndex.from_arrays([</span><br><span class="line">    [<span class="string">'warm'</span>, <span class="string">'warm'</span>, <span class="string">'cold'</span>, <span class="string">'cold'</span>],</span><br><span class="line">    [<span class="string">'dog'</span>, <span class="string">'falcon'</span>, <span class="string">'fish'</span>, <span class="string">'spider'</span>]],</span><br><span class="line">    names=[<span class="string">'blooded'</span>, <span class="string">'animal'</span>])</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>obj = pd.Series([<span class="number">4</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">8</span>], name=<span class="string">'legs'</span>, index=idx)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>obj</span><br><span class="line">blooded  animal</span><br><span class="line">warm     dog       <span class="number">4</span></span><br><span class="line">         falcon    <span class="number">2</span></span><br><span class="line">cold     fish      <span class="number">0</span></span><br><span class="line">         spider    <span class="number">8</span></span><br><span class="line">Name: legs, dtype: int64</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>obj.mean()</span><br><span class="line"><span class="number">3.5</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>obj.mean(level=<span class="string">'blooded'</span>)</span><br><span class="line">blooded</span><br><span class="line">warm    <span class="number">3</span></span><br><span class="line">cold    <span class="number">4</span></span><br><span class="line">Name: legs, dtype: int64</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>obj.mean(level=<span class="number">0</span>)</span><br><span class="line">blooded</span><br><span class="line">warm    <span class="number">3</span></span><br><span class="line">cold    <span class="number">4</span></span><br><span class="line">Name: legs, dtype: int64</span><br></pre></td></tr></table></figure><p>在 DataFrame 中的应用：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>obj = pd.DataFrame([[<span class="number">1.4</span>, np.nan], [<span class="number">7.1</span>, <span class="number">-4.5</span>],</span><br><span class="line">    [np.nan, np.nan], [<span class="number">0.75</span>, <span class="number">-1.3</span>]],</span><br><span class="line">    index=[<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>, <span class="string">'d'</span>],columns=[<span class="string">'one'</span>, <span class="string">'two'</span>])</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>obj</span><br><span class="line">    one  two</span><br><span class="line">a  <span class="number">1.40</span>  NaN</span><br><span class="line">b  <span class="number">7.10</span> <span class="number">-4.5</span></span><br><span class="line">c   NaN  NaN</span><br><span class="line">d  <span class="number">0.75</span> <span class="number">-1.3</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>obj.mean()</span><br><span class="line">one    <span class="number">3.083333</span></span><br><span class="line">two   <span class="number">-2.900000</span></span><br><span class="line">dtype: float64</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>obj.mean(axis=<span class="number">1</span>)</span><br><span class="line">a    <span class="number">1.400</span></span><br><span class="line">b    <span class="number">1.300</span></span><br><span class="line">c      NaN</span><br><span class="line">d   <span class="number">-0.275</span></span><br><span class="line">dtype: float64</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>obj.mean(axis=<span class="string">'columns'</span>, skipna=<span class="keyword">False</span>)</span><br><span class="line">a      NaN</span><br><span class="line">b    <span class="number">1.300</span></span><br><span class="line">c      NaN</span><br><span class="line">d   <span class="number">-0.275</span></span><br><span class="line">dtype: float64</span><br></pre></td></tr></table></figure><h3 id="【01x05】idxmin-最小值索引"><a href="#【01x05】idxmin-最小值索引" class="headerlink" title="【01x05】idxmin() 最小值索引"></a><font color="#4876FF">【01x05】idxmin() 最小值索引</font></h3><p><code>idxmin()</code> 方法用于返回最小值的索引。</p><p>在 Series 和 DataFrame 中的基本语法如下：</p><ul><li><p><code>Series.idxmin(self, axis=0, skipna=True, *args, **kwargs)</code></p></li><li><p><code>DataFrame.idxmin(self, axis=0, skipna=True)</code></p></li></ul><p>官方文档：</p><ul><li><p><a href="https://pandas.pydata.org/docs/reference/api/pandas.Series.idxmin.html" target="_blank" rel="noopener">https://pandas.pydata.org/docs/reference/api/pandas.Series.idxmin.html</a></p></li><li><p><a href="https://pandas.pydata.org/docs/reference/api/pandas.DataFrame.idxmin.html" target="_blank" rel="noopener">https://pandas.pydata.org/docs/reference/api/pandas.DataFrame.idxmin.html</a></p></li></ul><p>常用参数描述如下：</p><table><thead><tr><th>参数</th><th>描述</th></tr></thead><tbody><tr><td>axis</td><td>指定轴，<code>0</code> or <code>‘index’</code>，<code>1</code> or <code>‘columns’</code>，只有在 DataFrame 中才有 <code>1</code> or <code>&#39;columns’</code></td></tr><tr><td>skipna</td><td>bool 类型，是否排除缺失值（NA/null），默认 True</td></tr></tbody></table><p>在 Series 中的应用：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>idx = pd.MultiIndex.from_arrays([</span><br><span class="line">    [<span class="string">'warm'</span>, <span class="string">'warm'</span>, <span class="string">'cold'</span>, <span class="string">'cold'</span>],</span><br><span class="line">    [<span class="string">'dog'</span>, <span class="string">'falcon'</span>, <span class="string">'fish'</span>, <span class="string">'spider'</span>]],</span><br><span class="line">    names=[<span class="string">'blooded'</span>, <span class="string">'animal'</span>])</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>obj = pd.Series([<span class="number">4</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">8</span>], name=<span class="string">'legs'</span>, index=idx)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>obj</span><br><span class="line">blooded  animal</span><br><span class="line">warm     dog       <span class="number">4</span></span><br><span class="line">         falcon    <span class="number">2</span></span><br><span class="line">cold     fish      <span class="number">0</span></span><br><span class="line">         spider    <span class="number">8</span></span><br><span class="line">Name: legs, dtype: int64</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>obj.idxmin()</span><br><span class="line">(<span class="string">'cold'</span>, <span class="string">'fish'</span>)</span><br></pre></td></tr></table></figure><p>在 DataFrame 中的应用：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>obj = pd.DataFrame([[<span class="number">1.4</span>, np.nan], [<span class="number">7.1</span>, <span class="number">-4.5</span>],</span><br><span class="line">    [np.nan, np.nan], [<span class="number">0.75</span>, <span class="number">-1.3</span>]],</span><br><span class="line">    index=[<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>, <span class="string">'d'</span>],columns=[<span class="string">'one'</span>, <span class="string">'two'</span>])</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>obj</span><br><span class="line">    one  two</span><br><span class="line">a  <span class="number">1.40</span>  NaN</span><br><span class="line">b  <span class="number">7.10</span> <span class="number">-4.5</span></span><br><span class="line">c   NaN  NaN</span><br><span class="line">d  <span class="number">0.75</span> <span class="number">-1.3</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>obj.idxmin()</span><br><span class="line">one    d</span><br><span class="line">two    b</span><br><span class="line">dtype: object</span><br></pre></td></tr></table></figure><h3 id="【01x06】idxmax-最大值索引"><a href="#【01x06】idxmax-最大值索引" class="headerlink" title="【01x06】idxmax() 最大值索引"></a><font color="#4876FF">【01x06】idxmax() 最大值索引</font></h3><p><code>idxmax()</code> 方法用于返回最大值的索引。</p><p>在 Series 和 DataFrame 中的基本语法如下：</p><ul><li><p><code>Series.idxmax(self, axis=0, skipna=True, *args, **kwargs)</code></p></li><li><p><code>DataFrame.idxmax(self, axis=0, skipna=True)</code></p></li></ul><p>官方文档：</p><ul><li><p><a href="https://pandas.pydata.org/docs/reference/api/pandas.Series.idxmax.html" target="_blank" rel="noopener">https://pandas.pydata.org/docs/reference/api/pandas.Series.idxmax.html</a></p></li><li><p><a href="https://pandas.pydata.org/docs/reference/api/pandas.DataFrame.idxmax.html" target="_blank" rel="noopener">https://pandas.pydata.org/docs/reference/api/pandas.DataFrame.idxmax.html</a></p></li></ul><p>常用参数描述如下：</p><table><thead><tr><th>参数</th><th>描述</th></tr></thead><tbody><tr><td>axis</td><td>指定轴，<code>0</code> or <code>‘index’</code>，<code>1</code> or <code>‘columns’</code>，只有在 DataFrame 中才有 <code>1</code> or <code>&#39;columns’</code></td></tr><tr><td>skipna</td><td>bool 类型，是否排除缺失值（NA/null），默认 True</td></tr></tbody></table><p>在 Series 中的应用：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>idx = pd.MultiIndex.from_arrays([</span><br><span class="line">    [<span class="string">'warm'</span>, <span class="string">'warm'</span>, <span class="string">'cold'</span>, <span class="string">'cold'</span>],</span><br><span class="line">    [<span class="string">'dog'</span>, <span class="string">'falcon'</span>, <span class="string">'fish'</span>, <span class="string">'spider'</span>]],</span><br><span class="line">    names=[<span class="string">'blooded'</span>, <span class="string">'animal'</span>])</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>obj = pd.Series([<span class="number">4</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">8</span>], name=<span class="string">'legs'</span>, index=idx)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>obj</span><br><span class="line">blooded  animal</span><br><span class="line">warm     dog       <span class="number">4</span></span><br><span class="line">         falcon    <span class="number">2</span></span><br><span class="line">cold     fish      <span class="number">0</span></span><br><span class="line">         spider    <span class="number">8</span></span><br><span class="line">Name: legs, dtype: int64</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>obj.idxmax()</span><br><span class="line">(<span class="string">'cold'</span>, <span class="string">'spider'</span>)</span><br></pre></td></tr></table></figure><p>在 DataFrame 中的应用：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>obj = pd.DataFrame([[<span class="number">1.4</span>, np.nan], [<span class="number">7.1</span>, <span class="number">-4.5</span>],</span><br><span class="line">    [np.nan, np.nan], [<span class="number">0.75</span>, <span class="number">-1.3</span>]],</span><br><span class="line">    index=[<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>, <span class="string">'d'</span>],columns=[<span class="string">'one'</span>, <span class="string">'two'</span>])</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>obj</span><br><span class="line">    one  two</span><br><span class="line">a  <span class="number">1.40</span>  NaN</span><br><span class="line">b  <span class="number">7.10</span> <span class="number">-4.5</span></span><br><span class="line">c   NaN  NaN</span><br><span class="line">d  <span class="number">0.75</span> <span class="number">-1.3</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>obj.idxmax()</span><br><span class="line">one    b</span><br><span class="line">two    d</span><br><span class="line">dtype: object</span><br></pre></td></tr></table></figure><h2 id="【02x00】统计描述"><a href="#【02x00】统计描述" class="headerlink" title="【02x00】统计描述"></a><font color="#FF0000">【02x00】统计描述</font></h2><p><code>describe()</code> 方法用于快速综合统计结果：计数、均值、标准差、最大最小值、四分位数等。还可以通过参数来设置需要忽略或者包含的统计选项。</p><p>在 Series 和 DataFrame 中的基本语法如下：</p><ul><li><p><code>Series.describe(self: ~ FrameOrSeries, percentiles=None, include=None, exclude=None)</code></p></li><li><p><code>DataFrame.describe(self: ~ FrameOrSeries, percentiles=None, include=None, exclude=None)</code></p></li></ul><p>官方文档：</p><ul><li><p><a href="https://pandas.pydata.org/docs/reference/api/pandas.Series.describe.html" target="_blank" rel="noopener">https://pandas.pydata.org/docs/reference/api/pandas.Series.describe.html</a></p></li><li><p><a href="https://pandas.pydata.org/docs/reference/api/pandas.DataFrame.describe.html" target="_blank" rel="noopener">https://pandas.pydata.org/docs/reference/api/pandas.DataFrame.describe.html</a></p></li></ul><table><thead><tr><th>参数</th><th>描述</th></tr></thead><tbody><tr><td>percentiles</td><td>数字列表，可选项，要包含在输出中的百分比。所有值都应介于 0 和 1 之间。默认值为 [.25、.5、.75]，即返回第 25、50 和 75 个百分点</td></tr><tr><td>include</td><td>要包含在结果中的数据类型，数据类型列表，默认 None，具体取值类型参见官方文档</td></tr><tr><td>exclude</td><td>要从结果中忽略的数据类型，数据类型列表，默认 None，具体取值类型参见官方文档</td></tr></tbody></table><p>描述数字形式的 Series 对象：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>obj = pd.Series([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>])</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>obj</span><br><span class="line"><span class="number">0</span>    <span class="number">1</span></span><br><span class="line"><span class="number">1</span>    <span class="number">2</span></span><br><span class="line"><span class="number">2</span>    <span class="number">3</span></span><br><span class="line">dtype: int64</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>obj.describe()</span><br><span class="line">count    <span class="number">3.0</span></span><br><span class="line">mean     <span class="number">2.0</span></span><br><span class="line">std      <span class="number">1.0</span></span><br><span class="line">min      <span class="number">1.0</span></span><br><span class="line"><span class="number">25</span>%      <span class="number">1.5</span></span><br><span class="line"><span class="number">50</span>%      <span class="number">2.0</span></span><br><span class="line"><span class="number">75</span>%      <span class="number">2.5</span></span><br><span class="line">max      <span class="number">3.0</span></span><br><span class="line">dtype: float64</span><br></pre></td></tr></table></figure><p>分类描述：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>obj = pd.Series([<span class="string">'a'</span>, <span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>])</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>obj</span><br><span class="line"><span class="number">0</span>    a</span><br><span class="line"><span class="number">1</span>    a</span><br><span class="line"><span class="number">2</span>    b</span><br><span class="line"><span class="number">3</span>    c</span><br><span class="line">dtype: object</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>obj.describe()</span><br><span class="line">count     <span class="number">4</span></span><br><span class="line">unique    <span class="number">3</span></span><br><span class="line">top       a</span><br><span class="line">freq      <span class="number">2</span></span><br><span class="line">dtype: object</span><br></pre></td></tr></table></figure><p>描述时间戳：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>obj  = pd.Series([</span><br><span class="line">    np.datetime64(<span class="string">"2000-01-01"</span>),</span><br><span class="line">    np.datetime64(<span class="string">"2010-01-01"</span>),</span><br><span class="line">    np.datetime64(<span class="string">"2010-01-01"</span>)</span><br><span class="line">    ])</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>obj</span><br><span class="line"><span class="number">0</span>   <span class="number">2000</span><span class="number">-01</span><span class="number">-01</span></span><br><span class="line"><span class="number">1</span>   <span class="number">2010</span><span class="number">-01</span><span class="number">-01</span></span><br><span class="line"><span class="number">2</span>   <span class="number">2010</span><span class="number">-01</span><span class="number">-01</span></span><br><span class="line">dtype: datetime64[ns]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>obj.describe()</span><br><span class="line">count                       <span class="number">3</span></span><br><span class="line">unique                      <span class="number">2</span></span><br><span class="line">top       <span class="number">2010</span><span class="number">-01</span><span class="number">-01</span> <span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span></span><br><span class="line">freq                        <span class="number">2</span></span><br><span class="line">first     <span class="number">2000</span><span class="number">-01</span><span class="number">-01</span> <span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span></span><br><span class="line">last      <span class="number">2010</span><span class="number">-01</span><span class="number">-01</span> <span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span></span><br><span class="line">dtype: object</span><br></pre></td></tr></table></figure><p>描述 DataFrame 对象：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>obj = pd.DataFrame(&#123;<span class="string">'categorical'</span>: pd.Categorical([<span class="string">'d'</span>,<span class="string">'e'</span>,<span class="string">'f'</span>]), <span class="string">'numeric'</span>: [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>], <span class="string">'object'</span>: [<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>]&#125;)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>obj</span><br><span class="line">  categorical  numeric object</span><br><span class="line"><span class="number">0</span>           d        <span class="number">1</span>      a</span><br><span class="line"><span class="number">1</span>           e        <span class="number">2</span>      b</span><br><span class="line"><span class="number">2</span>           f        <span class="number">3</span>      c</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>obj.describe()</span><br><span class="line">       numeric</span><br><span class="line">count      <span class="number">3.0</span></span><br><span class="line">mean       <span class="number">2.0</span></span><br><span class="line">std        <span class="number">1.0</span></span><br><span class="line">min        <span class="number">1.0</span></span><br><span class="line"><span class="number">25</span>%        <span class="number">1.5</span></span><br><span class="line"><span class="number">50</span>%        <span class="number">2.0</span></span><br><span class="line"><span class="number">75</span>%        <span class="number">2.5</span></span><br><span class="line">max        <span class="number">3.0</span></span><br></pre></td></tr></table></figure><p>不考虑数据类型，显示所有描述：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>obj = pd.DataFrame(&#123;<span class="string">'categorical'</span>: pd.Categorical([<span class="string">'d'</span>,<span class="string">'e'</span>,<span class="string">'f'</span>]), <span class="string">'numeric'</span>: [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>], <span class="string">'object'</span>: [<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>]&#125;)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>obj</span><br><span class="line">  categorical  numeric object</span><br><span class="line"><span class="number">0</span>           d        <span class="number">1</span>      a</span><br><span class="line"><span class="number">1</span>           e        <span class="number">2</span>      b</span><br><span class="line"><span class="number">2</span>           f        <span class="number">3</span>      c</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>obj.describe(include=<span class="string">'all'</span>)</span><br><span class="line">       categorical  numeric object</span><br><span class="line">count            <span class="number">3</span>      <span class="number">3.0</span>      <span class="number">3</span></span><br><span class="line">unique           <span class="number">3</span>      NaN      <span class="number">3</span></span><br><span class="line">top              f      NaN      c</span><br><span class="line">freq             <span class="number">1</span>      NaN      <span class="number">1</span></span><br><span class="line">mean           NaN      <span class="number">2.0</span>    NaN</span><br><span class="line">std            NaN      <span class="number">1.0</span>    NaN</span><br><span class="line">min            NaN      <span class="number">1.0</span>    NaN</span><br><span class="line"><span class="number">25</span>%            NaN      <span class="number">1.5</span>    NaN</span><br><span class="line"><span class="number">50</span>%            NaN      <span class="number">2.0</span>    NaN</span><br><span class="line"><span class="number">75</span>%            NaN      <span class="number">2.5</span>    NaN</span><br><span class="line">max            NaN      <span class="number">3.0</span>    NaN</span><br></pre></td></tr></table></figure><p>仅包含 category 列：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>obj = pd.DataFrame(&#123;<span class="string">'categorical'</span>: pd.Categorical([<span class="string">'d'</span>,<span class="string">'e'</span>,<span class="string">'f'</span>]), <span class="string">'numeric'</span>: [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>], <span class="string">'object'</span>: [<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>]&#125;)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>obj</span><br><span class="line">  categorical  numeric object</span><br><span class="line"><span class="number">0</span>           d        <span class="number">1</span>      a</span><br><span class="line"><span class="number">1</span>           e        <span class="number">2</span>      b</span><br><span class="line"><span class="number">2</span>           f        <span class="number">3</span>      c</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>obj.describe(include=[<span class="string">'category'</span>])</span><br><span class="line">       categorical</span><br><span class="line">count            <span class="number">3</span></span><br><span class="line">unique           <span class="number">3</span></span><br><span class="line">top              f</span><br><span class="line">freq             <span class="number">1</span></span><br></pre></td></tr></table></figure><h2 id="【03x00】常用统计方法"><a href="#【03x00】常用统计方法" class="headerlink" title="【03x00】常用统计方法"></a><font color="#FF0000">【03x00】常用统计方法</font></h2><p>其他常用统计方法参见下表：</p><table><thead><tr><th>方法</th><th>描述</th><th>官方文档</th></tr></thead><tbody><tr><td>count</td><td>非NA值的数量</td><td><a href="https://pandas.pydata.org/docs/reference/api/pandas.Series.count.html" target="_blank" rel="noopener">Series</a>丨<a href="https://pandas.pydata.org/docs/reference/api/pandas.DataFrame.count.html" target="_blank" rel="noopener">DataFrame</a></td></tr><tr><td>describe</td><td>针对Series或各DataFrame列计算汇总统计</td><td><a href="https://pandas.pydata.org/docs/reference/api/pandas.Series.describe.html" target="_blank" rel="noopener">Series</a>丨<a href="https://pandas.pydata.org/docs/reference/api/pandas.DataFrame.describe.html" target="_blank" rel="noopener">DataFrame</a></td></tr><tr><td>min</td><td>计算最小值</td><td><a href="https://pandas.pydata.org/docs/reference/api/pandas.Series.min.html" target="_blank" rel="noopener">Series</a>丨<a href="https://pandas.pydata.org/docs/reference/api/pandas.DataFrame.min.html" target="_blank" rel="noopener">DataFrame</a></td></tr><tr><td>max</td><td>计算最大值</td><td><a href="https://pandas.pydata.org/docs/reference/api/pandas.Series.max.html" target="_blank" rel="noopener">Series</a>丨<a href="https://pandas.pydata.org/docs/reference/api/pandas.DataFrame.max.html" target="_blank" rel="noopener">DataFrame</a></td></tr><tr><td>argmin</td><td>计算能够获取到最小值的索引位置（整数）</td><td><a href="https://pandas.pydata.org/docs/reference/api/pandas.Series.argmin.html" target="_blank" rel="noopener">Series</a></td></tr><tr><td>argmax</td><td>计算能够获取到最大值的索引位置（整数）</td><td><a href="https://pandas.pydata.org/docs/reference/api/pandas.Series.argmax.html" target="_blank" rel="noopener">Series</a></td></tr><tr><td>idxmin</td><td>计算能够获取到最小值的索引值</td><td><a href="https://pandas.pydata.org/docs/reference/api/pandas.Series.idxmin.html" target="_blank" rel="noopener">Series</a>丨<a href="https://pandas.pydata.org/docs/reference/api/pandas.DataFrame.idxmin.html" target="_blank" rel="noopener">DataFrame</a></td></tr><tr><td>idxmax</td><td>计算能够获取到最大值的索引值</td><td><a href="https://pandas.pydata.org/docs/reference/api/pandas.Series.idxmax.html" target="_blank" rel="noopener">Series</a>丨<a href="https://pandas.pydata.org/docs/reference/api/pandas.DataFrame.idxmax.html" target="_blank" rel="noopener">DataFrame</a></td></tr><tr><td>quantile</td><td>计算样本的分位数（0到1）</td><td><a href="https://pandas.pydata.org/docs/reference/api/pandas.Series.quantile.html" target="_blank" rel="noopener">Series</a>丨<a href="https://pandas.pydata.org/docs/reference/api/pandas.DataFrame.quantile.html" target="_blank" rel="noopener">DataFrame</a></td></tr><tr><td>sum</td><td>值的总和</td><td><a href="https://pandas.pydata.org/docs/reference/api/pandas.Series.sum.html" target="_blank" rel="noopener">Series</a>丨<a href="https://pandas.pydata.org/docs/reference/api/pandas.DataFrame.sum.html" target="_blank" rel="noopener">DataFrame</a></td></tr><tr><td>mean</td><td>值的平均数</td><td><a href="https://pandas.pydata.org/docs/reference/api/pandas.Series.mean.html" target="_blank" rel="noopener">Series</a>丨<a href="https://pandas.pydata.org/docs/reference/api/pandas.DataFrame.mean.html" target="_blank" rel="noopener">DataFrame</a></td></tr><tr><td>median</td><td>值的算术中位数（50%分位数）</td><td><a href="https://pandas.pydata.org/docs/reference/api/pandas.Series.median.html" target="_blank" rel="noopener">Series</a>丨<a href="https://pandas.pydata.org/docs/reference/api/pandas.DataFrame.median.html" target="_blank" rel="noopener">DataFrame</a></td></tr><tr><td>mad</td><td>根据平均值计算平均绝对离差</td><td><a href="https://pandas.pydata.org/docs/reference/api/pandas.Series.mad.html" target="_blank" rel="noopener">Series</a>丨<a href="https://pandas.pydata.org/docs/reference/api/pandas.DataFrame.mad.html" target="_blank" rel="noopener">DataFrame</a></td></tr><tr><td>var</td><td>样本值的方差</td><td><a href="https://pandas.pydata.org/docs/reference/api/pandas.Series.var.html" target="_blank" rel="noopener">Series</a>丨<a href="https://pandas.pydata.org/docs/reference/api/pandas.DataFrame.var.html" target="_blank" rel="noopener">DataFrame</a></td></tr><tr><td>std</td><td>样本值的标准差</td><td><a href="https://pandas.pydata.org/docs/reference/api/pandas.Series.std.html" target="_blank" rel="noopener">Series</a>丨<a href="https://pandas.pydata.org/docs/reference/api/pandas.DataFrame.std.html" target="_blank" rel="noopener">DataFrame</a></td></tr></tbody></table><hr><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">这里是一段防爬虫文本，请读者忽略。</span></span><br><span class="line"><span class="string">本文原创首发于</span> <span class="string">CSDN，作者</span> <span class="string">TRHX。</span></span><br><span class="line"><span class="string">博客首页：https://itrhx.blog.csdn.net/</span></span><br><span class="line"><span class="string">本文链接：https://itrhx.blog.csdn.net/article/details/106788501</span></span><br><span class="line"><span class="string">未经授权，禁止转载！恶意转载，后果自负！尊重原创，远离剽窃！</span></span><br></pre></td></tr></table></figure><hr>]]></content>
    
    <summary type="html">
    
      Python 数据分析三剑客之 Pandas（五）：统计计算与统计描述。
    
    </summary>
    
      <category term="Python 数据分析" scheme="https://www.itrhx.com/categories/Python-%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/"/>
    
      <category term="Pandas" scheme="https://www.itrhx.com/categories/Python-%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/Pandas/"/>
    
    
      <category term="Pandas" scheme="https://www.itrhx.com/tags/Pandas/"/>
    
      <category term="统计计算" scheme="https://www.itrhx.com/tags/%E7%BB%9F%E8%AE%A1%E8%AE%A1%E7%AE%97/"/>
    
      <category term="统计描述" scheme="https://www.itrhx.com/tags/%E7%BB%9F%E8%AE%A1%E6%8F%8F%E8%BF%B0/"/>
    
  </entry>
  
  <entry>
    <title>Python 数据分析三剑客之 Pandas（四）：函数应用/映射/排序和层级索引</title>
    <link href="https://www.itrhx.com/2020/06/15/A82-Pandas-04/"/>
    <id>https://www.itrhx.com/2020/06/15/A82-Pandas-04/</id>
    <published>2020-06-15T12:42:36.626Z</published>
    <updated>2020-07-06T13:44:46.745Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>Pandas 系列文章：</p><ul><li><a href="https://www.itrhx.com/2020/06/11/A79-Pandas-01/">Python 数据分析三剑客之 Pandas（一）：认识 Pandas 及其 Series、DataFrame 对象</a></li><li><a href="https://www.itrhx.com/2020/06/13/A80-Pandas-02/">Python 数据分析三剑客之 Pandas（二）：Index 索引对象以及各种索引操作</a></li><li><a href="https://www.itrhx.com/2020/06/14/A81-Pandas-03/">Python 数据分析三剑客之 Pandas（三）：算术运算与缺失值的处理</a></li><li><a href="https://www.itrhx.com/2020/06/15/A82-Pandas-04/">Python 数据分析三剑客之 Pandas（四）：函数应用、映射、排序和层级索引</a></li><li><a href="https://www.itrhx.com/2020/06/16/A83-Pandas-05/">Python 数据分析三剑客之 Pandas（五）：统计计算与统计描述</a></li><li><a href="https://www.itrhx.com/2020/06/17/A84-Pandas-06/">Python 数据分析三剑客之 Pandas（六）：GroupBy 数据分裂、应用与合并</a></li><li><a href="https://www.itrhx.com/2020/06/21/A85-Pandas-07/">Python 数据分析三剑客之 Pandas（七）：合并数据集</a></li><li><a href="https://www.itrhx.com/2020/06/22/A86-Pandas-08/">Python 数据分析三剑客之 Pandas（八）：数据重塑、重复数据处理与数据替换</a></li><li><a href="https://www.itrhx.com/2020/06/25/A87-Pandas-09/">Python 数据分析三剑客之 Pandas（九）：时间序列</a></li><li><a href="https://www.itrhx.com/2020/06/26/A88-Pandas-10/">Python 数据分析三剑客之 Pandas（十）：数据读写</a></li></ul><hr><p>专栏：</p><p>【<a href="https://www.itrhx.com/categories/Python-%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/NumPy/">NumPy 专栏</a>】【<a href="https://www.itrhx.com/categories/Python-%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/Pandas/">Pandas 专栏</a>】【<a href="https://www.itrhx.com/categories/Python-%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/Matplotlib/">Matplotlib 专栏</a>】</p><p>推荐学习资料与网站：</p><p>【<a href="https://www.numpy.org.cn/" target="_blank" rel="noopener">NumPy 中文网</a>】【<a href="https://www.pypandas.cn/" target="_blank" rel="noopener">Pandas 中文网</a>】【<a href="https://www.matplotlib.org.cn/" target="_blank" rel="noopener">Matplotlib 中文网</a>】【<a href="https://github.com/TRHX/Python-quick-reference-table" target="_blank" rel="noopener">NumPy、Matplotlib、Pandas 速查表</a>】</p><hr><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">这里是一段防爬虫文本，请读者忽略。</span></span><br><span class="line"><span class="string">本文原创首发于</span> <span class="string">CSDN，作者</span> <span class="string">TRHX。</span></span><br><span class="line"><span class="string">博客首页：https://itrhx.blog.csdn.net/</span></span><br><span class="line"><span class="string">本文链接：https://itrhx.blog.csdn.net/article/details/106758103</span></span><br><span class="line"><span class="string">未经授权，禁止转载！恶意转载，后果自负！尊重原创，远离剽窃！</span></span><br></pre></td></tr></table></figure><hr><h2 id="【01x00】函数应用和映射"><a href="#【01x00】函数应用和映射" class="headerlink" title="【01x00】函数应用和映射"></a><font color="#FF0000">【01x00】函数应用和映射</font></h2><p>Pandas 可直接使用 NumPy 的 ufunc（元素级数组方法） 函数：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>obj = pd.DataFrame(np.random.randn(<span class="number">5</span>,<span class="number">4</span>) - <span class="number">1</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>obj</span><br><span class="line">          <span class="number">0</span>         <span class="number">1</span>         <span class="number">2</span>         <span class="number">3</span></span><br><span class="line"><span class="number">0</span> <span class="number">-0.228107</span>  <span class="number">1.377709</span> <span class="number">-1.096528</span> <span class="number">-2.051001</span></span><br><span class="line"><span class="number">1</span> <span class="number">-2.477144</span> <span class="number">-0.500013</span> <span class="number">-0.040695</span> <span class="number">-0.267452</span></span><br><span class="line"><span class="number">2</span> <span class="number">-0.485999</span> <span class="number">-1.232930</span> <span class="number">-0.390701</span> <span class="number">-1.947984</span></span><br><span class="line"><span class="number">3</span> <span class="number">-0.839161</span> <span class="number">-0.702802</span> <span class="number">-1.756359</span> <span class="number">-1.873149</span></span><br><span class="line"><span class="number">4</span>  <span class="number">0.853121</span> <span class="number">-1.540105</span>  <span class="number">0.621614</span> <span class="number">-0.583360</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>np.abs(obj)</span><br><span class="line">          <span class="number">0</span>         <span class="number">1</span>         <span class="number">2</span>         <span class="number">3</span></span><br><span class="line"><span class="number">0</span>  <span class="number">0.228107</span>  <span class="number">1.377709</span>  <span class="number">1.096528</span>  <span class="number">2.051001</span></span><br><span class="line"><span class="number">1</span>  <span class="number">2.477144</span>  <span class="number">0.500013</span>  <span class="number">0.040695</span>  <span class="number">0.267452</span></span><br><span class="line"><span class="number">2</span>  <span class="number">0.485999</span>  <span class="number">1.232930</span>  <span class="number">0.390701</span>  <span class="number">1.947984</span></span><br><span class="line"><span class="number">3</span>  <span class="number">0.839161</span>  <span class="number">0.702802</span>  <span class="number">1.756359</span>  <span class="number">1.873149</span></span><br><span class="line"><span class="number">4</span>  <span class="number">0.853121</span>  <span class="number">1.540105</span>  <span class="number">0.621614</span>  <span class="number">0.583360</span></span><br></pre></td></tr></table></figure><p>函数映射：在 Pandas 中 <code>apply</code> 方法可以将函数应用到列或行上，可以通过设置 axis 参数来指定行或列，默认 axis = 0，即按列映射：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>obj = pd.DataFrame(np.random.randn(<span class="number">5</span>,<span class="number">4</span>) - <span class="number">1</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>obj</span><br><span class="line">          <span class="number">0</span>         <span class="number">1</span>         <span class="number">2</span>         <span class="number">3</span></span><br><span class="line"><span class="number">0</span> <span class="number">-0.707028</span> <span class="number">-0.755552</span> <span class="number">-2.196480</span> <span class="number">-0.529676</span></span><br><span class="line"><span class="number">1</span> <span class="number">-0.772668</span>  <span class="number">0.127485</span> <span class="number">-2.015699</span> <span class="number">-0.283654</span></span><br><span class="line"><span class="number">2</span>  <span class="number">0.248200</span> <span class="number">-1.940189</span> <span class="number">-1.068028</span> <span class="number">-1.751737</span></span><br><span class="line"><span class="number">3</span> <span class="number">-0.872904</span> <span class="number">-0.465371</span> <span class="number">-1.327951</span> <span class="number">-2.883160</span></span><br><span class="line"><span class="number">4</span> <span class="number">-0.092664</span>  <span class="number">0.258351</span> <span class="number">-1.010747</span> <span class="number">-2.313039</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>obj.apply(<span class="keyword">lambda</span> x : x.max())</span><br><span class="line"><span class="number">0</span>    <span class="number">0.248200</span></span><br><span class="line"><span class="number">1</span>    <span class="number">0.258351</span></span><br><span class="line"><span class="number">2</span>   <span class="number">-1.010747</span></span><br><span class="line"><span class="number">3</span>   <span class="number">-0.283654</span></span><br><span class="line">dtype: float64</span><br><span class="line">&gt;&gt;&gt;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>obj.apply(<span class="keyword">lambda</span> x : x.max(), axis=<span class="number">1</span>)</span><br><span class="line"><span class="number">0</span>   <span class="number">-0.529676</span></span><br><span class="line"><span class="number">1</span>    <span class="number">0.127485</span></span><br><span class="line"><span class="number">2</span>    <span class="number">0.248200</span></span><br><span class="line"><span class="number">3</span>   <span class="number">-0.465371</span></span><br><span class="line"><span class="number">4</span>    <span class="number">0.258351</span></span><br><span class="line">dtype: float64</span><br></pre></td></tr></table></figure><p>另外还可以通过 <code>applymap</code> 将函数映射到每个数据上：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>obj = pd.DataFrame(np.random.randn(<span class="number">5</span>,<span class="number">4</span>) - <span class="number">1</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>obj</span><br><span class="line">          <span class="number">0</span>         <span class="number">1</span>         <span class="number">2</span>         <span class="number">3</span></span><br><span class="line"><span class="number">0</span> <span class="number">-0.772463</span> <span class="number">-1.597008</span> <span class="number">-3.196100</span> <span class="number">-1.948486</span></span><br><span class="line"><span class="number">1</span> <span class="number">-1.765108</span> <span class="number">-1.646421</span> <span class="number">-0.687175</span> <span class="number">-0.401782</span></span><br><span class="line"><span class="number">2</span>  <span class="number">0.275699</span> <span class="number">-3.115184</span> <span class="number">-1.429063</span> <span class="number">-1.075610</span></span><br><span class="line"><span class="number">3</span> <span class="number">-0.251734</span> <span class="number">-0.448399</span> <span class="number">-3.077677</span> <span class="number">-0.294674</span></span><br><span class="line"><span class="number">4</span> <span class="number">-1.495896</span> <span class="number">-1.689729</span> <span class="number">-0.560376</span> <span class="number">-1.808794</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>obj.applymap(<span class="keyword">lambda</span> x : <span class="string">'%.2f'</span> % x)</span><br><span class="line">       <span class="number">0</span>      <span class="number">1</span>      <span class="number">2</span>      <span class="number">3</span></span><br><span class="line"><span class="number">0</span>  <span class="number">-0.77</span>  <span class="number">-1.60</span>  <span class="number">-3.20</span>  <span class="number">-1.95</span></span><br><span class="line"><span class="number">1</span>  <span class="number">-1.77</span>  <span class="number">-1.65</span>  <span class="number">-0.69</span>  <span class="number">-0.40</span></span><br><span class="line"><span class="number">2</span>   <span class="number">0.28</span>  <span class="number">-3.12</span>  <span class="number">-1.43</span>  <span class="number">-1.08</span></span><br><span class="line"><span class="number">3</span>  <span class="number">-0.25</span>  <span class="number">-0.45</span>  <span class="number">-3.08</span>  <span class="number">-0.29</span></span><br><span class="line"><span class="number">4</span>  <span class="number">-1.50</span>  <span class="number">-1.69</span>  <span class="number">-0.56</span>  <span class="number">-1.81</span></span><br></pre></td></tr></table></figure><h2 id="【02x00】排序"><a href="#【02x00】排序" class="headerlink" title="【02x00】排序"></a><font color="#FF0000">【02x00】排序</font></h2><h3 id="【02x01】sort-index-索引排序"><a href="#【02x01】sort-index-索引排序" class="headerlink" title="【02x01】sort_index() 索引排序"></a><font color="#4876FF">【02x01】sort_index() 索引排序</font></h3><p>根据条件对数据集排序（sorting）也是一种重要的内置运算。要对行或列索引进行排序（按字典顺序），可使用 <code>sort_index</code> 方法，它将返回一个已排序的新对象。</p><p>在 Series 和 DataFrame 中的基本语法如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Series.sort_index(self,</span><br><span class="line">  axis=<span class="number">0</span>,</span><br><span class="line">  level=<span class="keyword">None</span>,</span><br><span class="line">  ascending=<span class="keyword">True</span>,</span><br><span class="line">  inplace=<span class="keyword">False</span>,</span><br><span class="line">  kind=<span class="string">'quicksort'</span>,</span><br><span class="line">  na_position=<span class="string">'last'</span>,</span><br><span class="line">  sort_remaining=<span class="keyword">True</span>,</span><br><span class="line">  ignore_index: bool = <span class="keyword">False</span>)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">DataFrame.sort_index(self,</span><br><span class="line"> axis=<span class="number">0</span>,</span><br><span class="line"> level=<span class="keyword">None</span>,</span><br><span class="line"> ascending=<span class="keyword">True</span>,</span><br><span class="line"> inplace=<span class="keyword">False</span>,</span><br><span class="line"> kind=<span class="string">'quicksort'</span>,</span><br><span class="line"> na_position=<span class="string">'last'</span>,</span><br><span class="line"> sort_remaining=<span class="keyword">True</span>,</span><br><span class="line"> ignore_index: bool = <span class="keyword">False</span>)</span><br></pre></td></tr></table></figure><p>官方文档：</p><ul><li><a href="https://pandas.pydata.org/docs/reference/api/pandas.Series.sort_index.html" target="_blank" rel="noopener">https://pandas.pydata.org/docs/reference/api/pandas.Series.sort_index.html</a></li><li><a href="https://pandas.pydata.org/docs/reference/api/pandas.DataFrame.sort_index.html" target="_blank" rel="noopener">https://pandas.pydata.org/docs/reference/api/pandas.DataFrame.sort_index.html</a></li></ul><p>常用参数描述如下：</p><table><thead><tr><th>参数</th><th>描述</th></tr></thead><tbody><tr><td>axis</td><td>指定轴排序，<code>0</code> or <code>‘index’</code>，<code>1</code> or <code>‘columns’</code>，只有在 DataFrame 中才有 <code>1</code> or <code>&#39;columns’</code></td></tr><tr><td>ascending</td><td>为 <code>True</code>时升序排序（默认），为 <code>False</code>时降序排序</td></tr><tr><td>kind</td><td>排序方法，<code>quicksort</code>：快速排序（默认）；<code>&#39;mergesort’</code>：归并排序；<code>&#39;heapsort&#39;</code>：堆排序；具体可参见 <a href="https://numpy.org/doc/stable/reference/generated/numpy.sort.html" target="_blank" rel="noopener">numpy.sort()</a></td></tr></tbody></table><p>在 Series 中的应用（按照索引 index 排序）：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>obj = pd.Series(range(<span class="number">4</span>), index=[<span class="string">'d'</span>, <span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>])</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>obj</span><br><span class="line">d    <span class="number">0</span></span><br><span class="line">a    <span class="number">1</span></span><br><span class="line">b    <span class="number">2</span></span><br><span class="line">c    <span class="number">3</span></span><br><span class="line">dtype: int64</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>obj.sort_index()</span><br><span class="line">a    <span class="number">1</span></span><br><span class="line">b    <span class="number">2</span></span><br><span class="line">c    <span class="number">3</span></span><br><span class="line">d    <span class="number">0</span></span><br><span class="line">dtype: int64</span><br></pre></td></tr></table></figure><p>在 DataFrame 中的应用（可按照索引 index 或列标签 columns 排序）：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>obj = pd.DataFrame(np.arange(<span class="number">8</span>).reshape((<span class="number">2</span>, <span class="number">4</span>)), index=[<span class="string">'three'</span>, <span class="string">'one'</span>], columns=[<span class="string">'d'</span>, <span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>])</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>obj</span><br><span class="line">       d  a  b  c</span><br><span class="line">three  <span class="number">0</span>  <span class="number">1</span>  <span class="number">2</span>  <span class="number">3</span></span><br><span class="line">one    <span class="number">4</span>  <span class="number">5</span>  <span class="number">6</span>  <span class="number">7</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>obj.sort_index()</span><br><span class="line">       d  a  b  c</span><br><span class="line">one    <span class="number">4</span>  <span class="number">5</span>  <span class="number">6</span>  <span class="number">7</span></span><br><span class="line">three  <span class="number">0</span>  <span class="number">1</span>  <span class="number">2</span>  <span class="number">3</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>obj.sort_index(axis=<span class="number">1</span>)</span><br><span class="line">       a  b  c  d</span><br><span class="line">three  <span class="number">1</span>  <span class="number">2</span>  <span class="number">3</span>  <span class="number">0</span></span><br><span class="line">one    <span class="number">5</span>  <span class="number">6</span>  <span class="number">7</span>  <span class="number">4</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>obj.sort_index(axis=<span class="number">1</span>, ascending=<span class="keyword">False</span>)</span><br><span class="line">       d  c  b  a</span><br><span class="line">three  <span class="number">0</span>  <span class="number">3</span>  <span class="number">2</span>  <span class="number">1</span></span><br><span class="line">one    <span class="number">4</span>  <span class="number">7</span>  <span class="number">6</span>  <span class="number">5</span></span><br></pre></td></tr></table></figure><h3 id="【02x02】sort-values-按值排序"><a href="#【02x02】sort-values-按值排序" class="headerlink" title="【02x02】sort_values() 按值排序"></a><font color="#4876FF">【02x02】sort_values() 按值排序</font></h3><p>在 Series 和 DataFrame 中的基本语法如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Series.sort_values(self,</span><br><span class="line">   axis=<span class="number">0</span>,</span><br><span class="line">   ascending=<span class="keyword">True</span>,</span><br><span class="line">   inplace=<span class="keyword">False</span>,</span><br><span class="line">   kind=<span class="string">'quicksort'</span>,</span><br><span class="line">   na_position=<span class="string">'last'</span>,</span><br><span class="line">   ignore_index=<span class="keyword">False</span>)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">DataFrame.sort_values(self,</span><br><span class="line">  by,</span><br><span class="line">  axis=<span class="number">0</span>,</span><br><span class="line">  ascending=<span class="keyword">True</span>,</span><br><span class="line">  inplace=<span class="keyword">False</span>,</span><br><span class="line">  kind=<span class="string">'quicksort'</span>,</span><br><span class="line">  na_position=<span class="string">'last'</span>,</span><br><span class="line">  ignore_index=<span class="keyword">False</span>)</span><br></pre></td></tr></table></figure><p>官方文档：</p><ul><li><p><a href="https://pandas.pydata.org/docs/reference/api/pandas.Series.sort_values.html" target="_blank" rel="noopener">https://pandas.pydata.org/docs/reference/api/pandas.Series.sort_values.html</a></p></li><li><p><a href="https://pandas.pydata.org/docs/reference/api/pandas.DataFrame.sort_values.html" target="_blank" rel="noopener">https://pandas.pydata.org/docs/reference/api/pandas.DataFrame.sort_values.html</a></p></li></ul><p>常用参数描述如下：</p><table><thead><tr><th>参数</th><th>描述</th></tr></thead><tbody><tr><td>by</td><td>DataFrame 中的必须参数，指定列的值进行排序，Series 中没有此参数</td></tr><tr><td>axis</td><td>指定轴排序，<code>0</code> or <code>‘index’</code>，<code>1</code> or <code>‘columns’</code>，只有在 DataFrame 中才有 <code>1</code> or <code>&#39;columns’</code></td></tr><tr><td>ascending</td><td>为 <code>True</code>时升序排序（默认），为 <code>False</code>时降序排序</td></tr><tr><td>kind</td><td>排序方法，<code>quicksort</code>：快速排序（默认）；<code>&#39;mergesort’</code>：归并排序；<code>&#39;heapsort&#39;</code>：堆排序；具体可参见 <a href="https://numpy.org/doc/stable/reference/generated/numpy.sort.html" target="_blank" rel="noopener">numpy.sort()</a></td></tr></tbody></table><p>在 Series 中的应用，按照值排序，如果有缺失值，默认都会被放到 Series 的末尾：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>obj = pd.Series([<span class="number">4</span>, <span class="number">7</span>, <span class="number">-3</span>, <span class="number">2</span>])</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>obj</span><br><span class="line"><span class="number">0</span>    <span class="number">4</span></span><br><span class="line"><span class="number">1</span>    <span class="number">7</span></span><br><span class="line"><span class="number">2</span>   <span class="number">-3</span></span><br><span class="line"><span class="number">3</span>    <span class="number">2</span></span><br><span class="line">dtype: int64</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>obj.sort_values()</span><br><span class="line"><span class="number">2</span>   <span class="number">-3</span></span><br><span class="line"><span class="number">3</span>    <span class="number">2</span></span><br><span class="line"><span class="number">0</span>    <span class="number">4</span></span><br><span class="line"><span class="number">1</span>    <span class="number">7</span></span><br><span class="line">dtype: int64</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>obj = pd.Series([<span class="number">4</span>, np.nan, <span class="number">7</span>, np.nan, <span class="number">-3</span>, <span class="number">2</span>])</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>obj</span><br><span class="line"><span class="number">0</span>    <span class="number">4.0</span></span><br><span class="line"><span class="number">1</span>    NaN</span><br><span class="line"><span class="number">2</span>    <span class="number">7.0</span></span><br><span class="line"><span class="number">3</span>    NaN</span><br><span class="line"><span class="number">4</span>   <span class="number">-3.0</span></span><br><span class="line"><span class="number">5</span>    <span class="number">2.0</span></span><br><span class="line">dtype: float64</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>obj.sort_values()</span><br><span class="line"><span class="number">4</span>   <span class="number">-3.0</span></span><br><span class="line"><span class="number">5</span>    <span class="number">2.0</span></span><br><span class="line"><span class="number">0</span>    <span class="number">4.0</span></span><br><span class="line"><span class="number">2</span>    <span class="number">7.0</span></span><br><span class="line"><span class="number">1</span>    NaN</span><br><span class="line"><span class="number">3</span>    NaN</span><br><span class="line">dtype: float64</span><br></pre></td></tr></table></figure><p>在 DataFrame 中的应用，有时候可能希望根据一个或多个列中的值进行排序。将一个或多个列的名字传递给 <code>sort_values()</code> 的 <code>by</code> 参数即可达到该目的，当传递多个列时，首先会对第一列进行排序，若第一列有相同的值，再根据第二列进行排序，依次类推：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>obj = pd.DataFrame(&#123;<span class="string">'a'</span>: [<span class="number">4</span>, <span class="number">4</span>, <span class="number">-3</span>, <span class="number">2</span>], <span class="string">'b'</span>: [<span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>], <span class="string">'c'</span>: [<span class="number">6</span>, <span class="number">4</span>, <span class="number">1</span>, <span class="number">3</span>]&#125;)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>obj</span><br><span class="line">   a  b  c</span><br><span class="line"><span class="number">0</span>  <span class="number">4</span>  <span class="number">0</span>  <span class="number">6</span></span><br><span class="line"><span class="number">1</span>  <span class="number">4</span>  <span class="number">1</span>  <span class="number">4</span></span><br><span class="line"><span class="number">2</span> <span class="number">-3</span>  <span class="number">0</span>  <span class="number">1</span></span><br><span class="line"><span class="number">3</span>  <span class="number">2</span>  <span class="number">1</span>  <span class="number">3</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>obj.sort_values(by=<span class="string">'c'</span>)</span><br><span class="line">   a  b  c</span><br><span class="line"><span class="number">2</span> <span class="number">-3</span>  <span class="number">0</span>  <span class="number">1</span></span><br><span class="line"><span class="number">3</span>  <span class="number">2</span>  <span class="number">1</span>  <span class="number">3</span></span><br><span class="line"><span class="number">1</span>  <span class="number">4</span>  <span class="number">1</span>  <span class="number">4</span></span><br><span class="line"><span class="number">0</span>  <span class="number">4</span>  <span class="number">0</span>  <span class="number">6</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>obj.sort_values(by=<span class="string">'c'</span>, ascending=<span class="keyword">False</span>)</span><br><span class="line">   a  b  c</span><br><span class="line"><span class="number">0</span>  <span class="number">4</span>  <span class="number">0</span>  <span class="number">6</span></span><br><span class="line"><span class="number">1</span>  <span class="number">4</span>  <span class="number">1</span>  <span class="number">4</span></span><br><span class="line"><span class="number">3</span>  <span class="number">2</span>  <span class="number">1</span>  <span class="number">3</span></span><br><span class="line"><span class="number">2</span> <span class="number">-3</span>  <span class="number">0</span>  <span class="number">1</span></span><br><span class="line">&gt;&gt;&gt;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>obj.sort_values(by=[<span class="string">'a'</span>, <span class="string">'b'</span>])</span><br><span class="line">   a  b  c</span><br><span class="line"><span class="number">2</span> <span class="number">-3</span>  <span class="number">0</span>  <span class="number">1</span></span><br><span class="line"><span class="number">3</span>  <span class="number">2</span>  <span class="number">1</span>  <span class="number">3</span></span><br><span class="line"><span class="number">0</span>  <span class="number">4</span>  <span class="number">0</span>  <span class="number">6</span></span><br><span class="line"><span class="number">1</span>  <span class="number">4</span>  <span class="number">1</span>  <span class="number">4</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>obj = pd.DataFrame(&#123;<span class="string">'a'</span>: [<span class="number">4</span>, <span class="number">4</span>, <span class="number">-3</span>, <span class="number">2</span>], <span class="string">'b'</span>: [<span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>], <span class="string">'c'</span>: [<span class="number">6</span>, <span class="number">4</span>, <span class="number">1</span>, <span class="number">3</span>]&#125;, index=[<span class="string">'A'</span>, <span class="string">'B'</span>, <span class="string">'C'</span>, <span class="string">'D'</span>])</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>obj</span><br><span class="line">   a  b  c</span><br><span class="line">A  <span class="number">4</span>  <span class="number">0</span>  <span class="number">6</span></span><br><span class="line">B  <span class="number">4</span>  <span class="number">1</span>  <span class="number">4</span></span><br><span class="line">C <span class="number">-3</span>  <span class="number">0</span>  <span class="number">1</span></span><br><span class="line">D  <span class="number">2</span>  <span class="number">1</span>  <span class="number">3</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>obj.sort_values(by=<span class="string">'B'</span>, axis=<span class="number">1</span>)</span><br><span class="line">   b  a  c</span><br><span class="line">A  <span class="number">0</span>  <span class="number">4</span>  <span class="number">6</span></span><br><span class="line">B  <span class="number">1</span>  <span class="number">4</span>  <span class="number">4</span></span><br><span class="line">C  <span class="number">0</span> <span class="number">-3</span>  <span class="number">1</span></span><br><span class="line">D  <span class="number">1</span>  <span class="number">2</span>  <span class="number">3</span></span><br></pre></td></tr></table></figure><h3 id="【02x03】rank-返回排序后元素索引"><a href="#【02x03】rank-返回排序后元素索引" class="headerlink" title="【02x03】rank() 返回排序后元素索引"></a><font color="#4876FF">【02x03】rank() 返回排序后元素索引</font></h3><p>rank() 函数会返回一个对象，对象的值是原对象经过排序后的索引值，即下标。</p><p>在 Series 和 DataFrame 中的基本语法如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Series.rank(self: ~ FrameOrSeries,</span><br><span class="line">axis=<span class="number">0</span>,</span><br><span class="line">method: str = <span class="string">'average'</span>,</span><br><span class="line">numeric_only: Union[bool, NoneType] = <span class="keyword">None</span>,</span><br><span class="line">na_option: str = <span class="string">'keep'</span>,</span><br><span class="line">ascending: bool = <span class="keyword">True</span>,</span><br><span class="line">pct: bool = <span class="keyword">False</span>)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">DataFrame.rank(self: ~ FrameOrSeries,</span><br><span class="line">   axis=<span class="number">0</span>,</span><br><span class="line">   method: str = <span class="string">'average'</span>,</span><br><span class="line">   numeric_only: Union[bool, NoneType] = <span class="keyword">None</span>,</span><br><span class="line">   na_option: str = <span class="string">'keep'</span>,</span><br><span class="line">   ascending: bool = <span class="keyword">True</span>,</span><br><span class="line">   pct: bool = <span class="keyword">False</span>)</span><br></pre></td></tr></table></figure><p>官方文档：</p><ul><li><p><a href="https://pandas.pydata.org/docs/reference/api/pandas.Series.rank.html" target="_blank" rel="noopener">https://pandas.pydata.org/docs/reference/api/pandas.Series.rank.html</a></p></li><li><p><a href="https://pandas.pydata.org/docs/reference/api/pandas.DataFrame.rank.html" target="_blank" rel="noopener">https://pandas.pydata.org/docs/reference/api/pandas.DataFrame.rank.html</a></p></li></ul><p>常用参数描述如下：</p><table><thead><tr><th>参数</th><th>描述</th></tr></thead><tbody><tr><td>axis</td><td>指定轴排序，<code>0</code> or <code>‘index’</code>，<code>1</code> or <code>‘columns’</code>，只有在 DataFrame 中才有 <code>1</code> or <code>&#39;columns’</code></td></tr><tr><td>method</td><td>有相同值时，如何处理：<br><code>‘average’</code>：默认值，去两个相同索引的平均值；<code>‘min’</code>：取两个相同索引的最小值；<br><code>‘max’</code>：取两个相同索引的最大值；<code>‘first’</code>：按照出现的先后顺序；<br><code>‘dense’</code>：和 <code>&#39;min&#39;</code> 差不多，但是各组之间总是+1的，不太好解释，可以看后面的示例</td></tr><tr><td>ascending</td><td>为 <code>True</code>时升序排序（默认），为 <code>False</code>时降序排序</td></tr></tbody></table><p>在 Series 中的应用，按照值排序，如果有缺失值，默认都会被放到 Series 的末尾：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>obj = pd.Series([<span class="number">7</span>, <span class="number">-5</span>, <span class="number">7</span>, <span class="number">4</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">4</span>])</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>obj</span><br><span class="line"><span class="number">0</span>    <span class="number">7</span></span><br><span class="line"><span class="number">1</span>   <span class="number">-5</span></span><br><span class="line"><span class="number">2</span>    <span class="number">7</span></span><br><span class="line"><span class="number">3</span>    <span class="number">4</span></span><br><span class="line"><span class="number">4</span>    <span class="number">2</span></span><br><span class="line"><span class="number">5</span>    <span class="number">0</span></span><br><span class="line"><span class="number">6</span>    <span class="number">4</span></span><br><span class="line">dtype: int64</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>obj.rank()</span><br><span class="line"><span class="number">0</span>    <span class="number">6.5</span>  <span class="comment"># 第 0 个和第 2 个值从小到大排名分别为 6 和 7，默认取平均值，即 6.5</span></span><br><span class="line"><span class="number">1</span>    <span class="number">1.0</span></span><br><span class="line"><span class="number">2</span>    <span class="number">6.5</span></span><br><span class="line"><span class="number">3</span>    <span class="number">4.5</span>  <span class="comment"># 第 3 个和第 6 个值从小到大排名分别为 4 和 5，默认取平均值，即 4.5</span></span><br><span class="line"><span class="number">4</span>    <span class="number">3.0</span></span><br><span class="line"><span class="number">5</span>    <span class="number">2.0</span></span><br><span class="line"><span class="number">6</span>    <span class="number">4.5</span></span><br><span class="line">dtype: float64</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>obj.rank(method=<span class="string">'first'</span>)</span><br><span class="line"><span class="number">0</span>    <span class="number">6.0</span>  <span class="comment"># 第 0 个和第 2 个值从小到大排名分别为 6 和 7，按照第一次出现排序，分别为 6 和 7</span></span><br><span class="line"><span class="number">1</span>    <span class="number">1.0</span></span><br><span class="line"><span class="number">2</span>    <span class="number">7.0</span></span><br><span class="line"><span class="number">3</span>    <span class="number">4.0</span>  <span class="comment"># 第 3 个和第 6 个值从小到大排名分别为 4 和 5，按照第一次出现排序，分别为 4 和 5</span></span><br><span class="line"><span class="number">4</span>    <span class="number">3.0</span></span><br><span class="line"><span class="number">5</span>    <span class="number">2.0</span></span><br><span class="line"><span class="number">6</span>    <span class="number">5.0</span></span><br><span class="line">dtype: float64</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>obj.rank(method=<span class="string">'dense'</span>)</span><br><span class="line"><span class="number">0</span>    <span class="number">5.0</span>  <span class="comment"># 第 0 个和第 2 个值从小到大排名分别为 6 和 7，按照最小值排序，但 dense 规定间隔为 1 所以为 5</span></span><br><span class="line"><span class="number">1</span>    <span class="number">1.0</span></span><br><span class="line"><span class="number">2</span>    <span class="number">5.0</span></span><br><span class="line"><span class="number">3</span>    <span class="number">4.0</span>  <span class="comment"># 第 3 个和第 6 个值从小到大排名分别为 4 和 5，按照最小值排序，即 4</span></span><br><span class="line"><span class="number">4</span>    <span class="number">3.0</span></span><br><span class="line"><span class="number">5</span>    <span class="number">2.0</span></span><br><span class="line"><span class="number">6</span>    <span class="number">4.0</span></span><br><span class="line">dtype: float64</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>obj.rank(method=<span class="string">'min'</span>)</span><br><span class="line"><span class="number">0</span>    <span class="number">6.0</span>  <span class="comment"># 第 0 个和第 2 个值从小到大排名分别为 6 和 7，按照最小值排序，即 6</span></span><br><span class="line"><span class="number">1</span>    <span class="number">1.0</span></span><br><span class="line"><span class="number">2</span>    <span class="number">6.0</span></span><br><span class="line"><span class="number">3</span>    <span class="number">4.0</span>  <span class="comment"># 第 3 个和第 6 个值从小到大排名分别为 4 和 5，按照最小值排序，即 4</span></span><br><span class="line"><span class="number">4</span>    <span class="number">3.0</span></span><br><span class="line"><span class="number">5</span>    <span class="number">2.0</span></span><br><span class="line"><span class="number">6</span>    <span class="number">4.0</span></span><br><span class="line">dtype: float64</span><br></pre></td></tr></table></figure><p>在 DataFrame 中可以使用 axis 参数来指定轴：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>obj = pd.DataFrame(&#123;<span class="string">'b'</span>: [<span class="number">4.3</span>, <span class="number">7</span>, <span class="number">-3</span>, <span class="number">2</span>], <span class="string">'a'</span>: [<span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>], <span class="string">'c'</span>: [<span class="number">-2</span>, <span class="number">5</span>, <span class="number">8</span>, <span class="number">-2.5</span>]&#125;)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>obj</span><br><span class="line">     b  a    c</span><br><span class="line"><span class="number">0</span>  <span class="number">4.3</span>  <span class="number">0</span> <span class="number">-2.0</span></span><br><span class="line"><span class="number">1</span>  <span class="number">7.0</span>  <span class="number">1</span>  <span class="number">5.0</span></span><br><span class="line"><span class="number">2</span> <span class="number">-3.0</span>  <span class="number">0</span>  <span class="number">8.0</span></span><br><span class="line"><span class="number">3</span>  <span class="number">2.0</span>  <span class="number">1</span> <span class="number">-2.5</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>obj.rank()</span><br><span class="line">     b    a    c</span><br><span class="line"><span class="number">0</span>  <span class="number">3.0</span>  <span class="number">1.5</span>  <span class="number">2.0</span></span><br><span class="line"><span class="number">1</span>  <span class="number">4.0</span>  <span class="number">3.5</span>  <span class="number">3.0</span></span><br><span class="line"><span class="number">2</span>  <span class="number">1.0</span>  <span class="number">1.5</span>  <span class="number">4.0</span></span><br><span class="line"><span class="number">3</span>  <span class="number">2.0</span>  <span class="number">3.5</span>  <span class="number">1.0</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>obj.rank(axis=<span class="string">'columns'</span>)</span><br><span class="line">     b    a    c</span><br><span class="line"><span class="number">0</span>  <span class="number">3.0</span>  <span class="number">2.0</span>  <span class="number">1.0</span></span><br><span class="line"><span class="number">1</span>  <span class="number">3.0</span>  <span class="number">1.0</span>  <span class="number">2.0</span></span><br><span class="line"><span class="number">2</span>  <span class="number">1.0</span>  <span class="number">2.0</span>  <span class="number">3.0</span></span><br><span class="line"><span class="number">3</span>  <span class="number">3.0</span>  <span class="number">2.0</span>  <span class="number">1.0</span></span><br></pre></td></tr></table></figure><hr><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">这里是一段防爬虫文本，请读者忽略。</span></span><br><span class="line"><span class="string">本文原创首发于</span> <span class="string">CSDN，作者</span> <span class="string">TRHX。</span></span><br><span class="line"><span class="string">博客首页：https://itrhx.blog.csdn.net/</span></span><br><span class="line"><span class="string">本文链接：https://itrhx.blog.csdn.net/article/details/106758103</span></span><br><span class="line"><span class="string">未经授权，禁止转载！恶意转载，后果自负！尊重原创，远离剽窃！</span></span><br></pre></td></tr></table></figure><hr><h2 id="【03x00】层级索引"><a href="#【03x00】层级索引" class="headerlink" title="【03x00】层级索引"></a><font color="#FF0000">【03x00】层级索引</font></h2><h3 id="【03x01】认识层级索引"><a href="#【03x01】认识层级索引" class="headerlink" title="【03x01】认识层级索引"></a><font color="#4876FF">【03x01】认识层级索引</font></h3><p>以下示例将创建一个 Series 对象， 索引 Index 由两个子 list 组成，第一个子 list 是外层索引，第二个 list 是内层索引：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>obj = pd.Series(np.random.randn(<span class="number">12</span>),index=[[<span class="string">'a'</span>, <span class="string">'a'</span>, <span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'b'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>, <span class="string">'c'</span>, <span class="string">'c'</span>, <span class="string">'d'</span>, <span class="string">'d'</span>, <span class="string">'d'</span>], [<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>]])</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>obj</span><br><span class="line">a  <span class="number">0</span>   <span class="number">-0.201536</span></span><br><span class="line">   <span class="number">1</span>   <span class="number">-0.629058</span></span><br><span class="line">   <span class="number">2</span>    <span class="number">0.766716</span></span><br><span class="line">b  <span class="number">0</span>   <span class="number">-1.255831</span></span><br><span class="line">   <span class="number">1</span>   <span class="number">-0.483727</span></span><br><span class="line">   <span class="number">2</span>   <span class="number">-0.018653</span></span><br><span class="line">c  <span class="number">0</span>    <span class="number">0.788787</span></span><br><span class="line">   <span class="number">1</span>    <span class="number">1.010097</span></span><br><span class="line">   <span class="number">2</span>   <span class="number">-0.187258</span></span><br><span class="line">d  <span class="number">0</span>    <span class="number">1.242363</span></span><br><span class="line">   <span class="number">1</span>   <span class="number">-0.822011</span></span><br><span class="line">   <span class="number">2</span>   <span class="number">-0.085682</span></span><br><span class="line">dtype: float64</span><br></pre></td></tr></table></figure><h3 id="【03x02】MultiIndex-索引对象"><a href="#【03x02】MultiIndex-索引对象" class="headerlink" title="【03x02】MultiIndex 索引对象"></a><font color="#4876FF">【03x02】MultiIndex 索引对象</font></h3><p>官方文档：<a href="https://pandas.pydata.org/docs/reference/api/pandas.MultiIndex.html" target="_blank" rel="noopener">https://pandas.pydata.org/docs/reference/api/pandas.MultiIndex.html</a></p><p>尝试打印上面示例中 Series 的索引类型，会得到一个 MultiIndex 对象，MultiIndex 对象的 <font color="#FF0000">levels</font> 属性表示两个层级中分别有那些标签，<font color="#FF0000">codes</font> 属性表示每个位置分别是什么标签，如下所示：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>obj = pd.Series(np.random.randn(<span class="number">12</span>),index=[[<span class="string">'a'</span>, <span class="string">'a'</span>, <span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'b'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>, <span class="string">'c'</span>, <span class="string">'c'</span>, <span class="string">'d'</span>, <span class="string">'d'</span>, <span class="string">'d'</span>], [<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>]])</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>obj</span><br><span class="line">a  <span class="number">0</span>    <span class="number">0.035946</span></span><br><span class="line">   <span class="number">1</span>   <span class="number">-0.867215</span></span><br><span class="line">   <span class="number">2</span>   <span class="number">-0.053355</span></span><br><span class="line">b  <span class="number">0</span>   <span class="number">-0.986616</span></span><br><span class="line">   <span class="number">1</span>    <span class="number">0.026071</span></span><br><span class="line">   <span class="number">2</span>   <span class="number">-0.048394</span></span><br><span class="line">c  <span class="number">0</span>    <span class="number">0.251274</span></span><br><span class="line">   <span class="number">1</span>    <span class="number">0.217790</span></span><br><span class="line">   <span class="number">2</span>    <span class="number">1.137674</span></span><br><span class="line">d  <span class="number">0</span>   <span class="number">-1.245178</span></span><br><span class="line">   <span class="number">1</span>    <span class="number">1.234972</span></span><br><span class="line">   <span class="number">2</span>   <span class="number">-0.035624</span></span><br><span class="line">dtype: float64</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>type(obj.index)</span><br><span class="line">&lt;<span class="class"><span class="keyword">class</span> '<span class="title">pandas</span>.<span class="title">core</span>.<span class="title">indexes</span>.<span class="title">multi</span>.<span class="title">MultiIndex</span>'&gt;</span></span><br><span class="line"><span class="class">&gt;&gt;&gt; </span></span><br><span class="line"><span class="class">&gt;&gt;&gt; <span class="title">obj</span>.<span class="title">index</span></span></span><br><span class="line"><span class="class"><span class="title">MultiIndex</span><span class="params">([<span class="params">(<span class="string">'a'</span>, <span class="number">0</span>)</span>,</span></span></span><br><span class="line"><span class="class"><span class="params">            <span class="params">(<span class="string">'a'</span>, <span class="number">1</span>)</span>,</span></span></span><br><span class="line"><span class="class"><span class="params">            <span class="params">(<span class="string">'a'</span>, <span class="number">2</span>)</span>,</span></span></span><br><span class="line"><span class="class"><span class="params">            <span class="params">(<span class="string">'b'</span>, <span class="number">0</span>)</span>,</span></span></span><br><span class="line"><span class="class"><span class="params">            <span class="params">(<span class="string">'b'</span>, <span class="number">1</span>)</span>,</span></span></span><br><span class="line"><span class="class"><span class="params">            <span class="params">(<span class="string">'b'</span>, <span class="number">2</span>)</span>,</span></span></span><br><span class="line"><span class="class"><span class="params">            <span class="params">(<span class="string">'c'</span>, <span class="number">0</span>)</span>,</span></span></span><br><span class="line"><span class="class"><span class="params">            <span class="params">(<span class="string">'c'</span>, <span class="number">1</span>)</span>,</span></span></span><br><span class="line"><span class="class"><span class="params">            <span class="params">(<span class="string">'c'</span>, <span class="number">2</span>)</span>,</span></span></span><br><span class="line"><span class="class"><span class="params">            <span class="params">(<span class="string">'d'</span>, <span class="number">0</span>)</span>,</span></span></span><br><span class="line"><span class="class"><span class="params">            <span class="params">(<span class="string">'d'</span>, <span class="number">1</span>)</span>,</span></span></span><br><span class="line"><span class="class"><span class="params">            <span class="params">(<span class="string">'d'</span>, <span class="number">2</span>)</span>],</span></span></span><br><span class="line"><span class="class"><span class="params">           )</span></span></span><br><span class="line"><span class="class">&gt;&gt;&gt; <span class="title">obj</span>.<span class="title">index</span>.<span class="title">levels</span></span></span><br><span class="line"><span class="class"><span class="title">FrozenList</span><span class="params">([[<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>, <span class="string">'d'</span>], [<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>]])</span></span></span><br><span class="line"><span class="class">&gt;&gt;&gt;</span></span><br><span class="line"><span class="class">&gt;&gt;&gt; <span class="title">obj</span>.<span class="title">index</span>.<span class="title">codes</span></span></span><br><span class="line"><span class="class"><span class="title">FrozenList</span><span class="params">([[<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">3</span>, <span class="number">3</span>], [<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>]])</span></span></span><br></pre></td></tr></table></figure><p>通常可以使用 <code>from_arrays()</code> 方法来将数组对象转换为 MultiIndex 索引对象：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>arrays = [[<span class="number">1</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">2</span>], [<span class="string">'red'</span>, <span class="string">'blue'</span>, <span class="string">'red'</span>, <span class="string">'blue'</span>]]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>pd.MultiIndex.from_arrays(arrays, names=(<span class="string">'number'</span>, <span class="string">'color'</span>))</span><br><span class="line">MultiIndex([(<span class="number">1</span>,  <span class="string">'red'</span>),</span><br><span class="line">            (<span class="number">1</span>, <span class="string">'blue'</span>),</span><br><span class="line">            (<span class="number">2</span>,  <span class="string">'red'</span>),</span><br><span class="line">            (<span class="number">2</span>, <span class="string">'blue'</span>)],</span><br><span class="line">           names=[<span class="string">'number'</span>, <span class="string">'color'</span>])</span><br></pre></td></tr></table></figure><p>其他常用方法见下表（更多方法参见官方文档）：</p><table><thead><tr><th>方法</th><th>描述</th></tr></thead><tbody><tr><td>from_arrays(arrays[, sortorder, names])</td><td>将数组转换为 MultiIndex</td></tr><tr><td>from_tuples(tuples[, sortorder, names])</td><td>将元组列表转换为 MultiIndex</td></tr><tr><td>from_product(iterables[, sortorder, names])</td><td>将多个可迭代的笛卡尔积转换成 MultiIndex</td></tr><tr><td>from_frame(df[, sortorder, names])</td><td>将 DataFrame 对象转换为 MultiIndex</td></tr><tr><td>set_levels(self, levels[, level, inplace, …])</td><td>为 MultiIndex 设置新的 levels</td></tr><tr><td>set_codes(self, codes[, level, inplace, …])</td><td>为 MultiIndex 设置新的 codes</td></tr><tr><td>sortlevel(self[, level, ascending, …])</td><td>根据 level 进行排序</td></tr><tr><td>droplevel(self[, level])</td><td>删除指定的 level</td></tr><tr><td>swaplevel(self[, i, j])</td><td>交换 level i 与 level i，即交换外层索引与内层索引</td></tr></tbody></table><h3 id="【03x03】提取值"><a href="#【03x03】提取值" class="headerlink" title="【03x03】提取值"></a><font color="#4876FF">【03x03】提取值</font></h3><p>对于这种有多层索引的对象，如果只传入一个参数，则会对外层索引进行提取，其中包含对应所有的内层索引，如果传入两个参数，则第一个参数表示外层索引，第二个参数表示内层索引，示例如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>obj = pd.Series(np.random.randn(<span class="number">12</span>),index=[[<span class="string">'a'</span>, <span class="string">'a'</span>, <span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'b'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>, <span class="string">'c'</span>, <span class="string">'c'</span>, <span class="string">'d'</span>, <span class="string">'d'</span>, <span class="string">'d'</span>], [<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>]])</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>obj</span><br><span class="line">a  <span class="number">0</span>    <span class="number">0.550202</span></span><br><span class="line">   <span class="number">1</span>    <span class="number">0.328784</span></span><br><span class="line">   <span class="number">2</span>    <span class="number">1.422690</span></span><br><span class="line">b  <span class="number">0</span>   <span class="number">-1.333477</span></span><br><span class="line">   <span class="number">1</span>   <span class="number">-0.933809</span></span><br><span class="line">   <span class="number">2</span>   <span class="number">-0.326541</span></span><br><span class="line">c  <span class="number">0</span>    <span class="number">0.663686</span></span><br><span class="line">   <span class="number">1</span>    <span class="number">0.943393</span></span><br><span class="line">   <span class="number">2</span>    <span class="number">0.273106</span></span><br><span class="line">d  <span class="number">0</span>    <span class="number">1.354037</span></span><br><span class="line">   <span class="number">1</span>   <span class="number">-2.312847</span></span><br><span class="line">   <span class="number">2</span>   <span class="number">-2.343777</span></span><br><span class="line">dtype: float64</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>obj[<span class="string">'b'</span>]</span><br><span class="line"><span class="number">0</span>   <span class="number">-1.333477</span></span><br><span class="line"><span class="number">1</span>   <span class="number">-0.933809</span></span><br><span class="line"><span class="number">2</span>   <span class="number">-0.326541</span></span><br><span class="line">dtype: float64</span><br><span class="line">&gt;&gt;&gt;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>obj[<span class="string">'b'</span>, <span class="number">1</span>]</span><br><span class="line"><span class="number">-0.9338094811708413</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>obj[:, <span class="number">2</span>]</span><br><span class="line">a    <span class="number">1.422690</span></span><br><span class="line">b   <span class="number">-0.326541</span></span><br><span class="line">c    <span class="number">0.273106</span></span><br><span class="line">d   <span class="number">-2.343777</span></span><br><span class="line">dtype: float64</span><br></pre></td></tr></table></figure><h3 id="【03x04】交换分层与排序"><a href="#【03x04】交换分层与排序" class="headerlink" title="【03x04】交换分层与排序"></a><font color="#4876FF">【03x04】交换分层与排序</font></h3><p>MultiIndex 对象的 <code>swaplevel()</code> 方法可以交换外层与内层索引，<code>sortlevel()</code> 方法会先对外层索引进行排序，再对内层索引进行排序，默认是升序，如果设置 <code>ascending</code> 参数为 False 则会降序排列，示例如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>obj = pd.Series(np.random.randn(<span class="number">12</span>),index=[[<span class="string">'a'</span>, <span class="string">'a'</span>, <span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'b'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>, <span class="string">'c'</span>, <span class="string">'c'</span>, <span class="string">'d'</span>, <span class="string">'d'</span>, <span class="string">'d'</span>], [<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>]])</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>obj</span><br><span class="line">a  <span class="number">0</span>   <span class="number">-0.110215</span></span><br><span class="line">   <span class="number">1</span>    <span class="number">0.193075</span></span><br><span class="line">   <span class="number">2</span>   <span class="number">-1.101706</span></span><br><span class="line">b  <span class="number">0</span>   <span class="number">-1.325743</span></span><br><span class="line">   <span class="number">1</span>    <span class="number">0.528418</span></span><br><span class="line">   <span class="number">2</span>   <span class="number">-0.127081</span></span><br><span class="line">c  <span class="number">0</span>   <span class="number">-0.733822</span></span><br><span class="line">   <span class="number">1</span>    <span class="number">1.665262</span></span><br><span class="line">   <span class="number">2</span>    <span class="number">0.127073</span></span><br><span class="line">d  <span class="number">0</span>    <span class="number">1.262022</span></span><br><span class="line">   <span class="number">1</span>   <span class="number">-1.170518</span></span><br><span class="line">   <span class="number">2</span>    <span class="number">0.966334</span></span><br><span class="line">dtype: float64</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>obj.swaplevel()</span><br><span class="line"><span class="number">0</span>  a   <span class="number">-0.110215</span></span><br><span class="line"><span class="number">1</span>  a    <span class="number">0.193075</span></span><br><span class="line"><span class="number">2</span>  a   <span class="number">-1.101706</span></span><br><span class="line"><span class="number">0</span>  b   <span class="number">-1.325743</span></span><br><span class="line"><span class="number">1</span>  b    <span class="number">0.528418</span></span><br><span class="line"><span class="number">2</span>  b   <span class="number">-0.127081</span></span><br><span class="line"><span class="number">0</span>  c   <span class="number">-0.733822</span></span><br><span class="line"><span class="number">1</span>  c    <span class="number">1.665262</span></span><br><span class="line"><span class="number">2</span>  c    <span class="number">0.127073</span></span><br><span class="line"><span class="number">0</span>  d    <span class="number">1.262022</span></span><br><span class="line"><span class="number">1</span>  d   <span class="number">-1.170518</span></span><br><span class="line"><span class="number">2</span>  d    <span class="number">0.966334</span></span><br><span class="line">dtype: float64</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>obj.swaplevel().index.sortlevel()</span><br><span class="line">(MultiIndex([(<span class="number">0</span>, <span class="string">'a'</span>),</span><br><span class="line">            (<span class="number">0</span>, <span class="string">'b'</span>),</span><br><span class="line">            (<span class="number">0</span>, <span class="string">'c'</span>),</span><br><span class="line">            (<span class="number">0</span>, <span class="string">'d'</span>),</span><br><span class="line">            (<span class="number">1</span>, <span class="string">'a'</span>),</span><br><span class="line">            (<span class="number">1</span>, <span class="string">'b'</span>),</span><br><span class="line">            (<span class="number">1</span>, <span class="string">'c'</span>),</span><br><span class="line">            (<span class="number">1</span>, <span class="string">'d'</span>),</span><br><span class="line">            (<span class="number">2</span>, <span class="string">'a'</span>),</span><br><span class="line">            (<span class="number">2</span>, <span class="string">'b'</span>),</span><br><span class="line">            (<span class="number">2</span>, <span class="string">'c'</span>),</span><br><span class="line">            (<span class="number">2</span>, <span class="string">'d'</span>)],</span><br><span class="line">           ), array([ <span class="number">0</span>,  <span class="number">3</span>,  <span class="number">6</span>,  <span class="number">9</span>,  <span class="number">1</span>,  <span class="number">4</span>,  <span class="number">7</span>, <span class="number">10</span>,  <span class="number">2</span>,  <span class="number">5</span>,  <span class="number">8</span>, <span class="number">11</span>], dtype=int32))</span><br></pre></td></tr></table></figure><hr><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">这里是一段防爬虫文本，请读者忽略。</span></span><br><span class="line"><span class="string">本文原创首发于</span> <span class="string">CSDN，作者</span> <span class="string">TRHX。</span></span><br><span class="line"><span class="string">博客首页：https://itrhx.blog.csdn.net/</span></span><br><span class="line"><span class="string">本文链接：https://itrhx.blog.csdn.net/article/details/106758103</span></span><br><span class="line"><span class="string">未经授权，禁止转载！恶意转载，后果自负！尊重原创，远离剽窃！</span></span><br></pre></td></tr></table></figure><hr>]]></content>
    
    <summary type="html">
    
      Python 数据分析三剑客之 Pandas（四）：函数应用、映射、排序和层级索引。
    
    </summary>
    
      <category term="Python 数据分析" scheme="https://www.itrhx.com/categories/Python-%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/"/>
    
      <category term="Pandas" scheme="https://www.itrhx.com/categories/Python-%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/Pandas/"/>
    
    
      <category term="Pandas" scheme="https://www.itrhx.com/tags/Pandas/"/>
    
      <category term="函数应用" scheme="https://www.itrhx.com/tags/%E5%87%BD%E6%95%B0%E5%BA%94%E7%94%A8/"/>
    
      <category term="映射" scheme="https://www.itrhx.com/tags/%E6%98%A0%E5%B0%84/"/>
    
      <category term="排序" scheme="https://www.itrhx.com/tags/%E6%8E%92%E5%BA%8F/"/>
    
      <category term="层级索引" scheme="https://www.itrhx.com/tags/%E5%B1%82%E7%BA%A7%E7%B4%A2%E5%BC%95/"/>
    
  </entry>
  
  <entry>
    <title>Python 数据分析三剑客之 Pandas（三）：算术运算与缺失值的处理</title>
    <link href="https://www.itrhx.com/2020/06/14/A81-Pandas-03/"/>
    <id>https://www.itrhx.com/2020/06/14/A81-Pandas-03/</id>
    <published>2020-06-14T15:36:58.366Z</published>
    <updated>2020-07-06T13:44:36.650Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>Pandas 系列文章：</p><ul><li><a href="https://www.itrhx.com/2020/06/11/A79-Pandas-01/">Python 数据分析三剑客之 Pandas（一）：认识 Pandas 及其 Series、DataFrame 对象</a></li><li><a href="https://www.itrhx.com/2020/06/13/A80-Pandas-02/">Python 数据分析三剑客之 Pandas（二）：Index 索引对象以及各种索引操作</a></li><li><a href="https://www.itrhx.com/2020/06/14/A81-Pandas-03/">Python 数据分析三剑客之 Pandas（三）：算术运算与缺失值的处理</a></li><li><a href="https://www.itrhx.com/2020/06/15/A82-Pandas-04/">Python 数据分析三剑客之 Pandas（四）：函数应用、映射、排序和层级索引</a></li><li><a href="https://www.itrhx.com/2020/06/16/A83-Pandas-05/">Python 数据分析三剑客之 Pandas（五）：统计计算与统计描述</a></li><li><a href="https://www.itrhx.com/2020/06/17/A84-Pandas-06/">Python 数据分析三剑客之 Pandas（六）：GroupBy 数据分裂、应用与合并</a></li><li><a href="https://www.itrhx.com/2020/06/21/A85-Pandas-07/">Python 数据分析三剑客之 Pandas（七）：合并数据集</a></li><li><a href="https://www.itrhx.com/2020/06/22/A86-Pandas-08/">Python 数据分析三剑客之 Pandas（八）：数据重塑、重复数据处理与数据替换</a></li><li><a href="https://www.itrhx.com/2020/06/25/A87-Pandas-09/">Python 数据分析三剑客之 Pandas（九）：时间序列</a></li><li><a href="https://www.itrhx.com/2020/06/26/A88-Pandas-10/">Python 数据分析三剑客之 Pandas（十）：数据读写</a></li></ul><hr><p>专栏：</p><p>【<a href="https://www.itrhx.com/categories/Python-%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/NumPy/">NumPy 专栏</a>】【<a href="https://www.itrhx.com/categories/Python-%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/Pandas/">Pandas 专栏</a>】【<a href="https://www.itrhx.com/categories/Python-%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/Matplotlib/">Matplotlib 专栏</a>】</p><p>推荐学习资料与网站：</p><p>【<a href="https://www.numpy.org.cn/" target="_blank" rel="noopener">NumPy 中文网</a>】【<a href="https://www.pypandas.cn/" target="_blank" rel="noopener">Pandas 中文网</a>】【<a href="https://www.matplotlib.org.cn/" target="_blank" rel="noopener">Matplotlib 中文网</a>】【<a href="https://github.com/TRHX/Python-quick-reference-table" target="_blank" rel="noopener">NumPy、Matplotlib、Pandas 速查表</a>】</p><hr><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">这里是一段防爬虫文本，请读者忽略。</span></span><br><span class="line"><span class="string">本文原创首发于</span> <span class="string">CSDN，作者</span> <span class="string">TRHX。</span></span><br><span class="line"><span class="string">博客首页：https://itrhx.blog.csdn.net/</span></span><br><span class="line"><span class="string">本文链接：https://itrhx.blog.csdn.net/article/details/106743778</span></span><br><span class="line"><span class="string">未经授权，禁止转载！恶意转载，后果自负！尊重原创，远离剽窃！</span></span><br></pre></td></tr></table></figure><hr><h2 id="【01x00】Pandas-算术运算"><a href="#【01x00】Pandas-算术运算" class="headerlink" title="【01x00】Pandas 算术运算"></a><font color="#FF0000">【01x00】Pandas 算术运算</font></h2><p>Pandas 继承了 NumPy 的功能，NumPy 的基本能力之一是快速对每个元素进行运算，既包括基本算术运算（加、减、乘、除），也包括更复杂的运算（三角函数、指数函数和对数函数等）。具体可以参考 NumPy 系列文章。</p><h3 id="【01x01】使用-NumPy-通用函数"><a href="#【01x01】使用-NumPy-通用函数" class="headerlink" title="【01x01】使用 NumPy 通用函数"></a><font color="#4876FF">【01x01】使用 NumPy 通用函数</font></h3><p>因为 Pandas 是建立在 NumPy 基础之上的，所以 NumPy 的通用函数同样适用于 Pandas 的 Series 和 DataFrame 对象，如下所示：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>rng = np.random.RandomState(<span class="number">42</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>ser = pd.Series(rng.randint(<span class="number">0</span>, <span class="number">10</span>, <span class="number">4</span>))</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>ser</span><br><span class="line"><span class="number">0</span>    <span class="number">6</span></span><br><span class="line"><span class="number">1</span>    <span class="number">3</span></span><br><span class="line"><span class="number">2</span>    <span class="number">7</span></span><br><span class="line"><span class="number">3</span>    <span class="number">4</span></span><br><span class="line">dtype: int32</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>obj = pd.DataFrame(rng.randint(<span class="number">0</span>, <span class="number">10</span>, (<span class="number">3</span>, <span class="number">4</span>)), columns=[<span class="string">'A'</span>, <span class="string">'B'</span>, <span class="string">'C'</span>, <span class="string">'D'</span>])</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>obj</span><br><span class="line">   A  B  C  D</span><br><span class="line"><span class="number">0</span>  <span class="number">6</span>  <span class="number">9</span>  <span class="number">2</span>  <span class="number">6</span></span><br><span class="line"><span class="number">1</span>  <span class="number">7</span>  <span class="number">4</span>  <span class="number">3</span>  <span class="number">7</span></span><br><span class="line"><span class="number">2</span>  <span class="number">7</span>  <span class="number">2</span>  <span class="number">5</span>  <span class="number">4</span></span><br></pre></td></tr></table></figure><p>使用 NumPy 通用函数，生成的结果是另一个保留索引的 Pandas 对象：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>rng = np.random.RandomState(<span class="number">42</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>ser = pd.Series(rng.randint(<span class="number">0</span>, <span class="number">10</span>, <span class="number">4</span>))</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>ser</span><br><span class="line"><span class="number">0</span>    <span class="number">6</span></span><br><span class="line"><span class="number">1</span>    <span class="number">3</span></span><br><span class="line"><span class="number">2</span>    <span class="number">7</span></span><br><span class="line"><span class="number">3</span>    <span class="number">4</span></span><br><span class="line">dtype: int32</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>np.exp(ser)</span><br><span class="line"><span class="number">0</span>     <span class="number">403.428793</span></span><br><span class="line"><span class="number">1</span>      <span class="number">20.085537</span></span><br><span class="line"><span class="number">2</span>    <span class="number">1096.633158</span></span><br><span class="line"><span class="number">3</span>      <span class="number">54.598150</span></span><br><span class="line">dtype: float64</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>obj = pd.DataFrame(rng.randint(<span class="number">0</span>, <span class="number">10</span>, (<span class="number">3</span>, <span class="number">4</span>)), columns=[<span class="string">'A'</span>, <span class="string">'B'</span>, <span class="string">'C'</span>, <span class="string">'D'</span>])</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>np.sin(obj * np.pi / <span class="number">4</span>)</span><br><span class="line">          A             B         C             D</span><br><span class="line"><span class="number">0</span> <span class="number">-1.000000</span>  <span class="number">7.071068e-01</span>  <span class="number">1.000000</span> <span class="number">-1.000000e+00</span></span><br><span class="line"><span class="number">1</span> <span class="number">-0.707107</span>  <span class="number">1.224647e-16</span>  <span class="number">0.707107</span> <span class="number">-7.071068e-01</span></span><br><span class="line"><span class="number">2</span> <span class="number">-0.707107</span>  <span class="number">1.000000e+00</span> <span class="number">-0.707107</span>  <span class="number">1.224647e-16</span></span><br></pre></td></tr></table></figure><h3 id="【01x02】数据对齐"><a href="#【01x02】数据对齐" class="headerlink" title="【01x02】数据对齐"></a><font color="#4876FF">【01x02】数据对齐</font></h3><p>Pandas 最重要的一个功能是，它可以对不同索引的对象进行算术运算。在将对象相加时，如果存在不同的索引对，则结果的索引就是该索引对的并集。自动的数据对齐操作会在不重叠的索引处引入缺失值，即 <font color="#FF0000">NaN</font>，缺失值会在算术运算过程中传播。</p><p>Series 对象的数据对齐操作：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>obj1 = pd.Series([<span class="number">7.3</span>, <span class="number">-2.5</span>, <span class="number">3.4</span>, <span class="number">1.5</span>], index=[<span class="string">'a'</span>, <span class="string">'c'</span>, <span class="string">'d'</span>, <span class="string">'e'</span>])</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>obj2 = pd.Series([<span class="number">-2.1</span>, <span class="number">3.6</span>, <span class="number">-1.5</span>, <span class="number">4</span>, <span class="number">3.1</span>], index=[<span class="string">'a'</span>, <span class="string">'c'</span>, <span class="string">'e'</span>, <span class="string">'f'</span>, <span class="string">'g'</span>])</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>obj1</span><br><span class="line">a    <span class="number">7.3</span></span><br><span class="line">c   <span class="number">-2.5</span></span><br><span class="line">d    <span class="number">3.4</span></span><br><span class="line">e    <span class="number">1.5</span></span><br><span class="line">dtype: float64</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>obj2</span><br><span class="line">a   <span class="number">-2.1</span></span><br><span class="line">c    <span class="number">3.6</span></span><br><span class="line">e   <span class="number">-1.5</span></span><br><span class="line">f    <span class="number">4.0</span></span><br><span class="line">g    <span class="number">3.1</span></span><br><span class="line">dtype: float64</span><br><span class="line">&gt;&gt;&gt;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>obj1 + obj2</span><br><span class="line">a    <span class="number">5.2</span></span><br><span class="line">c    <span class="number">1.1</span></span><br><span class="line">d    NaN</span><br><span class="line">e    <span class="number">0.0</span></span><br><span class="line">f    NaN</span><br><span class="line">g    NaN</span><br><span class="line">dtype: float64</span><br></pre></td></tr></table></figure><p>DataFrame 对象的数据对齐操作会同时发生在行和列上：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>obj1 = pd.DataFrame(np.arange(<span class="number">9.</span>).reshape((<span class="number">3</span>, <span class="number">3</span>)), columns=list(<span class="string">'bcd'</span>), index=[<span class="string">'Ohio'</span>, <span class="string">'Texas'</span>, <span class="string">'Colorado'</span>])</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>obj2 = pd.DataFrame(np.arange(<span class="number">12.</span>).reshape((<span class="number">4</span>, <span class="number">3</span>)), columns=list(<span class="string">'bde'</span>), index=[<span class="string">'Utah'</span>, <span class="string">'Ohio'</span>, <span class="string">'Texas'</span>, <span class="string">'Oregon'</span>])</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>obj1</span><br><span class="line">            b    c    d</span><br><span class="line">Ohio      <span class="number">0.0</span>  <span class="number">1.0</span>  <span class="number">2.0</span></span><br><span class="line">Texas     <span class="number">3.0</span>  <span class="number">4.0</span>  <span class="number">5.0</span></span><br><span class="line">Colorado  <span class="number">6.0</span>  <span class="number">7.0</span>  <span class="number">8.0</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>obj2</span><br><span class="line">          b     d     e</span><br><span class="line">Utah    <span class="number">0.0</span>   <span class="number">1.0</span>   <span class="number">2.0</span></span><br><span class="line">Ohio    <span class="number">3.0</span>   <span class="number">4.0</span>   <span class="number">5.0</span></span><br><span class="line">Texas   <span class="number">6.0</span>   <span class="number">7.0</span>   <span class="number">8.0</span></span><br><span class="line">Oregon  <span class="number">9.0</span>  <span class="number">10.0</span>  <span class="number">11.0</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>obj1 + obj2</span><br><span class="line">            b   c     d   e</span><br><span class="line">Colorado  NaN NaN   NaN NaN</span><br><span class="line">Ohio      <span class="number">3.0</span> NaN   <span class="number">6.0</span> NaN</span><br><span class="line">Oregon    NaN NaN   NaN NaN</span><br><span class="line">Texas     <span class="number">9.0</span> NaN  <span class="number">12.0</span> NaN</span><br><span class="line">Utah      NaN NaN   NaN NaN</span><br></pre></td></tr></table></figure><h3 id="【01x03】DataFrame-与-Series-之间的运算"><a href="#【01x03】DataFrame-与-Series-之间的运算" class="headerlink" title="【01x03】DataFrame 与 Series 之间的运算"></a><font color="#4876FF">【01x03】DataFrame 与 Series 之间的运算</font></h3><p>首先回忆 NumPy 中的广播（参见：<a href="https://itrhx.blog.csdn.net/article/details/104988137" target="_blank" rel="noopener">《Python 数据分析三剑客之 NumPy（二）：数组索引 / 切片 / 广播 / 拼接 / 分割》</a>），跟不同维度的 NumPy 数组一样，DataFrame 和 Series 之间算术运算也是有明确规定的。首先回忆一下 NumPy 中不同维度的数组之间的运算：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>arr = np.arange(<span class="number">12.</span>).reshape((<span class="number">3</span>, <span class="number">4</span>))</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>arr</span><br><span class="line">array([[ <span class="number">0.</span>,  <span class="number">1.</span>,  <span class="number">2.</span>,  <span class="number">3.</span>],</span><br><span class="line">       [ <span class="number">4.</span>,  <span class="number">5.</span>,  <span class="number">6.</span>,  <span class="number">7.</span>],</span><br><span class="line">       [ <span class="number">8.</span>,  <span class="number">9.</span>, <span class="number">10.</span>, <span class="number">11.</span>]])</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>arr[<span class="number">0</span>]</span><br><span class="line">array([<span class="number">0.</span>, <span class="number">1.</span>, <span class="number">2.</span>, <span class="number">3.</span>])</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>arr - arr[<span class="number">0</span>]</span><br><span class="line">array([[<span class="number">0.</span>, <span class="number">0.</span>, <span class="number">0.</span>, <span class="number">0.</span>],</span><br><span class="line">       [<span class="number">4.</span>, <span class="number">4.</span>, <span class="number">4.</span>, <span class="number">4.</span>],</span><br><span class="line">       [<span class="number">8.</span>, <span class="number">8.</span>, <span class="number">8.</span>, <span class="number">8.</span>]])</span><br></pre></td></tr></table></figure><p>可以看到每一行都进行了减法运算，这正是 NumPy 中的广播，而 DataFrame 与 Series 之间的运算也类似，默认情况下，DataFrame 和 Series 之间的算术运算会将 Series 的索引匹配到 DataFrame 的列，然后沿着行一直向下广播：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>frame = pd.DataFrame(np.arange(<span class="number">12.</span>).reshape((<span class="number">4</span>, <span class="number">3</span>)), columns=list(<span class="string">'bde'</span>), index=[<span class="string">'AA'</span>, <span class="string">'BB'</span>, <span class="string">'CC'</span>, <span class="string">'DD'</span>])</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>frame</span><br><span class="line">      b     d     e</span><br><span class="line">AA  <span class="number">0.0</span>   <span class="number">1.0</span>   <span class="number">2.0</span></span><br><span class="line">BB  <span class="number">3.0</span>   <span class="number">4.0</span>   <span class="number">5.0</span></span><br><span class="line">CC  <span class="number">6.0</span>   <span class="number">7.0</span>   <span class="number">8.0</span></span><br><span class="line">DD  <span class="number">9.0</span>  <span class="number">10.0</span>  <span class="number">11.0</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>series = frame.iloc[<span class="number">0</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>series</span><br><span class="line">b    <span class="number">0.0</span></span><br><span class="line">d    <span class="number">1.0</span></span><br><span class="line">e    <span class="number">2.0</span></span><br><span class="line">Name: AA, dtype: float64</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>frame - series</span><br><span class="line">      b    d    e</span><br><span class="line">AA  <span class="number">0.0</span>  <span class="number">0.0</span>  <span class="number">0.0</span></span><br><span class="line">BB  <span class="number">3.0</span>  <span class="number">3.0</span>  <span class="number">3.0</span></span><br><span class="line">CC  <span class="number">6.0</span>  <span class="number">6.0</span>  <span class="number">6.0</span></span><br><span class="line">DD  <span class="number">9.0</span>  <span class="number">9.0</span>  <span class="number">9.0</span></span><br></pre></td></tr></table></figure><p>如果某个索引值在 DataFrame 的列或 Series 的索引中找不到，则参与运算的两个对象就会被重新索引以形成并集：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>frame = pd.DataFrame(np.arange(<span class="number">12.</span>).reshape((<span class="number">4</span>, <span class="number">3</span>)), columns=list(<span class="string">'bde'</span>), index=[<span class="string">'AA'</span>, <span class="string">'BB'</span>, <span class="string">'CC'</span>, <span class="string">'DD'</span>])</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>frame</span><br><span class="line">      b     d     e</span><br><span class="line">AA  <span class="number">0.0</span>   <span class="number">1.0</span>   <span class="number">2.0</span></span><br><span class="line">BB  <span class="number">3.0</span>   <span class="number">4.0</span>   <span class="number">5.0</span></span><br><span class="line">CC  <span class="number">6.0</span>   <span class="number">7.0</span>   <span class="number">8.0</span></span><br><span class="line">DD  <span class="number">9.0</span>  <span class="number">10.0</span>  <span class="number">11.0</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>series = pd.Series(range(<span class="number">3</span>), index=[<span class="string">'b'</span>, <span class="string">'e'</span>, <span class="string">'f'</span>])</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>series</span><br><span class="line">b    <span class="number">0</span></span><br><span class="line">e    <span class="number">1</span></span><br><span class="line">f    <span class="number">2</span></span><br><span class="line">dtype: int64</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>frame + series</span><br><span class="line">      b   d     e   f</span><br><span class="line">AA  <span class="number">0.0</span> NaN   <span class="number">3.0</span> NaN</span><br><span class="line">BB  <span class="number">3.0</span> NaN   <span class="number">6.0</span> NaN</span><br><span class="line">CC  <span class="number">6.0</span> NaN   <span class="number">9.0</span> NaN</span><br><span class="line">DD  <span class="number">9.0</span> NaN  <span class="number">12.0</span> NaN</span><br></pre></td></tr></table></figure><p>如果希望匹配行且在列上广播，则必须使用算术运算方法，在方法中传入的轴（axis）就是希望匹配的轴。在下例中，我们的目的是匹配 DataFrame 的行索引（axis=’index’ or axis=0）并进行广播：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>frame = pd.DataFrame(np.arange(<span class="number">12.</span>).reshape((<span class="number">4</span>, <span class="number">3</span>)), columns=list(<span class="string">'bde'</span>), index=[<span class="string">'AA'</span>, <span class="string">'BB'</span>, <span class="string">'CC'</span>, <span class="string">'DD'</span>])</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>frame</span><br><span class="line">      b     d     e</span><br><span class="line">AA  <span class="number">0.0</span>   <span class="number">1.0</span>   <span class="number">2.0</span></span><br><span class="line">BB  <span class="number">3.0</span>   <span class="number">4.0</span>   <span class="number">5.0</span></span><br><span class="line">CC  <span class="number">6.0</span>   <span class="number">7.0</span>   <span class="number">8.0</span></span><br><span class="line">DD  <span class="number">9.0</span>  <span class="number">10.0</span>  <span class="number">11.0</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>series = frame[<span class="string">'d'</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>series</span><br><span class="line">AA     <span class="number">1.0</span></span><br><span class="line">BB     <span class="number">4.0</span></span><br><span class="line">CC     <span class="number">7.0</span></span><br><span class="line">DD    <span class="number">10.0</span></span><br><span class="line">Name: d, dtype: float64</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>frame.sub(series, axis=<span class="string">'index'</span>)</span><br><span class="line">      b    d    e</span><br><span class="line">AA <span class="number">-1.0</span>  <span class="number">0.0</span>  <span class="number">1.0</span></span><br><span class="line">BB <span class="number">-1.0</span>  <span class="number">0.0</span>  <span class="number">1.0</span></span><br><span class="line">CC <span class="number">-1.0</span>  <span class="number">0.0</span>  <span class="number">1.0</span></span><br><span class="line">DD <span class="number">-1.0</span>  <span class="number">0.0</span>  <span class="number">1.0</span></span><br></pre></td></tr></table></figure><h3 id="【01x04】Pandas-算术方法"><a href="#【01x04】Pandas-算术方法" class="headerlink" title="【01x04】Pandas 算术方法"></a><font color="#4876FF">【01x04】Pandas 算术方法</font></h3><p>完整的 Pandas 算术方法见下表：</p><table><thead><tr><th>方法</th><th>副本</th><th>描述</th></tr></thead><tbody><tr><td>add()</td><td>radd()</td><td>加法（+）</td></tr><tr><td>sub()、subtract()</td><td>rsub()</td><td>减法（-）</td></tr><tr><td>mul()、multiply()</td><td>rmul()</td><td>乘法（*）</td></tr><tr><td>pow()</td><td>rpow()</td><td>指数（**）</td></tr><tr><td>truediv()、div()、divide()</td><td>rdiv()</td><td>除法（/）</td></tr><tr><td>floordiv()</td><td>rfloordiv()</td><td>底除（//）</td></tr><tr><td>mod()</td><td>rmod()</td><td>求余（%）</td></tr></tbody></table><p>副本均为原方法前加了个 <code>r</code>，它会翻转参数：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>obj = pd.DataFrame(np.arange(<span class="number">12.</span>).reshape((<span class="number">3</span>, <span class="number">4</span>)), columns=list(<span class="string">'abcd'</span>))</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>obj</span><br><span class="line">     a    b     c     d</span><br><span class="line"><span class="number">0</span>  <span class="number">0.0</span>  <span class="number">1.0</span>   <span class="number">2.0</span>   <span class="number">3.0</span></span><br><span class="line"><span class="number">1</span>  <span class="number">4.0</span>  <span class="number">5.0</span>   <span class="number">6.0</span>   <span class="number">7.0</span></span><br><span class="line"><span class="number">2</span>  <span class="number">8.0</span>  <span class="number">9.0</span>  <span class="number">10.0</span>  <span class="number">11.0</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="number">1</span> / obj</span><br><span class="line">       a         b         c         d</span><br><span class="line"><span class="number">0</span>    inf  <span class="number">1.000000</span>  <span class="number">0.500000</span>  <span class="number">0.333333</span></span><br><span class="line"><span class="number">1</span>  <span class="number">0.250</span>  <span class="number">0.200000</span>  <span class="number">0.166667</span>  <span class="number">0.142857</span></span><br><span class="line"><span class="number">2</span>  <span class="number">0.125</span>  <span class="number">0.111111</span>  <span class="number">0.100000</span>  <span class="number">0.090909</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>obj.rdiv(<span class="number">1</span>)</span><br><span class="line">       a         b         c         d</span><br><span class="line"><span class="number">0</span>    inf  <span class="number">1.000000</span>  <span class="number">0.500000</span>  <span class="number">0.333333</span></span><br><span class="line"><span class="number">1</span>  <span class="number">0.250</span>  <span class="number">0.200000</span>  <span class="number">0.166667</span>  <span class="number">0.142857</span></span><br><span class="line"><span class="number">2</span>  <span class="number">0.125</span>  <span class="number">0.111111</span>  <span class="number">0.100000</span>  <span class="number">0.090909</span></span><br></pre></td></tr></table></figure><hr><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">这里是一段防爬虫文本，请读者忽略。</span></span><br><span class="line"><span class="string">本文原创首发于</span> <span class="string">CSDN，作者</span> <span class="string">TRHX。</span></span><br><span class="line"><span class="string">博客首页：https://itrhx.blog.csdn.net/</span></span><br><span class="line"><span class="string">本文链接：https://itrhx.blog.csdn.net/article/details/106743778</span></span><br><span class="line"><span class="string">未经授权，禁止转载！恶意转载，后果自负！尊重原创，远离剽窃！</span></span><br></pre></td></tr></table></figure><hr><h2 id="【02x00】处理缺失值"><a href="#【02x00】处理缺失值" class="headerlink" title="【02x00】处理缺失值"></a><font color="#FF0000">【02x00】处理缺失值</font></h2><p>在现实中遇到的数据很少是干净整齐的，许多数据集都会有数据缺失的现象，缺失值主要有三种形式：null、NaN（NAN，nan） 或 NA。</p><h3 id="【02x01】fill-value-指定值与缺失值进行运算"><a href="#【02x01】fill-value-指定值与缺失值进行运算" class="headerlink" title="【02x01】fill_value() 指定值与缺失值进行运算"></a><font color="#4876FF">【02x01】fill_value() 指定值与缺失值进行运算</font></h3><p>使用 <code>add</code>, <code>sub</code>, <code>div</code>, <code>mul</code> 等算术方法时，通过 <code>fill_value</code> 指定填充值，未对齐的数据将和填充值做运算。</p><p>Series 中的应用：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>obj1 = pd.Series([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>])</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>obj2 = pd.Series([<span class="number">6</span>, <span class="number">7</span>])</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>obj1</span><br><span class="line"><span class="number">0</span>    <span class="number">1</span></span><br><span class="line"><span class="number">1</span>    <span class="number">2</span></span><br><span class="line"><span class="number">2</span>    <span class="number">3</span></span><br><span class="line"><span class="number">3</span>    <span class="number">4</span></span><br><span class="line"><span class="number">4</span>    <span class="number">5</span></span><br><span class="line">dtype: int64</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>obj2</span><br><span class="line"><span class="number">0</span>    <span class="number">6</span></span><br><span class="line"><span class="number">1</span>    <span class="number">7</span></span><br><span class="line">dtype: int64</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>obj1.add(obj2)</span><br><span class="line"><span class="number">0</span>    <span class="number">7.0</span></span><br><span class="line"><span class="number">1</span>    <span class="number">9.0</span></span><br><span class="line"><span class="number">2</span>    NaN</span><br><span class="line"><span class="number">3</span>    NaN</span><br><span class="line"><span class="number">4</span>    NaN</span><br><span class="line">dtype: float64</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>obj1.add(obj2, fill_value=<span class="number">-1</span>)</span><br><span class="line"><span class="number">0</span>    <span class="number">7.0</span></span><br><span class="line"><span class="number">1</span>    <span class="number">9.0</span></span><br><span class="line"><span class="number">2</span>    <span class="number">2.0</span></span><br><span class="line"><span class="number">3</span>    <span class="number">3.0</span></span><br><span class="line"><span class="number">4</span>    <span class="number">4.0</span></span><br><span class="line">dtype: float64</span><br></pre></td></tr></table></figure><p>DataFrame 中的应用：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>obj1 = pd.DataFrame(np.arange(<span class="number">12.</span>).reshape((<span class="number">3</span>, <span class="number">4</span>)), columns=list(<span class="string">'abcd'</span>))</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>obj2 = pd.DataFrame(np.arange(<span class="number">20.</span>).reshape((<span class="number">4</span>, <span class="number">5</span>)), columns=list(<span class="string">'abcde'</span>))</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>obj2.loc[<span class="number">1</span>, <span class="string">'b'</span>] = np.nan</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>obj1</span><br><span class="line">     a    b     c     d</span><br><span class="line"><span class="number">0</span>  <span class="number">0.0</span>  <span class="number">1.0</span>   <span class="number">2.0</span>   <span class="number">3.0</span></span><br><span class="line"><span class="number">1</span>  <span class="number">4.0</span>  <span class="number">5.0</span>   <span class="number">6.0</span>   <span class="number">7.0</span></span><br><span class="line"><span class="number">2</span>  <span class="number">8.0</span>  <span class="number">9.0</span>  <span class="number">10.0</span>  <span class="number">11.0</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>obj2</span><br><span class="line">      a     b     c     d     e</span><br><span class="line"><span class="number">0</span>   <span class="number">0.0</span>   <span class="number">1.0</span>   <span class="number">2.0</span>   <span class="number">3.0</span>   <span class="number">4.0</span></span><br><span class="line"><span class="number">1</span>   <span class="number">5.0</span>   NaN   <span class="number">7.0</span>   <span class="number">8.0</span>   <span class="number">9.0</span></span><br><span class="line"><span class="number">2</span>  <span class="number">10.0</span>  <span class="number">11.0</span>  <span class="number">12.0</span>  <span class="number">13.0</span>  <span class="number">14.0</span></span><br><span class="line"><span class="number">3</span>  <span class="number">15.0</span>  <span class="number">16.0</span>  <span class="number">17.0</span>  <span class="number">18.0</span>  <span class="number">19.0</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>obj1 + obj2</span><br><span class="line">      a     b     c     d   e</span><br><span class="line"><span class="number">0</span>   <span class="number">0.0</span>   <span class="number">2.0</span>   <span class="number">4.0</span>   <span class="number">6.0</span> NaN</span><br><span class="line"><span class="number">1</span>   <span class="number">9.0</span>   NaN  <span class="number">13.0</span>  <span class="number">15.0</span> NaN</span><br><span class="line"><span class="number">2</span>  <span class="number">18.0</span>  <span class="number">20.0</span>  <span class="number">22.0</span>  <span class="number">24.0</span> NaN</span><br><span class="line"><span class="number">3</span>   NaN   NaN   NaN   NaN NaN</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>obj1.add(obj2, fill_value=<span class="number">10</span>)</span><br><span class="line">      a     b     c     d     e</span><br><span class="line"><span class="number">0</span>   <span class="number">0.0</span>   <span class="number">2.0</span>   <span class="number">4.0</span>   <span class="number">6.0</span>  <span class="number">14.0</span></span><br><span class="line"><span class="number">1</span>   <span class="number">9.0</span>  <span class="number">15.0</span>  <span class="number">13.0</span>  <span class="number">15.0</span>  <span class="number">19.0</span></span><br><span class="line"><span class="number">2</span>  <span class="number">18.0</span>  <span class="number">20.0</span>  <span class="number">22.0</span>  <span class="number">24.0</span>  <span class="number">24.0</span></span><br><span class="line"><span class="number">3</span>  <span class="number">25.0</span>  <span class="number">26.0</span>  <span class="number">27.0</span>  <span class="number">28.0</span>  <span class="number">29.0</span></span><br></pre></td></tr></table></figure><h3 id="【02x02】isnull-notnull-判断缺失值"><a href="#【02x02】isnull-notnull-判断缺失值" class="headerlink" title="【02x02】isnull() / notnull() 判断缺失值"></a><font color="#4876FF">【02x02】isnull() / notnull() 判断缺失值</font></h3><p><code>isnull()</code>：为缺失值时为 <code>True</code>，否则为 <code>False</code>；</p><p><code>notnull()</code> 为缺失值时为 <code>False</code>，否则为 <code>True</code>。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>obj = pd.Series([<span class="number">1</span>, np.nan, <span class="string">'hello'</span>, <span class="keyword">None</span>])</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>obj</span><br><span class="line"><span class="number">0</span>        <span class="number">1</span></span><br><span class="line"><span class="number">1</span>      NaN</span><br><span class="line"><span class="number">2</span>    hello</span><br><span class="line"><span class="number">3</span>     <span class="keyword">None</span></span><br><span class="line">dtype: object</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>obj.isnull()</span><br><span class="line"><span class="number">0</span>    <span class="keyword">False</span></span><br><span class="line"><span class="number">1</span>     <span class="keyword">True</span></span><br><span class="line"><span class="number">2</span>    <span class="keyword">False</span></span><br><span class="line"><span class="number">3</span>     <span class="keyword">True</span></span><br><span class="line">dtype: bool</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>obj.notnull()</span><br><span class="line"><span class="number">0</span>     <span class="keyword">True</span></span><br><span class="line"><span class="number">1</span>    <span class="keyword">False</span></span><br><span class="line"><span class="number">2</span>     <span class="keyword">True</span></span><br><span class="line"><span class="number">3</span>    <span class="keyword">False</span></span><br><span class="line">dtype: bool</span><br></pre></td></tr></table></figure><h3 id="【02x03】dropna-删除缺失值"><a href="#【02x03】dropna-删除缺失值" class="headerlink" title="【02x03】dropna() 删除缺失值"></a><font color="#4876FF">【02x03】dropna() 删除缺失值</font></h3><p><code>dropna()</code> 方法用于返回一个删除了缺失值的新 Series 或 DataFrame 对象。</p><p>在 Series 对象当中，<code>dropna()</code> 方法的语法如下（其他参数用法可参考在 DataFrame 中的应用）：</p><p><code>Series.dropna(self, axis=0, inplace=False, how=None)</code></p><p>官方文档：<a href="https://pandas.pydata.org/docs/reference/api/pandas.Series.dropna.html" target="_blank" rel="noopener">https://pandas.pydata.org/docs/reference/api/pandas.Series.dropna.html</a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>obj = pd.Series([<span class="number">1</span>, np.nan, <span class="string">'hello'</span>, <span class="keyword">None</span>])</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>obj</span><br><span class="line"><span class="number">0</span>        <span class="number">1</span></span><br><span class="line"><span class="number">1</span>      NaN</span><br><span class="line"><span class="number">2</span>    hello</span><br><span class="line"><span class="number">3</span>     <span class="keyword">None</span></span><br><span class="line">dtype: object</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>obj.dropna()</span><br><span class="line"><span class="number">0</span>        <span class="number">1</span></span><br><span class="line"><span class="number">2</span>    hello</span><br><span class="line">dtype: object</span><br></pre></td></tr></table></figure><p>在 DataFrame 对象中，<code>dropna()</code> 方法的语法如下：</p><p><code>DataFrame.dropna(self, axis=0, how=&#39;any&#39;, thresh=None, subset=None, inplace=False)</code></p><p>官方文档：<a href="https://pandas.pydata.org/docs/reference/api/pandas.DataFrame.dropna.html" target="_blank" rel="noopener">https://pandas.pydata.org/docs/reference/api/pandas.DataFrame.dropna.html</a></p><table><thead><tr><th>参数</th><th>描述</th></tr></thead><tbody><tr><td>axis</td><td>确定是否删除包含缺失值的行或列<br><code>0</code> 或 <code>&#39;index&#39;</code>：删除包含缺失值的行。<code>1</code> 或 <code>&#39;columns&#39;</code>：删除包含缺失值的列</td></tr><tr><td>how</td><td><code>&#39;any&#39;</code>：如果存在任何NA值，则删除该行或列。<code>&#39;all&#39;</code>：如果所有值都是NA，则删除该行或列</td></tr><tr><td>thresh</td><td>设置行或列中<strong>非缺失值</strong>的最小数量</td></tr></tbody></table><p>不传递任何参数，将会删除任何包含缺失值的整行数据：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>obj = pd.DataFrame([[<span class="number">1</span>, np.nan, <span class="number">2</span>], [<span class="number">2</span>, <span class="number">3</span>, <span class="number">5</span>], [np.nan, <span class="number">4</span>, <span class="number">6</span>]])</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>obj</span><br><span class="line">     <span class="number">0</span>    <span class="number">1</span>  <span class="number">2</span></span><br><span class="line"><span class="number">0</span>  <span class="number">1.0</span>  NaN  <span class="number">2</span></span><br><span class="line"><span class="number">1</span>  <span class="number">2.0</span>  <span class="number">3.0</span>  <span class="number">5</span></span><br><span class="line"><span class="number">2</span>  NaN  <span class="number">4.0</span>  <span class="number">6</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>obj.dropna()</span><br><span class="line">     <span class="number">0</span>    <span class="number">1</span>  <span class="number">2</span></span><br><span class="line"><span class="number">1</span>  <span class="number">2.0</span>  <span class="number">3.0</span>  <span class="number">5</span></span><br></pre></td></tr></table></figure><p>指定 axis 参数，删除包含缺失值的行或列：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>obj = pd.DataFrame([[<span class="number">1</span>, np.nan, <span class="number">2</span>], [<span class="number">2</span>, <span class="number">3</span>, <span class="number">5</span>], [np.nan, <span class="number">4</span>, <span class="number">6</span>]])</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>obj</span><br><span class="line">     <span class="number">0</span>    <span class="number">1</span>  <span class="number">2</span></span><br><span class="line"><span class="number">0</span>  <span class="number">1.0</span>  NaN  <span class="number">2</span></span><br><span class="line"><span class="number">1</span>  <span class="number">2.0</span>  <span class="number">3.0</span>  <span class="number">5</span></span><br><span class="line"><span class="number">2</span>  NaN  <span class="number">4.0</span>  <span class="number">6</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>obj.dropna(axis=<span class="string">'columns'</span>)</span><br><span class="line">   <span class="number">2</span></span><br><span class="line"><span class="number">0</span>  <span class="number">2</span></span><br><span class="line"><span class="number">1</span>  <span class="number">5</span></span><br><span class="line"><span class="number">2</span>  <span class="number">6</span></span><br></pre></td></tr></table></figure><p>指定 how 参数，<code>&#39;any&#39;</code>：如果存在任何NA值，则删除该行或列。<code>&#39;all&#39;</code>：如果所有值都是NA，则删除该行或列：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>obj = pd.DataFrame([[<span class="number">1</span>, np.nan, <span class="number">2</span>, np.nan], [<span class="number">2</span>, <span class="number">3</span>, <span class="number">5</span>, np.nan], [np.nan, <span class="number">4</span>, <span class="number">6</span>, np.nan]])</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>obj</span><br><span class="line">     <span class="number">0</span>    <span class="number">1</span>  <span class="number">2</span>   <span class="number">3</span></span><br><span class="line"><span class="number">0</span>  <span class="number">1.0</span>  NaN  <span class="number">2</span> NaN</span><br><span class="line"><span class="number">1</span>  <span class="number">2.0</span>  <span class="number">3.0</span>  <span class="number">5</span> NaN</span><br><span class="line"><span class="number">2</span>  NaN  <span class="number">4.0</span>  <span class="number">6</span> NaN</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>obj.dropna(axis=<span class="string">'columns'</span>, how=<span class="string">'all'</span>)</span><br><span class="line">     <span class="number">0</span>    <span class="number">1</span>  <span class="number">2</span></span><br><span class="line"><span class="number">0</span>  <span class="number">1.0</span>  NaN  <span class="number">2</span></span><br><span class="line"><span class="number">1</span>  <span class="number">2.0</span>  <span class="number">3.0</span>  <span class="number">5</span></span><br><span class="line"><span class="number">2</span>  NaN  <span class="number">4.0</span>  <span class="number">6</span></span><br></pre></td></tr></table></figure><p>指定 thresh 参数，设置行或列中<font color="#FF0000"><strong>非缺失值</strong></font>的最小数量，以下示例中，第一行和第三行只有两个非缺失值，所以会被删除：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>obj = pd.DataFrame([[<span class="number">1</span>, np.nan, <span class="number">2</span>, np.nan], [<span class="number">2</span>, <span class="number">3</span>, <span class="number">5</span>, np.nan], [np.nan, <span class="number">4</span>, <span class="number">6</span>, np.nan]])</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>obj</span><br><span class="line">     <span class="number">0</span>    <span class="number">1</span>  <span class="number">2</span>   <span class="number">3</span></span><br><span class="line"><span class="number">0</span>  <span class="number">1.0</span>  NaN  <span class="number">2</span> NaN</span><br><span class="line"><span class="number">1</span>  <span class="number">2.0</span>  <span class="number">3.0</span>  <span class="number">5</span> NaN</span><br><span class="line"><span class="number">2</span>  NaN  <span class="number">4.0</span>  <span class="number">6</span> NaN</span><br><span class="line">&gt;&gt;&gt;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>obj.dropna(axis=<span class="string">'rows'</span>, thresh=<span class="number">3</span>)</span><br><span class="line">     <span class="number">0</span>    <span class="number">1</span>  <span class="number">2</span>   <span class="number">3</span></span><br><span class="line"><span class="number">1</span>  <span class="number">2.0</span>  <span class="number">3.0</span>  <span class="number">5</span> NaN</span><br></pre></td></tr></table></figure><h3 id="【02x04】fillna-填充缺失值"><a href="#【02x04】fillna-填充缺失值" class="headerlink" title="【02x04】fillna() 填充缺失值"></a><font color="#4876FF">【02x04】fillna() 填充缺失值</font></h3><p><code>fillna()</code> 方法可以将缺失值替换成有效的数值。</p><p>在 Series 对象中，<code>fillna()</code> 方法的语法如下：</p><p><code>Series.fillna(self, value=None, method=None, axis=None, inplace=False, limit=None, downcast=None)</code></p><p>官方文档：<a href="https://pandas.pydata.org/docs/reference/api/pandas.Series.fillna.html" target="_blank" rel="noopener">https://pandas.pydata.org/docs/reference/api/pandas.Series.fillna.html</a></p><table><thead><tr><th>参数</th><th>描述</th></tr></thead><tbody><tr><td>value</td><td>用于填充的值（例如 0），或者是一个 dict / Series / DataFrame 值<br>指定要用于每个 index（对于 Series）或column（对于 DataFrame）的值<br>不在dict / Series / DataFrame中的值将不被填充。此值不能是列表</td></tr><tr><td>method</td><td>填充方法：<code>None</code><br><code>‘pad’</code> / <code>‘ffill’</code>：将上一个有效观测值向前传播到下一个有效观测值<br><code>‘backfill’</code> / <code>‘bfill’</code>：使用下一个有效观察值来填补空白</td></tr><tr><td>axis</td><td><code>0</code> or <code>‘index’</code>，要填充缺失值的轴</td></tr></tbody></table><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>obj = pd.Series([<span class="number">1</span>, np.nan, <span class="number">2</span>, <span class="keyword">None</span>, <span class="number">3</span>], index=list(<span class="string">'abcde'</span>))</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>obj</span><br><span class="line">a    <span class="number">1.0</span></span><br><span class="line">b    NaN</span><br><span class="line">c    <span class="number">2.0</span></span><br><span class="line">d    NaN</span><br><span class="line">e    <span class="number">3.0</span></span><br><span class="line">dtype: float64</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>obj.fillna(<span class="number">0</span>)</span><br><span class="line">a    <span class="number">1.0</span></span><br><span class="line">b    <span class="number">0.0</span></span><br><span class="line">c    <span class="number">2.0</span></span><br><span class="line">d    <span class="number">0.0</span></span><br><span class="line">e    <span class="number">3.0</span></span><br><span class="line">dtype: float64</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>obj.fillna(method=<span class="string">'ffill'</span>)</span><br><span class="line">a    <span class="number">1.0</span></span><br><span class="line">b    <span class="number">1.0</span></span><br><span class="line">c    <span class="number">2.0</span></span><br><span class="line">d    <span class="number">2.0</span></span><br><span class="line">e    <span class="number">3.0</span></span><br><span class="line">dtype: float64</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>obj.fillna(method=<span class="string">'bfill'</span>)</span><br><span class="line">a    <span class="number">1.0</span></span><br><span class="line">b    <span class="number">2.0</span></span><br><span class="line">c    <span class="number">2.0</span></span><br><span class="line">d    <span class="number">3.0</span></span><br><span class="line">e    <span class="number">3.0</span></span><br><span class="line">dtype: float64</span><br></pre></td></tr></table></figure><p>在 DataFrame 对象中，<code>fillna()</code> 方法的语法如下：</p><p><code>DataFrame.fillna(self, value=None, method=None, axis=None, inplace=False, limit=None, downcast=None)</code></p><p>官方文档：<a href="https://pandas.pydata.org/docs/reference/api/pandas.DataFrame.fillna.html" target="_blank" rel="noopener">https://pandas.pydata.org/docs/reference/api/pandas.DataFrame.fillna.html</a></p><table><thead><tr><th>参数</th><th>描述</th></tr></thead><tbody><tr><td>value</td><td>用于填充的值（例如 0），或者是一个 dict / Series / DataFrame 值<br>指定要用于每个 index（对于 Series）或column（对于 DataFrame）的值<br>不在dict / Series / DataFrame中的值将不被填充。此值不能是列表</td></tr><tr><td>method</td><td>填充方法：<code>None</code><br><code>‘pad’</code> / <code>‘ffill’</code>：将上一个有效观测值向前传播到下一个有效观测值<br><code>‘backfill’</code> / <code>‘bfill’</code>：使用下一个有效观察值来填补空白</td></tr><tr><td>axis</td><td><code>0</code> or <code>‘index’</code>，<code>1</code> or <code>‘columns’</code>，要填充缺失值的轴</td></tr></tbody></table><p>在 DataFrame 对象中的用法和在 Series 对象中的用法大同小异，只不过 axis 参数多了一个选择：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>obj = pd.DataFrame([[<span class="number">1</span>, np.nan, <span class="number">2</span>, np.nan], [<span class="number">2</span>, <span class="number">3</span>, <span class="number">5</span>, np.nan], [np.nan, <span class="number">4</span>, <span class="number">6</span>, np.nan]])</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>obj</span><br><span class="line">     <span class="number">0</span>    <span class="number">1</span>  <span class="number">2</span>   <span class="number">3</span></span><br><span class="line"><span class="number">0</span>  <span class="number">1.0</span>  NaN  <span class="number">2</span> NaN</span><br><span class="line"><span class="number">1</span>  <span class="number">2.0</span>  <span class="number">3.0</span>  <span class="number">5</span> NaN</span><br><span class="line"><span class="number">2</span>  NaN  <span class="number">4.0</span>  <span class="number">6</span> NaN</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>obj.fillna(method=<span class="string">'ffill'</span>, axis=<span class="number">1</span>)</span><br><span class="line">     <span class="number">0</span>    <span class="number">1</span>    <span class="number">2</span>    <span class="number">3</span></span><br><span class="line"><span class="number">0</span>  <span class="number">1.0</span>  <span class="number">1.0</span>  <span class="number">2.0</span>  <span class="number">2.0</span></span><br><span class="line"><span class="number">1</span>  <span class="number">2.0</span>  <span class="number">3.0</span>  <span class="number">5.0</span>  <span class="number">5.0</span></span><br><span class="line"><span class="number">2</span>  NaN  <span class="number">4.0</span>  <span class="number">6.0</span>  <span class="number">6.0</span></span><br></pre></td></tr></table></figure><hr><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">这里是一段防爬虫文本，请读者忽略。</span></span><br><span class="line"><span class="string">本文原创首发于</span> <span class="string">CSDN，作者</span> <span class="string">TRHX。</span></span><br><span class="line"><span class="string">博客首页：https://itrhx.blog.csdn.net/</span></span><br><span class="line"><span class="string">本文链接：https://itrhx.blog.csdn.net/article/details/106743778</span></span><br><span class="line"><span class="string">未经授权，禁止转载！恶意转载，后果自负！尊重原创，远离剽窃！</span></span><br></pre></td></tr></table></figure><hr>]]></content>
    
    <summary type="html">
    
      Python 数据分析三剑客之 Pandas（三）：各种算术运算与缺失值的处理。
    
    </summary>
    
      <category term="Python 数据分析" scheme="https://www.itrhx.com/categories/Python-%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/"/>
    
      <category term="Pandas" scheme="https://www.itrhx.com/categories/Python-%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/Pandas/"/>
    
    
      <category term="Pandas" scheme="https://www.itrhx.com/tags/Pandas/"/>
    
      <category term="算术运算" scheme="https://www.itrhx.com/tags/%E7%AE%97%E6%9C%AF%E8%BF%90%E7%AE%97/"/>
    
      <category term="缺失值" scheme="https://www.itrhx.com/tags/%E7%BC%BA%E5%A4%B1%E5%80%BC/"/>
    
  </entry>
  
  <entry>
    <title>Python 数据分析三剑客之 Pandas（二）：Index 索引对象以及各种索引操作</title>
    <link href="https://www.itrhx.com/2020/06/13/A80-Pandas-02/"/>
    <id>https://www.itrhx.com/2020/06/13/A80-Pandas-02/</id>
    <published>2020-06-13T14:36:16.458Z</published>
    <updated>2020-07-06T13:44:26.916Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>Pandas 系列文章：</p><ul><li><a href="https://www.itrhx.com/2020/06/11/A79-Pandas-01/">Python 数据分析三剑客之 Pandas（一）：认识 Pandas 及其 Series、DataFrame 对象</a></li><li><a href="https://www.itrhx.com/2020/06/13/A80-Pandas-02/">Python 数据分析三剑客之 Pandas（二）：Index 索引对象以及各种索引操作</a></li><li><a href="https://www.itrhx.com/2020/06/14/A81-Pandas-03/">Python 数据分析三剑客之 Pandas（三）：算术运算与缺失值的处理</a></li><li><a href="https://www.itrhx.com/2020/06/15/A82-Pandas-04/">Python 数据分析三剑客之 Pandas（四）：函数应用、映射、排序和层级索引</a></li><li><a href="https://www.itrhx.com/2020/06/16/A83-Pandas-05/">Python 数据分析三剑客之 Pandas（五）：统计计算与统计描述</a></li><li><a href="https://www.itrhx.com/2020/06/17/A84-Pandas-06/">Python 数据分析三剑客之 Pandas（六）：GroupBy 数据分裂、应用与合并</a></li><li><a href="https://www.itrhx.com/2020/06/21/A85-Pandas-07/">Python 数据分析三剑客之 Pandas（七）：合并数据集</a></li><li><a href="https://www.itrhx.com/2020/06/22/A86-Pandas-08/">Python 数据分析三剑客之 Pandas（八）：数据重塑、重复数据处理与数据替换</a></li><li><a href="https://www.itrhx.com/2020/06/25/A87-Pandas-09/">Python 数据分析三剑客之 Pandas（九）：时间序列</a></li><li><a href="https://www.itrhx.com/2020/06/26/A88-Pandas-10/">Python 数据分析三剑客之 Pandas（十）：数据读写</a></li></ul><hr><p>专栏：</p><p>【<a href="https://www.itrhx.com/categories/Python-%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/NumPy/">NumPy 专栏</a>】【<a href="https://www.itrhx.com/categories/Python-%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/Pandas/">Pandas 专栏</a>】【<a href="https://www.itrhx.com/categories/Python-%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/Matplotlib/">Matplotlib 专栏</a>】</p><p>推荐学习资料与网站：</p><p>【<a href="https://www.numpy.org.cn/" target="_blank" rel="noopener">NumPy 中文网</a>】【<a href="https://www.pypandas.cn/" target="_blank" rel="noopener">Pandas 中文网</a>】【<a href="https://www.matplotlib.org.cn/" target="_blank" rel="noopener">Matplotlib 中文网</a>】【<a href="https://github.com/TRHX/Python-quick-reference-table" target="_blank" rel="noopener">NumPy、Matplotlib、Pandas 速查表</a>】</p><hr><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">这里是一段防爬虫文本，请读者忽略。</span></span><br><span class="line"><span class="string">本文原创首发于</span> <span class="string">CSDN，作者</span> <span class="string">TRHX。</span></span><br><span class="line"><span class="string">博客首页：https://itrhx.blog.csdn.net/</span></span><br><span class="line"><span class="string">本文链接：https://itrhx.blog.csdn.net/article/details/106698307</span></span><br><span class="line"><span class="string">未经授权，禁止转载！恶意转载，后果自负！尊重原创，远离剽窃！</span></span><br></pre></td></tr></table></figure><hr><h1 id="【1】Index-索引对象"><a href="#【1】Index-索引对象" class="headerlink" title="【1】Index 索引对象"></a><font color="#FF0000">【1】Index 索引对象</font></h1><p> Series 和 DataFrame 中的索引都是 Index 对象，为了保证数据的安全，索引对象是不可变的，如果尝试更改索引就会报错；常见的 Index 种类有：索引（Index），整数索引（Int64Index），层级索引（MultiIndex），时间戳类型（DatetimeIndex）。</p><p>一下代码演示了 Index 索引对象和其不可变的性质：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>obj = pd.Series([<span class="number">1</span>, <span class="number">5</span>, <span class="number">-8</span>, <span class="number">2</span>], index=[<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>, <span class="string">'d'</span>])</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>obj.index</span><br><span class="line">Index([<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>, <span class="string">'d'</span>], dtype=<span class="string">'object'</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>type(obj.index)</span><br><span class="line">&lt;<span class="class"><span class="keyword">class</span> '<span class="title">pandas</span>.<span class="title">core</span>.<span class="title">indexes</span>.<span class="title">base</span>.<span class="title">Index</span>'&gt;</span></span><br><span class="line">&gt;&gt;&gt; obj.index[0] = 'e'</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">"&lt;pyshell#28&gt;"</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">    obj.index[<span class="number">0</span>] = <span class="string">'e'</span></span><br><span class="line">  File <span class="string">"C:\Users\...\base.py"</span>, line <span class="number">3909</span>, <span class="keyword">in</span> __setitem__</span><br><span class="line">    <span class="keyword">raise</span> TypeError(<span class="string">"Index does not support mutable operations"</span>)</span><br><span class="line">TypeError: Index does <span class="keyword">not</span> support mutable operations</span><br></pre></td></tr></table></figure><table><tr><td bgcolor="#FFA500"><font size="5" color="#fff">index 索引对象常用属性</font></td></tr></table><p>官方文档：<a href="https://pandas.pydata.org/docs/reference/api/pandas.Index.html" target="_blank" rel="noopener">https://pandas.pydata.org/docs/reference/api/pandas.Index.html</a></p><table><thead><tr><th>属性</th><th>描述</th></tr></thead><tbody><tr><td>T</td><td>转置</td></tr><tr><td>array</td><td>index 的数组形式，常见<a href="https://pandas.pydata.org/docs/reference/api/pandas.Index.array.html" target="_blank" rel="noopener">官方文档</a></td></tr><tr><td>dtype</td><td>返回基础数据的 dtype 对象</td></tr><tr><td>hasnans</td><td>是否有 NaN（缺失值）</td></tr><tr><td>inferred_type</td><td>返回一个字符串，表示 index 的类型</td></tr><tr><td>is_monotonic</td><td>判断 index 是否是递增的</td></tr><tr><td>is_monotonic_decreasing</td><td>判断 index 是否单调递减</td></tr><tr><td>is_monotonic_increasing</td><td>判断 index 是否单调递增</td></tr><tr><td>is_unique</td><td>index 是否没有重复值</td></tr><tr><td>nbytes</td><td>返回 index 中的字节数</td></tr><tr><td>ndim</td><td>index 的维度</td></tr><tr><td>nlevels</td><td>Number of levels.</td></tr><tr><td>shape</td><td>返回一个元组，表示 index 的形状</td></tr><tr><td>size</td><td>index 的大小</td></tr><tr><td>values</td><td>返回 index 中的值 / 数组</td></tr></tbody></table><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>obj = pd.Series([<span class="number">1</span>, <span class="number">5</span>, <span class="number">-8</span>, <span class="number">2</span>], index=[<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>, <span class="string">'d'</span>])</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>obj.index</span><br><span class="line">Index([<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>, <span class="string">'d'</span>], dtype=<span class="string">'object'</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>obj.index.array</span><br><span class="line">&lt;PandasArray&gt;</span><br><span class="line">[<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>, <span class="string">'d'</span>]</span><br><span class="line">Length: <span class="number">4</span>, dtype: object</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>obj.index.dtype</span><br><span class="line">dtype(<span class="string">'O'</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>obj.index.hasnans</span><br><span class="line"><span class="keyword">False</span></span><br><span class="line">&gt;&gt;&gt;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>obj.index.inferred_type</span><br><span class="line"><span class="string">'string'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>obj.index.is_monotonic</span><br><span class="line"><span class="keyword">True</span></span><br><span class="line">&gt;&gt;&gt;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>obj.index.is_monotonic_decreasing</span><br><span class="line"><span class="keyword">False</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>obj.index.is_monotonic_increasing</span><br><span class="line"><span class="keyword">True</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>obj.index.is_unique</span><br><span class="line"><span class="keyword">True</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>obj.index.nbytes</span><br><span class="line"><span class="number">16</span></span><br><span class="line">&gt;&gt;&gt;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>obj.index.ndim</span><br><span class="line"><span class="number">1</span></span><br><span class="line">&gt;&gt;&gt;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>obj.index.nlevels</span><br><span class="line"><span class="number">1</span></span><br><span class="line">&gt;&gt;&gt;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>obj.index.shape</span><br><span class="line">(<span class="number">4</span>,)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>obj.index.size</span><br><span class="line"><span class="number">4</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>obj.index.values</span><br><span class="line">array([<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>, <span class="string">'d'</span>], dtype=object)</span><br></pre></td></tr></table></figure><table><tr><td bgcolor="#FFA500"><font size="5" color="#fff">index 索引对象常用方法</font></td></tr></table><p>官方文档：<a href="https://pandas.pydata.org/docs/reference/api/pandas.Index.html" target="_blank" rel="noopener">https://pandas.pydata.org/docs/reference/api/pandas.Index.html</a></p><table><thead><tr><th>方法</th><th>描述</th></tr></thead><tbody><tr><td>all(self, *args, **kwargs)</td><td>判断所有元素是否为真，有 0 会被视为 False</td></tr><tr><td>any(self, *args, **kwargs)</td><td>判断是否至少有一个元素为真，均为 0 会被视为 False</td></tr><tr><td>append(self, other)</td><td>连接另一个 index，产生一个新的 index</td></tr><tr><td>argmax(self[, axis, skipna])</td><td>返回 index 中最大值的索引值</td></tr><tr><td>argmin(self[, axis, skipna])</td><td>返回 index 中最小值的索引值</td></tr><tr><td>argsort(self, *args, **kwargs)</td><td>对 index 从小到大排序，返回排序后的元素在原 index 中的索引值</td></tr><tr><td>delete(self, loc)</td><td>删除指定索引位置的元素，返回删除后的新 index</td></tr><tr><td>difference(self, other[, sort])</td><td>在第一个 index 中删除第二个 index 中的元素，即差集</td></tr><tr><td>drop(self, labels[, errors])</td><td>在原 index 中删除传入的值</td></tr><tr><td>drop_duplicates(self[, keep])</td><td>删除重复值，keep 参数可选值如下：<br><code>‘first’</code>：保留第一次出现的重复项；<br><code>‘last’</code>：保留最后一次出现的重复项；<br><code>False</code>：不保留重复项</td></tr><tr><td>duplicated(self[, keep])</td><td>判断是否为重复值，keep 参数可选值如下：<br><code>‘first’</code>：第一次重复的为 False，其他为 True；<br><code>‘last’</code>：最后一次重复的为 False，其他为 True；<br><code>False</code>：所有重复的均为 True</td></tr><tr><td>dropna(self[, how])</td><td>删除缺失值，即 NaN</td></tr><tr><td>fillna(self[, value, downcast])</td><td>用指定值填充缺失值，即 NaN</td></tr><tr><td>equals(self, other)</td><td>判断两个  index 是否相同</td></tr><tr><td>insert(self, loc, item)</td><td>将元素插入到指定索引处，返回新的 index</td></tr><tr><td>intersection(self, other[, sort])</td><td>返回两个 index 的交集</td></tr><tr><td>isna(self)</td><td>检测 index 元素是否为缺失值，即 NaN</td></tr><tr><td>isnull(self)</td><td>检测 index 元素是否为缺失值，即 NaN</td></tr><tr><td>max(self[, axis, skipna])</td><td>返回 index 的最大值</td></tr><tr><td>min(self[, axis, skipna])</td><td>返回 index 的最小值</td></tr><tr><td>union(self, other[, sort])</td><td>返回两个 index 的并集</td></tr><tr><td>unique(self[, level])</td><td>返回 index 中的唯一值，相当于去除重复值</td></tr></tbody></table><ul><li><p><code>all(self, *args, **kwargs)</code> 【<a href="https://pandas.pydata.org/docs/reference/api/pandas.Index.all.html" target="_blank" rel="noopener">官方文档</a>】</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>pd.Index([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]).all()</span><br><span class="line"><span class="keyword">True</span></span><br><span class="line">&gt;&gt;&gt;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>pd.Index([<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>]).all()</span><br><span class="line"><span class="keyword">False</span></span><br></pre></td></tr></table></figure></li><li><p><code>any(self, *args, **kwargs)</code> 【<a href="https://pandas.pydata.org/docs/reference/api/pandas.Index.any.html" target="_blank" rel="noopener">官方文档</a>】</p></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>pd.Index([<span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>]).any()</span><br><span class="line"><span class="keyword">True</span></span><br><span class="line">&gt;&gt;&gt;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>pd.Index([<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>]).any()</span><br><span class="line"><span class="keyword">False</span></span><br></pre></td></tr></table></figure><ul><li><code>append(self, other)</code> 【<a href="https://pandas.pydata.org/docs/reference/api/pandas.Index.append.html" target="_blank" rel="noopener">官方文档</a>】</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>pd.Index([<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>]).append(pd.Index([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]))</span><br><span class="line">Index([<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>], dtype=<span class="string">'object'</span>)</span><br></pre></td></tr></table></figure><ul><li><code>argmax(self[, axis, skipna])</code> 【<a href="https://pandas.pydata.org/docs/reference/api/pandas.Index.argmax.html" target="_blank" rel="noopener">官方文档</a>】</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>pd.Index([<span class="number">5</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">9</span>, <span class="number">1</span>]).argmax()</span><br><span class="line"><span class="number">3</span></span><br></pre></td></tr></table></figure><ul><li><code>argmin(self[, axis, skipna])</code> 【<a href="https://pandas.pydata.org/docs/reference/api/pandas.Index.argmin.html" target="_blank" rel="noopener">官方文档</a>】</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>pd.Index([<span class="number">5</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">9</span>, <span class="number">1</span>]).argmin()</span><br><span class="line"><span class="number">4</span></span><br></pre></td></tr></table></figure><ul><li><code>argsort(self, *args, **kwargs)</code> 【<a href="https://pandas.pydata.org/docs/reference/api/pandas.Index.argsort.html" target="_blank" rel="noopener">官方文档</a>】</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>pd.Index([<span class="number">5</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">9</span>, <span class="number">1</span>]).argsort()</span><br><span class="line">array([<span class="number">4</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">3</span>], dtype=int32)</span><br></pre></td></tr></table></figure><ul><li><code>delete(self, loc)</code> 【<a href="https://pandas.pydata.org/docs/reference/api/pandas.Index.delete.html" target="_blank" rel="noopener">官方文档</a>】</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>pd.Index([<span class="number">5</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">9</span>, <span class="number">1</span>]).delete(<span class="number">0</span>)</span><br><span class="line">Int64Index([<span class="number">2</span>, <span class="number">3</span>, <span class="number">9</span>, <span class="number">1</span>], dtype=<span class="string">'int64'</span>)</span><br></pre></td></tr></table></figure><ul><li><code>difference(self, other[, sort])</code> 【<a href="https://pandas.pydata.org/docs/reference/api/pandas.Index.difference.html" target="_blank" rel="noopener">官方文档</a>】</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>idx1 = pd.Index([<span class="number">2</span>, <span class="number">1</span>, <span class="number">3</span>, <span class="number">4</span>])</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>idx2 = pd.Index([<span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>])</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>idx1.difference(idx2)</span><br><span class="line">Int64Index([<span class="number">1</span>, <span class="number">2</span>], dtype=<span class="string">'int64'</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>idx1.difference(idx2, sort=<span class="keyword">False</span>)</span><br><span class="line">Int64Index([<span class="number">2</span>, <span class="number">1</span>], dtype=<span class="string">'int64'</span>)</span><br></pre></td></tr></table></figure><ul><li><code>drop(self, labels[, errors])</code> 【<a href="https://pandas.pydata.org/docs/reference/api/pandas.Index.drop.html" target="_blank" rel="noopener">官方文档</a>】</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>pd.Index([<span class="number">5</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">9</span>, <span class="number">1</span>]).drop([<span class="number">2</span>, <span class="number">1</span>])</span><br><span class="line">Int64Index([<span class="number">5</span>, <span class="number">3</span>, <span class="number">9</span>], dtype=<span class="string">'int64'</span>)</span><br></pre></td></tr></table></figure><ul><li><code>drop_duplicates(self[, keep])</code> 【<a href="https://pandas.pydata.org/docs/reference/api/pandas.Index.drop_duplicates.html" target="_blank" rel="noopener">官方文档</a>】</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>idx = pd.Index([<span class="string">'lama'</span>, <span class="string">'cow'</span>, <span class="string">'lama'</span>, <span class="string">'beetle'</span>, <span class="string">'lama'</span>, <span class="string">'hippo'</span>])</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>idx.drop_duplicates(keep=<span class="string">'first'</span>)</span><br><span class="line">Index([<span class="string">'lama'</span>, <span class="string">'cow'</span>, <span class="string">'beetle'</span>, <span class="string">'hippo'</span>], dtype=<span class="string">'object'</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>idx.drop_duplicates(keep=<span class="string">'last'</span>)</span><br><span class="line">Index([<span class="string">'cow'</span>, <span class="string">'beetle'</span>, <span class="string">'lama'</span>, <span class="string">'hippo'</span>], dtype=<span class="string">'object'</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>idx.drop_duplicates(keep=<span class="keyword">False</span>)</span><br><span class="line">Index([<span class="string">'cow'</span>, <span class="string">'beetle'</span>, <span class="string">'hippo'</span>], dtype=<span class="string">'object'</span>)</span><br></pre></td></tr></table></figure><ul><li>duplicated(self[, keep]) 【<a href="https://pandas.pydata.org/docs/reference/api/pandas.Index.duplicated.html" target="_blank" rel="noopener">官方文档</a>】</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>idx = pd.Index([<span class="string">'lama'</span>, <span class="string">'cow'</span>, <span class="string">'lama'</span>, <span class="string">'beetle'</span>, <span class="string">'lama'</span>])</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>idx.duplicated()</span><br><span class="line">array([<span class="keyword">False</span>, <span class="keyword">False</span>,  <span class="keyword">True</span>, <span class="keyword">False</span>,  <span class="keyword">True</span>])</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>idx.duplicated(keep=<span class="string">'first'</span>)</span><br><span class="line">array([<span class="keyword">False</span>, <span class="keyword">False</span>,  <span class="keyword">True</span>, <span class="keyword">False</span>,  <span class="keyword">True</span>])</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>idx.duplicated(keep=<span class="string">'last'</span>)</span><br><span class="line">array([ <span class="keyword">True</span>, <span class="keyword">False</span>,  <span class="keyword">True</span>, <span class="keyword">False</span>, <span class="keyword">False</span>])</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>idx.duplicated(keep=<span class="keyword">False</span>)</span><br><span class="line">array([ <span class="keyword">True</span>, <span class="keyword">False</span>,  <span class="keyword">True</span>, <span class="keyword">False</span>,  <span class="keyword">True</span>])</span><br></pre></td></tr></table></figure><ul><li><code>dropna(self[, how])</code> 【<a href="https://pandas.pydata.org/docs/reference/api/pandas.Index.dropna.html" target="_blank" rel="noopener">官方文档</a>】</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>pd.Index([<span class="number">2</span>, <span class="number">5</span>, np.NaN, <span class="number">6</span>, np.NaN, np.NaN]).dropna()</span><br><span class="line">Float64Index([<span class="number">2.0</span>, <span class="number">5.0</span>, <span class="number">6.0</span>], dtype=<span class="string">'float64'</span>)</span><br></pre></td></tr></table></figure><ul><li><code>fillna(self[, value, downcast])</code> 【<a href="https://pandas.pydata.org/docs/reference/api/pandas.Index.fillna.html" target="_blank" rel="noopener">官方文档</a>】</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>pd.Index([<span class="number">2</span>, <span class="number">5</span>, np.NaN, <span class="number">6</span>, np.NaN, np.NaN]).fillna(<span class="number">5</span>)</span><br><span class="line">Float64Index([<span class="number">2.0</span>, <span class="number">5.0</span>, <span class="number">5.0</span>, <span class="number">6.0</span>, <span class="number">5.0</span>, <span class="number">5.0</span>], dtype=<span class="string">'float64'</span>)</span><br></pre></td></tr></table></figure><ul><li><code>equals(self, other)</code> 【<a href="https://pandas.pydata.org/docs/reference/api/pandas.Index.equals.html" target="_blank" rel="noopener">官方文档</a>】</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>idx1 = pd.Index([<span class="number">5</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">9</span>, <span class="number">1</span>])</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>idx2 = pd.Index([<span class="number">5</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">9</span>, <span class="number">1</span>])</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>idx1.equals(idx2)</span><br><span class="line"><span class="keyword">True</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>idx1 = pd.Index([<span class="number">5</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">9</span>, <span class="number">1</span>])</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>idx2 = pd.Index([<span class="number">5</span>, <span class="number">2</span>, <span class="number">4</span>, <span class="number">9</span>, <span class="number">1</span>])</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>idx1.equals(idx2)</span><br><span class="line"><span class="keyword">False</span></span><br></pre></td></tr></table></figure><ul><li><code>intersection(self, other[, sort])</code> 【<a href="https://pandas.pydata.org/docs/reference/api/pandas.Index.intersection.html" target="_blank" rel="noopener">官方文档</a>】</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>idx1 = pd.Index([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>])</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>idx2 = pd.Index([<span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>])</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>idx1.intersection(idx2)</span><br><span class="line">Int64Index([<span class="number">3</span>, <span class="number">4</span>], dtype=<span class="string">'int64'</span>)</span><br></pre></td></tr></table></figure><ul><li><code>insert(self, loc, item)</code> 【<a href="https://pandas.pydata.org/docs/reference/api/pandas.Index.insert.html" target="_blank" rel="noopener">官方文档</a>】</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>pd.Index([<span class="number">5</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">9</span>, <span class="number">1</span>]).insert(<span class="number">2</span>, <span class="string">'A'</span>)</span><br><span class="line">Index([<span class="number">5</span>, <span class="number">2</span>, <span class="string">'A'</span>, <span class="number">3</span>, <span class="number">9</span>, <span class="number">1</span>], dtype=<span class="string">'object'</span>)</span><br></pre></td></tr></table></figure><ul><li><code>isna(self)</code> 【<a href="https://pandas.pydata.org/docs/reference/api/pandas.Index.isna.html" target="_blank" rel="noopener">官方文档</a>】、<code>isnull(self)</code> 【<a href="https://pandas.pydata.org/docs/reference/api/pandas.Index.isnull.html" target="_blank" rel="noopener">官方文档</a>】</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>pd.Index([<span class="number">2</span>, <span class="number">5</span>, np.NaN, <span class="number">6</span>, np.NaN, np.NaN]).isna()</span><br><span class="line">array([<span class="keyword">False</span>, <span class="keyword">False</span>,  <span class="keyword">True</span>, <span class="keyword">False</span>,  <span class="keyword">True</span>,  <span class="keyword">True</span>])</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>pd.Index([<span class="number">2</span>, <span class="number">5</span>, np.NaN, <span class="number">6</span>, np.NaN, np.NaN]).isnull()</span><br><span class="line">array([<span class="keyword">False</span>, <span class="keyword">False</span>,  <span class="keyword">True</span>, <span class="keyword">False</span>,  <span class="keyword">True</span>,  <span class="keyword">True</span>])</span><br></pre></td></tr></table></figure><ul><li><code>max(self[, axis, skipna])</code> 【<a href="https://pandas.pydata.org/docs/reference/api/pandas.Index.max.html" target="_blank" rel="noopener">官方文档</a>】、<code>min(self[, axis, skipna])</code> 【<a href="https://pandas.pydata.org/docs/reference/api/pandas.Index.min.html" target="_blank" rel="noopener">官方文档</a>】</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>pd.Index([<span class="number">5</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">9</span>, <span class="number">1</span>]).max()</span><br><span class="line"><span class="number">9</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>pd.Index([<span class="number">5</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">9</span>, <span class="number">1</span>]).min()</span><br><span class="line"><span class="number">1</span></span><br></pre></td></tr></table></figure><ul><li><code>union(self, other[, sort])</code> 【<a href="https://pandas.pydata.org/docs/reference/api/pandas.Index.union.html" target="_blank" rel="noopener">官方文档</a>】</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>idx1 = pd.Index([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>])</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>idx2 = pd.Index([<span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>])</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>idx1.union(idx2)</span><br><span class="line">Int64Index([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>], dtype=<span class="string">'int64'</span>)</span><br></pre></td></tr></table></figure><ul><li><code>unique(self[, level])</code> 【<a href="https://pandas.pydata.org/docs/reference/api/pandas.Index.unique.html" target="_blank" rel="noopener">官方文档</a>】</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>pd.Index([<span class="number">5</span>, <span class="number">1</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">1</span>]).unique()</span><br><span class="line">Int64Index([<span class="number">5</span>, <span class="number">1</span>, <span class="number">3</span>], dtype=<span class="string">'int64'</span>)</span><br></pre></td></tr></table></figure><h1 id="【2】Pandas-一般索引"><a href="#【2】Pandas-一般索引" class="headerlink" title="【2】Pandas 一般索引"></a><font color="#FF0000">【2】Pandas 一般索引</font></h1><p>由于在 Pandas 中，由于有一些更高级的索引操作，比如重新索引，层级索引等，因此将一般的切片索引、花式索引、布尔索引等归纳为一般索引。</p><h2 id="【2-1】Series-索引"><a href="#【2-1】Series-索引" class="headerlink" title="【2.1】Series 索引"></a><font color="#4876FF">【2.1】Series 索引</font></h2><h3 id="【2-1-1】head-tail"><a href="#【2-1-1】head-tail" class="headerlink" title="【2.1.1】head() / tail()"></a><font color="#FFA500">【2.1.1】head() / tail()</font></h3><p><code>Series.head()</code> 和 <code>Series.tail()</code> 方法可以获取的前五行和后五行数据，如果向 head() / tail() 里面传入参数，则会获取指定行：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>obj = pd.Series(np.random.randn(<span class="number">8</span>))</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>obj</span><br><span class="line"><span class="number">0</span>   <span class="number">-0.643437</span></span><br><span class="line"><span class="number">1</span>   <span class="number">-0.365652</span></span><br><span class="line"><span class="number">2</span>   <span class="number">-0.966554</span></span><br><span class="line"><span class="number">3</span>   <span class="number">-0.036127</span></span><br><span class="line"><span class="number">4</span>    <span class="number">1.046095</span></span><br><span class="line"><span class="number">5</span>   <span class="number">-2.048362</span></span><br><span class="line"><span class="number">6</span>   <span class="number">-1.865551</span></span><br><span class="line"><span class="number">7</span>    <span class="number">1.344728</span></span><br><span class="line">dtype: float64</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>obj.head()</span><br><span class="line"><span class="number">0</span>   <span class="number">-0.643437</span></span><br><span class="line"><span class="number">1</span>   <span class="number">-0.365652</span></span><br><span class="line"><span class="number">2</span>   <span class="number">-0.966554</span></span><br><span class="line"><span class="number">3</span>   <span class="number">-0.036127</span></span><br><span class="line"><span class="number">4</span>    <span class="number">1.046095</span></span><br><span class="line">dtype: float64</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>obj.head(<span class="number">3</span>)</span><br><span class="line"><span class="number">0</span>   <span class="number">-0.643437</span></span><br><span class="line"><span class="number">1</span>   <span class="number">-0.365652</span></span><br><span class="line"><span class="number">2</span>   <span class="number">-0.966554</span></span><br><span class="line">dtype: float64</span><br><span class="line">&gt;&gt;&gt;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>obj.tail()</span><br><span class="line"><span class="number">3</span>    <span class="number">1.221221</span></span><br><span class="line"><span class="number">4</span>   <span class="number">-1.373496</span></span><br><span class="line"><span class="number">5</span>    <span class="number">1.032843</span></span><br><span class="line"><span class="number">6</span>    <span class="number">0.029734</span></span><br><span class="line"><span class="number">7</span>   <span class="number">-1.861485</span></span><br><span class="line">dtype: float64</span><br><span class="line">&gt;&gt;&gt;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>obj.tail(<span class="number">3</span>)</span><br><span class="line"><span class="number">5</span>    <span class="number">1.032843</span></span><br><span class="line"><span class="number">6</span>    <span class="number">0.029734</span></span><br><span class="line"><span class="number">7</span>   <span class="number">-1.861485</span></span><br><span class="line">dtype: float64</span><br></pre></td></tr></table></figure><h3 id="【2-1-2】行索引"><a href="#【2-1-2】行索引" class="headerlink" title="【2.1.2】行索引"></a><font color="#FFA500">【2.1.2】行索引</font></h3><p>Pandas 中可以按照位置进行索引，也可以按照索引名（index）进行索引，也可以用 Python 字典的表达式和方法来获取值：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>obj = pd.Series([<span class="number">1</span>, <span class="number">5</span>, <span class="number">-8</span>, <span class="number">2</span>], index=[<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>, <span class="string">'d'</span>])</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>obj</span><br><span class="line">a    <span class="number">1</span></span><br><span class="line">b    <span class="number">5</span></span><br><span class="line">c   <span class="number">-8</span></span><br><span class="line">d    <span class="number">2</span></span><br><span class="line">dtype: int64</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>obj[<span class="string">'c'</span>]</span><br><span class="line"><span class="number">-8</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>obj[<span class="number">2</span>]</span><br><span class="line"><span class="number">-8</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">'b'</span> <span class="keyword">in</span> obj</span><br><span class="line"><span class="keyword">True</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>obj.keys()</span><br><span class="line">Index([<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>, <span class="string">'d'</span>], dtype=<span class="string">'object'</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>list(obj.items())</span><br><span class="line">[(<span class="string">'a'</span>, <span class="number">1</span>), (<span class="string">'b'</span>, <span class="number">5</span>), (<span class="string">'c'</span>, <span class="number">-8</span>), (<span class="string">'d'</span>, <span class="number">2</span>)]</span><br></pre></td></tr></table></figure><h3 id="【2-1-3】切片索引"><a href="#【2-1-3】切片索引" class="headerlink" title="【2.1.3】切片索引"></a><font color="#FFA500">【2.1.3】切片索引</font></h3><p>切片的方法有两种：按位置切片和按索引名（index）切片，注意：按位置切片时，<font color="#FF0000"><strong>不包含</strong></font>终止索引；按索引名（index）切片时，<font color="#FF0000"><strong>包含</strong></font>终止索引。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>obj = pd.Series([<span class="number">1</span>, <span class="number">5</span>, <span class="number">-8</span>, <span class="number">2</span>], index=[<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>, <span class="string">'d'</span>])</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>obj</span><br><span class="line">a    <span class="number">1</span></span><br><span class="line">b    <span class="number">5</span></span><br><span class="line">c   <span class="number">-8</span></span><br><span class="line">d    <span class="number">2</span></span><br><span class="line">dtype: int64</span><br><span class="line">&gt;&gt;&gt;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>obj[<span class="number">1</span>:<span class="number">3</span>]</span><br><span class="line">b    <span class="number">5</span></span><br><span class="line">c   <span class="number">-8</span></span><br><span class="line">dtype: int64</span><br><span class="line">&gt;&gt;&gt;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>obj[<span class="number">0</span>:<span class="number">3</span>:<span class="number">2</span>]</span><br><span class="line">a    <span class="number">1</span></span><br><span class="line">c   <span class="number">-8</span></span><br><span class="line">dtype: int64</span><br><span class="line">&gt;&gt;&gt;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>obj[<span class="string">'b'</span>:<span class="string">'d'</span>]</span><br><span class="line">b    <span class="number">5</span></span><br><span class="line">c   <span class="number">-8</span></span><br><span class="line">d    <span class="number">2</span></span><br><span class="line">dtype: int64</span><br></pre></td></tr></table></figure><h3 id="【2-1-4】花式索引"><a href="#【2-1-4】花式索引" class="headerlink" title="【2.1.4】花式索引"></a><font color="#FFA500">【2.1.4】花式索引</font></h3><p>所谓的花式索引，就是间隔索引、不连续的索引，传递一个由索引名（index）或者位置参数组成的<font color="#FF0000"><strong>列表</strong></font>来一次性获得多个元素：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>obj = pd.Series([<span class="number">1</span>, <span class="number">5</span>, <span class="number">-8</span>, <span class="number">2</span>], index=[<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>, <span class="string">'d'</span>])</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>obj</span><br><span class="line">a    <span class="number">1</span></span><br><span class="line">b    <span class="number">5</span></span><br><span class="line">c   <span class="number">-8</span></span><br><span class="line">d    <span class="number">2</span></span><br><span class="line">dtype: int64</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>obj[[<span class="number">0</span>, <span class="number">2</span>]]</span><br><span class="line">a    <span class="number">1</span></span><br><span class="line">c   <span class="number">-8</span></span><br><span class="line">dtype: int64</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>obj[[<span class="string">'a'</span>, <span class="string">'c'</span>, <span class="string">'d'</span>]]</span><br><span class="line">a    <span class="number">1</span></span><br><span class="line">c   <span class="number">-8</span></span><br><span class="line">d    <span class="number">2</span></span><br><span class="line">dtype: int64</span><br></pre></td></tr></table></figure><h3 id="【2-1-5】布尔索引"><a href="#【2-1-5】布尔索引" class="headerlink" title="【2.1.5】布尔索引"></a><font color="#FFA500">【2.1.5】布尔索引</font></h3><p>可以通过一个布尔数组来索引目标数组，即通过布尔运算（如：比较运算符）来获取符合指定条件的元素的数组。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>obj = pd.Series([<span class="number">1</span>, <span class="number">5</span>, <span class="number">-8</span>, <span class="number">2</span>, <span class="number">-3</span>], index=[<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>, <span class="string">'d'</span>, <span class="string">'e'</span>])</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>obj</span><br><span class="line">a    <span class="number">1</span></span><br><span class="line">b    <span class="number">5</span></span><br><span class="line">c   <span class="number">-8</span></span><br><span class="line">d    <span class="number">2</span></span><br><span class="line">e   <span class="number">-3</span></span><br><span class="line">dtype: int64</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>obj[obj &gt; <span class="number">0</span>]</span><br><span class="line">a    <span class="number">1</span></span><br><span class="line">b    <span class="number">5</span></span><br><span class="line">d    <span class="number">2</span></span><br><span class="line">dtype: int64</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>obj &gt; <span class="number">0</span></span><br><span class="line">a     <span class="keyword">True</span></span><br><span class="line">b     <span class="keyword">True</span></span><br><span class="line">c    <span class="keyword">False</span></span><br><span class="line">d     <span class="keyword">True</span></span><br><span class="line">e    <span class="keyword">False</span></span><br><span class="line">dtype: bool</span><br></pre></td></tr></table></figure><h2 id="【2-2】DataFrame-索引"><a href="#【2-2】DataFrame-索引" class="headerlink" title="【2.2】DataFrame 索引"></a><font color="#4876FF">【2.2】DataFrame 索引</font></h2><h3 id="【2-2-1】head-tail"><a href="#【2-2-1】head-tail" class="headerlink" title="【2.2.1】head() / tail()"></a><font color="#FFA500">【2.2.1】head() / tail()</font></h3><p>和 Series 一样，<code>DataFrame.head()</code> 和 <code>DataFrame.tail()</code> 方法同样可以获取 DataFrame 的前五行和后五行数据，如果向 head() / tail() 里面传入参数，则会获取指定行：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>obj = pd.DataFrame(np.random.randn(<span class="number">8</span>,<span class="number">4</span>), columns = [<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>, <span class="string">'d'</span>])</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>obj</span><br><span class="line">          a         b         c         d</span><br><span class="line"><span class="number">0</span> <span class="number">-1.399390</span>  <span class="number">0.521596</span> <span class="number">-0.869613</span>  <span class="number">0.506621</span></span><br><span class="line"><span class="number">1</span> <span class="number">-0.748562</span> <span class="number">-0.364952</span>  <span class="number">0.188399</span> <span class="number">-1.402566</span></span><br><span class="line"><span class="number">2</span>  <span class="number">1.378776</span> <span class="number">-1.476480</span>  <span class="number">0.361635</span>  <span class="number">0.451134</span></span><br><span class="line"><span class="number">3</span> <span class="number">-0.206405</span> <span class="number">-1.188609</span>  <span class="number">3.002599</span>  <span class="number">0.563650</span></span><br><span class="line"><span class="number">4</span>  <span class="number">0.993289</span>  <span class="number">1.133748</span>  <span class="number">1.177549</span> <span class="number">-2.562286</span></span><br><span class="line"><span class="number">5</span> <span class="number">-0.482157</span>  <span class="number">1.069293</span>  <span class="number">1.143983</span> <span class="number">-1.303079</span></span><br><span class="line"><span class="number">6</span> <span class="number">-1.199154</span>  <span class="number">0.220360</span>  <span class="number">0.801838</span> <span class="number">-0.104533</span></span><br><span class="line"><span class="number">7</span> <span class="number">-1.359816</span> <span class="number">-2.092035</span>  <span class="number">2.003530</span> <span class="number">-0.151812</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>obj.head()</span><br><span class="line">          a         b         c         d</span><br><span class="line"><span class="number">0</span> <span class="number">-1.399390</span>  <span class="number">0.521596</span> <span class="number">-0.869613</span>  <span class="number">0.506621</span></span><br><span class="line"><span class="number">1</span> <span class="number">-0.748562</span> <span class="number">-0.364952</span>  <span class="number">0.188399</span> <span class="number">-1.402566</span></span><br><span class="line"><span class="number">2</span>  <span class="number">1.378776</span> <span class="number">-1.476480</span>  <span class="number">0.361635</span>  <span class="number">0.451134</span></span><br><span class="line"><span class="number">3</span> <span class="number">-0.206405</span> <span class="number">-1.188609</span>  <span class="number">3.002599</span>  <span class="number">0.563650</span></span><br><span class="line"><span class="number">4</span>  <span class="number">0.993289</span>  <span class="number">1.133748</span>  <span class="number">1.177549</span> <span class="number">-2.562286</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>obj.head(<span class="number">3</span>)</span><br><span class="line">          a         b         c         d</span><br><span class="line"><span class="number">0</span> <span class="number">-1.399390</span>  <span class="number">0.521596</span> <span class="number">-0.869613</span>  <span class="number">0.506621</span></span><br><span class="line"><span class="number">1</span> <span class="number">-0.748562</span> <span class="number">-0.364952</span>  <span class="number">0.188399</span> <span class="number">-1.402566</span></span><br><span class="line"><span class="number">2</span>  <span class="number">1.378776</span> <span class="number">-1.476480</span>  <span class="number">0.361635</span>  <span class="number">0.451134</span></span><br><span class="line">&gt;&gt;&gt;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>obj.tail()</span><br><span class="line">          a         b         c         d</span><br><span class="line"><span class="number">3</span> <span class="number">-0.206405</span> <span class="number">-1.188609</span>  <span class="number">3.002599</span>  <span class="number">0.563650</span></span><br><span class="line"><span class="number">4</span>  <span class="number">0.993289</span>  <span class="number">1.133748</span>  <span class="number">1.177549</span> <span class="number">-2.562286</span></span><br><span class="line"><span class="number">5</span> <span class="number">-0.482157</span>  <span class="number">1.069293</span>  <span class="number">1.143983</span> <span class="number">-1.303079</span></span><br><span class="line"><span class="number">6</span> <span class="number">-1.199154</span>  <span class="number">0.220360</span>  <span class="number">0.801838</span> <span class="number">-0.104533</span></span><br><span class="line"><span class="number">7</span> <span class="number">-1.359816</span> <span class="number">-2.092035</span>  <span class="number">2.003530</span> <span class="number">-0.151812</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>obj.tail(<span class="number">3</span>)</span><br><span class="line">          a         b         c         d</span><br><span class="line"><span class="number">5</span> <span class="number">-0.482157</span>  <span class="number">1.069293</span>  <span class="number">1.143983</span> <span class="number">-1.303079</span></span><br><span class="line"><span class="number">6</span> <span class="number">-1.199154</span>  <span class="number">0.220360</span>  <span class="number">0.801838</span> <span class="number">-0.104533</span></span><br><span class="line"><span class="number">7</span> <span class="number">-1.359816</span> <span class="number">-2.092035</span>  <span class="number">2.003530</span> <span class="number">-0.151812</span></span><br></pre></td></tr></table></figure><h3 id="【2-2-2】列索引"><a href="#【2-2-2】列索引" class="headerlink" title="【2.2.2】列索引"></a><font color="#FFA500">【2.2.2】列索引</font></h3><p>DataFrame 可以按照列标签（columns）来进行列索引：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>obj = pd.DataFrame(np.random.randn(<span class="number">7</span>,<span class="number">2</span>), columns = [<span class="string">'a'</span>, <span class="string">'b'</span>])</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>obj</span><br><span class="line">          a         b</span><br><span class="line"><span class="number">0</span> <span class="number">-1.198795</span>  <span class="number">0.928378</span></span><br><span class="line"><span class="number">1</span> <span class="number">-2.878230</span>  <span class="number">0.014650</span></span><br><span class="line"><span class="number">2</span>  <span class="number">2.267475</span>  <span class="number">0.370952</span></span><br><span class="line"><span class="number">3</span>  <span class="number">0.639340</span> <span class="number">-1.301041</span></span><br><span class="line"><span class="number">4</span> <span class="number">-1.953444</span>  <span class="number">0.148934</span></span><br><span class="line"><span class="number">5</span> <span class="number">-0.445225</span>  <span class="number">0.459632</span></span><br><span class="line"><span class="number">6</span>  <span class="number">0.097109</span> <span class="number">-2.592833</span></span><br><span class="line">&gt;&gt;&gt;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>obj[<span class="string">'a'</span>]</span><br><span class="line"><span class="number">0</span>   <span class="number">-1.198795</span></span><br><span class="line"><span class="number">1</span>   <span class="number">-2.878230</span></span><br><span class="line"><span class="number">2</span>    <span class="number">2.267475</span></span><br><span class="line"><span class="number">3</span>    <span class="number">0.639340</span></span><br><span class="line"><span class="number">4</span>   <span class="number">-1.953444</span></span><br><span class="line"><span class="number">5</span>   <span class="number">-0.445225</span></span><br><span class="line"><span class="number">6</span>    <span class="number">0.097109</span></span><br><span class="line">Name: a, dtype: float64</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>obj[[<span class="string">'a'</span>]]</span><br><span class="line">          a</span><br><span class="line"><span class="number">0</span> <span class="number">-1.198795</span></span><br><span class="line"><span class="number">1</span> <span class="number">-2.878230</span></span><br><span class="line"><span class="number">2</span>  <span class="number">2.267475</span></span><br><span class="line"><span class="number">3</span>  <span class="number">0.639340</span></span><br><span class="line"><span class="number">4</span> <span class="number">-1.953444</span></span><br><span class="line"><span class="number">5</span> <span class="number">-0.445225</span></span><br><span class="line"><span class="number">6</span>  <span class="number">0.097109</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>type(obj[<span class="string">'a'</span>])</span><br><span class="line">&lt;<span class="class"><span class="keyword">class</span> '<span class="title">pandas</span>.<span class="title">core</span>.<span class="title">series</span>.<span class="title">Series</span>'&gt;</span></span><br><span class="line"><span class="class">&gt;&gt;&gt; <span class="title">type</span><span class="params">(obj[[<span class="string">'a'</span>]])</span></span></span><br><span class="line"><span class="class">&lt;<span class="title">class</span> '<span class="title">pandas</span>.<span class="title">core</span>.<span class="title">frame</span>.<span class="title">DataFrame</span>'&gt;</span></span><br></pre></td></tr></table></figure><h3 id="【2-2-3】切片索引"><a href="#【2-2-3】切片索引" class="headerlink" title="【2.2.3】切片索引"></a><font color="#FFA500">【2.2.3】切片索引</font></h3><p>DataFrame 中的切片索引是针对行来操作的，切片的方法有两种：按位置切片和按索引名（index）切片，注意：按位置切片时，不包含终止索引；按索引名（index）切片时，包含终止索引。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>data = np.random.randn(<span class="number">5</span>,<span class="number">4</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>index = [<span class="string">'I1'</span>, <span class="string">'I2'</span>, <span class="string">'I3'</span>, <span class="string">'I4'</span>, <span class="string">'I5'</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>columns = [<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>, <span class="string">'d'</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>obj = pd.DataFrame(data, index, columns)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>obj</span><br><span class="line">           a         b         c         d</span><br><span class="line">I1  <span class="number">0.828676</span> <span class="number">-1.663337</span>  <span class="number">1.753632</span>  <span class="number">1.432487</span></span><br><span class="line">I2  <span class="number">0.368138</span>  <span class="number">0.222166</span>  <span class="number">0.902764</span> <span class="number">-1.436186</span></span><br><span class="line">I3  <span class="number">2.285615</span> <span class="number">-2.415175</span> <span class="number">-1.344456</span> <span class="number">-0.502214</span></span><br><span class="line">I4  <span class="number">3.224288</span> <span class="number">-0.500268</span>  <span class="number">1.293596</span> <span class="number">-1.235549</span></span><br><span class="line">I5 <span class="number">-0.938833</span> <span class="number">-0.804433</span> <span class="number">-0.170047</span> <span class="number">-0.566766</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>obj[<span class="number">0</span>:<span class="number">3</span>]</span><br><span class="line">           a         b         c         d</span><br><span class="line">I1  <span class="number">0.828676</span> <span class="number">-1.663337</span>  <span class="number">1.753632</span>  <span class="number">1.432487</span></span><br><span class="line">I2  <span class="number">0.368138</span>  <span class="number">0.222166</span>  <span class="number">0.902764</span> <span class="number">-1.436186</span></span><br><span class="line">I3  <span class="number">2.285615</span> <span class="number">-2.415175</span> <span class="number">-1.344456</span> <span class="number">-0.502214</span></span><br><span class="line">&gt;&gt;&gt;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>obj[<span class="number">0</span>:<span class="number">4</span>:<span class="number">2</span>]</span><br><span class="line">           a         b         c         d</span><br><span class="line">I1 <span class="number">-0.042168</span>  <span class="number">1.437354</span> <span class="number">-1.114545</span>  <span class="number">0.830790</span></span><br><span class="line">I3  <span class="number">0.241506</span>  <span class="number">0.018984</span> <span class="number">-0.499151</span> <span class="number">-1.190143</span></span><br><span class="line">&gt;&gt;&gt;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>obj[<span class="string">'I2'</span>:<span class="string">'I4'</span>]</span><br><span class="line">           a         b         c         d</span><br><span class="line">I2  <span class="number">0.368138</span>  <span class="number">0.222166</span>  <span class="number">0.902764</span> <span class="number">-1.436186</span></span><br><span class="line">I3  <span class="number">2.285615</span> <span class="number">-2.415175</span> <span class="number">-1.344456</span> <span class="number">-0.502214</span></span><br><span class="line">I4  <span class="number">3.224288</span> <span class="number">-0.500268</span>  <span class="number">1.293596</span> <span class="number">-1.235549</span></span><br></pre></td></tr></table></figure><h3 id="【2-2-4】花式索引"><a href="#【2-2-4】花式索引" class="headerlink" title="【2.2.4】花式索引"></a><font color="#FFA500">【2.2.4】花式索引</font></h3><p>和 Series 一样，所谓的花式索引，就是间隔索引、不连续的索引，传递一个由列名（columns）组成的<font color="#FF0000"><strong>列表</strong></font>来一次性获得多列元素：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>data = np.random.randn(<span class="number">5</span>,<span class="number">4</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>index = [<span class="string">'I1'</span>, <span class="string">'I2'</span>, <span class="string">'I3'</span>, <span class="string">'I4'</span>, <span class="string">'I5'</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>columns = [<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>, <span class="string">'d'</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>obj = pd.DataFrame(data, index, columns)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>obj</span><br><span class="line">           a         b         c         d</span><br><span class="line">I1 <span class="number">-1.083223</span> <span class="number">-0.182874</span> <span class="number">-0.348460</span> <span class="number">-1.572120</span></span><br><span class="line">I2 <span class="number">-0.205206</span> <span class="number">-0.251931</span>  <span class="number">1.180131</span>  <span class="number">0.847720</span></span><br><span class="line">I3 <span class="number">-0.980379</span>  <span class="number">0.325553</span> <span class="number">-0.847566</span> <span class="number">-0.882343</span></span><br><span class="line">I4 <span class="number">-0.638228</span> <span class="number">-0.282882</span> <span class="number">-0.624997</span> <span class="number">-0.245980</span></span><br><span class="line">I5 <span class="number">-0.229769</span>  <span class="number">1.002930</span> <span class="number">-0.226715</span> <span class="number">-0.916591</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>obj[[<span class="string">'a'</span>, <span class="string">'d'</span>]]</span><br><span class="line">           a         d</span><br><span class="line">I1 <span class="number">-1.083223</span> <span class="number">-1.572120</span></span><br><span class="line">I2 <span class="number">-0.205206</span>  <span class="number">0.847720</span></span><br><span class="line">I3 <span class="number">-0.980379</span> <span class="number">-0.882343</span></span><br><span class="line">I4 <span class="number">-0.638228</span> <span class="number">-0.245980</span></span><br><span class="line">I5 <span class="number">-0.229769</span> <span class="number">-0.916591</span></span><br></pre></td></tr></table></figure><h3 id="【2-2-5】布尔索引"><a href="#【2-2-5】布尔索引" class="headerlink" title="【2.2.5】布尔索引"></a><font color="#FFA500">【2.2.5】布尔索引</font></h3><p>可以通过一个布尔数组来索引目标数组，即通过布尔运算（如：比较运算符）来获取符合指定条件的元素的数组。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>data = np.random.randn(<span class="number">5</span>,<span class="number">4</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>index = [<span class="string">'I1'</span>, <span class="string">'I2'</span>, <span class="string">'I3'</span>, <span class="string">'I4'</span>, <span class="string">'I5'</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>columns = [<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>, <span class="string">'d'</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>obj = pd.DataFrame(data, index, columns)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>obj</span><br><span class="line">           a         b         c         d</span><br><span class="line">I1 <span class="number">-0.602984</span> <span class="number">-0.135716</span>  <span class="number">0.999689</span> <span class="number">-0.339786</span></span><br><span class="line">I2  <span class="number">0.911130</span> <span class="number">-0.092485</span> <span class="number">-0.914074</span> <span class="number">-0.279588</span></span><br><span class="line">I3  <span class="number">0.849606</span> <span class="number">-0.420055</span> <span class="number">-1.240389</span> <span class="number">-0.179297</span></span><br><span class="line">I4  <span class="number">0.249986</span> <span class="number">-1.250668</span>  <span class="number">0.329416</span> <span class="number">-1.105774</span></span><br><span class="line">I5 <span class="number">-0.743816</span>  <span class="number">0.430647</span> <span class="number">-0.058126</span> <span class="number">-0.337319</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>obj[obj &gt; <span class="number">0</span>]</span><br><span class="line">           a         b         c   d</span><br><span class="line">I1       NaN       NaN  <span class="number">0.999689</span> NaN</span><br><span class="line">I2  <span class="number">0.911130</span>       NaN       NaN NaN</span><br><span class="line">I3  <span class="number">0.849606</span>       NaN       NaN NaN</span><br><span class="line">I4  <span class="number">0.249986</span>       NaN  <span class="number">0.329416</span> NaN</span><br><span class="line">I5       NaN  <span class="number">0.430647</span>       NaN NaN</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>obj &gt; <span class="number">0</span></span><br><span class="line">        a      b      c      d</span><br><span class="line">I1  <span class="keyword">False</span>  <span class="keyword">False</span>   <span class="keyword">True</span>  <span class="keyword">False</span></span><br><span class="line">I2   <span class="keyword">True</span>  <span class="keyword">False</span>  <span class="keyword">False</span>  <span class="keyword">False</span></span><br><span class="line">I3   <span class="keyword">True</span>  <span class="keyword">False</span>  <span class="keyword">False</span>  <span class="keyword">False</span></span><br><span class="line">I4   <span class="keyword">True</span>  <span class="keyword">False</span>   <span class="keyword">True</span>  <span class="keyword">False</span></span><br><span class="line">I5  <span class="keyword">False</span>   <span class="keyword">True</span>  <span class="keyword">False</span>  <span class="keyword">False</span></span><br></pre></td></tr></table></figure><hr><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">这里是一段防爬虫文本，请读者忽略。</span></span><br><span class="line"><span class="string">本文原创首发于</span> <span class="string">CSDN，作者</span> <span class="string">TRHX。</span></span><br><span class="line"><span class="string">博客首页：https://itrhx.blog.csdn.net/</span></span><br><span class="line"><span class="string">本文链接：https://itrhx.blog.csdn.net/article/details/106698307</span></span><br><span class="line"><span class="string">未经授权，禁止转载！恶意转载，后果自负！尊重原创，远离剽窃！</span></span><br></pre></td></tr></table></figure><hr><h1 id="【3】索引器：loc-和-iloc"><a href="#【3】索引器：loc-和-iloc" class="headerlink" title="【3】索引器：loc 和 iloc"></a><font color="#FF0000">【3】索引器：loc 和 iloc</font></h1><p>loc 是标签索引、iloc 是位置索引，注意：在 Pandas1.0.0 之前还有 ix 方法（即可按标签也可按位置索引），在 Pandas1.0.0 之后已被移除。</p><h2 id="【3-1】loc-标签索引"><a href="#【3-1】loc-标签索引" class="headerlink" title="【3.1】loc 标签索引"></a><font color="#4876FF">【3.1】loc 标签索引</font></h2><p>loc 标签索引，即根据 index 和 columns 来选择数据。</p><h3 id="【3-1-1】Series-loc"><a href="#【3-1-1】Series-loc" class="headerlink" title="【3.1.1】Series.loc"></a><font color="#FFA500">【3.1.1】Series.loc</font></h3><p>在 Series 中，允许输入：</p><ul><li>单个标签，例如 <code>5</code> 或 <code>&#39;a&#39;</code>，（注意，<code>5</code> 是 index 的名称，而不是位置索引）；</li><li>标签列表或数组，例如 <code>[&#39;a&#39;, &#39;b&#39;, &#39;c&#39;]</code>；</li><li>带有标签的切片对象，例如 <code>&#39;a&#39;:&#39;f&#39;</code>。</li></ul><p>官方文档：<a href="https://pandas.pydata.org/docs/reference/api/pandas.Series.loc.html" target="_blank" rel="noopener">https://pandas.pydata.org/docs/reference/api/pandas.Series.loc.html</a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> pandas <span class="keyword">as</span> np</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>obj = pd.Series([<span class="number">1</span>, <span class="number">5</span>, <span class="number">-8</span>, <span class="number">2</span>], index=[<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>, <span class="string">'d'</span>])</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>obj</span><br><span class="line">a    <span class="number">1</span></span><br><span class="line">b    <span class="number">5</span></span><br><span class="line">c   <span class="number">-8</span></span><br><span class="line">d    <span class="number">2</span></span><br><span class="line">dtype: int64</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>obj.loc[<span class="string">'a'</span>]</span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>obj.loc[<span class="string">'a'</span>:<span class="string">'c'</span>]</span><br><span class="line">a    <span class="number">1</span></span><br><span class="line">b    <span class="number">5</span></span><br><span class="line">c   <span class="number">-8</span></span><br><span class="line">dtype: int64</span><br><span class="line">&gt;&gt;&gt;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>obj.loc[[<span class="string">'a'</span>, <span class="string">'d'</span>]]</span><br><span class="line">a    <span class="number">1</span></span><br><span class="line">d    <span class="number">2</span></span><br><span class="line">dtype: int64</span><br></pre></td></tr></table></figure><h3 id="【3-1-2】DataFrame-loc"><a href="#【3-1-2】DataFrame-loc" class="headerlink" title="【3.1.2】DataFrame.loc"></a><font color="#FFA500">【3.1.2】DataFrame.loc</font></h3><p>在 DataFrame 中，第一个参数索引<font color="#FF0000"><strong>行</strong></font>，第二个参数是索引<font color="#FF0000"><strong>列</strong></font>，允许输入的格式和 Series 大同小异。</p><p>官方文档：<a href="https://pandas.pydata.org/docs/reference/api/pandas.DataFrame.loc.html" target="_blank" rel="noopener">https://pandas.pydata.org/docs/reference/api/pandas.DataFrame.loc.html</a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>obj = pd.DataFrame([[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>], [<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>], [<span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>]], index=[<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>], columns=[<span class="string">'A'</span>, <span class="string">'B'</span>, <span class="string">'C'</span>])</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>obj</span><br><span class="line">   A  B  C</span><br><span class="line">a  <span class="number">1</span>  <span class="number">2</span>  <span class="number">3</span></span><br><span class="line">b  <span class="number">4</span>  <span class="number">5</span>  <span class="number">6</span></span><br><span class="line">c  <span class="number">7</span>  <span class="number">8</span>  <span class="number">9</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>obj.loc[<span class="string">'a'</span>]</span><br><span class="line">A    <span class="number">1</span></span><br><span class="line">B    <span class="number">2</span></span><br><span class="line">C    <span class="number">3</span></span><br><span class="line">Name: a, dtype: int64</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>obj.loc[<span class="string">'a'</span>:<span class="string">'c'</span>]</span><br><span class="line">   A  B  C</span><br><span class="line">a  <span class="number">1</span>  <span class="number">2</span>  <span class="number">3</span></span><br><span class="line">b  <span class="number">4</span>  <span class="number">5</span>  <span class="number">6</span></span><br><span class="line">c  <span class="number">7</span>  <span class="number">8</span>  <span class="number">9</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>obj.loc[[<span class="string">'a'</span>, <span class="string">'c'</span>]]</span><br><span class="line">   A  B  C</span><br><span class="line">a  <span class="number">1</span>  <span class="number">2</span>  <span class="number">3</span></span><br><span class="line">c  <span class="number">7</span>  <span class="number">8</span>  <span class="number">9</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>obj.loc[<span class="string">'b'</span>, <span class="string">'B'</span>]</span><br><span class="line"><span class="number">5</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>obj.loc[<span class="string">'b'</span>, <span class="string">'A'</span>:<span class="string">'C'</span>]</span><br><span class="line">A    <span class="number">4</span></span><br><span class="line">B    <span class="number">5</span></span><br><span class="line">C    <span class="number">6</span></span><br><span class="line">Name: b, dtype: int64</span><br></pre></td></tr></table></figure><h2 id="【3-2】iloc-位置索引"><a href="#【3-2】iloc-位置索引" class="headerlink" title="【3.2】iloc 位置索引"></a><font color="#4876FF">【3.2】iloc 位置索引</font></h2><p>作用和 loc 一样，不过是基于索引的编号来索引，即根据 index 和 columns 的位置编号来选择数据。</p><h3 id="【3-2-1】Series-iloc"><a href="#【3-2-1】Series-iloc" class="headerlink" title="【3.2.1】Series.iloc"></a><font color="#FFA500">【3.2.1】Series.iloc</font></h3><p>官方文档：<a href="https://pandas.pydata.org/docs/reference/api/pandas.Series.iloc.html" target="_blank" rel="noopener">https://pandas.pydata.org/docs/reference/api/pandas.Series.iloc.html</a></p><p>在 Series 中，允许输入：</p><ul><li>整数，例如 <code>5</code>；</li><li>整数列表或数组，例如 <code>[4, 3, 0]</code>；</li><li>具有整数的切片对象，例如 <code>1:7</code>。</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> pandas <span class="keyword">as</span> np</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>obj = pd.Series([<span class="number">1</span>, <span class="number">5</span>, <span class="number">-8</span>, <span class="number">2</span>], index=[<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>, <span class="string">'d'</span>])</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>obj</span><br><span class="line">a    <span class="number">1</span></span><br><span class="line">b    <span class="number">5</span></span><br><span class="line">c   <span class="number">-8</span></span><br><span class="line">d    <span class="number">2</span></span><br><span class="line">dtype: int64</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>obj.iloc[<span class="number">1</span>]</span><br><span class="line"><span class="number">5</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>obj.iloc[<span class="number">0</span>:<span class="number">2</span>]</span><br><span class="line">a    <span class="number">1</span></span><br><span class="line">b    <span class="number">5</span></span><br><span class="line">dtype: int64</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>obj.iloc[[<span class="number">0</span>, <span class="number">1</span>, <span class="number">3</span>]]</span><br><span class="line">a    <span class="number">1</span></span><br><span class="line">b    <span class="number">5</span></span><br><span class="line">d    <span class="number">2</span></span><br><span class="line">dtype: int64</span><br></pre></td></tr></table></figure><h3 id="【3-2-2】DataFrame-iloc"><a href="#【3-2-2】DataFrame-iloc" class="headerlink" title="【3.2.2】DataFrame.iloc"></a><font color="#FFA500">【3.2.2】DataFrame.iloc</font></h3><p>官方文档：<a href="https://pandas.pydata.org/docs/reference/api/pandas.DataFrame.iloc.html" target="_blank" rel="noopener">https://pandas.pydata.org/docs/reference/api/pandas.DataFrame.iloc.html</a></p><p>在 DataFrame 中，第一个参数索引<font color="#FF0000"><strong>行</strong></font>，第二个参数是索引<font color="#FF0000"><strong>列</strong></font>，允许输入的格式和 Series 大同小异：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>obj = pd.DataFrame([[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>], [<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>], [<span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>]], index=[<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>], columns=[<span class="string">'A'</span>, <span class="string">'B'</span>, <span class="string">'C'</span>])</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>obj</span><br><span class="line">   A  B  C</span><br><span class="line">a  <span class="number">1</span>  <span class="number">2</span>  <span class="number">3</span></span><br><span class="line">b  <span class="number">4</span>  <span class="number">5</span>  <span class="number">6</span></span><br><span class="line">c  <span class="number">7</span>  <span class="number">8</span>  <span class="number">9</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>obj.iloc[<span class="number">1</span>]</span><br><span class="line">A    <span class="number">4</span></span><br><span class="line">B    <span class="number">5</span></span><br><span class="line">C    <span class="number">6</span></span><br><span class="line">Name: b, dtype: int64</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>obj.iloc[<span class="number">0</span>:<span class="number">2</span>]</span><br><span class="line">   A  B  C</span><br><span class="line">a  <span class="number">1</span>  <span class="number">2</span>  <span class="number">3</span></span><br><span class="line">b  <span class="number">4</span>  <span class="number">5</span>  <span class="number">6</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>obj.iloc[[<span class="number">0</span>, <span class="number">2</span>]]</span><br><span class="line">   A  B  C</span><br><span class="line">a  <span class="number">1</span>  <span class="number">2</span>  <span class="number">3</span></span><br><span class="line">c  <span class="number">7</span>  <span class="number">8</span>  <span class="number">9</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>obj.iloc[<span class="number">1</span>, <span class="number">2</span>]</span><br><span class="line"><span class="number">6</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>obj.iloc[<span class="number">1</span>, <span class="number">0</span>:<span class="number">2</span>]</span><br><span class="line">A    <span class="number">4</span></span><br><span class="line">B    <span class="number">5</span></span><br><span class="line">Name: b, dtype: int64</span><br></pre></td></tr></table></figure><h1 id="【4】Pandas-重新索引"><a href="#【4】Pandas-重新索引" class="headerlink" title="【4】Pandas 重新索引"></a><font color="#FF0000">【4】Pandas 重新索引</font></h1><p>Pandas 对象的一个重要方法是 reindex，其作用是创建一个新对象，它的数据符合新的索引。以 <code>DataFrame.reindex</code> 为例（Series 类似），基本语法如下：</p><p><code>DataFrame.reindex(self, labels=None, index=None, columns=None, axis=None, method=None, copy=True, level=None, fill_value=nan, limit=None, tolerance=None)</code></p><p>部分参数描述如下：（完整参数解释参见<a href="https://pandas.pydata.org/docs/reference/api/pandas.DataFrame.reindex.html" target="_blank" rel="noopener">官方文档</a>）</p><table><thead><tr><th>参数</th><th>描述</th></tr></thead><tbody><tr><td>index</td><td>用作索引的新序列，既可以是 index 实例，也可以是其他序列型的 Python 数据结构</td></tr><tr><td>method</td><td>插值（填充）方式，取值如下：<br><code>None</code>：不填补空白；<br><code>pad / ffill</code>：将上一个有效的观测值向前传播到下一个有效的观测值；<br><code>backfill / bfill</code>：使用下一个有效观察值来填补空白；<br><code>nearest</code>：使用最近的有效观测值来填补空白。</td></tr><tr><td>fill_value</td><td>在重新索引的过程中，需要引入缺失值时使用的替代值</td></tr><tr><td>limit</td><td>前向或后向填充时的最大填充量</td></tr><tr><td>tolerance</td><td>向前或向后填充时，填充不准确匹配项的最大间距（绝对值距离）</td></tr><tr><td>level</td><td>在 Multilndex 的指定级别上匹配简单索引，否则选其子集</td></tr><tr><td>copy</td><td>默认为 True，无论如何都复制；如果为 False，则新旧相等就不复制</td></tr></tbody></table><p>reindex 将会根据新索引进行重排。如果某个索引值当前不存在，就引入缺失值：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>obj = pd.Series([<span class="number">4.5</span>, <span class="number">7.2</span>, <span class="number">-5.3</span>, <span class="number">3.6</span>], index=[<span class="string">'d'</span>, <span class="string">'b'</span>, <span class="string">'a'</span>, <span class="string">'c'</span>])</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>obj</span><br><span class="line">d    <span class="number">4.5</span></span><br><span class="line">b    <span class="number">7.2</span></span><br><span class="line">a   <span class="number">-5.3</span></span><br><span class="line">c    <span class="number">3.6</span></span><br><span class="line">dtype: float64</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>obj2 = obj.reindex([<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>, <span class="string">'d'</span>, <span class="string">'e'</span>])</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>obj2</span><br><span class="line">a   <span class="number">-5.3</span></span><br><span class="line">b    <span class="number">7.2</span></span><br><span class="line">c    <span class="number">3.6</span></span><br><span class="line">d    <span class="number">4.5</span></span><br><span class="line">e    NaN</span><br><span class="line">dtype: float64</span><br></pre></td></tr></table></figure><p>对于时间序列这样的有序数据，重新索引时可能需要做一些插值处理。method 选项即可达到此目的，例如，使用 ffill 可以实现前向值填充：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>obj = pd.Series([<span class="string">'blue'</span>, <span class="string">'purple'</span>, <span class="string">'yellow'</span>], index=[<span class="number">0</span>, <span class="number">2</span>, <span class="number">4</span>])</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>obj</span><br><span class="line"><span class="number">0</span>      blue</span><br><span class="line"><span class="number">2</span>    purple</span><br><span class="line"><span class="number">4</span>    yellow</span><br><span class="line">dtype: object</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>obj2 = obj.reindex(range(<span class="number">6</span>), method=<span class="string">'ffill'</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>obj2</span><br><span class="line"><span class="number">0</span>      blue</span><br><span class="line"><span class="number">1</span>      blue</span><br><span class="line"><span class="number">2</span>    purple</span><br><span class="line"><span class="number">3</span>    purple</span><br><span class="line"><span class="number">4</span>    yellow</span><br><span class="line"><span class="number">5</span>    yellow</span><br><span class="line">dtype: object</span><br></pre></td></tr></table></figure><p>借助 DataFrame，reindex可以修改（行）索引和列。只传递一个序列时，会重新索引结果的行：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>obj = pd.DataFrame(np.arange(<span class="number">9</span>).reshape((<span class="number">3</span>, <span class="number">3</span>)), index=[<span class="string">'a'</span>, <span class="string">'c'</span>, <span class="string">'d'</span>], columns=[<span class="string">'Ohio'</span>, <span class="string">'Texas'</span>, <span class="string">'California'</span>])</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>obj</span><br><span class="line">   Ohio  Texas  California</span><br><span class="line">a     <span class="number">0</span>      <span class="number">1</span>           <span class="number">2</span></span><br><span class="line">c     <span class="number">3</span>      <span class="number">4</span>           <span class="number">5</span></span><br><span class="line">d     <span class="number">6</span>      <span class="number">7</span>           <span class="number">8</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>obj2 = obj.reindex([<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>, <span class="string">'d'</span>])</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>obj2</span><br><span class="line">   Ohio  Texas  California</span><br><span class="line">a   <span class="number">0.0</span>    <span class="number">1.0</span>         <span class="number">2.0</span></span><br><span class="line">b   NaN    NaN         NaN</span><br><span class="line">c   <span class="number">3.0</span>    <span class="number">4.0</span>         <span class="number">5.0</span></span><br><span class="line">d   <span class="number">6.0</span>    <span class="number">7.0</span>         <span class="number">8.0</span></span><br></pre></td></tr></table></figure><p>列可以用 columns 关键字重新索引：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>obj = pd.DataFrame(np.arange(<span class="number">9</span>).reshape((<span class="number">3</span>, <span class="number">3</span>)), index=[<span class="string">'a'</span>, <span class="string">'c'</span>, <span class="string">'d'</span>], columns=[<span class="string">'Ohio'</span>, <span class="string">'Texas'</span>, <span class="string">'California'</span>])</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>obj</span><br><span class="line">   Ohio  Texas  California</span><br><span class="line">a     <span class="number">0</span>      <span class="number">1</span>           <span class="number">2</span></span><br><span class="line">c     <span class="number">3</span>      <span class="number">4</span>           <span class="number">5</span></span><br><span class="line">d     <span class="number">6</span>      <span class="number">7</span>           <span class="number">8</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>states = [<span class="string">'Texas'</span>, <span class="string">'Utah'</span>, <span class="string">'California'</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>obj.reindex(columns=states)</span><br><span class="line">   Texas  Utah  California</span><br><span class="line">a      <span class="number">1</span>   NaN           <span class="number">2</span></span><br><span class="line">c      <span class="number">4</span>   NaN           <span class="number">5</span></span><br><span class="line">d      <span class="number">7</span>   NaN           <span class="number">8</span></span><br></pre></td></tr></table></figure><hr><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">这里是一段防爬虫文本，请读者忽略。</span></span><br><span class="line"><span class="string">本文原创首发于</span> <span class="string">CSDN，作者</span> <span class="string">TRHX。</span></span><br><span class="line"><span class="string">博客首页：https://itrhx.blog.csdn.net/</span></span><br><span class="line"><span class="string">本文链接：https://itrhx.blog.csdn.net/article/details/106698307</span></span><br><span class="line"><span class="string">未经授权，禁止转载！恶意转载，后果自负！尊重原创，远离剽窃！</span></span><br></pre></td></tr></table></figure><hr>]]></content>
    
    <summary type="html">
    
      Python 数据分析三剑客之 Pandas（二）：Index 索引对象以及各种索引操作。
    
    </summary>
    
      <category term="Python 数据分析" scheme="https://www.itrhx.com/categories/Python-%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/"/>
    
      <category term="Pandas" scheme="https://www.itrhx.com/categories/Python-%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/Pandas/"/>
    
    
      <category term="索引" scheme="https://www.itrhx.com/tags/%E7%B4%A2%E5%BC%95/"/>
    
      <category term="Pandas" scheme="https://www.itrhx.com/tags/Pandas/"/>
    
      <category term="Index" scheme="https://www.itrhx.com/tags/Index/"/>
    
  </entry>
  
  <entry>
    <title>Python 数据分析三剑客之 Pandas（一）：认识 Pandas 及其 Series、DataFrame 对象</title>
    <link href="https://www.itrhx.com/2020/06/11/A79-Pandas-01/"/>
    <id>https://www.itrhx.com/2020/06/11/A79-Pandas-01/</id>
    <published>2020-06-11T12:46:27.848Z</published>
    <updated>2020-07-06T13:44:05.348Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>Pandas 系列文章：</p><ul><li><a href="https://www.itrhx.com/2020/06/11/A79-Pandas-01/">Python 数据分析三剑客之 Pandas（一）：认识 Pandas 及其 Series、DataFrame 对象</a></li><li><a href="https://www.itrhx.com/2020/06/13/A80-Pandas-02/">Python 数据分析三剑客之 Pandas（二）：Index 索引对象以及各种索引操作</a></li><li><a href="https://www.itrhx.com/2020/06/14/A81-Pandas-03/">Python 数据分析三剑客之 Pandas（三）：算术运算与缺失值的处理</a></li><li><a href="https://www.itrhx.com/2020/06/15/A82-Pandas-04/">Python 数据分析三剑客之 Pandas（四）：函数应用、映射、排序和层级索引</a></li><li><a href="https://www.itrhx.com/2020/06/16/A83-Pandas-05/">Python 数据分析三剑客之 Pandas（五）：统计计算与统计描述</a></li><li><a href="https://www.itrhx.com/2020/06/17/A84-Pandas-06/">Python 数据分析三剑客之 Pandas（六）：GroupBy 数据分裂、应用与合并</a></li><li><a href="https://www.itrhx.com/2020/06/21/A85-Pandas-07/">Python 数据分析三剑客之 Pandas（七）：合并数据集</a></li><li><a href="https://www.itrhx.com/2020/06/22/A86-Pandas-08/">Python 数据分析三剑客之 Pandas（八）：数据重塑、重复数据处理与数据替换</a></li><li><a href="https://www.itrhx.com/2020/06/25/A87-Pandas-09/">Python 数据分析三剑客之 Pandas（九）：时间序列</a></li><li><a href="https://www.itrhx.com/2020/06/26/A88-Pandas-10/">Python 数据分析三剑客之 Pandas（十）：数据读写</a></li></ul><hr><p>专栏：</p><p>【<a href="https://www.itrhx.com/categories/Python-%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/NumPy/">NumPy 专栏</a>】【<a href="https://www.itrhx.com/categories/Python-%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/Pandas/">Pandas 专栏</a>】【<a href="https://www.itrhx.com/categories/Python-%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/Matplotlib/">Matplotlib 专栏</a>】</p><p>推荐学习资料与网站：</p><p>【<a href="https://www.numpy.org.cn/" target="_blank" rel="noopener">NumPy 中文网</a>】【<a href="https://www.pypandas.cn/" target="_blank" rel="noopener">Pandas 中文网</a>】【<a href="https://www.matplotlib.org.cn/" target="_blank" rel="noopener">Matplotlib 中文网</a>】【<a href="https://github.com/TRHX/Python-quick-reference-table" target="_blank" rel="noopener">NumPy、Matplotlib、Pandas 速查表</a>】</p><hr><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">这里是一段防爬虫文本，请读者忽略。</span></span><br><span class="line"><span class="string">本文原创首发于</span> <span class="string">CSDN，作者</span> <span class="string">TRHX。</span></span><br><span class="line"><span class="string">博客首页：https://itrhx.blog.csdn.net/</span></span><br><span class="line"><span class="string">本文链接：https://itrhx.blog.csdn.net/article/details/106676693</span></span><br><span class="line"><span class="string">未经授权，禁止转载！恶意转载，后果自负！尊重原创，远离剽窃！</span></span><br></pre></td></tr></table></figure><hr><h2 id="【01x00】了解-Pandas"><a href="#【01x00】了解-Pandas" class="headerlink" title="【01x00】了解 Pandas"></a><font color="#FF0000">【01x00】了解 Pandas</font></h2><p><a href="https://pandas.pydata.org/" target="_blank" rel="noopener">Pandas</a> 是 <a href="https://www.python.org/" target="_blank" rel="noopener">Python</a> 的一个数据分析包，是基于 <a href="https://numpy.org/" target="_blank" rel="noopener">NumPy</a> 构建的，最初由 <a href="https://www.aqr.com/" target="_blank" rel="noopener">AQR Capital Management</a> 于 2008 年 4 月开发，并于 2009 年底开源出来，目前由专注于 <a href="https://www.python.org/" target="_blank" rel="noopener">Python</a> 数据包开发的 <a href="https://pydata.org/" target="_blank" rel="noopener">PyData</a> 开发团队继续开发和维护，属于 <a href="https://pydata.org/" target="_blank" rel="noopener">PyData</a> 项目的一部分。</p><p><a href="https://pandas.pydata.org/" target="_blank" rel="noopener">Pandas</a> 最初被作为金融数据分析工具而开发出来，因此，<a href="https://pandas.pydata.org/" target="_blank" rel="noopener">Pandas</a> 为时间序列分析提供了很好的支持。<font color="#FFA500"><strong>Pandas 的名称来自于面板数据（panel data）和 Python 数据分析（data analysis）</strong></font>。panel data 是经济学中关于多维数据集的一个术语，在 <a href="https://pandas.pydata.org/" target="_blank" rel="noopener">Pandas</a> 中也提供了 panel 的数据类型。</p><p><a href="https://pandas.pydata.org/" target="_blank" rel="noopener">Pandas</a> 经常和其它工具一同使用，如数值计算工具 <a href="https://numpy.org/" target="_blank" rel="noopener">NumPy</a> 和 <a href="https://www.scipy.org/" target="_blank" rel="noopener">SciPy</a>，分析库 <a href="https://www.statsmodels.org/" target="_blank" rel="noopener">statsmodels</a> 和 <a href="https://scikit-learn.org/" target="_blank" rel="noopener">scikit-learn</a>，数据可视化库 <a href="https://matplotlib.org/" target="_blank" rel="noopener">Matplotlib</a> 等，虽然 <a href="https://pandas.pydata.org/" target="_blank" rel="noopener">Pandas</a> 采用了大量的 NumPy 编码风格，但二者最大的不同是 <font color="#FFA500"><strong>Pandas 是专门为处理表格和混杂数据设计的。而 NumPy 更适合处理统一的数值数组数据。</strong></font></p><hr><p>【以下对 Pandas 的解释翻译自官方文档：<a href="https://pandas.pydata.org/docs/getting_started/overview.html#package-overview" target="_blank" rel="noopener">https://pandas.pydata.org/docs/getting_started/overview.html#package-overview</a>】</p><hr><p>Pandas 是 Python 的核心数据分析支持库，提供了快速、灵活、明确的数据结构，旨在简单、直观地处理关系型、标记型数据。Pandas 的目标是成为 Python 数据分析实践与实战的必备高级工具，其长远目标是成为<strong>最强大、最灵活、可以支持任何语言的开源数据分析工具</strong>。经过多年不懈的努力，Pandas 离这个目标已经越来越近了。</p><p>Pandas 适用于处理以下类型的数据：</p><ul><li>与 SQL 或 Excel 表类似的，含异构列的表格数据;</li><li>有序和无序（非固定频率）的时间序列数据;</li><li>带行列标签的矩阵数据，包括同构或异构型数据;</li><li>任意其它形式的观测、统计数据集, 数据转入 Pandas 数据结构时不必事先标记。</li></ul><p>Pandas 的主要数据结构是 <a href="https://pandas.pydata.org/docs/reference/api/pandas.Series.html#pandas.Series" target="_blank" rel="noopener">Series</a>（一维数据）与 <a href="https://pandas.pydata.org/docs/reference/api/pandas.DataFrame.html#pandas.DataFrame" target="_blank" rel="noopener">DataFrame</a>（二维数据），这两种数据结构足以处理- 金融、统计、社会科学、工程等领域里的大多数典型用例。对于 R 语言用户，<a href="https://pandas.pydata.org/docs/reference/api/pandas.DataFrame.html#pandas.DataFrame" target="_blank" rel="noopener">DataFrame</a> 提供了比 R 语言 <code>data.frame</code> 更丰富的功能。Pandas 基于 <a href="https://www.numpy.org/" target="_blank" rel="noopener">NumPy</a> 开发，可以与其它第三方科学计算支持库完美集成。</p><p>Pandas 就像一把万能瑞士军刀，下面仅列出了它的部分优势 ：</p><ul><li>处理浮点与非浮点数据里的<strong>缺失数据</strong>，表示为 NaN；</li><li>大小可变：<strong>插入或删除</strong> DataFrame 等多维对象的列；</li><li>自动、显式<strong>数据对齐</strong>：显式地将对象与一组标签对齐，也可以忽略标签，在 Series、DataFrame 计算时自动与数据对齐；</li><li>强大、灵活的<strong>分组</strong>（group by）功能：<strong>拆分-应用-组合</strong>数据集，聚合、转换数据；</li><li>把 Python 和 NumPy 数据结构里不规则、不同索引的数据<strong>轻松地转换</strong>为 DataFrame 对象；</li><li>基于智能标签，对大型数据集进行<strong>切片、花式索引、子集分解</strong>等操作；</li><li>直观地<strong>合并</strong>和<strong>连接</strong>数据集；</li><li>灵活地<strong>重塑</strong>和<strong>旋转</strong>数据集；</li><li>轴支持<strong>分层</strong>标签（每个刻度可能有多个标签）；</li><li>强大的 IO 工具，读取平面文件（CSV 等支持分隔符的文件）、Excel 文件、数据库等来源的数据，以及从超快 <strong>HDF5 格式</strong>保存 / 加载数据；</li><li><strong>时间序列</strong>：支持日期范围生成、频率转换、移动窗口统计、移动窗口线性回归、日期位移等时间序列功能。</li></ul><p>这些功能主要是为了解决其它编程语言、科研环境的痛点。处理数据一般分为几个阶段：数据整理与清洗、数据分析与建模、数据可视化与制表，Pandas 是处理数据的理想工具。</p><p>其它说明：</p><ul><li>Pandas 速度很快。Pandas 的很多底层算法都用 <a href="https://cython.org/" target="_blank" rel="noopener">Cython</a> 优化过。然而，为了保持通用性，必然要牺牲一些性能，如果专注某一功能，完全可以开发出比 Pandas 更快的专用工具。</li><li>Pandas 是 <a href="https://www.statsmodels.org/stable/index.html" target="_blank" rel="noopener">statsmodels</a> 的依赖项，因此，Pandas 也是 Python 中统计计算生态系统的重要组成部分。</li><li>Pandas 已广泛应用于金融领域。</li></ul><h2 id="【02x00】Pandas-数据结构"><a href="#【02x00】Pandas-数据结构" class="headerlink" title="【02x00】Pandas 数据结构"></a><font color="#FF0000">【02x00】Pandas 数据结构</font></h2><p>Pandas 的主要数据结构是 <a href="https://pandas.pydata.org/docs/reference/api/pandas.Series.html#pandas.Series" target="_blank" rel="noopener">Series</a>（带标签的一维同构数组）与 <a href="https://pandas.pydata.org/docs/reference/api/pandas.DataFrame.html#pandas.DataFrame" target="_blank" rel="noopener">DataFrame</a>（带标签的，大小可变的二维异构表格）。</p><p>Pandas 数据结构就像是低维数据的容器。比如，DataFrame 是 Series 的容器，Series 则是标量的容器。使用这种方式，可以在容器中以字典的形式插入或删除对象。</p><p>此外，通用 API 函数的默认操作要顾及时间序列与截面数据集的方向。当使用 Ndarray 存储二维或三维数据时，编写函数要注意数据集的方向，这对用户来说是一种负担；如果不考虑 C 或 Fortran 中连续性对性能的影响，一般情况下，不同的轴在程序里其实没有什么区别。Pandas 里，轴的概念主要是为了给数据赋予更直观的语义，即用更恰当的方式表示数据集的方向。这样做可以让用户编写数据转换函数时，少费点脑子。</p><p>处理 DataFrame 等表格数据时，对比 Numpy，<strong>index</strong>（行）或 <strong>columns</strong>（列）比 <strong>axis 0</strong> 和 <strong>axis 1</strong> 更直观。用这种方式迭代 DataFrame 的列，代码更易读易懂：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> col <span class="keyword">in</span> df.columns:</span><br><span class="line">    series = df[col]</span><br><span class="line">    <span class="comment"># do something with series</span></span><br></pre></td></tr></table></figure><h2 id="【03x00】Series-对象"><a href="#【03x00】Series-对象" class="headerlink" title="【03x00】Series 对象"></a><font color="#FF0000">【03x00】Series 对象</font></h2><p>Series 是带标签的一维数组，可存储整数、浮点数、字符串、Python 对象等类型的数据。轴标签统称为索引。调用 pandas.Series 函数即可创建 Series，基本语法如下：</p><p><code>pandas.Series(data=None[, index=None, dtype=None, name=None, copy=False, fastpath=False])</code></p><table><thead><tr><th>参数</th><th>描述</th></tr></thead><tbody><tr><td>data</td><td>数组类型，可迭代的，字典或标量值，存储在序列中的数据</td></tr><tr><td>index</td><td>索引（数据标签），值必须是可哈希的，并且具有与数据相同的长度，<br>允许使用非唯一索引值。如果未提供，将默认为RangeIndex（0，1，2，…，n）</td></tr><tr><td>dtype</td><td>输出系列的数据类型。可选项，如果未指定，则将从数据中推断，具体参考官网 <a href="https://pandas.pydata.org/docs/getting_started/basics.html#dtypes" target="_blank" rel="noopener">dtypes</a> 介绍</td></tr><tr><td>name</td><td>str 类型，可选项，给 Series 命名</td></tr><tr><td>copy</td><td>bool 类型，可选项，默认 False，是否复制输入数据</td></tr></tbody></table><p><img src="https://cdn.jsdelivr.net/gh/TRHX/ImageHosting/ITRHX-PIC/A79/01.png" alt="01"></p><h3 id="【03x01】通过-list-构建-Series"><a href="#【03x01】通过-list-构建-Series" class="headerlink" title="【03x01】通过 list 构建 Series"></a><font color="#4876FF">【03x01】通过 list 构建 Series</font></h3><p>一般情况下我们只会用到 data 和 index 参数，可以通过 list（列表） 构建 Series，示例如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>obj = pd.Series([<span class="number">1</span>, <span class="number">5</span>, <span class="number">-8</span>, <span class="number">2</span>])</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>obj</span><br><span class="line"><span class="number">0</span>    <span class="number">1</span></span><br><span class="line"><span class="number">1</span>    <span class="number">5</span></span><br><span class="line"><span class="number">2</span>   <span class="number">-8</span></span><br><span class="line"><span class="number">3</span>    <span class="number">2</span></span><br><span class="line">dtype: int64</span><br></pre></td></tr></table></figure><p>由于我们没有为数据指定索引，于是会自动创建一个 0 到 N-1（N 为数据的长度）的整数型索引，左边一列是自动创建的索引（index），右边一列是数据（data）。</p><p>此外，还可以自定义索引（index）：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>obj = pd.Series([<span class="number">1</span>, <span class="number">5</span>, <span class="number">-8</span>, <span class="number">2</span>], index=[<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>, <span class="string">'d'</span>])</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>obj</span><br><span class="line">a    <span class="number">1</span></span><br><span class="line">b    <span class="number">5</span></span><br><span class="line">c   <span class="number">-8</span></span><br><span class="line">d    <span class="number">2</span></span><br><span class="line">dtype: int64</span><br></pre></td></tr></table></figure><p>索引（index）也可以通过赋值的方式就地修改：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>obj = pd.Series([<span class="number">1</span>, <span class="number">5</span>, <span class="number">-8</span>, <span class="number">2</span>], index=[<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>, <span class="string">'d'</span>])</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>obj</span><br><span class="line">a    <span class="number">1</span></span><br><span class="line">b    <span class="number">5</span></span><br><span class="line">c   <span class="number">-8</span></span><br><span class="line">d    <span class="number">2</span></span><br><span class="line">dtype: int64</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>obj.index = [<span class="string">'Bob'</span>, <span class="string">'Steve'</span>, <span class="string">'Jeff'</span>, <span class="string">'Ryan'</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>obj</span><br><span class="line">Bob      <span class="number">1</span></span><br><span class="line">Steve    <span class="number">5</span></span><br><span class="line">Jeff    <span class="number">-8</span></span><br><span class="line">Ryan     <span class="number">2</span></span><br><span class="line">dtype: int64</span><br></pre></td></tr></table></figure><h3 id="【03x02】通过-dict-构建-Series"><a href="#【03x02】通过-dict-构建-Series" class="headerlink" title="【03x02】通过 dict 构建 Series"></a><font color="#4876FF">【03x02】通过 dict 构建 Series</font></h3><p>通过 字典（dict） 构建 Series，字典的键（key）会作为索引（index），字典的值（value）会作为数据（data），示例如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>data = &#123;<span class="string">'Beijing'</span>: <span class="number">21530000</span>, <span class="string">'Shanghai'</span>: <span class="number">24280000</span>, <span class="string">'Wuhan'</span>: <span class="number">11210000</span>, <span class="string">'Zhejiang'</span>: <span class="number">58500000</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>obj = pd.Series(data)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>obj</span><br><span class="line">Beijing     <span class="number">21530000</span></span><br><span class="line">Shanghai    <span class="number">24280000</span></span><br><span class="line">Wuhan       <span class="number">11210000</span></span><br><span class="line">Zhejiang    <span class="number">58500000</span></span><br><span class="line">dtype: int64</span><br></pre></td></tr></table></figure><p>如果你想按照某个特定的顺序输出结果，可以传入排好序的字典的键以改变顺序：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>data = &#123;<span class="string">'Beijing'</span>: <span class="number">21530000</span>, <span class="string">'Shanghai'</span>: <span class="number">24280000</span>, <span class="string">'Wuhan'</span>: <span class="number">11210000</span>, <span class="string">'Zhejiang'</span>: <span class="number">58500000</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>cities = [<span class="string">'Guangzhou'</span>, <span class="string">'Wuhan'</span>, <span class="string">'Zhejiang'</span>, <span class="string">'Shanghai'</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>obj = pd.Series(data, index=cities)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>obj</span><br><span class="line">Guangzhou           NaN</span><br><span class="line">Wuhan        <span class="number">11210000.0</span></span><br><span class="line">Zhejiang     <span class="number">58500000.0</span></span><br><span class="line">Shanghai     <span class="number">24280000.0</span></span><br><span class="line">dtype: float64</span><br></pre></td></tr></table></figure><font color="#FF0000"><strong>注意：data 为字典，且未设置 index 参数时：</strong></font><ul><li><font color="#FF0000"><strong>如果 Python &gt;= 3.6 且 Pandas &gt;= 0.23，Series 按字典的插入顺序排序索引。</strong></font></li><li><font color="#FF0000"><strong>如果 Python &lt; 3.6 或 Pandas &lt; 0.23，Series 按字母顺序排序索引。</strong></font></li></ul><h3 id="【03x03】获取其数据和索引"><a href="#【03x03】获取其数据和索引" class="headerlink" title="【03x03】获取其数据和索引"></a><font color="#4876FF">【03x03】获取其数据和索引</font></h3><p>我们可以通过 Series 的 values 和 index 属性获取其数据和索引对象：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>obj = pd.Series([<span class="number">1</span>, <span class="number">5</span>, <span class="number">-8</span>, <span class="number">2</span>], index=[<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>, <span class="string">'d'</span>])</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>obj.values</span><br><span class="line">array([ <span class="number">1</span>,  <span class="number">5</span>, <span class="number">-8</span>,  <span class="number">2</span>], dtype=int64)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>obj.index</span><br><span class="line">Index([<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>, <span class="string">'d'</span>], dtype=<span class="string">'object'</span>)</span><br></pre></td></tr></table></figure><h3 id="【03x04】通过索引获取数据"><a href="#【03x04】通过索引获取数据" class="headerlink" title="【03x04】通过索引获取数据"></a><font color="#4876FF">【03x04】通过索引获取数据</font></h3><p>与普通 NumPy 数组相比，Pandas 可以通过索引的方式选取 Series 中的单个或一组值，获取一组值时，传入的是一个列表，列表中的元素是索引值，另外还可以通过索引来修改其对应的值：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>obj = pd.Series([<span class="number">1</span>, <span class="number">5</span>, <span class="number">-8</span>, <span class="number">2</span>], index=[<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>, <span class="string">'d'</span>])</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>obj</span><br><span class="line">a    <span class="number">1</span></span><br><span class="line">b    <span class="number">5</span></span><br><span class="line">c   <span class="number">-8</span></span><br><span class="line">d    <span class="number">2</span></span><br><span class="line">dtype: int64</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>obj[<span class="string">'a'</span>]</span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>obj[<span class="string">'a'</span>] = <span class="number">3</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>obj[[<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>]]</span><br><span class="line">a    <span class="number">3</span></span><br><span class="line">b    <span class="number">5</span></span><br><span class="line">c   <span class="number">-8</span></span><br><span class="line">dtype: int64</span><br></pre></td></tr></table></figure><h3 id="【03x05】使用函数运算"><a href="#【03x05】使用函数运算" class="headerlink" title="【03x05】使用函数运算"></a><font color="#4876FF">【03x05】使用函数运算</font></h3><p>在 Pandas 中可以使用 NumPy 函数或类似 NumPy 的运算（如根据布尔型数组进行过滤、标量乘法、应用数学函数等）：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>obj = pd.Series([<span class="number">1</span>, <span class="number">5</span>, <span class="number">-8</span>, <span class="number">2</span>], index=[<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>, <span class="string">'d'</span>])</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>obj[obj &gt; <span class="number">0</span>]</span><br><span class="line">a    <span class="number">1</span></span><br><span class="line">b    <span class="number">5</span></span><br><span class="line">d    <span class="number">2</span></span><br><span class="line">dtype: int64</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>obj * <span class="number">2</span></span><br><span class="line">a     <span class="number">2</span></span><br><span class="line">b    <span class="number">10</span></span><br><span class="line">c   <span class="number">-16</span></span><br><span class="line">d     <span class="number">4</span></span><br><span class="line">dtype: int64</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>np.exp(obj)</span><br><span class="line">a      <span class="number">2.718282</span></span><br><span class="line">b    <span class="number">148.413159</span></span><br><span class="line">c      <span class="number">0.000335</span></span><br><span class="line">d      <span class="number">7.389056</span></span><br><span class="line">dtype: float64</span><br></pre></td></tr></table></figure><p>除了这些运算函数以外，还可以将 Series 看成是一个定长的有序字典，因为它是索引值到数据值的一个映射。它可以用在许多原本需要字典参数的函数中：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>obj = pd.Series([<span class="number">1</span>, <span class="number">5</span>, <span class="number">-8</span>, <span class="number">2</span>], index=[<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>, <span class="string">'d'</span>])</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">'a'</span> <span class="keyword">in</span> obj</span><br><span class="line"><span class="keyword">True</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">'e'</span> <span class="keyword">in</span> obj</span><br><span class="line"><span class="keyword">False</span></span><br></pre></td></tr></table></figure><p>和 NumPy 类似，Pandas 中也有 NaN（即非数字，not a number），在 Pandas 中，它用于表示缺失值，Pandas 的 isnull 和 notnull 函数可用于检测缺失数据：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>obj = pd.Series([np.NaN, <span class="number">5</span>, <span class="number">-8</span>, <span class="number">2</span>], index=[<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>, <span class="string">'d'</span>])</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>obj</span><br><span class="line">a    NaN</span><br><span class="line">b    <span class="number">5.0</span></span><br><span class="line">c   <span class="number">-8.0</span></span><br><span class="line">d    <span class="number">2.0</span></span><br><span class="line">dtype: float64</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>pd.isnull(obj)</span><br><span class="line">a     <span class="keyword">True</span></span><br><span class="line">b    <span class="keyword">False</span></span><br><span class="line">c    <span class="keyword">False</span></span><br><span class="line">d    <span class="keyword">False</span></span><br><span class="line">dtype: bool</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>pd.notnull(obj)</span><br><span class="line">a    <span class="keyword">False</span></span><br><span class="line">b     <span class="keyword">True</span></span><br><span class="line">c     <span class="keyword">True</span></span><br><span class="line">d     <span class="keyword">True</span></span><br><span class="line">dtype: bool</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>obj.isnull()</span><br><span class="line">a     <span class="keyword">True</span></span><br><span class="line">b    <span class="keyword">False</span></span><br><span class="line">c    <span class="keyword">False</span></span><br><span class="line">d    <span class="keyword">False</span></span><br><span class="line">dtype: bool</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>obj.notnull()</span><br><span class="line">a    <span class="keyword">False</span></span><br><span class="line">b     <span class="keyword">True</span></span><br><span class="line">c     <span class="keyword">True</span></span><br><span class="line">d     <span class="keyword">True</span></span><br><span class="line">dtype: bool</span><br></pre></td></tr></table></figure><h3 id="【03x06】name-属性"><a href="#【03x06】name-属性" class="headerlink" title="【03x06】name 属性"></a><font color="##4876FF">【03x06】name 属性</font></h3><p>可以在 <code>pandas.Series</code> 方法中为 Series 对象指定一个 name：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>data = &#123;<span class="string">'Beijing'</span>: <span class="number">21530000</span>, <span class="string">'Shanghai'</span>: <span class="number">24280000</span>, <span class="string">'Wuhan'</span>: <span class="number">11210000</span>, <span class="string">'Zhejiang'</span>: <span class="number">58500000</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>obj = pd.Series(data, name=<span class="string">'population'</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>obj</span><br><span class="line">Beijing     <span class="number">21530000</span></span><br><span class="line">Shanghai    <span class="number">24280000</span></span><br><span class="line">Wuhan       <span class="number">11210000</span></span><br><span class="line">Zhejiang    <span class="number">58500000</span></span><br><span class="line">Name: population, dtype: int64</span><br></pre></td></tr></table></figure><p>也可以通过 name 和 index.name 属性为 Series 对象和其索引指定 name：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>data = &#123;<span class="string">'Beijing'</span>: <span class="number">21530000</span>, <span class="string">'Shanghai'</span>: <span class="number">24280000</span>, <span class="string">'Wuhan'</span>: <span class="number">11210000</span>, <span class="string">'Zhejiang'</span>: <span class="number">58500000</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>obj = pd.Series(data)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>obj.name = <span class="string">'population'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>obj.index.name = <span class="string">'cities'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>obj</span><br><span class="line">cities</span><br><span class="line">Beijing     <span class="number">21530000</span></span><br><span class="line">Shanghai    <span class="number">24280000</span></span><br><span class="line">Wuhan       <span class="number">11210000</span></span><br><span class="line">Zhejiang    <span class="number">58500000</span></span><br><span class="line">Name: population, dtype: int64</span><br></pre></td></tr></table></figure><hr><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">这里是一段防爬虫文本，请读者忽略。</span></span><br><span class="line"><span class="string">本文原创首发于</span> <span class="string">CSDN，作者</span> <span class="string">TRHX。</span></span><br><span class="line"><span class="string">博客首页：https://itrhx.blog.csdn.net/</span></span><br><span class="line"><span class="string">本文链接：https://itrhx.blog.csdn.net/article/details/106676693</span></span><br><span class="line"><span class="string">未经授权，禁止转载！恶意转载，后果自负！尊重原创，远离剽窃！</span></span><br></pre></td></tr></table></figure><hr><h2 id="【04x00】DataFrame-对象"><a href="#【04x00】DataFrame-对象" class="headerlink" title="【04x00】DataFrame 对象"></a><font color="#FF0000">【04x00】DataFrame 对象</font></h2><p>DataFrame 是一个表格型的数据结构，它含有一组有序的列，每列可以是不同的值类型（数值、字符串、布尔值等）。DataFrame 既有行索引也有列索引，它可以被看做由 Series 组成的字典（共用同一个索引）。DataFrame 中的数据是以一个或多个二维块存放的（而不是列表、字典或别的一维数据结构）。</p><ul><li>类似多维数组/表格数据 (如Excel、R 语言中的 data.frame)；</li><li>每列数据可以是不同的类型；</li><li>索引包括列索引和行索引</li></ul><p>基本语法如下：</p><p><code>pandas.DataFrame(data=None, index: Optional[Collection] = None, columns: Optional[Collection] = None, dtype: Union[str, numpy.dtype, ExtensionDtype, None] = None, copy: bool = False)</code></p><table><thead><tr><th>参数</th><th>描述</th></tr></thead><tbody><tr><td>data</td><td>ndarray 对象（结构化或同类的）、可迭代的或者字典形式，存储在序列中的数据</td></tr><tr><td>index</td><td>数组类型，索引（数据标签），如果未提供，将默认为 RangeIndex（0，1，2，…，n）</td></tr><tr><td>columns</td><td>列标签。如果未提供，则将默认为 RangeIndex（0、1、2、…、n）</td></tr><tr><td>dtype</td><td>输出系列的数据类型。可选项，如果未指定，则将从数据中推断，具体参考官网 <a href="https://pandas.pydata.org/docs/getting_started/basics.html#dtypes" target="_blank" rel="noopener">dtypes</a> 介绍</td></tr><tr><td>copy</td><td>bool 类型，可选项，默认 False，是否复制输入数据，仅影响 DataFrame/2d ndarray 输入</td></tr></tbody></table><p><img src="https://cdn.jsdelivr.net/gh/TRHX/ImageHosting/ITRHX-PIC/A79/02.png" alt="02"></p><h3 id="【03x01】通过-ndarray-构建-DataFrame"><a href="#【03x01】通过-ndarray-构建-DataFrame" class="headerlink" title="【03x01】通过 ndarray 构建 DataFrame"></a><font color="#4876FF">【03x01】通过 ndarray 构建 DataFrame</font></h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>data = np.random.randn(<span class="number">5</span>,<span class="number">3</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>data</span><br><span class="line">array([[<span class="number">-2.16231157</span>,  <span class="number">0.44967198</span>, <span class="number">-0.73131523</span>],</span><br><span class="line">       [ <span class="number">1.18982913</span>,  <span class="number">0.94670798</span>,  <span class="number">0.82973421</span>],</span><br><span class="line">       [<span class="number">-1.57680831</span>, <span class="number">-0.99732066</span>,  <span class="number">0.96432</span>   ],</span><br><span class="line">       [<span class="number">-0.77483149</span>, <span class="number">-1.23802881</span>,  <span class="number">0.44061227</span>],</span><br><span class="line">       [ <span class="number">1.77666419</span>,  <span class="number">0.24931983</span>, <span class="number">-1.12960153</span>]])</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>obj = pd.DataFrame(data)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>obj</span><br><span class="line">          <span class="number">0</span>         <span class="number">1</span>         <span class="number">2</span></span><br><span class="line"><span class="number">0</span> <span class="number">-2.162312</span>  <span class="number">0.449672</span> <span class="number">-0.731315</span></span><br><span class="line"><span class="number">1</span>  <span class="number">1.189829</span>  <span class="number">0.946708</span>  <span class="number">0.829734</span></span><br><span class="line"><span class="number">2</span> <span class="number">-1.576808</span> <span class="number">-0.997321</span>  <span class="number">0.964320</span></span><br><span class="line"><span class="number">3</span> <span class="number">-0.774831</span> <span class="number">-1.238029</span>  <span class="number">0.440612</span></span><br><span class="line"><span class="number">4</span>  <span class="number">1.776664</span>  <span class="number">0.249320</span> <span class="number">-1.129602</span></span><br></pre></td></tr></table></figure><p>指定索引（index）和列标签（columns），和 Series 对象类似，可以在构建的时候添加索引和标签，也可以直接通过赋值的方式就地修改：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>data = np.random.randn(<span class="number">5</span>,<span class="number">3</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>index = [<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>, <span class="string">'d'</span>, <span class="string">'e'</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>columns = [<span class="string">'A'</span>, <span class="string">'B'</span>, <span class="string">'C'</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>obj = pd.DataFrame(data, index, columns)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>obj</span><br><span class="line">          A         B         C</span><br><span class="line">a <span class="number">-1.042909</span> <span class="number">-0.238236</span> <span class="number">-1.050308</span></span><br><span class="line">b  <span class="number">0.587079</span>  <span class="number">0.739683</span> <span class="number">-0.233624</span></span><br><span class="line">c <span class="number">-0.451254</span> <span class="number">-0.638496</span>  <span class="number">1.708807</span></span><br><span class="line">d <span class="number">-0.620158</span> <span class="number">-1.875929</span> <span class="number">-0.432382</span></span><br><span class="line">e <span class="number">-1.093815</span>  <span class="number">0.396965</span> <span class="number">-0.759479</span></span><br><span class="line">&gt;&gt;&gt;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>obj.index = [<span class="string">'A1'</span>, <span class="string">'A2'</span>, <span class="string">'A3'</span>, <span class="string">'A4'</span>, <span class="string">'A5'</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>obj.columns = [<span class="string">'B1'</span>, <span class="string">'B2'</span>, <span class="string">'B3'</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>obj</span><br><span class="line">          B1        B2        B3</span><br><span class="line">A1 <span class="number">-1.042909</span> <span class="number">-0.238236</span> <span class="number">-1.050308</span></span><br><span class="line">A2  <span class="number">0.587079</span>  <span class="number">0.739683</span> <span class="number">-0.233624</span></span><br><span class="line">A3 <span class="number">-0.451254</span> <span class="number">-0.638496</span>  <span class="number">1.708807</span></span><br><span class="line">A4 <span class="number">-0.620158</span> <span class="number">-1.875929</span> <span class="number">-0.432382</span></span><br><span class="line">A5 <span class="number">-1.093815</span>  <span class="number">0.396965</span> <span class="number">-0.759479</span></span><br></pre></td></tr></table></figure><h3 id="【03x02】通过-dict-构建-DataFrame"><a href="#【03x02】通过-dict-构建-DataFrame" class="headerlink" title="【03x02】通过 dict 构建 DataFrame"></a><font color="#4876FF">【03x02】通过 dict 构建 DataFrame</font></h3><p>通过 字典（dict） 构建 DataFrame，字典的键（key）会作为列标签（columns），字典的值（value）会作为数据（data），示例如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>data = &#123;<span class="string">'city'</span>: [<span class="string">'Wuhan'</span>, <span class="string">'Wuhan'</span>, <span class="string">'Wuhan'</span>, <span class="string">'Beijing'</span>, <span class="string">'Beijing'</span>, <span class="string">'Beijing'</span>],</span><br><span class="line"><span class="string">'year'</span>: [<span class="number">2017</span>, <span class="number">2018</span>, <span class="number">2019</span>, <span class="number">2017</span>, <span class="number">2018</span>, <span class="number">2019</span>],</span><br><span class="line">        <span class="string">'people'</span>: [<span class="number">10892900</span>, <span class="number">11081000</span>, <span class="number">11212000</span>, <span class="number">21707000</span>, <span class="number">21542000</span>, <span class="number">21536000</span>]&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>obj = pd.DataFrame(data)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>obj</span><br><span class="line">      city  year    people</span><br><span class="line"><span class="number">0</span>    Wuhan  <span class="number">2017</span>  <span class="number">10892900</span></span><br><span class="line"><span class="number">1</span>    Wuhan  <span class="number">2018</span>  <span class="number">11081000</span></span><br><span class="line"><span class="number">2</span>    Wuhan  <span class="number">2019</span>  <span class="number">11212000</span></span><br><span class="line"><span class="number">3</span>  Beijing  <span class="number">2017</span>  <span class="number">21707000</span></span><br><span class="line"><span class="number">4</span>  Beijing  <span class="number">2018</span>  <span class="number">21542000</span></span><br><span class="line"><span class="number">5</span>  Beijing  <span class="number">2019</span>  <span class="number">21536000</span></span><br></pre></td></tr></table></figure><p>如果指定了列序列，则 DataFrame 的列就会按照指定顺序进行排列，如果传入的列在数据中找不到，就会在结果中产生缺失值（NaN）：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>data = &#123;<span class="string">'city'</span>: [<span class="string">'Wuhan'</span>, <span class="string">'Wuhan'</span>, <span class="string">'Wuhan'</span>, <span class="string">'Beijing'</span>, <span class="string">'Beijing'</span>, <span class="string">'Beijing'</span>],</span><br><span class="line"><span class="string">'year'</span>: [<span class="number">2017</span>, <span class="number">2018</span>, <span class="number">2019</span>, <span class="number">2017</span>, <span class="number">2018</span>, <span class="number">2019</span>],</span><br><span class="line">        <span class="string">'people'</span>: [<span class="number">10892900</span>, <span class="number">11081000</span>, <span class="number">11212000</span>, <span class="number">21707000</span>, <span class="number">21542000</span>, <span class="number">21536000</span>]&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>pd.DataFrame(data)</span><br><span class="line">      city  year    people</span><br><span class="line"><span class="number">0</span>    Wuhan  <span class="number">2017</span>  <span class="number">10892900</span></span><br><span class="line"><span class="number">1</span>    Wuhan  <span class="number">2018</span>  <span class="number">11081000</span></span><br><span class="line"><span class="number">2</span>    Wuhan  <span class="number">2019</span>  <span class="number">11212000</span></span><br><span class="line"><span class="number">3</span>  Beijing  <span class="number">2017</span>  <span class="number">21707000</span></span><br><span class="line"><span class="number">4</span>  Beijing  <span class="number">2018</span>  <span class="number">21542000</span></span><br><span class="line"><span class="number">5</span>  Beijing  <span class="number">2019</span>  <span class="number">21536000</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>pd.DataFrame(data, columns=[<span class="string">'year'</span>, <span class="string">'city'</span>, <span class="string">'people'</span>])</span><br><span class="line">   year     city    people</span><br><span class="line"><span class="number">0</span>  <span class="number">2017</span>    Wuhan  <span class="number">10892900</span></span><br><span class="line"><span class="number">1</span>  <span class="number">2018</span>    Wuhan  <span class="number">11081000</span></span><br><span class="line"><span class="number">2</span>  <span class="number">2019</span>    Wuhan  <span class="number">11212000</span></span><br><span class="line"><span class="number">3</span>  <span class="number">2017</span>  Beijing  <span class="number">21707000</span></span><br><span class="line"><span class="number">4</span>  <span class="number">2018</span>  Beijing  <span class="number">21542000</span></span><br><span class="line"><span class="number">5</span>  <span class="number">2019</span>  Beijing  <span class="number">21536000</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>pd.DataFrame(data, columns=[<span class="string">'year'</span>, <span class="string">'city'</span>, <span class="string">'people'</span>, <span class="string">'money'</span>])</span><br><span class="line">   year     city    people money</span><br><span class="line"><span class="number">0</span>  <span class="number">2017</span>    Wuhan  <span class="number">10892900</span>   NaN</span><br><span class="line"><span class="number">1</span>  <span class="number">2018</span>    Wuhan  <span class="number">11081000</span>   NaN</span><br><span class="line"><span class="number">2</span>  <span class="number">2019</span>    Wuhan  <span class="number">11212000</span>   NaN</span><br><span class="line"><span class="number">3</span>  <span class="number">2017</span>  Beijing  <span class="number">21707000</span>   NaN</span><br><span class="line"><span class="number">4</span>  <span class="number">2018</span>  Beijing  <span class="number">21542000</span>   NaN</span><br><span class="line"><span class="number">5</span>  <span class="number">2019</span>  Beijing  <span class="number">21536000</span>   NaN</span><br></pre></td></tr></table></figure><font color="#FF0000"><strong>注意：data 为字典，且未设置 columns 参数时：</strong></font><ul><li><font color="#FF0000"><strong>Python &gt; = 3.6 且 Pandas &gt; = 0.23，DataFrame 的列按字典的插入顺序排序。</strong></font></li><li><font color="#FF0000"><strong>Python &lt; 3.6 或 Pandas &lt; 0.23，DataFrame 的列按字典键的字母排序。</strong></font></li></ul><h3 id="【03x03】获取其数据和索引-1"><a href="#【03x03】获取其数据和索引-1" class="headerlink" title="【03x03】获取其数据和索引"></a><font color="#4876FF">【03x03】获取其数据和索引</font></h3><p>和 Series 一样，DataFrame 也可以通过其 values 和 index 属性获取其数据和索引对象：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>data = &#123;<span class="string">'city'</span>: [<span class="string">'Wuhan'</span>, <span class="string">'Wuhan'</span>, <span class="string">'Wuhan'</span>, <span class="string">'Beijing'</span>, <span class="string">'Beijing'</span>, <span class="string">'Beijing'</span>],</span><br><span class="line"><span class="string">'year'</span>: [<span class="number">2017</span>, <span class="number">2018</span>, <span class="number">2019</span>, <span class="number">2017</span>, <span class="number">2018</span>, <span class="number">2019</span>],</span><br><span class="line">        <span class="string">'people'</span>: [<span class="number">10892900</span>, <span class="number">11081000</span>, <span class="number">11212000</span>, <span class="number">21707000</span>, <span class="number">21542000</span>, <span class="number">21536000</span>]&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>obj = pd.DataFrame(data)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>obj.index</span><br><span class="line">RangeIndex(start=<span class="number">0</span>, stop=<span class="number">6</span>, step=<span class="number">1</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>obj.values</span><br><span class="line">array([[<span class="string">'Wuhan'</span>, <span class="number">2017</span>, <span class="number">10892900</span>],</span><br><span class="line">       [<span class="string">'Wuhan'</span>, <span class="number">2018</span>, <span class="number">11081000</span>],</span><br><span class="line">       [<span class="string">'Wuhan'</span>, <span class="number">2019</span>, <span class="number">11212000</span>],</span><br><span class="line">       [<span class="string">'Beijing'</span>, <span class="number">2017</span>, <span class="number">21707000</span>],</span><br><span class="line">       [<span class="string">'Beijing'</span>, <span class="number">2018</span>, <span class="number">21542000</span>],</span><br><span class="line">       [<span class="string">'Beijing'</span>, <span class="number">2019</span>, <span class="number">21536000</span>]], dtype=object)</span><br></pre></td></tr></table></figure><h3 id="【03x04】通过索引获取数据-1"><a href="#【03x04】通过索引获取数据-1" class="headerlink" title="【03x04】通过索引获取数据"></a><font color="#4876FF">【03x04】通过索引获取数据</font></h3><p>通过类似字典标记的方式或属性的方式，可以将 DataFrame 的列获取为一个 Series 对象；</p><p>行也可以通过位置或名称的方式进行获取，比如用 loc 属性；</p><p>对于特别大的 DataFrame，有一个 head 方法可以选取前五行数据。</p><p>用法示例：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>data = &#123;<span class="string">'city'</span>: [<span class="string">'Wuhan'</span>, <span class="string">'Wuhan'</span>, <span class="string">'Wuhan'</span>, <span class="string">'Beijing'</span>, <span class="string">'Beijing'</span>, <span class="string">'Beijing'</span>],</span><br><span class="line"><span class="string">'year'</span>: [<span class="number">2017</span>, <span class="number">2018</span>, <span class="number">2019</span>, <span class="number">2017</span>, <span class="number">2018</span>, <span class="number">2019</span>],</span><br><span class="line">        <span class="string">'people'</span>: [<span class="number">10892900</span>, <span class="number">11081000</span>, <span class="number">11212000</span>, <span class="number">21707000</span>, <span class="number">21542000</span>, <span class="number">21536000</span>]&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>obj = pd.DataFrame(data)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>obj</span><br><span class="line">      city  year    people</span><br><span class="line"><span class="number">0</span>    Wuhan  <span class="number">2017</span>  <span class="number">10892900</span></span><br><span class="line"><span class="number">1</span>    Wuhan  <span class="number">2018</span>  <span class="number">11081000</span></span><br><span class="line"><span class="number">2</span>    Wuhan  <span class="number">2019</span>  <span class="number">11212000</span></span><br><span class="line"><span class="number">3</span>  Beijing  <span class="number">2017</span>  <span class="number">21707000</span></span><br><span class="line"><span class="number">4</span>  Beijing  <span class="number">2018</span>  <span class="number">21542000</span></span><br><span class="line"><span class="number">5</span>  Beijing  <span class="number">2019</span>  <span class="number">21536000</span></span><br><span class="line">&gt;&gt;&gt;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>obj[<span class="string">'city'</span>]</span><br><span class="line"><span class="number">0</span>      Wuhan</span><br><span class="line"><span class="number">1</span>      Wuhan</span><br><span class="line"><span class="number">2</span>      Wuhan</span><br><span class="line"><span class="number">3</span>    Beijing</span><br><span class="line"><span class="number">4</span>    Beijing</span><br><span class="line"><span class="number">5</span>    Beijing</span><br><span class="line">Name: city, dtype: object</span><br><span class="line">&gt;&gt;&gt;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>obj.year</span><br><span class="line"><span class="number">0</span>    <span class="number">2017</span></span><br><span class="line"><span class="number">1</span>    <span class="number">2018</span></span><br><span class="line"><span class="number">2</span>    <span class="number">2019</span></span><br><span class="line"><span class="number">3</span>    <span class="number">2017</span></span><br><span class="line"><span class="number">4</span>    <span class="number">2018</span></span><br><span class="line"><span class="number">5</span>    <span class="number">2019</span></span><br><span class="line">Name: year, dtype: int64</span><br><span class="line">&gt;&gt;&gt;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>type(obj.year)</span><br><span class="line">&lt;<span class="class"><span class="keyword">class</span> '<span class="title">pandas</span>.<span class="title">core</span>.<span class="title">series</span>.<span class="title">Series</span>'&gt;</span></span><br><span class="line"><span class="class">&gt;&gt;&gt;</span></span><br><span class="line"><span class="class">&gt;&gt;&gt; <span class="title">obj</span>.<span class="title">loc</span>[2]</span></span><br><span class="line"><span class="class"><span class="title">city</span>         <span class="title">Wuhan</span></span></span><br><span class="line"><span class="class"><span class="title">year</span>          2019</span></span><br><span class="line"><span class="class"><span class="title">people</span>    11212000</span></span><br><span class="line"><span class="class"><span class="title">Name</span>:</span> <span class="number">2</span>, dtype: object</span><br><span class="line">&gt;&gt;&gt;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>obj.head()</span><br><span class="line">      city  year    people</span><br><span class="line"><span class="number">0</span>    Wuhan  <span class="number">2017</span>  <span class="number">10892900</span></span><br><span class="line"><span class="number">1</span>    Wuhan  <span class="number">2018</span>  <span class="number">11081000</span></span><br><span class="line"><span class="number">2</span>    Wuhan  <span class="number">2019</span>  <span class="number">11212000</span></span><br><span class="line"><span class="number">3</span>  Beijing  <span class="number">2017</span>  <span class="number">21707000</span></span><br><span class="line"><span class="number">4</span>  Beijing  <span class="number">2018</span>  <span class="number">21542000</span></span><br></pre></td></tr></table></figure><h3 id="【03x05】修改列的值"><a href="#【03x05】修改列的值" class="headerlink" title="【03x05】修改列的值"></a><font color="#4876FF">【03x05】修改列的值</font></h3><p>列可以通过赋值的方式进行修改。在下面示例中，分别给”money”列赋上一个标量值和一组值：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>data = &#123;<span class="string">'city'</span>: [<span class="string">'Wuhan'</span>, <span class="string">'Wuhan'</span>, <span class="string">'Wuhan'</span>, <span class="string">'Beijing'</span>, <span class="string">'Beijing'</span>, <span class="string">'Beijing'</span>],</span><br><span class="line"><span class="string">'year'</span>: [<span class="number">2017</span>, <span class="number">2018</span>, <span class="number">2019</span>, <span class="number">2017</span>, <span class="number">2018</span>, <span class="number">2019</span>],</span><br><span class="line">        <span class="string">'people'</span>: [<span class="number">10892900</span>, <span class="number">11081000</span>, <span class="number">11212000</span>, <span class="number">21707000</span>, <span class="number">21542000</span>, <span class="number">21536000</span>],</span><br><span class="line">        <span class="string">'money'</span>:[np.NaN, np.NaN, np.NaN, np.NaN, np.NaN, np.NaN]&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>obj = pd.DataFrame(data, index=[<span class="string">'A'</span>, <span class="string">'B'</span>, <span class="string">'C'</span>, <span class="string">'D'</span>, <span class="string">'E'</span>, <span class="string">'F'</span>])</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>obj</span><br><span class="line">      city  year    people  money</span><br><span class="line">A    Wuhan  <span class="number">2017</span>  <span class="number">10892900</span>    NaN</span><br><span class="line">B    Wuhan  <span class="number">2018</span>  <span class="number">11081000</span>    NaN</span><br><span class="line">C    Wuhan  <span class="number">2019</span>  <span class="number">11212000</span>    NaN</span><br><span class="line">D  Beijing  <span class="number">2017</span>  <span class="number">21707000</span>    NaN</span><br><span class="line">E  Beijing  <span class="number">2018</span>  <span class="number">21542000</span>    NaN</span><br><span class="line">F  Beijing  <span class="number">2019</span>  <span class="number">21536000</span>    NaN</span><br><span class="line">&gt;&gt;&gt;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>obj[<span class="string">'money'</span>] = <span class="number">6666666666</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>obj</span><br><span class="line">      city  year    people       money</span><br><span class="line">A    Wuhan  <span class="number">2017</span>  <span class="number">10892900</span>  <span class="number">6666666666</span></span><br><span class="line">B    Wuhan  <span class="number">2018</span>  <span class="number">11081000</span>  <span class="number">6666666666</span></span><br><span class="line">C    Wuhan  <span class="number">2019</span>  <span class="number">11212000</span>  <span class="number">6666666666</span></span><br><span class="line">D  Beijing  <span class="number">2017</span>  <span class="number">21707000</span>  <span class="number">6666666666</span></span><br><span class="line">E  Beijing  <span class="number">2018</span>  <span class="number">21542000</span>  <span class="number">6666666666</span></span><br><span class="line">F  Beijing  <span class="number">2019</span>  <span class="number">21536000</span>  <span class="number">6666666666</span></span><br><span class="line">&gt;&gt;&gt;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>obj[<span class="string">'money'</span>] = np.arange(<span class="number">100000000</span>, <span class="number">700000000</span>, <span class="number">100000000</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>obj</span><br><span class="line">      city  year    people      money</span><br><span class="line">A    Wuhan  <span class="number">2017</span>  <span class="number">10892900</span>  <span class="number">100000000</span></span><br><span class="line">B    Wuhan  <span class="number">2018</span>  <span class="number">11081000</span>  <span class="number">200000000</span></span><br><span class="line">C    Wuhan  <span class="number">2019</span>  <span class="number">11212000</span>  <span class="number">300000000</span></span><br><span class="line">D  Beijing  <span class="number">2017</span>  <span class="number">21707000</span>  <span class="number">400000000</span></span><br><span class="line">E  Beijing  <span class="number">2018</span>  <span class="number">21542000</span>  <span class="number">500000000</span></span><br><span class="line">F  Beijing  <span class="number">2019</span>  <span class="number">21536000</span>  <span class="number">600000000</span></span><br></pre></td></tr></table></figure><p>将列表或数组赋值给某个列时，其长度必须跟 DataFrame 的长度相匹配。如果赋值的是一个 Series，就会精确匹配 DataFrame 的索引：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>data = &#123;<span class="string">'city'</span>: [<span class="string">'Wuhan'</span>, <span class="string">'Wuhan'</span>, <span class="string">'Wuhan'</span>, <span class="string">'Beijing'</span>, <span class="string">'Beijing'</span>, <span class="string">'Beijing'</span>],</span><br><span class="line"><span class="string">'year'</span>: [<span class="number">2017</span>, <span class="number">2018</span>, <span class="number">2019</span>, <span class="number">2017</span>, <span class="number">2018</span>, <span class="number">2019</span>],</span><br><span class="line">        <span class="string">'people'</span>: [<span class="number">10892900</span>, <span class="number">11081000</span>, <span class="number">11212000</span>, <span class="number">21707000</span>, <span class="number">21542000</span>, <span class="number">21536000</span>],</span><br><span class="line">        <span class="string">'money'</span>:[np.NaN, np.NaN, np.NaN, np.NaN, np.NaN, np.NaN]&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>obj = pd.DataFrame(data, index=[<span class="string">'A'</span>, <span class="string">'B'</span>, <span class="string">'C'</span>, <span class="string">'D'</span>, <span class="string">'E'</span>, <span class="string">'F'</span>])</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>obj</span><br><span class="line">      city  year    people  money</span><br><span class="line">A    Wuhan  <span class="number">2017</span>  <span class="number">10892900</span>    NaN</span><br><span class="line">B    Wuhan  <span class="number">2018</span>  <span class="number">11081000</span>    NaN</span><br><span class="line">C    Wuhan  <span class="number">2019</span>  <span class="number">11212000</span>    NaN</span><br><span class="line">D  Beijing  <span class="number">2017</span>  <span class="number">21707000</span>    NaN</span><br><span class="line">E  Beijing  <span class="number">2018</span>  <span class="number">21542000</span>    NaN</span><br><span class="line">F  Beijing  <span class="number">2019</span>  <span class="number">21536000</span>    NaN</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>new_data = pd.Series([<span class="number">5670000000</span>, <span class="number">6890000000</span>, <span class="number">7890000000</span>], index=[<span class="string">'A'</span>, <span class="string">'C'</span>, <span class="string">'E'</span>])</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>obj[<span class="string">'money'</span>] = new_data</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>obj</span><br><span class="line">      city  year    people         money</span><br><span class="line">A    Wuhan  <span class="number">2017</span>  <span class="number">10892900</span>  <span class="number">5.670000e+09</span></span><br><span class="line">B    Wuhan  <span class="number">2018</span>  <span class="number">11081000</span>           NaN</span><br><span class="line">C    Wuhan  <span class="number">2019</span>  <span class="number">11212000</span>  <span class="number">6.890000e+09</span></span><br><span class="line">D  Beijing  <span class="number">2017</span>  <span class="number">21707000</span>           NaN</span><br><span class="line">E  Beijing  <span class="number">2018</span>  <span class="number">21542000</span>  <span class="number">7.890000e+09</span></span><br><span class="line">F  Beijing  <span class="number">2019</span>  <span class="number">21536000</span>           NaN</span><br></pre></td></tr></table></figure><h3 id="【03x06】增加-删除列"><a href="#【03x06】增加-删除列" class="headerlink" title="【03x06】增加 / 删除列"></a><font color="#4876FF">【03x06】增加 / 删除列</font></h3><p>为不存在的列赋值会创建出一个新列，关键字 del 用于删除列：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>data = &#123;<span class="string">'city'</span>: [<span class="string">'Wuhan'</span>, <span class="string">'Wuhan'</span>, <span class="string">'Wuhan'</span>, <span class="string">'Beijing'</span>, <span class="string">'Beijing'</span>, <span class="string">'Beijing'</span>],</span><br><span class="line"><span class="string">'year'</span>: [<span class="number">2017</span>, <span class="number">2018</span>, <span class="number">2019</span>, <span class="number">2017</span>, <span class="number">2018</span>, <span class="number">2019</span>],</span><br><span class="line">        <span class="string">'people'</span>: [<span class="number">10892900</span>, <span class="number">11081000</span>, <span class="number">11212000</span>, <span class="number">21707000</span>, <span class="number">21542000</span>, <span class="number">21536000</span>]&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>obj = pd.DataFrame(data)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>obj</span><br><span class="line">      city  year    people</span><br><span class="line"><span class="number">0</span>    Wuhan  <span class="number">2017</span>  <span class="number">10892900</span></span><br><span class="line"><span class="number">1</span>    Wuhan  <span class="number">2018</span>  <span class="number">11081000</span></span><br><span class="line"><span class="number">2</span>    Wuhan  <span class="number">2019</span>  <span class="number">11212000</span></span><br><span class="line"><span class="number">3</span>  Beijing  <span class="number">2017</span>  <span class="number">21707000</span></span><br><span class="line"><span class="number">4</span>  Beijing  <span class="number">2018</span>  <span class="number">21542000</span></span><br><span class="line"><span class="number">5</span>  Beijing  <span class="number">2019</span>  <span class="number">21536000</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>obj[<span class="string">'northern'</span>] = obj[<span class="string">'city'</span>] == <span class="string">'Beijing'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>obj</span><br><span class="line">      city  year    people  northern</span><br><span class="line"><span class="number">0</span>    Wuhan  <span class="number">2017</span>  <span class="number">10892900</span>     <span class="keyword">False</span></span><br><span class="line"><span class="number">1</span>    Wuhan  <span class="number">2018</span>  <span class="number">11081000</span>     <span class="keyword">False</span></span><br><span class="line"><span class="number">2</span>    Wuhan  <span class="number">2019</span>  <span class="number">11212000</span>     <span class="keyword">False</span></span><br><span class="line"><span class="number">3</span>  Beijing  <span class="number">2017</span>  <span class="number">21707000</span>      <span class="keyword">True</span></span><br><span class="line"><span class="number">4</span>  Beijing  <span class="number">2018</span>  <span class="number">21542000</span>      <span class="keyword">True</span></span><br><span class="line"><span class="number">5</span>  Beijing  <span class="number">2019</span>  <span class="number">21536000</span>      <span class="keyword">True</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">del</span> obj[<span class="string">'northern'</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>obj</span><br><span class="line">      city  year    people</span><br><span class="line"><span class="number">0</span>    Wuhan  <span class="number">2017</span>  <span class="number">10892900</span></span><br><span class="line"><span class="number">1</span>    Wuhan  <span class="number">2018</span>  <span class="number">11081000</span></span><br><span class="line"><span class="number">2</span>    Wuhan  <span class="number">2019</span>  <span class="number">11212000</span></span><br><span class="line"><span class="number">3</span>  Beijing  <span class="number">2017</span>  <span class="number">21707000</span></span><br><span class="line"><span class="number">4</span>  Beijing  <span class="number">2018</span>  <span class="number">21542000</span></span><br><span class="line"><span class="number">5</span>  Beijing  <span class="number">2019</span>  <span class="number">21536000</span></span><br></pre></td></tr></table></figure><h3 id="【03x07】name-属性"><a href="#【03x07】name-属性" class="headerlink" title="【03x07】name 属性"></a><font color="##4876FF">【03x07】name 属性</font></h3><p>可以通过 index.name 和 columns.name 属性设置索引（index）和列标签（columns）的 name，注意 DataFrame 对象是没有 name 属性的：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>data = &#123;<span class="string">'city'</span>: [<span class="string">'Wuhan'</span>, <span class="string">'Wuhan'</span>, <span class="string">'Wuhan'</span>, <span class="string">'Beijing'</span>, <span class="string">'Beijing'</span>, <span class="string">'Beijing'</span>],</span><br><span class="line"><span class="string">'year'</span>: [<span class="number">2017</span>, <span class="number">2018</span>, <span class="number">2019</span>, <span class="number">2017</span>, <span class="number">2018</span>, <span class="number">2019</span>],</span><br><span class="line">        <span class="string">'people'</span>: [<span class="number">10892900</span>, <span class="number">11081000</span>, <span class="number">11212000</span>, <span class="number">21707000</span>, <span class="number">21542000</span>, <span class="number">21536000</span>]&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>obj = pd.DataFrame(data)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>obj.index.name = <span class="string">'index'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>obj.columns.name = <span class="string">'columns'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>obj</span><br><span class="line">columns     city  year    people</span><br><span class="line">index                           </span><br><span class="line"><span class="number">0</span>          Wuhan  <span class="number">2017</span>  <span class="number">10892900</span></span><br><span class="line"><span class="number">1</span>          Wuhan  <span class="number">2018</span>  <span class="number">11081000</span></span><br><span class="line"><span class="number">2</span>          Wuhan  <span class="number">2019</span>  <span class="number">11212000</span></span><br><span class="line"><span class="number">3</span>        Beijing  <span class="number">2017</span>  <span class="number">21707000</span></span><br><span class="line"><span class="number">4</span>        Beijing  <span class="number">2018</span>  <span class="number">21542000</span></span><br><span class="line"><span class="number">5</span>        Beijing  <span class="number">2019</span>  <span class="number">21536000</span></span><br></pre></td></tr></table></figure><hr><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">这里是一段防爬虫文本，请读者忽略。</span></span><br><span class="line"><span class="string">本文原创首发于</span> <span class="string">CSDN，作者</span> <span class="string">TRHX。</span></span><br><span class="line"><span class="string">博客首页：https://itrhx.blog.csdn.net/</span></span><br><span class="line"><span class="string">本文链接：https://itrhx.blog.csdn.net/article/details/106676693</span></span><br><span class="line"><span class="string">未经授权，禁止转载！恶意转载，后果自负！尊重原创，远离剽窃！</span></span><br></pre></td></tr></table></figure><hr>]]></content>
    
    <summary type="html">
    
      Python 数据分析三剑客之 Pandas（一）：认识 Pandas 及其 Series、DataFrame 基本对象。
    
    </summary>
    
      <category term="Python 数据分析" scheme="https://www.itrhx.com/categories/Python-%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/"/>
    
      <category term="Pandas" scheme="https://www.itrhx.com/categories/Python-%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/Pandas/"/>
    
    
      <category term="Pandas" scheme="https://www.itrhx.com/tags/Pandas/"/>
    
      <category term="Series" scheme="https://www.itrhx.com/tags/Series/"/>
    
      <category term="DataFrame" scheme="https://www.itrhx.com/tags/DataFrame/"/>
    
  </entry>
  
  <entry>
    <title>Python 数据分析三剑客之 Matplotlib（十一）：最常用最有价值的 50 个图表【译文】</title>
    <link href="https://www.itrhx.com/2020/06/09/A78-Matplotlib-11/"/>
    <id>https://www.itrhx.com/2020/06/09/A78-Matplotlib-11/</id>
    <published>2020-06-09T08:13:44.322Z</published>
    <updated>2020-07-06T13:58:45.594Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>Matplotlib 系列文章：</p><ul><li><a href="https://www.itrhx.com/2020/04/10/A68-Matplotlib-01/">Python 数据分析三剑客之 Matplotlib（一）：初识 Matplotlib 与其 matplotibrc 配置文件</a></li><li><a href="https://www.itrhx.com/2020/04/12/A69-Matplotlib-02/">Python 数据分析三剑客之 Matplotlib（二）：文本描述 / 中文支持 / 画布 / 网格等基本图像属性</a></li><li><a href="https://www.itrhx.com/2020/04/14/A70-Matplotlib-03/">Python 数据分析三剑客之 Matplotlib（三）：图例 / LaTeX / 刻度 / 子图 / 补丁等基本图像属性</a></li><li><a href="https://www.itrhx.com/2020/04/16/A71-Matplotlib-04/">Python 数据分析三剑客之 Matplotlib（四）：线性图的绘制</a></li><li><a href="https://www.itrhx.com/2020/04/18/A72-Matplotlib-05/">Python 数据分析三剑客之 Matplotlib（五）：散点图的绘制</a></li><li><a href="https://www.itrhx.com/2020/04/21/A73-Matplotlib-06/">Python 数据分析三剑客之 Matplotlib（六）：直方图 / 柱状图 / 条形图的绘制</a></li><li><a href="https://www.itrhx.com/2020/04/24/A74-Matplotlib-07/">Python 数据分析三剑客之 Matplotlib（七）：饼状图的绘制</a></li><li><a href="https://www.itrhx.com/2020/04/30/A75-Matplotlib-08/">Python 数据分析三剑客之 Matplotlib（八）：等高线 / 等值线图的绘制</a></li><li><a href="https://www.itrhx.com/2020/06/03/A76-Matplotlib-09/">Python 数据分析三剑客之 Matplotlib（九）：极区图 / 极坐标图 / 雷达图的绘制</a></li><li><a href="https://www.itrhx.com/2020/06/08/A77-Matplotlib-10/">Python 数据分析三剑客之 Matplotlib（十）：3D 图的绘制</a></li><li><a href="https://www.itrhx.com/2020/06/09/A78-Matplotlib-11/">Python 数据分析三剑客之 Matplotlib（十一）：最热门最常用的 50 个图表</a>【译文】</li></ul><p>专栏：</p><p>【<a href="https://www.itrhx.com/categories/Python-%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/NumPy/">NumPy 专栏</a>】【<a href="https://www.itrhx.com/categories/Python-%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/Pandas/">Pandas 专栏</a>】【<a href="https://www.itrhx.com/categories/Python-%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/Matplotlib/">Matplotlib 专栏</a>】</p><p>推荐学习资料与网站：</p><p>【<a href="https://www.numpy.org.cn/" target="_blank" rel="noopener">NumPy 中文网</a>】【<a href="https://www.pypandas.cn/" target="_blank" rel="noopener">Pandas 中文网</a>】【<a href="https://www.matplotlib.org.cn/" target="_blank" rel="noopener">Matplotlib 中文网</a>】【<a href="https://github.com/TRHX/Python-quick-reference-table" target="_blank" rel="noopener">NumPy、Matplotlib、Pandas 速查表</a>】</p><hr><blockquote><p>翻译丨<a href="https://itrhx.blog.csdn.net/" target="_blank" rel="noopener">TRHX</a><br>作者丨<a href="https://www.machinelearningplus.com/author/selva86/" target="_blank" rel="noopener">Selva Prabhakaran</a><br>原文丨<a href="https://www.machinelearningplus.com/plots/top-50-matplotlib-visualizations-the-master-plots-python/" target="_blank" rel="noopener">《Top 50 matplotlib Visualizations – The Master Plots (with full python code)》</a></p></blockquote><hr><blockquote><p>★ 本文中的示例原作者使用的编辑器为 Jupyter Notebook；<br>★ 译者使用 PyCharm 测试原文中有部分代码不太准确，部分已进行修改，对应有注释说明；<br>★ 运行本文代码，需要安装 Matplotlib 和 Seaborn 等可视化库，其他的一些辅助可视化库已在代码部分作标注；<br>★ 示例中用到的数据均储存在作者的 GitHub：<a href="https://github.com/selva86/datasets" target="_blank" rel="noopener">https://github.com/selva86/datasets</a>，因此运行程序可能需要FQ；<br>★ 译者英文水平有限，若遇到翻译模糊的词建议参考原文来理解。<br>★ 本文50个示例代码已打包为 .py 文件，可直接下载：<a href="https://download.csdn.net/download/qq_36759224/12507219" target="_blank" rel="noopener">https://download.csdn.net/download/qq_36759224/12507219</a></p></blockquote><hr><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">这里是一段防爬虫文本，请读者忽略。</span></span><br><span class="line"><span class="string">本译文首发于</span> <span class="string">CSDN，作者</span> <span class="string">Selva</span> <span class="string">Prabhakaran，译者</span> <span class="string">TRHX。</span></span><br><span class="line"><span class="string">本文链接：https://itrhx.blog.csdn.net/article/details/106558131</span></span><br><span class="line"><span class="string">原文链接：https://www.machinelearningplus.com/plots/top-50-matplotlib-visualizations-the-master-plots-python/</span></span><br></pre></td></tr></table></figure><hr><h2 id="【1x00】介绍（Introduction）"><a href="#【1x00】介绍（Introduction）" class="headerlink" title="【1x00】介绍（Introduction）"></a><font color="#FF0000">【1x00】介绍（Introduction）</font></h2><p>在数据分析和可视化中最常用的、最有价值的前 50 个 Matplotlib 图表。这些图表会让你懂得在不同情况下合理使用 Python 的 Matplotlib 和 Seaborn 库来达到数据可视化效果。</p><p>这些图表根据可视化目标的 7 个不同情景进行分组。 例如，如果要想象两个变量之间的关系，请查看“关联”部分下的图表。 或者，如果您想要显示值如何随时间变化，请查看“变化”部分，依此类推。</p><p>有效图表的重要特征：</p><ul><li>在不歪曲事实的情况下传达正确和必要的信息；</li><li>设计简单，不必太费力就能理解它；</li><li>从审美角度支持信息而不是掩盖信息；</li><li>信息没有超负荷。</li></ul><h2 id="【2x00】准备工作（Setup）"><a href="#【2x00】准备工作（Setup）" class="headerlink" title="【2x00】准备工作（Setup）"></a><font color="#FF0000">【2x00】准备工作（Setup）</font></h2><p>在代码运行前先引入下面的基本设置，当然，个别图表可能会重新定义显示要素。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># !pip install brewer2mpl</span></span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> matplotlib <span class="keyword">as</span> mpl</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">import</span> seaborn <span class="keyword">as</span> sns</span><br><span class="line"><span class="keyword">import</span> warnings; warnings.filterwarnings(action=<span class="string">'once'</span>)</span><br><span class="line"></span><br><span class="line">large = <span class="number">22</span>; med = <span class="number">16</span>; small = <span class="number">12</span></span><br><span class="line">params = &#123;<span class="string">'axes.titlesize'</span>: large,</span><br><span class="line">          <span class="string">'legend.fontsize'</span>: med,</span><br><span class="line">          <span class="string">'figure.figsize'</span>: (<span class="number">16</span>, <span class="number">10</span>),</span><br><span class="line">          <span class="string">'axes.labelsize'</span>: med,</span><br><span class="line">          <span class="string">'axes.titlesize'</span>: med,</span><br><span class="line">          <span class="string">'xtick.labelsize'</span>: med,</span><br><span class="line">          <span class="string">'ytick.labelsize'</span>: med,</span><br><span class="line">          <span class="string">'figure.titlesize'</span>: large&#125;</span><br><span class="line">plt.rcParams.update(params)</span><br><span class="line">plt.style.use(<span class="string">'seaborn-whitegrid'</span>)</span><br><span class="line">sns.set_style(<span class="string">"white"</span>)</span><br><span class="line">%matplotlib inline</span><br><span class="line"></span><br><span class="line"><span class="comment"># Version</span></span><br><span class="line">print(mpl.__version__)  <span class="comment">#&gt; 3.0.0</span></span><br><span class="line">print(sns.__version__)  <span class="comment">#&gt; 0.9.0</span></span><br></pre></td></tr></table></figure><h2 id="【3x00】关联（Correlation）"><a href="#【3x00】关联（Correlation）" class="headerlink" title="【3x00】关联（Correlation） "></a><font color="#FF0000">【3x00】关联（Correlation） </font></h2><p>关联图用于可视化两个或多个变量之间的关系。也就是说，一个变量相对于另一个变量如何变化。</p><h3 id="【01】散点图（Scatter-plot）"><a href="#【01】散点图（Scatter-plot）" class="headerlink" title="【01】散点图（Scatter plot）"></a><font color="##4876FF">【01】散点图（Scatter plot）</font></h3><p>散点图是研究两个变量之间关系的经典和基本的绘图。如果数据中有多个组，则可能需要以不同的颜色显示每个组。在 Matplotlib 中，您可以使用 <code>plt.scatterplot()</code> 方便地执行此操作。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Import dataset </span></span><br><span class="line">midwest = pd.read_csv(<span class="string">"https://raw.githubusercontent.com/selva86/datasets/master/midwest_filter.csv"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Prepare Data </span></span><br><span class="line"><span class="comment"># Create as many colors as there are unique midwest['category']</span></span><br><span class="line">categories = np.unique(midwest[<span class="string">'category'</span>])</span><br><span class="line">colors = [plt.cm.tab10(i/float(len(categories)<span class="number">-1</span>)) <span class="keyword">for</span> i <span class="keyword">in</span> range(len(categories))]</span><br><span class="line"></span><br><span class="line"><span class="comment"># Draw Plot for Each Category</span></span><br><span class="line">plt.figure(figsize=(<span class="number">16</span>, <span class="number">10</span>), dpi= <span class="number">80</span>, facecolor=<span class="string">'w'</span>, edgecolor=<span class="string">'k'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i, category <span class="keyword">in</span> enumerate(categories):</span><br><span class="line">    plt.scatter(<span class="string">'area'</span>, <span class="string">'poptotal'</span>, </span><br><span class="line">                data=midwest.loc[midwest.category==category, :], </span><br><span class="line">                s=<span class="number">20</span>, cmap=colors[i], label=str(category))</span><br><span class="line"><span class="comment"># 原文 c=colors[i] 已修改为 cmap=colors[i]</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Decorations</span></span><br><span class="line">plt.gca().set(xlim=(<span class="number">0.0</span>, <span class="number">0.1</span>), ylim=(<span class="number">0</span>, <span class="number">90000</span>),</span><br><span class="line">              xlabel=<span class="string">'Area'</span>, ylabel=<span class="string">'Population'</span>)</span><br><span class="line"></span><br><span class="line">plt.xticks(fontsize=<span class="number">12</span>); plt.yticks(fontsize=<span class="number">12</span>)</span><br><span class="line">plt.title(<span class="string">"Scatterplot of Midwest Area vs Population"</span>, fontsize=<span class="number">22</span>)</span><br><span class="line">plt.legend(fontsize=<span class="number">12</span>)    </span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/TRHX/ImageHosting/ITRHX-PIC/A78/01.png" alt="01"></p><h3 id="【02】带边界的气泡图（Bubble-plot-with-Encircling）"><a href="#【02】带边界的气泡图（Bubble-plot-with-Encircling）" class="headerlink" title="【02】带边界的气泡图（Bubble plot with Encircling）"></a><font color="##4876FF">【02】带边界的气泡图（Bubble plot with Encircling）</font></h3><p>有时候您想在一个边界内显示一组点来强调它们的重要性。在本例中，您将从被包围的数据中获取记录，并将其传递给下面的代码中描述的 <code>encircle()</code>。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> matplotlib <span class="keyword">import</span> patches</span><br><span class="line"><span class="keyword">from</span> scipy.spatial <span class="keyword">import</span> ConvexHull</span><br><span class="line"><span class="keyword">import</span> warnings; warnings.simplefilter(<span class="string">'ignore'</span>)</span><br><span class="line">sns.set_style(<span class="string">"white"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Step 1: Prepare Data</span></span><br><span class="line">midwest = pd.read_csv(<span class="string">"https://raw.githubusercontent.com/selva86/datasets/master/midwest_filter.csv"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># As many colors as there are unique midwest['category']</span></span><br><span class="line">categories = np.unique(midwest[<span class="string">'category'</span>])</span><br><span class="line">colors = [plt.cm.tab10(i/float(len(categories)<span class="number">-1</span>)) <span class="keyword">for</span> i <span class="keyword">in</span> range(len(categories))]</span><br><span class="line"></span><br><span class="line"><span class="comment"># Step 2: Draw Scatterplot with unique color for each category</span></span><br><span class="line">fig = plt.figure(figsize=(<span class="number">16</span>, <span class="number">10</span>), dpi=<span class="number">80</span>, facecolor=<span class="string">'w'</span>, edgecolor=<span class="string">'k'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i, category <span class="keyword">in</span> enumerate(categories):</span><br><span class="line">    plt.scatter(<span class="string">'area'</span>, <span class="string">'poptotal'</span>, data=midwest.loc[midwest.category == category, :], s=<span class="string">'dot_size'</span>, cmap=colors[i], label=str(category), edgecolors=<span class="string">'black'</span>, linewidths=<span class="number">.5</span>)</span><br><span class="line"><span class="comment"># 原文 c=colors[i] 已修改为 cmap=colors[i]</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Step 3: Encircling</span></span><br><span class="line"><span class="comment"># https://stackoverflow.com/questions/44575681/how-do-i-encircle-different-data-sets-in-scatter-plot</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">encircle</span><span class="params">(x,y, ax=None, **kw)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> ax: ax = plt.gca()</span><br><span class="line">    p = np.c_[x, y]</span><br><span class="line">    hull = ConvexHull(p)</span><br><span class="line">    poly = plt.Polygon(p[hull.vertices, :], **kw)</span><br><span class="line">    ax.add_patch(poly)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Select data to be encircled</span></span><br><span class="line">midwest_encircle_data = midwest.loc[midwest.state==<span class="string">'IN'</span>, :]</span><br><span class="line"></span><br><span class="line"><span class="comment"># Draw polygon surrounding vertices</span></span><br><span class="line">encircle(midwest_encircle_data.area, midwest_encircle_data.poptotal, ec=<span class="string">"k"</span>, fc=<span class="string">"gold"</span>, alpha=<span class="number">0.1</span>)</span><br><span class="line">encircle(midwest_encircle_data.area, midwest_encircle_data.poptotal, ec=<span class="string">"firebrick"</span>, fc=<span class="string">"none"</span>, linewidth=<span class="number">1.5</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Step 4: Decorations</span></span><br><span class="line">plt.gca().set(xlim=(<span class="number">0.0</span>, <span class="number">0.1</span>), ylim=(<span class="number">0</span>, <span class="number">90000</span>),</span><br><span class="line">              xlabel=<span class="string">'Area'</span>, ylabel=<span class="string">'Population'</span>)</span><br><span class="line"></span><br><span class="line">plt.xticks(fontsize=<span class="number">12</span>); plt.yticks(fontsize=<span class="number">12</span>)</span><br><span class="line">plt.title(<span class="string">"Bubble Plot with Encircling"</span>, fontsize=<span class="number">22</span>)</span><br><span class="line">plt.legend(fontsize=<span class="number">12</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/TRHX/ImageHosting/ITRHX-PIC/A78/02.png" alt="02"></p><h3 id="【03】带线性回归最佳拟合线的散点图（Scatter-plot-with-linear-regression-line-of-best-fit）"><a href="#【03】带线性回归最佳拟合线的散点图（Scatter-plot-with-linear-regression-line-of-best-fit）" class="headerlink" title="【03】带线性回归最佳拟合线的散点图（Scatter plot with linear regression line of best fit）"></a><font color="##4876FF">【03】带线性回归最佳拟合线的散点图（Scatter plot with linear regression line of best fit）</font></h3><p>如果你想了解两个变量之间是如何变化的，那么最佳拟合线就是常用的方法。下图显示了数据中不同组之间的最佳拟合线的差异。若要禁用分组并只为整个数据集绘制一条最佳拟合线，请从 <code>sns.lmplot()</code> 方法中删除 <code>hue =&#39;cyl&#39;</code> 参数。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Import Data</span></span><br><span class="line">df = pd.read_csv(<span class="string">"https://raw.githubusercontent.com/selva86/datasets/master/mpg_ggplot2.csv"</span>)</span><br><span class="line">df_select = df.loc[df.cyl.isin([<span class="number">4</span>, <span class="number">8</span>]), :]</span><br><span class="line"></span><br><span class="line"><span class="comment"># Plot</span></span><br><span class="line">sns.set_style(<span class="string">"white"</span>)</span><br><span class="line">gridobj = sns.lmplot(x=<span class="string">"displ"</span>, y=<span class="string">"hwy"</span>, hue=<span class="string">"cyl"</span>, data=df_select,</span><br><span class="line">                     height=<span class="number">7</span>, aspect=<span class="number">1.6</span>, robust=<span class="keyword">True</span>, palette=<span class="string">'tab10'</span>,</span><br><span class="line">                     scatter_kws=dict(s=<span class="number">60</span>, linewidths=<span class="number">.7</span>, edgecolors=<span class="string">'black'</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># Decorations</span></span><br><span class="line">gridobj.set(xlim=(<span class="number">0.5</span>, <span class="number">7.5</span>), ylim=(<span class="number">0</span>, <span class="number">50</span>))</span><br><span class="line">plt.title(<span class="string">"Scatterplot with line of best fit grouped by number of cylinders"</span>, fontsize=<span class="number">20</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/TRHX/ImageHosting/ITRHX-PIC/A78/03.png" alt="03"></p><p>针对每一组数据绘制线性回归线（Each regression line in its own column），可以通过在 <code>sns.lmplot()</code> 中设置 <code>col=groupingcolumn</code> 参数来实现，如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Import Data</span></span><br><span class="line">df = pd.read_csv(<span class="string">"https://raw.githubusercontent.com/selva86/datasets/master/mpg_ggplot2.csv"</span>)</span><br><span class="line">df_select = df.loc[df.cyl.isin([<span class="number">4</span>, <span class="number">8</span>]), :]</span><br><span class="line"></span><br><span class="line"><span class="comment"># Each line in its own column</span></span><br><span class="line">sns.set_style(<span class="string">"white"</span>)</span><br><span class="line">gridobj = sns.lmplot(x=<span class="string">"displ"</span>, y=<span class="string">"hwy"</span>,</span><br><span class="line">                     data=df_select,</span><br><span class="line">                     height=<span class="number">7</span>,</span><br><span class="line">                     robust=<span class="keyword">True</span>,</span><br><span class="line">                     palette=<span class="string">'Set1'</span>,</span><br><span class="line">                     col=<span class="string">"cyl"</span>,</span><br><span class="line">                     scatter_kws=dict(s=<span class="number">60</span>, linewidths=<span class="number">.7</span>, edgecolors=<span class="string">'black'</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># Decorations</span></span><br><span class="line">gridobj.set(xlim=(<span class="number">0.5</span>, <span class="number">7.5</span>), ylim=(<span class="number">0</span>, <span class="number">50</span>))</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/TRHX/ImageHosting/ITRHX-PIC/A78/04.png" alt="04"></p><h3 id="【04】抖动图（Jittering-with-stripplot）"><a href="#【04】抖动图（Jittering-with-stripplot）" class="headerlink" title="【04】抖动图（Jittering with stripplot）"></a><font color="##4876FF">【04】抖动图（Jittering with stripplot）</font></h3><p>通常，多个数据点具有完全相同的 X 和 Y 值。 此时多个点绘制会重叠并隐藏。为避免这种情况，可以将数据点稍微抖动，以便可以直观地看到它们。 使用 <code>seaborn</code> 库的 <code>stripplot()</code> 方法可以很方便的实现这个功能。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Import Data</span></span><br><span class="line">df = pd.read_csv(<span class="string">"https://raw.githubusercontent.com/selva86/datasets/master/mpg_ggplot2.csv"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Draw Stripplot</span></span><br><span class="line">fig, ax = plt.subplots(figsize=(<span class="number">16</span>,<span class="number">10</span>), dpi= <span class="number">80</span>)</span><br><span class="line">sns.stripplot(df.cty, df.hwy, jitter=<span class="number">0.25</span>, size=<span class="number">8</span>, ax=ax, linewidth=<span class="number">.5</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Decorations</span></span><br><span class="line">plt.title(<span class="string">'Use jittered plots to avoid overlapping of points'</span>, fontsize=<span class="number">22</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/TRHX/ImageHosting/ITRHX-PIC/A78/05.png" alt="05"></p><h3 id="【05】计数图（Counts-Plot）"><a href="#【05】计数图（Counts-Plot）" class="headerlink" title="【05】计数图（Counts Plot）"></a><font color="##4876FF">【05】计数图（Counts Plot）</font></h3><p>避免点重叠问题的另一个选择是根据点的位置增加点的大小。所以，点的大小越大，它周围的点就越集中。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Import Data</span></span><br><span class="line">df = pd.read_csv(<span class="string">"https://raw.githubusercontent.com/selva86/datasets/master/mpg_ggplot2.csv"</span>)</span><br><span class="line">df_counts = df.groupby([<span class="string">'hwy'</span>, <span class="string">'cty'</span>]).size().reset_index(name=<span class="string">'counts'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Draw Stripplot</span></span><br><span class="line">fig, ax = plt.subplots(figsize=(<span class="number">16</span>,<span class="number">10</span>), dpi= <span class="number">80</span>)    </span><br><span class="line">sns.stripplot(df_counts.cty, df_counts.hwy, size=df_counts.counts*<span class="number">2</span>, ax=ax)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Decorations</span></span><br><span class="line">plt.title(<span class="string">'Counts Plot - Size of circle is bigger as more points overlap'</span>, fontsize=<span class="number">22</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/TRHX/ImageHosting/ITRHX-PIC/A78/06.png" alt="06"></p><h3 id="【06】边缘直方图（Marginal-Histogram）"><a href="#【06】边缘直方图（Marginal-Histogram）" class="headerlink" title="【06】边缘直方图（Marginal Histogram）"></a><font color="##4876FF">【06】边缘直方图（Marginal Histogram）</font></h3><p>边缘直方图是具有沿 X 和 Y 轴变量的直方图。 这用于可视化 X 和 Y 之间的关系以及单独的 X 和 Y 的单变量分布。 这种图经常用于探索性数据分析（EDA）。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Import Data</span></span><br><span class="line">df = pd.read_csv(<span class="string">"https://raw.githubusercontent.com/selva86/datasets/master/mpg_ggplot2.csv"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Create Fig and gridspec</span></span><br><span class="line">fig = plt.figure(figsize=(<span class="number">16</span>, <span class="number">10</span>), dpi= <span class="number">80</span>)</span><br><span class="line">grid = plt.GridSpec(<span class="number">4</span>, <span class="number">4</span>, hspace=<span class="number">0.5</span>, wspace=<span class="number">0.2</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Define the axes</span></span><br><span class="line">ax_main = fig.add_subplot(grid[:<span class="number">-1</span>, :<span class="number">-1</span>])</span><br><span class="line">ax_right = fig.add_subplot(grid[:<span class="number">-1</span>, <span class="number">-1</span>], xticklabels=[], yticklabels=[])</span><br><span class="line">ax_bottom = fig.add_subplot(grid[<span class="number">-1</span>, <span class="number">0</span>:<span class="number">-1</span>], xticklabels=[], yticklabels=[])</span><br><span class="line"></span><br><span class="line"><span class="comment"># Scatterplot on main ax</span></span><br><span class="line">ax_main.scatter(<span class="string">'displ'</span>, <span class="string">'hwy'</span>, s=df.cty*<span class="number">4</span>, c=df.manufacturer.astype(<span class="string">'category'</span>).cat.codes, alpha=<span class="number">.9</span>, data=df, cmap=<span class="string">"tab10"</span>, edgecolors=<span class="string">'gray'</span>, linewidths=<span class="number">.5</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># histogram on the right</span></span><br><span class="line">ax_bottom.hist(df.displ, <span class="number">40</span>, histtype=<span class="string">'stepfilled'</span>, orientation=<span class="string">'vertical'</span>, color=<span class="string">'deeppink'</span>)</span><br><span class="line">ax_bottom.invert_yaxis()</span><br><span class="line"></span><br><span class="line"><span class="comment"># histogram in the bottom</span></span><br><span class="line">ax_right.hist(df.hwy, <span class="number">40</span>, histtype=<span class="string">'stepfilled'</span>, orientation=<span class="string">'horizontal'</span>, color=<span class="string">'deeppink'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Decorations</span></span><br><span class="line">ax_main.set(title=<span class="string">'Scatterplot with Histograms \n displ vs hwy'</span>, xlabel=<span class="string">'displ'</span>, ylabel=<span class="string">'hwy'</span>)</span><br><span class="line">ax_main.title.set_fontsize(<span class="number">20</span>)</span><br><span class="line"><span class="keyword">for</span> item <span class="keyword">in</span> ([ax_main.xaxis.label, ax_main.yaxis.label] + ax_main.get_xticklabels() + ax_main.get_yticklabels()):</span><br><span class="line">    item.set_fontsize(<span class="number">14</span>)</span><br><span class="line"></span><br><span class="line">xlabels = ax_main.get_xticks().tolist()</span><br><span class="line">ax_main.set_xticklabels(xlabels)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/TRHX/ImageHosting/ITRHX-PIC/A78/07.png" alt="07"></p><h3 id="【07】边缘箱形图（Marginal-Boxplot）"><a href="#【07】边缘箱形图（Marginal-Boxplot）" class="headerlink" title="【07】边缘箱形图（Marginal Boxplot）"></a><font color="##4876FF">【07】边缘箱形图（Marginal Boxplot）</font></h3><p>边缘箱形图与边缘直方图具有相似的用途。 然而，箱线图有助于精确定位 X 和 Y 的中位数、第25和第75百分位数。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Import Data</span></span><br><span class="line">df = pd.read_csv(<span class="string">"https://raw.githubusercontent.com/selva86/datasets/master/mpg_ggplot2.csv"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Create Fig and gridspec</span></span><br><span class="line">fig = plt.figure(figsize=(<span class="number">16</span>, <span class="number">10</span>), dpi= <span class="number">80</span>)</span><br><span class="line">grid = plt.GridSpec(<span class="number">4</span>, <span class="number">4</span>, hspace=<span class="number">0.5</span>, wspace=<span class="number">0.2</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Define the axes</span></span><br><span class="line">ax_main = fig.add_subplot(grid[:<span class="number">-1</span>, :<span class="number">-1</span>])</span><br><span class="line">ax_right = fig.add_subplot(grid[:<span class="number">-1</span>, <span class="number">-1</span>], xticklabels=[], yticklabels=[])</span><br><span class="line">ax_bottom = fig.add_subplot(grid[<span class="number">-1</span>, <span class="number">0</span>:<span class="number">-1</span>], xticklabels=[], yticklabels=[])</span><br><span class="line"></span><br><span class="line"><span class="comment"># Scatterplot on main ax</span></span><br><span class="line">ax_main.scatter(<span class="string">'displ'</span>, <span class="string">'hwy'</span>, s=df.cty*<span class="number">5</span>, c=df.manufacturer.astype(<span class="string">'category'</span>).cat.codes, alpha=<span class="number">.9</span>, data=df, cmap=<span class="string">"Set1"</span>, edgecolors=<span class="string">'black'</span>, linewidths=<span class="number">.5</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Add a graph in each part</span></span><br><span class="line">sns.boxplot(df.hwy, ax=ax_right, orient=<span class="string">"v"</span>)</span><br><span class="line">sns.boxplot(df.displ, ax=ax_bottom, orient=<span class="string">"h"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Decorations ------------------</span></span><br><span class="line"><span class="comment"># Remove x axis name for the boxplot</span></span><br><span class="line">ax_bottom.set(xlabel=<span class="string">''</span>)</span><br><span class="line">ax_right.set(ylabel=<span class="string">''</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Main Title, Xlabel and YLabel</span></span><br><span class="line">ax_main.set(title=<span class="string">'Scatterplot with Histograms \n displ vs hwy'</span>, xlabel=<span class="string">'displ'</span>, ylabel=<span class="string">'hwy'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Set font size of different components</span></span><br><span class="line">ax_main.title.set_fontsize(<span class="number">20</span>)</span><br><span class="line"><span class="keyword">for</span> item <span class="keyword">in</span> ([ax_main.xaxis.label, ax_main.yaxis.label] + ax_main.get_xticklabels() + ax_main.get_yticklabels()):</span><br><span class="line">    item.set_fontsize(<span class="number">14</span>)</span><br><span class="line"></span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/TRHX/ImageHosting/ITRHX-PIC/A78/08.png" alt="08"></p><h3 id="【08】相关图（Correllogram）"><a href="#【08】相关图（Correllogram）" class="headerlink" title="【08】相关图（Correllogram）"></a><font color="##4876FF">【08】相关图（Correllogram）</font></h3><p>相关图用于直观地查看给定数据帧（或二维数组）中所有可能的数值变量对之间的相关性度量。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Import Dataset</span></span><br><span class="line">df = pd.read_csv(<span class="string">"https://github.com/selva86/datasets/raw/master/mtcars.csv"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Plot</span></span><br><span class="line">plt.figure(figsize=(<span class="number">12</span>, <span class="number">10</span>), dpi=<span class="number">80</span>)</span><br><span class="line">sns.heatmap(df.corr(), xticklabels=df.corr().columns, yticklabels=df.corr().columns, cmap=<span class="string">'RdYlGn'</span>, center=<span class="number">0</span>, annot=<span class="keyword">True</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Decorations</span></span><br><span class="line">plt.title(<span class="string">'Correlogram of mtcars'</span>, fontsize=<span class="number">22</span>)</span><br><span class="line">plt.xticks(fontsize=<span class="number">12</span>)</span><br><span class="line">plt.yticks(fontsize=<span class="number">12</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/TRHX/ImageHosting/ITRHX-PIC/A78/09.png" alt="09"></p><h3 id="【09】成对图（Pairwise-Plot）"><a href="#【09】成对图（Pairwise-Plot）" class="headerlink" title="【09】成对图（Pairwise Plot）"></a><font color="##4876FF">【09】成对图（Pairwise Plot）</font></h3><p>成对图是探索性分析中最受欢迎的一种方法，用来理解所有可能的数值变量对之间的关系。它是二元分析的必备工具。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Load Dataset</span></span><br><span class="line">df = sns.load_dataset(<span class="string">'iris'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Plot</span></span><br><span class="line">plt.figure(figsize=(<span class="number">10</span>, <span class="number">8</span>), dpi=<span class="number">80</span>)</span><br><span class="line">sns.pairplot(df, kind=<span class="string">"scatter"</span>, hue=<span class="string">"species"</span>, plot_kws=dict(s=<span class="number">80</span>, edgecolor=<span class="string">"white"</span>, linewidth=<span class="number">2.5</span>))</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/TRHX/ImageHosting/ITRHX-PIC/A78/10.png" alt="10"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Load Dataset</span></span><br><span class="line">df = sns.load_dataset(<span class="string">'iris'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Plot</span></span><br><span class="line">plt.figure(figsize=(<span class="number">10</span>, <span class="number">8</span>), dpi=<span class="number">80</span>)</span><br><span class="line">sns.pairplot(df, kind=<span class="string">"reg"</span>, hue=<span class="string">"species"</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/TRHX/ImageHosting/ITRHX-PIC/A78/11.png" alt="11"></p><h2 id="【4x00】偏差（Deviation）"><a href="#【4x00】偏差（Deviation）" class="headerlink" title="【4x00】偏差（Deviation）"></a><font color="#FF0000">【4x00】偏差（Deviation）</font></h2><h3 id="【10】发散型条形图（Diverging-Bars）"><a href="#【10】发散型条形图（Diverging-Bars）" class="headerlink" title="【10】发散型条形图（Diverging Bars）"></a><font color="##4876FF">【10】发散型条形图（Diverging Bars）</font></h3><p>如果您想根据单个指标查看项目的变化情况，并可视化此差异的顺序和数量，那么散型条形图是一个很好的工具。 它有助于快速区分数据组的性能，并且非常直观，并且可以立即传达这一点。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Prepare Data</span></span><br><span class="line">df = pd.read_csv(<span class="string">"https://github.com/selva86/datasets/raw/master/mtcars.csv"</span>)</span><br><span class="line">x = df.loc[:, [<span class="string">'mpg'</span>]]</span><br><span class="line">df[<span class="string">'mpg_z'</span>] = (x - x.mean())/x.std()</span><br><span class="line">df[<span class="string">'colors'</span>] = [<span class="string">'red'</span> <span class="keyword">if</span> x &lt; <span class="number">0</span> <span class="keyword">else</span> <span class="string">'green'</span> <span class="keyword">for</span> x <span class="keyword">in</span> df[<span class="string">'mpg_z'</span>]]</span><br><span class="line">df.sort_values(<span class="string">'mpg_z'</span>, inplace=<span class="keyword">True</span>)</span><br><span class="line">df.reset_index(inplace=<span class="keyword">True</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Draw plot</span></span><br><span class="line">plt.figure(figsize=(<span class="number">14</span>,<span class="number">10</span>), dpi= <span class="number">80</span>)</span><br><span class="line">plt.hlines(y=df.index, xmin=<span class="number">0</span>, xmax=df.mpg_z, color=df.colors, alpha=<span class="number">0.4</span>, linewidth=<span class="number">5</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Decorations</span></span><br><span class="line">plt.gca().set(ylabel=<span class="string">'$Model$'</span>, xlabel=<span class="string">'$Mileage$'</span>)</span><br><span class="line">plt.yticks(df.index, df.cars, fontsize=<span class="number">12</span>)</span><br><span class="line">plt.title(<span class="string">'Diverging Bars of Car Mileage'</span>, fontdict=&#123;<span class="string">'size'</span>:<span class="number">20</span>&#125;)</span><br><span class="line">plt.grid(linestyle=<span class="string">'--'</span>, alpha=<span class="number">0.5</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/TRHX/ImageHosting/ITRHX-PIC/A78/12.png" alt="12"></p><h3 id="【11】发散型文本图（Diverging-Texts）"><a href="#【11】发散型文本图（Diverging-Texts）" class="headerlink" title="【11】发散型文本图（Diverging Texts）"></a><font color="##4876FF">【11】发散型文本图（Diverging Texts）</font></h3><p>发散型文本图与发散型条形图相似，如果你希望以一种美观的方式显示图表中每个项目的值，就可以使用这种方法。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Prepare Data</span></span><br><span class="line">df = pd.read_csv(<span class="string">"https://github.com/selva86/datasets/raw/master/mtcars.csv"</span>)</span><br><span class="line">x = df.loc[:, [<span class="string">'mpg'</span>]]</span><br><span class="line">df[<span class="string">'mpg_z'</span>] = (x - x.mean())/x.std()</span><br><span class="line">df[<span class="string">'colors'</span>] = [<span class="string">'red'</span> <span class="keyword">if</span> x &lt; <span class="number">0</span> <span class="keyword">else</span> <span class="string">'green'</span> <span class="keyword">for</span> x <span class="keyword">in</span> df[<span class="string">'mpg_z'</span>]]</span><br><span class="line">df.sort_values(<span class="string">'mpg_z'</span>, inplace=<span class="keyword">True</span>)</span><br><span class="line">df.reset_index(inplace=<span class="keyword">True</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Draw plot</span></span><br><span class="line">plt.figure(figsize=(<span class="number">14</span>, <span class="number">14</span>), dpi=<span class="number">80</span>)</span><br><span class="line">plt.hlines(y=df.index, xmin=<span class="number">0</span>, xmax=df.mpg_z)</span><br><span class="line"><span class="keyword">for</span> x, y, tex <span class="keyword">in</span> zip(df.mpg_z, df.index, df.mpg_z):</span><br><span class="line">    t = plt.text(x, y, round(tex, <span class="number">2</span>), horizontalalignment=<span class="string">'right'</span> <span class="keyword">if</span> x &lt; <span class="number">0</span> <span class="keyword">else</span> <span class="string">'left'</span>,</span><br><span class="line">                 verticalalignment=<span class="string">'center'</span>, fontdict=&#123;<span class="string">'color'</span>:<span class="string">'red'</span> <span class="keyword">if</span> x &lt; <span class="number">0</span> <span class="keyword">else</span> <span class="string">'green'</span>, <span class="string">'size'</span>:<span class="number">14</span>&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Decorations</span></span><br><span class="line">plt.yticks(df.index, df.cars, fontsize=<span class="number">12</span>)</span><br><span class="line">plt.title(<span class="string">'Diverging Text Bars of Car Mileage'</span>, fontdict=&#123;<span class="string">'size'</span>:<span class="number">20</span>&#125;)</span><br><span class="line">plt.grid(linestyle=<span class="string">'--'</span>, alpha=<span class="number">0.5</span>)</span><br><span class="line">plt.xlim(<span class="number">-2.5</span>, <span class="number">2.5</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/TRHX/ImageHosting/ITRHX-PIC/A78/13.png" alt="13"></p><h3 id="【12】发散型散点图（Diverging-Dot-Plot）"><a href="#【12】发散型散点图（Diverging-Dot-Plot）" class="headerlink" title="【12】发散型散点图（Diverging Dot Plot）"></a><font color="##4876FF">【12】发散型散点图（Diverging Dot Plot）</font></h3><p>发散型散点图类似于发散型条形图。 但是，与发散型条形图相比，没有条形会减少组之间的对比度和差异。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Prepare Data</span></span><br><span class="line">df = pd.read_csv(<span class="string">"https://github.com/selva86/datasets/raw/master/mtcars.csv"</span>)</span><br><span class="line">x = df.loc[:, [<span class="string">'mpg'</span>]]</span><br><span class="line">df[<span class="string">'mpg_z'</span>] = (x - x.mean())/x.std()</span><br><span class="line">df[<span class="string">'colors'</span>] = [<span class="string">'red'</span> <span class="keyword">if</span> x &lt; <span class="number">0</span> <span class="keyword">else</span> <span class="string">'darkgreen'</span> <span class="keyword">for</span> x <span class="keyword">in</span> df[<span class="string">'mpg_z'</span>]]</span><br><span class="line">df.sort_values(<span class="string">'mpg_z'</span>, inplace=<span class="keyword">True</span>)</span><br><span class="line">df.reset_index(inplace=<span class="keyword">True</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Draw plot</span></span><br><span class="line">plt.figure(figsize=(<span class="number">14</span>, <span class="number">16</span>), dpi=<span class="number">80</span>)</span><br><span class="line">plt.scatter(df.mpg_z, df.index, s=<span class="number">450</span>, alpha=<span class="number">.6</span>, color=df.colors)</span><br><span class="line"><span class="keyword">for</span> x, y, tex <span class="keyword">in</span> zip(df.mpg_z, df.index, df.mpg_z):</span><br><span class="line">    t = plt.text(x, y, round(tex, <span class="number">1</span>), horizontalalignment=<span class="string">'center'</span>,</span><br><span class="line">                 verticalalignment=<span class="string">'center'</span>, fontdict=&#123;<span class="string">'color'</span>: <span class="string">'white'</span>&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Decorations</span></span><br><span class="line"><span class="comment"># Lighten borders</span></span><br><span class="line">plt.gca().spines[<span class="string">"top"</span>].set_alpha(<span class="number">.3</span>)</span><br><span class="line">plt.gca().spines[<span class="string">"bottom"</span>].set_alpha(<span class="number">.3</span>)</span><br><span class="line">plt.gca().spines[<span class="string">"right"</span>].set_alpha(<span class="number">.3</span>)</span><br><span class="line">plt.gca().spines[<span class="string">"left"</span>].set_alpha(<span class="number">.3</span>)</span><br><span class="line"></span><br><span class="line">plt.yticks(df.index, df.cars)</span><br><span class="line">plt.title(<span class="string">'Diverging Dotplot of Car Mileage'</span>, fontdict=&#123;<span class="string">'size'</span>: <span class="number">20</span>&#125;)</span><br><span class="line">plt.xlabel(<span class="string">'$Mileage$'</span>)</span><br><span class="line">plt.grid(linestyle=<span class="string">'--'</span>, alpha=<span class="number">0.5</span>)</span><br><span class="line">plt.xlim(<span class="number">-2.5</span>, <span class="number">2.5</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/TRHX/ImageHosting/ITRHX-PIC/A78/14.png" alt="14"></p><h3 id="【13】带标记的发散型棒棒糖图（Diverging-Lollipop-Chart-with-Markers）"><a href="#【13】带标记的发散型棒棒糖图（Diverging-Lollipop-Chart-with-Markers）" class="headerlink" title="【13】带标记的发散型棒棒糖图（Diverging Lollipop Chart with Markers）"></a><font color="##4876FF">【13】带标记的发散型棒棒糖图（Diverging Lollipop Chart with Markers）</font></h3><p>带有标记的棒棒糖提供了一种灵活的方式，强调您想要引起注意的任何重要数据点并在图表中适当地给出推理。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Prepare Data</span></span><br><span class="line">df = pd.read_csv(<span class="string">"https://github.com/selva86/datasets/raw/master/mtcars.csv"</span>)</span><br><span class="line">x = df.loc[:, [<span class="string">'mpg'</span>]]</span><br><span class="line">df[<span class="string">'mpg_z'</span>] = (x - x.mean())/x.std()</span><br><span class="line">df[<span class="string">'colors'</span>] = <span class="string">'black'</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># color fiat differently</span></span><br><span class="line">df.loc[df.cars == <span class="string">'Fiat X1-9'</span>, <span class="string">'colors'</span>] = <span class="string">'darkorange'</span></span><br><span class="line">df.sort_values(<span class="string">'mpg_z'</span>, inplace=<span class="keyword">True</span>)</span><br><span class="line">df.reset_index(inplace=<span class="keyword">True</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># Draw plot</span></span><br><span class="line"><span class="keyword">import</span> matplotlib.patches <span class="keyword">as</span> patches</span><br><span class="line"></span><br><span class="line">plt.figure(figsize=(<span class="number">14</span>, <span class="number">16</span>), dpi=<span class="number">80</span>)</span><br><span class="line">plt.hlines(y=df.index, xmin=<span class="number">0</span>, xmax=df.mpg_z, color=df.colors, alpha=<span class="number">0.4</span>, linewidth=<span class="number">1</span>)</span><br><span class="line">plt.scatter(df.mpg_z, df.index, color=df.colors, s=[<span class="number">600</span> <span class="keyword">if</span> x == <span class="string">'Fiat X1-9'</span> <span class="keyword">else</span> <span class="number">300</span> <span class="keyword">for</span> x <span class="keyword">in</span> df.cars], alpha=<span class="number">0.6</span>)</span><br><span class="line">plt.yticks(df.index, df.cars)</span><br><span class="line">plt.xticks(fontsize=<span class="number">12</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Annotate</span></span><br><span class="line">plt.annotate(<span class="string">'Mercedes Models'</span>, xy=(<span class="number">0.0</span>, <span class="number">11.0</span>), xytext=(<span class="number">1.0</span>, <span class="number">11</span>), xycoords=<span class="string">'data'</span>,</span><br><span class="line">            fontsize=<span class="number">15</span>, ha=<span class="string">'center'</span>, va=<span class="string">'center'</span>,</span><br><span class="line">            bbox=dict(boxstyle=<span class="string">'square'</span>, fc=<span class="string">'firebrick'</span>),</span><br><span class="line">            arrowprops=dict(arrowstyle=<span class="string">'-[, widthB=2.0, lengthB=1.5'</span>, lw=<span class="number">2.0</span>, color=<span class="string">'steelblue'</span>), color=<span class="string">'white'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Add Patches</span></span><br><span class="line">p1 = patches.Rectangle((<span class="number">-2.0</span>, <span class="number">-1</span>), width=<span class="number">.3</span>, height=<span class="number">3</span>, alpha=<span class="number">.2</span>, facecolor=<span class="string">'red'</span>)</span><br><span class="line">p2 = patches.Rectangle((<span class="number">1.5</span>, <span class="number">27</span>), width=<span class="number">.8</span>, height=<span class="number">5</span>, alpha=<span class="number">.2</span>, facecolor=<span class="string">'green'</span>)</span><br><span class="line">plt.gca().add_patch(p1)</span><br><span class="line">plt.gca().add_patch(p2)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Decorate</span></span><br><span class="line">plt.title(<span class="string">'Diverging Bars of Car Mileage'</span>, fontdict=&#123;<span class="string">'size'</span>: <span class="number">20</span>&#125;)</span><br><span class="line">plt.grid(linestyle=<span class="string">'--'</span>, alpha=<span class="number">0.5</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/TRHX/ImageHosting/ITRHX-PIC/A78/15.png" alt="15"></p><h3 id="【14】面积图（Area-Chart）"><a href="#【14】面积图（Area-Chart）" class="headerlink" title="【14】面积图（Area Chart）"></a><font color="##4876FF">【14】面积图（Area Chart）</font></h3><p>通过对轴和线之间的区域进行着色，面积图不仅强调波峰和波谷，还强调波峰和波谷的持续时间。 高点持续时间越长，线下面积越大。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"></span><br><span class="line"><span class="comment"># Prepare Data</span></span><br><span class="line">df = pd.read_csv(<span class="string">"https://github.com/selva86/datasets/raw/master/economics.csv"</span>, parse_dates=[<span class="string">'date'</span>]).head(<span class="number">100</span>)</span><br><span class="line">x = np.arange(df.shape[<span class="number">0</span>])</span><br><span class="line">y_returns = (df.psavert.diff().fillna(<span class="number">0</span>)/df.psavert.shift(<span class="number">1</span>)).fillna(<span class="number">0</span>) * <span class="number">100</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Plot</span></span><br><span class="line">plt.figure(figsize=(<span class="number">16</span>, <span class="number">10</span>), dpi=<span class="number">80</span>)</span><br><span class="line">plt.fill_between(x[<span class="number">1</span>:], y_returns[<span class="number">1</span>:], <span class="number">0</span>, where=y_returns[<span class="number">1</span>:] &gt;= <span class="number">0</span>, facecolor=<span class="string">'green'</span>, interpolate=<span class="keyword">True</span>, alpha=<span class="number">0.7</span>)</span><br><span class="line">plt.fill_between(x[<span class="number">1</span>:], y_returns[<span class="number">1</span>:], <span class="number">0</span>, where=y_returns[<span class="number">1</span>:] &lt;= <span class="number">0</span>, facecolor=<span class="string">'red'</span>, interpolate=<span class="keyword">True</span>, alpha=<span class="number">0.7</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Annotate</span></span><br><span class="line">plt.annotate(<span class="string">'Peak \n1975'</span>, xy=(<span class="number">94.0</span>, <span class="number">21.0</span>), xytext=(<span class="number">88.0</span>, <span class="number">28</span>),</span><br><span class="line">             bbox=dict(boxstyle=<span class="string">'square'</span>, fc=<span class="string">'firebrick'</span>),</span><br><span class="line">             arrowprops=dict(facecolor=<span class="string">'steelblue'</span>, shrink=<span class="number">0.05</span>), fontsize=<span class="number">15</span>, color=<span class="string">'white'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># Decorations</span></span><br><span class="line">xtickvals = [str(m)[:<span class="number">3</span>].upper()+<span class="string">"-"</span>+str(y) <span class="keyword">for</span> y, m <span class="keyword">in</span> zip(df.date.dt.year, df.date.dt.month_name())]</span><br><span class="line">plt.gca().set_xticks(x[::<span class="number">6</span>])</span><br><span class="line">plt.gca().set_xticklabels(xtickvals[::<span class="number">6</span>], rotation=<span class="number">90</span>, fontdict=&#123;<span class="string">'horizontalalignment'</span>: <span class="string">'center'</span>, <span class="string">'verticalalignment'</span>: <span class="string">'center_baseline'</span>&#125;)</span><br><span class="line">plt.ylim(<span class="number">-35</span>, <span class="number">35</span>)</span><br><span class="line">plt.xlim(<span class="number">1</span>, <span class="number">100</span>)</span><br><span class="line">plt.title(<span class="string">"Month Economics Return %"</span>, fontsize=<span class="number">22</span>)</span><br><span class="line">plt.ylabel(<span class="string">'Monthly returns %'</span>)</span><br><span class="line">plt.grid(alpha=<span class="number">0.5</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/TRHX/ImageHosting/ITRHX-PIC/A78/16.png" alt="16"></p><h2 id="【5x00】排序（Ranking）"><a href="#【5x00】排序（Ranking）" class="headerlink" title="【5x00】排序（Ranking）"></a><font color="#FF0000">【5x00】排序（Ranking）</font></h2><h3 id="【15】有序条形图（Ordered-Bar-Chart）"><a href="#【15】有序条形图（Ordered-Bar-Chart）" class="headerlink" title="【15】有序条形图（Ordered Bar Chart）"></a><font color="##4876FF">【15】有序条形图（Ordered Bar Chart）</font></h3><p>有序条形图有效地传达了项目的排序顺序。在图表上方添加度量标准的值，用户就可以从图表本身获得精确的信息。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Prepare Data</span></span><br><span class="line">df_raw = pd.read_csv(<span class="string">"https://github.com/selva86/datasets/raw/master/mpg_ggplot2.csv"</span>)</span><br><span class="line">df = df_raw[[<span class="string">'cty'</span>, <span class="string">'manufacturer'</span>]].groupby(<span class="string">'manufacturer'</span>).apply(<span class="keyword">lambda</span> x: x.mean())</span><br><span class="line">df.sort_values(<span class="string">'cty'</span>, inplace=<span class="keyword">True</span>)</span><br><span class="line">df.reset_index(inplace=<span class="keyword">True</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Draw plot</span></span><br><span class="line"><span class="keyword">import</span> matplotlib.patches <span class="keyword">as</span> patches</span><br><span class="line"></span><br><span class="line">fig, ax = plt.subplots(figsize=(<span class="number">16</span>,<span class="number">10</span>), facecolor=<span class="string">'white'</span>, dpi= <span class="number">80</span>)</span><br><span class="line">ax.vlines(x=df.index, ymin=<span class="number">0</span>, ymax=df.cty, color=<span class="string">'firebrick'</span>, alpha=<span class="number">0.7</span>, linewidth=<span class="number">20</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Annotate Text</span></span><br><span class="line"><span class="keyword">for</span> i, cty <span class="keyword">in</span> enumerate(df.cty):</span><br><span class="line">    ax.text(i, cty+<span class="number">0.5</span>, round(cty, <span class="number">1</span>), horizontalalignment=<span class="string">'center'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># Title, Label, Ticks and Ylim</span></span><br><span class="line">ax.set_title(<span class="string">'Bar Chart for Highway Mileage'</span>, fontdict=&#123;<span class="string">'size'</span>:<span class="number">22</span>&#125;)</span><br><span class="line">ax.set(ylabel=<span class="string">'Miles Per Gallon'</span>, ylim=(<span class="number">0</span>, <span class="number">30</span>))</span><br><span class="line">plt.xticks(df.index, df.manufacturer.str.upper(), rotation=<span class="number">60</span>, horizontalalignment=<span class="string">'right'</span>, fontsize=<span class="number">12</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Add patches to color the X axis labels</span></span><br><span class="line">p1 = patches.Rectangle((<span class="number">.57</span>, <span class="number">-0.005</span>), width=<span class="number">.33</span>, height=<span class="number">.13</span>, alpha=<span class="number">.1</span>, facecolor=<span class="string">'green'</span>, transform=fig.transFigure)</span><br><span class="line">p2 = patches.Rectangle((<span class="number">.124</span>, <span class="number">-0.005</span>), width=<span class="number">.446</span>, height=<span class="number">.13</span>, alpha=<span class="number">.1</span>, facecolor=<span class="string">'red'</span>, transform=fig.transFigure)</span><br><span class="line">fig.add_artist(p1)</span><br><span class="line">fig.add_artist(p2)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/TRHX/ImageHosting/ITRHX-PIC/A78/17.png" alt="17"></p><h3 id="【16】棒棒糖图（Lollipop-Chart）"><a href="#【16】棒棒糖图（Lollipop-Chart）" class="headerlink" title="【16】棒棒糖图（Lollipop Chart）"></a><font color="##4876FF">【16】棒棒糖图（Lollipop Chart）</font></h3><p>棒棒糖图表以一种视觉上令人愉悦的方式提供与有序条形图类似的目的。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Prepare Data</span></span><br><span class="line">df_raw = pd.read_csv(<span class="string">"https://github.com/selva86/datasets/raw/master/mpg_ggplot2.csv"</span>)</span><br><span class="line">df = df_raw[[<span class="string">'cty'</span>, <span class="string">'manufacturer'</span>]].groupby(<span class="string">'manufacturer'</span>).apply(<span class="keyword">lambda</span> x: x.mean())</span><br><span class="line">df.sort_values(<span class="string">'cty'</span>, inplace=<span class="keyword">True</span>)</span><br><span class="line">df.reset_index(inplace=<span class="keyword">True</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Draw plot</span></span><br><span class="line">fig, ax = plt.subplots(figsize=(<span class="number">16</span>, <span class="number">10</span>), dpi=<span class="number">80</span>)</span><br><span class="line">ax.vlines(x=df.index, ymin=<span class="number">0</span>, ymax=df.cty, color=<span class="string">'firebrick'</span>, alpha=<span class="number">0.7</span>, linewidth=<span class="number">2</span>)</span><br><span class="line">ax.scatter(x=df.index, y=df.cty, s=<span class="number">75</span>, color=<span class="string">'firebrick'</span>, alpha=<span class="number">0.7</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Title, Label, Ticks and Ylim</span></span><br><span class="line">ax.set_title(<span class="string">'Lollipop Chart for Highway Mileage'</span>, fontdict=&#123;<span class="string">'size'</span>: <span class="number">22</span>&#125;)</span><br><span class="line">ax.set_ylabel(<span class="string">'Miles Per Gallon'</span>)</span><br><span class="line">ax.set_xticks(df.index)</span><br><span class="line">ax.set_xticklabels(df.manufacturer.str.upper(), rotation=<span class="number">60</span>, fontdict=&#123;<span class="string">'horizontalalignment'</span>: <span class="string">'right'</span>, <span class="string">'size'</span>: <span class="number">12</span>&#125;)</span><br><span class="line">ax.set_ylim(<span class="number">0</span>, <span class="number">30</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Annotate</span></span><br><span class="line"><span class="keyword">for</span> row <span class="keyword">in</span> df.itertuples():</span><br><span class="line">    ax.text(row.Index, row.cty+<span class="number">.5</span>, s=round(row.cty, <span class="number">2</span>), horizontalalignment=<span class="string">'center'</span>, verticalalignment=<span class="string">'bottom'</span>, fontsize=<span class="number">14</span>)</span><br><span class="line"></span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/TRHX/ImageHosting/ITRHX-PIC/A78/18.png" alt="18"></p><h3 id="【17】点图（Dot-Plot）"><a href="#【17】点图（Dot-Plot）" class="headerlink" title="【17】点图（Dot Plot）"></a><font color="##4876FF">【17】点图（Dot Plot）</font></h3><p>点图可以表示项目的排名顺序。由于它是沿水平轴对齐的，所以可以更容易地看到点之间的距离。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Prepare Data</span></span><br><span class="line">df_raw = pd.read_csv(<span class="string">"https://github.com/selva86/datasets/raw/master/mpg_ggplot2.csv"</span>)</span><br><span class="line">df = df_raw[[<span class="string">'cty'</span>, <span class="string">'manufacturer'</span>]].groupby(<span class="string">'manufacturer'</span>).apply(<span class="keyword">lambda</span> x: x.mean())</span><br><span class="line">df.sort_values(<span class="string">'cty'</span>, inplace=<span class="keyword">True</span>)</span><br><span class="line">df.reset_index(inplace=<span class="keyword">True</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Draw plot</span></span><br><span class="line">fig, ax = plt.subplots(figsize=(<span class="number">16</span>, <span class="number">10</span>), dpi=<span class="number">80</span>)</span><br><span class="line">ax.hlines(y=df.index, xmin=<span class="number">11</span>, xmax=<span class="number">26</span>, color=<span class="string">'gray'</span>, alpha=<span class="number">0.7</span>, linewidth=<span class="number">1</span>, linestyles=<span class="string">'dashdot'</span>)</span><br><span class="line">ax.scatter(y=df.index, x=df.cty, s=<span class="number">75</span>, color=<span class="string">'firebrick'</span>, alpha=<span class="number">0.7</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Title, Label, Ticks and Ylim</span></span><br><span class="line">ax.set_title(<span class="string">'Dot Plot for Highway Mileage'</span>, fontdict=&#123;<span class="string">'size'</span>: <span class="number">22</span>&#125;)</span><br><span class="line">ax.set_xlabel(<span class="string">'Miles Per Gallon'</span>)</span><br><span class="line">ax.set_yticks(df.index)</span><br><span class="line">ax.set_yticklabels(df.manufacturer.str.title(), fontdict=&#123;<span class="string">'horizontalalignment'</span>: <span class="string">'right'</span>&#125;)</span><br><span class="line">ax.set_xlim(<span class="number">10</span>, <span class="number">27</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/TRHX/ImageHosting/ITRHX-PIC/A78/19.png" alt="19"></p><h3 id="【18】坡度图（Slope-Chart）"><a href="#【18】坡度图（Slope-Chart）" class="headerlink" title="【18】坡度图（Slope Chart）"></a><font color="##4876FF">【18】坡度图（Slope Chart）</font></h3><p>坡度图最适合比较给定人员/项目的“前”和“后”位置。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> matplotlib.lines <span class="keyword">as</span> mlines</span><br><span class="line"></span><br><span class="line"><span class="comment"># Import Data</span></span><br><span class="line">df = pd.read_csv(<span class="string">"https://raw.githubusercontent.com/selva86/datasets/master/gdppercap.csv"</span>)</span><br><span class="line"></span><br><span class="line">left_label = [str(c) + <span class="string">', '</span> + str(round(y)) <span class="keyword">for</span> c, y <span class="keyword">in</span> zip(df.continent, df[<span class="string">'1952'</span>])]</span><br><span class="line">right_label = [str(c) + <span class="string">', '</span> + str(round(y)) <span class="keyword">for</span> c, y <span class="keyword">in</span> zip(df.continent, df[<span class="string">'1957'</span>])]</span><br><span class="line">klass = [<span class="string">'red'</span> <span class="keyword">if</span> (y1 - y2) &lt; <span class="number">0</span> <span class="keyword">else</span> <span class="string">'green'</span> <span class="keyword">for</span> y1, y2 <span class="keyword">in</span> zip(df[<span class="string">'1952'</span>], df[<span class="string">'1957'</span>])]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># draw line</span></span><br><span class="line"><span class="comment"># https://stackoverflow.com/questions/36470343/how-to-draw-a-line-with-matplotlib/36479941</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">newline</span><span class="params">(p1, p2, color=<span class="string">'black'</span>)</span>:</span></span><br><span class="line">    ax = plt.gca()</span><br><span class="line">    l = mlines.Line2D([p1[<span class="number">0</span>], p2[<span class="number">0</span>]], [p1[<span class="number">1</span>], p2[<span class="number">1</span>]], color=<span class="string">'red'</span> <span class="keyword">if</span> p1[<span class="number">1</span>] - p2[<span class="number">1</span>] &gt; <span class="number">0</span> <span class="keyword">else</span> <span class="string">'green'</span>, marker=<span class="string">'o'</span>,</span><br><span class="line">                      markersize=<span class="number">6</span>)</span><br><span class="line">    ax.add_line(l)</span><br><span class="line">    <span class="keyword">return</span> l</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">fig, ax = plt.subplots(<span class="number">1</span>, <span class="number">1</span>, figsize=(<span class="number">14</span>, <span class="number">14</span>), dpi=<span class="number">80</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Vertical Lines</span></span><br><span class="line">ax.vlines(x=<span class="number">1</span>, ymin=<span class="number">500</span>, ymax=<span class="number">13000</span>, color=<span class="string">'black'</span>, alpha=<span class="number">0.7</span>, linewidth=<span class="number">1</span>, linestyles=<span class="string">'dotted'</span>)</span><br><span class="line">ax.vlines(x=<span class="number">3</span>, ymin=<span class="number">500</span>, ymax=<span class="number">13000</span>, color=<span class="string">'black'</span>, alpha=<span class="number">0.7</span>, linewidth=<span class="number">1</span>, linestyles=<span class="string">'dotted'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Points</span></span><br><span class="line">ax.scatter(y=df[<span class="string">'1952'</span>], x=np.repeat(<span class="number">1</span>, df.shape[<span class="number">0</span>]), s=<span class="number">10</span>, color=<span class="string">'black'</span>, alpha=<span class="number">0.7</span>)</span><br><span class="line">ax.scatter(y=df[<span class="string">'1957'</span>], x=np.repeat(<span class="number">3</span>, df.shape[<span class="number">0</span>]), s=<span class="number">10</span>, color=<span class="string">'black'</span>, alpha=<span class="number">0.7</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Line Segmentsand Annotation</span></span><br><span class="line"><span class="keyword">for</span> p1, p2, c <span class="keyword">in</span> zip(df[<span class="string">'1952'</span>], df[<span class="string">'1957'</span>], df[<span class="string">'continent'</span>]):</span><br><span class="line">    newline([<span class="number">1</span>, p1], [<span class="number">3</span>, p2])</span><br><span class="line">    ax.text(<span class="number">1</span> - <span class="number">0.05</span>, p1, c + <span class="string">', '</span> + str(round(p1)), horizontalalignment=<span class="string">'right'</span>, verticalalignment=<span class="string">'center'</span>,</span><br><span class="line">            fontdict=&#123;<span class="string">'size'</span>: <span class="number">14</span>&#125;)</span><br><span class="line">    ax.text(<span class="number">3</span> + <span class="number">0.05</span>, p2, c + <span class="string">', '</span> + str(round(p2)), horizontalalignment=<span class="string">'left'</span>, verticalalignment=<span class="string">'center'</span>,</span><br><span class="line">            fontdict=&#123;<span class="string">'size'</span>: <span class="number">14</span>&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 'Before' and 'After' Annotations</span></span><br><span class="line">ax.text(<span class="number">1</span> - <span class="number">0.05</span>, <span class="number">13000</span>, <span class="string">'BEFORE'</span>, horizontalalignment=<span class="string">'right'</span>, verticalalignment=<span class="string">'center'</span>,</span><br><span class="line">        fontdict=&#123;<span class="string">'size'</span>: <span class="number">18</span>, <span class="string">'weight'</span>: <span class="number">700</span>&#125;)</span><br><span class="line">ax.text(<span class="number">3</span> + <span class="number">0.05</span>, <span class="number">13000</span>, <span class="string">'AFTER'</span>, horizontalalignment=<span class="string">'left'</span>, verticalalignment=<span class="string">'center'</span>,</span><br><span class="line">        fontdict=&#123;<span class="string">'size'</span>: <span class="number">18</span>, <span class="string">'weight'</span>: <span class="number">700</span>&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Decoration</span></span><br><span class="line">ax.set_title(<span class="string">"Slopechart: Comparing GDP Per Capita between 1952 vs 1957"</span>, fontdict=&#123;<span class="string">'size'</span>: <span class="number">22</span>&#125;)</span><br><span class="line">ax.set(xlim=(<span class="number">0</span>, <span class="number">4</span>), ylim=(<span class="number">0</span>, <span class="number">14000</span>), ylabel=<span class="string">'Mean GDP Per Capita'</span>)</span><br><span class="line">ax.set_xticks([<span class="number">1</span>, <span class="number">3</span>])</span><br><span class="line">ax.set_xticklabels([<span class="string">"1952"</span>, <span class="string">"1957"</span>])</span><br><span class="line">plt.yticks(np.arange(<span class="number">500</span>, <span class="number">13000</span>, <span class="number">2000</span>), fontsize=<span class="number">12</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Lighten borders</span></span><br><span class="line">plt.gca().spines[<span class="string">"top"</span>].set_alpha(<span class="number">.0</span>)</span><br><span class="line">plt.gca().spines[<span class="string">"bottom"</span>].set_alpha(<span class="number">.0</span>)</span><br><span class="line">plt.gca().spines[<span class="string">"right"</span>].set_alpha(<span class="number">.0</span>)</span><br><span class="line">plt.gca().spines[<span class="string">"left"</span>].set_alpha(<span class="number">.0</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/TRHX/ImageHosting/ITRHX-PIC/A78/20.png" alt="20"></p><h3 id="【19】哑铃图（Dumbbell-Plot）"><a href="#【19】哑铃图（Dumbbell-Plot）" class="headerlink" title="【19】哑铃图（Dumbbell Plot）"></a><font color="##4876FF">【19】哑铃图（Dumbbell Plot）</font></h3><p>哑铃图传达了各种项目的“前”和“后”位置以及项目的等级顺序。如果您希望可视化特定项目/计划对不同对象的影响，那么它非常有用。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> matplotlib.lines <span class="keyword">as</span> mlines</span><br><span class="line"></span><br><span class="line"><span class="comment"># Import Data</span></span><br><span class="line">df = pd.read_csv(<span class="string">"https://raw.githubusercontent.com/selva86/datasets/master/health.csv"</span>)</span><br><span class="line">df.sort_values(<span class="string">'pct_2014'</span>, inplace=<span class="keyword">True</span>)</span><br><span class="line">df.reset_index(inplace=<span class="keyword">True</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># Func to draw line segment</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">newline</span><span class="params">(p1, p2, color=<span class="string">'black'</span>)</span>:</span></span><br><span class="line">    ax = plt.gca()</span><br><span class="line">    l = mlines.Line2D([p1[<span class="number">0</span>], p2[<span class="number">0</span>]], [p1[<span class="number">1</span>], p2[<span class="number">1</span>]], color=<span class="string">'skyblue'</span>)</span><br><span class="line">    ax.add_line(l)</span><br><span class="line">    <span class="keyword">return</span> l</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># Figure and Axes</span></span><br><span class="line">fig, ax = plt.subplots(<span class="number">1</span>, <span class="number">1</span>, figsize=(<span class="number">14</span>, <span class="number">14</span>), facecolor=<span class="string">'#f7f7f7'</span>, dpi=<span class="number">80</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Vertical Lines</span></span><br><span class="line">ax.vlines(x=<span class="number">.05</span>, ymin=<span class="number">0</span>, ymax=<span class="number">26</span>, color=<span class="string">'black'</span>, alpha=<span class="number">1</span>, linewidth=<span class="number">1</span>, linestyles=<span class="string">'dotted'</span>)</span><br><span class="line">ax.vlines(x=<span class="number">.10</span>, ymin=<span class="number">0</span>, ymax=<span class="number">26</span>, color=<span class="string">'black'</span>, alpha=<span class="number">1</span>, linewidth=<span class="number">1</span>, linestyles=<span class="string">'dotted'</span>)</span><br><span class="line">ax.vlines(x=<span class="number">.15</span>, ymin=<span class="number">0</span>, ymax=<span class="number">26</span>, color=<span class="string">'black'</span>, alpha=<span class="number">1</span>, linewidth=<span class="number">1</span>, linestyles=<span class="string">'dotted'</span>)</span><br><span class="line">ax.vlines(x=<span class="number">.20</span>, ymin=<span class="number">0</span>, ymax=<span class="number">26</span>, color=<span class="string">'black'</span>, alpha=<span class="number">1</span>, linewidth=<span class="number">1</span>, linestyles=<span class="string">'dotted'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Points</span></span><br><span class="line">ax.scatter(y=df[<span class="string">'index'</span>], x=df[<span class="string">'pct_2013'</span>], s=<span class="number">50</span>, color=<span class="string">'#0e668b'</span>, alpha=<span class="number">0.7</span>)</span><br><span class="line">ax.scatter(y=df[<span class="string">'index'</span>], x=df[<span class="string">'pct_2014'</span>], s=<span class="number">50</span>, color=<span class="string">'#a3c4dc'</span>, alpha=<span class="number">0.7</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Line Segments</span></span><br><span class="line"><span class="keyword">for</span> i, p1, p2 <span class="keyword">in</span> zip(df[<span class="string">'index'</span>], df[<span class="string">'pct_2013'</span>], df[<span class="string">'pct_2014'</span>]):</span><br><span class="line">    newline([p1, i], [p2, i])</span><br><span class="line"></span><br><span class="line"><span class="comment"># Decoration</span></span><br><span class="line">ax.set_facecolor(<span class="string">'#f7f7f7'</span>)</span><br><span class="line">ax.set_title(<span class="string">"Dumbell Chart: Pct Change - 2013 vs 2014"</span>, fontdict=&#123;<span class="string">'size'</span>: <span class="number">22</span>&#125;)</span><br><span class="line">ax.set(xlim=(<span class="number">0</span>, <span class="number">.25</span>), ylim=(<span class="number">-1</span>, <span class="number">27</span>), ylabel=<span class="string">'Mean GDP Per Capita'</span>)</span><br><span class="line">ax.set_xticks([<span class="number">.05</span>, <span class="number">.1</span>, <span class="number">.15</span>, <span class="number">.20</span>])</span><br><span class="line">ax.set_xticklabels([<span class="string">'5%'</span>, <span class="string">'15%'</span>, <span class="string">'20%'</span>, <span class="string">'25%'</span>])</span><br><span class="line">ax.set_xticklabels([<span class="string">'5%'</span>, <span class="string">'15%'</span>, <span class="string">'20%'</span>, <span class="string">'25%'</span>])</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/TRHX/ImageHosting/ITRHX-PIC/A78/21.png" alt="21"></p><h2 id="【6x00】分布（Distribution）"><a href="#【6x00】分布（Distribution）" class="headerlink" title="【6x00】分布（Distribution）"></a><font color="#FF0000">【6x00】分布（Distribution）</font></h2><h3 id="【20】连续变量的直方图（Histogram-for-Continuous-Variable）"><a href="#【20】连续变量的直方图（Histogram-for-Continuous-Variable）" class="headerlink" title="【20】连续变量的直方图（Histogram for Continuous Variable）"></a><font color="##4876FF">【20】连续变量的直方图（Histogram for Continuous Variable）</font></h3><p>连续变量的直方图显示给定变量的频率分布。下面的图表基于分类变量对频率条进行分组，从而更深入地了解连续变量和分类变量。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Import Data</span></span><br><span class="line">df = pd.read_csv(<span class="string">"https://github.com/selva86/datasets/raw/master/mpg_ggplot2.csv"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Prepare data</span></span><br><span class="line">x_var = <span class="string">'displ'</span></span><br><span class="line">groupby_var = <span class="string">'class'</span></span><br><span class="line">df_agg = df.loc[:, [x_var, groupby_var]].groupby(groupby_var)</span><br><span class="line">vals = [df[x_var].values.tolist() <span class="keyword">for</span> i, df <span class="keyword">in</span> df_agg]</span><br><span class="line"></span><br><span class="line"><span class="comment"># Draw</span></span><br><span class="line">plt.figure(figsize=(<span class="number">16</span>, <span class="number">9</span>), dpi=<span class="number">80</span>)</span><br><span class="line">colors = [plt.cm.Spectral(i / float(len(vals) - <span class="number">1</span>)) <span class="keyword">for</span> i <span class="keyword">in</span> range(len(vals))]</span><br><span class="line">n, bins, patches = plt.hist(vals, <span class="number">30</span>, stacked=<span class="keyword">True</span>, density=<span class="keyword">False</span>, color=colors[:len(vals)])</span><br><span class="line"></span><br><span class="line"><span class="comment"># Decoration</span></span><br><span class="line">plt.legend(&#123;group: col <span class="keyword">for</span> group, col <span class="keyword">in</span> zip(np.unique(df[groupby_var]).tolist(), colors[:len(vals)])&#125;)</span><br><span class="line">plt.title(<span class="string">f"Stacked Histogram of $<span class="subst">&#123;x_var&#125;</span>$ colored by $<span class="subst">&#123;groupby_var&#125;</span>$"</span>, fontsize=<span class="number">22</span>)</span><br><span class="line">plt.xlabel(x_var)</span><br><span class="line">plt.ylabel(<span class="string">"Frequency"</span>)</span><br><span class="line">plt.ylim(<span class="number">0</span>, <span class="number">25</span>)</span><br><span class="line">plt.xticks(ticks=bins[::<span class="number">3</span>], labels=[round(b, <span class="number">1</span>) <span class="keyword">for</span> b <span class="keyword">in</span> bins[::<span class="number">3</span>]])</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/TRHX/ImageHosting/ITRHX-PIC/A78/22.png" alt="22"></p><h3 id="【21】分类变量的直方图（Histogram-for-Categorical-Variable）"><a href="#【21】分类变量的直方图（Histogram-for-Categorical-Variable）" class="headerlink" title="【21】分类变量的直方图（Histogram for Categorical Variable）"></a><font color="##4876FF">【21】分类变量的直方图（Histogram for Categorical Variable）</font></h3><p>分类变量的直方图显示该变量的频率分布。通过给条形图上色，您可以将分布与表示颜色的另一个类型变量相关联。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Import Data</span></span><br><span class="line">df = pd.read_csv(<span class="string">"https://github.com/selva86/datasets/raw/master/mpg_ggplot2.csv"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Prepare data</span></span><br><span class="line">x_var = <span class="string">'manufacturer'</span></span><br><span class="line">groupby_var = <span class="string">'class'</span></span><br><span class="line">df_agg = df.loc[:, [x_var, groupby_var]].groupby(groupby_var)</span><br><span class="line">vals = [df[x_var].values.tolist() <span class="keyword">for</span> i, df <span class="keyword">in</span> df_agg]</span><br><span class="line"></span><br><span class="line"><span class="comment"># Draw</span></span><br><span class="line">plt.figure(figsize=(<span class="number">16</span>, <span class="number">9</span>), dpi=<span class="number">80</span>)</span><br><span class="line">colors = [plt.cm.Spectral(i / float(len(vals) - <span class="number">1</span>)) <span class="keyword">for</span> i <span class="keyword">in</span> range(len(vals))]</span><br><span class="line">n, bins, patches = plt.hist(vals, df[x_var].unique().__len__(), stacked=<span class="keyword">True</span>, density=<span class="keyword">False</span>, color=colors[:len(vals)])</span><br><span class="line"></span><br><span class="line"><span class="comment"># Decoration</span></span><br><span class="line">plt.legend(&#123;group: col <span class="keyword">for</span> group, col <span class="keyword">in</span> zip(np.unique(df[groupby_var]).tolist(), colors[:len(vals)])&#125;)</span><br><span class="line">plt.title(<span class="string">f"Stacked Histogram of $<span class="subst">&#123;x_var&#125;</span>$ colored by $<span class="subst">&#123;groupby_var&#125;</span>$"</span>, fontsize=<span class="number">22</span>)</span><br><span class="line">plt.xlabel(x_var)</span><br><span class="line">plt.ylabel(<span class="string">"Frequency"</span>)</span><br><span class="line">plt.ylim(<span class="number">0</span>, <span class="number">40</span>)</span><br><span class="line">plt.xticks(ticks=bins, labels=np.unique(df[x_var]).tolist(), rotation=<span class="number">90</span>, horizontalalignment=<span class="string">'left'</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/TRHX/ImageHosting/ITRHX-PIC/A78/23.png" alt="23"></p><h3 id="【22】密度图（Density-Plot）"><a href="#【22】密度图（Density-Plot）" class="headerlink" title="【22】密度图（Density Plot）"></a><font color="##4876FF">【22】密度图（Density Plot）</font></h3><p>密度图是连续变量分布可视化的常用工具。通过按“response”变量对它们进行分组，您可以检查 X 和 Y 之间的关系。如果出于代表性目的来描述城市里程分布如何随气缸数而变化，请参见下面的情况。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Import Data</span></span><br><span class="line">df = pd.read_csv(<span class="string">"https://github.com/selva86/datasets/raw/master/mpg_ggplot2.csv"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Draw Plot</span></span><br><span class="line">plt.figure(figsize=(<span class="number">16</span>, <span class="number">10</span>), dpi=<span class="number">80</span>)</span><br><span class="line">sns.kdeplot(df.loc[df[<span class="string">'cyl'</span>] == <span class="number">4</span>, <span class="string">"cty"</span>], shade=<span class="keyword">True</span>, color=<span class="string">"g"</span>, label=<span class="string">"Cyl=4"</span>, alpha=<span class="number">.7</span>)</span><br><span class="line">sns.kdeplot(df.loc[df[<span class="string">'cyl'</span>] == <span class="number">5</span>, <span class="string">"cty"</span>], shade=<span class="keyword">True</span>, color=<span class="string">"deeppink"</span>, label=<span class="string">"Cyl=5"</span>, alpha=<span class="number">.7</span>)</span><br><span class="line">sns.kdeplot(df.loc[df[<span class="string">'cyl'</span>] == <span class="number">6</span>, <span class="string">"cty"</span>], shade=<span class="keyword">True</span>, color=<span class="string">"dodgerblue"</span>, label=<span class="string">"Cyl=6"</span>, alpha=<span class="number">.7</span>)</span><br><span class="line">sns.kdeplot(df.loc[df[<span class="string">'cyl'</span>] == <span class="number">8</span>, <span class="string">"cty"</span>], shade=<span class="keyword">True</span>, color=<span class="string">"orange"</span>, label=<span class="string">"Cyl=8"</span>, alpha=<span class="number">.7</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Decoration</span></span><br><span class="line">plt.title(<span class="string">'Density Plot of City Mileage by n_Cylinders'</span>, fontsize=<span class="number">22</span>)</span><br><span class="line">plt.legend()</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/TRHX/ImageHosting/ITRHX-PIC/A78/24.png" alt="24"></p><h3 id="【23】直方图密度曲线（Density-Curves-with-Histogram）"><a href="#【23】直方图密度曲线（Density-Curves-with-Histogram）" class="headerlink" title="【23】直方图密度曲线（Density Curves with Histogram）"></a><font color="##4876FF">【23】直方图密度曲线（Density Curves with Histogram）</font></h3><p>具有直方图的密度曲线将两个图所传达的信息集合在一起，因此您可以将它们都放在一个图形中，而不是放在两个图形中。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Import Data</span></span><br><span class="line">df = pd.read_csv(<span class="string">"https://github.com/selva86/datasets/raw/master/mpg_ggplot2.csv"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Draw Plot</span></span><br><span class="line">plt.figure(figsize=(<span class="number">13</span>, <span class="number">10</span>), dpi=<span class="number">80</span>)</span><br><span class="line">sns.distplot(df.loc[df[<span class="string">'class'</span>] == <span class="string">'compact'</span>, <span class="string">"cty"</span>], color=<span class="string">"dodgerblue"</span>, label=<span class="string">"Compact"</span>, hist_kws=&#123;<span class="string">'alpha'</span>: <span class="number">.7</span>&#125;,</span><br><span class="line">             kde_kws=&#123;<span class="string">'linewidth'</span>: <span class="number">3</span>&#125;)</span><br><span class="line">sns.distplot(df.loc[df[<span class="string">'class'</span>] == <span class="string">'suv'</span>, <span class="string">"cty"</span>], color=<span class="string">"orange"</span>, label=<span class="string">"SUV"</span>, hist_kws=&#123;<span class="string">'alpha'</span>: <span class="number">.7</span>&#125;,</span><br><span class="line">             kde_kws=&#123;<span class="string">'linewidth'</span>: <span class="number">3</span>&#125;)</span><br><span class="line">sns.distplot(df.loc[df[<span class="string">'class'</span>] == <span class="string">'minivan'</span>, <span class="string">"cty"</span>], color=<span class="string">"g"</span>, label=<span class="string">"minivan"</span>, hist_kws=&#123;<span class="string">'alpha'</span>: <span class="number">.7</span>&#125;,</span><br><span class="line">             kde_kws=&#123;<span class="string">'linewidth'</span>: <span class="number">3</span>&#125;)</span><br><span class="line">plt.ylim(<span class="number">0</span>, <span class="number">0.35</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Decoration</span></span><br><span class="line">plt.title(<span class="string">'Density Plot of City Mileage by Vehicle Type'</span>, fontsize=<span class="number">22</span>)</span><br><span class="line">plt.legend()</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/TRHX/ImageHosting/ITRHX-PIC/A78/25.png" alt="25"></p><h3 id="【24】山峰叠峦图-欢乐图（Joy-Plot）"><a href="#【24】山峰叠峦图-欢乐图（Joy-Plot）" class="headerlink" title="【24】山峰叠峦图 / 欢乐图（Joy Plot）"></a><font color="##4876FF">【24】山峰叠峦图 / 欢乐图（Joy Plot）</font></h3><p>Joy Plot 允许不同组的密度曲线重叠，这是一种很好的可视化方法，可以直观地显示大量分组之间的关系。它看起来赏心悦目，清楚地传达了正确的信息。它可以使用基于 <code>matplotlib</code> 的 <code>joypy</code> 包轻松构建。</p><p>【译者 TRHX 注：Joy Plot 看起来就像是山峰叠峦，山峦起伏，层次分明，但取名为 Joy，欢乐的意思，所以不太好翻译，在使用该方法时要先安装 joypy 库】</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># !pip install joypy</span></span><br><span class="line"><span class="comment"># Import Data</span></span><br><span class="line"><span class="keyword">import</span> joypy</span><br><span class="line"><span class="comment"># 原文没有 import joypy，译者 TRHX 添加</span></span><br><span class="line"></span><br><span class="line">mpg = pd.read_csv(<span class="string">"https://github.com/selva86/datasets/raw/master/mpg_ggplot2.csv"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Draw Plot</span></span><br><span class="line">plt.figure(figsize=(<span class="number">16</span>, <span class="number">10</span>), dpi=<span class="number">80</span>)</span><br><span class="line">fig, axes = joypy.joyplot(mpg, column=[<span class="string">'hwy'</span>, <span class="string">'cty'</span>], by=<span class="string">"class"</span>, ylim=<span class="string">'own'</span>, figsize=(<span class="number">14</span>, <span class="number">10</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># Decoration</span></span><br><span class="line">plt.title(<span class="string">'Joy Plot of City and Highway Mileage by Class'</span>, fontsize=<span class="number">22</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/TRHX/ImageHosting/ITRHX-PIC/A78/26.png" alt="26"></p><h3 id="【25】分布式点图（Distributed-Dot-Plot）"><a href="#【25】分布式点图（Distributed-Dot-Plot）" class="headerlink" title="【25】分布式点图（Distributed Dot Plot）"></a><font color="##4876FF">【25】分布式点图（Distributed Dot Plot）</font></h3><p>分布点图显示按组分割的点的单变量分布。点越暗，数据点在该区域的集中程度就越高。通过对中值进行不同的着色，这些组的真实位置立即变得明显。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> matplotlib.patches <span class="keyword">as</span> mpatches</span><br><span class="line"></span><br><span class="line"><span class="comment"># Prepare Data</span></span><br><span class="line">df_raw = pd.read_csv(<span class="string">"https://github.com/selva86/datasets/raw/master/mpg_ggplot2.csv"</span>)</span><br><span class="line">cyl_colors = &#123;<span class="number">4</span>: <span class="string">'tab:red'</span>, <span class="number">5</span>: <span class="string">'tab:green'</span>, <span class="number">6</span>: <span class="string">'tab:blue'</span>, <span class="number">8</span>: <span class="string">'tab:orange'</span>&#125;</span><br><span class="line">df_raw[<span class="string">'cyl_color'</span>] = df_raw.cyl.map(cyl_colors)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Mean and Median city mileage by make</span></span><br><span class="line">df = df_raw[[<span class="string">'cty'</span>, <span class="string">'manufacturer'</span>]].groupby(<span class="string">'manufacturer'</span>).apply(<span class="keyword">lambda</span> x: x.mean())</span><br><span class="line">df.sort_values(<span class="string">'cty'</span>, ascending=<span class="keyword">False</span>, inplace=<span class="keyword">True</span>)</span><br><span class="line">df.reset_index(inplace=<span class="keyword">True</span>)</span><br><span class="line">df_median = df_raw[[<span class="string">'cty'</span>, <span class="string">'manufacturer'</span>]].groupby(<span class="string">'manufacturer'</span>).apply(<span class="keyword">lambda</span> x: x.median())</span><br><span class="line"></span><br><span class="line"><span class="comment"># Draw horizontal lines</span></span><br><span class="line">fig, ax = plt.subplots(figsize=(<span class="number">16</span>, <span class="number">10</span>), dpi=<span class="number">80</span>)</span><br><span class="line">ax.hlines(y=df.index, xmin=<span class="number">0</span>, xmax=<span class="number">40</span>, color=<span class="string">'gray'</span>, alpha=<span class="number">0.5</span>, linewidth=<span class="number">.5</span>, linestyles=<span class="string">'dashdot'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Draw the Dots</span></span><br><span class="line"><span class="keyword">for</span> i, make <span class="keyword">in</span> enumerate(df.manufacturer):</span><br><span class="line">    df_make = df_raw.loc[df_raw.manufacturer == make, :]</span><br><span class="line">    ax.scatter(y=np.repeat(i, df_make.shape[<span class="number">0</span>]), x=<span class="string">'cty'</span>, data=df_make, s=<span class="number">75</span>, edgecolors=<span class="string">'gray'</span>, c=<span class="string">'w'</span>, alpha=<span class="number">0.5</span>)</span><br><span class="line">    ax.scatter(y=i, x=<span class="string">'cty'</span>, data=df_median.loc[df_median.index == make, :], s=<span class="number">75</span>, c=<span class="string">'firebrick'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Annotate</span></span><br><span class="line">ax.text(<span class="number">33</span>, <span class="number">13</span>, <span class="string">"$red \; dots \; are \; the \: median$"</span>, fontdict=&#123;<span class="string">'size'</span>: <span class="number">12</span>&#125;, color=<span class="string">'firebrick'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Decorations</span></span><br><span class="line">red_patch = plt.plot([], [], marker=<span class="string">"o"</span>, ms=<span class="number">10</span>, ls=<span class="string">""</span>, mec=<span class="keyword">None</span>, color=<span class="string">'firebrick'</span>, label=<span class="string">"Median"</span>)</span><br><span class="line">plt.legend(handles=red_patch)</span><br><span class="line">ax.set_title(<span class="string">'Distribution of City Mileage by Make'</span>, fontdict=&#123;<span class="string">'size'</span>: <span class="number">22</span>&#125;)</span><br><span class="line">ax.set_xlabel(<span class="string">'Miles Per Gallon (City)'</span>, alpha=<span class="number">0.7</span>)</span><br><span class="line">ax.set_yticks(df.index)</span><br><span class="line">ax.set_yticklabels(df.manufacturer.str.title(), fontdict=&#123;<span class="string">'horizontalalignment'</span>: <span class="string">'right'</span>&#125;, alpha=<span class="number">0.7</span>)</span><br><span class="line">ax.set_xlim(<span class="number">1</span>, <span class="number">40</span>)</span><br><span class="line">plt.xticks(alpha=<span class="number">0.7</span>)</span><br><span class="line">plt.gca().spines[<span class="string">"top"</span>].set_visible(<span class="keyword">False</span>)</span><br><span class="line">plt.gca().spines[<span class="string">"bottom"</span>].set_visible(<span class="keyword">False</span>)</span><br><span class="line">plt.gca().spines[<span class="string">"right"</span>].set_visible(<span class="keyword">False</span>)</span><br><span class="line">plt.gca().spines[<span class="string">"left"</span>].set_visible(<span class="keyword">False</span>)</span><br><span class="line">plt.grid(axis=<span class="string">'both'</span>, alpha=<span class="number">.4</span>, linewidth=<span class="number">.1</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/TRHX/ImageHosting/ITRHX-PIC/A78/27.png" alt="27"></p><h3 id="【26】箱形图（Box-Plot）"><a href="#【26】箱形图（Box-Plot）" class="headerlink" title="【26】箱形图（Box Plot）"></a><font color="##4876FF">【26】箱形图（Box Plot）</font></h3><p>箱形图是可视化分布的一种好方法，同时牢记中位数，第 25 个第 75 个四分位数和离群值。 但是，在解释方框的大小时需要小心，这可能会扭曲该组中包含的点数。 因此，手动提供每个框中的观察次数可以帮助克服此缺点。</p><p>例如，左侧的前两个框，尽管它们分别具有 5 和 47 个 obs，但是却具有相同大小， 因此，有必要写下该组中的观察数。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Import Data</span></span><br><span class="line">df = pd.read_csv(<span class="string">"https://github.com/selva86/datasets/raw/master/mpg_ggplot2.csv"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Draw Plot</span></span><br><span class="line">plt.figure(figsize=(<span class="number">13</span>, <span class="number">10</span>), dpi=<span class="number">80</span>)</span><br><span class="line">sns.boxplot(x=<span class="string">'class'</span>, y=<span class="string">'hwy'</span>, data=df, notch=<span class="keyword">False</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># Add N Obs inside boxplot (optional)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add_n_obs</span><span class="params">(df, group_col, y)</span>:</span></span><br><span class="line">    medians_dict = &#123;grp[<span class="number">0</span>]: grp[<span class="number">1</span>][y].median() <span class="keyword">for</span> grp <span class="keyword">in</span> df.groupby(group_col)&#125;</span><br><span class="line">    xticklabels = [x.get_text() <span class="keyword">for</span> x <span class="keyword">in</span> plt.gca().get_xticklabels()]</span><br><span class="line">    n_obs = df.groupby(group_col)[y].size().values</span><br><span class="line">    <span class="keyword">for</span> (x, xticklabel), n_ob <span class="keyword">in</span> zip(enumerate(xticklabels), n_obs):</span><br><span class="line">        plt.text(x, medians_dict[xticklabel] * <span class="number">1.01</span>, <span class="string">"#obs : "</span> + str(n_ob), horizontalalignment=<span class="string">'center'</span>,</span><br><span class="line">                 fontdict=&#123;<span class="string">'size'</span>: <span class="number">14</span>&#125;, color=<span class="string">'white'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">add_n_obs(df, group_col=<span class="string">'class'</span>, y=<span class="string">'hwy'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Decoration</span></span><br><span class="line">plt.title(<span class="string">'Box Plot of Highway Mileage by Vehicle Class'</span>, fontsize=<span class="number">22</span>)</span><br><span class="line">plt.ylim(<span class="number">10</span>, <span class="number">40</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/TRHX/ImageHosting/ITRHX-PIC/A78/28.png" alt="28"></p><h3 id="【27】点-箱形图（Dot-Box-Plot）"><a href="#【27】点-箱形图（Dot-Box-Plot）" class="headerlink" title="【27】点 + 箱形图（Dot + Box Plot）"></a><font color="##4876FF">【27】点 + 箱形图（Dot + Box Plot）</font></h3><p>点 + 箱形图传达类似于分组的箱形图信息。此外，这些点还提供了每组中有多少数据点的含义。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Import Data</span></span><br><span class="line">df = pd.read_csv(<span class="string">"https://github.com/selva86/datasets/raw/master/mpg_ggplot2.csv"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Draw Plot</span></span><br><span class="line">plt.figure(figsize=(<span class="number">13</span>,<span class="number">10</span>), dpi= <span class="number">80</span>)</span><br><span class="line">sns.boxplot(x=<span class="string">'class'</span>, y=<span class="string">'hwy'</span>, data=df, hue=<span class="string">'cyl'</span>)</span><br><span class="line">sns.stripplot(x=<span class="string">'class'</span>, y=<span class="string">'hwy'</span>, data=df, color=<span class="string">'black'</span>, size=<span class="number">3</span>, jitter=<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(len(df[<span class="string">'class'</span>].unique())<span class="number">-1</span>):</span><br><span class="line">    plt.vlines(i+<span class="number">.5</span>, <span class="number">10</span>, <span class="number">45</span>, linestyles=<span class="string">'solid'</span>, colors=<span class="string">'gray'</span>, alpha=<span class="number">0.2</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Decoration</span></span><br><span class="line">plt.title(<span class="string">'Box Plot of Highway Mileage by Vehicle Class'</span>, fontsize=<span class="number">22</span>)</span><br><span class="line">plt.legend(title=<span class="string">'Cylinders'</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/TRHX/ImageHosting/ITRHX-PIC/A78/29.png" alt="29"></p><h3 id="【28】小提琴图（Violin-Plot）"><a href="#【28】小提琴图（Violin-Plot）" class="headerlink" title="【28】小提琴图（Violin Plot）"></a><font color="##4876FF">【28】小提琴图（Violin Plot）</font></h3><p>小提琴图是箱形图在视觉上令人愉悦的替代品。 小提琴的形状或面积取决于它所持有的观察次数。 但是，小提琴图可能更难以阅读，并且在专业设置中不常用。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Import Data</span></span><br><span class="line">df = pd.read_csv(<span class="string">"https://github.com/selva86/datasets/raw/master/mpg_ggplot2.csv"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Draw Plot</span></span><br><span class="line">plt.figure(figsize=(<span class="number">13</span>, <span class="number">10</span>), dpi=<span class="number">80</span>)</span><br><span class="line">sns.violinplot(x=<span class="string">'class'</span>, y=<span class="string">'hwy'</span>, data=df, scale=<span class="string">'width'</span>, inner=<span class="string">'quartile'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Decoration</span></span><br><span class="line">plt.title(<span class="string">'Violin Plot of Highway Mileage by Vehicle Class'</span>, fontsize=<span class="number">22</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/TRHX/ImageHosting/ITRHX-PIC/A78/30.png" alt="30"></p><h3 id="【29】人口金字塔图（Population-Pyramid）"><a href="#【29】人口金字塔图（Population-Pyramid）" class="headerlink" title="【29】人口金字塔图（Population Pyramid）"></a><font color="##4876FF">【29】人口金字塔图（Population Pyramid）</font></h3><p>人口金字塔可用于显示按体积排序的组的分布。或者它也可以用于显示人口的逐级过滤，因为它是用来显示有多少人通过一个营销漏斗（Marketing Funnel）的每个阶段。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Read data</span></span><br><span class="line">df = pd.read_csv(<span class="string">"https://raw.githubusercontent.com/selva86/datasets/master/email_campaign_funnel.csv"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Draw Plot</span></span><br><span class="line">plt.figure(figsize=(<span class="number">13</span>, <span class="number">10</span>), dpi=<span class="number">80</span>)</span><br><span class="line">group_col = <span class="string">'Gender'</span></span><br><span class="line">order_of_bars = df.Stage.unique()[::<span class="number">-1</span>]</span><br><span class="line">colors = [plt.cm.Spectral(i / float(len(df[group_col].unique()) - <span class="number">1</span>)) <span class="keyword">for</span> i <span class="keyword">in</span> range(len(df[group_col].unique()))]</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> c, group <span class="keyword">in</span> zip(colors, df[group_col].unique()):</span><br><span class="line">    sns.barplot(x=<span class="string">'Users'</span>, y=<span class="string">'Stage'</span>, data=df.loc[df[group_col] == group, :], order=order_of_bars, color=c, label=group)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Decorations</span></span><br><span class="line">plt.xlabel(<span class="string">"$Users$"</span>)</span><br><span class="line">plt.ylabel(<span class="string">"Stage of Purchase"</span>)</span><br><span class="line">plt.yticks(fontsize=<span class="number">12</span>)</span><br><span class="line">plt.title(<span class="string">"Population Pyramid of the Marketing Funnel"</span>, fontsize=<span class="number">22</span>)</span><br><span class="line">plt.legend()</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/TRHX/ImageHosting/ITRHX-PIC/A78/31.png" alt="31"></p><h3 id="【30】分类图（Categorical-Plots）"><a href="#【30】分类图（Categorical-Plots）" class="headerlink" title="【30】分类图（Categorical Plots）"></a><font color="##4876FF">【30】分类图（Categorical Plots）</font></h3><p>由 <code>seaborn</code> 库提供的分类图可用于可视化彼此相关的两个或更多分类变量的计数分布。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Load Dataset</span></span><br><span class="line">titanic = sns.load_dataset(<span class="string">"titanic"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Plot</span></span><br><span class="line">g = sns.catplot(<span class="string">"alive"</span>, col=<span class="string">"deck"</span>, col_wrap=<span class="number">4</span>,</span><br><span class="line">                data=titanic[titanic.deck.notnull()],</span><br><span class="line">                kind=<span class="string">"count"</span>, height=<span class="number">3.5</span>, aspect=<span class="number">.8</span>,</span><br><span class="line">                palette=<span class="string">'tab20'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 译者 TRHX 注释掉了这一行代码</span></span><br><span class="line"><span class="comment"># fig.suptitle('sf')</span></span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/TRHX/ImageHosting/ITRHX-PIC/A78/32.png" alt="32"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Load Dataset</span></span><br><span class="line">titanic = sns.load_dataset(<span class="string">"titanic"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Plot</span></span><br><span class="line">sns.catplot(x=<span class="string">"age"</span>, y=<span class="string">"embark_town"</span>,</span><br><span class="line">            hue=<span class="string">"sex"</span>, col=<span class="string">"class"</span>,</span><br><span class="line">            data=titanic[titanic.embark_town.notnull()],</span><br><span class="line">            orient=<span class="string">"h"</span>, height=<span class="number">5</span>, aspect=<span class="number">1</span>, palette=<span class="string">"tab10"</span>,</span><br><span class="line">            kind=<span class="string">"violin"</span>, dodge=<span class="keyword">True</span>, cut=<span class="number">0</span>, bw=<span class="number">.2</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 译者 TRHX 添加了这行代码</span></span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/TRHX/ImageHosting/ITRHX-PIC/A78/33.png" alt="33"></p><h2 id="【7x00】组成（Composition）"><a href="#【7x00】组成（Composition）" class="headerlink" title="【7x00】组成（Composition）"></a><font color="#FF0000">【7x00】组成（Composition）</font></h2><h3 id="【31】华夫饼图（Waffle-Chart）"><a href="#【31】华夫饼图（Waffle-Chart）" class="headerlink" title="【31】华夫饼图（Waffle Chart）"></a><font color="##4876FF">【31】华夫饼图（Waffle Chart）</font></h3><p>华夫饼图可以使用 <code>pywaffle</code> 包创建，用于显示较大群体中的组的组成。</p><p>【译者 TRHX 注：在使用该方法时要先安装 pywaffle 库】</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># ! pip install pywaffle</span></span><br><span class="line"><span class="comment"># Reference: https://stackoverflow.com/questions/41400136/how-to-do-waffle-charts-in-python-square-piechart</span></span><br><span class="line"><span class="keyword">from</span> pywaffle <span class="keyword">import</span> Waffle</span><br><span class="line"></span><br><span class="line"><span class="comment"># Import</span></span><br><span class="line">df_raw = pd.read_csv(<span class="string">"https://github.com/selva86/datasets/raw/master/mpg_ggplot2.csv"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Prepare Data</span></span><br><span class="line">df = df_raw.groupby(<span class="string">'class'</span>).size().reset_index(name=<span class="string">'counts'</span>)</span><br><span class="line">n_categories = df.shape[<span class="number">0</span>]</span><br><span class="line">colors = [plt.cm.inferno_r(i / float(n_categories)) <span class="keyword">for</span> i <span class="keyword">in</span> range(n_categories)]</span><br><span class="line"></span><br><span class="line"><span class="comment"># Draw Plot and Decorate</span></span><br><span class="line">fig = plt.figure(</span><br><span class="line">    FigureClass=Waffle,</span><br><span class="line">    plots=&#123;</span><br><span class="line">        <span class="string">'111'</span>: &#123;</span><br><span class="line">            <span class="string">'values'</span>: df[<span class="string">'counts'</span>],</span><br><span class="line">            <span class="string">'labels'</span>: [<span class="string">"&#123;0&#125; (&#123;1&#125;)"</span>.format(n[<span class="number">0</span>], n[<span class="number">1</span>]) <span class="keyword">for</span> n <span class="keyword">in</span> df[[<span class="string">'class'</span>, <span class="string">'counts'</span>]].itertuples()],</span><br><span class="line">            <span class="string">'legend'</span>: &#123;<span class="string">'loc'</span>: <span class="string">'upper left'</span>, <span class="string">'bbox_to_anchor'</span>: (<span class="number">1.05</span>, <span class="number">1</span>), <span class="string">'fontsize'</span>: <span class="number">12</span>&#125;,</span><br><span class="line">            <span class="string">'title'</span>: &#123;<span class="string">'label'</span>: <span class="string">'# Vehicles by Class'</span>, <span class="string">'loc'</span>: <span class="string">'center'</span>, <span class="string">'fontsize'</span>: <span class="number">18</span>&#125;</span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">    rows=<span class="number">7</span>,</span><br><span class="line">    colors=colors,</span><br><span class="line">    figsize=(<span class="number">16</span>, <span class="number">9</span>)</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 译者 TRHX 添加了这行代码</span></span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/TRHX/ImageHosting/ITRHX-PIC/A78/34.png" alt="34"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># ! pip install pywaffle</span></span><br><span class="line"><span class="keyword">from</span> pywaffle <span class="keyword">import</span> Waffle</span><br><span class="line"></span><br><span class="line"><span class="comment"># Import</span></span><br><span class="line"><span class="comment"># 译者 TRHX 取消注释了这行代码</span></span><br><span class="line">df_raw = pd.read_csv(<span class="string">"https://github.com/selva86/datasets/raw/master/mpg_ggplot2.csv"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Prepare Data</span></span><br><span class="line"><span class="comment"># By Class Data</span></span><br><span class="line">df_class = df_raw.groupby(<span class="string">'class'</span>).size().reset_index(name=<span class="string">'counts_class'</span>)</span><br><span class="line">n_categories = df_class.shape[<span class="number">0</span>]</span><br><span class="line">colors_class = [plt.cm.Set3(i / float(n_categories)) <span class="keyword">for</span> i <span class="keyword">in</span> range(n_categories)]</span><br><span class="line"></span><br><span class="line"><span class="comment"># By Cylinders Data</span></span><br><span class="line">df_cyl = df_raw.groupby(<span class="string">'cyl'</span>).size().reset_index(name=<span class="string">'counts_cyl'</span>)</span><br><span class="line">n_categories = df_cyl.shape[<span class="number">0</span>]</span><br><span class="line">colors_cyl = [plt.cm.Spectral(i / float(n_categories)) <span class="keyword">for</span> i <span class="keyword">in</span> range(n_categories)]</span><br><span class="line"></span><br><span class="line"><span class="comment"># By Make Data</span></span><br><span class="line">df_make = df_raw.groupby(<span class="string">'manufacturer'</span>).size().reset_index(name=<span class="string">'counts_make'</span>)</span><br><span class="line">n_categories = df_make.shape[<span class="number">0</span>]</span><br><span class="line">colors_make = [plt.cm.tab20b(i / float(n_categories)) <span class="keyword">for</span> i <span class="keyword">in</span> range(n_categories)]</span><br><span class="line"></span><br><span class="line"><span class="comment"># Draw Plot and Decorate</span></span><br><span class="line">fig = plt.figure(</span><br><span class="line">    FigureClass=Waffle,</span><br><span class="line">    plots=&#123;</span><br><span class="line">        <span class="string">'311'</span>: &#123;</span><br><span class="line">            <span class="string">'values'</span>: df_class[<span class="string">'counts_class'</span>],</span><br><span class="line">            <span class="string">'labels'</span>: [<span class="string">"&#123;1&#125;"</span>.format(n[<span class="number">0</span>], n[<span class="number">1</span>]) <span class="keyword">for</span> n <span class="keyword">in</span> df_class[[<span class="string">'class'</span>, <span class="string">'counts_class'</span>]].itertuples()],</span><br><span class="line">            <span class="string">'legend'</span>: &#123;<span class="string">'loc'</span>: <span class="string">'upper left'</span>, <span class="string">'bbox_to_anchor'</span>: (<span class="number">1.05</span>, <span class="number">1</span>), <span class="string">'fontsize'</span>: <span class="number">12</span>, <span class="string">'title'</span>: <span class="string">'Class'</span>&#125;,</span><br><span class="line">            <span class="string">'title'</span>: &#123;<span class="string">'label'</span>: <span class="string">'# Vehicles by Class'</span>, <span class="string">'loc'</span>: <span class="string">'center'</span>, <span class="string">'fontsize'</span>: <span class="number">18</span>&#125;,</span><br><span class="line">            <span class="string">'colors'</span>: colors_class</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="string">'312'</span>: &#123;</span><br><span class="line">            <span class="string">'values'</span>: df_cyl[<span class="string">'counts_cyl'</span>],</span><br><span class="line">            <span class="string">'labels'</span>: [<span class="string">"&#123;1&#125;"</span>.format(n[<span class="number">0</span>], n[<span class="number">1</span>]) <span class="keyword">for</span> n <span class="keyword">in</span> df_cyl[[<span class="string">'cyl'</span>, <span class="string">'counts_cyl'</span>]].itertuples()],</span><br><span class="line">            <span class="string">'legend'</span>: &#123;<span class="string">'loc'</span>: <span class="string">'upper left'</span>, <span class="string">'bbox_to_anchor'</span>: (<span class="number">1.05</span>, <span class="number">1</span>), <span class="string">'fontsize'</span>: <span class="number">12</span>, <span class="string">'title'</span>: <span class="string">'Cyl'</span>&#125;,</span><br><span class="line">            <span class="string">'title'</span>: &#123;<span class="string">'label'</span>: <span class="string">'# Vehicles by Cyl'</span>, <span class="string">'loc'</span>: <span class="string">'center'</span>, <span class="string">'fontsize'</span>: <span class="number">18</span>&#125;,</span><br><span class="line">            <span class="string">'colors'</span>: colors_cyl</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="string">'313'</span>: &#123;</span><br><span class="line">            <span class="string">'values'</span>: df_make[<span class="string">'counts_make'</span>],</span><br><span class="line">            <span class="string">'labels'</span>: [<span class="string">"&#123;1&#125;"</span>.format(n[<span class="number">0</span>], n[<span class="number">1</span>]) <span class="keyword">for</span> n <span class="keyword">in</span> df_make[[<span class="string">'manufacturer'</span>, <span class="string">'counts_make'</span>]].itertuples()],</span><br><span class="line">            <span class="string">'legend'</span>: &#123;<span class="string">'loc'</span>: <span class="string">'upper left'</span>, <span class="string">'bbox_to_anchor'</span>: (<span class="number">1.05</span>, <span class="number">1</span>), <span class="string">'fontsize'</span>: <span class="number">12</span>, <span class="string">'title'</span>: <span class="string">'Manufacturer'</span>&#125;,</span><br><span class="line">            <span class="string">'title'</span>: &#123;<span class="string">'label'</span>: <span class="string">'# Vehicles by Make'</span>, <span class="string">'loc'</span>: <span class="string">'center'</span>, <span class="string">'fontsize'</span>: <span class="number">18</span>&#125;,</span><br><span class="line">            <span class="string">'colors'</span>: colors_make</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    rows=<span class="number">9</span>,</span><br><span class="line">    figsize=(<span class="number">16</span>, <span class="number">14</span>)</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 译者 TRHX 添加了这行代码</span></span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/TRHX/ImageHosting/ITRHX-PIC/A78/35.png" alt="35"></p><h3 id="【32】饼图（Pie-Chart）"><a href="#【32】饼图（Pie-Chart）" class="headerlink" title="【32】饼图（Pie Chart）"></a><font color="##4876FF">【32】饼图（Pie Chart）</font></h3><p>饼图是显示组成的经典方法。然而，现在一般不宜使用，因为馅饼部分的面积有时会产生误导。因此，如果要使用饼图，强烈建议您显式地记下饼图每个部分的百分比或数字。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Import</span></span><br><span class="line">df_raw = pd.read_csv(<span class="string">"https://github.com/selva86/datasets/raw/master/mpg_ggplot2.csv"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Prepare Data</span></span><br><span class="line">df = df_raw.groupby(<span class="string">'class'</span>).size()</span><br><span class="line"></span><br><span class="line"><span class="comment"># Make the plot with pandas</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">原代码：df.plot(kind='pie', subplots=True, figsize=(8, 8), dpi=80)</span></span><br><span class="line"><span class="string">译者 TRHX 删除了 dpi= 80</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line">df.plot(kind=<span class="string">'pie'</span>, subplots=<span class="keyword">True</span>, figsize=(<span class="number">8</span>, <span class="number">8</span>))</span><br><span class="line">plt.title(<span class="string">"Pie Chart of Vehicle Class - Bad"</span>)</span><br><span class="line">plt.ylabel(<span class="string">""</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/TRHX/ImageHosting/ITRHX-PIC/A78/36.png" alt="36"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Import</span></span><br><span class="line">df_raw = pd.read_csv(<span class="string">"https://github.com/selva86/datasets/raw/master/mpg_ggplot2.csv"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Prepare Data</span></span><br><span class="line">df = df_raw.groupby(<span class="string">'class'</span>).size().reset_index(name=<span class="string">'counts'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Draw Plot</span></span><br><span class="line">fig, ax = plt.subplots(figsize=(<span class="number">12</span>, <span class="number">7</span>), subplot_kw=dict(aspect=<span class="string">"equal"</span>), dpi=<span class="number">80</span>)</span><br><span class="line"></span><br><span class="line">data = df[<span class="string">'counts'</span>]</span><br><span class="line">categories = df[<span class="string">'class'</span>]</span><br><span class="line">explode = [<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0.1</span>, <span class="number">0</span>]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func</span><span class="params">(pct, allvals)</span>:</span></span><br><span class="line">    absolute = int(pct / <span class="number">100.</span> * np.sum(allvals))</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"&#123;:.1f&#125;% (&#123;:d&#125; )"</span>.format(pct, absolute)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">wedges, texts, autotexts = ax.pie(data,</span><br><span class="line">                                  autopct=<span class="keyword">lambda</span> pct: func(pct, data),</span><br><span class="line">                                  textprops=dict(color=<span class="string">"w"</span>),</span><br><span class="line">                                  colors=plt.cm.Dark2.colors,</span><br><span class="line">                                  startangle=<span class="number">140</span>,</span><br><span class="line">                                  explode=explode)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Decoration</span></span><br><span class="line">ax.legend(wedges, categories, title=<span class="string">"Vehicle Class"</span>, loc=<span class="string">"center left"</span>, bbox_to_anchor=(<span class="number">1</span>, <span class="number">0</span>, <span class="number">0.5</span>, <span class="number">1</span>))</span><br><span class="line">plt.setp(autotexts, size=<span class="number">10</span>, weight=<span class="number">700</span>)</span><br><span class="line">ax.set_title(<span class="string">"Class of Vehicles: Pie Chart"</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/TRHX/ImageHosting/ITRHX-PIC/A78/37.png" alt="37"></p><h3 id="【33】矩阵树形图（Treemap）"><a href="#【33】矩阵树形图（Treemap）" class="headerlink" title="【33】矩阵树形图（Treemap）"></a><font color="##4876FF">【33】矩阵树形图（Treemap）</font></h3><p>矩阵树形图类似于饼图，它可以更好地完成工作而不会误导每个组的贡献。</p><p>【译者 TRHX 注：在使用该方法时要先安装 squarify 库】</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># pip install squarify</span></span><br><span class="line"><span class="keyword">import</span> squarify</span><br><span class="line"></span><br><span class="line"><span class="comment"># Import Data</span></span><br><span class="line">df_raw = pd.read_csv(<span class="string">"https://github.com/selva86/datasets/raw/master/mpg_ggplot2.csv"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Prepare Data</span></span><br><span class="line">df = df_raw.groupby(<span class="string">'class'</span>).size().reset_index(name=<span class="string">'counts'</span>)</span><br><span class="line">labels = df.apply(<span class="keyword">lambda</span> x: str(x[<span class="number">0</span>]) + <span class="string">"\n ("</span> + str(x[<span class="number">1</span>]) + <span class="string">")"</span>, axis=<span class="number">1</span>)</span><br><span class="line">sizes = df[<span class="string">'counts'</span>].values.tolist()</span><br><span class="line">colors = [plt.cm.Spectral(i / float(len(labels))) <span class="keyword">for</span> i <span class="keyword">in</span> range(len(labels))]</span><br><span class="line"></span><br><span class="line"><span class="comment"># Draw Plot</span></span><br><span class="line">plt.figure(figsize=(<span class="number">12</span>, <span class="number">8</span>), dpi=<span class="number">80</span>)</span><br><span class="line">squarify.plot(sizes=sizes, label=labels, color=colors, alpha=<span class="number">.8</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Decorate</span></span><br><span class="line">plt.title(<span class="string">'Treemap of Vechile Class'</span>)</span><br><span class="line">plt.axis(<span class="string">'off'</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/TRHX/ImageHosting/ITRHX-PIC/A78/38.png" alt="38"></p><h3 id="【34】条形图（Bar-Chart）"><a href="#【34】条形图（Bar-Chart）" class="headerlink" title="【34】条形图（Bar Chart）"></a><font color="##4876FF">【34】条形图（Bar Chart）</font></h3><p>条形图是一种基于计数或任何给定度量的可视化项的经典方法。在下面的图表中，我为每个项目使用了不同的颜色，但您通常可能希望为所有项目选择一种颜色，除非您按组对它们进行着色。颜色名称存储在下面代码中的 <code>all_colors</code> 中。您可以通过在 <code>plt.plot()</code> 中设置 <code>color</code> 参数来更改条形的颜色。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> random</span><br><span class="line"></span><br><span class="line"><span class="comment"># Import Data</span></span><br><span class="line">df_raw = pd.read_csv(<span class="string">"https://github.com/selva86/datasets/raw/master/mpg_ggplot2.csv"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Prepare Data</span></span><br><span class="line">df = df_raw.groupby(<span class="string">'manufacturer'</span>).size().reset_index(name=<span class="string">'counts'</span>)</span><br><span class="line">n = df[<span class="string">'manufacturer'</span>].unique().__len__()+<span class="number">1</span></span><br><span class="line">all_colors = list(plt.cm.colors.cnames.keys())</span><br><span class="line">random.seed(<span class="number">100</span>)</span><br><span class="line">c = random.choices(all_colors, k=n)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Plot Bars</span></span><br><span class="line">plt.figure(figsize=(<span class="number">16</span>,<span class="number">10</span>), dpi= <span class="number">80</span>)</span><br><span class="line">plt.bar(df[<span class="string">'manufacturer'</span>], df[<span class="string">'counts'</span>], color=c, width=<span class="number">.5</span>)</span><br><span class="line"><span class="keyword">for</span> i, val <span class="keyword">in</span> enumerate(df[<span class="string">'counts'</span>].values):</span><br><span class="line">    plt.text(i, val, float(val), horizontalalignment=<span class="string">'center'</span>, verticalalignment=<span class="string">'bottom'</span>, fontdict=&#123;<span class="string">'fontweight'</span>:<span class="number">500</span>, <span class="string">'size'</span>:<span class="number">12</span>&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Decoration</span></span><br><span class="line">plt.gca().set_xticklabels(df[<span class="string">'manufacturer'</span>], rotation=<span class="number">60</span>, horizontalalignment= <span class="string">'right'</span>)</span><br><span class="line">plt.title(<span class="string">"Number of Vehicles by Manaufacturers"</span>, fontsize=<span class="number">22</span>)</span><br><span class="line">plt.ylabel(<span class="string">'# Vehicles'</span>)</span><br><span class="line">plt.ylim(<span class="number">0</span>, <span class="number">45</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/TRHX/ImageHosting/ITRHX-PIC/A78/39.png" alt="39"></p><h2 id="【8x00】变化（Change）"><a href="#【8x00】变化（Change）" class="headerlink" title="【8x00】变化（Change）"></a><font color="#FF0000">【8x00】变化（Change）</font></h2><h3 id="【35】时间序列图（Time-Series-Plot）"><a href="#【35】时间序列图（Time-Series-Plot）" class="headerlink" title="【35】时间序列图（Time Series Plot）"></a><font color="##4876FF">【35】时间序列图（Time Series Plot）</font></h3><p>时间序列图用于可视化给定指标随时间的变化。在这里你可以看到 1949 年到 1969 年间的航空客运量是如何变化的。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Import Data</span></span><br><span class="line">df = pd.read_csv(<span class="string">'https://github.com/selva86/datasets/raw/master/AirPassengers.csv'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Draw Plot</span></span><br><span class="line">plt.figure(figsize=(<span class="number">16</span>, <span class="number">10</span>), dpi=<span class="number">80</span>)</span><br><span class="line">plt.plot(<span class="string">'date'</span>, <span class="string">'traffic'</span>, data=df, color=<span class="string">'tab:red'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Decoration</span></span><br><span class="line">plt.ylim(<span class="number">50</span>, <span class="number">750</span>)</span><br><span class="line">xtick_location = df.index.tolist()[::<span class="number">12</span>]</span><br><span class="line">xtick_labels = [x[<span class="number">-4</span>:] <span class="keyword">for</span> x <span class="keyword">in</span> df.date.tolist()[::<span class="number">12</span>]]</span><br><span class="line">plt.xticks(ticks=xtick_location, labels=xtick_labels, rotation=<span class="number">0</span>, fontsize=<span class="number">12</span>, horizontalalignment=<span class="string">'center'</span>, alpha=<span class="number">.7</span>)</span><br><span class="line">plt.yticks(fontsize=<span class="number">12</span>, alpha=<span class="number">.7</span>)</span><br><span class="line">plt.title(<span class="string">"Air Passengers Traffic (1949 - 1969)"</span>, fontsize=<span class="number">22</span>)</span><br><span class="line">plt.grid(axis=<span class="string">'both'</span>, alpha=<span class="number">.3</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Remove borders</span></span><br><span class="line">plt.gca().spines[<span class="string">"top"</span>].set_alpha(<span class="number">0.0</span>)</span><br><span class="line">plt.gca().spines[<span class="string">"bottom"</span>].set_alpha(<span class="number">0.3</span>)</span><br><span class="line">plt.gca().spines[<span class="string">"right"</span>].set_alpha(<span class="number">0.0</span>)</span><br><span class="line">plt.gca().spines[<span class="string">"left"</span>].set_alpha(<span class="number">0.3</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/TRHX/ImageHosting/ITRHX-PIC/A78/40.png" alt="40"></p><h3 id="【36】带波峰和波谷注释的时间序列图（Time-Series-with-Peaks-and-Troughs-Annotated）"><a href="#【36】带波峰和波谷注释的时间序列图（Time-Series-with-Peaks-and-Troughs-Annotated）" class="headerlink" title="【36】带波峰和波谷注释的时间序列图（Time Series with Peaks and Troughs Annotated）"></a><font color="##4876FF">【36】带波峰和波谷注释的时间序列图（Time Series with Peaks and Troughs Annotated）</font></h3><p>下面的时间序列绘制了所有的波峰和波谷，并注释了所选特殊事件的发生。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Import Data</span></span><br><span class="line">df = pd.read_csv(<span class="string">'https://github.com/selva86/datasets/raw/master/AirPassengers.csv'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Get the Peaks and Troughs</span></span><br><span class="line">data = df[<span class="string">'traffic'</span>].values</span><br><span class="line">doublediff = np.diff(np.sign(np.diff(data)))</span><br><span class="line">peak_locations = np.where(doublediff == <span class="number">-2</span>)[<span class="number">0</span>] + <span class="number">1</span></span><br><span class="line"></span><br><span class="line">doublediff2 = np.diff(np.sign(np.diff(<span class="number">-1</span> * data)))</span><br><span class="line">trough_locations = np.where(doublediff2 == <span class="number">-2</span>)[<span class="number">0</span>] + <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Draw Plot</span></span><br><span class="line">plt.figure(figsize=(<span class="number">16</span>, <span class="number">10</span>), dpi=<span class="number">80</span>)</span><br><span class="line">plt.plot(<span class="string">'date'</span>, <span class="string">'traffic'</span>, data=df, color=<span class="string">'tab:blue'</span>, label=<span class="string">'Air Traffic'</span>)</span><br><span class="line">plt.scatter(df.date[peak_locations], df.traffic[peak_locations], marker=mpl.markers.CARETUPBASE, color=<span class="string">'tab:green'</span>,</span><br><span class="line">            s=<span class="number">100</span>, label=<span class="string">'Peaks'</span>)</span><br><span class="line">plt.scatter(df.date[trough_locations], df.traffic[trough_locations], marker=mpl.markers.CARETDOWNBASE, color=<span class="string">'tab:red'</span>,</span><br><span class="line">            s=<span class="number">100</span>, label=<span class="string">'Troughs'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Annotate</span></span><br><span class="line"><span class="keyword">for</span> t, p <span class="keyword">in</span> zip(trough_locations[<span class="number">1</span>::<span class="number">5</span>], peak_locations[::<span class="number">3</span>]):</span><br><span class="line">    plt.text(df.date[p], df.traffic[p] + <span class="number">15</span>, df.date[p], horizontalalignment=<span class="string">'center'</span>, color=<span class="string">'darkgreen'</span>)</span><br><span class="line">    plt.text(df.date[t], df.traffic[t] - <span class="number">35</span>, df.date[t], horizontalalignment=<span class="string">'center'</span>, color=<span class="string">'darkred'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Decoration</span></span><br><span class="line">plt.ylim(<span class="number">50</span>, <span class="number">750</span>)</span><br><span class="line">xtick_location = df.index.tolist()[::<span class="number">6</span>]</span><br><span class="line">xtick_labels = df.date.tolist()[::<span class="number">6</span>]</span><br><span class="line">plt.xticks(ticks=xtick_location, labels=xtick_labels, rotation=<span class="number">90</span>, fontsize=<span class="number">12</span>, alpha=<span class="number">.7</span>)</span><br><span class="line">plt.title(<span class="string">"Peak and Troughs of Air Passengers Traffic (1949 - 1969)"</span>, fontsize=<span class="number">22</span>)</span><br><span class="line">plt.yticks(fontsize=<span class="number">12</span>, alpha=<span class="number">.7</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Lighten borders</span></span><br><span class="line">plt.gca().spines[<span class="string">"top"</span>].set_alpha(<span class="number">.0</span>)</span><br><span class="line">plt.gca().spines[<span class="string">"bottom"</span>].set_alpha(<span class="number">.3</span>)</span><br><span class="line">plt.gca().spines[<span class="string">"right"</span>].set_alpha(<span class="number">.0</span>)</span><br><span class="line">plt.gca().spines[<span class="string">"left"</span>].set_alpha(<span class="number">.3</span>)</span><br><span class="line"></span><br><span class="line">plt.legend(loc=<span class="string">'upper left'</span>)</span><br><span class="line">plt.grid(axis=<span class="string">'y'</span>, alpha=<span class="number">.3</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/TRHX/ImageHosting/ITRHX-PIC/A78/41.png" alt="41"></p><h3 id="【37】自相关-ACF-和部分自相关-PACF-图（Autocorrelation-ACF-and-Partial-Autocorrelation-PACF-Plot）"><a href="#【37】自相关-ACF-和部分自相关-PACF-图（Autocorrelation-ACF-and-Partial-Autocorrelation-PACF-Plot）" class="headerlink" title="【37】自相关 (ACF) 和部分自相关 (PACF) 图（Autocorrelation (ACF) and Partial Autocorrelation (PACF) Plot）"></a><font color="##4876FF">【37】自相关 (ACF) 和部分自相关 (PACF) 图（Autocorrelation (ACF) and Partial Autocorrelation (PACF) Plot）</font></h3><p>自相关图（ACF图）显示了时间序列与其自身滞后的相关性。 每条垂直线（在自相关图上）表示系列与滞后 0 之间的滞后的相关性。图中的蓝色阴影区域是显著性级别。 那些位于蓝线之上的滞后是显著的滞后。</p><p>那么如何解释呢？</p><p>对于航空乘客来说，我们看到超过 14 个滞后已经越过蓝线，因此意义重大。这意味着，14 年前的航空客运量对今天的交通量产生了影响。 </p><p>另一方面，部分自相关图（PACF）显示了任何给定滞后（时间序列）相对于当前序列的自相关，但消除了中间滞后的贡献。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> statsmodels.graphics.tsaplots <span class="keyword">import</span> plot_acf, plot_pacf</span><br><span class="line"></span><br><span class="line"><span class="comment"># Import Data</span></span><br><span class="line">df = pd.read_csv(<span class="string">'https://github.com/selva86/datasets/raw/master/AirPassengers.csv'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Draw Plot</span></span><br><span class="line">fig, (ax1, ax2) = plt.subplots(<span class="number">1</span>, <span class="number">2</span>, figsize=(<span class="number">16</span>, <span class="number">6</span>), dpi=<span class="number">80</span>)</span><br><span class="line">plot_acf(df.traffic.tolist(), ax=ax1, lags=<span class="number">50</span>)</span><br><span class="line">plot_pacf(df.traffic.tolist(), ax=ax2, lags=<span class="number">20</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Decorate</span></span><br><span class="line"><span class="comment"># lighten the borders</span></span><br><span class="line">ax1.spines[<span class="string">"top"</span>].set_alpha(<span class="number">.3</span>); ax2.spines[<span class="string">"top"</span>].set_alpha(<span class="number">.3</span>)</span><br><span class="line">ax1.spines[<span class="string">"bottom"</span>].set_alpha(<span class="number">.3</span>); ax2.spines[<span class="string">"bottom"</span>].set_alpha(<span class="number">.3</span>)</span><br><span class="line">ax1.spines[<span class="string">"right"</span>].set_alpha(<span class="number">.3</span>); ax2.spines[<span class="string">"right"</span>].set_alpha(<span class="number">.3</span>)</span><br><span class="line">ax1.spines[<span class="string">"left"</span>].set_alpha(<span class="number">.3</span>); ax2.spines[<span class="string">"left"</span>].set_alpha(<span class="number">.3</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># font size of tick labels</span></span><br><span class="line">ax1.tick_params(axis=<span class="string">'both'</span>, labelsize=<span class="number">12</span>)</span><br><span class="line">ax2.tick_params(axis=<span class="string">'both'</span>, labelsize=<span class="number">12</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/TRHX/ImageHosting/ITRHX-PIC/A78/42.png" alt="42"></p><h3 id="【38】交叉相关图（Cross-Correlation-plot）"><a href="#【38】交叉相关图（Cross-Correlation-plot）" class="headerlink" title="【38】交叉相关图（Cross Correlation plot）"></a><font color="##4876FF">【38】交叉相关图（Cross Correlation plot）</font></h3><p>交叉相关图显示了两个时间序列相互之间的滞后。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> statsmodels.tsa.stattools <span class="keyword">as</span> stattools</span><br><span class="line"></span><br><span class="line"><span class="comment"># Import Data</span></span><br><span class="line">df = pd.read_csv(<span class="string">'https://github.com/selva86/datasets/raw/master/mortality.csv'</span>)</span><br><span class="line">x = df[<span class="string">'mdeaths'</span>]</span><br><span class="line">y = df[<span class="string">'fdeaths'</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># Compute Cross Correlations</span></span><br><span class="line">ccs = stattools.ccf(x, y)[:<span class="number">100</span>]</span><br><span class="line">nlags = len(ccs)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Compute the Significance level</span></span><br><span class="line"><span class="comment"># ref: https://stats.stackexchange.com/questions/3115/cross-correlation-significance-in-r/3128#3128</span></span><br><span class="line">conf_level = <span class="number">2</span> / np.sqrt(nlags)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Draw Plot</span></span><br><span class="line">plt.figure(figsize=(<span class="number">12</span>, <span class="number">7</span>), dpi=<span class="number">80</span>)</span><br><span class="line"></span><br><span class="line">plt.hlines(<span class="number">0</span>, xmin=<span class="number">0</span>, xmax=<span class="number">100</span>, color=<span class="string">'gray'</span>)  <span class="comment"># 0 axis</span></span><br><span class="line">plt.hlines(conf_level, xmin=<span class="number">0</span>, xmax=<span class="number">100</span>, color=<span class="string">'gray'</span>)</span><br><span class="line">plt.hlines(-conf_level, xmin=<span class="number">0</span>, xmax=<span class="number">100</span>, color=<span class="string">'gray'</span>)</span><br><span class="line"></span><br><span class="line">plt.bar(x=np.arange(len(ccs)), height=ccs, width=<span class="number">.3</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Decoration</span></span><br><span class="line">plt.title(<span class="string">'$Cross\; Correlation\; Plot:\; mdeaths\; vs\; fdeaths$'</span>, fontsize=<span class="number">22</span>)</span><br><span class="line">plt.xlim(<span class="number">0</span>, len(ccs))</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/TRHX/ImageHosting/ITRHX-PIC/A78/43.png" alt="43"></p><h3 id="【39】时间序列分解图（Time-Series-Decomposition-Plot）"><a href="#【39】时间序列分解图（Time-Series-Decomposition-Plot）" class="headerlink" title="【39】时间序列分解图（Time Series Decomposition Plot）"></a><font color="##4876FF">【39】时间序列分解图（Time Series Decomposition Plot）</font></h3><p>时间序列分解图将时间序列分解为趋势、季节和残差分量。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> statsmodels.tsa.seasonal <span class="keyword">import</span> seasonal_decompose</span><br><span class="line"><span class="keyword">from</span> dateutil.parser <span class="keyword">import</span> parse</span><br><span class="line"></span><br><span class="line"><span class="comment"># Import Data</span></span><br><span class="line">df = pd.read_csv(<span class="string">'https://github.com/selva86/datasets/raw/master/AirPassengers.csv'</span>)</span><br><span class="line">dates = pd.DatetimeIndex([parse(d).strftime(<span class="string">'%Y-%m-01'</span>) <span class="keyword">for</span> d <span class="keyword">in</span> df[<span class="string">'date'</span>]])</span><br><span class="line">df.set_index(dates, inplace=<span class="keyword">True</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Decompose</span></span><br><span class="line">result = seasonal_decompose(df[<span class="string">'traffic'</span>], model=<span class="string">'multiplicative'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Plot</span></span><br><span class="line">plt.rcParams.update(&#123;<span class="string">'figure.figsize'</span>: (<span class="number">10</span>, <span class="number">10</span>)&#125;)</span><br><span class="line">result.plot().suptitle(<span class="string">'Time Series Decomposition of Air Passengers'</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/TRHX/ImageHosting/ITRHX-PIC/A78/44.png" alt="44"></p><h3 id="【40】多重时间序列（Multiple-Time-Series）"><a href="#【40】多重时间序列（Multiple-Time-Series）" class="headerlink" title="【40】多重时间序列（Multiple Time Series）"></a><font color="##4876FF">【40】多重时间序列（Multiple Time Series）</font></h3><p>您可以在同一图表上绘制多个测量相同值的时间序列，如下所示。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Import Data</span></span><br><span class="line">df = pd.read_csv(<span class="string">'https://github.com/selva86/datasets/raw/master/mortality.csv'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Define the upper limit, lower limit, interval of Y axis and colors</span></span><br><span class="line">y_LL = <span class="number">100</span></span><br><span class="line">y_UL = int(df.iloc[:, <span class="number">1</span>:].max().max() * <span class="number">1.1</span>)</span><br><span class="line">y_interval = <span class="number">400</span></span><br><span class="line">mycolors = [<span class="string">'tab:red'</span>, <span class="string">'tab:blue'</span>, <span class="string">'tab:green'</span>, <span class="string">'tab:orange'</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># Draw Plot and Annotate</span></span><br><span class="line">fig, ax = plt.subplots(<span class="number">1</span>, <span class="number">1</span>, figsize=(<span class="number">16</span>, <span class="number">9</span>), dpi=<span class="number">80</span>)</span><br><span class="line"></span><br><span class="line">columns = df.columns[<span class="number">1</span>:]</span><br><span class="line"><span class="keyword">for</span> i, column <span class="keyword">in</span> enumerate(columns):</span><br><span class="line">    plt.plot(df.date.values, df[column].values, lw=<span class="number">1.5</span>, color=mycolors[i])</span><br><span class="line">    plt.text(df.shape[<span class="number">0</span>] + <span class="number">1</span>, df[column].values[<span class="number">-1</span>], column, fontsize=<span class="number">14</span>, color=mycolors[i])</span><br><span class="line"></span><br><span class="line"><span class="comment"># Draw Tick lines</span></span><br><span class="line"><span class="keyword">for</span> y <span class="keyword">in</span> range(y_LL, y_UL, y_interval):</span><br><span class="line">    plt.hlines(y, xmin=<span class="number">0</span>, xmax=<span class="number">71</span>, colors=<span class="string">'black'</span>, alpha=<span class="number">0.3</span>, linestyles=<span class="string">"--"</span>, lw=<span class="number">0.5</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Decorations</span></span><br><span class="line">plt.tick_params(axis=<span class="string">"both"</span>, which=<span class="string">"both"</span>, bottom=<span class="keyword">False</span>, top=<span class="keyword">False</span>,</span><br><span class="line">                labelbottom=<span class="keyword">True</span>, left=<span class="keyword">False</span>, right=<span class="keyword">False</span>, labelleft=<span class="keyword">True</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Lighten borders</span></span><br><span class="line">plt.gca().spines[<span class="string">"top"</span>].set_alpha(<span class="number">.3</span>)</span><br><span class="line">plt.gca().spines[<span class="string">"bottom"</span>].set_alpha(<span class="number">.3</span>)</span><br><span class="line">plt.gca().spines[<span class="string">"right"</span>].set_alpha(<span class="number">.3</span>)</span><br><span class="line">plt.gca().spines[<span class="string">"left"</span>].set_alpha(<span class="number">.3</span>)</span><br><span class="line"></span><br><span class="line">plt.title(<span class="string">'Number of Deaths from Lung Diseases in the UK (1974-1979)'</span>, fontsize=<span class="number">22</span>)</span><br><span class="line">plt.yticks(range(y_LL, y_UL, y_interval), [str(y) <span class="keyword">for</span> y <span class="keyword">in</span> range(y_LL, y_UL, y_interval)], fontsize=<span class="number">12</span>)</span><br><span class="line">plt.xticks(range(<span class="number">0</span>, df.shape[<span class="number">0</span>], <span class="number">12</span>), df.date.values[::<span class="number">12</span>], horizontalalignment=<span class="string">'left'</span>, fontsize=<span class="number">12</span>)</span><br><span class="line">plt.ylim(y_LL, y_UL)</span><br><span class="line">plt.xlim(<span class="number">-2</span>, <span class="number">80</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/TRHX/ImageHosting/ITRHX-PIC/A78/45.png" alt="45"></p><h3 id="【41】使用次要的-Y-轴来绘制不同范围的图形（Plotting-with-different-scales-using-secondary-Y-axis）"><a href="#【41】使用次要的-Y-轴来绘制不同范围的图形（Plotting-with-different-scales-using-secondary-Y-axis）" class="headerlink" title="【41】使用次要的 Y 轴来绘制不同范围的图形（Plotting with different scales using secondary Y axis）"></a><font color="##4876FF">【41】使用次要的 Y 轴来绘制不同范围的图形（Plotting with different scales using secondary Y axis）</font></h3><p>如果要显示在同一时间点测量两个不同数量的两个时间序列，则可以在右侧的次要 Y 轴上再绘制第二个系列。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Import Data</span></span><br><span class="line">df = pd.read_csv(<span class="string">"https://github.com/selva86/datasets/raw/master/economics.csv"</span>)</span><br><span class="line"></span><br><span class="line">x = df[<span class="string">'date'</span>]</span><br><span class="line">y1 = df[<span class="string">'psavert'</span>]</span><br><span class="line">y2 = df[<span class="string">'unemploy'</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># Plot Line1 (Left Y Axis)</span></span><br><span class="line">fig, ax1 = plt.subplots(<span class="number">1</span>, <span class="number">1</span>, figsize=(<span class="number">16</span>, <span class="number">9</span>), dpi=<span class="number">80</span>)</span><br><span class="line">ax1.plot(x, y1, color=<span class="string">'tab:red'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Plot Line2 (Right Y Axis)</span></span><br><span class="line">ax2 = ax1.twinx()  <span class="comment"># instantiate a second axes that shares the same x-axis</span></span><br><span class="line">ax2.plot(x, y2, color=<span class="string">'tab:blue'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Decorations</span></span><br><span class="line"><span class="comment"># ax1 (left Y axis)</span></span><br><span class="line">ax1.set_xlabel(<span class="string">'Year'</span>, fontsize=<span class="number">20</span>)</span><br><span class="line">ax1.tick_params(axis=<span class="string">'x'</span>, rotation=<span class="number">0</span>, labelsize=<span class="number">12</span>)</span><br><span class="line">ax1.set_ylabel(<span class="string">'Personal Savings Rate'</span>, color=<span class="string">'tab:red'</span>, fontsize=<span class="number">20</span>)</span><br><span class="line">ax1.tick_params(axis=<span class="string">'y'</span>, rotation=<span class="number">0</span>, labelcolor=<span class="string">'tab:red'</span>)</span><br><span class="line">ax1.grid(alpha=<span class="number">.4</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># ax2 (right Y axis)</span></span><br><span class="line">ax2.set_ylabel(<span class="string">"# Unemployed (1000's)"</span>, color=<span class="string">'tab:blue'</span>, fontsize=<span class="number">20</span>)</span><br><span class="line">ax2.tick_params(axis=<span class="string">'y'</span>, labelcolor=<span class="string">'tab:blue'</span>)</span><br><span class="line">ax2.set_xticks(np.arange(<span class="number">0</span>, len(x), <span class="number">60</span>))</span><br><span class="line">ax2.set_xticklabels(x[::<span class="number">60</span>], rotation=<span class="number">90</span>, fontdict=&#123;<span class="string">'fontsize'</span>: <span class="number">10</span>&#125;)</span><br><span class="line">ax2.set_title(<span class="string">"Personal Savings Rate vs Unemployed: Plotting in Secondary Y Axis"</span>, fontsize=<span class="number">22</span>)</span><br><span class="line">fig.tight_layout()</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/TRHX/ImageHosting/ITRHX-PIC/A78/46.png" alt="46"></p><h3 id="【42】带误差带的时间序列（Time-Series-with-Error-Bands）"><a href="#【42】带误差带的时间序列（Time-Series-with-Error-Bands）" class="headerlink" title="【42】带误差带的时间序列（Time Series with Error Bands）"></a><font color="##4876FF">【42】带误差带的时间序列（Time Series with Error Bands）</font></h3><p>如果您有一个时间序列数据集，其中每个时间点（日期/时间戳）有多个观测值，则可以构造具有误差带的时间序列。下面您可以看到一些基于一天中不同时间的订单的示例。还有一个关于45天内到达的订单数量的例子。</p><p>在这种方法中，订单数量的平均值用白线表示。并计算95%的置信区间，并围绕平均值绘制。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> scipy.stats <span class="keyword">import</span> sem</span><br><span class="line"></span><br><span class="line"><span class="comment"># Import Data</span></span><br><span class="line">df = pd.read_csv(<span class="string">"https://raw.githubusercontent.com/selva86/datasets/master/user_orders_hourofday.csv"</span>)</span><br><span class="line">df_mean = df.groupby(<span class="string">'order_hour_of_day'</span>).quantity.mean()</span><br><span class="line">df_se = df.groupby(<span class="string">'order_hour_of_day'</span>).quantity.apply(sem).mul(<span class="number">1.96</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Plot</span></span><br><span class="line">plt.figure(figsize=(<span class="number">16</span>, <span class="number">10</span>), dpi=<span class="number">80</span>)</span><br><span class="line">plt.ylabel(<span class="string">"# Orders"</span>, fontsize=<span class="number">16</span>)</span><br><span class="line">x = df_mean.index</span><br><span class="line">plt.plot(x, df_mean, color=<span class="string">"white"</span>, lw=<span class="number">2</span>)</span><br><span class="line">plt.fill_between(x, df_mean - df_se, df_mean + df_se, color=<span class="string">"#3F5D7D"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Decorations</span></span><br><span class="line"><span class="comment"># Lighten borders</span></span><br><span class="line">plt.gca().spines[<span class="string">"top"</span>].set_alpha(<span class="number">0</span>)</span><br><span class="line">plt.gca().spines[<span class="string">"bottom"</span>].set_alpha(<span class="number">1</span>)</span><br><span class="line">plt.gca().spines[<span class="string">"right"</span>].set_alpha(<span class="number">0</span>)</span><br><span class="line">plt.gca().spines[<span class="string">"left"</span>].set_alpha(<span class="number">1</span>)</span><br><span class="line">plt.xticks(x[::<span class="number">2</span>], [str(d) <span class="keyword">for</span> d <span class="keyword">in</span> x[::<span class="number">2</span>]], fontsize=<span class="number">12</span>)</span><br><span class="line">plt.title(<span class="string">"User Orders by Hour of Day (95% confidence)"</span>, fontsize=<span class="number">22</span>)</span><br><span class="line">plt.xlabel(<span class="string">"Hour of Day"</span>)</span><br><span class="line"></span><br><span class="line">s, e = plt.gca().get_xlim()</span><br><span class="line">plt.xlim(s, e)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Draw Horizontal Tick lines</span></span><br><span class="line"><span class="keyword">for</span> y <span class="keyword">in</span> range(<span class="number">8</span>, <span class="number">20</span>, <span class="number">2</span>):</span><br><span class="line">    plt.hlines(y, xmin=s, xmax=e, colors=<span class="string">'black'</span>, alpha=<span class="number">0.5</span>, linestyles=<span class="string">"--"</span>, lw=<span class="number">0.5</span>)</span><br><span class="line"></span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/TRHX/ImageHosting/ITRHX-PIC/A78/47.png" alt="47"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"Data Source: https://www.kaggle.com/olistbr/brazilian-ecommerce#olist_orders_dataset.csv"</span></span><br><span class="line"><span class="keyword">from</span> dateutil.parser <span class="keyword">import</span> parse</span><br><span class="line"><span class="keyword">from</span> scipy.stats <span class="keyword">import</span> sem</span><br><span class="line"></span><br><span class="line"><span class="comment"># Import Data</span></span><br><span class="line">df_raw = pd.read_csv(<span class="string">'https://raw.githubusercontent.com/selva86/datasets/master/orders_45d.csv'</span>,</span><br><span class="line">                     parse_dates=[<span class="string">'purchase_time'</span>, <span class="string">'purchase_date'</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment"># Prepare Data: Daily Mean and SE Bands</span></span><br><span class="line">df_mean = df_raw.groupby(<span class="string">'purchase_date'</span>).quantity.mean()</span><br><span class="line">df_se = df_raw.groupby(<span class="string">'purchase_date'</span>).quantity.apply(sem).mul(<span class="number">1.96</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Plot</span></span><br><span class="line">plt.figure(figsize=(<span class="number">16</span>, <span class="number">10</span>), dpi=<span class="number">80</span>)</span><br><span class="line">plt.ylabel(<span class="string">"# Daily Orders"</span>, fontsize=<span class="number">16</span>)</span><br><span class="line">x = [d.date().strftime(<span class="string">'%Y-%m-%d'</span>) <span class="keyword">for</span> d <span class="keyword">in</span> df_mean.index]</span><br><span class="line">plt.plot(x, df_mean, color=<span class="string">"white"</span>, lw=<span class="number">2</span>)</span><br><span class="line">plt.fill_between(x, df_mean - df_se, df_mean + df_se, color=<span class="string">"#3F5D7D"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Decorations</span></span><br><span class="line"><span class="comment"># Lighten borders</span></span><br><span class="line">plt.gca().spines[<span class="string">"top"</span>].set_alpha(<span class="number">0</span>)</span><br><span class="line">plt.gca().spines[<span class="string">"bottom"</span>].set_alpha(<span class="number">1</span>)</span><br><span class="line">plt.gca().spines[<span class="string">"right"</span>].set_alpha(<span class="number">0</span>)</span><br><span class="line">plt.gca().spines[<span class="string">"left"</span>].set_alpha(<span class="number">1</span>)</span><br><span class="line">plt.xticks(x[::<span class="number">6</span>], [str(d) <span class="keyword">for</span> d <span class="keyword">in</span> x[::<span class="number">6</span>]], fontsize=<span class="number">12</span>)</span><br><span class="line">plt.title(<span class="string">"Daily Order Quantity of Brazilian Retail with Error Bands (95% confidence)"</span>, fontsize=<span class="number">20</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Axis limits</span></span><br><span class="line">s, e = plt.gca().get_xlim()</span><br><span class="line">plt.xlim(s, e - <span class="number">2</span>)</span><br><span class="line">plt.ylim(<span class="number">4</span>, <span class="number">10</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Draw Horizontal Tick lines</span></span><br><span class="line"><span class="keyword">for</span> y <span class="keyword">in</span> range(<span class="number">5</span>, <span class="number">10</span>, <span class="number">1</span>):</span><br><span class="line">    plt.hlines(y, xmin=s, xmax=e, colors=<span class="string">'black'</span>, alpha=<span class="number">0.5</span>, linestyles=<span class="string">"--"</span>, lw=<span class="number">0.5</span>)</span><br><span class="line"></span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/TRHX/ImageHosting/ITRHX-PIC/A78/48.png" alt="48"></p><h3 id="【43】堆积面积图（Stacked-Area-Chart）"><a href="#【43】堆积面积图（Stacked-Area-Chart）" class="headerlink" title="【43】堆积面积图（Stacked Area Chart）"></a><font color="##4876FF">【43】堆积面积图（Stacked Area Chart）</font></h3><p>堆积面积图提供了多个时间序列的贡献程度的可视化表示，以便相互比较。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Import Data</span></span><br><span class="line">df = pd.read_csv(<span class="string">'https://raw.githubusercontent.com/selva86/datasets/master/nightvisitors.csv'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Decide Colors</span></span><br><span class="line">mycolors = [<span class="string">'tab:red'</span>, <span class="string">'tab:blue'</span>, <span class="string">'tab:green'</span>, <span class="string">'tab:orange'</span>, <span class="string">'tab:brown'</span>, <span class="string">'tab:grey'</span>, <span class="string">'tab:pink'</span>, <span class="string">'tab:olive'</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># Draw Plot and Annotate</span></span><br><span class="line">fig, ax = plt.subplots(<span class="number">1</span>, <span class="number">1</span>, figsize=(<span class="number">16</span>, <span class="number">9</span>), dpi=<span class="number">80</span>)</span><br><span class="line">columns = df.columns[<span class="number">1</span>:]</span><br><span class="line">labs = columns.values.tolist()</span><br><span class="line"></span><br><span class="line"><span class="comment"># Prepare data</span></span><br><span class="line">x = df[<span class="string">'yearmon'</span>].values.tolist()</span><br><span class="line">y0 = df[columns[<span class="number">0</span>]].values.tolist()</span><br><span class="line">y1 = df[columns[<span class="number">1</span>]].values.tolist()</span><br><span class="line">y2 = df[columns[<span class="number">2</span>]].values.tolist()</span><br><span class="line">y3 = df[columns[<span class="number">3</span>]].values.tolist()</span><br><span class="line">y4 = df[columns[<span class="number">4</span>]].values.tolist()</span><br><span class="line">y5 = df[columns[<span class="number">5</span>]].values.tolist()</span><br><span class="line">y6 = df[columns[<span class="number">6</span>]].values.tolist()</span><br><span class="line">y7 = df[columns[<span class="number">7</span>]].values.tolist()</span><br><span class="line">y = np.vstack([y0, y2, y4, y6, y7, y5, y1, y3])</span><br><span class="line"></span><br><span class="line"><span class="comment"># Plot for each column</span></span><br><span class="line">labs = columns.values.tolist()</span><br><span class="line">ax = plt.gca()</span><br><span class="line">ax.stackplot(x, y, labels=labs, colors=mycolors, alpha=<span class="number">0.8</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Decorations</span></span><br><span class="line">ax.set_title(<span class="string">'Night Visitors in Australian Regions'</span>, fontsize=<span class="number">18</span>)</span><br><span class="line">ax.set(ylim=[<span class="number">0</span>, <span class="number">100000</span>])</span><br><span class="line">ax.legend(fontsize=<span class="number">10</span>, ncol=<span class="number">4</span>)</span><br><span class="line">plt.xticks(x[::<span class="number">5</span>], fontsize=<span class="number">10</span>, horizontalalignment=<span class="string">'center'</span>)</span><br><span class="line">plt.yticks(np.arange(<span class="number">10000</span>, <span class="number">100000</span>, <span class="number">20000</span>), fontsize=<span class="number">10</span>)</span><br><span class="line">plt.xlim(x[<span class="number">0</span>], x[<span class="number">-1</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment"># Lighten borders</span></span><br><span class="line">plt.gca().spines[<span class="string">"top"</span>].set_alpha(<span class="number">0</span>)</span><br><span class="line">plt.gca().spines[<span class="string">"bottom"</span>].set_alpha(<span class="number">.3</span>)</span><br><span class="line">plt.gca().spines[<span class="string">"right"</span>].set_alpha(<span class="number">0</span>)</span><br><span class="line">plt.gca().spines[<span class="string">"left"</span>].set_alpha(<span class="number">.3</span>)</span><br><span class="line"></span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/TRHX/ImageHosting/ITRHX-PIC/A78/49.png" alt="49"></p><h3 id="【44】未堆积面积图（Area-Chart-UnStacked）"><a href="#【44】未堆积面积图（Area-Chart-UnStacked）" class="headerlink" title="【44】未堆积面积图（Area Chart UnStacked）"></a><font color="##4876FF">【44】未堆积面积图（Area Chart UnStacked）</font></h3><p>未堆积的面积图用于可视化两个或多个序列彼此之间的进度（起伏）。在下面的图表中，你可以清楚地看到，随着失业持续时间的中位数增加，个人储蓄率是如何下降的。未堆积面积图很好地展示了这一现象。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Import Data</span></span><br><span class="line">df = pd.read_csv(<span class="string">"https://github.com/selva86/datasets/raw/master/economics.csv"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Prepare Data</span></span><br><span class="line">x = df[<span class="string">'date'</span>].values.tolist()</span><br><span class="line">y1 = df[<span class="string">'psavert'</span>].values.tolist()</span><br><span class="line">y2 = df[<span class="string">'uempmed'</span>].values.tolist()</span><br><span class="line">mycolors = [<span class="string">'tab:red'</span>, <span class="string">'tab:blue'</span>, <span class="string">'tab:green'</span>, <span class="string">'tab:orange'</span>, <span class="string">'tab:brown'</span>, <span class="string">'tab:grey'</span>, <span class="string">'tab:pink'</span>, <span class="string">'tab:olive'</span>]</span><br><span class="line">columns = [<span class="string">'psavert'</span>, <span class="string">'uempmed'</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># Draw Plot</span></span><br><span class="line">fig, ax = plt.subplots(<span class="number">1</span>, <span class="number">1</span>, figsize=(<span class="number">16</span>, <span class="number">9</span>), dpi=<span class="number">80</span>)</span><br><span class="line">ax.fill_between(x, y1=y1, y2=<span class="number">0</span>, label=columns[<span class="number">1</span>], alpha=<span class="number">0.5</span>, color=mycolors[<span class="number">1</span>], linewidth=<span class="number">2</span>)</span><br><span class="line">ax.fill_between(x, y1=y2, y2=<span class="number">0</span>, label=columns[<span class="number">0</span>], alpha=<span class="number">0.5</span>, color=mycolors[<span class="number">0</span>], linewidth=<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Decorations</span></span><br><span class="line">ax.set_title(<span class="string">'Personal Savings Rate vs Median Duration of Unemployment'</span>, fontsize=<span class="number">18</span>)</span><br><span class="line">ax.set(ylim=[<span class="number">0</span>, <span class="number">30</span>])</span><br><span class="line">ax.legend(loc=<span class="string">'best'</span>, fontsize=<span class="number">12</span>)</span><br><span class="line">plt.xticks(x[::<span class="number">50</span>], fontsize=<span class="number">10</span>, horizontalalignment=<span class="string">'center'</span>)</span><br><span class="line">plt.yticks(np.arange(<span class="number">2.5</span>, <span class="number">30.0</span>, <span class="number">2.5</span>), fontsize=<span class="number">10</span>)</span><br><span class="line">plt.xlim(<span class="number">-10</span>, x[<span class="number">-1</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment"># Draw Tick lines</span></span><br><span class="line"><span class="keyword">for</span> y <span class="keyword">in</span> np.arange(<span class="number">2.5</span>, <span class="number">30.0</span>, <span class="number">2.5</span>):</span><br><span class="line">    plt.hlines(y, xmin=<span class="number">0</span>, xmax=len(x), colors=<span class="string">'black'</span>, alpha=<span class="number">0.3</span>, linestyles=<span class="string">"--"</span>, lw=<span class="number">0.5</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Lighten borders</span></span><br><span class="line">plt.gca().spines[<span class="string">"top"</span>].set_alpha(<span class="number">0</span>)</span><br><span class="line">plt.gca().spines[<span class="string">"bottom"</span>].set_alpha(<span class="number">.3</span>)</span><br><span class="line">plt.gca().spines[<span class="string">"right"</span>].set_alpha(<span class="number">0</span>)</span><br><span class="line">plt.gca().spines[<span class="string">"left"</span>].set_alpha(<span class="number">.3</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/TRHX/ImageHosting/ITRHX-PIC/A78/50.png" alt="50"></p><h3 id="【45】日历热力图（Calendar-Heat-Map）"><a href="#【45】日历热力图（Calendar-Heat-Map）" class="headerlink" title="【45】日历热力图（Calendar Heat Map）"></a><font color="##4876FF">【45】日历热力图（Calendar Heat Map）</font></h3><p>与时间序列相比，日历地图是另一种基于时间的数据可视化的不太受欢迎的方法。虽然在视觉上很吸引人，但数值并不十分明显。然而，它能很好地描绘极端值和假日效果。</p><p>【译者 TRHX 注：在使用该方法时要先安装 calmap 库】</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> matplotlib <span class="keyword">as</span> mpl</span><br><span class="line"><span class="keyword">import</span> calmap</span><br><span class="line"></span><br><span class="line"><span class="comment"># Import Data</span></span><br><span class="line">df = pd.read_csv(<span class="string">"https://raw.githubusercontent.com/selva86/datasets/master/yahoo.csv"</span>, parse_dates=[<span class="string">'date'</span>])</span><br><span class="line">df.set_index(<span class="string">'date'</span>, inplace=<span class="keyword">True</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Plot</span></span><br><span class="line">plt.figure(figsize=(<span class="number">16</span>, <span class="number">10</span>), dpi=<span class="number">80</span>)</span><br><span class="line">calmap.calendarplot(df[<span class="string">'2014'</span>][<span class="string">'VIX.Close'</span>], fig_kws=&#123;<span class="string">'figsize'</span>: (<span class="number">16</span>, <span class="number">10</span>)&#125;,</span><br><span class="line">                    yearlabel_kws=&#123;<span class="string">'color'</span>: <span class="string">'black'</span>, <span class="string">'fontsize'</span>: <span class="number">14</span>&#125;, subplot_kws=&#123;<span class="string">'title'</span>: <span class="string">'Yahoo Stock Prices'</span>&#125;)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/TRHX/ImageHosting/ITRHX-PIC/A78/51.png" alt="51"></p><h3 id="【46】季节图（Seasonal-Plot）"><a href="#【46】季节图（Seasonal-Plot）" class="headerlink" title="【46】季节图（Seasonal Plot）"></a><font color="##4876FF">【46】季节图（Seasonal Plot）</font></h3><p>季节图可用于比较上一季度同一天（年/月/周等）时间序列的表现。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> dateutil.parser <span class="keyword">import</span> parse</span><br><span class="line"></span><br><span class="line"><span class="comment"># Import Data</span></span><br><span class="line">df = pd.read_csv(<span class="string">'https://github.com/selva86/datasets/raw/master/AirPassengers.csv'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Prepare data</span></span><br><span class="line">df[<span class="string">'year'</span>] = [parse(d).year <span class="keyword">for</span> d <span class="keyword">in</span> df.date]</span><br><span class="line">df[<span class="string">'month'</span>] = [parse(d).strftime(<span class="string">'%b'</span>) <span class="keyword">for</span> d <span class="keyword">in</span> df.date]</span><br><span class="line">years = df[<span class="string">'year'</span>].unique()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 译者 TRHX 添加了该行代码</span></span><br><span class="line">df.rename(columns=&#123;<span class="string">'value'</span>: <span class="string">'traffic'</span>&#125;, inplace=<span class="keyword">True</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Draw Plot</span></span><br><span class="line">mycolors = [<span class="string">'tab:red'</span>, <span class="string">'tab:blue'</span>, <span class="string">'tab:green'</span>, <span class="string">'tab:orange'</span>, <span class="string">'tab:brown'</span>, <span class="string">'tab:grey'</span>, <span class="string">'tab:pink'</span>, <span class="string">'tab:olive'</span>,</span><br><span class="line">            <span class="string">'deeppink'</span>, <span class="string">'steelblue'</span>, <span class="string">'firebrick'</span>, <span class="string">'mediumseagreen'</span>]</span><br><span class="line">plt.figure(figsize=(<span class="number">16</span>, <span class="number">10</span>), dpi=<span class="number">80</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i, y <span class="keyword">in</span> enumerate(years):</span><br><span class="line">    plt.plot(<span class="string">'month'</span>, <span class="string">'traffic'</span>, data=df.loc[df.year == y, :], color=mycolors[i], label=y)</span><br><span class="line">    plt.text(df.loc[df.year == y, :].shape[<span class="number">0</span>] - <span class="number">.9</span>, df.loc[df.year == y, <span class="string">'traffic'</span>][<span class="number">-1</span>:].values[<span class="number">0</span>], y, fontsize=<span class="number">12</span>,</span><br><span class="line">             color=mycolors[i])</span><br><span class="line"></span><br><span class="line"><span class="comment"># Decoration</span></span><br><span class="line">plt.ylim(<span class="number">50</span>, <span class="number">750</span>)</span><br><span class="line">plt.xlim(<span class="number">-0.3</span>, <span class="number">11</span>)</span><br><span class="line">plt.ylabel(<span class="string">'$Air Traffic$'</span>)</span><br><span class="line">plt.yticks(fontsize=<span class="number">12</span>, alpha=<span class="number">.7</span>)</span><br><span class="line">plt.title(<span class="string">"Monthly Seasonal Plot: Air Passengers Traffic (1949 - 1969)"</span>, fontsize=<span class="number">22</span>)</span><br><span class="line">plt.grid(axis=<span class="string">'y'</span>, alpha=<span class="number">.3</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Remove borders</span></span><br><span class="line">plt.gca().spines[<span class="string">"top"</span>].set_alpha(<span class="number">0.0</span>)</span><br><span class="line">plt.gca().spines[<span class="string">"bottom"</span>].set_alpha(<span class="number">0.5</span>)</span><br><span class="line">plt.gca().spines[<span class="string">"right"</span>].set_alpha(<span class="number">0.0</span>)</span><br><span class="line">plt.gca().spines[<span class="string">"left"</span>].set_alpha(<span class="number">0.5</span>)</span><br><span class="line"><span class="comment"># plt.legend(loc='upper right', ncol=2, fontsize=12)</span></span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/TRHX/ImageHosting/ITRHX-PIC/A78/52.png" alt="52"></p><h2 id="【9x00】分组（-Groups）"><a href="#【9x00】分组（-Groups）" class="headerlink" title="【9x00】分组（ Groups）"></a><font color="#FF0000">【9x00】分组（ Groups）</font></h2><h3 id="【47】树状图（Dendrogram）"><a href="#【47】树状图（Dendrogram）" class="headerlink" title="【47】树状图（Dendrogram）"></a><font color="##4876FF">【47】树状图（Dendrogram）</font></h3><p>树状图根据给定的距离度量将相似的点组合在一起，并根据点的相似性将它们组织成树状链接。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> scipy.cluster.hierarchy <span class="keyword">as</span> shc</span><br><span class="line"></span><br><span class="line"><span class="comment"># Import Data</span></span><br><span class="line">df = pd.read_csv(<span class="string">'https://raw.githubusercontent.com/selva86/datasets/master/USArrests.csv'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Plot</span></span><br><span class="line">plt.figure(figsize=(<span class="number">16</span>, <span class="number">10</span>), dpi=<span class="number">80</span>)</span><br><span class="line">plt.title(<span class="string">"USArrests Dendograms"</span>, fontsize=<span class="number">22</span>)</span><br><span class="line">dend = shc.dendrogram(shc.linkage(df[[<span class="string">'Murder'</span>, <span class="string">'Assault'</span>, <span class="string">'UrbanPop'</span>, <span class="string">'Rape'</span>]], method=<span class="string">'ward'</span>), labels=df.State.values,</span><br><span class="line">                      color_threshold=<span class="number">100</span>)</span><br><span class="line">plt.xticks(fontsize=<span class="number">12</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/TRHX/ImageHosting/ITRHX-PIC/A78/53.png" alt="53"></p><h3 id="【48】聚类图（Cluster-Plot）"><a href="#【48】聚类图（Cluster-Plot）" class="headerlink" title="【48】聚类图（Cluster Plot）"></a><font color="##4876FF">【48】聚类图（Cluster Plot）</font></h3><p>聚类图可以用来划分属于同一个聚类的点。下面是一个基于 USArrests 数据集将美国各州分成 5 组的代表性示例。这个聚类图使用 ‘murder’ 和 ‘assault’ 作为 X 轴和 Y 轴。或者，您可以将第一个主元件用作 X 轴和 Y 轴。</p><p>【译者 TRHX 注：在使用该方法时要先安装 sklearn 库】</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> sklearn.cluster <span class="keyword">import</span> AgglomerativeClustering</span><br><span class="line"><span class="keyword">from</span> scipy.spatial <span class="keyword">import</span> ConvexHull</span><br><span class="line"></span><br><span class="line"><span class="comment"># Import Data</span></span><br><span class="line">df = pd.read_csv(<span class="string">'https://raw.githubusercontent.com/selva86/datasets/master/USArrests.csv'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Agglomerative Clustering</span></span><br><span class="line">cluster = AgglomerativeClustering(n_clusters=<span class="number">5</span>, affinity=<span class="string">'euclidean'</span>, linkage=<span class="string">'ward'</span>)</span><br><span class="line">cluster.fit_predict(df[[<span class="string">'Murder'</span>, <span class="string">'Assault'</span>, <span class="string">'UrbanPop'</span>, <span class="string">'Rape'</span>]])</span><br><span class="line"></span><br><span class="line"><span class="comment"># Plot</span></span><br><span class="line">plt.figure(figsize=(<span class="number">14</span>, <span class="number">10</span>), dpi=<span class="number">80</span>)</span><br><span class="line">plt.scatter(df.iloc[:, <span class="number">0</span>], df.iloc[:, <span class="number">1</span>], c=cluster.labels_, cmap=<span class="string">'tab10'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># Encircle</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">encircle</span><span class="params">(x, y, ax=None, **kw)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> ax: ax = plt.gca()</span><br><span class="line">    p = np.c_[x, y]</span><br><span class="line">    hull = ConvexHull(p)</span><br><span class="line">    poly = plt.Polygon(p[hull.vertices,:], **kw)</span><br><span class="line">    ax.add_patch(poly)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Draw polygon surrounding vertices</span></span><br><span class="line">encircle(df.loc[cluster.labels_ == <span class="number">0</span>, <span class="string">'Murder'</span>], df.loc[cluster.labels_ == <span class="number">0</span>, <span class="string">'Assault'</span>], ec=<span class="string">"k"</span>, fc=<span class="string">"gold"</span>, alpha=<span class="number">0.2</span>, linewidth=<span class="number">0</span>)</span><br><span class="line">encircle(df.loc[cluster.labels_ == <span class="number">1</span>, <span class="string">'Murder'</span>], df.loc[cluster.labels_ == <span class="number">1</span>, <span class="string">'Assault'</span>], ec=<span class="string">"k"</span>, fc=<span class="string">"tab:blue"</span>, alpha=<span class="number">0.2</span>, linewidth=<span class="number">0</span>)</span><br><span class="line">encircle(df.loc[cluster.labels_ == <span class="number">2</span>, <span class="string">'Murder'</span>], df.loc[cluster.labels_ == <span class="number">2</span>, <span class="string">'Assault'</span>], ec=<span class="string">"k"</span>, fc=<span class="string">"tab:red"</span>, alpha=<span class="number">0.2</span>, linewidth=<span class="number">0</span>)</span><br><span class="line">encircle(df.loc[cluster.labels_ == <span class="number">3</span>, <span class="string">'Murder'</span>], df.loc[cluster.labels_ == <span class="number">3</span>, <span class="string">'Assault'</span>], ec=<span class="string">"k"</span>, fc=<span class="string">"tab:green"</span>, alpha=<span class="number">0.2</span>, linewidth=<span class="number">0</span>)</span><br><span class="line">encircle(df.loc[cluster.labels_ == <span class="number">4</span>, <span class="string">'Murder'</span>], df.loc[cluster.labels_ == <span class="number">4</span>, <span class="string">'Assault'</span>], ec=<span class="string">"k"</span>, fc=<span class="string">"tab:orange"</span>, alpha=<span class="number">0.2</span>, linewidth=<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Decorations</span></span><br><span class="line">plt.xlabel(<span class="string">'Murder'</span>); plt.xticks(fontsize=<span class="number">12</span>)</span><br><span class="line">plt.ylabel(<span class="string">'Assault'</span>); plt.yticks(fontsize=<span class="number">12</span>)</span><br><span class="line">plt.title(<span class="string">'Agglomerative Clustering of USArrests (5 Groups)'</span>, fontsize=<span class="number">22</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/TRHX/ImageHosting/ITRHX-PIC/A78/54.png" alt="54"></p><h3 id="【49】安德鲁斯曲线（Andrews-Curve）"><a href="#【49】安德鲁斯曲线（Andrews-Curve）" class="headerlink" title="【49】安德鲁斯曲线（Andrews Curve）"></a><font color="##4876FF">【49】安德鲁斯曲线（Andrews Curve）</font></h3><p>安德鲁斯曲线有助于可视化是否存在基于给定分组的数值特征的固有分组。如果特征（数据集中的列）不能帮助区分组（cyl），则行将不会像下图所示被很好地分隔开。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pandas.plotting <span class="keyword">import</span> andrews_curves</span><br><span class="line"></span><br><span class="line"><span class="comment"># Import</span></span><br><span class="line">df = pd.read_csv(<span class="string">"https://github.com/selva86/datasets/raw/master/mtcars.csv"</span>)</span><br><span class="line">df.drop([<span class="string">'cars'</span>, <span class="string">'carname'</span>], axis=<span class="number">1</span>, inplace=<span class="keyword">True</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Plot</span></span><br><span class="line">plt.figure(figsize=(<span class="number">12</span>, <span class="number">9</span>), dpi=<span class="number">80</span>)</span><br><span class="line">andrews_curves(df, <span class="string">'cyl'</span>, colormap=<span class="string">'Set1'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Lighten borders</span></span><br><span class="line">plt.gca().spines[<span class="string">"top"</span>].set_alpha(<span class="number">0</span>)</span><br><span class="line">plt.gca().spines[<span class="string">"bottom"</span>].set_alpha(<span class="number">.3</span>)</span><br><span class="line">plt.gca().spines[<span class="string">"right"</span>].set_alpha(<span class="number">0</span>)</span><br><span class="line">plt.gca().spines[<span class="string">"left"</span>].set_alpha(<span class="number">.3</span>)</span><br><span class="line"></span><br><span class="line">plt.title(<span class="string">'Andrews Curves of mtcars'</span>, fontsize=<span class="number">22</span>)</span><br><span class="line">plt.xlim(<span class="number">-3</span>, <span class="number">3</span>)</span><br><span class="line">plt.grid(alpha=<span class="number">0.3</span>)</span><br><span class="line">plt.xticks(fontsize=<span class="number">12</span>)</span><br><span class="line">plt.yticks(fontsize=<span class="number">12</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/TRHX/ImageHosting/ITRHX-PIC/A78/55.png" alt="55"></p><h3 id="【50】平行坐标图（Parallel-Coordinates）"><a href="#【50】平行坐标图（Parallel-Coordinates）" class="headerlink" title="【50】平行坐标图（Parallel Coordinates）"></a><font color="##4876FF">【50】平行坐标图（Parallel Coordinates）</font></h3><p>平行坐标有助于可视化功能是否有助于有效地隔离组。如果一个分离受到影响，则该特征可能在预测该组时非常有用。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pandas.plotting <span class="keyword">import</span> parallel_coordinates</span><br><span class="line"></span><br><span class="line"><span class="comment"># Import Data</span></span><br><span class="line">df_final = pd.read_csv(<span class="string">"https://raw.githubusercontent.com/selva86/datasets/master/diamonds_filter.csv"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Plot</span></span><br><span class="line">plt.figure(figsize=(<span class="number">12</span>, <span class="number">9</span>), dpi=<span class="number">80</span>)</span><br><span class="line">parallel_coordinates(df_final, <span class="string">'cut'</span>, colormap=<span class="string">'Dark2'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Lighten borders</span></span><br><span class="line">plt.gca().spines[<span class="string">"top"</span>].set_alpha(<span class="number">0</span>)</span><br><span class="line">plt.gca().spines[<span class="string">"bottom"</span>].set_alpha(<span class="number">.3</span>)</span><br><span class="line">plt.gca().spines[<span class="string">"right"</span>].set_alpha(<span class="number">0</span>)</span><br><span class="line">plt.gca().spines[<span class="string">"left"</span>].set_alpha(<span class="number">.3</span>)</span><br><span class="line"></span><br><span class="line">plt.title(<span class="string">'Parallel Coordinated of Diamonds'</span>, fontsize=<span class="number">22</span>)</span><br><span class="line">plt.grid(alpha=<span class="number">0.3</span>)</span><br><span class="line">plt.xticks(fontsize=<span class="number">12</span>)</span><br><span class="line">plt.yticks(fontsize=<span class="number">12</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/TRHX/ImageHosting/ITRHX-PIC/A78/56.png" alt="56"></p><hr><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">这里是一段防爬虫文本，请读者忽略。</span></span><br><span class="line"><span class="string">本译文首发于</span> <span class="string">CSDN，作者</span> <span class="string">Selva</span> <span class="string">Prabhakaran，译者</span> <span class="string">TRHX。</span></span><br><span class="line"><span class="string">本文链接：https://itrhx.blog.csdn.net/article/details/106558131</span></span><br><span class="line"><span class="string">原文链接：https://www.machinelearningplus.com/plots/top-50-matplotlib-visualizations-the-master-plots-python/</span></span><br></pre></td></tr></table></figure><hr>]]></content>
    
    <summary type="html">
    
      Python 数据分析三剑客之 Matplotlib（十一）：最常用的、最有价值的 50 个图表【译文】。
    
    </summary>
    
      <category term="Python 数据分析" scheme="https://www.itrhx.com/categories/Python-%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/"/>
    
      <category term="Matplotlib" scheme="https://www.itrhx.com/categories/Python-%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/Matplotlib/"/>
    
    
      <category term="Matplotlib" scheme="https://www.itrhx.com/tags/Matplotlib/"/>
    
  </entry>
  
  <entry>
    <title>Python 数据分析三剑客之 Matplotlib（十）：3D 图的绘制</title>
    <link href="https://www.itrhx.com/2020/06/08/A77-Matplotlib-10/"/>
    <id>https://www.itrhx.com/2020/06/08/A77-Matplotlib-10/</id>
    <published>2020-06-07T16:01:53.824Z</published>
    <updated>2020-07-06T13:32:48.065Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>Matplotlib 系列文章：</p><ul><li><a href="https://www.itrhx.com/2020/04/10/A68-Matplotlib-01/">Python 数据分析三剑客之 Matplotlib（一）：初识 Matplotlib 与其 matplotibrc 配置文件</a></li><li><a href="https://www.itrhx.com/2020/04/12/A69-Matplotlib-02/">Python 数据分析三剑客之 Matplotlib（二）：文本描述 / 中文支持 / 画布 / 网格等基本图像属性</a></li><li><a href="https://www.itrhx.com/2020/04/14/A70-Matplotlib-03/">Python 数据分析三剑客之 Matplotlib（三）：图例 / LaTeX / 刻度 / 子图 / 补丁等基本图像属性</a></li><li><a href="https://www.itrhx.com/2020/04/16/A71-Matplotlib-04/">Python 数据分析三剑客之 Matplotlib（四）：线性图的绘制</a></li><li><a href="https://www.itrhx.com/2020/04/18/A72-Matplotlib-05/">Python 数据分析三剑客之 Matplotlib（五）：散点图的绘制</a></li><li><a href="https://www.itrhx.com/2020/04/21/A73-Matplotlib-06/">Python 数据分析三剑客之 Matplotlib（六）：直方图 / 柱状图 / 条形图的绘制</a></li><li><a href="https://www.itrhx.com/2020/04/24/A74-Matplotlib-07/">Python 数据分析三剑客之 Matplotlib（七）：饼状图的绘制</a></li><li><a href="https://www.itrhx.com/2020/04/30/A75-Matplotlib-08/">Python 数据分析三剑客之 Matplotlib（八）：等高线 / 等值线图的绘制</a></li><li><a href="https://www.itrhx.com/2020/06/03/A76-Matplotlib-09/">Python 数据分析三剑客之 Matplotlib（九）：极区图 / 极坐标图 / 雷达图的绘制</a></li><li><a href="https://www.itrhx.com/2020/06/08/A77-Matplotlib-10/">Python 数据分析三剑客之 Matplotlib（十）：3D 图的绘制</a></li><li><a href="https://www.itrhx.com/2020/06/09/A78-Matplotlib-11/">Python 数据分析三剑客之 Matplotlib（十一）：最热门最常用的 50 个图表</a>【译文】</li></ul><p>专栏：</p><p>【<a href="https://www.itrhx.com/categories/Python-%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/NumPy/">NumPy 专栏</a>】【<a href="https://www.itrhx.com/categories/Python-%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/Pandas/">Pandas 专栏</a>】【<a href="https://www.itrhx.com/categories/Python-%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/Matplotlib/">Matplotlib 专栏</a>】</p><p>推荐学习资料与网站：</p><p>【<a href="https://www.numpy.org.cn/" target="_blank" rel="noopener">NumPy 中文网</a>】【<a href="https://www.pypandas.cn/" target="_blank" rel="noopener">Pandas 中文网</a>】【<a href="https://www.matplotlib.org.cn/" target="_blank" rel="noopener">Matplotlib 中文网</a>】【<a href="https://github.com/TRHX/Python-quick-reference-table" target="_blank" rel="noopener">NumPy、Matplotlib、Pandas 速查表</a>】</p><hr><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">这里是一段防爬虫文本，请读者忽略。</span></span><br><span class="line"><span class="string">本文原创首发于</span> <span class="string">CSDN，作者</span> <span class="string">TRHX。</span></span><br><span class="line"><span class="string">博客首页：https://itrhx.blog.csdn.net/</span></span><br><span class="line"><span class="string">本文链接：https://itrhx.blog.csdn.net/article/details/106558131</span></span><br><span class="line"><span class="string">未经授权，禁止转载！恶意转载，后果自负！尊重原创，远离剽窃！</span></span><br></pre></td></tr></table></figure><hr><h2 id="【01x00】了解-mplot3d-Toolkit"><a href="#【01x00】了解-mplot3d-Toolkit" class="headerlink" title="【01x00】了解 mplot3d Toolkit"></a><font color="#FF0000">【01x00】了解 mplot3d Toolkit</font></h2><p>mplot3d Toolkit 即 mplot3d 工具包，在 matplotlib 中使用 mplot3d 工具包可以绘制 3D 图。</p><p>mplot3d 官方文档：<a href="https://matplotlib.org/tutorials/toolkits/mplot3d.html" target="_blank" rel="noopener">https://matplotlib.org/tutorials/toolkits/mplot3d.html</a></p><p>在 matplotlib 中，figure 为画布，axes 为绘图区，<code>fig.add_subplot()</code>、<code>plt.subplot()</code> 方法均可以创建子图，在绘制 3D 图时，某些 2D 图的参数也适用于 3D 图，在本文的示例中，可能会用到的一些没有具体解释的函数或者参数，其用法均可在前面的系列文章中找到：</p><ul><li><p><a href="https://itrhx.blog.csdn.net/article/details/105638122" target="_blank" rel="noopener">《Python 数据分析三剑客之 Matplotlib（一）：初识 Matplotlib 与其 matplotibrc 配置文件》</a> </p></li><li><p><a href="https://itrhx.blog.csdn.net/article/details/105828049" target="_blank" rel="noopener">《Python 数据分析三剑客之 Matplotlib（二）：文本描述 / 中文支持 / 画布 / 网格等基本图像属性》</a></p></li><li><p><a href="https://itrhx.blog.csdn.net/article/details/105828143" target="_blank" rel="noopener">《Python 数据分析三剑客之 Matplotlib（三）：图例 / LaTeX / 刻度 / 子图 / 补丁等基本图像属性》</a></p></li></ul><font color="#FF0000"><strong>绘制 3D 图的步骤：创建 Axes3D 对象，然后调用 Axes3D 的不同方法来绘制不同类型的 3D 图。以下介绍三种 Axes3D 对象创建的方法。</strong></font><h3 id="【01x01】Axes3D-对象创建方法一：Axes3D-fig"><a href="#【01x01】Axes3D-对象创建方法一：Axes3D-fig" class="headerlink" title="【01x01】Axes3D 对象创建方法一：Axes3D(fig)"></a><font color="##4876FF">【01x01】Axes3D 对象创建方法一：Axes3D(fig)</font></h3><p>在 Matplotlib 1.0.0 版本中，绘制 3D 图需要先导入 Axes3D 包，获取 figure 画布对象 fig 后，通过 Axes3D(fig) 方法来创建 Axes3D 对象，具体方法如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">from</span> mpl_toolkits.mplot3d <span class="keyword">import</span> Axes3D</span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取 figure 画布并创建 Axes3D 对象</span></span><br><span class="line">fig = plt.figure()</span><br><span class="line">ax = Axes3D(fig)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 数据坐标</span></span><br><span class="line">z = np.linspace(<span class="number">0</span>, <span class="number">15</span>, <span class="number">1000</span>)</span><br><span class="line">x = np.sin(z)</span><br><span class="line">y = np.cos(z)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 绘制线性图</span></span><br><span class="line">ax.plot(x, y, z)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><h3 id="【01x02】Axes3D-对象创建方法二：add-subplot"><a href="#【01x02】Axes3D-对象创建方法二：add-subplot" class="headerlink" title="【01x02】Axes3D 对象创建方法二：add_subplot"></a><font color="##4876FF">【01x02】Axes3D 对象创建方法二：add_subplot</font></h3><p>在 Matplotlib 3.2.0 版本中，绘制 3D 图可以通过创建子图，然后指定 projection 参数 为 3d 即可，返回的 ax 为 Axes3D 对象，以下两种方法均可：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取 figure 画布并通过子图创建 Axes3D 对象</span></span><br><span class="line">fig = plt.figure()</span><br><span class="line">ax = fig.add_subplot(<span class="number">111</span>, projection=<span class="string">'3d'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 数据坐标</span></span><br><span class="line">z = np.linspace(<span class="number">0</span>, <span class="number">15</span>, <span class="number">1000</span>)</span><br><span class="line">x = np.sin(z)</span><br><span class="line">y = np.cos(z)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 绘制线性图</span></span><br><span class="line">ax.plot(x, y, z)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"></span><br><span class="line"><span class="comment"># 通过子图创建 Axes3D 对象</span></span><br><span class="line">ax = plt.subplot(<span class="number">111</span>, projection=<span class="string">'3d'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 数据坐标</span></span><br><span class="line">z = np.linspace(<span class="number">0</span>, <span class="number">15</span>, <span class="number">1000</span>)</span><br><span class="line">x = np.sin(z)</span><br><span class="line">y = np.cos(z)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 绘制线性图</span></span><br><span class="line">ax.plot(x, y, z)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><h3 id="【01x03】Axes3D-对象创建方法三：gca"><a href="#【01x03】Axes3D-对象创建方法三：gca" class="headerlink" title="【01x03】Axes3D 对象创建方法三：gca"></a><font color="##4876FF">【01x03】Axes3D 对象创建方法三：gca</font></h3><p>除了以上两种方法以外，还可以先获取画布对象 fig，再通过 <code>fig.gca()</code> 方法获取当前绘图区（gca = Get Current Axes），然后指定 projection 参数 为 3d 即可，返回的 ax 为 Axes3D 对象。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"></span><br><span class="line"><span class="comment"># 依次获取画布和绘图区并创建 Axes3D 对象</span></span><br><span class="line">fig = plt.figure()</span><br><span class="line">ax = fig.gca(projection=<span class="string">'3d'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 数据坐标</span></span><br><span class="line">z = np.linspace(<span class="number">0</span>, <span class="number">15</span>, <span class="number">1000</span>)</span><br><span class="line">x = np.sin(z)</span><br><span class="line">y = np.cos(z)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 绘制线性图</span></span><br><span class="line">ax.plot(x, y, z)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p>以上三种方法运行结果均为下图：</p><p><img src="https://cdn.jsdelivr.net/gh/TRHX/ImageHosting/ITRHX-PIC/A77/01.png" alt="01"></p><h2 id="【02x00】cmap-与-colorbar"><a href="#【02x00】cmap-与-colorbar" class="headerlink" title="【02x00】cmap 与 colorbar"></a><font color="#FF0000">【02x00】cmap 与 colorbar</font></h2><p>默认情况下，散点图、线性图、曲面图等将以纯色着色，但可以通过提供 cmap 参数支持颜色映射。cmap 参数用于设置一些特殊的颜色组合，如渐变色等，参数取值通常为 Colormap 中的值，具体取值可参见下图：</p><p>官方文档：<a href="https://matplotlib.org/tutorials/colors/colormaps.html" target="_blank" rel="noopener">https://matplotlib.org/tutorials/colors/colormaps.html</a></p><p><img src="https://cdn.jsdelivr.net/gh/TRHX/ImageHosting/ITRHX-PIC/A77/02.png" alt="02"></p><p>如果使用了 cmap 参数，则可以使用 <code>pyplot.colorbar()</code> 函数来绘制一个色条，即颜色对照条。</p><p>基本语法：<code>matplotlib.pyplot.colorbar([mappable=None, cax=None, ax=None, **kw])</code></p><p>部分参数解释如下表，其他参数，如长度，宽度等请参考<a href="https://matplotlib.org/api/_as_gen/matplotlib.pyplot.colorbar.html" target="_blank" rel="noopener">官方文档</a>。</p><table><thead><tr><th>参数</th><th>描述</th></tr></thead><tbody><tr><td>mappable</td><td>要设置色条的图像对象，该参数对于 <code>Figure.colorbar</code> 方法是必需的，但对于 <code>pyplot.colorbar</code> 函数是可选的</td></tr><tr><td>cax</td><td>可选项，要绘制色条的轴</td></tr><tr><td>ax</td><td>可选项，设置色条的显示位置，通常在一个画布上有多个子图时使用</td></tr><tr><td>**kw</td><td>可选项，其他关键字参数，参考<a href="https://matplotlib.org/api/_as_gen/matplotlib.pyplot.colorbar.html" target="_blank" rel="noopener">官方文档</a></td></tr></tbody></table><h2 id="【03x00】3D-线性图：Axes3D-plot"><a href="#【03x00】3D-线性图：Axes3D-plot" class="headerlink" title="【03x00】3D 线性图：Axes3D.plot"></a><font color="#FF0000">【03x00】3D 线性图：Axes3D.plot</font></h2><p>基本方法：<code>Axes3D.plot(xs, ys[, zs, zdir=&#39;z&#39;, *args, **kwargs])</code></p><table><thead><tr><th>参数</th><th>描述</th></tr></thead><tbody><tr><td>xs</td><td>一维数组，点的 x 轴坐标</td></tr><tr><td>ys</td><td>一维数组，点的 y 轴坐标</td></tr><tr><td>zs</td><td>一维数组，可选项，点的 z 轴坐标</td></tr><tr><td>zdir</td><td>可选项，在 3D 轴上绘制 2D 数据时，数据必须以 xs，ys 的形式传递，<br>若此时将 zdir 设置为 ‘y’，数据将会被绘制到 x-z 轴平面上，默认为 ‘z’</td></tr><tr><td>**kwargs</td><td>其他关键字参数，可选项，可参见 <a href="https://matplotlib.org/api/_as_gen/matplotlib.axes.Axes.plot.html" target="_blank" rel="noopener">matplotlib.axes.Axes.plot</a></td></tr></tbody></table><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置中文显示</span></span><br><span class="line">plt.rcParams[<span class="string">'font.sans-serif'</span>] = [<span class="string">'Microsoft YaHei'</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 依次获取画布和绘图区并创建 Axes3D 对象</span></span><br><span class="line">fig = plt.figure()</span><br><span class="line">ax = fig.gca(projection=<span class="string">'3d'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 第一条3D线性图数据</span></span><br><span class="line">theta = np.linspace(<span class="number">-4</span> * np.pi, <span class="number">4</span> * np.pi, <span class="number">100</span>)</span><br><span class="line">z1 = np.linspace(<span class="number">-2</span>, <span class="number">2</span>, <span class="number">100</span>)</span><br><span class="line">r = z1**<span class="number">2</span> + <span class="number">1</span></span><br><span class="line">x1 = r * np.sin(theta)</span><br><span class="line">y1 = r * np.cos(theta)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 第二条3D线性图数据</span></span><br><span class="line">z2 = np.linspace(<span class="number">-3</span>, <span class="number">3</span>, <span class="number">100</span>)</span><br><span class="line">x2 = np.sin(z2)</span><br><span class="line">y2 = np.cos(z2)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 绘制3D线性图</span></span><br><span class="line">ax.plot(x1, y1, z1, color=<span class="string">'b'</span>, label=<span class="string">'3D 线性图一'</span>)</span><br><span class="line">ax.plot(x2, y2, z2, color=<span class="string">'r'</span>, label=<span class="string">'3D 线性图二'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置标题、轴标签、图例，也可以直接使用 plt.title、plt.xlabel、plt.legend...</span></span><br><span class="line">ax.set_title(<span class="string">'绘制 3D 线性图示例'</span>, pad=<span class="number">15</span>, fontsize=<span class="string">'12'</span>)</span><br><span class="line">ax.set_xlabel(<span class="string">'x 轴'</span>, color=<span class="string">'r'</span>, fontsize=<span class="string">'12'</span>)</span><br><span class="line">ax.set_ylabel(<span class="string">'y 轴'</span>, color=<span class="string">'g'</span>, fontsize=<span class="string">'12'</span>)</span><br><span class="line">ax.set_zlabel(<span class="string">'z 轴'</span>, color=<span class="string">'b'</span>, fontsize=<span class="string">'12'</span>)</span><br><span class="line">ax.legend()</span><br><span class="line"></span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/TRHX/ImageHosting/ITRHX-PIC/A77/03.png" alt="03"></p><h2 id="【04x00】3D-散点图：Axes3D-scatter"><a href="#【04x00】3D-散点图：Axes3D-scatter" class="headerlink" title="【04x00】3D 散点图：Axes3D.scatter"></a><font color="#FF0000">【04x00】3D 散点图：Axes3D.scatter</font></h2><p>基本方法：<code>Axes3D.scatter(xs, ys[, zs=0, zdir=&#39;z&#39;, s=20, c=None, depthshade=True, *args, **kwargs])</code></p><table><thead><tr><th>参数</th><th>描述</th></tr></thead><tbody><tr><td>xs</td><td>一维数组，点的 x 轴坐标</td></tr><tr><td>ys</td><td>一维数组，点的 y 轴坐标</td></tr><tr><td>zs</td><td>一维数组，可选项，点的 z 轴坐标</td></tr><tr><td>zdir</td><td>可选项，在 3D 轴上绘制 2D 数据时，数据必须以 xs，ys 的形式传递，<br>若此时将 zdir 设置为 ‘y’，数据将会被绘制到 x-z 轴平面上，默认为 ‘z’</td></tr><tr><td>s</td><td>标量或数组类型，可选项，标记的大小，默认 20</td></tr><tr><td>c</td><td>标记的颜色，可选项，可以是单个颜色或者一个颜色列表<br>支持英文颜色名称及其简写、十六进制颜色码等，更多颜色示例参见官网 <a href="https://matplotlib.org/gallery/color/color_demo.html" target="_blank" rel="noopener">Color Demo</a></td></tr><tr><td>depthshade</td><td>bool 值，可选项，默认 True，是否为散点标记着色以提供深度外观</td></tr><tr><td>**kwargs</td><td>其他关键字参数，可选项，可参见 <a href="https://matplotlib.org/api/_as_gen/matplotlib.axes.Axes.scatter.html" target="_blank" rel="noopener">scatter</a></td></tr></tbody></table><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"></span><br><span class="line">plt.rcParams[<span class="string">'font.sans-serif'</span>] = [<span class="string">'Microsoft YaHei'</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 依次获取画布和绘图区并创建 Axes3D 对象</span></span><br><span class="line">fig = plt.figure()</span><br><span class="line">ax = fig.gca(projection=<span class="string">'3d'</span>)</span><br><span class="line">n = <span class="number">100</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">randrange</span><span class="params">(n, vmin, vmax)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> (vmax - vmin)*np.random.rand(n) + vmin</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">定义绘制 n 个随机点，设置每一组数据点的样式和范围</span></span><br><span class="line"><span class="string">x轴数据位于[23，32]区间，y轴数据位于[0，100]区间，z轴数据位于[zlow，zhigh]区间</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="keyword">for</span> m, zlow, zhigh <span class="keyword">in</span> [(<span class="string">'o'</span>, <span class="number">-50</span>, <span class="number">-25</span>), (<span class="string">'^'</span>, <span class="number">-30</span>, <span class="number">-5</span>)]:</span><br><span class="line">    xs = randrange(n, <span class="number">23</span>, <span class="number">32</span>)</span><br><span class="line">    ys = randrange(n, <span class="number">0</span>, <span class="number">100</span>)</span><br><span class="line">    zs = randrange(n, zlow, zhigh)</span><br><span class="line">    ax.scatter(xs, ys, zs, marker=m)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置标题、轴标签、图例，也可以直接使用 plt.title、plt.xlabel...</span></span><br><span class="line">ax.set_title(<span class="string">'绘制 3D 散点图示例'</span>, pad=<span class="number">15</span>, fontsize=<span class="string">'12'</span>)</span><br><span class="line">ax.set_xlabel(<span class="string">'x 轴'</span>, color=<span class="string">'b'</span>)</span><br><span class="line">ax.set_ylabel(<span class="string">'y 轴'</span>, color=<span class="string">'b'</span>)</span><br><span class="line">ax.set_zlabel(<span class="string">'z 轴'</span>, color=<span class="string">'b'</span>)</span><br><span class="line"></span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/TRHX/ImageHosting/ITRHX-PIC/A77/04.png" alt="04"></p><h2 id="【05x00】3D-线框图：Axes3D-plot-wireframe"><a href="#【05x00】3D-线框图：Axes3D-plot-wireframe" class="headerlink" title="【05x00】3D 线框图：Axes3D.plot_wireframe"></a><font color="#FF0000">【05x00】3D 线框图：Axes3D.plot_wireframe</font></h2><p>基本方法：<code>Axes3D.plot_wireframe(X, Y, Z[, *args, **kwargs])</code></p><table><thead><tr><th>参数</th><th>描述</th></tr></thead><tbody><tr><td>X</td><td>二维数组，x 轴数据</td></tr><tr><td>Y</td><td>二维数组，y 轴数据</td></tr><tr><td>Z</td><td>二维数组，z 轴数据</td></tr><tr><td>**kwargs</td><td>其他关键字参数，可选项，如线条样式颜色等，可参见 <a href="https://matplotlib.org/api/_as_gen/mpl_toolkits.mplot3d.art3d.Line3DCollection.html" target="_blank" rel="noopener">Line3DCollection</a></td></tr></tbody></table><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"></span><br><span class="line">plt.rcParams[<span class="string">'font.sans-serif'</span>] = [<span class="string">'Microsoft YaHei'</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取 figure 画布并通过子图创建 Axes3D 对象</span></span><br><span class="line">fig = plt.figure()</span><br><span class="line">ax = fig.add_subplot(<span class="number">111</span>, projection=<span class="string">'3d'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义Z轴坐标的生成方法</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f</span><span class="params">(m, n)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> np.sin(np.sqrt(m ** <span class="number">2</span> + n ** <span class="number">2</span>))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置3D线框图数据</span></span><br><span class="line">x = np.linspace(<span class="number">-6</span>, <span class="number">6</span>, <span class="number">30</span>)</span><br><span class="line">y = np.linspace(<span class="number">-6</span>, <span class="number">6</span>, <span class="number">30</span>)</span><br><span class="line"><span class="comment"># 生成网格点坐标矩阵，该方法在系列文章八中有具体介绍</span></span><br><span class="line">X, Y = np.meshgrid(x, y)</span><br><span class="line">Z = f(X, Y)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 绘制3D线框图</span></span><br><span class="line">ax.plot_wireframe(X, Y, Z, color=<span class="string">'c'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置标题、轴标签、图例，也可以直接使用 plt.title、plt.xlabel...</span></span><br><span class="line">ax.set_title(<span class="string">'绘制 3D 线框图示例'</span>, pad=<span class="number">15</span>, fontsize=<span class="string">'12'</span>)</span><br><span class="line">ax.set_xlabel(<span class="string">'x 轴'</span>)</span><br><span class="line">ax.set_ylabel(<span class="string">'y 轴'</span>)</span><br><span class="line">ax.set_zlabel(<span class="string">'z 轴'</span>)</span><br><span class="line"></span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/TRHX/ImageHosting/ITRHX-PIC/A77/05.png" alt="05"></p><h2 id="【06x00】3D-曲面图：Axes3D-plot-surface"><a href="#【06x00】3D-曲面图：Axes3D-plot-surface" class="headerlink" title="【06x00】3D 曲面图：Axes3D.plot_surface"></a><font color="#FF0000">【06x00】3D 曲面图：Axes3D.plot_surface</font></h2><p>基本方法：<code>Axes3D.plot_surface(X, Y, Z[, *args, vmin=None, vmax=None, **kwargs])</code></p><table><thead><tr><th>参数</th><th>描述</th></tr></thead><tbody><tr><td>X</td><td>二维数组，x 轴数据</td></tr><tr><td>Y</td><td>二维数组，y 轴数据</td></tr><tr><td>Z</td><td>二维数组，z 轴数据</td></tr><tr><td>vmin / vmax</td><td>规定数据界限</td></tr><tr><td>**kwargs</td><td>其他关键字参数，可选项，如线条样式颜色等，可参见 <a href="https://matplotlib.org/api/_as_gen/mpl_toolkits.mplot3d.art3d.Line3DCollection.html" target="_blank" rel="noopener">Line3DCollection</a></td></tr></tbody></table><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"></span><br><span class="line">plt.rcParams[<span class="string">'font.sans-serif'</span>] = [<span class="string">'Microsoft YaHei'</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取 figure 画布并通过子图创建 Axes3D 对象</span></span><br><span class="line">fig = plt.figure()</span><br><span class="line">ax = fig.add_subplot(<span class="number">111</span>, projection=<span class="string">'3d'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置3D曲面图数据</span></span><br><span class="line">X = np.arange(<span class="number">-5</span>, <span class="number">5</span>, <span class="number">0.25</span>)</span><br><span class="line">Y = np.arange(<span class="number">-5</span>, <span class="number">5</span>, <span class="number">0.25</span>)</span><br><span class="line"><span class="comment"># 生成网格点坐标矩阵，该方法在系列文章八中有具体介绍</span></span><br><span class="line">X, Y = np.meshgrid(X, Y)</span><br><span class="line">R = np.sqrt(X**<span class="number">2</span> + Y**<span class="number">2</span>)</span><br><span class="line">Z = np.sin(R)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 绘制3D曲面图并添加色条（长度0.8）</span></span><br><span class="line">surface = ax.plot_surface(X, Y, Z, cmap=<span class="string">'rainbow'</span>, antialiased=<span class="keyword">False</span>)</span><br><span class="line">fig.colorbar(surface, shrink=<span class="number">0.8</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置标题、轴标签、图例，也可以直接使用 plt.title、plt.xlabel...</span></span><br><span class="line">ax.set_title(<span class="string">'绘制 3D 曲面图示例'</span>, pad=<span class="number">15</span>, fontsize=<span class="string">'12'</span>)</span><br><span class="line">ax.set_xlabel(<span class="string">'x 轴'</span>)</span><br><span class="line">ax.set_ylabel(<span class="string">'y 轴'</span>)</span><br><span class="line">ax.set_zlabel(<span class="string">'z 轴'</span>)</span><br><span class="line"><span class="comment"># 调整观察角度和方位角，俯仰角25度，方位角40度</span></span><br><span class="line">ax.view_init(<span class="number">25</span>, <span class="number">40</span>)</span><br><span class="line"><span class="comment"># 设置Z轴刻度界限</span></span><br><span class="line">ax.set_zlim(<span class="number">-2</span>, <span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/TRHX/ImageHosting/ITRHX-PIC/A77/06.png" alt="06"></p><hr><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">这里是一段防爬虫文本，请读者忽略。</span></span><br><span class="line"><span class="string">本文原创首发于</span> <span class="string">CSDN，作者</span> <span class="string">TRHX。</span></span><br><span class="line"><span class="string">博客首页：https://itrhx.blog.csdn.net/</span></span><br><span class="line"><span class="string">本文链接：https://itrhx.blog.csdn.net/article/details/106558131</span></span><br><span class="line"><span class="string">未经授权，禁止转载！恶意转载，后果自负！尊重原创，远离剽窃！</span></span><br></pre></td></tr></table></figure><hr><h2 id="【07x00】3D-柱状图：Axes3D-bar"><a href="#【07x00】3D-柱状图：Axes3D-bar" class="headerlink" title="【07x00】3D 柱状图：Axes3D.bar"></a><font color="#FF0000">【07x00】3D 柱状图：Axes3D.bar</font></h2><p>基本方法：<code>Axes3D.bar(left, height, zs=0, zdir=&#39;z&#39;, *args, **kwargs)</code></p><table><thead><tr><th>参数</th><th>描述</th></tr></thead><tbody><tr><td>left</td><td>一维数组，柱状图最左侧位置的 x 坐标</td></tr><tr><td>height</td><td>一维数组，柱状图的高度（y 坐标）</td></tr><tr><td>zs</td><td>第 i 个多边形将出现在平面 y=zs[i] 上</td></tr><tr><td>zdir</td><td>可选项，在 3D 轴上绘制 2D 数据时，数据必须以 xs，ys 的形式传递，<br>若此时将 zdir 设置为 ‘y’，数据将会被绘制到 x-z 轴平面上，默认为 ‘z’</td></tr><tr><td>**kwargs</td><td>其他关键字参数，参见 <a href="https://matplotlib.org/api/_as_gen/matplotlib.axes.Axes.bar.html" target="_blank" rel="noopener">matplotlib.axes.Axes.bar</a></td></tr></tbody></table><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">plt.rcParams[<span class="string">'font.sans-serif'</span>] = [<span class="string">'Microsoft YaHei'</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取 figure 画布并通过子图创建 Axes3D 对象</span></span><br><span class="line">fig = plt.figure()</span><br><span class="line">ax = fig.add_subplot(<span class="number">111</span>, projection=<span class="string">'3d'</span>)</span><br><span class="line"></span><br><span class="line">colors = [<span class="string">'r'</span>, <span class="string">'g'</span>, <span class="string">'b'</span>, <span class="string">'y'</span>]</span><br><span class="line">yticks = [<span class="number">3</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">0</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置3D柱状图数据并绘制图像</span></span><br><span class="line"><span class="keyword">for</span> c, k <span class="keyword">in</span> zip(colors, yticks):</span><br><span class="line">    xs = np.arange(<span class="number">20</span>)</span><br><span class="line">    ys = np.random.rand(<span class="number">20</span>)</span><br><span class="line">    cs = [c] * len(xs)</span><br><span class="line">    ax.bar(xs, ys, zs=k, zdir=<span class="string">'y'</span>, color=cs, alpha=<span class="number">0.8</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置图像标题、坐标标签以及范围</span></span><br><span class="line">ax.set_title(<span class="string">'绘制 3D 柱状图示例'</span>, pad=<span class="number">15</span>, fontsize=<span class="string">'12'</span>)</span><br><span class="line">ax.set_xlabel(<span class="string">'X 轴'</span>)</span><br><span class="line">ax.set_ylabel(<span class="string">'Y 轴'</span>)</span><br><span class="line">ax.set_zlabel(<span class="string">'Z 轴'</span>)</span><br><span class="line">ax.set_yticks(yticks)</span><br><span class="line"></span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/TRHX/ImageHosting/ITRHX-PIC/A77/07.png" alt="07"></p><h2 id="【08x00】3D-箭头图：Axes3D-quiver"><a href="#【08x00】3D-箭头图：Axes3D-quiver" class="headerlink" title="【08x00】3D 箭头图：Axes3D.quiver"></a><font color="#FF0000">【08x00】3D 箭头图：Axes3D.quiver</font></h2><p>基本方法：<code>Axes3D.quiver(X, Y, Z, U, V, W, length=1, arrow_length_ratio=0.3, pivot=&#39;tail&#39;, normalize=False, **kwargs)</code></p><table><thead><tr><th>参数</th><th>描述</th></tr></thead><tbody><tr><td>X, Y, Z</td><td>数组形式，箭头位置的 x、y 和 z 轴坐标（默认为箭头尾部）</td></tr><tr><td>U, V, W</td><td>数组形式，箭头向量的 x、y 和 z 轴分量</td></tr><tr><td>length</td><td>float 类型，每个箭筒的长度，默认为 1.0</td></tr><tr><td>arrow_length_ratio</td><td>float 类型，箭头相对于箭身的比率，默认为 0.3</td></tr><tr><td>pivot</td><td>箭头在网格点上的位置；箭头围绕该点旋转，因此命名为 pivot，默认为 ‘tail’<br>可选项：<code>&#39;tail&#39;</code>：尾部；<code>&#39;middle&#39;</code>：中间；<code>&#39;tip&#39;</code>：尖端</td></tr><tr><td>normalize</td><td>bool 类型，如果为 True，则所有箭头的长度都将相同<br>默认为 False，即箭头的长度取决于 U、V、W 的值</td></tr><tr><td>**kwargs</td><td>其他关键字参数，参见 <a href="https://matplotlib.org/api/collections_api.html#matplotlib.collections.LineCollection" target="_blank" rel="noopener">LineCollection</a></td></tr></tbody></table><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">plt.rcParams[<span class="string">'font.sans-serif'</span>] = [<span class="string">'Microsoft YaHei'</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 依次获取画布和绘图区并创建 Axes3D 对象</span></span><br><span class="line">fig = plt.figure()</span><br><span class="line">ax = fig.gca(projection=<span class="string">'3d'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置箭头位置</span></span><br><span class="line">x, y, z = np.meshgrid(np.arange(<span class="number">-0.8</span>, <span class="number">1</span>, <span class="number">0.2</span>),</span><br><span class="line">                      np.arange(<span class="number">-0.8</span>, <span class="number">1</span>, <span class="number">0.2</span>),</span><br><span class="line">                      np.arange(<span class="number">-0.8</span>, <span class="number">1</span>, <span class="number">0.8</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置箭头数据</span></span><br><span class="line">u = np.sin(np.pi * x) * np.cos(np.pi * y) * np.cos(np.pi * z)</span><br><span class="line">v = -np.cos(np.pi * x) * np.sin(np.pi * y) * np.cos(np.pi * z)</span><br><span class="line">w = (np.sqrt(<span class="number">2.0</span> / <span class="number">3.0</span>) * np.cos(np.pi * x) * np.cos(np.pi * y) * np.sin(np.pi * z))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 绘制 3D 箭头图</span></span><br><span class="line">ax.quiver(x, y, z, u, v, w, length=<span class="number">0.1</span>, normalize=<span class="keyword">True</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置图像标题、坐标标签</span></span><br><span class="line">ax.set_title(<span class="string">'绘制 3D 箭头图示例'</span>, pad=<span class="number">15</span>, fontsize=<span class="string">'12'</span>)</span><br><span class="line">ax.set_xlabel(<span class="string">'X 轴'</span>)</span><br><span class="line">ax.set_ylabel(<span class="string">'Y 轴'</span>)</span><br><span class="line">ax.set_zlabel(<span class="string">'Z 轴'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 调整观察角度，俯仰角20度</span></span><br><span class="line">ax.view_init(<span class="number">20</span>)</span><br><span class="line"></span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/TRHX/ImageHosting/ITRHX-PIC/A77/08.png" alt="08"></p><h2 id="【09x00】3D-等高线图：Axes3D-contour"><a href="#【09x00】3D-等高线图：Axes3D-contour" class="headerlink" title="【09x00】3D 等高线图：Axes3D.contour"></a><font color="#FF0000">【09x00】3D 等高线图：Axes3D.contour</font></h2><p>基本方法：<code>Axes3D.contour(X, Y, Z[, *args, extend3d=False, stride=5, zdir=&#39;z&#39;, offset=None, **kwargs])</code></p><table><thead><tr><th>参数</th><th>描述</th></tr></thead><tbody><tr><td>X</td><td>一维数组，x 轴数据</td></tr><tr><td>Y</td><td>一维数组，y 轴数据</td></tr><tr><td>Z</td><td>一维数组，z 轴数据</td></tr><tr><td>extend3d</td><td>bool 值，可选项，是否以 3D 延伸轮廓，默认 False</td></tr><tr><td>stride</td><td>int 类型，可选项，用于延伸轮廓的步长</td></tr><tr><td>zdir</td><td>可选项，在 3D 轴上绘制 2D 数据时，数据必须以 xs，ys 的形式传递，<br>若此时将 zdir 设置为 ‘y’，数据将会被绘制到 x-z 轴平面上，默认为 ‘z’</td></tr><tr><td>offset</td><td>标量，可选项，如果指定，则在垂直于 zdir 的平面上的位置绘制轮廓线的投影</td></tr><tr><td>**kwargs</td><td>其他关键字参数，可选项，可参见 <a href="https://matplotlib.org/api/_as_gen/matplotlib.axes.Axes.contour.html" target="_blank" rel="noopener">matplotlib.axes.Axes.contour</a></td></tr></tbody></table><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"></span><br><span class="line">plt.rcParams[<span class="string">'font.sans-serif'</span>] = [<span class="string">'Microsoft YaHei'</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取 figure 画布并通过子图创建 Axes3D 对象</span></span><br><span class="line">fig = plt.figure(figsize=(<span class="number">8</span>, <span class="number">4.8</span>))</span><br><span class="line">ax = fig.add_subplot(<span class="number">111</span>, projection=<span class="string">'3d'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置等高线数据</span></span><br><span class="line">X = np.arange(<span class="number">-2.0</span>, <span class="number">2.0</span>, <span class="number">0.01</span>)</span><br><span class="line">Y = np.arange(<span class="number">-2.0</span>, <span class="number">2.0</span>, <span class="number">0.01</span>)</span><br><span class="line"><span class="comment"># 生成网格点坐标矩阵</span></span><br><span class="line">m, n = np.meshgrid(X, Y)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 指定一个函数用于计算每个点的高度，也可以直接使用二维数组储存每个点的高度</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f</span><span class="params">(a, b)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> (<span class="number">1</span> - b ** <span class="number">5</span> + a ** <span class="number">5</span>) * np.exp(-a ** <span class="number">2</span> - b ** <span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 绘制3D等高线图并添加色条图（长度0.8）</span></span><br><span class="line">contour = ax.contour(X, Y, f(m, n), cmap=<span class="string">'rainbow'</span>)</span><br><span class="line">fig.colorbar(contour, shrink=<span class="number">0.8</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置标题、轴标签、图例，也可以直接使用 plt.title、plt.xlabel...</span></span><br><span class="line">ax.set_title(<span class="string">'绘制 3D 等高线图示例'</span>, pad=<span class="number">15</span>, fontsize=<span class="string">'12'</span>)</span><br><span class="line">ax.set_xlabel(<span class="string">'x 轴'</span>)</span><br><span class="line">ax.set_ylabel(<span class="string">'y 轴'</span>)</span><br><span class="line">ax.set_zlabel(<span class="string">'z 轴'</span>)</span><br><span class="line"></span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/TRHX/ImageHosting/ITRHX-PIC/A77/09.png" alt="09"></p><h2 id="【10x00】3D-等高线填充图：Axes3D-contourf"><a href="#【10x00】3D-等高线填充图：Axes3D-contourf" class="headerlink" title="【10x00】3D 等高线填充图：Axes3D.contourf"></a><font color="#FF0000">【10x00】3D 等高线填充图：Axes3D.contourf</font></h2><p>基本语法：<code>Axes3D.contourf(X, Y, Z[, *args, zdir=&#39;z&#39;, offset=None, **kwargs])</code></p><table><thead><tr><th>参数</th><th>描述</th></tr></thead><tbody><tr><td>X</td><td>一维数组，x 轴数据</td></tr><tr><td>Y</td><td>一维数组，y 轴数据</td></tr><tr><td>Z</td><td>一维数组，z 轴数据</td></tr><tr><td>zdir</td><td>可选项，在 3D 轴上绘制 2D 数据时，数据必须以 xs，ys 的形式传递，<br>若此时将 zdir 设置为 ‘y’，数据将会被绘制到 x-z 轴平面上，默认为 ‘z’</td></tr><tr><td>offset</td><td>标量，可选项，如果指定，则在垂直于 zdir 的平面上的位置绘制轮廓线的投影</td></tr><tr><td>**kwargs</td><td>其他关键字参数，可选项，可参见 <a href="https://matplotlib.org/api/_as_gen/matplotlib.axes.Axes.contourf.html" target="_blank" rel="noopener">matplotlib.axes.Axes.contourf</a></td></tr></tbody></table><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"></span><br><span class="line">plt.rcParams[<span class="string">'font.sans-serif'</span>] = [<span class="string">'Microsoft YaHei'</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取 figure 画布并通过子图创建 Axes3D 对象</span></span><br><span class="line">fig = plt.figure(figsize=(<span class="number">8</span>, <span class="number">4.8</span>))</span><br><span class="line">ax = fig.add_subplot(<span class="number">111</span>, projection=<span class="string">'3d'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置等高线数据</span></span><br><span class="line">X = np.arange(<span class="number">-2.0</span>, <span class="number">2.0</span>, <span class="number">0.01</span>)</span><br><span class="line">Y = np.arange(<span class="number">-2.0</span>, <span class="number">2.0</span>, <span class="number">0.01</span>)</span><br><span class="line"><span class="comment"># 生成网格点坐标矩阵</span></span><br><span class="line">m, n = np.meshgrid(X, Y)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 指定一个函数用于计算每个点的高度，也可以直接使用二维数组储存每个点的高度</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f</span><span class="params">(a, b)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> (<span class="number">1</span> - b ** <span class="number">5</span> + a ** <span class="number">5</span>) * np.exp(-a ** <span class="number">2</span> - b ** <span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 绘制3D等高线图并添加色条图（长度0.8）</span></span><br><span class="line">contourf = ax.contourf(X, Y, f(m, n), cmap=<span class="string">'rainbow'</span>)</span><br><span class="line">fig.colorbar(contourf, shrink=<span class="number">0.8</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置标题、轴标签、图例，也可以直接使用 plt.title、plt.xlabel...</span></span><br><span class="line">ax.set_title(<span class="string">'绘制 3D 等高线填充图示例'</span>, pad=<span class="number">15</span>, fontsize=<span class="string">'12'</span>)</span><br><span class="line">ax.set_xlabel(<span class="string">'x 轴'</span>)</span><br><span class="line">ax.set_ylabel(<span class="string">'y 轴'</span>)</span><br><span class="line">ax.set_zlabel(<span class="string">'z 轴'</span>)</span><br><span class="line"></span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/TRHX/ImageHosting/ITRHX-PIC/A77/10.png" alt="10"></p><h2 id="【11x00】3D-三角曲面图：Axes3D-plot-trisurf"><a href="#【11x00】3D-三角曲面图：Axes3D-plot-trisurf" class="headerlink" title="【11x00】3D 三角曲面图：Axes3D.plot_trisurf"></a><font color="#FF0000">【11x00】3D 三角曲面图：Axes3D.plot_trisurf</font></h2><p>基本方法：<code>Axes3D.plot_trisurf(X, Y, Z[, *args, color=None, vmin=None, vmax=None, **kwargs])</code></p><table><thead><tr><th>参数</th><th>描述</th></tr></thead><tbody><tr><td>X</td><td>一维数组，x 轴数据</td></tr><tr><td>Y</td><td>一维数组，y 轴数据</td></tr><tr><td>Z</td><td>一维数组，z 轴数据</td></tr><tr><td>color</td><td>曲面表面的颜色</td></tr><tr><td>vmin / vmax</td><td>规定数据界限</td></tr><tr><td>**kwargs</td><td>可选项，其他关键字参数，可参见 <a href="https://matplotlib.org/api/_as_gen/mpl_toolkits.mplot3d.art3d.Poly3DCollection.html" target="_blank" rel="noopener">Poly3DCollection</a></td></tr></tbody></table><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">plt.rcParams[<span class="string">'font.sans-serif'</span>] = [<span class="string">'Microsoft YaHei'</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取 figure 画布并通过子图创建 Axes3D 对象</span></span><br><span class="line">fig = plt.figure()</span><br><span class="line">ax = fig.add_subplot(<span class="number">111</span>, projection=<span class="string">'3d'</span>)</span><br><span class="line"></span><br><span class="line">n_radii = <span class="number">8</span></span><br><span class="line">n_angles = <span class="number">36</span></span><br><span class="line"></span><br><span class="line">radii = np.linspace(<span class="number">0.125</span>, <span class="number">1.0</span>, n_radii)</span><br><span class="line">angles = np.linspace(<span class="number">0</span>, <span class="number">2</span>*np.pi, n_angles, endpoint=<span class="keyword">False</span>)[..., np.newaxis]</span><br><span class="line">x = np.append(<span class="number">0</span>, (radii*np.cos(angles)).flatten())</span><br><span class="line">y = np.append(<span class="number">0</span>, (radii*np.sin(angles)).flatten())</span><br><span class="line">z = np.sin(-x*y)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 绘制3D三角曲面图并添加色条（长度0.8）</span></span><br><span class="line">trisurf = ax.plot_trisurf(x, y, z, cmap=<span class="string">'rainbow'</span>)</span><br><span class="line">fig.colorbar(trisurf, shrink=<span class="number">0.8</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置标题、轴标签、图例，也可以直接使用 plt.title、plt.xlabel...</span></span><br><span class="line">ax.set_title(<span class="string">'绘制 3D 三角曲面图示例'</span>, pad=<span class="number">15</span>, fontsize=<span class="string">'12'</span>)</span><br><span class="line">ax.set_xlabel(<span class="string">'x 轴'</span>)</span><br><span class="line">ax.set_ylabel(<span class="string">'y 轴'</span>)</span><br><span class="line">ax.set_zlabel(<span class="string">'z 轴'</span>)</span><br><span class="line"></span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/TRHX/ImageHosting/ITRHX-PIC/A77/11.png" alt="11"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">import</span> matplotlib.tri <span class="keyword">as</span> mtri</span><br><span class="line"></span><br><span class="line">plt.rcParams[<span class="string">'font.sans-serif'</span>] = [<span class="string">'Microsoft YaHei'</span>]</span><br><span class="line">fig = plt.figure(figsize=(<span class="number">15</span>, <span class="number">6</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># ============ 第一个示例图 ============ #</span></span><br><span class="line"></span><br><span class="line">ax = fig.add_subplot(<span class="number">1</span>, <span class="number">2</span>, <span class="number">1</span>, projection=<span class="string">'3d'</span>)</span><br><span class="line"></span><br><span class="line">u = np.linspace(<span class="number">0</span>, <span class="number">2.0</span> * np.pi, endpoint=<span class="keyword">True</span>, num=<span class="number">50</span>)</span><br><span class="line">v = np.linspace(<span class="number">-0.5</span>, <span class="number">0.5</span>, endpoint=<span class="keyword">True</span>, num=<span class="number">10</span>)</span><br><span class="line">u, v = np.meshgrid(u, v)</span><br><span class="line">u, v = u.flatten(), v.flatten()</span><br><span class="line"></span><br><span class="line">x = (<span class="number">1</span> + <span class="number">0.5</span> * v * np.cos(u / <span class="number">2.0</span>)) * np.cos(u)</span><br><span class="line">y = (<span class="number">1</span> + <span class="number">0.5</span> * v * np.cos(u / <span class="number">2.0</span>)) * np.sin(u)</span><br><span class="line">z = <span class="number">0.5</span> * v * np.sin(u / <span class="number">2.0</span>)</span><br><span class="line"></span><br><span class="line">tri = mtri.Triangulation(u, v)</span><br><span class="line"></span><br><span class="line">trisurf_1 = ax.plot_trisurf(x, y, z, triangles=tri.triangles, cmap=<span class="string">'cool'</span>)</span><br><span class="line">fig.colorbar(trisurf_1, shrink=<span class="number">0.8</span>)</span><br><span class="line">ax.set_zlim(<span class="number">-1</span>, <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">ax.set_title(<span class="string">'绘制 3D 三角曲面图示例一'</span>, pad=<span class="number">15</span>, fontsize=<span class="string">'12'</span>)</span><br><span class="line">ax.set_xlabel(<span class="string">'x 轴'</span>)</span><br><span class="line">ax.set_ylabel(<span class="string">'y 轴'</span>)</span><br><span class="line">ax.set_zlabel(<span class="string">'z 轴'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># ============ 第二个示例图 ============ #</span></span><br><span class="line"></span><br><span class="line">ax = fig.add_subplot(<span class="number">1</span>, <span class="number">2</span>, <span class="number">2</span>, projection=<span class="string">'3d'</span>)</span><br><span class="line"></span><br><span class="line">n_angles = <span class="number">36</span></span><br><span class="line">n_radii = <span class="number">8</span></span><br><span class="line">min_radius = <span class="number">0.25</span></span><br><span class="line">radii = np.linspace(min_radius, <span class="number">0.95</span>, n_radii)</span><br><span class="line"></span><br><span class="line">angles = np.linspace(<span class="number">0</span>, <span class="number">2</span>*np.pi, n_angles, endpoint=<span class="keyword">False</span>)</span><br><span class="line">angles = np.repeat(angles[..., np.newaxis], n_radii, axis=<span class="number">1</span>)</span><br><span class="line">angles[:, <span class="number">1</span>::<span class="number">2</span>] += np.pi/n_angles</span><br><span class="line"></span><br><span class="line">x = (radii*np.cos(angles)).flatten()</span><br><span class="line">y = (radii*np.sin(angles)).flatten()</span><br><span class="line">z = (np.cos(radii)*np.cos(<span class="number">3</span>*angles)).flatten()</span><br><span class="line"></span><br><span class="line">triang = mtri.Triangulation(x, y)</span><br><span class="line"></span><br><span class="line">xmid = x[triang.triangles].mean(axis=<span class="number">1</span>)</span><br><span class="line">ymid = y[triang.triangles].mean(axis=<span class="number">1</span>)</span><br><span class="line">mask = xmid**<span class="number">2</span> + ymid**<span class="number">2</span> &lt; min_radius**<span class="number">2</span></span><br><span class="line">triang.set_mask(mask)</span><br><span class="line"></span><br><span class="line">trisurf_2 = ax.plot_trisurf(triang, z, cmap=<span class="string">'hsv'</span>)</span><br><span class="line">fig.colorbar(trisurf_2, shrink=<span class="number">0.8</span>)</span><br><span class="line"></span><br><span class="line">ax.set_title(<span class="string">'绘制 3D 三角曲面图示例二'</span>, pad=<span class="number">15</span>, fontsize=<span class="string">'12'</span>)</span><br><span class="line">ax.set_xlabel(<span class="string">'x 轴'</span>)</span><br><span class="line">ax.set_ylabel(<span class="string">'y 轴'</span>)</span><br><span class="line">ax.set_zlabel(<span class="string">'z 轴'</span>)</span><br><span class="line"></span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/TRHX/ImageHosting/ITRHX-PIC/A77/12.png" alt="12"></p><h2 id="【12x00】将-2D-图像聚合到-3D-图像中：Axes3D-add-collection3d"><a href="#【12x00】将-2D-图像聚合到-3D-图像中：Axes3D-add-collection3d" class="headerlink" title="【12x00】将 2D 图像聚合到 3D 图像中：Axes3D.add_collection3d"></a><font color="#FF0000">【12x00】将 2D 图像聚合到 3D 图像中：Axes3D.add_collection3d</font></h2><p>基本方法：<code>Axes3D.add_collection3d(col, zs=0, zdir=&#39;z&#39;)</code></p><table><thead><tr><th>参数</th><th>描述</th></tr></thead><tbody><tr><td>col</td><td><a href="https://matplotlib.org/api/collections_api.html?highlight=polycollection#matplotlib.collections.PolyCollection" target="_blank" rel="noopener">PolyCollection</a> / <a href="https://matplotlib.org/api/collections_api.html?highlight=linecollection#matplotlib.collections.LineCollection" target="_blank" rel="noopener">LineCollection</a> / <a href="https://matplotlib.org/api/collections_api.html?highlight=patchcollection#matplotlib.collections.PatchCollection" target="_blank" rel="noopener">PatchCollection</a> 对象</td></tr><tr><td>zs</td><td>第 i 个多边形将出现在平面 y=zs[i] 上</td></tr><tr><td>zdir</td><td>可选项，在 3D 轴上绘制 2D 数据时，数据必须以 xs，ys 的形式传递，<br>若此时将 zdir 设置为 ‘y’，数据将会被绘制到 x-z 轴平面上，默认为 ‘z’</td></tr></tbody></table><p>该函数一般用来向图形中添加 3D 集合对象，以下用一个示例来展示某个地区在不同年份和不同月份的降水量：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">from</span> matplotlib.collections <span class="keyword">import</span> PolyCollection</span><br><span class="line"></span><br><span class="line">plt.rcParams[<span class="string">'font.sans-serif'</span>] = [<span class="string">'Microsoft YaHei'</span>]</span><br><span class="line"></span><br><span class="line">fig = plt.figure()</span><br><span class="line">ax = fig.gca(projection=<span class="string">'3d'</span>)</span><br><span class="line"></span><br><span class="line">np.random.seed(<span class="number">59</span>)</span><br><span class="line">month = np.arange(<span class="number">0</span>, <span class="number">13</span>)</span><br><span class="line">years = [<span class="number">2017</span>, <span class="number">2018</span>, <span class="number">2019</span>, <span class="number">2020</span>]</span><br><span class="line"></span><br><span class="line">precipitation = []</span><br><span class="line"><span class="keyword">for</span> year <span class="keyword">in</span> years:</span><br><span class="line">    value = np.random.rand(len(month)) * <span class="number">300</span></span><br><span class="line">    value[<span class="number">0</span>], value[<span class="number">-1</span>] = <span class="number">0</span>, <span class="number">0</span></span><br><span class="line">    precipitation.append(list(zip(month, value)))</span><br><span class="line"></span><br><span class="line">poly = PolyCollection(precipitation, facecolors=[<span class="string">'r'</span>, <span class="string">'g'</span>, <span class="string">'b'</span>, <span class="string">'y'</span>], alpha=<span class="number">.6</span>)</span><br><span class="line">ax.add_collection3d(poly, zs=years, zdir=<span class="string">'y'</span>)</span><br><span class="line"></span><br><span class="line">ax.set_title(<span class="string">'2D 图像聚合到 3D 图像示例'</span>, pad=<span class="number">15</span>, fontsize=<span class="string">'12'</span>)</span><br><span class="line">ax.set_xlabel(<span class="string">'月份'</span>)</span><br><span class="line">ax.set_ylabel(<span class="string">'年份'</span>)</span><br><span class="line">ax.set_zlabel(<span class="string">'降水量'</span>)</span><br><span class="line">ax.set_xlim3d(<span class="number">0</span>, <span class="number">12</span>)</span><br><span class="line">ax.set_ylim3d(<span class="number">2016</span>, <span class="number">2021</span>)</span><br><span class="line">ax.set_zlim3d(<span class="number">0</span>, <span class="number">300</span>)</span><br><span class="line"></span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/TRHX/ImageHosting/ITRHX-PIC/A77/13.png" alt="13"></p><p>此外，该方法也常被用于绘制 3D 多边形图，即多边体，示例如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">from</span> mpl_toolkits.mplot3d.art3d <span class="keyword">import</span> Poly3DCollection, Line3DCollection</span><br><span class="line"></span><br><span class="line">plt.rcParams[<span class="string">'font.sans-serif'</span>] = [<span class="string">'Microsoft YaHei'</span>]</span><br><span class="line"></span><br><span class="line">fig = plt.figure()</span><br><span class="line">ax = fig.gca(projection=<span class="string">'3d'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 六面体顶点和面</span></span><br><span class="line">verts = [(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>), (<span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>), (<span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>), (<span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>), (<span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>), (<span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>), (<span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>), (<span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>)]</span><br><span class="line">faces = [[<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>], [<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>], [<span class="number">0</span>, <span class="number">1</span>, <span class="number">5</span>, <span class="number">4</span>], [<span class="number">1</span>, <span class="number">2</span>, <span class="number">6</span>, <span class="number">5</span>], [<span class="number">2</span>, <span class="number">3</span>, <span class="number">7</span>, <span class="number">6</span>], [<span class="number">0</span>, <span class="number">3</span>, <span class="number">7</span>, <span class="number">4</span>]]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取每个面的顶点</span></span><br><span class="line">poly3d = [[verts[vert_id] <span class="keyword">for</span> vert_id <span class="keyword">in</span> face] <span class="keyword">for</span> face <span class="keyword">in</span> faces]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 绘制顶点</span></span><br><span class="line">x, y, z = zip(*verts)</span><br><span class="line">ax.scatter(x, y, z)</span><br><span class="line"><span class="comment"># 绘制多边形面</span></span><br><span class="line">ax.add_collection3d(Poly3DCollection(poly3d, facecolors=<span class="string">'w'</span>, linewidths=<span class="number">1</span>, alpha=<span class="number">0.5</span>))</span><br><span class="line"><span class="comment"># 绘制多边形的边</span></span><br><span class="line">ax.add_collection3d(Line3DCollection(poly3d, colors=<span class="string">'k'</span>, linewidths=<span class="number">0.5</span>, linestyles=<span class="string">':'</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置图像标题、坐标标签以及范围</span></span><br><span class="line">ax.set_title(<span class="string">'绘制多边体示例'</span>, pad=<span class="number">15</span>, fontsize=<span class="string">'12'</span>)</span><br><span class="line">ax.set_xlabel(<span class="string">'X 轴'</span>)</span><br><span class="line">ax.set_ylabel(<span class="string">'Y 轴'</span>)</span><br><span class="line">ax.set_zlabel(<span class="string">'Z 轴'</span>)</span><br><span class="line">ax.set_xlim3d(<span class="number">-0.5</span>, <span class="number">1.5</span>)</span><br><span class="line">ax.set_ylim3d(<span class="number">-0.5</span>, <span class="number">1.5</span>)</span><br><span class="line">ax.set_zlim3d(<span class="number">-0.5</span>, <span class="number">1.5</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/TRHX/ImageHosting/ITRHX-PIC/A77/14.png" alt="14"></p><h2 id="【13x00】3D-图添加文本描述：Axes3D-text"><a href="#【13x00】3D-图添加文本描述：Axes3D-text" class="headerlink" title="【13x00】3D 图添加文本描述：Axes3D.text"></a><font color="#FF0000">【13x00】3D 图添加文本描述：Axes3D.text</font></h2><p>基本方法：<code>Axes3D.text(x, y, z, s[, zdir=None, **kwargs])</code></p><table><thead><tr><th>参数</th><th>描述</th></tr></thead><tbody><tr><td>x, y, z</td><td>文本位置的 x、y、z 轴坐标</td></tr><tr><td>s</td><td>要添加的文本</td></tr><tr><td>zdir</td><td>可选项，若将 zdir 设置为 ‘y’，文本将会被投影到 x-z 轴平面上，默认为 None</td></tr><tr><td>**kwargs</td><td>其他关键字参数，参见 <a href="https://matplotlib.org/api/text_api.html" target="_blank" rel="noopener">matplotlib.text</a></td></tr></tbody></table><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"></span><br><span class="line">plt.rcParams[<span class="string">'font.sans-serif'</span>] = [<span class="string">'Microsoft YaHei'</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 依次获取画布和绘图区并创建 Axes3D 对象</span></span><br><span class="line">fig = plt.figure()</span><br><span class="line">ax = fig.gca(projection=<span class="string">'3d'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Demo 1: zdir 参数用法</span></span><br><span class="line">zdirs = (<span class="keyword">None</span>, <span class="string">'x'</span>, <span class="string">'y'</span>, <span class="string">'z'</span>, (<span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>), (<span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>))</span><br><span class="line">xs = (<span class="number">1</span>, <span class="number">4</span>, <span class="number">4</span>, <span class="number">9</span>, <span class="number">4</span>, <span class="number">1</span>)</span><br><span class="line">ys = (<span class="number">2</span>, <span class="number">5</span>, <span class="number">8</span>, <span class="number">10</span>, <span class="number">1</span>, <span class="number">2</span>)</span><br><span class="line">zs = (<span class="number">10</span>, <span class="number">3</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">1</span>, <span class="number">8</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> zdir, x, y, z <span class="keyword">in</span> zip(zdirs, xs, ys, zs):</span><br><span class="line">    label = <span class="string">'(%d, %d, %d), dir=%s'</span> % (x, y, z, zdir)</span><br><span class="line">    ax.text(x, y, z, label, zdir)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Demo 2：设置颜色</span></span><br><span class="line">ax.text(<span class="number">9</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="string">"red"</span>, color=<span class="string">'red'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Demo 3: text2D，位置(0，0)为左下角，(1，1)为右上角。</span></span><br><span class="line">ax.text2D(<span class="number">0.05</span>, <span class="number">0.95</span>, <span class="string">"2D Text"</span>, transform=ax.transAxes)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置坐标轴界限和标签</span></span><br><span class="line">ax.set_xlim(<span class="number">0</span>, <span class="number">10</span>)</span><br><span class="line">ax.set_ylim(<span class="number">0</span>, <span class="number">10</span>)</span><br><span class="line">ax.set_zlim(<span class="number">0</span>, <span class="number">10</span>)</span><br><span class="line">ax.set_xlabel(<span class="string">'X 轴'</span>)</span><br><span class="line">ax.set_ylabel(<span class="string">'Y 轴'</span>)</span><br><span class="line">ax.set_zlabel(<span class="string">'Z 轴'</span>)</span><br><span class="line"></span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/TRHX/ImageHosting/ITRHX-PIC/A77/15.png" alt="15"></p><hr><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">这里是一段防爬虫文本，请读者忽略。</span></span><br><span class="line"><span class="string">本文原创首发于</span> <span class="string">CSDN，作者</span> <span class="string">TRHX。</span></span><br><span class="line"><span class="string">博客首页：https://itrhx.blog.csdn.net/</span></span><br><span class="line"><span class="string">本文链接：https://itrhx.blog.csdn.net/article/details/106558131</span></span><br><span class="line"><span class="string">未经授权，禁止转载！恶意转载，后果自负！尊重原创，远离剽窃！</span></span><br></pre></td></tr></table></figure><hr>]]></content>
    
    <summary type="html">
    
      Python 数据分析三剑客之 Matplotlib（十）：3D 图的绘制。
    
    </summary>
    
      <category term="Python 数据分析" scheme="https://www.itrhx.com/categories/Python-%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/"/>
    
      <category term="Matplotlib" scheme="https://www.itrhx.com/categories/Python-%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/Matplotlib/"/>
    
    
      <category term="Matplotlib" scheme="https://www.itrhx.com/tags/Matplotlib/"/>
    
      <category term="3D图" scheme="https://www.itrhx.com/tags/3D%E5%9B%BE/"/>
    
  </entry>
  
  <entry>
    <title>Python 数据分析三剑客之 Matplotlib（九）：极区图/极坐标图/雷达图的绘制</title>
    <link href="https://www.itrhx.com/2020/06/03/A76-Matplotlib-09/"/>
    <id>https://www.itrhx.com/2020/06/03/A76-Matplotlib-09/</id>
    <published>2020-06-03T11:00:14.070Z</published>
    <updated>2020-07-06T13:32:36.844Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>Matplotlib 系列文章：</p><ul><li><a href="https://www.itrhx.com/2020/04/10/A68-Matplotlib-01/">Python 数据分析三剑客之 Matplotlib（一）：初识 Matplotlib 与其 matplotibrc 配置文件</a></li><li><a href="https://www.itrhx.com/2020/04/12/A69-Matplotlib-02/">Python 数据分析三剑客之 Matplotlib（二）：文本描述 / 中文支持 / 画布 / 网格等基本图像属性</a></li><li><a href="https://www.itrhx.com/2020/04/14/A70-Matplotlib-03/">Python 数据分析三剑客之 Matplotlib（三）：图例 / LaTeX / 刻度 / 子图 / 补丁等基本图像属性</a></li><li><a href="https://www.itrhx.com/2020/04/16/A71-Matplotlib-04/">Python 数据分析三剑客之 Matplotlib（四）：线性图的绘制</a></li><li><a href="https://www.itrhx.com/2020/04/18/A72-Matplotlib-05/">Python 数据分析三剑客之 Matplotlib（五）：散点图的绘制</a></li><li><a href="https://www.itrhx.com/2020/04/21/A73-Matplotlib-06/">Python 数据分析三剑客之 Matplotlib（六）：直方图 / 柱状图 / 条形图的绘制</a></li><li><a href="https://www.itrhx.com/2020/04/24/A74-Matplotlib-07/">Python 数据分析三剑客之 Matplotlib（七）：饼状图的绘制</a></li><li><a href="https://www.itrhx.com/2020/04/30/A75-Matplotlib-08/">Python 数据分析三剑客之 Matplotlib（八）：等高线 / 等值线图的绘制</a></li><li><a href="https://www.itrhx.com/2020/06/03/A76-Matplotlib-09/">Python 数据分析三剑客之 Matplotlib（九）：极区图 / 极坐标图 / 雷达图的绘制</a></li><li><a href="https://www.itrhx.com/2020/06/08/A77-Matplotlib-10/">Python 数据分析三剑客之 Matplotlib（十）：3D 图的绘制</a></li><li><a href="https://www.itrhx.com/2020/06/09/A78-Matplotlib-11/">Python 数据分析三剑客之 Matplotlib（十一）：最热门最常用的 50 个图表</a>【译文】</li></ul><p>专栏：</p><p>【<a href="https://www.itrhx.com/categories/Python-%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/NumPy/">NumPy 专栏</a>】【<a href="https://www.itrhx.com/categories/Python-%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/Pandas/">Pandas 专栏</a>】【<a href="https://www.itrhx.com/categories/Python-%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/Matplotlib/">Matplotlib 专栏</a>】</p><p>推荐学习资料与网站：</p><p>【<a href="https://www.numpy.org.cn/" target="_blank" rel="noopener">NumPy 中文网</a>】【<a href="https://www.pypandas.cn/" target="_blank" rel="noopener">Pandas 中文网</a>】【<a href="https://www.matplotlib.org.cn/" target="_blank" rel="noopener">Matplotlib 中文网</a>】【<a href="https://github.com/TRHX/Python-quick-reference-table" target="_blank" rel="noopener">NumPy、Matplotlib、Pandas 速查表</a>】</p><hr><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">这里是一段防爬虫文本，请读者忽略。</span></span><br><span class="line"><span class="string">本文原创首发于</span> <span class="string">CSDN，作者</span> <span class="string">TRHX。</span></span><br><span class="line"><span class="string">博客首页：https://itrhx.blog.csdn.net/</span></span><br><span class="line"><span class="string">本文链接：https://itrhx.blog.csdn.net/article/details/106162412</span></span><br><span class="line"><span class="string">未经授权，禁止转载！恶意转载，后果自负！尊重原创，远离剽窃！</span></span><br></pre></td></tr></table></figure><hr><h2 id="【1x00】了解极坐标"><a href="#【1x00】了解极坐标" class="headerlink" title="【1x00】了解极坐标"></a><font color="#FF0000">【1x00】了解极坐标</font></h2><p>参考百度百科：极坐标，属于二维坐标系统，创始人是牛顿，主要应用于数学领域。极坐标是指在平面内取一个定点 <font color="#FF0000">O</font>，叫极点，引一条射线 <font color="#FF0000">Ox</font>，叫做极轴，再选定一个长度单位和角度的正方向（通常取逆时针方向）。对于平面内任何一点 <font color="#FF0000">M</font>，用 <font color="#FF0000">ρ</font> 表示线段 <font color="#FF0000">OM</font> 的长度（有时也用 <font color="#FF0000">r</font> 表示），<font color="#FF0000">θ</font> 表示从 <font color="#FF0000">Ox</font> 到 <font color="#FF0000">OM</font> 的角度，<font color="#FF0000">ρ</font> 叫做点 <font color="#FF0000">M</font> 的极径，<font color="#FF0000">θ</font> 叫做点 <font color="#FF0000">M</font> 的极角，有序数对 <font color="#FF0000">(ρ,θ)</font> 就叫点 <font color="#FF0000">M</font> 的极坐标，这样建立的坐标系叫做极坐标系。通常情况下，<font color="#FF0000">M</font> 的极径坐标单位为 <font color="#FF0000">1</font>（长度单位），极角坐标单位为 <font color="#FF0000">rad</font>（或<font color="#FF0000">°</font>）。</p><p><img src="https://cdn.jsdelivr.net/gh/TRHX/ImageHosting/ITRHX-PIC/A76/01.png" alt="01"></p><h2 id="【2x00】基本方法-matplotlib-pyplot-polar"><a href="#【2x00】基本方法-matplotlib-pyplot-polar" class="headerlink" title="【2x00】基本方法 matplotlib.pyplot.polar()"></a><font color="#FF0000">【2x00】基本方法 matplotlib.pyplot.polar()</font></h2><p><code>matplotlib.pyplot.polar()</code> 方法可用于绘制极坐标图。</p><p>基本语法：<code>polar(theta, r, **kwargs)</code></p><ul><li><font color="#FF0000"><strong>theta</strong></font>：点的角坐标，以弧度单位传入参数；</li><li><font color="#FF0000"><strong>r</strong></font>：点的半径坐标；</li><li><font color="#FF0000"><strong>**kwargs</strong></font>：可选项，其他 Line2D 属性，常用属性见<font color="#FF0000"><strong>表一</strong></font>。</li></ul><p>拓展：数学上通常是用弧度而非角度，弧度单位缩写为 rad，2π rad = 360°，1° ≈ 0.0174533 rad，1 rad ≈ 57.29578°。</p><ul><li>角度转换为弧度公式：弧度 = 角度 ÷ 180 × π</li><li>弧度转换为角度公式：角度 = 弧度 × 180 ÷ π</li></ul><table><tr><td bgcolor="#7FFFD4" colspan="2"><strong><font color="FF0000" size="3px">表一：Line2D 部分属性，完整属性参见官方文档：<br><a href="https://matplotlib.org/api/_as_gen/matplotlib.lines.Line2D.html" target="_blank" rel="noopener">https://matplotlib.org/api/_as_gen/matplotlib.lines.Line2D.html</a></font></strong></td></tr></table><table><thead><tr><th>属性</th><th>描述</th></tr></thead><tbody><tr><td>alpha</td><td>线条透明度，float 类型，取值范围：<code>[0, 1]</code>，默认为 1.0，即不透明</td></tr><tr><td>antialiased / aa</td><td>是否使用抗锯齿渲染，默认为 True</td></tr><tr><td>color / c</td><td>线条颜色，支持英文颜色名称及其简写、十六进制颜色码等，更多颜色示例参见官网 <a href="https://matplotlib.org/gallery/color/color_demo.html" target="_blank" rel="noopener">Color Demo</a></td></tr><tr><td>fillstyle</td><td>点的填充样式，<code>&#39;full&#39;</code>、<code>&#39;left&#39;</code>、<code>&#39;right&#39;</code>、<code>&#39;bottom&#39;</code>、<code>&#39;top&#39;</code>、<code>&#39;none&#39;</code></td></tr><tr><td>label</td><td>图例，具体参数参见：<br><a href="https://itrhx.blog.csdn.net/article/details/105828143" target="_blank" rel="noopener">《Python 数据分析三剑客之 Matplotlib（三）：图例 / LaTeX / 刻度 / 子图 / 补丁等基本图像属性》</a></td></tr><tr><td>linestyle / ls</td><td>连接的线条样式：<code>&#39;-&#39;</code> or <code>&#39;solid&#39;</code>, <code>&#39;--&#39;</code> or <code>&#39;dashed&#39;</code>, <code>&#39;-.&#39;</code> or <code>&#39;dashdot&#39;</code> <br> <code>&#39;:&#39;</code> or <code>&#39;dotted&#39;</code>, <code>&#39;none&#39;</code> or <code>&#39; &#39;</code> or <code>&#39;&#39;</code></td></tr><tr><td>linewidth / lw</td><td>连接的线条宽度，float 类型，默认 0.8</td></tr><tr><td>marker</td><td>标记样式，具体样式参见<font color="#FF0000"><strong>表二</strong></font></td></tr><tr><td>markeredgecolor / mec</td><td>marker 标记的边缘颜色</td></tr><tr><td>markeredgewidth / mew</td><td>marker 标记的边缘宽度</td></tr><tr><td>markerfacecolor / mfc</td><td>marker 标记的颜色</td></tr><tr><td>markerfacecoloralt / mfcalt</td><td>marker 标记的备用颜色</td></tr><tr><td>markersize / ms</td><td>marker 标记的大小</td></tr></tbody></table><table><tr><td bgcolor="#7FFFD4" colspan="2"><strong><font color="FF0000" size="3px">表二：marker 标记的样式，官方文档：<br><a href="https://matplotlib.org/api/markers_api.html" target="_blank" rel="noopener">https://matplotlib.org/api/markers_api.html</a></font></strong></td></tr></table><table><thead><tr><th>标记</th><th>描述</th></tr></thead><tbody><tr><td><code>&quot;.&quot;</code></td><td>点</td></tr><tr><td><code>&quot;,&quot;</code></td><td>像素点</td></tr><tr><td><code>&quot;o&quot;</code></td><td>圆圈</td></tr><tr><td><code>&quot;v&quot;</code></td><td>倒三角</td></tr><tr><td><code>&quot;^&quot;</code></td><td>正三角</td></tr><tr><td><code>&quot;&lt;&quot;</code></td><td>左三角</td></tr><tr><td><code>&quot;&gt;&quot;</code></td><td>右三角</td></tr><tr><td><code>&quot;1&quot;</code></td><td>倒三叉星</td></tr><tr><td><code>&quot;2&quot;</code></td><td>正三叉星（类似奔驰车标形状）</td></tr><tr><td><code>&quot;3&quot;</code></td><td>左三叉星</td></tr><tr><td><code>&quot;4&quot;</code></td><td>右三叉星</td></tr><tr><td><code>&quot;8&quot;</code></td><td>八边形</td></tr><tr><td><code>&quot;s&quot;</code></td><td>正方形</td></tr><tr><td><code>&quot;p&quot;</code></td><td>五边形</td></tr><tr><td><code>&quot;P&quot;</code></td><td>填充的加号（粗加号）</td></tr><tr><td><code>&quot;+&quot;</code></td><td>加号</td></tr><tr><td><code>&quot;*&quot;</code></td><td>星形</td></tr><tr><td><code>&quot;h&quot;</code></td><td>六边形（底部是角）</td></tr><tr><td><code>&quot;H&quot;</code></td><td>六边形（底部是边）</td></tr><tr><td><code>&quot;x&quot;</code></td><td>x 号</td></tr><tr><td><code>&quot;X&quot;</code></td><td>填充的 x 号（粗 x 号）</td></tr><tr><td><code>&quot;D&quot;</code></td><td>粗菱形（对角线相等）</td></tr><tr><td><code>&quot;d&quot;</code></td><td>细菱形（对角线不等）</td></tr><tr><td>`”</td><td>“`</td><td>垂直线</td></tr><tr><td><code>&quot;_&quot;</code></td><td>水平线</td></tr><tr><td><code>0</code></td><td>水平线靠左</td></tr><tr><td><code>1</code></td><td>水平线靠右</td></tr><tr><td><code>2</code></td><td>垂直线靠上</td></tr><tr><td><code>3</code></td><td>垂直线靠下</td></tr><tr><td><code>4</code></td><td>左三角（比 <code>&quot;&lt;&quot;</code> 更细）</td></tr><tr><td><code>5</code></td><td>右三角（比 <code>&quot;&gt;&quot;</code> 更细）</td></tr><tr><td><code>6</code></td><td>正三角（比 <code>&quot;^&quot;</code> 更细）</td></tr><tr><td><code>7</code></td><td>倒三角（比 <code>&quot;v&quot;</code> 更细）</td></tr><tr><td><code>8</code></td><td>左三角（比 <code>&quot;&lt;&quot;</code> 更细，靠左显示）</td></tr><tr><td><code>9</code></td><td>右三角（比 <code>&quot;&gt;&quot;</code> 更细，靠右显示）</td></tr><tr><td><code>10</code></td><td>正三角（比 <code>&quot;^&quot;</code> 更细，靠上显示）</td></tr><tr><td><code>11</code></td><td>倒三角（比 <code>&quot;v&quot;</code> 更细，靠下显示）</td></tr><tr><td><code>&quot;None&quot;</code> / <code>&quot; &quot;</code> / <code>&quot;&quot;</code></td><td>无样式</td></tr><tr><td><code>&#39;$...$&#39;</code></td><td>支持 LaTeX 数学公式，表达式用美元符号包围起来</td></tr></tbody></table><h2 id="【3x00】绘制极坐标"><a href="#【3x00】绘制极坐标" class="headerlink" title="【3x00】绘制极坐标"></a><font color="#FF0000">【3x00】绘制极坐标</font></h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置中文显示</span></span><br><span class="line">plt.rcParams[<span class="string">'font.sans-serif'</span>] = [<span class="string">'Microsoft YaHei'</span>]</span><br><span class="line"><span class="comment"># 设置画布大小</span></span><br><span class="line">plt.figure(figsize=(<span class="number">8.0</span>, <span class="number">6.0</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置三个数据，theta 为点位置的弧度参数，r 为点的半径坐标</span></span><br><span class="line">theta1 = np.array([<span class="number">1.25</span>*np.pi, np.pi/<span class="number">2</span>, <span class="number">0</span>])</span><br><span class="line">theta2 = np.array([-np.pi/<span class="number">6</span>, -np.pi/<span class="number">2</span>, <span class="number">0</span>, np.pi/<span class="number">2</span>, np.pi])</span><br><span class="line">theta3 = np.arange(<span class="number">0.</span>, <span class="number">2</span>*np.pi, <span class="number">0.5</span>)</span><br><span class="line">r1 = np.array([<span class="number">4</span>, <span class="number">2</span>, <span class="number">3</span>])</span><br><span class="line">r2 = np.array([<span class="number">5</span>, <span class="number">2</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">3</span>])</span><br><span class="line">r3 = np.random.randint(<span class="number">0</span>, <span class="number">5</span>, <span class="number">13</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 绘制第一个极坐标图，点的标记样式为细菱形，大小为8，点之间的连接线条样式为:</span></span><br><span class="line">plt.polar(theta1, r1, marker=<span class="string">'d'</span>, ms=<span class="number">8</span>, ls=<span class="string">':'</span>, label=<span class="string">'数据一'</span>)</span><br><span class="line"><span class="comment"># 填充第一个极坐标图，填充颜色为蓝色，透明度0.3</span></span><br><span class="line">plt.fill(theta1, r1, color=<span class="string">'b'</span>, alpha=<span class="number">0.3</span>)</span><br><span class="line"><span class="comment"># 绘制第二个极坐标图，marker、linestyle、color 三个参数可以组合以字符串形式传入</span></span><br><span class="line">plt.polar(theta2, r2, <span class="string">'*-g'</span>, ms=<span class="number">10</span>, label=<span class="string">'数据二'</span>)</span><br><span class="line"><span class="comment"># 绘制第三个极坐标图，设置 linestyle 为 none，即点与点之间不相连</span></span><br><span class="line">plt.polar(theta3, r3, marker=<span class="string">'o'</span>, ls=<span class="string">'none'</span>, ms=<span class="number">8</span>, color=<span class="string">'r'</span>, label=<span class="string">'数据三'</span>)</span><br><span class="line"></span><br><span class="line">plt.title(<span class="string">'matplotlib.pyplot.polar 用法示例'</span>, pad=<span class="number">25</span>, fontsize=<span class="number">15</span>)</span><br><span class="line">plt.legend(bbox_to_anchor=(<span class="number">1.3</span>, <span class="number">1</span>))</span><br><span class="line"></span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p>示例中 figure、title、legend 等其他方法的解释可参见我的系列文章：</p><ul><li><a href="https://itrhx.blog.csdn.net/article/details/105638122" target="_blank" rel="noopener">《Python 数据分析三剑客之 Matplotlib（一）：初识 Matplotlib 与其 matplotibrc 配置文件》</a></li><li><a href="https://itrhx.blog.csdn.net/article/details/105828049" target="_blank" rel="noopener">《Python 数据分析三剑客之 Matplotlib（二）：文本描述 / 中文支持 / 画布 / 网格等基本图像属性》</a></li><li><a href="https://itrhx.blog.csdn.net/article/details/105828143" target="_blank" rel="noopener">《Python 数据分析三剑客之 Matplotlib（三）：图例 / LaTeX / 刻度 / 子图 / 补丁等基本图像属性》</a></li></ul><p>绘制结果如下图：</p><p><img src="https://cdn.jsdelivr.net/gh/TRHX/ImageHosting/ITRHX-PIC/A76/02.png" alt="02"></p><h2 id="【4x00】绘制雷达图"><a href="#【4x00】绘制雷达图" class="headerlink" title="【4x00】绘制雷达图"></a><font color="#FF0000">【4x00】绘制雷达图</font></h2><p>雷达图是以从同一点开始的轴上表示的三个或更多个定量变量的二维图表的形式显示多变量数据的图形方法。轴的相对位置和角度通常是无信息的。 雷达图也称为网络图，蜘蛛图，星图，蜘蛛网图，不规则多边形，极坐标图或 Kiviat 图。它相当于平行坐标图，轴径向排列。</p><p>在前面的示例中，使用了 <code>matplotlib.pyplot.fill()</code> 方法对三个极坐标点围成的图形进行了填充，这就有点儿接近于雷达图了，仔细观察前面的示例，在填充时第一个点和最后一个点之间没有连线，即没有闭合，而更精确的雷达图应该是闭合的，且外围应该是文字描述而不是度数。</p><p>在绘制雷达图之前需要提前了解一些函数。这些函数可以帮助我们实现闭合、自定义文字标签等。</p><hr><h3 id="【4x01】理解-numpy-concatenate"><a href="#【4x01】理解-numpy-concatenate" class="headerlink" title="【4x01】理解 numpy.concatenate()"></a><font color="##4876FF">【4x01】理解 numpy.concatenate()</font></h3><p><code>numpy.concatenate()</code> 方法用于沿现有轴连接一系列数组，我们可以利用此方法来实现闭合操作。</p><p>基本语法：<code>numpy.concatenate((a1, a2, ...)[, axis=0, out=None])</code></p><table><thead><tr><th>参数</th><th>描述</th></tr></thead><tbody><tr><td>a1, a2, …</td><td>要连接的数组，必须拥有相同的维度</td></tr><tr><td>axis</td><td>沿指定轴连接数组，可选项，如果 axis 为 None，则数组在使用前被展平，默认值为 0</td></tr><tr><td>out</td><td>用于接收连接后的数组，可选项</td></tr></tbody></table><p>用法示例：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">a = np.array([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>])</span><br><span class="line">b = np.array([<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>, <span class="string">'d'</span>])</span><br><span class="line">print(np.concatenate((a, b)))</span><br></pre></td></tr></table></figure><p>输出结果如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[<span class="string">'1'</span> <span class="string">'2'</span> <span class="string">'3'</span> <span class="string">'4'</span> <span class="string">'a'</span> <span class="string">'b'</span> <span class="string">'c'</span> <span class="string">'d'</span>]</span><br></pre></td></tr></table></figure><p>如果要实现数组的闭合，则可以传入原数组和一个新数组，其中新数组中的元素为原数组中的第一个元素，示例如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">a = np.array([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>])</span><br><span class="line">print(np.concatenate((a, [a[<span class="number">0</span>]])))</span><br></pre></td></tr></table></figure><p>输出结果如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[<span class="number">1</span> <span class="number">2</span> <span class="number">3</span> <span class="number">4</span> <span class="number">1</span>]</span><br></pre></td></tr></table></figure><hr><h3 id="【4x02】理解-pyplot-thetagrids"><a href="#【4x02】理解-pyplot-thetagrids" class="headerlink" title="【4x02】理解 pyplot.thetagrids()"></a><font color="##4876FF">【4x02】理解 pyplot.thetagrids()</font></h3><p><code>matplotlib.pyplot.thetagrids()</code> 方法用于获取并设置当前极区图上的极轴。</p><p>基本语法：<code>matplotlib.pyplot.thetagrids(angles, labels=None, fmt=None, **kwargs)</code></p><table><thead><tr><th>参数</th><th>描述</th></tr></thead><tbody><tr><td>angles</td><td>网格线的角度，浮点数、度数组成的元组</td></tr><tr><td>labels</td><td>每个极轴要使用的文本标签，字符串组成的元组</td></tr><tr><td>fmt</td><td>格式化 angles 参数，如 <code>&#39;%1.2f&#39;</code> 保留两位小数，注意，将使用以弧度为单位的角度</td></tr><tr><td>**kwargs</td><td>其他关键字参数，参见<a href="https://matplotlib.org/api/text_api.html?highlight=text#matplotlib.text.Text" target="_blank" rel="noopener">官方文档</a></td></tr></tbody></table><p>应用举例：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"> <span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"></span><br><span class="line">plt.rcParams[<span class="string">'font.sans-serif'</span>] = [<span class="string">'Microsoft YaHei'</span>]</span><br><span class="line"></span><br><span class="line">plt.polar()</span><br><span class="line">angles = range(<span class="number">0</span>, <span class="number">360</span>, <span class="number">45</span>)</span><br><span class="line">labels = (<span class="string">'东'</span>, <span class="string">'东北'</span>, <span class="string">'北'</span>, <span class="string">'西北'</span>, <span class="string">'西'</span>, <span class="string">'西南'</span>, <span class="string">'南'</span>, <span class="string">'东南'</span>)</span><br><span class="line">plt.thetagrids(angles, labels)</span><br><span class="line">plt.title(<span class="string">'matplotlib.pyplot.thetagrids() 用法示例'</span>, pad=<span class="number">15</span>)</span><br><span class="line"></span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/TRHX/ImageHosting/ITRHX-PIC/A76/03.png" alt="03"></p><hr><h3 id="【4x03】绘制雷达图"><a href="#【4x03】绘制雷达图" class="headerlink" title="【4x03】绘制雷达图"></a><font color="##4876FF">【4x03】绘制雷达图</font></h3><p><code>numpy.concatenate()</code> 方法能够解决闭合问题，<code>matplotlib.pyplot.thetagrids()</code> 能够解决自定义极轴和极轴的文本标记问题，因此就可以绘制一个标准的雷达图了。示例如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置中文显示、画布大小</span></span><br><span class="line">plt.rcParams[<span class="string">'font.sans-serif'</span>] = [<span class="string">'Microsoft YaHei'</span>]</span><br><span class="line">plt.figure(figsize=(<span class="number">8.0</span>, <span class="number">6.0</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 分割圆并执行闭合操作（0-2π之间返回间隔均匀的6个弧度：π/3、2π/3、π、4π/3、5π/3、2π）</span></span><br><span class="line">theta = np.linspace(<span class="number">0</span>, <span class="number">2</span>*np.pi, <span class="number">6</span>, endpoint=<span class="keyword">False</span>)</span><br><span class="line">theta = np.concatenate((theta, [theta[<span class="number">0</span>]]))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置两组数据并执行闭合操作</span></span><br><span class="line">data1 = np.array([<span class="number">9</span>, <span class="number">4</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">2</span>, <span class="number">8</span>])</span><br><span class="line">data2 = np.array([<span class="number">3</span>, <span class="number">6</span>, <span class="number">9</span>, <span class="number">6</span>, <span class="number">3</span>, <span class="number">2</span>])</span><br><span class="line">data1 = np.concatenate((data1, [data1[<span class="number">0</span>]]))</span><br><span class="line">data2 = np.concatenate((data2, [data2[<span class="number">0</span>]]))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 绘制并填充两组数据</span></span><br><span class="line">plt.polar(theta, data1, <span class="string">'bo-'</span>, label=<span class="string">'小王'</span>)</span><br><span class="line">plt.polar(theta, data2, <span class="string">'ro:'</span>, label=<span class="string">'小张'</span>)</span><br><span class="line">plt.fill(theta, data1, color=<span class="string">'b'</span>, alpha=<span class="number">0.3</span>)</span><br><span class="line">plt.fill(theta, data2, color=<span class="string">'r'</span>, alpha=<span class="number">0.3</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将六个弧度（π/3、2π/3、π、4π/3、5π/3、2π）转换成角度，并分别设置标签</span></span><br><span class="line">labels = np.array([<span class="string">'Python'</span>, <span class="string">'Golang'</span>, <span class="string">'Java'</span>, <span class="string">'C++'</span>, <span class="string">'PHP'</span>, <span class="string">'JavaScript'</span>])</span><br><span class="line">plt.thetagrids(theta * <span class="number">180</span>/np.pi, labels)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置刻度范围、标题、图例</span></span><br><span class="line">plt.ylim(<span class="number">0</span>, <span class="number">10</span>)</span><br><span class="line">plt.title(<span class="string">'编程语言掌握程度'</span>)</span><br><span class="line">plt.legend(bbox_to_anchor=(<span class="number">1.3</span>, <span class="number">1</span>))</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/TRHX/ImageHosting/ITRHX-PIC/A76/04.png" alt="04"></p><hr><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">这里是一段防爬虫文本，请读者忽略。</span></span><br><span class="line"><span class="string">本文原创首发于</span> <span class="string">CSDN，作者</span> <span class="string">TRHX。</span></span><br><span class="line"><span class="string">博客首页：https://itrhx.blog.csdn.net/</span></span><br><span class="line"><span class="string">本文链接：https://itrhx.blog.csdn.net/article/details/106162412</span></span><br><span class="line"><span class="string">未经授权，禁止转载！恶意转载，后果自负！尊重原创，远离剽窃！</span></span><br></pre></td></tr></table></figure><hr><h2 id="【5x00】高级用法：绘制极坐标散点图"><a href="#【5x00】高级用法：绘制极坐标散点图" class="headerlink" title="【5x00】高级用法：绘制极坐标散点图"></a><font color="#FF0000">【5x00】高级用法：绘制极坐标散点图</font></h2><p><code>matplotlib.pyplot.polar()</code> 方法可以实现极坐标散点图，但仅用这一个函数的话实现的样式效果并不多，以下介绍另外三种绘制极坐标散点图的方法：</p><ul><li><p><code>matplotlib.pyplot.polar()</code> 和 <code>matplotlib.pyplot.scatter()</code> 结合，前者绘制极坐标图，后者在极坐标图上绘制散点图；</p></li><li><p><code>matplotlib.pyplot.subplot()</code> 和 <code>matplotlib.pyplot.scatter()</code> 结合，前者添加子图，其中指定 <code>projection=&#39;polar&#39;</code> 即为极坐标图， 后者在极坐标图上绘制散点图；</p></li><li><p><code>matplotlib.pyplot.axes()</code> 与 <code>matplotlib.pyplot.scatter()</code> 结合，前者设置绘图区参数，其中指定 <code>projection=&#39;polar&#39;</code> 或 <code>polar=True</code> 即为极坐标图， 后者在极坐标图上绘制散点图。</p></li></ul><hr><h3 id="【5x01】方法一：pyplot-scatter-与-pyplot-polar"><a href="#【5x01】方法一：pyplot-scatter-与-pyplot-polar" class="headerlink" title="【5x01】方法一：pyplot.scatter() 与 pyplot.polar()"></a><font color="##4876FF">【5x01】方法一：pyplot.scatter() 与 pyplot.polar()</font></h3><p>以下用到的 <code>matplotlib.pyplot.scatter()</code> 函数，各参数含义以及支持的其他参数可以参见前文：</p><ul><li><p><a href="https://itrhx.blog.csdn.net/article/details/105828049" target="_blank" rel="noopener">《Python 数据分析三剑客之 Matplotlib（二）：文本描述 / 中文支持 / 画布 / 网格等基本图像属性》</a></p></li><li><p><a href="https://itrhx.blog.csdn.net/article/details/105914929" target="_blank" rel="noopener">《Python 数据分析三剑客之 Matplotlib（五）：散点图的绘制》</a></p></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"></span><br><span class="line">plt.rcParams[<span class="string">'font.sans-serif'</span>] = [<span class="string">'Microsoft YaHei'</span>]</span><br><span class="line"></span><br><span class="line">N = <span class="number">50</span></span><br><span class="line">r = <span class="number">2</span> * np.random.rand(N)</span><br><span class="line">theta = <span class="number">2</span> * np.pi * np.random.rand(N)</span><br><span class="line">size = <span class="number">200</span> * r ** <span class="number">2</span></span><br><span class="line">colors = N * np.random.rand(N)</span><br><span class="line"></span><br><span class="line">plt.polar()</span><br><span class="line">plt.scatter(theta, r, s=size, c=colors, alpha=<span class="number">0.8</span>)</span><br><span class="line">plt.title(<span class="string">'极坐标散点图示例一'</span>, pad=<span class="number">15</span>)</span><br><span class="line"></span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/TRHX/ImageHosting/ITRHX-PIC/A76/05.png" alt="05"></p><hr><h3 id="【5x02】方法二：pyplot-scatter-与-pyplot-subplot"><a href="#【5x02】方法二：pyplot-scatter-与-pyplot-subplot" class="headerlink" title="【5x02】方法二：pyplot.scatter() 与 pyplot.subplot()"></a><font color="##4876FF">【5x02】方法二：pyplot.scatter() 与 pyplot.subplot()</font></h3><p><code>matplotlib.pyplot.subplot()</code> 方法用于添加子图，如果想要子图为极坐标图，则需要指定 <code>projection</code> 参数为 <code>polar</code>，有关此函数的具体介绍可参见<a href="https://matplotlib.org/api/_as_gen/matplotlib.pyplot.subplot.html" target="_blank" rel="noopener">官方文档</a>。其他函数的参数解释可参考前文：</p><ul><li><p><a href="https://itrhx.blog.csdn.net/article/details/105828143" target="_blank" rel="noopener">《Python 数据分析三剑客之 Matplotlib（三）：图例 / LaTeX / 刻度 / 子图 / 补丁等基本图像属性》</a></p></li><li><p><a href="https://itrhx.blog.csdn.net/article/details/105914929" target="_blank" rel="noopener">《Python 数据分析三剑客之 Matplotlib（五）：散点图的绘制》</a></p></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"></span><br><span class="line">plt.rcParams[<span class="string">'font.sans-serif'</span>] = [<span class="string">'Microsoft YaHei'</span>]</span><br><span class="line"></span><br><span class="line">N = <span class="number">50</span></span><br><span class="line">r = <span class="number">2</span> * np.random.rand(N)</span><br><span class="line">theta = <span class="number">2</span> * np.pi * np.random.rand(N)</span><br><span class="line">size = <span class="number">200</span> * r ** <span class="number">2</span></span><br><span class="line">colors = N * np.random.rand(N)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 一行一列第一个子图</span></span><br><span class="line">plt.subplot(<span class="number">111</span>, projection=<span class="string">'polar'</span>)</span><br><span class="line">plt.scatter(theta, r, s=size, c=colors, alpha=<span class="number">0.8</span>)</span><br><span class="line">plt.title(<span class="string">'极坐标散点图示例二'</span>, pad=<span class="number">15</span>)</span><br><span class="line"></span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/TRHX/ImageHosting/ITRHX-PIC/A76/06.png" alt="06"></p><hr><h3 id="【5x03】方法三：pyplot-scatter-与-pyplot-axes"><a href="#【5x03】方法三：pyplot-scatter-与-pyplot-axes" class="headerlink" title="【5x03】方法三：pyplot.scatter() 与 pyplot.axes()"></a><font color="##4876FF">【5x03】方法三：pyplot.scatter() 与 pyplot.axes()</font></h3><p>axes 为 Matplotlib 图像中的绘图区，<code>matplotlib.pyplot.axes()</code> 方法可以对绘图区进行设置，同样的也可以设置 <code>projection</code> 参数为 <code>polar</code> 来实现极坐标图，设置 <code>polar=True</code> 也行。示例中其他函数的参数解释可参考前文：</p><ul><li><p><a href="https://itrhx.blog.csdn.net/article/details/105638122" target="_blank" rel="noopener">《Python 数据分析三剑客之 Matplotlib（一）：初识 Matplotlib 与其 matplotibrc 配置文件》</a></p></li><li><p><a href="https://itrhx.blog.csdn.net/article/details/105914929" target="_blank" rel="noopener">《Python 数据分析三剑客之 Matplotlib（五）：散点图的绘制》</a></p></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"></span><br><span class="line">plt.rcParams[<span class="string">'font.sans-serif'</span>] = [<span class="string">'Microsoft YaHei'</span>]</span><br><span class="line"></span><br><span class="line">N = <span class="number">50</span></span><br><span class="line">r = <span class="number">2</span> * np.random.rand(N)</span><br><span class="line">theta = <span class="number">2</span> * np.pi * np.random.rand(N)</span><br><span class="line">size = <span class="number">200</span> * r ** <span class="number">2</span></span><br><span class="line">colors = N * np.random.rand(N)</span><br><span class="line"></span><br><span class="line"><span class="comment"># plt.axes(polar=True)</span></span><br><span class="line">plt.axes(projection=<span class="string">'polar'</span>)</span><br><span class="line">plt.scatter(theta, r, s=size, c=colors, alpha=<span class="number">0.8</span>)</span><br><span class="line">plt.title(<span class="string">'极坐标散点图示例三'</span>, pad=<span class="number">15</span>)</span><br><span class="line"></span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/TRHX/ImageHosting/ITRHX-PIC/A76/07.png" alt="07"></p><h2 id="【6x00】高级用法：绘制极坐标柱状图"><a href="#【6x00】高级用法：绘制极坐标柱状图" class="headerlink" title="【6x00】高级用法：绘制极坐标柱状图"></a><font color="#FF0000">【6x00】高级用法：绘制极坐标柱状图</font></h2><p>和极坐标散点图的绘制类似，<code>matplotlib.pyplot.polar()</code> 方法可以实现极坐标图，但仅用这一个函数的话实现的样式效果并不多，以下介绍另外三种绘制极坐标柱状图的方法：</p><ul><li><p><code>matplotlib.pyplot.polar()</code> 和 <code>matplotlib.pyplot.bar()</code> 结合，前者绘制极坐标图，后者在极坐标图上绘制柱状图；</p></li><li><p><code>matplotlib.pyplot.subplot()</code> 和 <code>matplotlib.pyplot.bar()</code> 结合，前者添加子图，其中指定 <code>projection=&#39;polar&#39;</code> 即为极坐标图， 后者在极坐标图上绘制柱状图；</p></li><li><p><code>matplotlib.pyplot.axes()</code> 与 <code>matplotlib.pyplot.bar()</code> 结合，前者设置绘图区参数，其中指定 <code>projection=&#39;polar&#39;</code> 或 <code>polar=True</code> 即为极坐标图， 后者在极坐标图上绘制柱状图。</p></li></ul><hr><h3 id="【6x01】方法一：pyplot-bar-与-pyplot-polar"><a href="#【6x01】方法一：pyplot-bar-与-pyplot-polar" class="headerlink" title="【6x01】方法一：pyplot.bar() 与 pyplot.polar()"></a><font color="##4876FF">【6x01】方法一：pyplot.bar() 与 pyplot.polar()</font></h3><p>以下用到的 <code>matplotlib.pyplot.bar()</code> 函数，各参数含义以及支持的其他参数可以参见前文：</p><ul><li><p><a href="https://itrhx.blog.csdn.net/article/details/105828049" target="_blank" rel="noopener">《Python 数据分析三剑客之 Matplotlib（二）：文本描述 / 中文支持 / 画布 / 网格等基本图像属性》</a></p></li><li><p><a href="https://itrhx.blog.csdn.net/article/details/105952856" target="_blank" rel="noopener">《Python 数据分析三剑客之 Matplotlib（六）：直方图 / 柱状图 / 条形图的绘制》</a></p></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"></span><br><span class="line">plt.rcParams[<span class="string">'font.sans-serif'</span>] = [<span class="string">'Microsoft YaHei'</span>]</span><br><span class="line"></span><br><span class="line">r = np.random.rand(<span class="number">8</span>)</span><br><span class="line">theta = np.arange(<span class="number">0</span>, <span class="number">2</span> * np.pi, <span class="number">2</span> * np.pi / <span class="number">8</span>)</span><br><span class="line">colors = np.array([<span class="string">'#4bb2c5'</span>, <span class="string">'#c5b47f'</span>, <span class="string">'#EAA228'</span>, <span class="string">'#579575'</span>, <span class="string">'#839557'</span>, <span class="string">'#958c12'</span>, <span class="string">'#953579'</span>, <span class="string">'#4b5de4'</span>])</span><br><span class="line"></span><br><span class="line">plt.polar()</span><br><span class="line">plt.bar(theta, r, color=colors, alpha=<span class="number">0.8</span>)</span><br><span class="line">plt.title(<span class="string">'极坐标柱状图示例一'</span>, pad=<span class="number">15</span>)</span><br><span class="line"></span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/TRHX/ImageHosting/ITRHX-PIC/A76/08.png" alt="08"></p><hr><h3 id="【6x02】方法二：pyplot-bar-与-pyplot-subplot"><a href="#【6x02】方法二：pyplot-bar-与-pyplot-subplot" class="headerlink" title="【6x02】方法二：pyplot.bar() 与 pyplot.subplot()"></a><font color="##4876FF">【6x02】方法二：pyplot.bar() 与 pyplot.subplot()</font></h3><p><code>matplotlib.pyplot.subplot()</code> 方法用于添加子图，如果想要子图为极坐标图，则需要指定 <code>projection</code> 参数为 <code>polar</code>，有关此函数的具体介绍可参见<a href="https://matplotlib.org/api/_as_gen/matplotlib.pyplot.subplot.html" target="_blank" rel="noopener">官方文档</a>。其他函数的参数解释可参考前文：</p><ul><li><p><a href="https://itrhx.blog.csdn.net/article/details/105828143" target="_blank" rel="noopener">《Python 数据分析三剑客之 Matplotlib（三）：图例 / LaTeX / 刻度 / 子图 / 补丁等基本图像属性》</a></p></li><li><p><a href="https://itrhx.blog.csdn.net/article/details/105952856" target="_blank" rel="noopener">《Python 数据分析三剑客之 Matplotlib（六）：直方图 / 柱状图 / 条形图的绘制》</a></p></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"></span><br><span class="line">plt.rcParams[<span class="string">'font.sans-serif'</span>] = [<span class="string">'Microsoft YaHei'</span>]</span><br><span class="line"></span><br><span class="line">r = np.random.rand(<span class="number">8</span>)</span><br><span class="line">theta = np.arange(<span class="number">0</span>, <span class="number">2</span> * np.pi, <span class="number">2</span> * np.pi / <span class="number">8</span>)</span><br><span class="line">colors = np.array([<span class="string">'#4bb2c5'</span>, <span class="string">'#c5b47f'</span>, <span class="string">'#EAA228'</span>, <span class="string">'#579575'</span>, <span class="string">'#839557'</span>, <span class="string">'#958c12'</span>, <span class="string">'#953579'</span>, <span class="string">'#4b5de4'</span>])</span><br><span class="line"></span><br><span class="line">plt.subplot(<span class="number">111</span>, projection=<span class="string">'polar'</span>)</span><br><span class="line">plt.bar(theta, r, color=colors, alpha=<span class="number">0.8</span>)</span><br><span class="line">plt.title(<span class="string">'极坐标柱状图示例二'</span>, pad=<span class="number">15</span>)</span><br><span class="line"></span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/TRHX/ImageHosting/ITRHX-PIC/A76/09.png" alt="09"></p><hr><h3 id="【6x03】方法三：pyplot-bar-与-pyplot-axes"><a href="#【6x03】方法三：pyplot-bar-与-pyplot-axes" class="headerlink" title="【6x03】方法三：pyplot.bar() 与 pyplot.axes()"></a><font color="##4876FF">【6x03】方法三：pyplot.bar() 与 pyplot.axes()</font></h3><p>axes 为 Matplotlib 图像中的绘图区，<code>matplotlib.pyplot.axes()</code> 方法可以对绘图区进行设置，同样的也可以设置 <code>projection</code> 参数为 <code>polar</code> 来实现极坐标图，设置 <code>polar=True</code> 也行。示例中其他函数的参数解释可参考前文：</p><ul><li><p><a href="https://itrhx.blog.csdn.net/article/details/105638122" target="_blank" rel="noopener">《Python 数据分析三剑客之 Matplotlib（一）：初识 Matplotlib 与其 matplotibrc 配置文件》</a></p></li><li><p><a href="https://itrhx.blog.csdn.net/article/details/105952856" target="_blank" rel="noopener">《Python 数据分析三剑客之 Matplotlib（六）：直方图 / 柱状图 / 条形图的绘制》</a></p></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"></span><br><span class="line">plt.rcParams[<span class="string">'font.sans-serif'</span>] = [<span class="string">'Microsoft YaHei'</span>]</span><br><span class="line"></span><br><span class="line">r = np.random.rand(<span class="number">8</span>)</span><br><span class="line">theta = np.arange(<span class="number">0</span>, <span class="number">2</span> * np.pi, <span class="number">2</span> * np.pi / <span class="number">8</span>)</span><br><span class="line">colors = np.array([<span class="string">'#4bb2c5'</span>, <span class="string">'#c5b47f'</span>, <span class="string">'#EAA228'</span>, <span class="string">'#579575'</span>, <span class="string">'#839557'</span>, <span class="string">'#958c12'</span>, <span class="string">'#953579'</span>, <span class="string">'#4b5de4'</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment"># plt.axes(polar=True)</span></span><br><span class="line">plt.axes(projection=<span class="string">'polar'</span>)</span><br><span class="line">plt.bar(theta, r, color=colors, alpha=<span class="number">0.8</span>)</span><br><span class="line">plt.title(<span class="string">'极坐标柱状图示例三'</span>, pad=<span class="number">15</span>)</span><br><span class="line"></span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/TRHX/ImageHosting/ITRHX-PIC/A76/10.png" alt="10"></p><hr><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">这里是一段防爬虫文本，请读者忽略。</span></span><br><span class="line"><span class="string">本文原创首发于</span> <span class="string">CSDN，作者</span> <span class="string">TRHX。</span></span><br><span class="line"><span class="string">博客首页：https://itrhx.blog.csdn.net/</span></span><br><span class="line"><span class="string">本文链接：https://itrhx.blog.csdn.net/article/details/106162412</span></span><br><span class="line"><span class="string">未经授权，禁止转载！恶意转载，后果自负！尊重原创，远离剽窃！</span></span><br></pre></td></tr></table></figure><hr>]]></content>
    
    <summary type="html">
    
      Python 数据分析三剑客之 Matplotlib（九）：极区图、极坐标图、雷达图的绘制。
    
    </summary>
    
      <category term="Python 数据分析" scheme="https://www.itrhx.com/categories/Python-%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/"/>
    
      <category term="Matplotlib" scheme="https://www.itrhx.com/categories/Python-%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/Matplotlib/"/>
    
    
      <category term="Matplotlib" scheme="https://www.itrhx.com/tags/Matplotlib/"/>
    
      <category term="极区图" scheme="https://www.itrhx.com/tags/%E6%9E%81%E5%8C%BA%E5%9B%BE/"/>
    
      <category term="极坐标图" scheme="https://www.itrhx.com/tags/%E6%9E%81%E5%9D%90%E6%A0%87%E5%9B%BE/"/>
    
      <category term="雷达图" scheme="https://www.itrhx.com/tags/%E9%9B%B7%E8%BE%BE%E5%9B%BE/"/>
    
  </entry>
  
  <entry>
    <title>Python 数据分析三剑客之 Matplotlib（八）：等高线/等值线图的绘制</title>
    <link href="https://www.itrhx.com/2020/04/30/A75-Matplotlib-08/"/>
    <id>https://www.itrhx.com/2020/04/30/A75-Matplotlib-08/</id>
    <published>2020-04-29T17:28:26.784Z</published>
    <updated>2020-07-06T13:32:21.615Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>Matplotlib 系列文章：</p><ul><li><a href="https://www.itrhx.com/2020/04/10/A68-Matplotlib-01/">Python 数据分析三剑客之 Matplotlib（一）：初识 Matplotlib 与其 matplotibrc 配置文件</a></li><li><a href="https://www.itrhx.com/2020/04/12/A69-Matplotlib-02/">Python 数据分析三剑客之 Matplotlib（二）：文本描述 / 中文支持 / 画布 / 网格等基本图像属性</a></li><li><a href="https://www.itrhx.com/2020/04/14/A70-Matplotlib-03/">Python 数据分析三剑客之 Matplotlib（三）：图例 / LaTeX / 刻度 / 子图 / 补丁等基本图像属性</a></li><li><a href="https://www.itrhx.com/2020/04/16/A71-Matplotlib-04/">Python 数据分析三剑客之 Matplotlib（四）：线性图的绘制</a></li><li><a href="https://www.itrhx.com/2020/04/18/A72-Matplotlib-05/">Python 数据分析三剑客之 Matplotlib（五）：散点图的绘制</a></li><li><a href="https://www.itrhx.com/2020/04/21/A73-Matplotlib-06/">Python 数据分析三剑客之 Matplotlib（六）：直方图 / 柱状图 / 条形图的绘制</a></li><li><a href="https://www.itrhx.com/2020/04/24/A74-Matplotlib-07/">Python 数据分析三剑客之 Matplotlib（七）：饼状图的绘制</a></li><li><a href="https://www.itrhx.com/2020/04/30/A75-Matplotlib-08/">Python 数据分析三剑客之 Matplotlib（八）：等高线 / 等值线图的绘制</a></li><li><a href="https://www.itrhx.com/2020/06/03/A76-Matplotlib-09/">Python 数据分析三剑客之 Matplotlib（九）：极区图 / 极坐标图 / 雷达图的绘制</a></li><li><a href="https://www.itrhx.com/2020/06/08/A77-Matplotlib-10/">Python 数据分析三剑客之 Matplotlib（十）：3D 图的绘制</a></li><li><a href="https://www.itrhx.com/2020/06/09/A78-Matplotlib-11/">Python 数据分析三剑客之 Matplotlib（十一）：最热门最常用的 50 个图表</a>【译文】</li></ul><p>专栏：</p><p>【<a href="https://www.itrhx.com/categories/Python-%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/NumPy/">NumPy 专栏</a>】【<a href="https://www.itrhx.com/categories/Python-%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/Pandas/">Pandas 专栏</a>】【<a href="https://www.itrhx.com/categories/Python-%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/Matplotlib/">Matplotlib 专栏</a>】</p><p>推荐学习资料与网站：</p><p>【<a href="https://www.numpy.org.cn/" target="_blank" rel="noopener">NumPy 中文网</a>】【<a href="https://www.pypandas.cn/" target="_blank" rel="noopener">Pandas 中文网</a>】【<a href="https://www.matplotlib.org.cn/" target="_blank" rel="noopener">Matplotlib 中文网</a>】【<a href="https://github.com/TRHX/Python-quick-reference-table" target="_blank" rel="noopener">NumPy、Matplotlib、Pandas 速查表</a>】</p><hr><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">这里是一段防爬虫文本，请读者忽略。</span></span><br><span class="line"><span class="string">本文原创首发于</span> <span class="string">CSDN，作者</span> <span class="string">TRHX。</span></span><br><span class="line"><span class="string">博客首页：https://itrhx.blog.csdn.net/</span></span><br><span class="line"><span class="string">本文链接：https://itrhx.blog.csdn.net/article/details/106066852</span></span><br><span class="line"><span class="string">未经授权，禁止转载！恶意转载，后果自负！尊重原创，远离剽窃！</span></span><br></pre></td></tr></table></figure><hr><h2 id="【1x00】等高线概念"><a href="#【1x00】等高线概念" class="headerlink" title="【1x00】等高线概念"></a><font color="#FF0000">【1x00】等高线概念</font></h2><p>参考百度百科，等高线概念总结如下：等高线指的是地形图上高程相等的相邻各点所连成的闭合曲线。把地面上海拔高度相同的点连成的闭合曲线，并垂直投影到一个水平面上，并按比例缩绘在图纸上，就得到等高线。等高线也可以看作是不同海拔高度的水平面与实际地面的交线，所以等高线是闭合曲线。在等高线上标注的数字为该等高线的海拔。</p><ul><li>位于同一等高线上的地面点，海拔高度相同。但海拔高度相同的点不一定位于同一条等高线上；</li><li>在同一幅图内，除了陡崖以外，不同高程的等高线不能相交；</li><li>在图廓内相邻等高线的高差一般是相同的，因此地面坡度与等高线之间的等高线平距成反比，等高线平距愈小，等高线排列越密，说明地面坡度越大；等高线平距愈大，等高线排列越稀，则说明地面坡度愈小；</li><li>等高线是一条闭合的曲线，如果不能在同一幅内闭合，则必在相邻或者其他图幅内闭合。</li><li>等高线经过山脊或山谷时改变方向，因此，山脊线或者山谷线应垂直于等高线转折点处的切线，即等高线与山脊线或者山谷线正交。</li></ul><font color="#FF0000"><strong>在 Matplotlib 等高线的绘制中，需要传递三个基本参数：某个点的 x、y 轴坐标以及其高度。</strong></font><p><img src="https://cdn.jsdelivr.net/gh/TRHX/ImageHosting/ITRHX-PIC/A75/01.png" alt="01"></p><p><img src="https://cdn.jsdelivr.net/gh/TRHX/ImageHosting/ITRHX-PIC/A75/02.png" alt="02"></p><h2 id="【2x00】理解-numpy-meshgrid"><a href="#【2x00】理解-numpy-meshgrid" class="headerlink" title="【2x00】理解 numpy.meshgrid()"></a><font color="#FF0000">【2x00】理解 numpy.meshgrid()</font></h2><p><code>numpy.meshgrid()</code> 方法用于生成网格点坐标矩阵。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">a = np.array([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>])</span><br><span class="line">b = np.array([<span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>])</span><br><span class="line">res = np.meshgrid(a, b)</span><br><span class="line">print(res)</span><br></pre></td></tr></table></figure><p>输出结果：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[array([[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>],</span><br><span class="line">       [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>],</span><br><span class="line">       [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]]),</span><br><span class="line"> array([[<span class="number">7</span>, <span class="number">7</span>, <span class="number">7</span>],</span><br><span class="line">       [<span class="number">8</span>, <span class="number">8</span>, <span class="number">8</span>],</span><br><span class="line">       [<span class="number">9</span>, <span class="number">9</span>, <span class="number">9</span>]])]</span><br></pre></td></tr></table></figure><p>给定两个数组，<code>a[1, 2, 3]</code> 和 <code>b[7, 8, 9]</code>，a 作为 x 轴数据，b 作为 y 轴数据，那么一共可以绘制出 9 个点： (1,7)、(1,8)、(1,9)、(2,7)、(2,8)、(2,9)、(3,7)、(3,8)、(3,9)，而 <code>numpy.meshgrid()</code> 方法就是起这样的作用，返回的两个二维数组，横坐标矩阵 a 中的每个元素，与纵坐标矩阵 b 中对应位置元素，共同构成一个点的完整坐标。</p><font color="#FF0000"><strong>因为在 <code>matplotlib.pyplot.contour()</code> 等高线绘制函数中接收的是二维坐标信息，所以在绘制等高线图之前要将原数据经过 <code>numpy.meshgrid()</code> 方法处理，也可以自己构建类似于上述的二维数组。</strong></font><p><img src="https://img-blog.csdnimg.cn/20200512112427932.png" alt="分割线"></p><h2 id="【3x00】绘制方法-matplotlib-pyplot-contour"><a href="#【3x00】绘制方法-matplotlib-pyplot-contour" class="headerlink" title="【3x00】绘制方法 matplotlib.pyplot.contour()"></a><font color="#FF0000">【3x00】绘制方法 matplotlib.pyplot.contour()</font></h2><p><code>matplotlib.pyplot.contour()</code> 方法可用于绘制等高线图。</p><p>基本语法：<code>matplotlib.pyplot.contour(\*args, data=None, \*\*kwargs)</code></p><p>通用格式：<code>matplotlib.pyplot.contour([X, Y,] Z, [levels], **kwargs)</code></p><p>基本参数：</p><table><thead><tr><th>参数</th><th>描述</th></tr></thead><tbody><tr><td>X, Y</td><td>数组形式的点的 x 和 y 轴坐标，两者都必须是二维的，形状与 Z 相同</td></tr><tr><td>Z</td><td>绘制轮廓的高度值，二维数组，每个元素是其对应点的高度</td></tr><tr><td>levels</td><td>确定等高线的数目和位置，如果是整数 N，则使用 N 个数据间隔，即绘制 N+1 条等高线<br>如果是数组形式，则绘制指定的等高线。值必须按递增顺序排列</td></tr></tbody></table><p>其他参数：</p><table><thead><tr><th>参数</th><th>描述</th></tr></thead><tbody><tr><td>colors</td><td>等高线的颜色，颜色字符串或颜色序列</td></tr><tr><td>cmap</td><td>等高线的颜色，字符串或者 <a href="https://matplotlib.org/tutorials/colors/colormaps.html" target="_blank" rel="noopener">Colormap</a><br>通常包含一系列的渐变色或其他颜色组合，取值参见<font color="#FF0000"><strong>【6x00】Colormap 取值</strong></font></td></tr><tr><td>alpha</td><td>透明度，介于0（透明）和1（不透明）之间</td></tr><tr><td>origin</td><td>通过指定 Z[0，0] 的位置来确定 Z 的方向和确切位置，仅当未指定 X, Y 时才有意义<br><code>None</code>：Z[0，0] 位于左下角的 X=0, Y=0 处<br><code>&#39;lower&#39;</code>：Z [0, 0] 位于左下角的 X = 0.5, Y = 0.5 处<br><code>&#39;upper&#39;</code>：Z[0，0] 位于左上角的 X=N+0.5, Y=0.5 处<br><code>&#39;image&#39;</code>：使用 <code>rcParams[“image.origin”] = &#39;upper&#39;</code>的值</td></tr><tr><td>antialiased</td><td>是否启用抗锯齿渲染，默认 True</td></tr><tr><td>linewidths</td><td>等高线的线宽，如果是数字，则所有等高线都将使用此线宽<br>如果是序列，则将按指定的顺序以升序打印线宽<br>默认为 <code>rcParams[“lines.linewidth”] = 1.5</code></td></tr><tr><td>linestyles</td><td>等高线的样式，如果线条颜色为单色，则负等高线默认为虚线<br><code>&#39;-&#39;</code> or <code>&#39;solid&#39;</code>, <code>&#39;--&#39;</code> or <code>&#39;dashed&#39;</code>, <code>&#39;-.&#39;</code> or <code>&#39;dashdot&#39;</code> <code>&#39;:&#39;</code> or <code>&#39;dotted&#39;</code>, <code>&#39;none&#39;</code> or <code>&#39; &#39;</code> or <code>&#39;&#39;</code></td></tr></tbody></table><p><img src="https://img-blog.csdnimg.cn/20200512112427932.png" alt="分割线"></p><h2 id="【4x00】填充方法-matplotlib-pyplot-contourf"><a href="#【4x00】填充方法-matplotlib-pyplot-contourf" class="headerlink" title="【4x00】填充方法 matplotlib.pyplot.contourf()"></a><font color="#FF0000">【4x00】填充方法 matplotlib.pyplot.contourf()</font></h2><p><code>matplotlib.pyplot.contourf()</code> 方法与 <code>matplotlib.pyplot.contour()</code> 的区别在于：<code>contourf()</code> 会对等高线间的区域进行颜色填充（filled contours）。除此之外两者的函数签名和返回值都相同。</p><p>基本语法：<code>matplotlib.pyplot.contourf(\*args, data=None, \*\*kwargs)</code></p><p>通用格式：<code>matplotlib.pyplot.contour([X, Y,] Z, [levels], **kwargs)</code></p><p>基本参数：</p><table><thead><tr><th>参数</th><th>描述</th></tr></thead><tbody><tr><td>X, Y</td><td>数组形式的点的 x 和 y 轴坐标，两者都必须是二维的，形状与 Z 相同</td></tr><tr><td>Z</td><td>绘制轮廓的高度值，二维数组，每个元素是其对应点的高度</td></tr><tr><td>levels</td><td>确定等高线的数目和位置，如果是整数 N，则使用 N 个数据间隔，即绘制 N+1 条等高线<br>如果是数组形式，则绘制指定的等高线。值必须按递增顺序排列</td></tr></tbody></table><p>其他参数：</p><table><thead><tr><th>参数</th><th>描述</th></tr></thead><tbody><tr><td>colors</td><td>等高线的填充颜色，颜色字符串或颜色序列</td></tr><tr><td>cmap</td><td>等高线的填充颜色，字符串或者 <a href="https://matplotlib.org/tutorials/colors/colormaps.html" target="_blank" rel="noopener">Colormap</a><br>通常包含一系列的渐变色或其他颜色组合，取值参见<font color="#FF0000"><strong>【6x00】Colormap 取值</strong></font></td></tr><tr><td>alpha</td><td>透明度，介于0（透明）和1（不透明）之间</td></tr><tr><td>origin</td><td>通过指定 Z[0，0] 的位置来确定 Z 的方向和确切位置，仅当未指定 X, Y 时才有意义<br><code>None</code>：Z[0，0] 位于左下角的 X=0, Y=0 处<br><code>&#39;lower&#39;</code>：Z [0, 0] 位于左下角的 X = 0.5, Y = 0.5 处<br><code>&#39;upper&#39;</code>：Z[0，0] 位于左上角的 X=N+0.5, Y=0.5 处<br><code>&#39;image&#39;</code>：使用 <code>rcParams[“image.origin”] = &#39;upper&#39;</code>的值</td></tr><tr><td>antialiased</td><td>是否启用抗锯齿渲染，默认 True</td></tr><tr><td>linewidths</td><td>等高线的线宽，如果是数字，则所有等高线都将使用此线宽<br>如果是序列，则将按指定的顺序以升序打印线宽<br>默认为 <code>rcParams[“lines.linewidth”] = 1.5</code></td></tr><tr><td>linestyles</td><td>等高线的样式，如果线条颜色为单色，则负等高线默认为虚线<br><code>&#39;-&#39;</code> or <code>&#39;solid&#39;</code>, <code>&#39;--&#39;</code> or <code>&#39;dashed&#39;</code>, <code>&#39;-.&#39;</code> or <code>&#39;dashdot&#39;</code> <code>&#39;:&#39;</code> or <code>&#39;dotted&#39;</code>, <code>&#39;none&#39;</code> or <code>&#39; &#39;</code> or <code>&#39;&#39;</code></td></tr></tbody></table><p><img src="https://img-blog.csdnimg.cn/20200512180336350.png" alt="分割线"></p><h2 id="【5x00】标记方法-matplotlib-pyplot-clabel"><a href="#【5x00】标记方法-matplotlib-pyplot-clabel" class="headerlink" title="【5x00】标记方法 matplotlib.pyplot.clabel()"></a><font color="#FF0000">【5x00】标记方法 matplotlib.pyplot.clabel()</font></h2><p><code>matplotlib.pyplot.clabel(CS, \*args, \*\*kwargs)</code> 方法可用于标记等高线图。</p><table><thead><tr><th>参数</th><th>描述</th></tr></thead><tbody><tr><td>CS</td><td>ContourSet（等高线集）对象，即 <code>pyplot.contour()</code> 返回的对象</td></tr><tr><td>levels</td><td>需要标记的等高线集，数组类型，如果未指定则默认标记所有等高线</td></tr><tr><td>fontsize</td><td>标记的字体大小，可选项：<br><code>&#39;xx-small&#39;</code>, <code>&#39;x-small&#39;</code>, <code>&#39;small&#39;</code>, <code>&#39;medium&#39;</code>, <code>&#39;large&#39;</code>, <code>&#39;x-large&#39;</code>, <code>&#39;xx-large&#39;</code></td></tr><tr><td>colors</td><td>标记的颜色，颜色字符串或颜色序列</td></tr><tr><td>inline</td><td>是否在标签位置移除轮廓显示，bool 类型，默认 True</td></tr><tr><td>inline_spacing</td><td>标签位置移除轮廓的宽度，float 类型，默认为 5</td></tr><tr><td>fmt</td><td>标签的格式字符串。str 或 dict 类型，默认值为 <code>%1.3f</code></td></tr><tr><td>rightside_up</td><td>是否将标签旋转始终与水平面成正负90度，bool 类型，默认 True</td></tr><tr><td>use_clabeltext</td><td>默认为 False，如果为 True，则使用 <a href="https://matplotlib.org/api/contour_api.html#matplotlib.contour.ClabelText" target="_blank" rel="noopener">ClabelText</a> 类（而不是 <a href="https://matplotlib.org/api/text_api.html#matplotlib.text.Text" target="_blank" rel="noopener">Text</a>）创建标签<br>ClabelText  在绘图期间重新计算文本的旋转角度，如果轴的角度发生变化，则可以使用此功能</td></tr></tbody></table><p><img src="https://img-blog.csdnimg.cn/20200512112427932.png" alt="分割线"></p><hr><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">这里是一段防爬虫文本，请读者忽略。</span></span><br><span class="line"><span class="string">本文原创首发于</span> <span class="string">CSDN，作者</span> <span class="string">TRHX。</span></span><br><span class="line"><span class="string">博客首页：https://itrhx.blog.csdn.net/</span></span><br><span class="line"><span class="string">本文链接：https://itrhx.blog.csdn.net/article/details/106066852</span></span><br><span class="line"><span class="string">未经授权，禁止转载！恶意转载，后果自负！尊重原创，远离剽窃！</span></span><br></pre></td></tr></table></figure><hr><h2 id="【6x00】Colormap-取值"><a href="#【6x00】Colormap-取值" class="headerlink" title="【6x00】Colormap 取值"></a><font color="#FF0000">【6x00】Colormap 取值</font></h2><p><code>matplotlib.pyplot.contour()</code> 和 <code>matplotlib.pyplot.contourf()</code> 中 <code>cmap</code> 参数用于设置等高线的颜色，取值通常为 Colormap 中的值，通常包含一系列的渐变色或其他颜色组合。具体参加下图。</p><p>官方文档：<a href="https://matplotlib.org/tutorials/colors/colormaps.html" target="_blank" rel="noopener">https://matplotlib.org/tutorials/colors/colormaps.html</a></p><p><img src="https://cdn.jsdelivr.net/gh/TRHX/ImageHosting/ITRHX-PIC/A75/03.png" alt="03"></p><p><img src="https://img-blog.csdnimg.cn/20200512112427932.png" alt="分割线"></p><h2 id="【7x00】简单示例"><a href="#【7x00】简单示例" class="headerlink" title="【7x00】简单示例"></a><font color="#FF0000">【7x00】简单示例</font></h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"></span><br><span class="line">plt.rcParams[<span class="string">'font.sans-serif'</span>] = [<span class="string">'Microsoft YaHei'</span>]</span><br><span class="line"></span><br><span class="line">x = np.arange(<span class="number">-2.0</span>, <span class="number">2.0</span>, <span class="number">0.01</span>)</span><br><span class="line">y = np.arange(<span class="number">-2.0</span>, <span class="number">2.0</span>, <span class="number">0.01</span>)</span><br><span class="line">m, n = np.meshgrid(x, y)        <span class="comment"># 生成网格点坐标矩阵</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 指定一个函数用于计算每个点的高度，也可以直接使用二维数组储存每个点的高度</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f</span><span class="params">(a, b)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> (<span class="number">1</span> - b ** <span class="number">5</span> + a ** <span class="number">5</span>) * np.exp(-a ** <span class="number">2</span> - b ** <span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 绘制等高线图，8 个数据间隔，颜色为黑色</span></span><br><span class="line">plt.contour(m, n, f(m, n), <span class="number">8</span>, colors=<span class="string">'k'</span>)</span><br><span class="line">plt.title(<span class="string">'等高线图简单示例'</span>)</span><br><span class="line">plt.xlabel(<span class="string">'x axis label'</span>)</span><br><span class="line">plt.ylabel(<span class="string">'y axis label'</span>)</span><br><span class="line"></span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/TRHX/ImageHosting/ITRHX-PIC/A75/04.png" alt="04"></p><p><img src="https://img-blog.csdnimg.cn/20200512112427932.png" alt="分割线"></p><h2 id="【8x00】添加标记"><a href="#【8x00】添加标记" class="headerlink" title="【8x00】添加标记"></a><font color="#FF0000">【8x00】添加标记</font></h2><p><code>matplotlib.pyplot.clabel()</code> 方法用于给等高线添加标记。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"></span><br><span class="line">plt.rcParams[<span class="string">'font.sans-serif'</span>] = [<span class="string">'Microsoft YaHei'</span>]</span><br><span class="line"></span><br><span class="line">x = np.arange(<span class="number">-2.0</span>, <span class="number">2.0</span>, <span class="number">0.01</span>)</span><br><span class="line">y = np.arange(<span class="number">-2.0</span>, <span class="number">2.0</span>, <span class="number">0.01</span>)</span><br><span class="line">m, n = np.meshgrid(x, y)        <span class="comment"># 生成网格点坐标矩阵</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 指定一个函数用于计算每个点的高度，也可以直接使用二维数组储存每个点的高度</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f</span><span class="params">(a, b)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> (<span class="number">1</span> - b ** <span class="number">5</span> + a ** <span class="number">5</span>) * np.exp(-a ** <span class="number">2</span> - b ** <span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 绘制等高线图，8 个数据间隔，颜色为黑色</span></span><br><span class="line">C = plt.contour(m, n, f(m, n), <span class="number">8</span>, colors=<span class="string">'k'</span>)</span><br><span class="line"><span class="comment"># 添加标记，标记处不显示轮廓线，颜色为黑红绿蓝四种，保留两位小数</span></span><br><span class="line">plt.clabel(C, inline=<span class="keyword">True</span>, colors=[<span class="string">'k'</span>, <span class="string">'r'</span>, <span class="string">'g'</span>, <span class="string">'b'</span>], fmt=<span class="string">'%1.2f'</span>)</span><br><span class="line">plt.title(<span class="string">'等高线图添加标记示例'</span>)</span><br><span class="line">plt.xlabel(<span class="string">'x axis label'</span>)</span><br><span class="line">plt.ylabel(<span class="string">'y axis label'</span>)</span><br><span class="line"></span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/TRHX/ImageHosting/ITRHX-PIC/A75/05.png" alt="05"></p><p><img src="https://img-blog.csdnimg.cn/20200512112427932.png" alt="分割线"></p><h2 id="【9x00】轮廓线颜色和样式"><a href="#【9x00】轮廓线颜色和样式" class="headerlink" title="【9x00】轮廓线颜色和样式"></a><font color="#FF0000">【9x00】轮廓线颜色和样式</font></h2><p><code>matplotlib.pyplot.contour()</code> 方法中，<code>colors</code> 参数即可为等高线轮廓设置颜色，可以是单色，也可以是一个颜色列表，<code>linestyles</code> 参数可以设置轮廓线样式，注意，如果线条颜色为单色，则负等高线（高度值为负）默认为虚线。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"></span><br><span class="line">plt.rcParams[<span class="string">'font.sans-serif'</span>] = [<span class="string">'Microsoft YaHei'</span>]</span><br><span class="line"></span><br><span class="line">x = np.arange(<span class="number">-2.0</span>, <span class="number">2.0</span>, <span class="number">0.01</span>)</span><br><span class="line">y = np.arange(<span class="number">-2.0</span>, <span class="number">2.0</span>, <span class="number">0.01</span>)</span><br><span class="line">m, n = np.meshgrid(x, y)        <span class="comment"># 生成网格点坐标矩阵</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 指定一个函数用于计算每个点的高度，也可以直接使用二维数组储存每个点的高度</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f</span><span class="params">(a, b)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> (<span class="number">1</span> - b ** <span class="number">5</span> + a ** <span class="number">5</span>) * np.exp(-a ** <span class="number">2</span> - b ** <span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">colors = [<span class="string">'k'</span>, <span class="string">'r'</span>, <span class="string">'g'</span>, <span class="string">'b'</span>]</span><br><span class="line"><span class="comment"># 绘制等高线图，8 个数据间隔，颜色为黑色，线条样式为 --</span></span><br><span class="line">C = plt.contour(m, n, f(m, n), <span class="number">8</span>, colors=colors, linestyles=<span class="string">'--'</span>)</span><br><span class="line"><span class="comment"># 添加标记，标记处不显示轮廓线，颜色为黑红绿蓝四种，保留两位小数</span></span><br><span class="line">plt.clabel(C, inline=<span class="keyword">True</span>, colors=colors, fmt=<span class="string">'%1.2f'</span>)</span><br><span class="line">plt.title(<span class="string">'等高线图设置颜色/样式示例'</span>)</span><br><span class="line">plt.xlabel(<span class="string">'x axis label'</span>)</span><br><span class="line">plt.ylabel(<span class="string">'y axis label'</span>)</span><br><span class="line"></span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/TRHX/ImageHosting/ITRHX-PIC/A75/06.png" alt="06"></p><p>如果想启用渐变色，则可以设置 <code>cmap</code>，取值参见<font color="#FF0000"><strong>【6x00】Colormap 取值</strong></font>，<code>colorbar()</code> 方法可以显示颜色对照条。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"></span><br><span class="line">plt.rcParams[<span class="string">'font.sans-serif'</span>] = [<span class="string">'Microsoft YaHei'</span>]</span><br><span class="line"></span><br><span class="line">x = np.arange(<span class="number">-2.0</span>, <span class="number">2.0</span>, <span class="number">0.01</span>)</span><br><span class="line">y = np.arange(<span class="number">-2.0</span>, <span class="number">2.0</span>, <span class="number">0.01</span>)</span><br><span class="line">m, n = np.meshgrid(x, y)        <span class="comment"># 生成网格点坐标矩阵</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 指定一个函数用于计算每个点的高度，也可以直接使用二维数组储存每个点的高度</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f</span><span class="params">(a, b)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> (<span class="number">1</span> - b ** <span class="number">5</span> + a ** <span class="number">5</span>) * np.exp(-a ** <span class="number">2</span> - b ** <span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 绘制等高线图，8 个数据间隔，颜色为 plasma</span></span><br><span class="line">C = plt.contour(m, n, f(m, n), <span class="number">8</span>, cmap=<span class="string">'plasma'</span>)</span><br><span class="line"><span class="comment"># 添加标记，标记处不显示轮廓线，颜色为黑色，保留两位小数</span></span><br><span class="line">plt.clabel(C, inline=<span class="keyword">True</span>, colors=<span class="string">'k'</span>, fmt=<span class="string">'%1.2f'</span>)</span><br><span class="line"><span class="comment"># 显示颜色条</span></span><br><span class="line">plt.colorbar()</span><br><span class="line">plt.title(<span class="string">'等高线图设置渐变色示例'</span>)</span><br><span class="line">plt.xlabel(<span class="string">'x axis label'</span>)</span><br><span class="line">plt.ylabel(<span class="string">'y axis label'</span>)</span><br><span class="line"></span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/TRHX/ImageHosting/ITRHX-PIC/A75/07.png" alt="07"></p><p><img src="https://img-blog.csdnimg.cn/20200512112427932.png" alt="分割线"></p><h2 id="【10x00】颜色填充"><a href="#【10x00】颜色填充" class="headerlink" title="【10x00】颜色填充"></a><font color="#FF0000">【10x00】颜色填充</font></h2><p><code>matplotlib.pyplot.contourf()</code> 方法用于对等高线之间的地方进行颜色填充。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"></span><br><span class="line">plt.rcParams[<span class="string">'font.sans-serif'</span>] = [<span class="string">'Microsoft YaHei'</span>]</span><br><span class="line"></span><br><span class="line">x = np.arange(<span class="number">-2.0</span>, <span class="number">2.0</span>, <span class="number">0.01</span>)</span><br><span class="line">y = np.arange(<span class="number">-2.0</span>, <span class="number">2.0</span>, <span class="number">0.01</span>)</span><br><span class="line">m, n = np.meshgrid(x, y)        <span class="comment"># 生成网格点坐标矩阵</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 指定一个函数用于计算每个点的高度，也可以直接使用二维数组储存每个点的高度</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f</span><span class="params">(a, b)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> (<span class="number">1</span> - b ** <span class="number">5</span> + a ** <span class="number">5</span>) * np.exp(-a ** <span class="number">2</span> - b ** <span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 绘制等高线图，8 个数据间隔，颜色为 plasma</span></span><br><span class="line">plt.contourf(m, n, f(m, n), <span class="number">8</span>, cmap=<span class="string">'plasma'</span>)</span><br><span class="line">C = plt.contour(m, n, f(m, n), <span class="number">8</span>, cmap=<span class="string">'plasma'</span>)</span><br><span class="line"><span class="comment"># 添加标记，标记处不显示轮廓线，颜色为黑色，保留两位小数</span></span><br><span class="line">plt.clabel(C, inline=<span class="keyword">True</span>, colors=<span class="string">'k'</span>, fmt=<span class="string">'%1.2f'</span>)</span><br><span class="line"><span class="comment"># 显示颜色条</span></span><br><span class="line">plt.colorbar()</span><br><span class="line">plt.title(<span class="string">'等高线图颜色填充示例'</span>)</span><br><span class="line">plt.xlabel(<span class="string">'x axis label'</span>)</span><br><span class="line">plt.ylabel(<span class="string">'y axis label'</span>)</span><br><span class="line"></span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/TRHX/ImageHosting/ITRHX-PIC/A75/08.png" alt="08"></p><hr><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">这里是一段防爬虫文本，请读者忽略。</span></span><br><span class="line"><span class="string">本文原创首发于</span> <span class="string">CSDN，作者</span> <span class="string">TRHX。</span></span><br><span class="line"><span class="string">博客首页：https://itrhx.blog.csdn.net/</span></span><br><span class="line"><span class="string">本文链接：https://itrhx.blog.csdn.net/article/details/106066852</span></span><br><span class="line"><span class="string">未经授权，禁止转载！恶意转载，后果自负！尊重原创，远离剽窃！</span></span><br></pre></td></tr></table></figure><hr>]]></content>
    
    <summary type="html">
    
      Python 数据分析三剑客之 Matplotlib（八）：等高线、等值线图的绘制。
    
    </summary>
    
      <category term="Python 数据分析" scheme="https://www.itrhx.com/categories/Python-%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/"/>
    
      <category term="Matplotlib" scheme="https://www.itrhx.com/categories/Python-%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/Matplotlib/"/>
    
    
      <category term="Matplotlib" scheme="https://www.itrhx.com/tags/Matplotlib/"/>
    
      <category term="等高线图" scheme="https://www.itrhx.com/tags/%E7%AD%89%E9%AB%98%E7%BA%BF%E5%9B%BE/"/>
    
      <category term="等值线图" scheme="https://www.itrhx.com/tags/%E7%AD%89%E5%80%BC%E7%BA%BF%E5%9B%BE/"/>
    
  </entry>
  
  <entry>
    <title>Python 数据分析三剑客之 Matplotlib（七）：饼状图的绘制</title>
    <link href="https://www.itrhx.com/2020/04/24/A74-Matplotlib-07/"/>
    <id>https://www.itrhx.com/2020/04/24/A74-Matplotlib-07/</id>
    <published>2020-04-23T17:14:19.796Z</published>
    <updated>2020-07-06T13:32:13.786Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>Matplotlib 系列文章：</p><ul><li><a href="https://www.itrhx.com/2020/04/10/A68-Matplotlib-01/">Python 数据分析三剑客之 Matplotlib（一）：初识 Matplotlib 与其 matplotibrc 配置文件</a></li><li><a href="https://www.itrhx.com/2020/04/12/A69-Matplotlib-02/">Python 数据分析三剑客之 Matplotlib（二）：文本描述 / 中文支持 / 画布 / 网格等基本图像属性</a></li><li><a href="https://www.itrhx.com/2020/04/14/A70-Matplotlib-03/">Python 数据分析三剑客之 Matplotlib（三）：图例 / LaTeX / 刻度 / 子图 / 补丁等基本图像属性</a></li><li><a href="https://www.itrhx.com/2020/04/16/A71-Matplotlib-04/">Python 数据分析三剑客之 Matplotlib（四）：线性图的绘制</a></li><li><a href="https://www.itrhx.com/2020/04/18/A72-Matplotlib-05/">Python 数据分析三剑客之 Matplotlib（五）：散点图的绘制</a></li><li><a href="https://www.itrhx.com/2020/04/21/A73-Matplotlib-06/">Python 数据分析三剑客之 Matplotlib（六）：直方图 / 柱状图 / 条形图的绘制</a></li><li><a href="https://www.itrhx.com/2020/04/24/A74-Matplotlib-07/">Python 数据分析三剑客之 Matplotlib（七）：饼状图的绘制</a></li><li><a href="https://www.itrhx.com/2020/04/30/A75-Matplotlib-08/">Python 数据分析三剑客之 Matplotlib（八）：等高线 / 等值线图的绘制</a></li><li><a href="https://www.itrhx.com/2020/06/03/A76-Matplotlib-09/">Python 数据分析三剑客之 Matplotlib（九）：极区图 / 极坐标图 / 雷达图的绘制</a></li><li><a href="https://www.itrhx.com/2020/06/08/A77-Matplotlib-10/">Python 数据分析三剑客之 Matplotlib（十）：3D 图的绘制</a></li><li><a href="https://www.itrhx.com/2020/06/09/A78-Matplotlib-11/">Python 数据分析三剑客之 Matplotlib（十一）：最热门最常用的 50 个图表</a>【译文】</li></ul><p>专栏：</p><p>【<a href="https://www.itrhx.com/categories/Python-%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/NumPy/">NumPy 专栏</a>】【<a href="https://www.itrhx.com/categories/Python-%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/Pandas/">Pandas 专栏</a>】【<a href="https://www.itrhx.com/categories/Python-%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/Matplotlib/">Matplotlib 专栏</a>】</p><p>推荐学习资料与网站：</p><p>【<a href="https://www.numpy.org.cn/" target="_blank" rel="noopener">NumPy 中文网</a>】【<a href="https://www.pypandas.cn/" target="_blank" rel="noopener">Pandas 中文网</a>】【<a href="https://www.matplotlib.org.cn/" target="_blank" rel="noopener">Matplotlib 中文网</a>】【<a href="https://github.com/TRHX/Python-quick-reference-table" target="_blank" rel="noopener">NumPy、Matplotlib、Pandas 速查表</a>】</p><hr><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">这里是一段防爬虫文本，请读者忽略。</span></span><br><span class="line"><span class="string">本文原创首发于</span> <span class="string">CSDN，作者</span> <span class="string">TRHX。</span></span><br><span class="line"><span class="string">博客首页：https://itrhx.blog.csdn.net/</span></span><br><span class="line"><span class="string">本文链接：https://itrhx.blog.csdn.net/article/details/106025845</span></span><br><span class="line"><span class="string">未经授权，禁止转载！恶意转载，后果自负！尊重原创，远离剽窃！</span></span><br></pre></td></tr></table></figure><hr><h2 id="【1x00】方法描述"><a href="#【1x00】方法描述" class="headerlink" title="【1x00】方法描述"></a><font color="#FF0000">【1x00】方法描述</font></h2><p><code>matplotlib.pyplot.pie()</code> 方法用于绘制饼状图。</p><p>基本语法：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">matplotlib.pyplot.pie(</span><br><span class="line">x[, explode=<span class="keyword">None</span>, labels=<span class="keyword">None</span>, colors=<span class="keyword">None</span>,</span><br><span class="line">autopct=<span class="keyword">None</span>, pctdistance=<span class="number">0.6</span>, shadow=<span class="keyword">False</span>,</span><br><span class="line">labeldistance=<span class="number">1.1</span>, startangle=<span class="keyword">None</span>, radius=<span class="keyword">None</span>,</span><br><span class="line">counterclock=<span class="keyword">True</span>, wedgeprops=<span class="keyword">None</span>, textprops=<span class="keyword">None</span>,</span><br><span class="line">center=(<span class="number">0</span>, <span class="number">0</span>), frame=<span class="keyword">False</span>, rotatelabels=<span class="keyword">False</span>, \*, data=<span class="keyword">None</span>]</span><br><span class="line">)</span><br></pre></td></tr></table></figure><table><thead><tr><th>参数</th><th>描述</th></tr></thead><tbody><tr><td>x</td><td>每个扇形块的大小，数组形式，大小单位是比例</td></tr><tr><td>explode</td><td>指定对应扇形块脱离饼图的半径大小，数组形式，其中元素个数应该是 len(x)</td></tr><tr><td>labels</td><td>每个扇形块上的文本标签，列表形式</td></tr><tr><td>labeldistance</td><td>每个扇形块上的文本标签与扇形中心的距离，float 类型，默认 1.1</td></tr><tr><td>colors</td><td>每个扇形块对应的颜色，数组形式</td></tr><tr><td>autopct</td><td>用于计算每个扇形块所占比例，字符串或者函数类型<br>例如：<code>autopct=&#39;%1.1f%%&#39;</code> 表示浮点数，保留一位小数，并添加百分比符号</td></tr><tr><td>pctdistance</td><td>每个扇形块的中心与 autopct 生成的文本之间的距离，float 类型，默认 0.6</td></tr><tr><td>shadow</td><td>是否为扇形添加阴影效果</td></tr><tr><td>startangle</td><td>将饼图按照逆时针旋转指定的角度，float 类型</td></tr><tr><td>radius</td><td>饼图的半径，如果是 None，则将被设置为 1，float 类型</td></tr><tr><td>counterclock</td><td>是否按照逆时针对扇形图进行排列，bool 类型，默认 True</td></tr><tr><td>wedgeprops</td><td>传递给绘制每个扇形图对象的参数，字典形式，参数值参见 <a href="https://matplotlib.org/api/_as_gen/matplotlib.patches.Wedge.html#matplotlib.patches.Wedge" target="_blank" rel="noopener">Wedge</a><br>例如：<code>wedgeprops = {&#39;linewidth&#39;: 3}</code> 设置扇形边框线宽度为 3</td></tr><tr><td>textprops</td><td>传递给文本对象的参数，字典形式<br>例如：<code>textprops={&#39;color&#39;: &#39;r&#39;, &#39;fontsize&#39;: 15}</code> 设置文字为红色，大小为15</td></tr><tr><td>center</td><td>饼图圆心在画布上是坐标，默认 (0, 0)</td></tr><tr><td>frame</td><td>是否显示 x, y 坐标轴外框，默认 False</td></tr><tr><td>rotatelabels</td><td>是否按照角度进行调整每块饼的 label 文本标签，默认 False</td></tr></tbody></table><h2 id="【2x00】简单示例"><a href="#【2x00】简单示例" class="headerlink" title="【2x00】简单示例"></a><font color="#FF0000">【2x00】简单示例</font></h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"></span><br><span class="line">plt.rcParams[<span class="string">'font.sans-serif'</span>] = [<span class="string">'Microsoft YaHei'</span>]</span><br><span class="line"></span><br><span class="line">x = [<span class="number">10</span>, <span class="number">30</span>, <span class="number">45</span>, <span class="number">15</span>]</span><br><span class="line">labels = [<span class="string">'Java'</span>, <span class="string">'Golang'</span>, <span class="string">'Python'</span>, <span class="string">'C++'</span>]</span><br><span class="line">colors = [<span class="string">'red'</span>, <span class="string">'yellow'</span>, <span class="string">'blue'</span>, <span class="string">'green'</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 指定4个扇区所占比例以及扇区的颜色，扇区文本标签距离扇区中心1.1</span></span><br><span class="line">plt.pie(x, labels=labels, colors=colors, labeldistance=<span class="number">1.1</span>)</span><br><span class="line">plt.title(<span class="string">'饼状图简单示例'</span>)</span><br><span class="line"></span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/TRHX/ImageHosting/ITRHX-PIC/A74/01.png" alt="01"></p><h2 id="【3x00】按角度调整扇形标签"><a href="#【3x00】按角度调整扇形标签" class="headerlink" title="【3x00】按角度调整扇形标签"></a><font color="#FF0000">【3x00】按角度调整扇形标签</font></h2><p><code>rotatelabels</code> 属性可以设置是否按照角度调整每块饼的 label（标签）显示方式。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"></span><br><span class="line">plt.rcParams[<span class="string">'font.sans-serif'</span>] = [<span class="string">'Microsoft YaHei'</span>]</span><br><span class="line"></span><br><span class="line">x = [<span class="number">10</span>, <span class="number">30</span>, <span class="number">45</span>, <span class="number">15</span>]</span><br><span class="line">labels = [<span class="string">'Java'</span>, <span class="string">'Go'</span>, <span class="string">'Python'</span>, <span class="string">'C++'</span>]</span><br><span class="line">colors = [<span class="string">'red'</span>, <span class="string">'yellow'</span>, <span class="string">'blue'</span>, <span class="string">'green'</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 指定4个扇区所占比例以及扇区的颜色，扇区文本标签距离扇区中心1.1，按角度调整 labels</span></span><br><span class="line">plt.pie(x, labels=labels, colors=colors, labeldistance=<span class="number">1.1</span>, rotatelabels=<span class="keyword">True</span>)</span><br><span class="line">plt.title(<span class="string">'饼状图按角度调整 labels 示例'</span>)</span><br><span class="line"></span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/TRHX/ImageHosting/ITRHX-PIC/A74/02.png" alt="02"></p><h2 id="【4x00】显示图例"><a href="#【4x00】显示图例" class="headerlink" title="【4x00】显示图例"></a><font color="#FF0000">【4x00】显示图例</font></h2><p>与前面文章中绘制线性图、散点图、条形图一样，调用 <code>matplotlib.pyplot.legend()</code> 方法可绘制图例，该方法的参数解释参见前文<a href="https://itrhx.blog.csdn.net/article/details/105828143" target="_blank" rel="noopener">《Python 数据分析三剑客之 Matplotlib（三）：图例 / LaTeX / 刻度 / 子图 / 补丁等基本图像属性》</a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"></span><br><span class="line">plt.rcParams[<span class="string">'font.sans-serif'</span>] = [<span class="string">'Microsoft YaHei'</span>]</span><br><span class="line"></span><br><span class="line">x = [<span class="number">10</span>, <span class="number">30</span>, <span class="number">45</span>, <span class="number">15</span>]</span><br><span class="line">labels = [<span class="string">'Java'</span>, <span class="string">'Go'</span>, <span class="string">'Python'</span>, <span class="string">'C++'</span>]</span><br><span class="line">colors = [<span class="string">'red'</span>, <span class="string">'yellow'</span>, <span class="string">'blue'</span>, <span class="string">'green'</span>]</span><br><span class="line"></span><br><span class="line">plt.pie(x, labels=labels, colors=colors, labeldistance=<span class="number">1.1</span>)</span><br><span class="line">plt.title(<span class="string">'饼状图显示图例示例'</span>)</span><br><span class="line">plt.legend(bbox_to_anchor=(<span class="number">1</span>, <span class="number">1</span>))</span><br><span class="line"></span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/TRHX/ImageHosting/ITRHX-PIC/A74/03.png" alt="03"></p><hr><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">这里是一段防爬虫文本，请读者忽略。</span></span><br><span class="line"><span class="string">本文原创首发于</span> <span class="string">CSDN，作者</span> <span class="string">TRHX。</span></span><br><span class="line"><span class="string">博客首页：https://itrhx.blog.csdn.net/</span></span><br><span class="line"><span class="string">本文链接：https://itrhx.blog.csdn.net/article/details/106025845</span></span><br><span class="line"><span class="string">未经授权，禁止转载！恶意转载，后果自负！尊重原创，远离剽窃！</span></span><br></pre></td></tr></table></figure><hr><h2 id="【5x00】突出显示扇形块"><a href="#【5x00】突出显示扇形块" class="headerlink" title="【5x00】突出显示扇形块"></a><font color="#FF0000">【5x00】突出显示扇形块</font></h2><p><code>explode</code> 参数可以实现突出显示某一块扇区，接收数组形式的参数，这个数组中的元素个数应该是 len(x)，即和扇区块的数量相同。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"></span><br><span class="line">plt.rcParams[<span class="string">'font.sans-serif'</span>] = [<span class="string">'Microsoft YaHei'</span>]</span><br><span class="line"></span><br><span class="line">x = [<span class="number">10</span>, <span class="number">30</span>, <span class="number">45</span>, <span class="number">15</span>]</span><br><span class="line">labels = [<span class="string">'Java'</span>, <span class="string">'Golang'</span>, <span class="string">'Python'</span>, <span class="string">'C++'</span>]</span><br><span class="line">colors = [<span class="string">'red'</span>, <span class="string">'yellow'</span>, <span class="string">'blue'</span>, <span class="string">'green'</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 指定第一个扇区块脱离饼图的半径大小为0.3，其它扇区不脱离</span></span><br><span class="line">plt.pie(x, labels=labels, colors=colors, labeldistance=<span class="number">1.1</span>, explode=[<span class="number">0.3</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>])</span><br><span class="line">plt.title(<span class="string">'饼状图突出显示扇形块示例'</span>)</span><br><span class="line">plt.legend(bbox_to_anchor=(<span class="number">1</span>, <span class="number">1</span>))</span><br><span class="line"></span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/TRHX/ImageHosting/ITRHX-PIC/A74/04.png" alt="04"></p><h2 id="【6x00】显示各扇区所占百分比"><a href="#【6x00】显示各扇区所占百分比" class="headerlink" title="【6x00】显示各扇区所占百分比"></a><font color="#FF0000">【6x00】显示各扇区所占百分比</font></h2><p><code>autopct</code> 参数可用于计算每个扇形块所占比例，接收字符串或者函数类型，例如：<code>autopct=&#39;%1.1f%%&#39;</code> 表示浮点数，保留一位小数，并添加百分比符号。<code>pctdistance</code> 参数用于调整每个扇形块的中心与 <code>autopct</code> 生成的文本之间的距离，float 类型，默认 0.6。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"></span><br><span class="line">plt.rcParams[<span class="string">'font.sans-serif'</span>] = [<span class="string">'Microsoft YaHei'</span>]</span><br><span class="line"></span><br><span class="line">x = [<span class="number">10</span>, <span class="number">30</span>, <span class="number">45</span>, <span class="number">15</span>]</span><br><span class="line">labels = [<span class="string">'Java'</span>, <span class="string">'Golang'</span>, <span class="string">'Python'</span>, <span class="string">'C++'</span>]</span><br><span class="line">colors = [<span class="string">'red'</span>, <span class="string">'yellow'</span>, <span class="string">'blue'</span>, <span class="string">'green'</span>]</span><br><span class="line"></span><br><span class="line">plt.pie(</span><br><span class="line">    x,                        <span class="comment"># 每个扇形块所占比例</span></span><br><span class="line">    labels=labels,            <span class="comment"># 扇形块文本标签</span></span><br><span class="line">    colors=colors,            <span class="comment"># 扇形块颜色</span></span><br><span class="line">    labeldistance=<span class="number">1.1</span>,        <span class="comment"># 扇形块标签距离中心的距离</span></span><br><span class="line">    explode=[<span class="number">0.3</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>],   <span class="comment"># 第一个扇形块突出显示</span></span><br><span class="line">    autopct=<span class="string">'%1.1f%%'</span>,        <span class="comment"># 显示百分比，保留一位小数</span></span><br><span class="line">    pctdistance=<span class="number">0.5</span>           <span class="comment"># 百分比文本距离饼状图中心的距离</span></span><br><span class="line">)</span><br><span class="line">plt.title(<span class="string">'饼状图显示各扇区所占百分比示例'</span>)</span><br><span class="line">plt.legend(bbox_to_anchor=(<span class="number">1</span>, <span class="number">1</span>))  <span class="comment"># 显示图例</span></span><br><span class="line"></span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/TRHX/ImageHosting/ITRHX-PIC/A74/05.png" alt="05"></p><h2 id="【7x00】旋转饼状图"><a href="#【7x00】旋转饼状图" class="headerlink" title="【7x00】旋转饼状图"></a><font color="#FF0000">【7x00】旋转饼状图</font></h2><p><code>startangle</code> 参数可以选择饼状图，改变饼状图放置的角度。注意是按照逆时针旋转。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"></span><br><span class="line">plt.rcParams[<span class="string">'font.sans-serif'</span>] = [<span class="string">'Microsoft YaHei'</span>]</span><br><span class="line"></span><br><span class="line">x = [<span class="number">10</span>, <span class="number">30</span>, <span class="number">45</span>, <span class="number">15</span>]</span><br><span class="line">labels = [<span class="string">'Java'</span>, <span class="string">'Golang'</span>, <span class="string">'Python'</span>, <span class="string">'C++'</span>]</span><br><span class="line">colors = [<span class="string">'red'</span>, <span class="string">'yellow'</span>, <span class="string">'blue'</span>, <span class="string">'green'</span>]</span><br><span class="line"></span><br><span class="line">plt.pie(</span><br><span class="line">    x,                        <span class="comment"># 每个扇形块所占比例</span></span><br><span class="line">    labels=labels,            <span class="comment"># 扇形块文本标签</span></span><br><span class="line">    colors=colors,            <span class="comment"># 扇形块颜色</span></span><br><span class="line">    labeldistance=<span class="number">1.1</span>,        <span class="comment"># 扇形块标签距离中心的距离</span></span><br><span class="line">    explode=[<span class="number">0.3</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>],   <span class="comment"># 第一个扇形块突出显示</span></span><br><span class="line">    autopct=<span class="string">'%1.1f%%'</span>,        <span class="comment"># 显示百分比，保留一位小数</span></span><br><span class="line">    pctdistance=<span class="number">0.5</span>,          <span class="comment"># 百分比文本距离饼状图中心的距离</span></span><br><span class="line">    startangle=<span class="number">-90</span>            <span class="comment"># 逆时针旋转-90°，即顺时针旋转90°</span></span><br><span class="line">)</span><br><span class="line">plt.title(<span class="string">'饼状图旋转角度示例'</span>)</span><br><span class="line">plt.legend(bbox_to_anchor=(<span class="number">1</span>, <span class="number">1</span>))  <span class="comment"># 显示图例</span></span><br><span class="line"></span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/TRHX/ImageHosting/ITRHX-PIC/A74/06.png" alt="06"></p><h2 id="【8x00】自定义每个扇形和文字属性"><a href="#【8x00】自定义每个扇形和文字属性" class="headerlink" title="【8x00】自定义每个扇形和文字属性"></a><font color="#FF0000">【8x00】自定义每个扇形和文字属性</font></h2><p><code>wedgeprops</code> 参数以字典形式为每个扇形添加自定义属性，例如：<code>wedgeprops = {&#39;linewidth&#39;: 3}</code> 设置扇形边框线宽度为 3，更多其他参数值参见 <a href="https://matplotlib.org/api/_as_gen/matplotlib.patches.Wedge.html#matplotlib.patches.Wedge" target="_blank" rel="noopener">Wedge</a>；</p><p><code>textprops</code> 参数同样以字典形式为文本对象添加自定义属性，例如：<code>textprops={&#39;color&#39;: &#39;r&#39;, &#39;fontsize&#39;: 15}</code> 设置文字为红色，大小为15，更多其他参数值参见 <a href="https://matplotlib.org/api/text_api.html?highlight=text#matplotlib.text.Text" target="_blank" rel="noopener">Text</a>。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"></span><br><span class="line">plt.rcParams[<span class="string">'font.sans-serif'</span>] = [<span class="string">'Microsoft YaHei'</span>]</span><br><span class="line"></span><br><span class="line">x = [<span class="number">10</span>, <span class="number">30</span>, <span class="number">45</span>, <span class="number">15</span>]</span><br><span class="line">labels = [<span class="string">'Java'</span>, <span class="string">'Golang'</span>, <span class="string">'Python'</span>, <span class="string">'C++'</span>]</span><br><span class="line">colors = [<span class="string">'red'</span>, <span class="string">'yellow'</span>, <span class="string">'blue'</span>, <span class="string">'green'</span>]</span><br><span class="line"></span><br><span class="line">plt.pie(</span><br><span class="line">    x,                           <span class="comment"># 每个扇形块所占比例</span></span><br><span class="line">    labels=labels,               <span class="comment"># 扇形块文本标签</span></span><br><span class="line">    colors=colors,               <span class="comment"># 扇形块颜色</span></span><br><span class="line">    labeldistance=<span class="number">1.1</span>,           <span class="comment"># 扇形块标签距离中心的距离</span></span><br><span class="line">    explode=[<span class="number">0.3</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>],      <span class="comment"># 第一个扇形块突出显示</span></span><br><span class="line">    autopct=<span class="string">'%1.1f%%'</span>,           <span class="comment"># 显示百分比，保留一位小数</span></span><br><span class="line">    pctdistance=<span class="number">0.6</span>,             <span class="comment"># 百分比文本距离饼状图中心的距离</span></span><br><span class="line">    shadow=<span class="keyword">True</span>,                 <span class="comment"># 显示阴影效果</span></span><br><span class="line">    wedgeprops=&#123;                 <span class="comment"># 为每个扇形添加属性</span></span><br><span class="line">        <span class="string">'width'</span>: <span class="number">0.7</span>,            <span class="comment"># 扇形宽度0.7</span></span><br><span class="line">        <span class="string">'edgecolor'</span>: <span class="string">'#98F5FF'</span>,  <span class="comment"># 扇形边缘线颜色</span></span><br><span class="line">        <span class="string">'linewidth'</span>: <span class="number">3</span>           <span class="comment"># 扇形边缘线宽度</span></span><br><span class="line">    &#125;,</span><br><span class="line">    textprops=&#123;                  <span class="comment"># 为文字添加属性</span></span><br><span class="line">        <span class="string">'fontsize'</span>: <span class="number">13</span>,          <span class="comment"># 文字大小</span></span><br><span class="line">        <span class="string">'fontweight'</span>: <span class="string">'bold'</span>,    <span class="comment"># 文字粗细</span></span><br><span class="line">        <span class="string">'color'</span>: <span class="string">'k'</span>             <span class="comment"># 文字颜色，黑色</span></span><br><span class="line">    &#125;</span><br><span class="line">)</span><br><span class="line">plt.title(<span class="string">'饼状图自定义每个扇形和文字属性示例'</span>, fontweight=<span class="string">'bold'</span>)</span><br><span class="line">plt.legend(bbox_to_anchor=(<span class="number">1</span>, <span class="number">1</span>), borderpad=<span class="number">0.6</span>)  <span class="comment"># 显示图例</span></span><br><span class="line"></span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/TRHX/ImageHosting/ITRHX-PIC/A74/07.png" alt="07"></p><hr><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">这里是一段防爬虫文本，请读者忽略。</span></span><br><span class="line"><span class="string">本文原创首发于</span> <span class="string">CSDN，作者</span> <span class="string">TRHX。</span></span><br><span class="line"><span class="string">博客首页：https://itrhx.blog.csdn.net/</span></span><br><span class="line"><span class="string">本文链接：https://itrhx.blog.csdn.net/article/details/106025845</span></span><br><span class="line"><span class="string">未经授权，禁止转载！恶意转载，后果自负！尊重原创，远离剽窃！</span></span><br></pre></td></tr></table></figure><hr>]]></content>
    
    <summary type="html">
    
      Python 数据分析三剑客之 Matplotlib（七）：饼状图的绘制。
    
    </summary>
    
      <category term="Python 数据分析" scheme="https://www.itrhx.com/categories/Python-%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/"/>
    
      <category term="Matplotlib" scheme="https://www.itrhx.com/categories/Python-%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/Matplotlib/"/>
    
    
      <category term="Matplotlib" scheme="https://www.itrhx.com/tags/Matplotlib/"/>
    
      <category term="饼状图" scheme="https://www.itrhx.com/tags/%E9%A5%BC%E7%8A%B6%E5%9B%BE/"/>
    
  </entry>
  
  <entry>
    <title>Python 数据分析三剑客之 Matplotlib（六）：直方图/柱状图/条形图的绘制</title>
    <link href="https://www.itrhx.com/2020/04/21/A73-Matplotlib-06/"/>
    <id>https://www.itrhx.com/2020/04/21/A73-Matplotlib-06/</id>
    <published>2020-04-21T15:29:46.364Z</published>
    <updated>2020-07-06T13:32:06.445Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>Matplotlib 系列文章：</p><ul><li><a href="https://www.itrhx.com/2020/04/10/A68-Matplotlib-01/">Python 数据分析三剑客之 Matplotlib（一）：初识 Matplotlib 与其 matplotibrc 配置文件</a></li><li><a href="https://www.itrhx.com/2020/04/12/A69-Matplotlib-02/">Python 数据分析三剑客之 Matplotlib（二）：文本描述 / 中文支持 / 画布 / 网格等基本图像属性</a></li><li><a href="https://www.itrhx.com/2020/04/14/A70-Matplotlib-03/">Python 数据分析三剑客之 Matplotlib（三）：图例 / LaTeX / 刻度 / 子图 / 补丁等基本图像属性</a></li><li><a href="https://www.itrhx.com/2020/04/16/A71-Matplotlib-04/">Python 数据分析三剑客之 Matplotlib（四）：线性图的绘制</a></li><li><a href="https://www.itrhx.com/2020/04/18/A72-Matplotlib-05/">Python 数据分析三剑客之 Matplotlib（五）：散点图的绘制</a></li><li><a href="https://www.itrhx.com/2020/04/21/A73-Matplotlib-06/">Python 数据分析三剑客之 Matplotlib（六）：直方图 / 柱状图 / 条形图的绘制</a></li><li><a href="https://www.itrhx.com/2020/04/24/A74-Matplotlib-07/">Python 数据分析三剑客之 Matplotlib（七）：饼状图的绘制</a></li><li><a href="https://www.itrhx.com/2020/04/30/A75-Matplotlib-08/">Python 数据分析三剑客之 Matplotlib（八）：等高线 / 等值线图的绘制</a></li><li><a href="https://www.itrhx.com/2020/06/03/A76-Matplotlib-09/">Python 数据分析三剑客之 Matplotlib（九）：极区图 / 极坐标图 / 雷达图的绘制</a></li><li><a href="https://www.itrhx.com/2020/06/08/A77-Matplotlib-10/">Python 数据分析三剑客之 Matplotlib（十）：3D 图的绘制</a></li><li><a href="https://www.itrhx.com/2020/06/09/A78-Matplotlib-11/">Python 数据分析三剑客之 Matplotlib（十一）：最热门最常用的 50 个图表</a>【译文】</li></ul><p>专栏：</p><p>【<a href="https://www.itrhx.com/categories/Python-%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/NumPy/">NumPy 专栏</a>】【<a href="https://www.itrhx.com/categories/Python-%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/Pandas/">Pandas 专栏</a>】【<a href="https://www.itrhx.com/categories/Python-%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/Matplotlib/">Matplotlib 专栏</a>】</p><p>推荐学习资料与网站：</p><p>【<a href="https://www.numpy.org.cn/" target="_blank" rel="noopener">NumPy 中文网</a>】【<a href="https://www.pypandas.cn/" target="_blank" rel="noopener">Pandas 中文网</a>】【<a href="https://www.matplotlib.org.cn/" target="_blank" rel="noopener">Matplotlib 中文网</a>】【<a href="https://github.com/TRHX/Python-quick-reference-table" target="_blank" rel="noopener">NumPy、Matplotlib、Pandas 速查表</a>】</p><hr><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">这里是一段防爬虫文本，请读者忽略。</span></span><br><span class="line"><span class="string">本文原创首发于</span> <span class="string">CSDN，作者</span> <span class="string">TRHX。</span></span><br><span class="line"><span class="string">博客首页：https://itrhx.blog.csdn.net/</span></span><br><span class="line"><span class="string">本文链接：https://itrhx.blog.csdn.net/article/details/105952856</span></span><br><span class="line"><span class="string">未经授权，禁止转载！恶意转载，后果自负！尊重原创，远离剽窃！</span></span><br></pre></td></tr></table></figure><hr><h2 id="【1x00】直方图-柱状图-条形图的区别"><a href="#【1x00】直方图-柱状图-条形图的区别" class="headerlink" title="【1x00】直方图 / 柱状图 / 条形图的区别"></a><font color="#FF0000">【1x00】直方图 / 柱状图 / 条形图的区别</font></h2><ul><li><p>直方图：直方图（Histogram）又称质量分布图，是一种统计报告图，由一系列高度不等的纵向条纹或线段表示数据分布的情况。<font color="##0000FF"><strong>一般用于描述连续型数据的分布关系</strong></font>，用横轴表示数据类型，纵轴表示分布情况。直方图是用面积表示各组频数的多少，矩形的高度表示每一组的频数或频率，宽度则表示各组的组距，因此其<font color="##32CD32"><strong>高度与宽度均有意义</strong></font>。其次，由于分组数据具有连续性，<font color="##32CD32"><strong>直方图的各矩形通常是连续排列。</strong></font></p></li><li><p>柱状图：柱状图（bar chart）又称条图、长条图、柱状统计图、条状图、棒形图，是一种以长方形的长度为变量的统计图表。<font color="##0000FF"><strong>一般用于描述离散型分类数据的对比</strong></font>，长条图用来比较两个或以上的价值（不同时间或者不同条件），只有一个变量，通常利用于较小的数据集分析。柱状图亦可横向排列，或用多维方式表达。<font color="##32CD32"><strong>柱状图各矩形的宽度固定，矩形之间分开排列，会有间距。</strong></font></p></li><li><p>条形图：通常情况下<font color="#FF0000"><strong>条形图 = 柱状图</strong></font>，也可以<font color="#FF0000"><strong>将横向排列的柱状图称为条形图</strong></font>。在本文中会将条形图视为后者。</p></li></ul><p><img src="https://img-blog.csdnimg.cn/20200509010455973.png" alt="分割线"></p><h2 id="【2x00】直方图的绘制"><a href="#【2x00】直方图的绘制" class="headerlink" title="【2x00】直方图的绘制"></a><font color="#FF0000">【2x00】直方图的绘制</font></h2><h3 id="【2x01】函数介绍-matplotlib-pyplot-hist"><a href="#【2x01】函数介绍-matplotlib-pyplot-hist" class="headerlink" title="【2x01】函数介绍 matplotlib.pyplot.hist()"></a><font color="##4876FF">【2x01】函数介绍 matplotlib.pyplot.hist()</font></h3><p><code>matplotlib.pyplot.hist()</code> 函数用于绘制直方图。</p><p>基本语法：<code>matplotlib.pyplot.hist(x[, bins=None, range=None, density=False, bottom=None, histtype=&#39;bar&#39;, align=&#39;mid&#39;, orientation=&#39;vertical&#39;, rwidth=None, log=False, color=None, label=None, stacked=False, \*\*kwargs])</code></p><p>基本参数：</p><table><thead><tr><th>参数</th><th>描述</th></tr></thead><tbody><tr><td>x</td><td>数据集，数组或数组序列</td></tr><tr><td>bins</td><td>统计的分布区间、条形数，可以是整数、序列或字符串，默认 <code>rcParams[&quot;hist.bins&quot;] =10</code><br>如果 bins 是整数，则定义的是等宽的矩形的个数<br>如果 bins 是序列，则定义的是每个矩形的区间，如：<code>bins = [1, 2, 3, 4]</code>，则矩形分布区间为 <code>[1,2)</code>、<code>[2,3)</code>、<code>[3,4]</code><br>如果 bins 是字符串，则它应该是 <a href="https://docs.scipy.org/doc/numpy/reference/generated/numpy.histogram_bin_edges.html#numpy.histogram_bin_edges" target="_blank" rel="noopener">numpy.histogram_bin_edges</a> 所支持的策略之一</td></tr><tr><td>range</td><td>矩形分布的区间，在没有指定 bins 生效，元组类型</td></tr><tr><td>density</td><td>是否<strong>显示频率统计结果</strong>，<code>频率统计结果=区间数目/(总数*区间宽度)</code></td></tr><tr><td>bottom</td><td>y 轴的起始位置，默认为 0</td></tr><tr><td>histtype</td><td>矩形的样式，有四种类型可选：<br><code>&#39;bar&#39;</code>：默认值，传统的条形直方图，如果给出多个数据，则条形图并排排列<br><code>&#39;barstacked&#39;</code>：当数据为 1 个时，和 bar 结果一样，当数据为多个时，则进行垂直堆叠<br><code>&#39;step&#39;</code>：未填充的线条形式；<code>&#39;stepfilled&#39;</code>：填充的线条形式，效果与 bar 差不多</td></tr><tr><td>align</td><td>矩形的中心位于 bins（x 轴） 的位置，<code>&#39;left&#39;</code>：左；<code>&#39;mid&#39;</code>：中；<code>&#39;right&#39;</code>：右</td></tr><tr><td>orientation</td><td>矩形的方向，<code>vertical</code>：垂直；<code>horizontal</code>：水平</td></tr><tr><td>rwidth</td><td>矩形的相对宽度，如果未指定，则自动计算宽度</td></tr><tr><td>log</td><td>y 坐标轴是否以指数刻度显示</td></tr><tr><td>color</td><td>矩形的颜色，默认蓝色，与 facecolor 作用相同，指定一个即可，如果两者都指定，则取 facecolor 的值</td></tr><tr><td>label</td><td>数据的标签，展示图例时使用</td></tr><tr><td>stacked</td><td>是否为堆积状图（当两个数据相似时，堆积在一起就会把第一个数据的显示相对缩小一点）</td></tr></tbody></table><p>其他参数：</p><table><thead><tr><th>参数</th><th>描述</th></tr></thead><tbody><tr><td>facecolor</td><td>标量或数组类型，每个矩形的颜色，与 color 作用相同，指定一个即可，如果两者都指定，则取 facecolor 的值</td></tr><tr><td>edgecolor</td><td>标量或数组类型，直方图边缘线的颜色</td></tr><tr><td>linewidth</td><td>标量或数组类型，直方图边缘线的宽度，如果为 0，则不绘制边</td></tr><tr><td>alpha</td><td>float 类型，矩形透明度</td></tr><tr><td>label</td><td>图例中显示的标签</td></tr><tr><td>linestyle / ls</td><td>线条样式，此处指矩形边缘线条样式<br><code>&#39;-&#39;</code> or <code>&#39;solid&#39;</code>, <code>&#39;--&#39;</code> or <code>&#39;dashed&#39;</code>, <code>&#39;-.&#39;</code> or <code>&#39;dashdot&#39;</code> or <code>&#39;:&#39;</code> or <code>&#39;dotted&#39;</code>, <code>&#39;none&#39;</code> or <code>&#39; &#39;</code> or <code>&#39;&#39;</code></td></tr><tr><td>linewidth / lw</td><td>线条宽度，此处指矩形边缘线的宽度，float 类型，默认 0.8</td></tr><tr><td>hatch</td><td>矩形的填充图案，可以是组合形式，如果有相同的图案，则会增加填充的密度<br>取值可以是：<code>&#39;/&#39;</code>, <code>&#39;\&#39;</code>, `’</td><td>‘<code>,</code>‘-‘<code>,</code>‘+’<code>,</code>‘x’<code>,</code>‘o’<code>,</code>‘O’<code>,</code>‘.’<code>,</code>‘*’`</td></tr></tbody></table><h3 id="【2x02】简单直方图示例"><a href="#【2x02】简单直方图示例" class="headerlink" title="【2x02】简单直方图示例"></a><font color="##4876FF">【2x02】简单直方图示例</font></h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"></span><br><span class="line">plt.rcParams[<span class="string">'font.sans-serif'</span>] = [<span class="string">'Microsoft YaHei'</span>]  <span class="comment"># 设置中文显示</span></span><br><span class="line"></span><br><span class="line">x = np.random.randint(<span class="number">0</span>, <span class="number">101</span>, <span class="number">100</span>)  <span class="comment"># 数据集</span></span><br><span class="line">bins = np.arange(<span class="number">0</span>, <span class="number">101</span>, <span class="number">10</span>)        <span class="comment"># 分布区间 [0,10)、[10,20)...[90,100]</span></span><br><span class="line"></span><br><span class="line">plt.hist(x, bins=bins, linewidth=<span class="number">0.5</span>, edgecolor=<span class="string">'k'</span>)  <span class="comment"># 边缘线宽0.5，颜色为黑色</span></span><br><span class="line">plt.xlim(<span class="number">0</span>, <span class="number">100</span>)                    <span class="comment"># x 轴刻度范围       </span></span><br><span class="line">plt.title(<span class="string">'简单直方图示例'</span>)         <span class="comment"># 标题</span></span><br><span class="line">plt.xlabel(<span class="string">'x axis label'</span>)         <span class="comment"># x 轴标签</span></span><br><span class="line">plt.ylabel(<span class="string">'y axis label'</span>)         <span class="comment"># y 轴标签</span></span><br><span class="line"></span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/TRHX/ImageHosting/ITRHX-PIC/A73/01.png" alt="01"></p><h3 id="【2x03】堆积的直方图"><a href="#【2x03】堆积的直方图" class="headerlink" title="【2x03】堆积的直方图"></a><font color="##4876FF">【2x03】堆积的直方图</font></h3><p>参数 <code>stacked</code> 决定了将两份数据进行堆积显示。注意，有可能两个数据相似（y 轴的值相似），但是堆积在一起的时候，会把第一个数据的显示相对缩小一点。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">plt.rcParams[<span class="string">'font.sans-serif'</span>] = [<span class="string">'Microsoft YaHei'</span>]</span><br><span class="line"></span><br><span class="line">hist1 = np.random.randint(<span class="number">0</span>, <span class="number">100</span>, <span class="number">100</span>)</span><br><span class="line">hist2 = np.random.randint(<span class="number">0</span>, <span class="number">100</span>, <span class="number">100</span>)</span><br><span class="line">x = [hist1, hist2]</span><br><span class="line">colors = [<span class="string">'orchid'</span>, <span class="string">'deepskyblue'</span>]</span><br><span class="line">labels = [<span class="string">'hist1'</span>, <span class="string">'hist2'</span>]</span><br><span class="line">bins = range(<span class="number">0</span>, <span class="number">101</span>, <span class="number">10</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 绘制两份数据的直方图，数据集等其他参数可以使用列表形式传递，也可以使用两次 hist 函数单独传递</span></span><br><span class="line">plt.hist(x, bins=bins, color=colors, stacked=<span class="keyword">True</span>, label=labels)</span><br><span class="line">plt.title(<span class="string">'堆积的直方图示例'</span>)</span><br><span class="line">plt.xlabel(<span class="string">'x axis label'</span>)</span><br><span class="line">plt.ylabel(<span class="string">'y axis label'</span>)</span><br><span class="line">plt.legend(loc=<span class="string">"upper left"</span>)</span><br><span class="line"></span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/TRHX/ImageHosting/ITRHX-PIC/A73/02.png" alt="02"></p><h3 id="【2x04】填充其他样式"><a href="#【2x04】填充其他样式" class="headerlink" title="【2x04】填充其他样式"></a><font color="##4876FF">【2x04】填充其他样式</font></h3><p><code>hatch</code> 参数可以让直方图的矩形填充其他样式，可选值有：<code>&#39;/&#39;</code>, <code>&#39;\&#39;</code>, <code>&#39;|&#39;</code>, <code>&#39;-&#39;</code>, <code>&#39;+&#39;</code>, <code>&#39;x&#39;</code>, <code>&#39;o&#39;</code>, <code>&#39;O&#39;</code>, <code>&#39;.&#39;</code>, <code>&#39;*&#39;</code>。可以是不同图案的组合形式，如果有相同的图案，则会增加填充的密度。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"></span><br><span class="line">plt.rcParams[<span class="string">'font.sans-serif'</span>] = [<span class="string">'Microsoft YaHei'</span>]  <span class="comment"># 设置中文显示</span></span><br><span class="line"></span><br><span class="line">x = np.random.randint(<span class="number">0</span>, <span class="number">101</span>, <span class="number">100</span>)  <span class="comment"># 数据集</span></span><br><span class="line">bins = np.arange(<span class="number">0</span>, <span class="number">101</span>, <span class="number">10</span>)        <span class="comment"># 分布区间 [0,10)、[10,20)...[90,100]</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 矩形颜色为白色，使用 / 填充，边缘线宽0.5，颜色为黑色</span></span><br><span class="line">plt.hist(x, bins=bins, color=<span class="string">'w'</span>, hatch=<span class="string">'///'</span>, linewidth=<span class="number">0.5</span>, edgecolor=<span class="string">'k'</span>)</span><br><span class="line">plt.xlim(<span class="number">0</span>, <span class="number">100</span>)                   <span class="comment"># x 轴刻度范围</span></span><br><span class="line">plt.title(<span class="string">'直方图图案填充示例'</span>)     <span class="comment"># 标题</span></span><br><span class="line">plt.xlabel(<span class="string">'x axis label'</span>)         <span class="comment"># x 轴标签</span></span><br><span class="line">plt.ylabel(<span class="string">'y axis label'</span>)         <span class="comment"># y 轴标签</span></span><br><span class="line"></span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/TRHX/ImageHosting/ITRHX-PIC/A73/03.png" alt="03"></p><p><img src="https://img-blog.csdnimg.cn/20200509010455973.png" alt="分割线"></p><h2 id="【3x00】柱状图的绘制"><a href="#【3x00】柱状图的绘制" class="headerlink" title="【3x00】柱状图的绘制"></a><font color="#FF0000">【3x00】柱状图的绘制</font></h2><h3 id="【3x01】函数介绍-matplotlib-pyplot-bar"><a href="#【3x01】函数介绍-matplotlib-pyplot-bar" class="headerlink" title="【3x01】函数介绍 matplotlib.pyplot.bar()"></a><font color="##4876FF">【3x01】函数介绍 matplotlib.pyplot.bar()</font></h3><p><code>matplotlib.pyplot.bar()</code> 函数用于绘制柱状图。</p><p>基本语法：<code>matplotlib.pyplot.bar(x, height[, width=0.8, bottom=None, align=&#39;center&#39;, \*\*kwargs])</code></p><p>基本参数：</p><table><thead><tr><th>参数</th><th>描述</th></tr></thead><tbody><tr><td>x</td><td>标量序列，每个矩形对应的 x 轴刻度</td></tr><tr><td>height</td><td>标量或标量序列，每个矩形对应的高度，即 y 轴刻度</td></tr><tr><td>width</td><td>标量或数组类型，每个矩形的宽度，默认为 0.8</td></tr><tr><td>bottom</td><td>标量或数组类型，y 轴的起始位置，默认为 0</td></tr><tr><td>align</td><td>矩形与 x 轴刻度对齐的位置，<code>&#39;center&#39;</code>：中；<code>&#39;edge&#39;</code>：左边缘</td></tr></tbody></table><p>其他参数：</p><table><thead><tr><th>参数</th><th>描述</th></tr></thead><tbody><tr><td>color</td><td>标量或数组类型，每个矩形的颜色，与 facecolor 作用相同，指定一个即可，如果两者都指定，则取 facecolor 的值</td></tr><tr><td>edgecolor</td><td>标量或数组类型，柱状图边缘线的颜色</td></tr><tr><td>linewidth</td><td>标量或数组类型，柱状图边缘线的宽度，如果为0，则不绘制边</td></tr><tr><td>tick_label</td><td>标量或数组类型，柱状图 x 轴的刻度标签，默认使用数字标签</td></tr><tr><td>xerr / yerr</td><td>标量，指定对应标准差（添加误差线时会用到）</td></tr><tr><td>ecolor</td><td>标量或数组类型，误差线的线条颜色，默认值为 black</td></tr><tr><td>capsize</td><td>标量，误差线两头横线的宽度，默认为 <code>rcParams[&quot;errorbar.capsize&quot;] = 0.0</code></td></tr><tr><td>error_kw</td><td>字典类型，可以此字典中定义 ecolor 和 capsize，比单独指定的优先级要高</td></tr><tr><td>log</td><td>bool 值，y 坐标轴是否以指数刻度显示</td></tr><tr><td>alpha</td><td>float 类型，矩形透明度</td></tr><tr><td>label</td><td>图例中显示的标签</td></tr><tr><td>linestyle / ls</td><td>线条样式，此处指矩形边缘线条样式<br><code>&#39;-&#39;</code> or <code>&#39;solid&#39;</code>, <code>&#39;--&#39;</code> or <code>&#39;dashed&#39;</code>, <code>&#39;-.&#39;</code> or <code>&#39;dashdot&#39;</code> or <code>&#39;:&#39;</code> or <code>&#39;dotted&#39;</code>, <code>&#39;none&#39;</code> or <code>&#39; &#39;</code> or <code>&#39;&#39;</code></td></tr><tr><td>linewidth / lw</td><td>线条宽度，此处指矩形边缘线的宽度，float 类型，默认 0.8</td></tr><tr><td>hatch</td><td>矩形的填充图案，可以是组合形式，如果有相同的图案，则会增加填充的密度<br>取值可以是：<code>&#39;/&#39;</code>, <code>&#39;\&#39;</code>, `’</td><td>‘<code>,</code>‘-‘<code>,</code>‘+’<code>,</code>‘x’<code>,</code>‘o’<code>,</code>‘O’<code>,</code>‘.’<code>,</code>‘*’`</td></tr></tbody></table><h3 id="【3x02】简单柱状图示例"><a href="#【3x02】简单柱状图示例" class="headerlink" title="【3x02】简单柱状图示例"></a><font color="##4876FF">【3x02】简单柱状图示例</font></h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"></span><br><span class="line">plt.rcParams[<span class="string">'font.sans-serif'</span>] = [<span class="string">'Microsoft YaHei'</span>]</span><br><span class="line"></span><br><span class="line">x = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]</span><br><span class="line">height = [<span class="number">5</span>, <span class="number">7</span>, <span class="number">4</span>, <span class="number">3</span>, <span class="number">1</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置 x 轴的标签，也可以用 plt.xticks 方法来设置</span></span><br><span class="line">tick_label = [<span class="string">'A'</span>, <span class="string">'B'</span>, <span class="string">'C'</span>, <span class="string">'D'</span>, <span class="string">'E'</span>]</span><br><span class="line"><span class="comment"># 设置颜色序列</span></span><br><span class="line">color = [<span class="string">'red'</span>, <span class="string">'yellow'</span>, <span class="string">'peru'</span>, <span class="string">'orchid'</span>, <span class="string">'deepskyblue'</span>]</span><br><span class="line"><span class="comment"># 绘制柱状图，边缘线宽度为1，颜色为黑色，样式为 --</span></span><br><span class="line">plt.bar(x, height, tick_label=tick_label, color=color, edgecolor=<span class="string">'k'</span>, linewidth=<span class="number">1</span>, linestyle=<span class="string">'--'</span>)</span><br><span class="line"></span><br><span class="line">plt.title(<span class="string">'简单柱状图示例'</span>)</span><br><span class="line">plt.xlabel(<span class="string">'x axis label'</span>)</span><br><span class="line">plt.ylabel(<span class="string">'y axis label'</span>)</span><br><span class="line"></span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/TRHX/ImageHosting/ITRHX-PIC/A73/04.png" alt="04"></p><h3 id="【3x03】添加与标准差的误差线"><a href="#【3x03】添加与标准差的误差线" class="headerlink" title="【3x03】添加与标准差的误差线"></a><font color="##4876FF">【3x03】添加与标准差的误差线</font></h3><p>首先定义一个列表，其中的元素是与每个值对应的标准差，<code>ecolor</code> 和 <code>capsize</code> 参数分别指定误差线的颜色和两头横线的宽度。这两个参数可以通过 <code>error_kw</code> 字典形式组合起来。以字典形式的组合优先级别要比单独指定高。另外，柱状图指定标准差时要用 <code>yerr</code>，条形图（横向排列的柱状图）指定标准差时要用 <code>xerr</code>。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"></span><br><span class="line">plt.rcParams[<span class="string">'font.sans-serif'</span>] = [<span class="string">'Microsoft YaHei'</span>]</span><br><span class="line"></span><br><span class="line">x = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]</span><br><span class="line">height = [<span class="number">5</span>, <span class="number">7</span>, <span class="number">4</span>, <span class="number">3</span>, <span class="number">2</span>]</span><br><span class="line">std = [<span class="number">0.5</span>, <span class="number">0.1</span>, <span class="number">1.2</span>, <span class="number">0.3</span>, <span class="number">1.0</span>]   <span class="comment"># 标准差</span></span><br><span class="line"></span><br><span class="line">tick_label = [<span class="string">'A'</span>, <span class="string">'B'</span>, <span class="string">'C'</span>, <span class="string">'D'</span>, <span class="string">'E'</span>]  <span class="comment"># 设置 x 轴的标签，也可以用 plt.xticks 方法来设置</span></span><br><span class="line">color = [<span class="string">'red'</span>, <span class="string">'yellow'</span>, <span class="string">'peru'</span>, <span class="string">'orchid'</span>, <span class="string">'deepskyblue'</span>]  <span class="comment"># 设置颜色序列</span></span><br><span class="line">plt.bar(</span><br><span class="line">    x,</span><br><span class="line">    height,</span><br><span class="line">    tick_label=tick_label,</span><br><span class="line">    color=color,</span><br><span class="line">    yerr=std,              <span class="comment"># 指定对应标准差</span></span><br><span class="line">    <span class="comment"># error_kw=&#123;</span></span><br><span class="line">    <span class="comment">#     'ecolor': 'k',   # 指定误差线的颜色</span></span><br><span class="line">    <span class="comment">#     'capsize': 6     # 指定误差线两头横线的宽度</span></span><br><span class="line">    <span class="comment"># &#125;,</span></span><br><span class="line">    ecolor=<span class="string">'k'</span>,</span><br><span class="line">    capsize=<span class="number">6</span>,</span><br><span class="line">    edgecolor=<span class="string">'k'</span>,         <span class="comment"># 指定边缘线颜色</span></span><br><span class="line">    linewidth=<span class="number">1</span>            <span class="comment"># 指定边缘线宽度</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">plt.title(<span class="string">'柱状图添加误差线示例'</span>)</span><br><span class="line">plt.xlabel(<span class="string">'x axis label'</span>)</span><br><span class="line">plt.ylabel(<span class="string">'y axis label'</span>)</span><br><span class="line"></span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/TRHX/ImageHosting/ITRHX-PIC/A73/05.png" alt="05"></p><h3 id="【3x04】多序列柱状图"><a href="#【3x04】多序列柱状图" class="headerlink" title="【3x04】多序列柱状图"></a><font color="##4876FF">【3x04】多序列柱状图</font></h3><p>在绘制多序列的柱状图时，只需要多次调用 <code>matplotlib.pyplot.bar()</code> 函数即可，指定一个较小的宽度值（偏移量），绘制不同数据时设置不同的 x 位置刻度即可。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"></span><br><span class="line">plt.rcParams[<span class="string">'font.sans-serif'</span>] = [<span class="string">'Microsoft YaHei'</span>]</span><br><span class="line"></span><br><span class="line">x = np.arange(<span class="number">5</span>)</span><br><span class="line">height1 = np.array([<span class="number">5</span>, <span class="number">7</span>, <span class="number">4</span>, <span class="number">3</span>, <span class="number">2</span>])</span><br><span class="line">height2 = np.array([<span class="number">2</span>, <span class="number">4</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">3</span>])</span><br><span class="line">height3 = np.array([<span class="number">3</span>, <span class="number">1</span>, <span class="number">7</span>, <span class="number">5</span>, <span class="number">2</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置宽度值（偏移量）</span></span><br><span class="line">width = <span class="number">0.3</span></span><br><span class="line"><span class="comment"># 绘制不同数据时，x 轴依次增加一个偏移量</span></span><br><span class="line">plt.bar(x, height1, width, label=<span class="string">'bar1'</span>)</span><br><span class="line">plt.bar(x + width, height2, width, label=<span class="string">'bar2'</span>)</span><br><span class="line">plt.bar(x + width * <span class="number">2</span>, height3, width, label=<span class="string">'bar3'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置 x 轴刻度的标签</span></span><br><span class="line">plt.xticks(x + width, [<span class="string">'A'</span>, <span class="string">'B'</span>, <span class="string">'C'</span>, <span class="string">'D'</span>, <span class="string">'E'</span>])</span><br><span class="line">plt.title(<span class="string">'多序列柱状图示例'</span>)</span><br><span class="line">plt.xlabel(<span class="string">'x axis label'</span>)</span><br><span class="line">plt.ylabel(<span class="string">'y axis label'</span>)</span><br><span class="line">plt.legend()</span><br><span class="line"></span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/TRHX/ImageHosting/ITRHX-PIC/A73/06.png" alt="06"></p><h3 id="【3x05】堆积的柱状图"><a href="#【3x05】堆积的柱状图" class="headerlink" title="【3x05】堆积的柱状图"></a><font color="##4876FF">【3x05】堆积的柱状图</font></h3><p>所谓堆积图，就是将多序列数据堆积到一个矩形上显示，在柱状图中要实现堆积图，只需要改变 <code>bottom</code> 参数即可，<code>bottom</code> 参数用于设置 y 轴基线，即柱状图的底边在 y 轴上的起始刻度，第一条数据 <code>data1</code> 的基线可以设置为 0，即默认值，第二条数据 <code>data2</code> 的基线可以设置在 <code>data1</code> 的上方，即 <code>bottom=data1</code>，第三条数据 <code>data3</code> 的基线可以设置在 <code>data1 + data2</code> 的上方，即 <code>bottom=data1+data2</code>，以此类推。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"></span><br><span class="line">plt.rcParams[<span class="string">'font.sans-serif'</span>] = [<span class="string">'Microsoft YaHei'</span>]</span><br><span class="line"></span><br><span class="line">x = np.arange(<span class="number">5</span>)</span><br><span class="line">height1 = np.array([<span class="number">5</span>, <span class="number">7</span>, <span class="number">4</span>, <span class="number">3</span>, <span class="number">2</span>])</span><br><span class="line">height2 = np.array([<span class="number">2</span>, <span class="number">4</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">3</span>])</span><br><span class="line">height3 = np.array([<span class="number">3</span>, <span class="number">1</span>, <span class="number">7</span>, <span class="number">5</span>, <span class="number">2</span>])</span><br><span class="line"></span><br><span class="line">plt.bar(x, height1, label=<span class="string">'bar1'</span>)</span><br><span class="line">plt.bar(x, height2, label=<span class="string">'bar2'</span>, bottom=height1)</span><br><span class="line">plt.bar(x, height3, label=<span class="string">'bar3'</span>, bottom=(height2+height1))</span><br><span class="line"></span><br><span class="line">plt.xticks(x, [<span class="string">'A'</span>, <span class="string">'B'</span>, <span class="string">'C'</span>, <span class="string">'D'</span>, <span class="string">'E'</span>])</span><br><span class="line">plt.title(<span class="string">'堆积的柱状图示例'</span>)</span><br><span class="line">plt.xlabel(<span class="string">'x axis label'</span>)</span><br><span class="line">plt.ylabel(<span class="string">'y axis label'</span>)</span><br><span class="line">plt.legend()</span><br><span class="line"></span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/TRHX/ImageHosting/ITRHX-PIC/A73/07.png" alt="07"></p><h3 id="【3x06】填充其他样式"><a href="#【3x06】填充其他样式" class="headerlink" title="【3x06】填充其他样式"></a><font color="##4876FF">【3x06】填充其他样式</font></h3><p><code>hatch</code> 参数可以让柱状图的矩形填充其他样式，可选值有：<code>&#39;/&#39;</code>, <code>&#39;\&#39;</code>, <code>&#39;|&#39;</code>, <code>&#39;-&#39;</code>, <code>&#39;+&#39;</code>, <code>&#39;x&#39;</code>, <code>&#39;o&#39;</code>, <code>&#39;O&#39;</code>, <code>&#39;.&#39;</code>, <code>&#39;*&#39;</code>。可以是不同图案的组合形式，如果有相同的图案，则会增加填充的密度。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"></span><br><span class="line">plt.rcParams[<span class="string">'font.sans-serif'</span>] = [<span class="string">'Microsoft YaHei'</span>]</span><br><span class="line"></span><br><span class="line">x = np.arange(<span class="number">5</span>)</span><br><span class="line">height1 = np.array([<span class="number">5</span>, <span class="number">7</span>, <span class="number">4</span>, <span class="number">3</span>, <span class="number">2</span>])</span><br><span class="line">height2 = np.array([<span class="number">2</span>, <span class="number">4</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">3</span>])</span><br><span class="line">height3 = np.array([<span class="number">3</span>, <span class="number">1</span>, <span class="number">7</span>, <span class="number">5</span>, <span class="number">2</span>])</span><br><span class="line"></span><br><span class="line">plt.bar(x, height1, label=<span class="string">'bar1'</span>, color=<span class="string">'w'</span>, hatch=<span class="string">'///'</span>)</span><br><span class="line">plt.bar(x, height2, label=<span class="string">'bar2'</span>, bottom=height1, color=<span class="string">'w'</span>, hatch=<span class="string">'xxx'</span>)</span><br><span class="line">plt.bar(x, height3, label=<span class="string">'bar3'</span>, bottom=(height2+height1), color=<span class="string">'w'</span>, hatch=<span class="string">'|||'</span>)</span><br><span class="line"></span><br><span class="line">plt.xticks(x, [<span class="string">'A'</span>, <span class="string">'B'</span>, <span class="string">'C'</span>, <span class="string">'D'</span>, <span class="string">'E'</span>])</span><br><span class="line">plt.title(<span class="string">'柱状图图案填充示例'</span>)</span><br><span class="line">plt.xlabel(<span class="string">'x axis label'</span>)</span><br><span class="line">plt.ylabel(<span class="string">'y axis label'</span>)</span><br><span class="line">plt.legend()</span><br><span class="line"></span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/TRHX/ImageHosting/ITRHX-PIC/A73/08.png" alt="08"></p><h3 id="【3x07】添加文字描述"><a href="#【3x07】添加文字描述" class="headerlink" title="【3x07】添加文字描述"></a><font color="##4876FF">【3x07】添加文字描述</font></h3><p>利用 <code>matplotlib.pyplot.text()</code> 方法可以在柱状图每个矩形上方添加文字描述。具体参数解释可参考前面的文章：<a href="https://itrhx.blog.csdn.net/article/details/105828049" target="_blank" rel="noopener">《Python 数据分析三剑客之 Matplotlib（二）：文本描述 / 中文支持 / 画布 / 网格等基本图像属性》</a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"></span><br><span class="line">plt.rcParams[<span class="string">'font.sans-serif'</span>] = [<span class="string">'Microsoft YaHei'</span>]</span><br><span class="line"></span><br><span class="line">x = np.arange(<span class="number">5</span>)</span><br><span class="line">height1 = np.array([<span class="number">5</span>, <span class="number">7</span>, <span class="number">4</span>, <span class="number">3</span>, <span class="number">2</span>])</span><br><span class="line">height2 = np.array([<span class="number">2</span>, <span class="number">4</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">3</span>])</span><br><span class="line">height3 = np.array([<span class="number">3</span>, <span class="number">1</span>, <span class="number">7</span>, <span class="number">5</span>, <span class="number">2</span>])</span><br><span class="line"></span><br><span class="line">width = <span class="number">0.3</span></span><br><span class="line"><span class="comment"># 绘制不同数据时，x 轴依次增加一个偏移量</span></span><br><span class="line">plt.bar(x, height1, width, label=<span class="string">'bar1'</span>)</span><br><span class="line">plt.bar(x + width, height2, width, label=<span class="string">'bar2'</span>)</span><br><span class="line">plt.bar(x + width * <span class="number">2</span>, height3, width, label=<span class="string">'bar3'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 依次添加每条数据的标签</span></span><br><span class="line"><span class="keyword">for</span> a, b <span class="keyword">in</span> zip(x, height1):</span><br><span class="line">    plt.text(a, b, b, ha=<span class="string">'center'</span>, va=<span class="string">'bottom'</span>)</span><br><span class="line"><span class="keyword">for</span> c, d <span class="keyword">in</span> zip(x, height2):</span><br><span class="line">    plt.text(c + width, d, d, ha=<span class="string">'center'</span>, va=<span class="string">'bottom'</span>)</span><br><span class="line"><span class="keyword">for</span> e, f <span class="keyword">in</span> zip(x, height3):</span><br><span class="line">    plt.text(e + width * <span class="number">2</span>, f, f, ha=<span class="string">'center'</span>, va=<span class="string">'bottom'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置 x 轴刻度的标签</span></span><br><span class="line">plt.xticks(x + width, [<span class="string">'A'</span>, <span class="string">'B'</span>, <span class="string">'C'</span>, <span class="string">'D'</span>, <span class="string">'E'</span>])</span><br><span class="line">plt.title(<span class="string">'柱状图添加文字描述示例'</span>)</span><br><span class="line">plt.xlabel(<span class="string">'x axis label'</span>)</span><br><span class="line">plt.ylabel(<span class="string">'y axis label'</span>)</span><br><span class="line">plt.legend()</span><br><span class="line"></span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/TRHX/ImageHosting/ITRHX-PIC/A73/09.png" alt="09"></p><p><img src="https://img-blog.csdnimg.cn/20200509010455973.png" alt="分割线"></p><hr><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">这里是一段防爬虫文本，请读者忽略。</span></span><br><span class="line"><span class="string">本文原创首发于</span> <span class="string">CSDN，作者</span> <span class="string">TRHX。</span></span><br><span class="line"><span class="string">博客首页：https://itrhx.blog.csdn.net/</span></span><br><span class="line"><span class="string">本文链接：https://itrhx.blog.csdn.net/article/details/105952856</span></span><br><span class="line"><span class="string">未经授权，禁止转载！恶意转载，后果自负！尊重原创，远离剽窃！</span></span><br></pre></td></tr></table></figure><hr><h2 id="【4x00】条形图的绘制"><a href="#【4x00】条形图的绘制" class="headerlink" title="【4x00】条形图的绘制"></a><font color="#FF0000">【4x00】条形图的绘制</font></h2><h3 id="【4x01】函数介绍-matplotlib-pyplot-barh"><a href="#【4x01】函数介绍-matplotlib-pyplot-barh" class="headerlink" title="【4x01】函数介绍 matplotlib.pyplot.barh()"></a><font color="##4876FF">【4x01】函数介绍 matplotlib.pyplot.barh()</font></h3><p><code>matplotlib.pyplot.barh()</code> 函数用于绘制条形图（水平排列的柱状图）。</p><p>基本语法：<code>matplotlib.pyplot.barh(y, width[, height=0.8, left=None, align=&#39;center&#39;, color, \*\*kwargs])</code></p><table><thead><tr><th>参数</th><th>描述</th></tr></thead><tbody><tr><td>y</td><td>标量或数组类型，每个矩形对应的 y 轴刻度</td></tr><tr><td>width</td><td>标量或数组类型，每个矩形的宽度，即 x 轴刻度</td></tr><tr><td>height</td><td>标量序列，每个矩形的高度，默认 0.8</td></tr><tr><td>left</td><td>标量序列，每个矩形的左侧 x 坐标的起始位置，默认值为 0</td></tr><tr><td>align</td><td>矩形的底边与 y 轴刻度对齐的位置，<code>&#39;center&#39;</code>：中；<code>&#39;edge&#39;</code>：底边</td></tr></tbody></table><p>其他参数：</p><table><thead><tr><th>参数</th><th>描述</th></tr></thead><tbody><tr><td>color</td><td>标量或数组类型，每个矩形的颜色，与 facecolor 作用相同，指定一个即可，如果两者都指定，则取 facecolor 的值</td></tr><tr><td>edgecolor</td><td>标量或数组类型，条形图边缘线的颜色</td></tr><tr><td>linewidth</td><td>标量或数组类型，条形图边缘线的宽度，如果为0，则不绘制边</td></tr><tr><td>tick_label</td><td>标量或数组类型，条形图 y 轴的刻度标签，默认使用数字标签</td></tr><tr><td>xerr / yerr</td><td>标量，指定对应标准差（添加误差线时会用到）</td></tr><tr><td>ecolor</td><td>标量或数组类型，误差线的线条颜色，默认值为 black</td></tr><tr><td>capsize</td><td>标量，误差线两头横线的宽度，默认为 <code>rcParams[&quot;errorbar.capsize&quot;] = 0.0</code></td></tr><tr><td>error_kw</td><td>字典类型，可以此字典中定义 ecolor 和 capsize，比单独指定的优先级要高</td></tr><tr><td>log</td><td>bool 值，y 坐标轴是否以指数刻度显示</td></tr><tr><td>alpha</td><td>float 类型，矩形透明度</td></tr><tr><td>label</td><td>图例中显示的标签</td></tr><tr><td>linestyle / ls</td><td>线条样式，此处指矩形边缘线条样式<br><code>&#39;-&#39;</code> or <code>&#39;solid&#39;</code>, <code>&#39;--&#39;</code> or <code>&#39;dashed&#39;</code>, <code>&#39;-.&#39;</code> or <code>&#39;dashdot&#39;</code> or <code>&#39;:&#39;</code> or <code>&#39;dotted&#39;</code>, <code>&#39;none&#39;</code> or <code>&#39; &#39;</code> or <code>&#39;&#39;</code></td></tr><tr><td>linewidth / lw</td><td>线条宽度，此处指矩形边缘线的宽度，float 类型，默认 0.8</td></tr><tr><td>hatch</td><td>矩形的填充图案，可以是组合形式，如果有相同的图案，则会增加填充的密度<br>取值可以是：<code>&#39;/&#39;</code>, <code>&#39;\&#39;</code>, `’</td><td>‘<code>,</code>‘-‘<code>,</code>‘+’<code>,</code>‘x’<code>,</code>‘o’<code>,</code>‘O’<code>,</code>‘.’<code>,</code>‘*’`</td></tr></tbody></table><h3 id="【4x02】简单条形图示例"><a href="#【4x02】简单条形图示例" class="headerlink" title="【4x02】简单条形图示例"></a><font color="##4876FF">【4x02】简单条形图示例</font></h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"></span><br><span class="line">plt.rcParams[<span class="string">'font.sans-serif'</span>] = [<span class="string">'Microsoft YaHei'</span>]</span><br><span class="line"></span><br><span class="line">y = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]</span><br><span class="line">width = [<span class="number">5</span>, <span class="number">7</span>, <span class="number">4</span>, <span class="number">3</span>, <span class="number">1</span>]</span><br><span class="line"></span><br><span class="line">tick_label = [<span class="string">'A'</span>, <span class="string">'B'</span>, <span class="string">'C'</span>, <span class="string">'D'</span>, <span class="string">'E'</span>]</span><br><span class="line">color = [<span class="string">'red'</span>, <span class="string">'yellow'</span>, <span class="string">'peru'</span>, <span class="string">'orchid'</span>, <span class="string">'deepskyblue'</span>]</span><br><span class="line">plt.barh(y, width, tick_label=tick_label, color=color, edgecolor=<span class="string">'k'</span>, linewidth=<span class="number">1</span>, linestyle=<span class="string">'--'</span>)</span><br><span class="line"></span><br><span class="line">plt.title(<span class="string">'简单条形图示例'</span>)</span><br><span class="line">plt.xlabel(<span class="string">'x axis label'</span>)</span><br><span class="line">plt.ylabel(<span class="string">'y axis label'</span>)</span><br><span class="line"></span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/TRHX/ImageHosting/ITRHX-PIC/A73/10.png" alt="10"></p><h3 id="【4x03】添加与标准差的误差线"><a href="#【4x03】添加与标准差的误差线" class="headerlink" title="【4x03】添加与标准差的误差线"></a><font color="##4876FF">【4x03】添加与标准差的误差线</font></h3><p>与柱状图一样，首先定义一个列表，其中的元素是与每个值对应的标准差，<code>ecolor</code> 和 <code>capsize</code> 参数分别指定误差线的颜色和两头横线的宽度。这两个参数可以通过 <code>error_kw</code> 字典形式组合起来。以字典形式的组合优先级别要比单独指定高。另外，柱状图指定标准差时要用 <code>yerr</code>，条形图（横向排列的柱状图）指定标准差时要用 <code>xerr</code>。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"></span><br><span class="line">plt.rcParams[<span class="string">'font.sans-serif'</span>] = [<span class="string">'Microsoft YaHei'</span>]</span><br><span class="line"></span><br><span class="line">y = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]</span><br><span class="line">width = [<span class="number">5</span>, <span class="number">7</span>, <span class="number">4</span>, <span class="number">3</span>, <span class="number">2</span>]</span><br><span class="line">std = [<span class="number">0.5</span>, <span class="number">0.1</span>, <span class="number">1.2</span>, <span class="number">0.3</span>, <span class="number">1.0</span>]  <span class="comment"># 标准差</span></span><br><span class="line"></span><br><span class="line">tick_label = [<span class="string">'A'</span>, <span class="string">'B'</span>, <span class="string">'C'</span>, <span class="string">'D'</span>, <span class="string">'E'</span>]   <span class="comment"># 设置 x 轴的标签，也可以用 plt.xticks 方法来设置</span></span><br><span class="line">color = [<span class="string">'red'</span>, <span class="string">'yellow'</span>, <span class="string">'peru'</span>, <span class="string">'orchid'</span>, <span class="string">'deepskyblue'</span>]  <span class="comment"># 颜色序列</span></span><br><span class="line">plt.barh(</span><br><span class="line">    y,</span><br><span class="line">    width,</span><br><span class="line">    tick_label=tick_label,</span><br><span class="line">    color=color,</span><br><span class="line">    xerr=std,               <span class="comment"># 指定对应标准差</span></span><br><span class="line">    <span class="comment"># error_kw=&#123;</span></span><br><span class="line">    <span class="comment">#     'ecolor': 'k',    # 指定误差线的颜色</span></span><br><span class="line">    <span class="comment">#     'capsize': 6      # 指定误差线两头横线的宽度</span></span><br><span class="line">    <span class="comment"># &#125;,</span></span><br><span class="line">    ecolor=<span class="string">'k'</span>,</span><br><span class="line">    capsize=<span class="number">6</span>,</span><br><span class="line">    edgecolor=<span class="string">'k'</span>,          <span class="comment"># 指定边缘线颜色</span></span><br><span class="line">    linewidth=<span class="number">1</span>             <span class="comment"># 指定边缘线宽度</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">plt.title(<span class="string">'条形图添加误差线示例'</span>)</span><br><span class="line">plt.xlabel(<span class="string">'x axis label'</span>)</span><br><span class="line">plt.ylabel(<span class="string">'y axis label'</span>)</span><br><span class="line"></span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/TRHX/ImageHosting/ITRHX-PIC/A73/11.png" alt="11"></p><h3 id="【4x04】多序列条形图"><a href="#【4x04】多序列条形图" class="headerlink" title="【4x04】多序列条形图"></a><font color="##4876FF">【4x04】多序列条形图</font></h3><p>与多序列柱状图类似，在绘制多序列的条形图时，只需要多次调用 <code>matplotlib.pyplot.barh()</code> 函数即可，指定一个较小的高度值（偏移量），绘制不同数据时设置不同的 y 位置刻度即可。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"></span><br><span class="line">plt.rcParams[<span class="string">'font.sans-serif'</span>] = [<span class="string">'Microsoft YaHei'</span>]</span><br><span class="line"></span><br><span class="line">y = np.arange(<span class="number">5</span>)</span><br><span class="line">width1 = np.array([<span class="number">5</span>, <span class="number">7</span>, <span class="number">4</span>, <span class="number">3</span>, <span class="number">2</span>])</span><br><span class="line">width2 = np.array([<span class="number">2</span>, <span class="number">4</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">3</span>])</span><br><span class="line">width3 = np.array([<span class="number">3</span>, <span class="number">1</span>, <span class="number">7</span>, <span class="number">5</span>, <span class="number">2</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置高度值（偏移量）</span></span><br><span class="line">height = <span class="number">0.3</span></span><br><span class="line"><span class="comment"># 绘制不同数据时，y 轴依次增加一个偏移量</span></span><br><span class="line">plt.barh(y, width1, height, label=<span class="string">'bar1'</span>)</span><br><span class="line">plt.barh(y + height, width2, height, label=<span class="string">'bar2'</span>)</span><br><span class="line">plt.barh(y + height * <span class="number">2</span>, width3, height, label=<span class="string">'bar3'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置 y 轴刻度的标签</span></span><br><span class="line">plt.yticks(y + height, [<span class="string">'A'</span>, <span class="string">'B'</span>, <span class="string">'C'</span>, <span class="string">'D'</span>, <span class="string">'E'</span>])</span><br><span class="line">plt.title(<span class="string">'多序列条形图示例'</span>)</span><br><span class="line">plt.xlabel(<span class="string">'x axis label'</span>)</span><br><span class="line">plt.ylabel(<span class="string">'y axis label'</span>)</span><br><span class="line">plt.legend()</span><br><span class="line"></span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/TRHX/ImageHosting/ITRHX-PIC/A73/12.png" alt="12"></p><h3 id="【4x05】堆积的条形图"><a href="#【4x05】堆积的条形图" class="headerlink" title="【4x05】堆积的条形图"></a><font color="##4876FF">【4x05】堆积的条形图</font></h3><p>堆积图就是将多序列数据堆积到一个矩形上显示，和堆积的柱状图类似，在条形图中要实现堆积图，只需要改变 <code>left</code> 参数即可，<code>left</code> 参数用于设置 x 轴基线，即柱状图的底边在 x 轴上的起始刻度，第一条数据 <code>data1</code> 的基线可以设置为 0，即默认值，第二条数据 <code>data2</code> 的基线可以设置在 <code>data1</code> 的上方，即 <code>left=data1</code>，第三条数据 <code>data3</code> 的基线可以设置在 <code>data1 + data2</code> 的上方，即 <code>left=data1+data2</code>，以此类推。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"></span><br><span class="line">plt.rcParams[<span class="string">'font.sans-serif'</span>] = [<span class="string">'Microsoft YaHei'</span>]</span><br><span class="line"></span><br><span class="line">y = np.arange(<span class="number">5</span>)</span><br><span class="line">width1 = np.array([<span class="number">5</span>, <span class="number">7</span>, <span class="number">4</span>, <span class="number">3</span>, <span class="number">2</span>])</span><br><span class="line">width2 = np.array([<span class="number">2</span>, <span class="number">4</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">3</span>])</span><br><span class="line">width3 = np.array([<span class="number">3</span>, <span class="number">1</span>, <span class="number">7</span>, <span class="number">5</span>, <span class="number">2</span>])</span><br><span class="line"></span><br><span class="line">plt.barh(y, width1, label=<span class="string">'bar1'</span>)</span><br><span class="line">plt.barh(y, width2, label=<span class="string">'bar2'</span>, left=width1)</span><br><span class="line">plt.barh(y, width3, label=<span class="string">'bar3'</span>, left=(width1+width2))</span><br><span class="line"></span><br><span class="line">plt.yticks(y, [<span class="string">'A'</span>, <span class="string">'B'</span>, <span class="string">'C'</span>, <span class="string">'D'</span>, <span class="string">'E'</span>])</span><br><span class="line">plt.title(<span class="string">'堆积的条形图示例'</span>)</span><br><span class="line">plt.xlabel(<span class="string">'x axis label'</span>)</span><br><span class="line">plt.ylabel(<span class="string">'y axis label'</span>)</span><br><span class="line">plt.legend()</span><br><span class="line"></span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/TRHX/ImageHosting/ITRHX-PIC/A73/13.png" alt="13"></p><h3 id="【4x06】填充其他样式"><a href="#【4x06】填充其他样式" class="headerlink" title="【4x06】填充其他样式"></a><font color="##4876FF">【4x06】填充其他样式</font></h3><p><code>hatch</code> 参数可以让柱状图的矩形填充其他样式，可选值有：<code>&#39;/&#39;</code>, <code>&#39;\&#39;</code>, <code>&#39;|&#39;</code>, <code>&#39;-&#39;</code>, <code>&#39;+&#39;</code>, <code>&#39;x&#39;</code>, <code>&#39;o&#39;</code>, <code>&#39;O&#39;</code>, <code>&#39;.&#39;</code>, <code>&#39;*&#39;</code>。可以是不同图案的组合形式，如果有相同的图案，则会增加填充的密度。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"></span><br><span class="line">plt.rcParams[<span class="string">'font.sans-serif'</span>] = [<span class="string">'Microsoft YaHei'</span>]</span><br><span class="line"></span><br><span class="line">y = np.arange(<span class="number">5</span>)</span><br><span class="line">width1 = np.array([<span class="number">5</span>, <span class="number">7</span>, <span class="number">4</span>, <span class="number">3</span>, <span class="number">2</span>])</span><br><span class="line">width2 = np.array([<span class="number">2</span>, <span class="number">4</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">3</span>])</span><br><span class="line">width3 = np.array([<span class="number">3</span>, <span class="number">1</span>, <span class="number">7</span>, <span class="number">5</span>, <span class="number">2</span>])</span><br><span class="line"></span><br><span class="line">plt.barh(y, width1, label=<span class="string">'bar1'</span>, color=<span class="string">'w'</span>, hatch=<span class="string">'///'</span>)</span><br><span class="line">plt.barh(y, width2, label=<span class="string">'bar2'</span>, left=width1, color=<span class="string">'w'</span>, hatch=<span class="string">'xxx'</span>)</span><br><span class="line">plt.barh(y, width3, label=<span class="string">'bar3'</span>, left=(width1+width2), color=<span class="string">'w'</span>, hatch=<span class="string">'|||'</span>)</span><br><span class="line"></span><br><span class="line">plt.yticks(y, [<span class="string">'A'</span>, <span class="string">'B'</span>, <span class="string">'C'</span>, <span class="string">'D'</span>, <span class="string">'E'</span>])</span><br><span class="line">plt.title(<span class="string">'条形图图案填充示例'</span>)</span><br><span class="line">plt.xlabel(<span class="string">'x axis label'</span>)</span><br><span class="line">plt.ylabel(<span class="string">'y axis label'</span>)</span><br><span class="line">plt.legend()</span><br><span class="line"></span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/TRHX/ImageHosting/ITRHX-PIC/A73/14.png" alt="14"></p><h3 id="【4x07】添加文字描述"><a href="#【4x07】添加文字描述" class="headerlink" title="【4x07】添加文字描述"></a><font color="##4876FF">【4x07】添加文字描述</font></h3><p>利用 <code>matplotlib.pyplot.text()</code> 方法可以在条形图每个矩形上方添加文字描述。具体参数解释可参考前面的文章：<a href="https://itrhx.blog.csdn.net/article/details/105828049" target="_blank" rel="noopener">《Python 数据分析三剑客之 Matplotlib（二）：文本描述 / 中文支持 / 画布 / 网格等基本图像属性》</a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"></span><br><span class="line">plt.rcParams[<span class="string">'font.sans-serif'</span>] = [<span class="string">'Microsoft YaHei'</span>]</span><br><span class="line"></span><br><span class="line">y = np.arange(<span class="number">5</span>)</span><br><span class="line">width1 = np.array([<span class="number">5</span>, <span class="number">7</span>, <span class="number">4</span>, <span class="number">3</span>, <span class="number">2</span>])</span><br><span class="line">width2 = np.array([<span class="number">2</span>, <span class="number">4</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">3</span>])</span><br><span class="line">width3 = np.array([<span class="number">3</span>, <span class="number">1</span>, <span class="number">7</span>, <span class="number">5</span>, <span class="number">2</span>])</span><br><span class="line"></span><br><span class="line">height = <span class="number">0.3</span></span><br><span class="line"><span class="comment"># 绘制不同数据时，y 轴依次增加一个偏移量</span></span><br><span class="line">plt.barh(y, width1, height, label=<span class="string">'bar1'</span>)</span><br><span class="line">plt.barh(y + height, width2, height, label=<span class="string">'bar2'</span>)</span><br><span class="line">plt.barh(y + height * <span class="number">2</span>, width3, height, label=<span class="string">'bar3'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 依次添加每条数据的标签</span></span><br><span class="line"><span class="keyword">for</span> a, b <span class="keyword">in</span> zip(width1, y):</span><br><span class="line">    plt.text(a, b<span class="number">-0.05</span>, a)</span><br><span class="line"><span class="keyword">for</span> c, d <span class="keyword">in</span> zip(width2, y):</span><br><span class="line">    plt.text(c, d+<span class="number">0.20</span>, c)</span><br><span class="line"><span class="keyword">for</span> e, f <span class="keyword">in</span> zip(width3, y):</span><br><span class="line">    plt.text(e, f+<span class="number">0.50</span>, e)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置 y 轴刻度的标签</span></span><br><span class="line">plt.yticks(y + height, [<span class="string">'A'</span>, <span class="string">'B'</span>, <span class="string">'C'</span>, <span class="string">'D'</span>, <span class="string">'E'</span>])</span><br><span class="line">plt.title(<span class="string">'条形图添加文字描述示例'</span>)</span><br><span class="line">plt.xlabel(<span class="string">'x axis label'</span>)</span><br><span class="line">plt.ylabel(<span class="string">'y axis label'</span>)</span><br><span class="line">plt.legend()</span><br><span class="line"></span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/TRHX/ImageHosting/ITRHX-PIC/A73/15.png" alt="15"></p><hr><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">这里是一段防爬虫文本，请读者忽略。</span></span><br><span class="line"><span class="string">本文原创首发于</span> <span class="string">CSDN，作者</span> <span class="string">TRHX。</span></span><br><span class="line"><span class="string">博客首页：https://itrhx.blog.csdn.net/</span></span><br><span class="line"><span class="string">本文链接：https://itrhx.blog.csdn.net/article/details/105952856</span></span><br><span class="line"><span class="string">未经授权，禁止转载！恶意转载，后果自负！尊重原创，远离剽窃！</span></span><br></pre></td></tr></table></figure><hr>]]></content>
    
    <summary type="html">
    
      Python 数据分析三剑客之 Matplotlib（六）：直方图、柱状图、条形图的绘制。
    
    </summary>
    
      <category term="Python 数据分析" scheme="https://www.itrhx.com/categories/Python-%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/"/>
    
      <category term="Matplotlib" scheme="https://www.itrhx.com/categories/Python-%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/Matplotlib/"/>
    
    
      <category term="Matplotlib" scheme="https://www.itrhx.com/tags/Matplotlib/"/>
    
      <category term="直方图" scheme="https://www.itrhx.com/tags/%E7%9B%B4%E6%96%B9%E5%9B%BE/"/>
    
      <category term="柱状图" scheme="https://www.itrhx.com/tags/%E6%9F%B1%E7%8A%B6%E5%9B%BE/"/>
    
      <category term="条形图" scheme="https://www.itrhx.com/tags/%E6%9D%A1%E5%BD%A2%E5%9B%BE/"/>
    
  </entry>
  
  <entry>
    <title>Python 数据分析三剑客之 Matplotlib（五）：散点图的绘制</title>
    <link href="https://www.itrhx.com/2020/04/18/A72-Matplotlib-05/"/>
    <id>https://www.itrhx.com/2020/04/18/A72-Matplotlib-05/</id>
    <published>2020-04-18T15:50:09.015Z</published>
    <updated>2020-07-06T13:31:57.105Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>Matplotlib 系列文章：</p><ul><li><a href="https://www.itrhx.com/2020/04/10/A68-Matplotlib-01/">Python 数据分析三剑客之 Matplotlib（一）：初识 Matplotlib 与其 matplotibrc 配置文件</a></li><li><a href="https://www.itrhx.com/2020/04/12/A69-Matplotlib-02/">Python 数据分析三剑客之 Matplotlib（二）：文本描述 / 中文支持 / 画布 / 网格等基本图像属性</a></li><li><a href="https://www.itrhx.com/2020/04/14/A70-Matplotlib-03/">Python 数据分析三剑客之 Matplotlib（三）：图例 / LaTeX / 刻度 / 子图 / 补丁等基本图像属性</a></li><li><a href="https://www.itrhx.com/2020/04/16/A71-Matplotlib-04/">Python 数据分析三剑客之 Matplotlib（四）：线性图的绘制</a></li><li><a href="https://www.itrhx.com/2020/04/18/A72-Matplotlib-05/">Python 数据分析三剑客之 Matplotlib（五）：散点图的绘制</a></li><li><a href="https://www.itrhx.com/2020/04/21/A73-Matplotlib-06/">Python 数据分析三剑客之 Matplotlib（六）：直方图 / 柱状图 / 条形图的绘制</a></li><li><a href="https://www.itrhx.com/2020/04/24/A74-Matplotlib-07/">Python 数据分析三剑客之 Matplotlib（七）：饼状图的绘制</a></li><li><a href="https://www.itrhx.com/2020/04/30/A75-Matplotlib-08/">Python 数据分析三剑客之 Matplotlib（八）：等高线 / 等值线图的绘制</a></li><li><a href="https://www.itrhx.com/2020/06/03/A76-Matplotlib-09/">Python 数据分析三剑客之 Matplotlib（九）：极区图 / 极坐标图 / 雷达图的绘制</a></li><li><a href="https://www.itrhx.com/2020/06/08/A77-Matplotlib-10/">Python 数据分析三剑客之 Matplotlib（十）：3D 图的绘制</a></li><li><a href="https://www.itrhx.com/2020/06/09/A78-Matplotlib-11/">Python 数据分析三剑客之 Matplotlib（十一）：最热门最常用的 50 个图表</a>【译文】</li></ul><p>专栏：</p><p>【<a href="https://www.itrhx.com/categories/Python-%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/NumPy/">NumPy 专栏</a>】【<a href="https://www.itrhx.com/categories/Python-%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/Pandas/">Pandas 专栏</a>】【<a href="https://www.itrhx.com/categories/Python-%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/Matplotlib/">Matplotlib 专栏</a>】</p><p>推荐学习资料与网站：</p><p>【<a href="https://www.numpy.org.cn/" target="_blank" rel="noopener">NumPy 中文网</a>】【<a href="https://www.pypandas.cn/" target="_blank" rel="noopener">Pandas 中文网</a>】【<a href="https://www.matplotlib.org.cn/" target="_blank" rel="noopener">Matplotlib 中文网</a>】【<a href="https://github.com/TRHX/Python-quick-reference-table" target="_blank" rel="noopener">NumPy、Matplotlib、Pandas 速查表</a>】</p><hr><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">这里是一段防爬虫文本，请读者忽略。</span></span><br><span class="line"><span class="string">本文原创首发于</span> <span class="string">CSDN，作者</span> <span class="string">TRHX。</span></span><br><span class="line"><span class="string">博客首页：https://itrhx.blog.csdn.net/</span></span><br><span class="line"><span class="string">本文链接：https://itrhx.blog.csdn.net/article/details/105914929</span></span><br><span class="line"><span class="string">未经授权，禁止转载！恶意转载，后果自负！尊重原创，远离剽窃！</span></span><br></pre></td></tr></table></figure><hr><h2 id="【1x00】方法描述"><a href="#【1x00】方法描述" class="headerlink" title="【1x00】方法描述"></a><font color="#FF0000">【1x00】方法描述</font></h2><p><code>matplotlib.pyplot.scatter()</code> 方法可用于绘制散点图。</p><p>本文用到的其他图像属性可参考前面的两篇文章：</p><p><a href="https://itrhx.blog.csdn.net/article/details/105828049" target="_blank" rel="noopener">《Python 数据分析三剑客之 Matplotlib（二）：文本描述 / 中文支持 / 画布 / 网格等基本图像属性》</a><br><a href="https://itrhx.blog.csdn.net/article/details/105828143" target="_blank" rel="noopener">《Python 数据分析三剑客之 Matplotlib（三）：图例 / LaTeX / 刻度 / 子图等基本图像属性》</a></p><p>基本语法：<code>matplotlib.pyplot.scatter(x, y, s=None, c=None, marker=None, cmap=None, alpha=None, linewidths=None, edgecolors=None, \*\*kwargs)</code></p><table><thead><tr><th>参数</th><th>描述</th></tr></thead><tbody><tr><td>x,y</td><td>数据位置，标量或类似数组的形式</td></tr><tr><td>s</td><td>标记的大小，以磅为单位，默认 <code>rcParams[&#39;lines.markersize&#39;] ** 2</code>，即 6**2=36</td></tr><tr><td>color / c</td><td>标记的颜色，可以是单个颜色或者一个颜色列表<br>支持英文颜色名称及其简写、十六进制颜色码等，更多颜色示例参见官网 <a href="https://matplotlib.org/gallery/color/color_demo.html" target="_blank" rel="noopener">Color Demo</a></td></tr><tr><td>marker</td><td>标记的样式，默认为 <code>rcParams[&quot;scatter.marker&quot;] = &#39;o&#39;</code>，更多样式参见<font color="#FF0000"><strong>表一</strong></font></td></tr><tr><td>cmap</td><td>将浮点数映射成颜色的颜色映射表，即一个 <a href="https://matplotlib.org/api/_as_gen/matplotlib.colors.Colormap.html#matplotlib.colors.Colormap" target="_blank" rel="noopener">Colormap</a> 实例或注册的颜色表名，仅当 c 是浮点数数组时才使用 cmap</td></tr><tr><td>alpha</td><td>标记的透明度，float 类型，取值范围：[0, 1]，默认为 1.0，即不透明</td></tr><tr><td>linewidths</td><td>标记边缘的线宽，默认为 <code>rcParams[&quot;lines.linewidth&quot;] = 1.5</code></td></tr><tr><td>edgecolors</td><td>标记边缘的颜色，可以是单个颜色或者一个颜色列表<br>支持英文颜色名称及其简写、十六进制颜色码等，更多颜色示例参见官网 <a href="https://matplotlib.org/gallery/color/color_demo.html" target="_blank" rel="noopener">Color Demo</a></td></tr></tbody></table><table><tr><td bgcolor="#7FFFD4" colspan="2"><strong><font color="FF0000" size="3px">表一：marker 标记的样式</font></strong></td></tr></table><table><thead><tr><th>标记</th><th>描述</th></tr></thead><tbody><tr><td><code>&quot;.&quot;</code></td><td>点</td></tr><tr><td><code>&quot;,&quot;</code></td><td>像素点</td></tr><tr><td><code>&quot;o&quot;</code></td><td>圆圈</td></tr><tr><td><code>&quot;v&quot;</code></td><td>倒三角</td></tr><tr><td><code>&quot;^&quot;</code></td><td>正三角</td></tr><tr><td><code>&quot;&lt;&quot;</code></td><td>左三角</td></tr><tr><td><code>&quot;&gt;&quot;</code></td><td>右三角</td></tr><tr><td><code>&quot;1&quot;</code></td><td>倒三叉星</td></tr><tr><td><code>&quot;2&quot;</code></td><td>正三叉星（类似奔驰车标形状）</td></tr><tr><td><code>&quot;3&quot;</code></td><td>左三叉星</td></tr><tr><td><code>&quot;4&quot;</code></td><td>右三叉星</td></tr><tr><td><code>&quot;8&quot;</code></td><td>八边形</td></tr><tr><td><code>&quot;s&quot;</code></td><td>正方形</td></tr><tr><td><code>&quot;p&quot;</code></td><td>五边形</td></tr><tr><td><code>&quot;P&quot;</code></td><td>填充的加号（粗加号）</td></tr><tr><td><code>&quot;+&quot;</code></td><td>加号</td></tr><tr><td><code>&quot;*&quot;</code></td><td>星形</td></tr><tr><td><code>&quot;h&quot;</code></td><td>六边形（底部是角）</td></tr><tr><td><code>&quot;H&quot;</code></td><td>六边形（底部是边）</td></tr><tr><td><code>&quot;x&quot;</code></td><td>x 号</td></tr><tr><td><code>&quot;X&quot;</code></td><td>填充的 x 号（粗 x 号）</td></tr><tr><td><code>&quot;D&quot;</code></td><td>粗菱形（对角线相等）</td></tr><tr><td><code>&quot;d&quot;</code></td><td>细菱形（对角线不等）</td></tr><tr><td>`”</td><td>“`</td><td>垂直线</td></tr><tr><td><code>&quot;_&quot;</code></td><td>水平线</td></tr><tr><td><code>0</code></td><td>水平线靠左</td></tr><tr><td><code>1</code></td><td>水平线靠右</td></tr><tr><td><code>2</code></td><td>垂直线靠上</td></tr><tr><td><code>3</code></td><td>垂直线靠下</td></tr><tr><td><code>4</code></td><td>左三角（比 <code>&quot;&lt;&quot;</code> 更细）</td></tr><tr><td><code>5</code></td><td>右三角（比 <code>&quot;&gt;&quot;</code> 更细）</td></tr><tr><td><code>6</code></td><td>正三角（比 <code>&quot;^&quot;</code> 更细）</td></tr><tr><td><code>7</code></td><td>倒三角（比 <code>&quot;v&quot;</code> 更细）</td></tr><tr><td><code>8</code></td><td>左三角（比 <code>&quot;&lt;&quot;</code> 更细，靠左显示）</td></tr><tr><td><code>9</code></td><td>右三角（比 <code>&quot;&gt;&quot;</code> 更细，靠右显示）</td></tr><tr><td><code>10</code></td><td>正三角（比 <code>&quot;^&quot;</code> 更细，靠上显示）</td></tr><tr><td><code>11</code></td><td>倒三角（比 <code>&quot;v&quot;</code> 更细，靠下显示）</td></tr><tr><td><code>&quot;None&quot;</code> / <code>&quot; &quot;</code> / <code>&quot;&quot;</code></td><td>无样式</td></tr><tr><td><code>&#39;$...$&#39;</code></td><td>支持 LaTeX 数学公式，表达式用美元符号包围起来</td></tr></tbody></table><h2 id="【2x00】简单示例"><a href="#【2x00】简单示例" class="headerlink" title="【2x00】简单示例"></a><font color="#FF0000">【2x00】简单示例</font></h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"></span><br><span class="line">x = np.arange(<span class="number">0</span>, <span class="number">10</span>, <span class="number">1</span>)</span><br><span class="line">y = np.array([<span class="number">3</span>, <span class="number">8</span>, <span class="number">1</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">7</span>])</span><br><span class="line">plt.scatter(x, y)</span><br><span class="line"></span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/TRHX/ImageHosting/ITRHX-PIC/A72/01.png" alt="01"></p><h2 id="【3x00】多条数据"><a href="#【3x00】多条数据" class="headerlink" title="【3x00】多条数据"></a><font color="#FF0000">【3x00】多条数据</font></h2><p>绘制多条数据，设置不同数据，然后多次调用 <code>plt.scatter()</code> 函数即可，不同数据的线条颜色会不同，系统随机，可单独指定不同颜色。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"></span><br><span class="line">plt.rcParams[<span class="string">'font.sans-serif'</span>] = [<span class="string">'Microsoft YaHei'</span>]</span><br><span class="line"></span><br><span class="line">x = np.arange(<span class="number">-2</span>*np.pi, <span class="number">2</span>*np.pi, <span class="number">1</span>)</span><br><span class="line">y1 = np.sin(<span class="number">3</span>*x)/x</span><br><span class="line">y2 = np.sin(<span class="number">2</span>*x)/x</span><br><span class="line">y3 = np.sin(<span class="number">1</span>*x)/x</span><br><span class="line">plt.title(<span class="string">'多数据散点图示例'</span>)</span><br><span class="line">plt.xlabel(<span class="string">'x 轴'</span>)</span><br><span class="line">plt.ylabel(<span class="string">'y 轴'</span>)</span><br><span class="line"></span><br><span class="line">plt.scatter(x, y1)</span><br><span class="line">plt.scatter(x, y2)</span><br><span class="line">plt.scatter(x, y3)</span><br><span class="line"></span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/TRHX/ImageHosting/ITRHX-PIC/A72/02.png" alt="02"></p><h2 id="【4x00】设置颜色-样式-图例"><a href="#【4x00】设置颜色-样式-图例" class="headerlink" title="【4x00】设置颜色 / 样式 / 图例"></a><font color="#FF0000">【4x00】设置颜色 / 样式 / 图例</font></h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"></span><br><span class="line">plt.rcParams[<span class="string">'font.sans-serif'</span>] = [<span class="string">'Microsoft YaHei'</span>]</span><br><span class="line"></span><br><span class="line">x = np.arange(<span class="number">-2</span>*np.pi, <span class="number">2</span>*np.pi, <span class="number">1</span>)</span><br><span class="line">y1 = np.sin(<span class="number">3</span>*x)/x</span><br><span class="line">y2 = np.sin(<span class="number">2</span>*x)/x</span><br><span class="line">y3 = np.sin(<span class="number">1</span>*x)/x</span><br><span class="line">plt.title(<span class="string">'散点图自定义样式示例'</span>)</span><br><span class="line">plt.xlabel(<span class="string">'x 轴'</span>)</span><br><span class="line">plt.ylabel(<span class="string">'y 轴'</span>)</span><br><span class="line"></span><br><span class="line">plt.scatter(x, y1, color=<span class="string">'g'</span>, s=<span class="number">30</span>, label=<span class="string">'(x, y1)'</span>)              <span class="comment"># 默认绿色样式</span></span><br><span class="line">plt.scatter(x, y2, color=<span class="string">'r'</span>, s=<span class="number">40</span>, marker=<span class="string">'d'</span>, label=<span class="string">'(x, y2)'</span>)  <span class="comment"># 红色菱形</span></span><br><span class="line">plt.scatter(x, y3, color=<span class="string">'b'</span>, s=<span class="number">50</span>, marker=<span class="string">'2'</span>, label=<span class="string">'(x, y3)'</span>)  <span class="comment"># 蓝色正三叉星</span></span><br><span class="line"></span><br><span class="line">plt.legend(framealpha=<span class="number">0</span>)    <span class="comment"># 显示图例，设置为全透明</span></span><br><span class="line"></span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/TRHX/ImageHosting/ITRHX-PIC/A72/03.png" alt="03"></p><h2 id="【5x00】指定位置显示文本注释"><a href="#【5x00】指定位置显示文本注释" class="headerlink" title="【5x00】指定位置显示文本注释"></a><font color="#FF0000">【5x00】指定位置显示文本注释</font></h2><p><code>matplotlib.pyplot.annotate()</code> 方法可以在指定位置显示文本注释，参数解释常见前文：<br><a href="https://itrhx.blog.csdn.net/article/details/105828049" target="_blank" rel="noopener">《Python 数据分析三剑客之 Matplotlib（二）：文本描述 / 中文支持 / 画布 / 网格等基本图像属性》</a></p><p>应用举例：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"></span><br><span class="line">plt.rcParams[<span class="string">'font.sans-serif'</span>] = [<span class="string">'Microsoft YaHei'</span>]</span><br><span class="line"></span><br><span class="line">x = [<span class="number">0.13</span>, <span class="number">0.22</span>, <span class="number">0.39</span>, <span class="number">0.59</span>, <span class="number">0.68</span>, <span class="number">0.74</span>, <span class="number">0.93</span>]</span><br><span class="line">y = [<span class="number">0.75</span>, <span class="number">0.34</span>, <span class="number">0.44</span>, <span class="number">0.52</span>, <span class="number">0.80</span>, <span class="number">0.25</span>, <span class="number">0.55</span>]</span><br><span class="line"></span><br><span class="line">plt.title(<span class="string">'散点图添加文本注释示例'</span>)</span><br><span class="line">plt.xlabel(<span class="string">'x 轴'</span>)</span><br><span class="line">plt.ylabel(<span class="string">'y 轴'</span>)</span><br><span class="line">plt.xlim([<span class="number">0</span>, <span class="number">1</span>])       <span class="comment"># 设置 x 轴刻度的范围</span></span><br><span class="line">plt.ylim([<span class="number">0</span>, <span class="number">1</span>])       <span class="comment"># 设置 y 轴刻度的范围</span></span><br><span class="line"></span><br><span class="line">plt.scatter(x, y, marker=<span class="string">'o'</span>, s=<span class="number">50</span>)</span><br><span class="line"><span class="keyword">for</span> m, n <span class="keyword">in</span> zip(x, y):</span><br><span class="line">    plt.annotate(<span class="string">'(%s,%s)'</span> % (m, n),</span><br><span class="line">                 xy=(m, n),</span><br><span class="line">                 xytext=(<span class="number">0</span>, <span class="number">-10</span>),</span><br><span class="line">                 textcoords=<span class="string">'offset points'</span>,</span><br><span class="line">                 ha=<span class="string">'center'</span>,      <span class="comment"># 点在注释文本的中心</span></span><br><span class="line">                 va=<span class="string">'top'</span>)         <span class="comment"># 点在注释文本的上方</span></span><br><span class="line"></span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/TRHX/ImageHosting/ITRHX-PIC/A72/04.png" alt="04"></p><hr><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">这里是一段防爬虫文本，请读者忽略。</span></span><br><span class="line"><span class="string">本文原创首发于</span> <span class="string">CSDN，作者</span> <span class="string">TRHX。</span></span><br><span class="line"><span class="string">博客首页：https://itrhx.blog.csdn.net/</span></span><br><span class="line"><span class="string">本文链接：https://itrhx.blog.csdn.net/article/details/105914929</span></span><br><span class="line"><span class="string">未经授权，禁止转载！恶意转载，后果自负！尊重原创，远离剽窃！</span></span><br></pre></td></tr></table></figure><hr><h2 id="【6x00】随机数据散点图"><a href="#【6x00】随机数据散点图" class="headerlink" title="【6x00】随机数据散点图"></a><font color="#FF0000">【6x00】随机数据散点图</font></h2><p>随机数据可以用 numpy 的 random 模块来实现。</p><p><code>numpy.random.rand(d0, d1, …, dn)</code>：根据给定维度生成 [0,1) 之间的数据。</p><p><code>numpy.random.randn(d0, d1, …, dn)</code> ：返回一个或一组具有标准正态分布的样本。</p><p><code>numpy.random.randint(low, high, size)</code>：返回随机整数，范围区间为 [low,high），size 为数组维度大小</p><p>应用举例：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"></span><br><span class="line">plt.rcParams[<span class="string">'font.sans-serif'</span>] = [<span class="string">'Microsoft YaHei'</span>]</span><br><span class="line"></span><br><span class="line">N = <span class="number">1000</span></span><br><span class="line">x = np.random.randn(N)</span><br><span class="line">y = np.random.randn(N)</span><br><span class="line"></span><br><span class="line">plt.title(<span class="string">'散点图随机数据示例'</span>)</span><br><span class="line">plt.xlabel(<span class="string">'x 轴'</span>)</span><br><span class="line">plt.ylabel(<span class="string">'y 轴'</span>)</span><br><span class="line">plt.scatter(x, y, alpha=<span class="number">0.5</span>)</span><br><span class="line"></span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/TRHX/ImageHosting/ITRHX-PIC/A72/05.png" alt="05"></p><h2 id="【7x00】随机颜色与色条"><a href="#【7x00】随机颜色与色条" class="headerlink" title="【7x00】随机颜色与色条"></a><font color="#FF0000">【7x00】随机颜色与色条</font></h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"></span><br><span class="line">plt.rcParams[<span class="string">'font.sans-serif'</span>] = [<span class="string">'Microsoft YaHei'</span>]</span><br><span class="line"></span><br><span class="line">N = <span class="number">1000</span></span><br><span class="line">x = np.random.randn(N)</span><br><span class="line">y = np.random.randn(N)</span><br><span class="line"></span><br><span class="line">color = np.random.rand(N)</span><br><span class="line">size = np.random.rand(N) * <span class="number">1000</span></span><br><span class="line"></span><br><span class="line">plt.figure(figsize=(<span class="number">8.4</span>, <span class="number">5.8</span>))    <span class="comment"># 设置画布大小 840x580</span></span><br><span class="line">plt.title(<span class="string">'散点图随机大小颜色示例'</span>)</span><br><span class="line">plt.xlabel(<span class="string">'x 轴'</span>)</span><br><span class="line">plt.ylabel(<span class="string">'y 轴'</span>)</span><br><span class="line">plt.scatter(x, y, c=color, s=size, alpha=<span class="number">0.5</span>)</span><br><span class="line"></span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/TRHX/ImageHosting/ITRHX-PIC/A72/06.png" alt="06"></p><p>可以用 <code>pyplot.colorbar()</code> 方法绘制颜色对照条。</p><p>基本语法：<code>matplotlib.pyplot.colorbar([mappable=None, cax=None, ax=None, **kw])</code></p><p>部分参数解释如下表，其他参数，如长度，宽度等请参考<a href="https://matplotlib.org/api/_as_gen/matplotlib.pyplot.colorbar.html" target="_blank" rel="noopener">官方文档</a>。</p><table><thead><tr><th>参数</th><th>描述</th></tr></thead><tbody><tr><td>mappable</td><td>要设置色条的图像对象，该参数对于 <code>Figure.colorbar</code> 方法是必需的，但对于 <code>pyplot.colorbar</code> 函数是可选的</td></tr><tr><td>cax</td><td>可选项，要绘制色条的轴</td></tr><tr><td>ax</td><td>可选项，设置色条的显示位置，通常在一个画布上有多个子图时使用</td></tr><tr><td>**kw</td><td>可选项，其他关键字参数，参考<a href="https://matplotlib.org/api/_as_gen/matplotlib.pyplot.colorbar.html" target="_blank" rel="noopener">官方文档</a></td></tr></tbody></table><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"></span><br><span class="line">plt.rcParams[<span class="string">'font.sans-serif'</span>] = [<span class="string">'Microsoft YaHei'</span>]</span><br><span class="line"></span><br><span class="line">N = <span class="number">1000</span></span><br><span class="line">x = np.random.randn(N)</span><br><span class="line">y = np.random.randn(N)</span><br><span class="line"></span><br><span class="line">color = np.random.rand(N)</span><br><span class="line">size = np.random.rand(N) * <span class="number">1000</span></span><br><span class="line"></span><br><span class="line">plt.figure(figsize=(<span class="number">8.4</span>, <span class="number">5.8</span>))</span><br><span class="line">plt.title(<span class="string">'散点图颜色对照条示例'</span>)</span><br><span class="line">plt.xlabel(<span class="string">'x 轴'</span>)</span><br><span class="line">plt.ylabel(<span class="string">'y 轴'</span>)</span><br><span class="line">plt.scatter(x, y, c=color, s=size, alpha=<span class="number">0.5</span>)</span><br><span class="line">plt.colorbar()</span><br><span class="line"></span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/TRHX/ImageHosting/ITRHX-PIC/A72/07.png" alt="07"></p><h2 id="【8x00】不同图像之间的层级调整"><a href="#【8x00】不同图像之间的层级调整" class="headerlink" title="【8x00】不同图像之间的层级调整"></a><font color="#FF0000">【8x00】不同图像之间的层级调整</font></h2><p><code>zorder</code> 参数用于设置不同图像之间的层级关系，数字越大，所处的层级越大，即显示越靠上。</p><p>未设置 <code>zorder</code> 参数前：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"></span><br><span class="line">plt.rcParams[<span class="string">'font.sans-serif'</span>] = [<span class="string">'Microsoft YaHei'</span>]</span><br><span class="line"></span><br><span class="line">x1 = np.arange(<span class="number">-2</span>*np.pi, <span class="number">2</span>*np.pi, <span class="number">0.01</span>)</span><br><span class="line">y1 = np.sin(<span class="number">3</span>*x1)/x1</span><br><span class="line">x2 = np.arange(<span class="number">-2</span>*np.pi, <span class="number">2</span>*np.pi, <span class="number">1</span>)</span><br><span class="line">y2 = np.sin(<span class="number">3</span>*x2)/x2</span><br><span class="line"></span><br><span class="line">plt.title(<span class="string">'不同图像之间层级调整示例'</span>)</span><br><span class="line">plt.xlabel(<span class="string">'x 轴'</span>)</span><br><span class="line">plt.ylabel(<span class="string">'y 轴'</span>)</span><br><span class="line"></span><br><span class="line">plt.plot(x1, y1, c=<span class="string">'b'</span>, linewidth=<span class="number">3.5</span>, label=<span class="string">'线性图'</span>)</span><br><span class="line">plt.scatter(x2, y2, c=<span class="string">'r'</span>, s=<span class="number">40</span>, label=<span class="string">'散点图'</span>)</span><br><span class="line">plt.legend()</span><br><span class="line"></span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/TRHX/ImageHosting/ITRHX-PIC/A72/08.png" alt="08"></p><p>设置 <code>zorder</code> 参数后：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"></span><br><span class="line">plt.rcParams[<span class="string">'font.sans-serif'</span>] = [<span class="string">'Microsoft YaHei'</span>]</span><br><span class="line"></span><br><span class="line">x1 = np.arange(<span class="number">-2</span>*np.pi, <span class="number">2</span>*np.pi, <span class="number">0.01</span>)</span><br><span class="line">y1 = np.sin(<span class="number">3</span>*x1)/x1</span><br><span class="line">x2 = np.arange(<span class="number">-2</span>*np.pi, <span class="number">2</span>*np.pi, <span class="number">1</span>)</span><br><span class="line">y2 = np.sin(<span class="number">3</span>*x2)/x2</span><br><span class="line"></span><br><span class="line">plt.title(<span class="string">'不同图像之间层级调整示例'</span>)</span><br><span class="line">plt.xlabel(<span class="string">'x 轴'</span>)</span><br><span class="line">plt.ylabel(<span class="string">'y 轴'</span>)</span><br><span class="line"></span><br><span class="line">plt.plot(x1, y1, zorder=<span class="number">1</span>, c=<span class="string">'b'</span>, linewidth=<span class="number">3.5</span>, label=<span class="string">'线性图'</span>)</span><br><span class="line">plt.scatter(x2, y2, zorder=<span class="number">2</span>, c=<span class="string">'r'</span>, s=<span class="number">40</span>, label=<span class="string">'散点图'</span>)</span><br><span class="line">plt.legend()</span><br><span class="line"></span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/TRHX/ImageHosting/ITRHX-PIC/A72/09.png" alt="09"></p><h2 id="【9x00】框选部分数据"><a href="#【9x00】框选部分数据" class="headerlink" title="【9x00】框选部分数据"></a><font color="#FF0000">【9x00】框选部分数据</font></h2><p>有时候我们希望能够框选一部分数据来强调其重要性，<code>matplotlib.patches.Polygon()</code> 方法的作用是生成不规则的多边形补丁，<code>matplotlib.patches</code> 还有另外的方法可以生成矩形、圆形等其他图形，具体参见前面的文章<a href="https://itrhx.blog.csdn.net/article/details/105828143" target="_blank" rel="noopener">《Python 数据分析三剑客之 Matplotlib（三）：图例 / LaTeX / 刻度 / 子图 / 补丁等基本图像属性》</a>，生成补丁之后，通过 <code>axes.add_patch()</code> 方法将其添加到绘图区（axes）即可。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">import</span> matplotlib.patches <span class="keyword">as</span> mpathes</span><br><span class="line"></span><br><span class="line">plt.rcParams[<span class="string">'font.sans-serif'</span>] = [<span class="string">'Microsoft YaHei'</span>]</span><br><span class="line"></span><br><span class="line">plt.figure(figsize=(<span class="number">8.4</span>, <span class="number">5.8</span>))</span><br><span class="line"></span><br><span class="line">x1 = np.arange(<span class="number">0</span>, <span class="number">1000</span>, <span class="number">10</span>)</span><br><span class="line">y1 = np.random.randint(<span class="number">0</span>, <span class="number">1000</span>, <span class="number">100</span>)</span><br><span class="line">x2 = np.arange(<span class="number">0</span>, <span class="number">500</span>, <span class="number">10</span>)</span><br><span class="line">y2 = np.random.randint(<span class="number">200</span>, <span class="number">800</span>, <span class="number">50</span>)</span><br><span class="line">x3 = np.random.randint(<span class="number">50</span>, <span class="number">800</span>, <span class="number">80</span>)</span><br><span class="line">y3 = np.random.randint(<span class="number">50</span>, <span class="number">800</span>, <span class="number">80</span>)</span><br><span class="line">x4 = np.array([<span class="number">0</span>, <span class="number">100</span>, <span class="number">300</span>, <span class="number">400</span>, <span class="number">350</span>, <span class="number">500</span>, <span class="number">450</span>, <span class="number">367</span>, <span class="number">420</span>, <span class="number">490</span>])</span><br><span class="line">y4 = np.array([<span class="number">267</span>, <span class="number">800</span>, <span class="number">453</span>, <span class="number">500</span>, <span class="number">600</span>, <span class="number">420</span>, <span class="number">380</span>, <span class="number">503</span>, <span class="number">390</span>, <span class="number">600</span>])</span><br><span class="line"></span><br><span class="line">plt.title(<span class="string">'散点图数据框选示例'</span>, fontsize=<span class="number">15</span>)</span><br><span class="line">plt.xlabel(<span class="string">'x 轴'</span>, fontsize=<span class="number">15</span>)</span><br><span class="line">plt.ylabel(<span class="string">'y 轴'</span>, fontsize=<span class="number">15</span>)</span><br><span class="line">plt.scatter(x1, y1, c=<span class="string">'r'</span>, s=<span class="number">50</span>, alpha=<span class="number">0.7</span>, label=<span class="string">'RED'</span>)</span><br><span class="line">plt.scatter(x2, y2, c=<span class="string">'b'</span>, s=<span class="number">100</span>, alpha=<span class="number">0.7</span>, label=<span class="string">'BLUE'</span>)</span><br><span class="line">plt.scatter(x3, y3, c=<span class="string">'g'</span>, s=<span class="number">150</span>, alpha=<span class="number">0.7</span>, label=<span class="string">'GREEN'</span>)</span><br><span class="line">plt.scatter(x4, y4, c=<span class="string">'y'</span>, s=<span class="number">250</span>, alpha=<span class="number">0.7</span>, label=<span class="string">'YELLOW'</span>)</span><br><span class="line">plt.legend(loc=<span class="string">'upper right'</span>, borderpad=<span class="number">1</span>, edgecolor=<span class="string">'k'</span>, framealpha=<span class="number">1</span>, labelspacing=<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">Polygon_point = [[<span class="number">100</span>, <span class="number">800</span>], [<span class="number">0</span>, <span class="number">267</span>], [<span class="number">500</span>, <span class="number">420</span>], [<span class="number">490</span>, <span class="number">600</span>]]        <span class="comment"># 多边形补丁的顶点坐标</span></span><br><span class="line">polygon = mpathes.Polygon(Polygon_point, color=<span class="string">'#FF69B4'</span>, alpha=<span class="number">0.3</span>)  <span class="comment"># 绘制补丁，框选部分数据</span></span><br><span class="line">ax = plt.gca()          <span class="comment"># 获取当前绘图区（gca = Get Current Axes）</span></span><br><span class="line">ax.add_patch(polygon)   <span class="comment"># 将补丁添加到当前绘图区</span></span><br><span class="line"></span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/TRHX/ImageHosting/ITRHX-PIC/A72/10.png" alt="10"></p><hr><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">这里是一段防爬虫文本，请读者忽略。</span></span><br><span class="line"><span class="string">本文原创首发于</span> <span class="string">CSDN，作者</span> <span class="string">TRHX。</span></span><br><span class="line"><span class="string">博客首页：https://itrhx.blog.csdn.net/</span></span><br><span class="line"><span class="string">本文链接：https://itrhx.blog.csdn.net/article/details/105914929</span></span><br><span class="line"><span class="string">未经授权，禁止转载！恶意转载，后果自负！尊重原创，远离剽窃！</span></span><br></pre></td></tr></table></figure><hr>]]></content>
    
    <summary type="html">
    
      Python 数据分析三剑客之 Matplotlib（五）：散点图的绘制。
    
    </summary>
    
      <category term="Python 数据分析" scheme="https://www.itrhx.com/categories/Python-%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/"/>
    
      <category term="Matplotlib" scheme="https://www.itrhx.com/categories/Python-%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/Matplotlib/"/>
    
    
      <category term="Matplotlib" scheme="https://www.itrhx.com/tags/Matplotlib/"/>
    
      <category term="散点图" scheme="https://www.itrhx.com/tags/%E6%95%A3%E7%82%B9%E5%9B%BE/"/>
    
  </entry>
  
  <entry>
    <title>Python 数据分析三剑客之 Matplotlib（四）：线性图的绘制</title>
    <link href="https://www.itrhx.com/2020/04/16/A71-Matplotlib-04/"/>
    <id>https://www.itrhx.com/2020/04/16/A71-Matplotlib-04/</id>
    <published>2020-04-16T14:42:30.239Z</published>
    <updated>2020-07-06T13:31:48.930Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>Matplotlib 系列文章：</p><ul><li><a href="https://www.itrhx.com/2020/04/10/A68-Matplotlib-01/">Python 数据分析三剑客之 Matplotlib（一）：初识 Matplotlib 与其 matplotibrc 配置文件</a></li><li><a href="https://www.itrhx.com/2020/04/12/A69-Matplotlib-02/">Python 数据分析三剑客之 Matplotlib（二）：文本描述 / 中文支持 / 画布 / 网格等基本图像属性</a></li><li><a href="https://www.itrhx.com/2020/04/14/A70-Matplotlib-03/">Python 数据分析三剑客之 Matplotlib（三）：图例 / LaTeX / 刻度 / 子图 / 补丁等基本图像属性</a></li><li><a href="https://www.itrhx.com/2020/04/16/A71-Matplotlib-04/">Python 数据分析三剑客之 Matplotlib（四）：线性图的绘制</a></li><li><a href="https://www.itrhx.com/2020/04/18/A72-Matplotlib-05/">Python 数据分析三剑客之 Matplotlib（五）：散点图的绘制</a></li><li><a href="https://www.itrhx.com/2020/04/21/A73-Matplotlib-06/">Python 数据分析三剑客之 Matplotlib（六）：直方图 / 柱状图 / 条形图的绘制</a></li><li><a href="https://www.itrhx.com/2020/04/24/A74-Matplotlib-07/">Python 数据分析三剑客之 Matplotlib（七）：饼状图的绘制</a></li><li><a href="https://www.itrhx.com/2020/04/30/A75-Matplotlib-08/">Python 数据分析三剑客之 Matplotlib（八）：等高线 / 等值线图的绘制</a></li><li><a href="https://www.itrhx.com/2020/06/03/A76-Matplotlib-09/">Python 数据分析三剑客之 Matplotlib（九）：极区图 / 极坐标图 / 雷达图的绘制</a></li><li><a href="https://www.itrhx.com/2020/06/08/A77-Matplotlib-10/">Python 数据分析三剑客之 Matplotlib（十）：3D 图的绘制</a></li><li><a href="https://www.itrhx.com/2020/06/09/A78-Matplotlib-11/">Python 数据分析三剑客之 Matplotlib（十一）：最热门最常用的 50 个图表</a>【译文】</li></ul><p>专栏：</p><p>【<a href="https://www.itrhx.com/categories/Python-%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/NumPy/">NumPy 专栏</a>】【<a href="https://www.itrhx.com/categories/Python-%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/Pandas/">Pandas 专栏</a>】【<a href="https://www.itrhx.com/categories/Python-%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/Matplotlib/">Matplotlib 专栏</a>】</p><p>推荐学习资料与网站：</p><p>【<a href="https://www.numpy.org.cn/" target="_blank" rel="noopener">NumPy 中文网</a>】【<a href="https://www.pypandas.cn/" target="_blank" rel="noopener">Pandas 中文网</a>】【<a href="https://www.matplotlib.org.cn/" target="_blank" rel="noopener">Matplotlib 中文网</a>】【<a href="https://github.com/TRHX/Python-quick-reference-table" target="_blank" rel="noopener">NumPy、Matplotlib、Pandas 速查表</a>】</p><hr><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">这里是一段防爬虫文本，请读者忽略。</span></span><br><span class="line"><span class="string">本文原创首发于</span> <span class="string">CSDN，作者</span> <span class="string">TRHX。</span></span><br><span class="line"><span class="string">博客首页：https://itrhx.blog.csdn.net/</span></span><br><span class="line"><span class="string">本文链接：https://itrhx.blog.csdn.net/article/details/105839855</span></span><br><span class="line"><span class="string">未经授权，禁止转载！恶意转载，后果自负！尊重原创，远离剽窃！</span></span><br></pre></td></tr></table></figure><hr><h2 id="【1x00】方法描述"><a href="#【1x00】方法描述" class="headerlink" title="【1x00】方法描述"></a><font color="#FF0000">【1x00】方法描述</font></h2><p><code>matplotlib.pyplot.plot()</code> 函数可以用于绘制线性图。</p><p>本文用到的其他图像属性可参考前面的两篇文章：</p><p><a href="https://itrhx.blog.csdn.net/article/details/105828049" target="_blank" rel="noopener">《Python 数据分析三剑客之 Matplotlib（二）：文本描述 / 中文支持 / 画布 / 网格等基本图像属性》</a><br><a href="https://itrhx.blog.csdn.net/article/details/105828143" target="_blank" rel="noopener">《Python 数据分析三剑客之 Matplotlib（三）：图例 / LaTeX / 刻度 / 子图等基本图像属性》</a></p><p>基本语法：<code>matplotlib.pyplot.plot(x, y[, fmt, \*\*kwargs])</code></p><table><thead><tr><th>参数</th><th>描述</th></tr></thead><tbody><tr><td>x</td><td>x 轴数据，数组类型或者标量，x 值是可选的，默认为 <code>range(len(y))</code>，通常为一维数组</td></tr><tr><td>y</td><td>y 轴数据，数组类型或者标量，通常为一维数组</td></tr><tr><td>fmt</td><td>str 类型，格式字符串，由标记、线条和颜色部分组成<br><code>fmt = &#39;[marker][line][color]&#39;</code>，例如 <code>ro</code> 表示红色圆圈，三个参数的取值见后表</td></tr><tr><td>**kwargs</td><td>可选项，其他 <a href="https://matplotlib.org/api/_as_gen/matplotlib.lines.Line2D.html#matplotlib.lines.Line2D" target="_blank" rel="noopener">Line2D</a> 属性，常用属性见下表</td></tr></tbody></table><p>部分常见 Line2D 属性如下表，完整属性参见<a href="https://matplotlib.org/api/_as_gen/matplotlib.lines.Line2D.html#matplotlib.lines.Line2D" target="_blank" rel="noopener">官方文档</a>。</p><table><thead><tr><th>属性</th><th>描述</th></tr></thead><tbody><tr><td>alpha</td><td>线条透明度，float 类型，取值范围：<code>[0, 1]</code>，默认为 1.0，即不透明</td></tr><tr><td>antialiased / aa</td><td>是否使用抗锯齿渲染，默认为 True</td></tr><tr><td>color / c</td><td>线条颜色，支持英文颜色名称及其简写、十六进制颜色码等，更多颜色示例参见官网 <a href="https://matplotlib.org/gallery/color/color_demo.html" target="_blank" rel="noopener">Color Demo</a></td></tr><tr><td>linestyle / ls</td><td>线条样式：<code>&#39;-&#39;</code> or <code>&#39;solid&#39;</code>, <code>&#39;--&#39;</code> or <code>&#39;dashed&#39;</code>, <code>&#39;-.&#39;</code> or <code>&#39;dashdot&#39;</code> <br> <code>&#39;:&#39;</code> or <code>&#39;dotted&#39;</code>, <code>&#39;none&#39;</code> or <code>&#39; &#39;</code> or <code>&#39;&#39;</code></td></tr><tr><td>linewidth / lw</td><td>线条宽度，float 类型，默认 0.8</td></tr><tr><td>markeredgecolor / mec</td><td>marker 标记的边缘颜色</td></tr><tr><td>markeredgewidth / mew</td><td>marker 标记的边缘宽度</td></tr><tr><td>markerfacecolor / mfc</td><td>marker 标记的颜色</td></tr><tr><td>markerfacecoloralt / mfcalt</td><td>marker 标记的备用颜色</td></tr><tr><td>markersize / ms</td><td>marker 标记的大小</td></tr></tbody></table><p>fmt 中 <code>marker</code>、<code>line</code>、<code>color</code> 三个参数的取值：</p><table><tr><td bgcolor="#7FFFD4" colspan="2"><strong><font size="3px">marker：线条标记样式（线条上每个数据点的样式）</font></strong></td></tr></table><table><thead><tr><th>字符</th><th>描述</th></tr></thead><tbody><tr><td><code>&#39;.&#39;</code></td><td>点标记（point marker）</td></tr><tr><td><code>&#39;,&#39;</code></td><td>像素点标记（pixel marker）</td></tr><tr><td><code>&#39;o&#39;</code></td><td>圆圈标记（circle marker）</td></tr><tr><td><code>&#39;v&#39;</code></td><td>下三角标记（triangle_down marker）</td></tr><tr><td><code>&#39;^&#39;</code></td><td>上三角标记（triangle_up marker）</td></tr><tr><td><code>&#39;&lt;&#39;</code></td><td>左三角标记（triangle_left marker）</td></tr><tr><td><code>&#39;&gt;&#39;</code></td><td>右三角标记（triangle_right marker）</td></tr><tr><td><code>&#39;1&#39;</code></td><td>下三叉星标记（tri_down marker）</td></tr><tr><td><code>&#39;2&#39;</code></td><td>上三叉星标记（tri_up marker）</td></tr><tr><td><code>&#39;3&#39;</code></td><td>左三叉星标记（tri_left marker）</td></tr><tr><td><code>&#39;4&#39;</code></td><td>右三叉星标记（tri_right marker）</td></tr><tr><td><code>&#39;s&#39;</code></td><td>正方形标记（square marker）</td></tr><tr><td><code>&#39;p&#39;</code></td><td>五角形标记（pentagon marker）</td></tr><tr><td><code>&#39;*&#39;</code></td><td>星号标记（star marker）</td></tr><tr><td><code>&#39;h&#39;</code></td><td>六边形标记（hexagon1 marker）</td></tr><tr><td><code>&#39;H&#39;</code></td><td>六边形标记（hexagon2 marker）</td></tr><tr><td><code>&#39;+&#39;</code></td><td>加号标记（plus marker）</td></tr><tr><td><code>&#39;x&#39;</code></td><td>X 号标记（x marker）</td></tr><tr><td><code>&#39;D&#39;</code></td><td>菱形标记（diamond marker）</td></tr><tr><td><code>&#39;d&#39;</code></td><td>细菱形标记（thin_diamond marker）</td></tr><tr><td>`’</td><td>‘`</td><td>垂直线标记（vline marker）</td></tr><tr><td><code>&#39;_&#39;</code></td><td>水平线标记（hline marker）</td></tr></tbody></table><table><tr><td bgcolor="#7FFFD4" colspan="2"><strong><font size="3px">line：线条样式</font></strong></td></tr></table><table><thead><tr><th>字符</th><th>描述</th></tr></thead><tbody><tr><td><code>&#39;-&#39;</code></td><td>实线样式（solid line style）</td></tr><tr><td><code>&#39;--&#39;</code></td><td>虚线样式（dashed line style）</td></tr><tr><td><code>&#39;-.&#39;</code></td><td>点划线样式（dash-dot line style）</td></tr><tr><td><code>&#39;:&#39;</code></td><td>点样式（dotted line style）</td></tr></tbody></table><table><tr><td bgcolor="#7FFFD4" colspan="2"><strong><font size="3px">color：线条颜色，支持英文颜色名称及其简写、十六进制颜色码等<br></font></strong></td></tr></table><table><thead><tr><th>字符</th><th>描述</th></tr></thead><tbody><tr><td><code>&#39;b&#39;</code></td><td>蓝色（blue）</td></tr><tr><td><code>&#39;g&#39;</code></td><td>绿色（green）</td></tr><tr><td><code>&#39;r&#39;</code></td><td>红色（red）</td></tr><tr><td><code>&#39;c&#39;</code></td><td>青色（cyan）</td></tr><tr><td><code>&#39;m&#39;</code></td><td>品红（magenta）</td></tr><tr><td><code>&#39;y&#39;</code></td><td>黄色（yellow）</td></tr><tr><td><code>&#39;k&#39;</code></td><td>黑色（black）</td></tr><tr><td><code>&#39;w&#39;</code></td><td>白色（white）</td></tr></tbody></table><p>fmt 举例：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">'b'</span>    <span class="comment"># 默认形状的蓝色标记</span></span><br><span class="line"><span class="string">'or'</span>   <span class="comment"># 红圈</span></span><br><span class="line"><span class="string">'-g'</span>   <span class="comment"># 绿色实线</span></span><br><span class="line"><span class="string">'--'</span>   <span class="comment"># 默认颜色的虚线</span></span><br><span class="line"><span class="string">'^k:'</span>  <span class="comment"># 黑色三角形标记，由虚线连接</span></span><br></pre></td></tr></table></figure><h2 id="【2x00】基本示例"><a href="#【2x00】基本示例" class="headerlink" title="【2x00】基本示例"></a><font color="#FF0000">【2x00】基本示例</font></h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"></span><br><span class="line">plt.rcParams[<span class="string">'font.sans-serif'</span>] = [<span class="string">'Microsoft YaHei'</span>]  <span class="comment"># 设置显示中文</span></span><br><span class="line"></span><br><span class="line">x = np.arange(<span class="number">-2</span>*np.pi, <span class="number">2</span>*np.pi, <span class="number">0.01</span>)</span><br><span class="line">y = np.sin(<span class="number">3</span>*x)/x</span><br><span class="line">plt.title(<span class="string">'线性图示例'</span>)   <span class="comment"># 设置标题</span></span><br><span class="line">plt.xlabel(<span class="string">'x 轴'</span>)       <span class="comment"># 设置 x 轴标签</span></span><br><span class="line">plt.ylabel(<span class="string">'y 轴'</span>)       <span class="comment"># 设置 y 轴标签</span></span><br><span class="line"></span><br><span class="line">plt.plot(x, y)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/TRHX/ImageHosting/ITRHX-PIC/A71/01.png" alt="01"></p><h2 id="【3x00】多条数据"><a href="#【3x00】多条数据" class="headerlink" title="【3x00】多条数据"></a><font color="#FF0000">【3x00】多条数据</font></h2><p>绘制多条数据，设置不同数据，然后多次调用 <code>plt.plot()</code> 函数即可，不同数据的线条颜色会不同，系统随机，可单独指定不同颜色。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"></span><br><span class="line">plt.rcParams[<span class="string">'font.sans-serif'</span>] = [<span class="string">'Microsoft YaHei'</span>]</span><br><span class="line"></span><br><span class="line">x = np.arange(<span class="number">-2</span>*np.pi, <span class="number">2</span>*np.pi, <span class="number">0.01</span>)</span><br><span class="line">y1 = np.sin(<span class="number">3</span>*x)/x</span><br><span class="line">y2 = np.sin(<span class="number">2</span>*x)/x</span><br><span class="line">y3 = np.sin(<span class="number">1</span>*x)/x</span><br><span class="line">plt.title(<span class="string">'多数据线性图示例'</span>)</span><br><span class="line">plt.xlabel(<span class="string">'x 轴'</span>)</span><br><span class="line">plt.ylabel(<span class="string">'y 轴'</span>)</span><br><span class="line"></span><br><span class="line">plt.plot(x, y1)</span><br><span class="line">plt.plot(x, y2)</span><br><span class="line">plt.plot(x, y3)</span><br><span class="line"></span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/TRHX/ImageHosting/ITRHX-PIC/A71/02.png" alt="02"></p><h2 id="【4x00】设置颜色-样式-图例"><a href="#【4x00】设置颜色-样式-图例" class="headerlink" title="【4x00】设置颜色 / 样式 / 图例"></a><font color="#FF0000">【4x00】设置颜色 / 样式 / 图例</font></h2><p>设置线条颜色样式等属性直接在 <code>plot()</code> 函数里面添加相应参数即可，设置图例则需要调用 <code>legend()</code> 方法。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"></span><br><span class="line">plt.rcParams[<span class="string">'font.sans-serif'</span>] = [<span class="string">'Microsoft YaHei'</span>]</span><br><span class="line"></span><br><span class="line">x1 = np.arange(<span class="number">-2</span>*np.pi, <span class="number">2</span>*np.pi, <span class="number">0.01</span>)</span><br><span class="line">y1 = np.sin(<span class="number">3</span>*x1)/x1</span><br><span class="line">y2 = np.sin(<span class="number">2</span>*x1)/x1</span><br><span class="line"></span><br><span class="line">x3 = np.arange(<span class="number">-2</span>*np.pi, <span class="number">2</span>*np.pi, <span class="number">2</span>)</span><br><span class="line">y3 = np.array([<span class="number">0</span>, <span class="number">2</span>, <span class="number">1.5</span>, <span class="number">1</span>, <span class="number">2.4</span>, <span class="number">-0.2</span>, <span class="number">1.7</span>])</span><br><span class="line"></span><br><span class="line">plt.title(<span class="string">'线性图自定义样式示例'</span>)</span><br><span class="line">plt.xlabel(<span class="string">'x 轴'</span>)</span><br><span class="line">plt.ylabel(<span class="string">'y 轴'</span>)</span><br><span class="line"></span><br><span class="line">plt.plot(x1, y1, <span class="string">'--r'</span>, label=<span class="string">'x1, y1'</span>)                               <span class="comment"># 线条样式为 --，颜色为 r（红色）</span></span><br><span class="line">plt.plot(x1, y2, color=<span class="string">'green'</span>, label=<span class="string">'x1, y2'</span>)                       <span class="comment"># 样式默认，颜色为绿色</span></span><br><span class="line">plt.plot(x3, y3, marker=<span class="string">'o'</span>, mfc=<span class="string">'r'</span>, linestyle=<span class="string">':'</span>, label=<span class="string">'x3, y3'</span>)  <span class="comment"># 标记样式为 o，颜色为 r（红色），线条样式为 :</span></span><br><span class="line">plt.legend(edgecolor=<span class="string">'#87A3CC'</span>, facecolor=<span class="string">'#F5F5F5'</span>)                  <span class="comment"># 图例</span></span><br><span class="line"></span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/TRHX/ImageHosting/ITRHX-PIC/A71/03.png" alt="03"></p><hr><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">这里是一段防爬虫文本，请读者忽略。</span></span><br><span class="line"><span class="string">本文原创首发于</span> <span class="string">CSDN，作者</span> <span class="string">TRHX。</span></span><br><span class="line"><span class="string">博客首页：https://itrhx.blog.csdn.net/</span></span><br><span class="line"><span class="string">本文链接：https://itrhx.blog.csdn.net/article/details/105839855</span></span><br><span class="line"><span class="string">未经授权，禁止转载！恶意转载，后果自负！尊重原创，远离剽窃！</span></span><br></pre></td></tr></table></figure><hr><h2 id="【5x00】设置刻度"><a href="#【5x00】设置刻度" class="headerlink" title="【5x00】设置刻度"></a><font color="#FF0000">【5x00】设置刻度</font></h2><p>调用 <code>xticks()</code> 和 <code>yticks()</code> 函数可以对坐标刻度进行自定义，该函数接收两个参数，第一个参数表示要显示的刻度位置，第二个参数表示在对应刻度线上要显示的标签信息，标签信息支持 LeTeX 数学公式，使用时要用美元符号 <code>$</code> 包围起来。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"></span><br><span class="line">plt.rcParams[<span class="string">'font.sans-serif'</span>] = [<span class="string">'Microsoft YaHei'</span>]</span><br><span class="line"></span><br><span class="line">x = np.arange(<span class="number">-2</span>*np.pi, <span class="number">2</span>*np.pi, <span class="number">0.01</span>)</span><br><span class="line">y1 = np.sin(<span class="number">3</span>*x)/x</span><br><span class="line">y2 = np.sin(<span class="number">2</span>*x)/x</span><br><span class="line">y3 = np.sin(<span class="number">1</span>*x)/x</span><br><span class="line">plt.title(<span class="string">'线性图设置刻度示例'</span>)</span><br><span class="line">plt.xlabel(<span class="string">'x 轴'</span>)</span><br><span class="line">plt.ylabel(<span class="string">'y 轴'</span>)</span><br><span class="line"></span><br><span class="line">plt.plot(x, y1, <span class="string">'--r'</span>, label=<span class="string">'sin(3*x)/x'</span>)</span><br><span class="line">plt.plot(x, y2, color=<span class="string">'green'</span>, linestyle=<span class="string">':'</span>, label=<span class="string">'sin(2*x)/x'</span>)</span><br><span class="line">plt.plot(x, y3, label=<span class="string">'sin(1*x)/x'</span>)</span><br><span class="line">plt.legend(edgecolor=<span class="string">'#87A3CC'</span>, facecolor=<span class="string">'#F5F5F5'</span>)</span><br><span class="line"></span><br><span class="line">plt.xticks((<span class="number">-2</span>*np.pi, -np.pi, <span class="number">0</span>, np.pi, <span class="number">2</span>*np.pi), (<span class="string">r'$-2\pi$'</span>, <span class="string">r'$-\pi$'</span>, <span class="string">'$0$'</span>, <span class="string">r'$\pi$'</span>, <span class="string">r'$2\pi$'</span>))</span><br><span class="line">plt.yticks((<span class="number">-1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>))</span><br><span class="line"></span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/TRHX/ImageHosting/ITRHX-PIC/A71/04.png" alt="04"></p><h2 id="【6x00】隐藏画布边框"><a href="#【6x00】隐藏画布边框" class="headerlink" title="【6x00】隐藏画布边框"></a><font color="#FF0000">【6x00】隐藏画布边框</font></h2><p>Matplotlib 所绘制的图表中的每个绘图元素，例如线条 Line2D、文字 Text、刻度等在内存中都有一个对象与之对应。</p><p><code>matplotlib.pyplot.gca()</code> 函数用于获取当前的绘图区 <code>Axes</code>（Get Current Axes）</p><p><code>matplotlib.pyplot.gcf()</code> 函数用于获取当前的画布 <code>Figure</code>（Get Current Figure）</p><p>例如：<code>matplotlib.pyplot.plot()</code> 实际上会通过 <code>matplotlib.pyplot.gca()</code> 获得当前的 <code>Axes</code> 对象 <code>ax</code>，然后再调用 <code>ax.plot()</code> 方法实现真正的绘图。我们可以通过这种方法来实现画布边框的隐藏和坐标轴的移动。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"></span><br><span class="line">plt.rcParams[<span class="string">'font.sans-serif'</span>] = [<span class="string">'Microsoft YaHei'</span>]</span><br><span class="line"></span><br><span class="line">x = np.arange(<span class="number">-2</span>*np.pi, <span class="number">2</span>*np.pi, <span class="number">0.01</span>)</span><br><span class="line">y1 = np.sin(<span class="number">3</span>*x)/x</span><br><span class="line">y2 = np.sin(<span class="number">2</span>*x)/x</span><br><span class="line">y3 = np.sin(<span class="number">1</span>*x)/x</span><br><span class="line">plt.title(<span class="string">'线性图隐藏画布边框示例'</span>)</span><br><span class="line">plt.xlabel(<span class="string">'x 轴'</span>)</span><br><span class="line">plt.ylabel(<span class="string">'y 轴'</span>)</span><br><span class="line"></span><br><span class="line">plt.plot(x, y1, <span class="string">'--r'</span>, label=<span class="string">'sin(3*x)/x'</span>)</span><br><span class="line">plt.plot(x, y2, color=<span class="string">'green'</span>, linestyle=<span class="string">':'</span>, label=<span class="string">'sin(2*x)/x'</span>)</span><br><span class="line">plt.plot(x, y3, label=<span class="string">'sin(1*x)/x'</span>)</span><br><span class="line">plt.legend(edgecolor=<span class="string">'#87A3CC'</span>, facecolor=<span class="string">'#F5F5F5'</span>)</span><br><span class="line"></span><br><span class="line">plt.xticks((<span class="number">-2</span>*np.pi, -np.pi, <span class="number">0</span>, np.pi, <span class="number">2</span>*np.pi), (<span class="string">r'$-2\pi$'</span>, <span class="string">r'$-\pi$'</span>, <span class="string">'$0$'</span>, <span class="string">r'$\pi$'</span>, <span class="string">r'$2\pi$'</span>))</span><br><span class="line">plt.yticks((<span class="number">-1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>))</span><br><span class="line"></span><br><span class="line">ax = plt.gca()                          <span class="comment"># 获取当前的画布, gca = get current axes</span></span><br><span class="line">ax.spines[<span class="string">'right'</span>].set_visible(<span class="keyword">False</span>)   <span class="comment"># 获取绘图区的轴对象（spines），设置右边框不显示</span></span><br><span class="line">ax.spines[<span class="string">'top'</span>].set_visible(<span class="keyword">False</span>)     <span class="comment"># 获取绘图区的轴对象（spines），设置上边框不显示</span></span><br><span class="line"><span class="comment"># ax.spines['right'].set_color('none')  # 设置颜色为 none，效果与上面的一致</span></span><br><span class="line"><span class="comment"># ax.spines['top'].set_color('none')</span></span><br><span class="line"></span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/TRHX/ImageHosting/ITRHX-PIC/A71/05.png" alt="05"></p><h2 id="【7x00】移动坐标轴"><a href="#【7x00】移动坐标轴" class="headerlink" title="【7x00】移动坐标轴"></a><font color="#FF0000">【7x00】移动坐标轴</font></h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"></span><br><span class="line">plt.rcParams[<span class="string">'font.sans-serif'</span>] = [<span class="string">'Microsoft YaHei'</span>]</span><br><span class="line"></span><br><span class="line">x = np.arange(<span class="number">-2</span>*np.pi, <span class="number">2</span>*np.pi, <span class="number">0.01</span>)</span><br><span class="line">y1 = np.sin(<span class="number">3</span>*x)/x</span><br><span class="line">y2 = np.sin(<span class="number">2</span>*x)/x</span><br><span class="line">y3 = np.sin(<span class="number">1</span>*x)/x</span><br><span class="line">plt.title(<span class="string">'线性图移动坐标轴示例'</span>)</span><br><span class="line">plt.xlabel(<span class="string">'x 轴'</span>)</span><br><span class="line">plt.ylabel(<span class="string">'y 轴'</span>)</span><br><span class="line"></span><br><span class="line">plt.plot(x, y1, <span class="string">'--r'</span>, label=<span class="string">'sin(3*x)/x'</span>)</span><br><span class="line">plt.plot(x, y2, color=<span class="string">'green'</span>, linestyle=<span class="string">':'</span>, label=<span class="string">'sin(2*x)/x'</span>)</span><br><span class="line">plt.plot(x, y3, label=<span class="string">'sin(1*x)/x'</span>)</span><br><span class="line">plt.legend(edgecolor=<span class="string">'#87A3CC'</span>, facecolor=<span class="string">'#F5F5F5'</span>)</span><br><span class="line"></span><br><span class="line">plt.xticks((<span class="number">-2</span>*np.pi, -np.pi, <span class="number">0</span>, np.pi, <span class="number">2</span>*np.pi), (<span class="string">r'$-2\pi$'</span>, <span class="string">r'$-\pi$'</span>, <span class="string">'$0$'</span>, <span class="string">r'$\pi$'</span>, <span class="string">r'$2\pi$'</span>))</span><br><span class="line">plt.yticks((<span class="number">-1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>))</span><br><span class="line"></span><br><span class="line">ax = plt.gca()                          <span class="comment"># 获取当前的画布, gca = get current axes</span></span><br><span class="line">ax.spines[<span class="string">'right'</span>].set_visible(<span class="keyword">False</span>)   <span class="comment"># 获取绘图区的轴对象（spines），设置右边框不显示</span></span><br><span class="line">ax.spines[<span class="string">'top'</span>].set_visible(<span class="keyword">False</span>)     <span class="comment"># 获取绘图区的轴对象（spines），设置上边框不显示</span></span><br><span class="line"><span class="comment"># ax.spines['right'].set_color('none')  # 设置颜色为 none，效果与上面的一致</span></span><br><span class="line"><span class="comment"># ax.spines['top'].set_color('none')</span></span><br><span class="line"></span><br><span class="line">ax.spines[<span class="string">'left'</span>].set_position((<span class="string">'data'</span>, <span class="number">0</span>))    <span class="comment"># 设置两个坐标轴在（0, 0）位置相交</span></span><br><span class="line">ax.spines[<span class="string">'bottom'</span>].set_position((<span class="string">'data'</span>, <span class="number">0</span>))</span><br><span class="line">ax.xaxis.set_ticks_position(<span class="string">'bottom'</span>)          <span class="comment"># 设置 x 坐标轴标签的位置</span></span><br><span class="line">ax.yaxis.set_ticks_position(<span class="string">'left'</span>)            <span class="comment"># 设置 y 坐标轴标签的位置</span></span><br><span class="line"></span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/TRHX/ImageHosting/ITRHX-PIC/A71/06.png" alt="06"></p><h2 id="【8x00】指定位置显示文本"><a href="#【8x00】指定位置显示文本" class="headerlink" title="【8x00】指定位置显示文本"></a><font color="#FF0000">【8x00】指定位置显示文本</font></h2><p><code>matplotlib.pyplot.annotate()</code> 方法可以在指定坐标点添加文本或 LaTeX 描述，也可以在其他位置添加描述后，使用箭头指向某个坐标点。</p><p>基本语法：<code>matplotlib.pyplot.annotate(text, xy, xytext, xycoords, textcoords, ha, va, arrowprops, \*\*kwargs)</code></p><table><thead><tr><th>参数</th><th>描述</th></tr></thead><tbody><tr><td>text</td><td>str 类型，注释的文本</td></tr><tr><td>xy</td><td>被注释的坐标点，格式：<code>(x, y)</code></td></tr><tr><td>xytext</td><td>注释文本的坐标点，格式：<code>(x, y)</code>，默认与 xy 相同</td></tr><tr><td>xycoords</td><td>被注释的坐标点的参考系，取值参见<font color="#FF0000"><strong>表一</strong></font>，默认为 ‘data’</td></tr><tr><td>textcoords</td><td>注释文本的坐标点的参考系，取值参见<font color="#FF0000"><strong>表二</strong></font>，默认为 xycoords 的值</td></tr><tr><td>ha</td><td>注释点在注释文本的左边、右边或中间（<code>left</code>、<code>right</code>、<code>center</code>）</td></tr><tr><td>va</td><td>注释点在注释文本的上边、下边、中间或基线 （<code>top</code>、<code>bottom</code>、<code>center</code>、<code>baseline</code>）</td></tr><tr><td>arrowprops</td><td>dict 字典类型，箭头的样式<br>如果 arrowprops 不包含键 arrowstyle，则允许的键参见<font color="#FF0000"><strong>表三</strong></font><br>如果 arrowprops 包含键 arrowstyle，则允许的键参见<font color="#FF0000"><strong>表四</strong></font></td></tr></tbody></table><table><tr><td bgcolor="#7FFFD4" colspan="2"><strong><font color="#FF0000" size="3px">表一：xycoords 取值类型</font></strong></td></tr></table><table><thead><tr><th>取值</th><th>描述</th></tr></thead><tbody><tr><td>‘figure points’</td><td>以画布左下角为参考，单位为点数</td></tr><tr><td>‘figure pixels’</td><td>以画布左下角为参考，单位为像素</td></tr><tr><td>‘figure fraction’</td><td>以画布左下角为参考，单位为百分比</td></tr><tr><td>‘axes points’</td><td>以绘图区左下角为参考，单位为点数</td></tr><tr><td>‘axes pixels’</td><td>以绘图区左下角为参考，单位为像素</td></tr><tr><td>‘axes fraction’</td><td>以绘图区左下角为参考，单位为百分比</td></tr><tr><td>‘data’</td><td>使用被注释对象的坐标系，即数据的 x, y 轴（默认）</td></tr><tr><td>‘polar’</td><td>使用（θ，r）形式的极坐标系</td></tr></tbody></table><table><tr><td bgcolor="#7FFFD4" colspan="2"><strong><font color="#FF0000" size="3px">表二：textcoords 取值类型</font></strong></td></tr></table><table><thead><tr><th>取值</th><th>描述</th></tr></thead><tbody><tr><td>‘figure points’</td><td>以画布左下角为参考，单位为点数</td></tr><tr><td>‘figure pixels’</td><td>以画布左下角为参考，单位为像素</td></tr><tr><td>‘figure fraction’</td><td>以画布左下角为参考，单位为百分比</td></tr><tr><td>‘axes points’</td><td>以绘图区左下角为参考，单位为点数</td></tr><tr><td>‘axes pixels’</td><td>以绘图区左下角为参考，单位为像素</td></tr><tr><td>‘axes fraction’</td><td>以绘图区左下角为参考，单位为百分比</td></tr><tr><td>‘data’</td><td>使用被注释对象的坐标系，即数据的 x, y 轴</td></tr><tr><td>‘polar’</td><td>使用（θ，r）形式的极坐标系</td></tr><tr><td>‘offset points’</td><td>相对于被注释点的坐标 xy 的偏移量，单位是点</td></tr><tr><td>‘offset pixels’</td><td>相对于被注释点的坐标 xy 的偏移量，单位是像素</td></tr></tbody></table><table><tr><td bgcolor="#7FFFD4" colspan="2"><strong><font color="#FF0000" size="3px">表三：arrowprops 不包含键 arrowstyle 时的取值</font></strong></td></tr></table><table><thead><tr><th>键</th><th>描述</th></tr></thead><tbody><tr><td>width</td><td>箭头的宽度，以点为单位</td></tr><tr><td>headwidth</td><td>箭头底部的宽度，以点为单位</td></tr><tr><td>headlength</td><td>箭头的长度，以点为单位</td></tr><tr><td>shrink</td><td>箭头两端收缩占总长的百分比</td></tr><tr><td>?</td><td>其他 <a href="https://matplotlib.org/api/_as_gen/matplotlib.patches.FancyArrowPatch.html#matplotlib.patches.FancyArrowPatch" target="_blank" rel="noopener">matplotlib.patches.FancyArrowPatch</a> 中的关键字，部分常用关键字参见<font color="#FF0000"><strong>表五</strong></font></td></tr></tbody></table><table><tr><td bgcolor="#7FFFD4" colspan="2"><strong><font color="#FF0000" size="3px">表四：arrowprops 包含键 arrowstyle 时的取值</font></strong></td></tr></table><table><thead><tr><th>取值</th><th>描述</th></tr></thead><tbody><tr><td><code>&#39;-&#39;</code></td><td>None</td></tr><tr><td><code>&#39;-&gt;&#39;</code></td><td>head_length=0.4,head_width=0.2</td></tr><tr><td><code>&#39;-[&#39;</code></td><td>widthB=1.0,lengthB=0.2,angleB=None</td></tr><tr><td><code>&#39;]-&#39;</code></td><td>widthA=1.0, lengthA=0.2, angleA=None</td></tr><tr><td><code>]-[</code></td><td>widthA=1.0, lengthA=0.2, angleA=None, widthB=1.0, lengthB=0.2, angleB=None</td></tr><tr><td>`’</td><td>-</td><td>‘`</td><td>widthA=1.0,widthB=1.0</td></tr><tr><td>`’-</td><td>&gt;’`</td><td>head_length=0.4,head_width=0.2</td></tr><tr><td><code>&#39;&lt;-&#39;</code></td><td>head_length=0.4,head_width=0.2</td></tr><tr><td><code>&#39;&lt;-&gt;&#39;</code></td><td>head_length=0.4,head_width=0.2</td></tr><tr><td>`’&lt;</td><td>-‘`</td><td>head_length=0.4,head_width=0.2</td></tr><tr><td>`’&lt;</td><td>-</td><td>&gt;’`</td><td>head_length=0.4,head_width=0.2</td></tr><tr><td><code>&#39;fancy&#39;</code></td><td>head_length=0.4,head_width=0.4,tail_width=0.4</td></tr><tr><td><code>&#39;simple&#39;</code></td><td>head_length=0.5,head_width=0.5,tail_width=0.2</td></tr><tr><td><code>&#39;wedge&#39;</code></td><td>tail_width=0.3,shrink_factor=0.5</td></tr></tbody></table><table><tr><td bgcolor="#7FFFD4" colspan="2"><strong><font color="#FF0000" size="3px">表五：matplotlib.patches.FancyArrowPatch 常用的键</font></strong></td></tr></table><table><thead><tr><th>键</th><th>描述</th></tr></thead><tbody><tr><td>arrowstyle</td><td>箭头样式，取值参见<font color="#FF0000"><strong>表四</strong></font></td></tr><tr><td>connectionstyle</td><td>连接方式，默认为 <code>arc3</code>，有以下五种取值：<br><code>angle</code>：angleA=90, angleB=0, rad=0.0<br><code>angle3</code>：angleA=90, angleB=0<br><code>arc</code>：angleA=0, angleB=0, armA=None, armB=None, rad=0.0<br><code>arc3</code>：rad=0.0<br><code>bar</code>：armA=0.0, armB=0.0, fraction=0.3, angle=None<br>angle 为箭头旋转的角度，rad 为弧度</td></tr><tr><td>relpos</td><td>箭头起始点相对注释文本的位置，默认为 (0.5, 0.5)，即文本的中心<br>（0，0）表示左下角，（1，1）表示右上角</td></tr><tr><td>patchA</td><td>箭头起点处的图形，默认为文本的边框</td></tr><tr><td>patchB</td><td>箭头终点处的图形，默认为空</td></tr><tr><td>shrinkA</td><td>箭头起点的缩进点数，默认为2</td></tr><tr><td>shrinkB</td><td>箭头终点的缩进点数，默认为2</td></tr><tr><td>？</td><td>其他键值，参见官方文档 <a href="https://matplotlib.org/api/_as_gen/matplotlib.patches.PathPatch.html#matplotlib.patches.PathPatch" target="_blank" rel="noopener">matplotlib.patches.PathPatch</a></td></tr></tbody></table><table><tr><td bgcolor="#7FFFD4" colspan="2"><strong><font color="#FF0000" size="3px">connectionstyle 样式举例</font></strong></td></tr></table><p><img src="https://cdn.jsdelivr.net/gh/TRHX/ImageHosting/ITRHX-PIC/A71/07.png" alt="07"></p><p>应用举例：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"></span><br><span class="line">plt.rcParams[<span class="string">'font.sans-serif'</span>] = [<span class="string">'Microsoft YaHei'</span>]</span><br><span class="line"></span><br><span class="line">x = np.arange(<span class="number">-2</span>*np.pi, <span class="number">2</span>*np.pi, <span class="number">0.01</span>)</span><br><span class="line">y1 = np.sin(<span class="number">3</span>*x)/x</span><br><span class="line">y2 = np.sin(<span class="number">2</span>*x)/x</span><br><span class="line">y3 = np.sin(<span class="number">1</span>*x)/x</span><br><span class="line">plt.title(<span class="string">'线性图显示文本注释示例'</span>)</span><br><span class="line">plt.xlabel(<span class="string">'x 轴'</span>)</span><br><span class="line">plt.ylabel(<span class="string">'y 轴'</span>)</span><br><span class="line"></span><br><span class="line">plt.plot(x, y1, <span class="string">'--r'</span>, label=<span class="string">'sin(3*x)/x'</span>)</span><br><span class="line">plt.plot(x, y2, color=<span class="string">'green'</span>, linestyle=<span class="string">':'</span>, label=<span class="string">'sin(2*x)/x'</span>)</span><br><span class="line">plt.plot(x, y3, label=<span class="string">'sin(1*x)/x'</span>)</span><br><span class="line">plt.legend(edgecolor=<span class="string">'#87A3CC'</span>, facecolor=<span class="string">'#F5F5F5'</span>)</span><br><span class="line"></span><br><span class="line">plt.xticks((<span class="number">-2</span>*np.pi, -np.pi, <span class="number">0</span>, np.pi, <span class="number">2</span>*np.pi), (<span class="string">r'$-2\pi$'</span>, <span class="string">r'$-\pi$'</span>, <span class="string">'$0$'</span>, <span class="string">r'$\pi$'</span>, <span class="string">r'$2\pi$'</span>))</span><br><span class="line">plt.yticks((<span class="number">-1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>))</span><br><span class="line"></span><br><span class="line">ax = plt.gca()                          <span class="comment"># 获取当前的画布, gca = get current axes</span></span><br><span class="line">ax.spines[<span class="string">'right'</span>].set_visible(<span class="keyword">False</span>)   <span class="comment"># 获取绘图区的轴对象（spines），设置右边框不显示</span></span><br><span class="line">ax.spines[<span class="string">'top'</span>].set_visible(<span class="keyword">False</span>)     <span class="comment"># 获取绘图区的轴对象（spines），设置上边框不显示</span></span><br><span class="line"><span class="comment"># ax.spines['right'].set_color('none')  # 设置颜色为 none，效果与上面的一致</span></span><br><span class="line"><span class="comment"># ax.spines['top'].set_color('none')</span></span><br><span class="line"></span><br><span class="line">ax.spines[<span class="string">'left'</span>].set_position((<span class="string">'data'</span>, <span class="number">0</span>))    <span class="comment"># 设置两个坐标轴在（0, 0）位置相交</span></span><br><span class="line">ax.spines[<span class="string">'bottom'</span>].set_position((<span class="string">'data'</span>, <span class="number">0</span>))</span><br><span class="line">ax.xaxis.set_ticks_position(<span class="string">'bottom'</span>)          <span class="comment"># 设置 x 坐标轴标签的位置</span></span><br><span class="line">ax.yaxis.set_ticks_position(<span class="string">'left'</span>)            <span class="comment"># 设置 y 坐标轴标签的位置</span></span><br><span class="line"></span><br><span class="line">plt.annotate(<span class="string">r'$\lim_&#123;x\to 0&#125;\frac&#123;\sin(x)&#125;&#123;x&#125;=1$'</span>,  <span class="comment"># 插入 LaTeX 表达式</span></span><br><span class="line">             xy=[<span class="number">0</span>, <span class="number">1</span>],                              <span class="comment"># 被标记的坐标</span></span><br><span class="line">             xycoords=<span class="string">'data'</span>,                        <span class="comment"># 被标记的坐标的参考系</span></span><br><span class="line">             xytext=[<span class="number">30</span>, <span class="number">30</span>],                        <span class="comment"># 注释文本的坐标</span></span><br><span class="line">             textcoords=<span class="string">'offset points'</span>,             <span class="comment"># 注释文本的坐标的参考系</span></span><br><span class="line">             fontsize=<span class="number">16</span>,                            <span class="comment"># 字体大小</span></span><br><span class="line">             arrowprops=dict(arrowstyle=<span class="string">"-&gt;"</span>, connectionstyle=<span class="string">"arc3, rad=.2"</span>))  <span class="comment"># 箭头样式</span></span><br><span class="line"></span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/TRHX/ImageHosting/ITRHX-PIC/A71/08.png" alt="08"></p><hr><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">这里是一段防爬虫文本，请读者忽略。</span></span><br><span class="line"><span class="string">本文原创首发于</span> <span class="string">CSDN，作者</span> <span class="string">TRHX。</span></span><br><span class="line"><span class="string">博客首页：https://itrhx.blog.csdn.net/</span></span><br><span class="line"><span class="string">本文链接：https://itrhx.blog.csdn.net/article/details/105839855</span></span><br><span class="line"><span class="string">未经授权，禁止转载！恶意转载，后果自负！尊重原创，远离剽窃！</span></span><br></pre></td></tr></table></figure><hr>]]></content>
    
    <summary type="html">
    
      Python 数据分析三剑客之 Matplotlib（四）：线性图的绘制。
    
    </summary>
    
      <category term="Python 数据分析" scheme="https://www.itrhx.com/categories/Python-%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/"/>
    
      <category term="Matplotlib" scheme="https://www.itrhx.com/categories/Python-%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/Matplotlib/"/>
    
    
      <category term="Matplotlib" scheme="https://www.itrhx.com/tags/Matplotlib/"/>
    
      <category term="线性图" scheme="https://www.itrhx.com/tags/%E7%BA%BF%E6%80%A7%E5%9B%BE/"/>
    
  </entry>
  
  <entry>
    <title>Python 数据分析三剑客之 Matplotlib（三）：图例/LaTeX/刻度/子图/补丁等基本图像属性</title>
    <link href="https://www.itrhx.com/2020/04/14/A70-Matplotlib-03/"/>
    <id>https://www.itrhx.com/2020/04/14/A70-Matplotlib-03/</id>
    <published>2020-04-14T13:36:35.265Z</published>
    <updated>2020-07-06T13:31:40.879Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>Matplotlib 系列文章：</p><ul><li><a href="https://www.itrhx.com/2020/04/10/A68-Matplotlib-01/">Python 数据分析三剑客之 Matplotlib（一）：初识 Matplotlib 与其 matplotibrc 配置文件</a></li><li><a href="https://www.itrhx.com/2020/04/12/A69-Matplotlib-02/">Python 数据分析三剑客之 Matplotlib（二）：文本描述 / 中文支持 / 画布 / 网格等基本图像属性</a></li><li><a href="https://www.itrhx.com/2020/04/14/A70-Matplotlib-03/">Python 数据分析三剑客之 Matplotlib（三）：图例 / LaTeX / 刻度 / 子图 / 补丁等基本图像属性</a></li><li><a href="https://www.itrhx.com/2020/04/16/A71-Matplotlib-04/">Python 数据分析三剑客之 Matplotlib（四）：线性图的绘制</a></li><li><a href="https://www.itrhx.com/2020/04/18/A72-Matplotlib-05/">Python 数据分析三剑客之 Matplotlib（五）：散点图的绘制</a></li><li><a href="https://www.itrhx.com/2020/04/21/A73-Matplotlib-06/">Python 数据分析三剑客之 Matplotlib（六）：直方图 / 柱状图 / 条形图的绘制</a></li><li><a href="https://www.itrhx.com/2020/04/24/A74-Matplotlib-07/">Python 数据分析三剑客之 Matplotlib（七）：饼状图的绘制</a></li><li><a href="https://www.itrhx.com/2020/04/30/A75-Matplotlib-08/">Python 数据分析三剑客之 Matplotlib（八）：等高线 / 等值线图的绘制</a></li><li><a href="https://www.itrhx.com/2020/06/03/A76-Matplotlib-09/">Python 数据分析三剑客之 Matplotlib（九）：极区图 / 极坐标图 / 雷达图的绘制</a></li><li><a href="https://www.itrhx.com/2020/06/08/A77-Matplotlib-10/">Python 数据分析三剑客之 Matplotlib（十）：3D 图的绘制</a></li><li><a href="https://www.itrhx.com/2020/06/09/A78-Matplotlib-11/">Python 数据分析三剑客之 Matplotlib（十一）：最热门最常用的 50 个图表</a>【译文】</li></ul><p>专栏：</p><p>【<a href="https://www.itrhx.com/categories/Python-%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/NumPy/">NumPy 专栏</a>】【<a href="https://www.itrhx.com/categories/Python-%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/Pandas/">Pandas 专栏</a>】【<a href="https://www.itrhx.com/categories/Python-%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/Matplotlib/">Matplotlib 专栏</a>】</p><p>推荐学习资料与网站：</p><p>【<a href="https://www.numpy.org.cn/" target="_blank" rel="noopener">NumPy 中文网</a>】【<a href="https://www.pypandas.cn/" target="_blank" rel="noopener">Pandas 中文网</a>】【<a href="https://www.matplotlib.org.cn/" target="_blank" rel="noopener">Matplotlib 中文网</a>】【<a href="https://github.com/TRHX/Python-quick-reference-table" target="_blank" rel="noopener">NumPy、Matplotlib、Pandas 速查表</a>】</p><hr><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">这里是一段防爬虫文本，请读者忽略。</span></span><br><span class="line"><span class="string">本文原创首发于</span> <span class="string">CSDN，作者</span> <span class="string">TRHX。</span></span><br><span class="line"><span class="string">博客首页：https://itrhx.blog.csdn.net/</span></span><br><span class="line"><span class="string">本文链接：https://itrhx.blog.csdn.net/article/details/105828143</span></span><br><span class="line"><span class="string">未经授权，禁止转载！恶意转载，后果自负！尊重原创，远离剽窃！</span></span><br></pre></td></tr></table></figure><hr><h2 id="【1x00】设置图例"><a href="#【1x00】设置图例" class="headerlink" title="【1x00】设置图例"></a><font color="#FF0000">【1x00】设置图例</font></h2><p><code>matplotlib.pyplot.legend()</code> 方法可以为图表设置图例。</p><p>基本语法：<code>matplotlib.pyplot.legend(\*args, \*\*kwargs)</code></p><p>部分常见参数：</p><table><thead><tr><th>参数</th><th>描述</th></tr></thead><tbody><tr><td>loc</td><td>图例在画布中的位置，默认为 best，其他取值：<br><code>best</code>, <code>upper right</code>, <code>upper left</code>, <code>lower left</code> <br> <code>lower right</code>, <code>right</code>, <code>center left</code>, <code>center right</code> <br> <code>lower center</code>, <code>upper center</code>, <code>center</code><br>也可以用数字 0 - 10 来表示上述位置</td></tr><tr><td>bbox_to_anchor</td><td>调整图例在画布中的位置，当 loc 达不到我们想要的效果时，就可以使用该参数<br>该参数接收一个二元数组 (x, y)，x 用于控制图例的左右移动，值越大越向右边移动<br>y 用于控制图例的上下移动，值越大，越向上移动</td></tr><tr><td>borderaxespad</td><td>图例距离轴之间的距离，float 类型，默认为 0.5</td></tr><tr><td>borderpad</td><td>图例边框空白区域大小，float 类型，默认为 0.4</td></tr><tr><td>columnspacing</td><td>图例列间距，float 类型，默认为 2.0</td></tr><tr><td>edgecolor</td><td>图例边缘线颜色，支持英文颜色名称及其简写、十六进制颜色码等<br>更多颜色示例参见<a href="https://matplotlib.org/gallery/color/color_demo.html" target="_blank" rel="noopener">官网 Color Demo</a></td></tr><tr><td>facecolor</td><td>图例背景颜色，默认继承自 <code>axes.facecolor</code><br>其他颜色，支持英文颜色名称及其简写、十六进制颜色码等<br>更多颜色示例参见<a href="https://matplotlib.org/gallery/color/color_demo.html" target="_blank" rel="noopener">官网 Color Demo</a></td></tr><tr><td>fancybox</td><td>是否使用圆形框作为图例背景， 默认为 True</td></tr><tr><td>fontsize</td><td>图例字体大小，默认为 <code>medium</code>，<code>xx-small</code>, <code>x-small</code>, <code>small</code>, <code>medium</code> <br> <code>large</code>, <code>x-large</code>, <code>xx-large</code>, <code>smaller</code>, <code>larger</code><br>也可以使用数字来表示字体大小</td></tr><tr><td>framealpha</td><td>图例透明度，float 类型，默认为 0.8，取值范围：<code>[0, 1]</code></td></tr><tr><td>handleheight</td><td>图例的高度 ，float 类型，默认为 0.7</td></tr><tr><td>handlelength</td><td>图例的宽度，float 类型，默认为 2.0</td></tr><tr><td>handletextpad</td><td>图例和图例文本之间的水平距离，float 类型，默认为 0.8</td></tr><tr><td>labelspacing</td><td>不同图例之间的垂直距离，float 类型，默认为 0.5</td></tr><tr><td>shadow</td><td>是否给图例添加阴影效果，默认为 False</td></tr></tbody></table><h3 id="【1x01】方法一：指定-label-参数"><a href="#【1x01】方法一：指定-label-参数" class="headerlink" title="【1x01】方法一：指定 label 参数"></a><font color="#1BC3FB">【1x01】方法一：指定 label 参数</font></h3><p>在画图的时候先指定 <code>label</code> 标签文本，再调用 <code>legend()</code> 方法即可。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"></span><br><span class="line">plt.rcParams[<span class="string">'font.sans-serif'</span>] = [<span class="string">'Microsoft YaHei'</span>]</span><br><span class="line">x = range(<span class="number">2</span>, <span class="number">26</span>, <span class="number">2</span>)</span><br><span class="line">y = range(<span class="number">0</span>, <span class="number">12</span>)</span><br><span class="line">a = [<span class="number">5</span>, <span class="number">10</span>, <span class="number">15</span>, <span class="number">20</span>, <span class="number">25</span>, <span class="number">30</span>]</span><br><span class="line">b = [<span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>]</span><br><span class="line"></span><br><span class="line">plt.plot(a, b, label=<span class="string">'图例一'</span>)    <span class="comment"># 指定 a,b 数据的图例</span></span><br><span class="line">plt.plot(x, y, label=<span class="string">'图例二'</span>)    <span class="comment"># 指定 x,y 数据的图例</span></span><br><span class="line"></span><br><span class="line">plt.legend(loc=<span class="number">2</span>, edgecolor=<span class="string">'red'</span>, facecolor=<span class="string">'#F5F5F5'</span>)  <span class="comment"># 指定图例位置、边缘线条颜色和背景色</span></span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><h3 id="【1x02】方法二：使用-set-label-方法"><a href="#【1x02】方法二：使用-set-label-方法" class="headerlink" title="【1x02】方法二：使用 set_label 方法"></a><font color="#1BC3FB">【1x02】方法二：使用 set_label 方法</font></h3><p>在画图的时候先使用 <code>set_label()</code> 方法指定标签文本，再调用 <code>legend()</code> 方法即可。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"></span><br><span class="line">plt.rcParams[<span class="string">'font.sans-serif'</span>] = [<span class="string">'Microsoft YaHei'</span>]</span><br><span class="line">x = range(<span class="number">2</span>, <span class="number">26</span>, <span class="number">2</span>)</span><br><span class="line">y = range(<span class="number">0</span>, <span class="number">12</span>)</span><br><span class="line">a = [<span class="number">5</span>, <span class="number">10</span>, <span class="number">15</span>, <span class="number">20</span>, <span class="number">25</span>, <span class="number">30</span>]</span><br><span class="line">b = [<span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>]</span><br><span class="line"></span><br><span class="line">line1, = plt.plot(a, b)</span><br><span class="line">line2, = plt.plot(x, y)</span><br><span class="line">line1.set_label(<span class="string">'图例一'</span>)    <span class="comment"># 指定 a,b 数据的图例</span></span><br><span class="line">line2.set_label(<span class="string">'图例二'</span>)    <span class="comment"># 指定 x,y 数据的图例</span></span><br><span class="line"></span><br><span class="line">plt.legend(loc=<span class="number">2</span>, edgecolor=<span class="string">'red'</span>, facecolor=<span class="string">'#F5F5F5'</span>)  <span class="comment"># 指定图例位置、边缘线条颜色和背景色</span></span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><h3 id="【1x03】方法三：直接使用-legend-方法"><a href="#【1x03】方法三：直接使用-legend-方法" class="headerlink" title="【1x03】方法三：直接使用 legend 方法"></a><font color="#1BC3FB">【1x03】方法三：直接使用 legend 方法</font></h3><p>直接使用 <code>legend()</code> 方法来指定图例标签也可以达到同样效果，图例以列表或者元组形式储存，图例与绘制图形的顺序一一对应。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"></span><br><span class="line">plt.rcParams[<span class="string">'font.sans-serif'</span>] = [<span class="string">'Microsoft YaHei'</span>]</span><br><span class="line">x = range(<span class="number">2</span>, <span class="number">26</span>, <span class="number">2</span>)</span><br><span class="line">y = range(<span class="number">0</span>, <span class="number">12</span>)</span><br><span class="line">a = [<span class="number">5</span>, <span class="number">10</span>, <span class="number">15</span>, <span class="number">20</span>, <span class="number">25</span>, <span class="number">30</span>]</span><br><span class="line">b = [<span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>]</span><br><span class="line"></span><br><span class="line">plt.plot(a, b)</span><br><span class="line">plt.plot(x, y)</span><br><span class="line"></span><br><span class="line">plt.legend([<span class="string">'图例一'</span>, <span class="string">'图例二'</span>], loc=<span class="number">2</span>, edgecolor=<span class="string">'red'</span>, facecolor=<span class="string">'#F5F5F5'</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p>也可以使用两个元组，将绘制的图形和图例一一对应来储存：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"></span><br><span class="line">plt.rcParams[<span class="string">'font.sans-serif'</span>] = [<span class="string">'Microsoft YaHei'</span>]</span><br><span class="line">x = range(<span class="number">2</span>, <span class="number">26</span>, <span class="number">2</span>)</span><br><span class="line">y = range(<span class="number">0</span>, <span class="number">12</span>)</span><br><span class="line">a = [<span class="number">5</span>, <span class="number">10</span>, <span class="number">15</span>, <span class="number">20</span>, <span class="number">25</span>, <span class="number">30</span>]</span><br><span class="line">b = [<span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>]</span><br><span class="line"></span><br><span class="line">line1, = plt.plot(a, b)</span><br><span class="line">line2, = plt.plot(x, y)</span><br><span class="line"></span><br><span class="line">plt.legend((line1, line2), (<span class="string">'图例一'</span>, <span class="string">'图例二'</span>), loc=<span class="number">2</span>, edgecolor=<span class="string">'red'</span>, facecolor=<span class="string">'#F5F5F5'</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p>以上三种方法绘制的图形均一致：</p><p><img src="https://cdn.jsdelivr.net/gh/TRHX/ImageHosting/ITRHX-PIC/A70/01.png" alt="01"></p><h2 id="【2x00】数学公式-LaTeX"><a href="#【2x00】数学公式-LaTeX" class="headerlink" title="【2x00】数学公式 LaTeX"></a><font color="#FF0000">【2x00】数学公式 LaTeX</font></h2><p>LaTeX（LATEX，音译“拉泰赫”）是一种基于 TeX 的排版系统，常用于生成复杂表格和数学公式，Matplotlib 提供了自己的 TeX 表达式解析器，布局引擎和字体，布局引擎基于 Donald Knuth 的 TeX 布局算法改编。使用数学公式时用 <code>$</code> 将其包围起来即可。具体的符号与其对应的英文表示参见官方文档：<a href="https://matplotlib.org/tutorials/text/mathtext.html" target="_blank" rel="noopener">https://matplotlib.org/tutorials/text/mathtext.html</a></p><p>应用举例：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"></span><br><span class="line">t = np.arange(<span class="number">0.0</span>, <span class="number">2.0</span>, <span class="number">0.01</span>)</span><br><span class="line">s = np.sin(<span class="number">2</span>*np.pi*t)</span><br><span class="line"></span><br><span class="line">plt.title(<span class="string">r'$\alpha_i &gt; \beta_i$'</span>, fontsize=<span class="number">20</span>)</span><br><span class="line">plt.text(<span class="number">1</span>, <span class="number">-0.6</span>, <span class="string">r'$\sum_&#123;i=0&#125;^\infty x_i$'</span>, fontsize=<span class="number">20</span>)</span><br><span class="line">plt.text(<span class="number">0.6</span>, <span class="number">0.6</span>, <span class="string">r'$\mathcal&#123;A&#125;\mathrm&#123;sin&#125;(2 \omega t)$'</span>, fontsize=<span class="number">20</span>)</span><br><span class="line">plt.xlabel(<span class="string">'time (s)'</span>)</span><br><span class="line">plt.ylabel(<span class="string">'volts (mV)'</span>)</span><br><span class="line"></span><br><span class="line">plt.plot(t, s)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/TRHX/ImageHosting/ITRHX-PIC/A70/02.png" alt="02"></p><h2 id="【3x00】调整-x-y-轴刻度和范围"><a href="#【3x00】调整-x-y-轴刻度和范围" class="headerlink" title="【3x00】调整 x / y 轴刻度和范围"></a><font color="#FF0000">【3x00】调整 x / y 轴刻度和范围</font></h2><p>在生成图像时，默认会按照所给的数据均匀设置几个刻度，如果对默认的刻度不满意，则可以使用 <code>xticks()</code> 或 <code>yticks()</code> 方法指定刻度值。<code>xlim()</code> 与 <code>ylim()</code> 则可以设置刻度的范围。</p><p>基本语法：<br><code>matplotlib.pyplot.xticks([ticks=None, labels=None, \*\*kwargs])</code><br><code>matplotlib.pyplot.yticks([ticks=None, labels=None, \*\*kwargs])</code></p><table><thead><tr><th>参数</th><th>描述</th></tr></thead><tbody><tr><td>ticks</td><td>数组形式的位置列表，即显示第 n 个位置的刻度，可选项，若传递空列表将删除所有 xtick / ytick</td></tr><tr><td>labels</td><td>数组形式的值，在对应刻度线显示的标签信息。仅当同时传递了刻度时，才能传递此参数</td></tr><tr><td>**kwargs</td><td>其他参数参见 <a href="https://matplotlib.org/api/text_api.html#matplotlib.text.Text" target="_blank" rel="noopener">Text</a></td></tr></tbody></table><p>其他参数里面有一个常用的 <code>rotation</code> 参数，次参数可以用于设置刻度标签的旋转角度，对于标签太长的可以将其旋转一个角度来显示。</p><p>应用举例：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"></span><br><span class="line">plt.rcParams[<span class="string">'font.sans-serif'</span>] = [<span class="string">'Microsoft YaHei'</span>]</span><br><span class="line">x = range(<span class="number">2</span>, <span class="number">26</span>, <span class="number">2</span>)</span><br><span class="line">y = range(<span class="number">0</span>, <span class="number">12</span>)</span><br><span class="line"></span><br><span class="line">plt.plot(x, y)</span><br><span class="line"><span class="comment"># x 轴每隔三个显示一次刻度，旋转45°显示标签</span></span><br><span class="line">plt.xticks(range(<span class="number">2</span>, <span class="number">26</span>, <span class="number">3</span>), (<span class="string">'the &#123;&#125; ticks'</span>.format(i) <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">2</span>, <span class="number">26</span>, <span class="number">3</span>)), rotation=<span class="number">45</span>)</span><br><span class="line"></span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/TRHX/ImageHosting/ITRHX-PIC/A70/03.png" alt="03"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"></span><br><span class="line">plt.rcParams[<span class="string">'font.sans-serif'</span>] = [<span class="string">'Microsoft YaHei'</span>]</span><br><span class="line">x = range(<span class="number">2</span>, <span class="number">26</span>, <span class="number">2</span>)</span><br><span class="line">y = range(<span class="number">0</span>, <span class="number">12</span>)</span><br><span class="line"></span><br><span class="line">plt.xlim((<span class="number">0</span>, <span class="number">30</span>))   <span class="comment"># 设置 x 轴刻度范围</span></span><br><span class="line">plt.plot(x, y)</span><br><span class="line"></span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/TRHX/ImageHosting/ITRHX-PIC/A70/04.png" alt="04"></p><h2 id="【4x00】画布边框与坐标轴的移动"><a href="#【4x00】画布边框与坐标轴的移动" class="headerlink" title="【4x00】画布边框与坐标轴的移动"></a><font color="#FF0000">【4x00】画布边框与坐标轴的移动</font></h2><p>Matplotlib 所绘制的图表中的每个绘图元素，例如线条 Line2D、文字 Text、刻度等在内存中都有一个对象与之对应。</p><p><code>matplotlib.pyplot.gca()</code> 函数用于获取当前的绘图区 <code>Axes</code>（Get Current Axes）</p><p><code>matplotlib.pyplot.gcf()</code> 函数用于获取当前的画布 <code>Figure</code>（Get Current Figure）</p><p>例如：<code>matplotlib.pyplot.plot()</code> 实际上会通过 <code>matplotlib.pyplot.gca()</code> 获得当前的 Axes对象 <code>ax</code>，然后再调用 <code>ax.plot()</code> 方法实现真正的绘图。我们可以通过这种方法来实现画布边框的隐藏和坐标轴的移动。</p><p>应用举例：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">x = np.arange(<span class="number">0</span>, <span class="number">2</span>*np.pi, np.pi/<span class="number">100</span>)</span><br><span class="line">y = np.sin(x)</span><br><span class="line">plt.plot(x, y)</span><br><span class="line"></span><br><span class="line">plt.xlabel(<span class="string">'X axis'</span>)</span><br><span class="line">plt.ylabel(<span class="string">'Y axis'</span>)</span><br><span class="line"></span><br><span class="line">ticks = (<span class="number">0</span>, np.pi/<span class="number">2</span>, np.pi, <span class="number">3</span>*np.pi/<span class="number">2</span>, <span class="number">2</span>*np.pi)</span><br><span class="line">labels = (<span class="string">'0'</span>, <span class="string">r'$\frac&#123;\pi&#125; &#123;2&#125;$'</span>, <span class="string">r'$\pi$'</span>, <span class="string">r'$\frac&#123;3\pi&#125; &#123;2&#125;$'</span>, <span class="string">r'$2\pi$'</span>)</span><br><span class="line">plt.xticks(ticks, labels)                      <span class="comment"># 设置 x 坐标轴显示的数据</span></span><br><span class="line"></span><br><span class="line">ax = plt.gca()                                 <span class="comment"># 获取当前的画布, gca = get current axes</span></span><br><span class="line">ax.spines[<span class="string">'right'</span>].set_visible(<span class="keyword">False</span>)          <span class="comment"># 设置右边框不显示</span></span><br><span class="line">ax.spines[<span class="string">'top'</span>].set_visible(<span class="keyword">False</span>)            <span class="comment"># 设置上边框不显示</span></span><br><span class="line"><span class="comment"># ax.spines['top'].set_color('none')           # 设置颜色为无也可以</span></span><br><span class="line"></span><br><span class="line">ax.xaxis.set_ticks_position(<span class="string">'bottom'</span>)          <span class="comment"># 设置 x 坐标轴的标签位置</span></span><br><span class="line">ax.yaxis.set_ticks_position(<span class="string">'left'</span>)            <span class="comment"># 设置 y 坐标轴的标签位置</span></span><br><span class="line">ax.spines[<span class="string">'bottom'</span>].set_position((<span class="string">'data'</span>, <span class="number">0</span>))  <span class="comment"># 设置 x 轴在 (0, 0) 位置</span></span><br><span class="line">ax.spines[<span class="string">'left'</span>].set_position((<span class="string">'data'</span>, <span class="number">0</span>))    <span class="comment"># 设置 y 轴在 (0, 0) 位置</span></span><br><span class="line"></span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/TRHX/ImageHosting/ITRHX-PIC/A70/05.png" alt="05"></p><hr><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">这里是一段防爬虫文本，请读者忽略。</span></span><br><span class="line"><span class="string">本文原创首发于</span> <span class="string">CSDN，作者</span> <span class="string">TRHX。</span></span><br><span class="line"><span class="string">博客首页：https://itrhx.blog.csdn.net/</span></span><br><span class="line"><span class="string">本文链接：https://itrhx.blog.csdn.net/article/details/105828143</span></span><br><span class="line"><span class="string">未经授权，禁止转载！恶意转载，后果自负！尊重原创，远离剽窃！</span></span><br></pre></td></tr></table></figure><hr><h2 id="【5x00】创建子图"><a href="#【5x00】创建子图" class="headerlink" title="【5x00】创建子图"></a><font color="#FF0000">【5x00】创建子图</font></h2><p>子图的概念：在同一张画布中创建多个图像，方便对数据进行对比。</p><h3 id="【5x01】方法一：add-subplot"><a href="#【5x01】方法一：add-subplot" class="headerlink" title="【5x01】方法一：add_subplot()"></a><font color="#1BC3FB">【5x01】方法一：add_subplot()</font></h3><p>首先创建一个画布，然后利用 <code>add_subplot()</code> 方法填充子图，该方法接收三个参数，前两个参数表示子图有几行几列，最后一个参数表示第几个子图，如：<code>fig.add_subplot(221)</code> 表示总共有两行两列（2x2=4）一共4个子图，当前是第一个子图。若子图大于9个则用逗号隔开即可。</p><p>应用举例：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"></span><br><span class="line">x = np.arange(<span class="number">100</span>)</span><br><span class="line"></span><br><span class="line">fig = plt.figure(figsize=(<span class="number">12</span>, <span class="number">6</span>))</span><br><span class="line"></span><br><span class="line">ax1 = fig.add_subplot(<span class="number">221</span>)   <span class="comment"># 第 1 个子图</span></span><br><span class="line">ax1.plot(x, x)</span><br><span class="line"></span><br><span class="line">ax2 = fig.add_subplot(<span class="number">222</span>)   <span class="comment"># 第 2 个子图</span></span><br><span class="line">ax2.plot(x, -x)</span><br><span class="line"></span><br><span class="line">ax3 = fig.add_subplot(<span class="number">223</span>)   <span class="comment"># 第 3 个子图</span></span><br><span class="line">ax3.plot(x, x ** <span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">ax4 = fig.add_subplot(<span class="number">224</span>)   <span class="comment"># 第 4 个子图</span></span><br><span class="line">ax4.plot(-x, x ** <span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/TRHX/ImageHosting/ITRHX-PIC/A70/06.png" alt="06"></p><h3 id="【5x02】方法二：pyplot-subplot"><a href="#【5x02】方法二：pyplot-subplot" class="headerlink" title="【5x02】方法二：pyplot.subplot()"></a><font color="#1BC3FB">【5x02】方法二：pyplot.subplot()</font></h3><p><code>matplotlib.pyplot.subplot()</code> 方法和 <code>add_subplot()</code> 方法有点儿类似，同样接收三个参数，前两个参数表示子图有几行几列，最后一个参数表示第几个子图。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"></span><br><span class="line">x = np.arange(<span class="number">100</span>)</span><br><span class="line"></span><br><span class="line">plt.figure(figsize=(<span class="number">12</span>, <span class="number">6</span>))</span><br><span class="line"></span><br><span class="line">plt.subplot(<span class="number">221</span>)     <span class="comment"># 第 1 个子图</span></span><br><span class="line">plt.plot(x, x)</span><br><span class="line"></span><br><span class="line">plt.subplot(<span class="number">222</span>)     <span class="comment"># 第 2 个子图</span></span><br><span class="line">plt.plot(x, x ** <span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">plt.subplot(<span class="number">223</span>)     <span class="comment"># 第 3 个子图</span></span><br><span class="line">plt.plot(x, x ** <span class="number">3</span>)</span><br><span class="line"></span><br><span class="line">plt.subplot(<span class="number">224</span>)     <span class="comment"># 第 4 个子图</span></span><br><span class="line">plt.plot(x, x ** <span class="number">4</span>)</span><br><span class="line"></span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/TRHX/ImageHosting/ITRHX-PIC/A70/07.png" alt="07"></p><h3 id="【5x03】方法三：pyplot-subplots"><a href="#【5x03】方法三：pyplot-subplots" class="headerlink" title="【5x03】方法三：pyplot.subplots()"></a><font color="#1BC3FB">【5x03】方法三：pyplot.subplots()</font></h3><p><code>matplotlib.pyplot.subplots()</code> 函数会将画布分割成指定的列和行，分割后依次在各个区域画图即可。注意与 <code>matplotlib.pyplot.subplot()</code> 略有差别。</p><p><code>fig, axes = plt.subplots</code> 的意思是：<code>plt.subplots</code> 方法会返回一个包含 figure（画布） 和 axes（绘图区） 对象的元组，fig 和 axes 参数分别接收这两个对象，后期对不同绘图区进行处理即可。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"></span><br><span class="line">x = np.arange(<span class="number">100</span>)</span><br><span class="line">fig, axes = plt.subplots(figsize=(<span class="number">12</span>, <span class="number">6</span>), nrows=<span class="number">2</span>, ncols=<span class="number">2</span>)  <span class="comment"># 将画布分割为2行2列，起始值为0</span></span><br><span class="line"></span><br><span class="line">axes[<span class="number">0</span>][<span class="number">0</span>].plot(x, x)         <span class="comment"># 绘制第1行第1列</span></span><br><span class="line">axes[<span class="number">0</span>][<span class="number">1</span>].plot(x, -x)        <span class="comment"># 绘制第1行第2列</span></span><br><span class="line">axes[<span class="number">1</span>][<span class="number">0</span>].plot(-x, x ** <span class="number">2</span>)   <span class="comment"># 绘制第2行第1列</span></span><br><span class="line">axes[<span class="number">1</span>][<span class="number">1</span>].plot(x, -x ** <span class="number">2</span>)   <span class="comment"># 绘制第2行第2列</span></span><br><span class="line"></span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/TRHX/ImageHosting/ITRHX-PIC/A70/08.png" alt="08"></p><h2 id="【6x00】填充补丁"><a href="#【6x00】填充补丁" class="headerlink" title="【6x00】填充补丁"></a><font color="#FF0000">【6x00】填充补丁</font></h2><p><code>matplotlib.patches</code> 可用于在画布上填充圆形、长方形、椭圆形、多边形等多种图像补丁。</p><p>官方文档：<a href="https://matplotlib.org/api/patches_api.html" target="_blank" rel="noopener">https://matplotlib.org/api/patches_api.html</a></p><table><thead><tr><th>类</th><th>描述</th></tr></thead><tbody><tr><td>matplotlib.patches.Arc(xy, width, height, angle=0.0, theta1=0.0, theta2=360.0, **kwargs)</td><td>椭圆弧</td></tr><tr><td>matplotlib.patches.Arrow(x, y, dx, dy, width=1.0, **kwargs)</td><td>箭头</td></tr><tr><td>matplotlib.patches.Circle(xy, radius=5, **kwargs)</td><td>圆</td></tr><tr><td>matplotlib.patches.Ellipse(xy, width, height, angle=0, **kwargs)</td><td>椭圆</td></tr><tr><td>matplotlib.patches.CirclePolygon(xy, radius=5, resolution=20, **kwargs)</td><td>近似多边形的圆形面片</td></tr><tr><td>matplotlib.patches.Polygon(xy, closed=True, **kwargs)</td><td>不规则多边形</td></tr><tr><td>matplotlib.patches.Rectangle(xy, width, height, angle=0.0, **kwargs)</td><td>矩形</td></tr><tr><td>matplotlib.patches.RegularPolygon(xy, numVertices, radius=5, orientation=0, **kwargs)</td><td>正多边形</td></tr><tr><td>matplotlib.patches.Shadow(patch, ox, oy, props=None, **kwargs)</td><td>创建给定补丁的阴影</td></tr><tr><td>matplotlib.patches.Wedge(center, r, theta1, theta2, width=None, **kwargs)</td><td>楔形</td></tr></tbody></table><p>应用举例：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">import</span> matplotlib.patches <span class="keyword">as</span> mpathes</span><br><span class="line"></span><br><span class="line">x = np.arange(<span class="number">0.0</span>, <span class="number">2.0</span>, <span class="number">0.01</span>)</span><br><span class="line">y = np.sin(<span class="number">2</span>*np.pi*x)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取当前绘图区（gca = Get Current Axes</span></span><br><span class="line">ax = plt.gca()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 圆形：圆点(0.2, -0.25)，半径0.2，红色</span></span><br><span class="line">circle = mpathes.Circle((<span class="number">0.2</span>, <span class="number">-0.25</span>), <span class="number">0.2</span>, color=<span class="string">'r'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 长方形：左侧和底部坐标(0.25, 0.75)，宽0.25，高0.15，透明度0.5</span></span><br><span class="line">rect = mpathes.Rectangle((<span class="number">0.25</span>, <span class="number">0.75</span>), <span class="number">0.25</span>, <span class="number">0.15</span>, alpha=<span class="number">0.5</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 正多边形：中心点坐标(1.0, 0)，顶点数6，中心到每个顶点的距离0.25</span></span><br><span class="line">regular_polygon = mpathes.RegularPolygon((<span class="number">1.0</span>, <span class="number">0</span>), <span class="number">6</span>, <span class="number">0.25</span>, color=<span class="string">'g'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 不规则多边形：polygon_point 为要连接的点的坐标</span></span><br><span class="line">polygon_point = [[<span class="number">1.5</span>, <span class="number">-0.75</span>], [<span class="number">1.75</span>, <span class="number">-1</span>], [<span class="number">2.0</span>, <span class="number">0</span>], [<span class="number">1.5</span>, <span class="number">-0.25</span>]]</span><br><span class="line">polygon = mpathes.Polygon(polygon_point, color=<span class="string">'#FF69B4'</span>, alpha=<span class="number">0.3</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 椭圆形：中心点坐标(1.25, 0.75)，横轴长度0.4，垂直轴长度0.2</span></span><br><span class="line">ellipse = mpathes.Ellipse((<span class="number">1.25</span>, <span class="number">0.75</span>), <span class="number">0.4</span>, <span class="number">0.2</span>, color=<span class="string">'y'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将补丁添加到当前绘图区</span></span><br><span class="line">ax.add_patch(circle)</span><br><span class="line">ax.add_patch(rect)</span><br><span class="line">ax.add_patch(regular_polygon)</span><br><span class="line">ax.add_patch(polygon)</span><br><span class="line">ax.add_patch(ellipse)</span><br><span class="line"></span><br><span class="line">plt.xlabel(<span class="string">'x axis label'</span>)</span><br><span class="line">plt.ylabel(<span class="string">'y axis label'</span>)</span><br><span class="line">plt.grid()</span><br><span class="line">plt.plot(x, y)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/TRHX/ImageHosting/ITRHX-PIC/A70/09.png" alt="09"></p><h2 id="【7x00】保存图像"><a href="#【7x00】保存图像" class="headerlink" title="【7x00】保存图像"></a><font color="#FF0000">【7x00】保存图像</font></h2><p><code>matplotlib.pyplot.savefig()</code> 方法可以将绘制的图像保存到本地，支持多种格式：eps, pdf, pgf, png, ps, raw, rgba, svg, svgz。</p><font color="#FF0000"> <strong>注意：因为调用 <code>plt.show()</code> 函数后，会创建一个新的空白的图片，所以在保存图片时注意要在 <code>plt.show()</code> 前调用 <code>plt.savefig()</code></strong> </font><p>基本语法：<code>matplotlib.pyplot.savefig(fname, dpi=None, facecolor=&#39;w&#39;, edgecolor=&#39;w&#39;, format=None, transparent=False)</code></p><table><thead><tr><th>参数</th><th>描述</th></tr></thead><tbody><tr><td>fname</td><td>str 类型 / 文件路径 / 类似文件的对象<br>如果未设置格式，则根据 fname 的扩展名（如果有）和 <code>rcParams[“savefig.format”] = ‘png’</code> 推断输出格式<br>如果设置了格式，则它将确定输出格式</td></tr><tr><td>dpi</td><td>保存图片的像素（dpi），以每英寸点数为单位。如果为 None，则默认取 <code>rcParams[’savefig.dpi’] = ‘figure’</code></td></tr><tr><td>facecolor</td><td>保存图片的画布颜色，默认为 white</td></tr><tr><td>edgecolor</td><td>保存图片的边缘颜色，默认为 white</td></tr><tr><td>format</td><td>保存图片的格式，未设置则取 fname 中的格式</td></tr><tr><td>transparent</td><td>保存图片的背景是否透明</td></tr></tbody></table><p>应用举例：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"></span><br><span class="line">plt.rcParams[<span class="string">'font.sans-serif'</span>] = [<span class="string">'Microsoft YaHei'</span>]</span><br><span class="line">x = range(<span class="number">2</span>, <span class="number">26</span>, <span class="number">2</span>)</span><br><span class="line">y = range(<span class="number">0</span>, <span class="number">12</span>)</span><br><span class="line">a = [<span class="number">5</span>, <span class="number">10</span>, <span class="number">15</span>, <span class="number">20</span>, <span class="number">25</span>, <span class="number">30</span>]</span><br><span class="line">b = [<span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>]</span><br><span class="line"></span><br><span class="line">line1, = plt.plot(a, b)</span><br><span class="line">line2, = plt.plot(x, y)</span><br><span class="line"></span><br><span class="line">plt.legend((line1, line2), (<span class="string">'图例一'</span>, <span class="string">'图例二'</span>), loc=<span class="number">2</span>, edgecolor=<span class="string">'red'</span>, facecolor=<span class="string">'#F5F5F5'</span>)</span><br><span class="line">plt.savefig(<span class="string">'D:\\data\\pic.png'</span>, transparent=<span class="keyword">True</span>)  <span class="comment"># 保存为透明文件</span></span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/TRHX/ImageHosting/ITRHX-PIC/A70/10.png" alt="10"></p><hr><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">这里是一段防爬虫文本，请读者忽略。</span></span><br><span class="line"><span class="string">本文原创首发于</span> <span class="string">CSDN，作者</span> <span class="string">TRHX。</span></span><br><span class="line"><span class="string">博客首页：https://itrhx.blog.csdn.net/</span></span><br><span class="line"><span class="string">本文链接：https://itrhx.blog.csdn.net/article/details/105828143</span></span><br><span class="line"><span class="string">未经授权，禁止转载！恶意转载，后果自负！尊重原创，远离剽窃！</span></span><br></pre></td></tr></table></figure><hr>]]></content>
    
    <summary type="html">
    
      Python 数据分析三剑客之 Matplotlib（三）：了解图例、LaTeX、刻度、子图、补丁等基本图像属性。
    
    </summary>
    
      <category term="Python 数据分析" scheme="https://www.itrhx.com/categories/Python-%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/"/>
    
      <category term="Matplotlib" scheme="https://www.itrhx.com/categories/Python-%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/Matplotlib/"/>
    
    
      <category term="Matplotlib" scheme="https://www.itrhx.com/tags/Matplotlib/"/>
    
      <category term="图例" scheme="https://www.itrhx.com/tags/%E5%9B%BE%E4%BE%8B/"/>
    
      <category term="LaTeX" scheme="https://www.itrhx.com/tags/LaTeX/"/>
    
      <category term="子图" scheme="https://www.itrhx.com/tags/%E5%AD%90%E5%9B%BE/"/>
    
      <category term="补丁" scheme="https://www.itrhx.com/tags/%E8%A1%A5%E4%B8%81/"/>
    
  </entry>
  
</feed>
