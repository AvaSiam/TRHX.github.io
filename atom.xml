<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>TRHX&#39;S BLOG</title>
  
  <subtitle>求知若饥 虚心若愚</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://www.itrhx.com/"/>
  <updated>2019-08-24T10:37:05.542Z</updated>
  <id>https://www.itrhx.com/</id>
  
  <author>
    <name>TRHX&#39;BLOG</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Python3 爬虫学习笔记 C06</title>
    <link href="https://www.itrhx.com/2019/08/24/A36-Python3-spider-C06/"/>
    <id>https://www.itrhx.com/2019/08/24/A36-Python3-spider-C06/</id>
    <published>2019-08-24T10:37:05.278Z</published>
    <updated>2019-08-24T10:37:05.542Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><blockquote><center><font color="#1BC3FB" size="4">Python3 爬虫学习笔记第六章 —— 【正则表达式】</font></center></blockquote><a id="more"></a><h1 id="【6-1】关于正则表达式"><a href="#【6-1】关于正则表达式" class="headerlink" title="【6.1】关于正则表达式"></a><font color="#ff0000">【6.1】关于正则表达式</font></h1><p>正则表达式是对字符串操作的一种逻辑公式，用定义好的特定字符和这些特定字符的组合组成一个规则字符串，这个规则字符串原来表达对字符串的一种过滤逻辑，从而实现字符串的检索、替换、匹配验证等。Python 的 re 库提供了整个正则表达式的实现，包含五种方法：<font color="#ff0000">match、search、findall、sub、compile</font><br>常用的匹配规则：</p><table><thead><tr><th>模式</th><th>描述</th></tr></thead><tbody><tr><td>\w</td><td>匹配字母、数字及下划线</td></tr><tr><td>\W</td><td>匹配不是字母、数字及下划线的字符</td></tr><tr><td>\s</td><td>匹配任意空白字符，等价于 [\t\n\r\f]</td></tr><tr><td>\S</td><td>匹配任意非空字符</td></tr><tr><td>\d</td><td>匹配任意数字，等价于 [0-9]</td></tr><tr><td>\D</td><td>匹配任意非数字的字符</td></tr><tr><td>\A</td><td>匹配字符串开头</td></tr><tr><td>\z</td><td>匹配字符串结尾，如果存在换行，同时还会匹配换行符</td></tr><tr><td>\Z</td><td>匹配字符串结尾，如果存在换行，只匹配到换行前的结束字符串</td></tr><tr><td>\G</td><td>匹配最后匹配完成的位置</td></tr><tr><td>\n</td><td>匹配一个换行符</td></tr><tr><td>\t</td><td>匹配一个制表符</td></tr><tr><td>^</td><td>匹配一行字符串的开头</td></tr><tr><td>$</td><td>匹配一行字符串的结尾</td></tr><tr><td>.</td><td>匹配任意字符，除了换行符，当 re.DOTALL 标记被指定时，则可以匹配包括换行符的任意字符</td></tr><tr><td>[…]</td><td>用来表示一组字符，单独列出，比如 [amk] 匹配 a、m 或 k</td></tr><tr><td>[^…]</td><td>不在 [] 中的字符，比如  匹配除了 a、b、c 之外的字符</td></tr><tr><td>*</td><td>匹配 0 个或多个表达式</td></tr><tr><td>+</td><td>匹配 1 个或多个表达式</td></tr><tr><td>?</td><td>匹配 0 个或 1 个前面的正则表达式定义的片段，非贪婪方式</td></tr><tr><td>{n}</td><td>精确匹配 n 个前面的表达式</td></tr><tr><td>{n, m}</td><td>匹配 n 到 m 次由前面正则表达式定义的片段，贪婪方式</td></tr><tr><td>a\</td><td>b</td><td>匹配 a 或 b</td></tr><tr><td>( )</td><td>匹配括号内的表达式，也表示一个组</td></tr></tbody></table><h1 id="【6-2】re-match-方法"><a href="#【6-2】re-match-方法" class="headerlink" title="【6.2】re.match 方法"></a><font color="#ff0000">【6.2】re.match 方法</font></h1><p>match() 方法会尝试从字符串的起始位置匹配正则表达式，如果匹配，就返回匹配成功的结果；如果不匹配，就返回 None，在 match() 方法中，第一个参数传入正则表达式，第二个参数传入要匹配的字符串。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line">content = <span class="string">'This is a Demo_123 4567_I Love China'</span></span><br><span class="line">print(len(content))</span><br><span class="line">result = re.match(<span class="string">'^This\s\w\w\s\w\s\w&#123;5&#125;\d&#123;3&#125;\s\w&#123;6&#125;'</span>, content)</span><br><span class="line">print(result)</span><br><span class="line">print(result.group())</span><br><span class="line">print(result.span())</span><br></pre></td></tr></table></figure></p><p>输出结果：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">36</span></span><br><span class="line">&lt;_sre.SRE_Match object; span=(<span class="number">0</span>, <span class="number">25</span>), match=<span class="string">'This is a Demo_123 4567_I'</span>&gt;</span><br><span class="line">This <span class="keyword">is</span> a Demo_123 <span class="number">4567</span>_I</span><br><span class="line">(<span class="number">0</span>, <span class="number">25</span>)</span><br></pre></td></tr></table></figure></p><p>打印 result 结果是 SRE_Match 对象，表明匹配成功。SRE_Match 对象有两种方法：<font color="#ff0000">group()</font> 方法可以输出匹配到的内容；<font color="#ff0000">span()</font> 方法可以输出匹配的范围。</p><h2 id="【6-2-1】提取内容"><a href="#【6-2-1】提取内容" class="headerlink" title="【6.2.1】提取内容"></a><font color="#ff0000">【6.2.1】提取内容</font></h2><p>使用括号将想提取的子字符串括起来。括号实际上标记了一个子表达式的开始和结束位置，被标记的每个子表达式会依次对应每一个分组，调用 <font color="#ff0000">group()</font> 方法传入分组的索引即可获取提取的结果。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line">content = <span class="string">'This is a Demo_123 4567_I Love China'</span></span><br><span class="line">result = re.match(<span class="string">'^This\s\w\w\s\w\s(\w&#123;5&#125;)\d&#123;3&#125;\s\w&#123;6&#125;'</span>, content)</span><br><span class="line">print(result)</span><br><span class="line">print(result.group())</span><br><span class="line">print(result.group(<span class="number">1</span>))</span><br><span class="line">print(result.span())</span><br></pre></td></tr></table></figure></p><p>输出结果：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;_sre.SRE_Match object; span=(<span class="number">0</span>, <span class="number">25</span>), match=<span class="string">'This is a Demo_123 4567_I'</span>&gt;</span><br><span class="line">This <span class="keyword">is</span> a Demo_123 <span class="number">4567</span>_I</span><br><span class="line">Demo_</span><br><span class="line">(<span class="number">0</span>, <span class="number">25</span>)</span><br></pre></td></tr></table></figure></p><h2 id="【6-2-2】通用匹配"><a href="#【6-2-2】通用匹配" class="headerlink" title="【6.2.2】通用匹配"></a><font color="#ff0000">【6.2.2】通用匹配</font></h2><p>如果每个字符都用都用一个符号来匹配的话就显得比较麻烦，可以用 <code>.*</code>来匹配，<code>.</code> 可以匹配除换行符外的任意字符，<code>*</code> 代表匹配前面的字符无限次。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line">content = <span class="string">'This is a Demo_123 4567_I Love China'</span></span><br><span class="line">result = re.match(<span class="string">'^This.*China$'</span>, content)</span><br><span class="line">print(result)</span><br><span class="line">print(result.group())</span><br><span class="line">print(result.span())</span><br></pre></td></tr></table></figure></p><p>输出结果：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;_sre.SRE_Match object; span=(<span class="number">0</span>, <span class="number">36</span>), match=<span class="string">'This is a Demo_123 4567_I Love China'</span>&gt;</span><br><span class="line">This <span class="keyword">is</span> a Demo_123 <span class="number">4567</span>_I Love China</span><br><span class="line">(<span class="number">0</span>, <span class="number">36</span>)</span><br></pre></td></tr></table></figure></p><h2 id="【6-2-3】贪婪匹配"><a href="#【6-2-3】贪婪匹配" class="headerlink" title="【6.2.3】贪婪匹配"></a><font color="#ff0000">【6.2.3】贪婪匹配</font></h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line">content = <span class="string">'This is a Demo_1234567_I Love China'</span></span><br><span class="line">result = re.match(<span class="string">'^This.*(\d+).*China$'</span>, content)</span><br><span class="line">print(result)</span><br><span class="line">print(result.group())</span><br><span class="line">print(result.group(<span class="number">1</span>))</span><br><span class="line">print(result.span())</span><br></pre></td></tr></table></figure><p>输出结果：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;_sre.SRE_Match object; span=(<span class="number">0</span>, <span class="number">35</span>), match=<span class="string">'This is a Demo_1234567_I Love China'</span>&gt;</span><br><span class="line">This <span class="keyword">is</span> a Demo_1234567_I Love China</span><br><span class="line"><span class="number">7</span></span><br><span class="line">(<span class="number">0</span>, <span class="number">35</span>)</span><br></pre></td></tr></table></figure></p><font color="#ff0000"><code>.*</code> 为贪婪匹配，会匹配尽可能多的字符，所以 \d+ 只会匹配到最后一个数字，而不是所有的数字</font><h2 id="【6-2-4】非贪婪匹配"><a href="#【6-2-4】非贪婪匹配" class="headerlink" title="【6.2.4】非贪婪匹配"></a><font color="#ff0000">【6.2.4】非贪婪匹配</font></h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line">content = <span class="string">'This is a Demo_1234567_I Love China'</span></span><br><span class="line">result = re.match(<span class="string">'^This.*?(\d+).*China$'</span>, content)</span><br><span class="line">print(result)</span><br><span class="line">print(result.group())</span><br><span class="line">print(result.group(<span class="number">1</span>))</span><br><span class="line">print(result.span())</span><br></pre></td></tr></table></figure><p>输出结果：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;_sre.SRE_Match object; span=(<span class="number">0</span>, <span class="number">35</span>), match=<span class="string">'This is a Demo_1234567_I Love China'</span>&gt;</span><br><span class="line">This <span class="keyword">is</span> a Demo_1234567_I Love China</span><br><span class="line"><span class="number">1234567</span></span><br><span class="line">(<span class="number">0</span>, <span class="number">35</span>)</span><br></pre></td></tr></table></figure></p><font color="#ff0000"><code>.*?</code> 为非贪婪匹配，会匹配尽可能少的字符，所以 \d+ 会匹配到所有的数字</font><h2 id="【6-2-5】转义匹配"><a href="#【6-2-5】转义匹配" class="headerlink" title="【6.2.5】转义匹配"></a><font color="#ff0000">【6.2.5】转义匹配</font></h2><p>当遇到用于正则匹配模式的特殊字符时，在前面加反斜线转义一下即可。例如 <code>.</code> 可以用 <code>\.</code> 来匹配：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line">content = <span class="string">'(博客)www.itrhx.com'</span></span><br><span class="line">result = re.match(<span class="string">'\(博客\)www\.itrhx\.com'</span>, content)</span><br><span class="line">print(result)</span><br><span class="line">print(result.group())</span><br></pre></td></tr></table></figure></p><p>输出结果：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;_sre.SRE_Match object; span=(<span class="number">0</span>, <span class="number">17</span>), match=<span class="string">'(博客)www.itrhx.com'</span>&gt;</span><br><span class="line">(博客)www.itrhx.com</span><br></pre></td></tr></table></figure></p><h2 id="【6-2-6】修饰符"><a href="#【6-2-6】修饰符" class="headerlink" title="【6.2.6】修饰符"></a><font color="#ff0000">【6.2.6】修饰符</font></h2><p>修饰符用来解决换行、大小写等问题，较为常用的有 re.S 和 re.I。</p><table><thead><tr><th style="text-align:center">修饰符</th><th style="text-align:center">描述</th></tr></thead><tbody><tr><td style="text-align:center">re.S</td><td style="text-align:center">使 <code>.</code> 匹配包括换行在内的所有字符</td></tr><tr><td style="text-align:center">re.I</td><td style="text-align:center">使匹配对大小写不敏感</td></tr><tr><td style="text-align:center">re.L</td><td style="text-align:center">做本地化识别（locale-aware）匹配</td></tr><tr><td style="text-align:center">re.M</td><td style="text-align:center">多行匹配，影响 <code>^</code> 和 <code>$</code></td></tr><tr><td style="text-align:center">re.U</td><td style="text-align:center">根据 Unicode 字符集解析字符。这个标志影响 <code>\w</code>、<code>\W</code>、<code>\b</code> 和 <code>\B</code></td></tr><tr><td style="text-align:center">re.X</td><td style="text-align:center">该标志通过给予你更灵活的格式以便你将正则表达式写得更易于理解</td></tr></tbody></table><p>示例：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line">content = <span class="string">'''This is a Demo_1234567</span></span><br><span class="line"><span class="string">          _I Love China'''</span></span><br><span class="line">result = re.match(<span class="string">'^This.*?(\d+).*China$'</span>, content)</span><br><span class="line">print(result)</span><br><span class="line">print(result.group())</span><br><span class="line">print(result.group(<span class="number">1</span>))</span><br><span class="line">print(result.span())</span><br></pre></td></tr></table></figure></p><p>示例中 content 字段进行了换行处理，如果没有修饰符，就会报错：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Traceback (most recent call last):</span><br><span class="line"><span class="keyword">None</span></span><br><span class="line">  File <span class="string">"F:/PycharmProjects/Python3爬虫/test.py"</span>, line <span class="number">7</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">    print(result.group())</span><br><span class="line">AttributeError: <span class="string">'NoneType'</span> object has no attribute <span class="string">'group'</span></span><br></pre></td></tr></table></figure></p><p>添加 re.S 修饰符后即可匹配成功：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line">content = <span class="string">'''This is a Demo_1234567</span></span><br><span class="line"><span class="string">          _I Love China'''</span></span><br><span class="line">result = re.match(<span class="string">'^This.*?(\d+).*China$'</span>, content, re.S)</span><br><span class="line">print(result)</span><br><span class="line">print(result.group())</span><br><span class="line">print(result.group(<span class="number">1</span>))</span><br><span class="line">print(result.span())</span><br></pre></td></tr></table></figure></p><p>输出结果：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;_sre.SRE_Match object; span=(<span class="number">0</span>, <span class="number">46</span>), match=<span class="string">'This is a Demo_1234567\n          _I Love China'</span>&gt;</span><br><span class="line">This <span class="keyword">is</span> a Demo_1234567</span><br><span class="line">          _I Love China</span><br><span class="line"><span class="number">1234567</span></span><br><span class="line">(<span class="number">0</span>, <span class="number">46</span>)</span><br></pre></td></tr></table></figure></p><h1 id="【6-3】re-search-方法"><a href="#【6-3】re-search-方法" class="headerlink" title="【6.3】re.search 方法"></a><font color="#ff0000">【6.3】re.search 方法</font></h1><p>match() 方法只能从字符串的开头开始匹配，一旦开头不匹配，那么整个匹配就失败了，match() 方法更适合用来检测某个字符串是否符合某个正则表达式的规则，而 search() 方法则会扫描整个字符串并返回第一个成功的匹配<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line">content = <span class="string">'This is a Demo_1234567_I Love China'</span></span><br><span class="line">result = re.search(<span class="string">'a.*?(\d&#123;5&#125;)'</span>, content)</span><br><span class="line">print(result)</span><br><span class="line">print(result.group(<span class="number">1</span>))</span><br></pre></td></tr></table></figure></p><p>输出结果：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;_sre.SRE_Match object; span=(<span class="number">8</span>, <span class="number">20</span>), match=<span class="string">'a Demo_12345'</span>&gt;</span><br><span class="line"><span class="number">12345</span></span><br></pre></td></tr></table></figure></p><h1 id="【6-4】re-findall-方法"><a href="#【6-4】re-findall-方法" class="headerlink" title="【6.4】re.findall 方法"></a><font color="#ff0000">【6.4】re.findall 方法</font></h1><p>search() 方法则会扫描整个字符串，但是返回的是第一个成功的匹配，而 findall() 方法将会返回所有成功的匹配<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line">html = <span class="string">'''&lt;div id="songs-list"&gt;</span></span><br><span class="line"><span class="string">        &lt;h2 class="title"&gt; 民谣 &lt;/h2&gt;</span></span><br><span class="line"><span class="string">        &lt;p class="introduction"&gt;</span></span><br><span class="line"><span class="string">        民谣歌曲列表</span></span><br><span class="line"><span class="string">        &lt;/p&gt;</span></span><br><span class="line"><span class="string">        &lt;ul id="list" class="list-group"&gt;</span></span><br><span class="line"><span class="string">        &lt;li data-view="2"&gt; 七里香 &lt;/li&gt;</span></span><br><span class="line"><span class="string">        &lt;li data-view="7"&gt;</span></span><br><span class="line"><span class="string">        &lt;a href="/2.mp3" singer="赵雷"&gt; 理想 &lt;/a&gt;</span></span><br><span class="line"><span class="string">        &lt;/li&gt;</span></span><br><span class="line"><span class="string">        &lt;li data-view="4" class="active"&gt;</span></span><br><span class="line"><span class="string">        &lt;a href="/3.mp3" singer="许巍"&gt; 像风一样自由 &lt;/a&gt;</span></span><br><span class="line"><span class="string">        &lt;/li&gt;</span></span><br><span class="line"><span class="string">        &lt;li data-view="6"&gt;&lt;a href="/4.mp3" singer="安与骑兵"&gt; 红山果 &lt;/a&gt;&lt;/li&gt;</span></span><br><span class="line"><span class="string">        &lt;li data-view="5"&gt;&lt;a href="/5.mp3" singer="薛之谦"&gt; 意外 &lt;/a&gt;&lt;/li&gt;</span></span><br><span class="line"><span class="string">        &lt;li data-view="5"&gt;</span></span><br><span class="line"><span class="string">        &lt;a href="/6.mp3" singer="马頔"&gt; 但南山南 &lt;/a&gt;</span></span><br><span class="line"><span class="string">        &lt;/li&gt;</span></span><br><span class="line"><span class="string">        &lt;/ul&gt;</span></span><br><span class="line"><span class="string">        &lt;/div&gt;'''</span></span><br><span class="line">results = re.findall(<span class="string">'&lt;li.*?href="(.*?)".*?singer="(.*?)"&gt;(.*?)&lt;/a&gt;'</span>, html, re.S)</span><br><span class="line">print(results)</span><br><span class="line">print(type(results))</span><br><span class="line"><span class="keyword">for</span> result <span class="keyword">in</span> results:</span><br><span class="line">    print(result)</span><br><span class="line">    print(result[<span class="number">0</span>], result[<span class="number">1</span>], result[<span class="number">2</span>])</span><br></pre></td></tr></table></figure></p><p>输出结果：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">[(<span class="string">'/2.mp3'</span>, <span class="string">'赵雷'</span>, <span class="string">' 理想 '</span>), (<span class="string">'/3.mp3'</span>, <span class="string">'许巍'</span>, <span class="string">' 像风一样自由 '</span>), (<span class="string">'/4.mp3'</span>, <span class="string">'安与骑兵'</span>, <span class="string">' 红山果 '</span>), (<span class="string">'/5.mp3'</span>, <span class="string">'薛之谦'</span>, <span class="string">' 意外 '</span>), (<span class="string">'/6.mp3'</span>, <span class="string">'马頔'</span>, <span class="string">' 但南山南 '</span>)]</span><br><span class="line">&lt;<span class="class"><span class="keyword">class</span> '<span class="title">list</span>'&gt;</span></span><br><span class="line"><span class="class"><span class="params">(<span class="string">'/2.mp3'</span>, <span class="string">'赵雷'</span>, <span class="string">' 理想 '</span>)</span></span></span><br><span class="line"><span class="class">/2.<span class="title">mp3</span> 赵雷  理想 </span></span><br><span class="line"><span class="class"><span class="params">(<span class="string">'/3.mp3'</span>, <span class="string">'许巍'</span>, <span class="string">' 像风一样自由 '</span>)</span></span></span><br><span class="line"><span class="class">/3.<span class="title">mp3</span> 许巍  像风一样自由 </span></span><br><span class="line"><span class="class"><span class="params">(<span class="string">'/4.mp3'</span>, <span class="string">'安与骑兵'</span>, <span class="string">' 红山果 '</span>)</span></span></span><br><span class="line"><span class="class">/4.<span class="title">mp3</span> 安与骑兵  红山果 </span></span><br><span class="line"><span class="class"><span class="params">(<span class="string">'/5.mp3'</span>, <span class="string">'薛之谦'</span>, <span class="string">' 意外 '</span>)</span></span></span><br><span class="line"><span class="class">/5.<span class="title">mp3</span> 薛之谦  意外 </span></span><br><span class="line"><span class="class"><span class="params">(<span class="string">'/6.mp3'</span>, <span class="string">'马頔'</span>, <span class="string">' 但南山南 '</span>)</span></span></span><br><span class="line"><span class="class">/6.<span class="title">mp3</span> 马頔  但南山南</span></span><br></pre></td></tr></table></figure></p><h1 id="【6-5】re-sub-方法"><a href="#【6-5】re-sub-方法" class="headerlink" title="【6.5】re.sub 方法"></a><font color="#ff0000">【6.5】re.sub 方法</font></h1><p>与字符串的 replace() 方法类似，sub() 方法可以对文本进行修改，sub() 方法第一个参数为匹配对象，第二个参数为替换成的字符串，如果要去掉匹配对象的话，可以赋值为空，第三个参数为原来的字符串<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line">content = <span class="string">'87dsf4as2w4jh1k4kdl4'</span></span><br><span class="line">result = re.sub(<span class="string">'\d+'</span>, <span class="string">''</span>, content)</span><br><span class="line">print(result)</span><br></pre></td></tr></table></figure></p><p>输出结果：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dsfaswjhkkdl</span><br></pre></td></tr></table></figure></p><h1 id="【6-5】re-compile-方法"><a href="#【6-5】re-compile-方法" class="headerlink" title="【6.5】re.compile() 方法"></a><font color="#ff0000">【6.5】re.compile() 方法</font></h1><p>compile() 方法可以将正则字符串编译成正则表达式对象，以便在后面的匹配中复用<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line">content1 = <span class="string">'北京时间：2019-08-24 18:30'</span></span><br><span class="line">content2 = <span class="string">'伦敦时间：2019-08-24 11:30'</span></span><br><span class="line">content3 = <span class="string">'巴黎时间：2019-08-24 12:30'</span></span><br><span class="line">content4 = <span class="string">'外星时间：9019-99-66 50:30'</span></span><br><span class="line">pattern = re.compile(<span class="string">'\d&#123;2&#125;:\d&#123;2&#125;'</span>)</span><br><span class="line">result1 = re.sub(pattern, <span class="string">''</span>, content1)</span><br><span class="line">result2 = re.sub(pattern, <span class="string">''</span>, content2)</span><br><span class="line">result3 = re.sub(pattern, <span class="string">''</span>, content3)</span><br><span class="line">result4 = re.sub(pattern, <span class="string">''</span>, content4)</span><br><span class="line">print(result1, result2, result3, result4)</span><br></pre></td></tr></table></figure></p><p>利用 compile() 方法将正则表达式编译成一个正则表达式对象，以便复用，然后用 sub() 方法去掉具体时间<br>输出结果：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">北京时间：<span class="number">2019</span><span class="number">-08</span><span class="number">-24</span>  伦敦时间：<span class="number">2019</span><span class="number">-08</span><span class="number">-24</span>  巴黎时间：<span class="number">2019</span><span class="number">-08</span><span class="number">-24</span>  外星时间：<span class="number">9019</span><span class="number">-99</span><span class="number">-66</span></span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;center&gt;&lt;font color=&quot;#1BC3FB&quot; size=&quot;4&quot;&gt;Python3 爬虫学习笔记第六章 —— 【正则表达式】&lt;/font&gt;&lt;/center&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="Python3 学习笔记" scheme="https://www.itrhx.com/categories/Python3-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
      <category term="Python3 爬虫" scheme="https://www.itrhx.com/categories/Python3-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/Python3-%E7%88%AC%E8%99%AB/"/>
    
    
      <category term="爬虫" scheme="https://www.itrhx.com/tags/%E7%88%AC%E8%99%AB/"/>
    
      <category term="正则表达式" scheme="https://www.itrhx.com/tags/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>Python3 爬虫学习笔记 C05</title>
    <link href="https://www.itrhx.com/2019/08/23/A35-Python3-spider-C05/"/>
    <id>https://www.itrhx.com/2019/08/23/A35-Python3-spider-C05/</id>
    <published>2019-08-23T12:13:55.085Z</published>
    <updated>2019-08-24T10:42:23.203Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><blockquote><center><font color="#1BC3FB" size="4">Python3 爬虫学习笔记第五章 —— 【Selenium + 无界面浏览器】</font></center></blockquote><a id="more"></a><h1 id="【5-1】关于无界面浏览器"><a href="#【5-1】关于无界面浏览器" class="headerlink" title="【5.1】关于无界面浏览器"></a><font color="#ff0000">【5.1】关于无界面浏览器</font></h1><p>无界面（headless）浏览器，会把网站加载到内存并执行页面上的 JavaScript，因为不会展示图形界面，所以运行起来比完整的浏览器更高效。Selenium 搭配无界面浏览器使用，被称为爬虫利器，常用的无界面浏览器有：PhantomJS、Headless Chrome、Headless Firefox，其中，18年3月，PhantomJS 的作者在 GitHub 上宣布暂停开发 PhantomJS，现在使用 PhantomJS 会出现警告：<code>UserWarning: Selenium support for PhantomJS has been deprecated, please use headless versions of Chrome or Firefox instead</code>，所以推荐使用谷歌或者火狐的无界面浏览器</p><h1 id="【5-2】PhantomJS"><a href="#【5-2】PhantomJS" class="headerlink" title="【5.2】PhantomJS"></a><font color="#ff0000">【5.2】PhantomJS</font></h1><p>下载 PhantomJS：<a href="https://phantomjs.org/download.html" target="_blank" rel="noopener">https://phantomjs.org/download.html</a><br>path 为 PhantomJS 路径，如果系统配置了环境变量，就不用手动指定 executable_path 参数<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"></span><br><span class="line">path = <span class="string">r'F:\PycharmProjects\Python3爬虫\phantomjs-2.1.1\bin\phantomjs.exe'</span></span><br><span class="line">driver = webdriver.PhantomJS(executable_path=path)</span><br><span class="line">driver.get(<span class="string">"https://www.itrhx.com"</span>)</span><br><span class="line">print(driver.page_source)</span><br><span class="line">driver.close()</span><br></pre></td></tr></table></figure></p><h1 id="【5-3】Headless-Chrome"><a href="#【5-3】Headless-Chrome" class="headerlink" title="【5.3】Headless Chrome"></a><font color="#ff0000">【5.3】Headless Chrome</font></h1><p>下载 Chromedriver：<a href="http://chromedriver.storage.googleapis.com/index.html" target="_blank" rel="noopener">http://chromedriver.storage.googleapis.com/index.html</a><br>需要本地有 Chrome 浏览器，path 为 Headless Chrome 路径，如果系统配置了环境变量，就不用手动指定 executable_path 参数<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.chrome.options <span class="keyword">import</span> Options</span><br><span class="line"></span><br><span class="line">chrome_options = Options()</span><br><span class="line">chrome_options.add_argument(<span class="string">'--headless'</span>)</span><br><span class="line">chrome_options.add_argument(<span class="string">'--disable-gpu'</span>)</span><br><span class="line">path = <span class="string">'F:\PycharmProjects\Python3爬虫\chromedriver.exe'</span></span><br><span class="line">driver = webdriver.Chrome(executable_path=path, chrome_options=chrome_options)</span><br><span class="line">driver.get(<span class="string">"https://www.itrhx.com"</span>)</span><br><span class="line">print(driver.page_source)</span><br><span class="line">driver.close()</span><br></pre></td></tr></table></figure></p><h1 id="【5-4】Headless-Firefox"><a href="#【5-4】Headless-Firefox" class="headerlink" title="【5.4】Headless Firefox"></a><font color="#ff0000">【5.4】Headless Firefox</font></h1><p>下载 geckodriver：<a href="https://github.com/mozilla/geckodriver/releases/" target="_blank" rel="noopener">https://github.com/mozilla/geckodriver/releases/</a><br>需要本地有 Firefox 浏览器，path 为 Headless Firefox 路径，如果系统配置了环境变量，就不用手动指定 executable_path 参数<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium.webdriver <span class="keyword">import</span> Firefox</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.firefox.options <span class="keyword">import</span> Options</span><br><span class="line"></span><br><span class="line">options = Options()</span><br><span class="line">options.add_argument(<span class="string">'-headless'</span>)</span><br><span class="line">path = <span class="string">'F:\PycharmProjects\Python3爬虫\geckodriver.exe'</span></span><br><span class="line">driver = Firefox(executable_path=path, firefox_options=options)</span><br><span class="line">driver.get(<span class="string">"https://www.itrhx.com"</span>)</span><br><span class="line">print(driver.page_source)</span><br><span class="line">driver.close()</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;center&gt;&lt;font color=&quot;#1BC3FB&quot; size=&quot;4&quot;&gt;Python3 爬虫学习笔记第五章 —— 【Selenium + 无界面浏览器】&lt;/font&gt;&lt;/center&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="Python3 学习笔记" scheme="https://www.itrhx.com/categories/Python3-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
      <category term="Python3 爬虫" scheme="https://www.itrhx.com/categories/Python3-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/Python3-%E7%88%AC%E8%99%AB/"/>
    
    
      <category term="爬虫" scheme="https://www.itrhx.com/tags/%E7%88%AC%E8%99%AB/"/>
    
      <category term="Selenium" scheme="https://www.itrhx.com/tags/Selenium/"/>
    
      <category term="无界面浏览器" scheme="https://www.itrhx.com/tags/%E6%97%A0%E7%95%8C%E9%9D%A2%E6%B5%8F%E8%A7%88%E5%99%A8/"/>
    
  </entry>
  
  <entry>
    <title>常见 User-Agent 大全</title>
    <link href="https://www.itrhx.com/2019/08/23/A34-UserAgent/"/>
    <id>https://www.itrhx.com/2019/08/23/A34-UserAgent/</id>
    <published>2019-08-23T01:28:22.624Z</published>
    <updated>2019-08-24T10:39:09.627Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>User Agent 中文名为用户代理，简称 UA，是一个特殊字符串头，使得服务器能够识别客户使用的操作系统及版本、CPU 类型、浏览器及版本、浏览器渲染引擎、浏览器语言、浏览器插件等。Python 爬虫通过伪装 UA 可以绕过某些检测。</p><p>以下为搜集的常见的各浏览器的 User-Agent，其中：</p><ul><li>安卓操作系统：Android 7.1.1；OPPO R9sk Build/NMF26F</li><li>PC操作系统：Windows 10 64位 10.0.18362.10000</li><li>其他操作系统：iOS、Backerry、WebOS、Symbian、Windows Phone</li></ul><p>相关链接：</p><ul><li>手机User-Agent大全：<a href="http://www.fynas.com/ua" target="_blank" rel="noopener">http://www.fynas.com/ua</a></li><li>User-Agent在线检测：<a href="http://www.user-agent.cn/" target="_blank" rel="noopener">http://www.user-agent.cn/</a></li><li><p>常用User-Agent大全：<a href="http://www.jsons.cn/useragent/" target="_blank" rel="noopener">http://www.jsons.cn/useragent/</a></p><h1 id="Windows10"><a href="#Windows10" class="headerlink" title="Windows10"></a><font color="#ff0000">Windows10</font></h1></li><li><p><font color="#ff0000">Windows10 / Chrome 75.0.3770.142</font><br>Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/75.0.3770.142 Safari/537.36</p></li><li><p><font color="#ff0000">Windows10 / Firefox 69.0b15</font><br>Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:69.0) Gecko/20100101 Firefox/69.0</p></li><li><p><font color="#ff0000">Windows10 / Opera 63.0.3368.43</font><br>Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/76.0.3809.100 Safari/537.36 OPR/63.0.3368.43</p></li><li><p><font color="#ff0000">Windows10 / Edge 44.18362.1.0</font><br>User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/70.0.3538.102 Safari/537.36 Edge/18.18362</p></li><li><p><font color="#ff0000">Windows10 / IE 11.10000.18362.0</font><br>User-Agent: Mozilla/5.0 (Windows NT 10.0; WOW64; Trident/7.0; LCTE; rv:11.0) like Gecko</p></li><li><p><font color="#ff0000">Windows10 x64 / Safari 5.1.4（7534.54.16）</font><br>Mozilla/5.0 (Windows NT 6.2; WOW64) AppleWebKit/534.54.16 (KHTML, like Gecko) Version/5.1.4 Safari/534.54.16</p></li><li><p><font color="#ff0000">Windows10 / QQ浏览器 10.5（3739）</font><br>Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/70.0.3538.25 Safari/537.36 Core/1.70.3722.400 QQBrowser/10.5.3739.400</p></li><li><p><font color="#ff0000">Windows10 / 360安全浏览器 10.0.1977.0</font><br>Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/63.0.3239.132 Safari/537.36 QIHU 360SE</p></li><li><p><font color="#ff0000">Windows10 / 360极速浏览器 11.0.2179.0</font><br>Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/69.0.3497.100 Safari/537.36 QIHU 360EE</p></li><li><p><font color="#ff0000">Windows10 / UC浏览器 6.2.3964.2</font><br>Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/55.0.2883.87 UBrowser/6.2.3964.2 Safari/537.36</p></li><li><p><font color="#ff0000">Windows10 / 搜狗浏览器 8.5.10.31270</font><br>Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/58.0.3029.110 Safari/537.36 SE 2.X MetaSr 1.0</p></li><li><p><font color="#ff0000">Windows10 / 猎豹浏览器 6.5.115.19331.8001</font><br>Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/57.0.2987.98 Safari/537.36 LBBROWSER</p></li><li><p><font color="#ff0000">Windows10 / 傲游浏览器 5.2.7.5000</font><br>Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/61.0.3163.79 Safari/537.36</p></li><li><p><font color="#ff0000">Windows10 / 2345加速浏览器 10.1.0.19399</font><br>Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/69.0.3947.100 Safari/537.36</p></li></ul><h1 id="Android"><a href="#Android" class="headerlink" title="Android"></a><font color="#ff0000">Android</font></h1><ul><li><p><font color="#ff0000">Android / Chrome 76.0.3809.111</font><br>Mozilla/5.0 (Linux; Android 7.1.1; OPPO R9sk) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/76.0.3809.111 Mobile Safari/537.36</p></li><li><p><font color="#ff0000">Android / Firefox 68.0.2</font><br>Mozilla/5.0 (Android 7.1.1; Mobile; rv:68.0) Gecko/68.0 Firefox/68.0</p></li><li><p><font color="#ff0000">Android / Opera 53.0.2569.141117</font><br>Mozilla/5.0 (Linux; Android 7.1.1; OPPO R9sk Build/NMF26F) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/74.0.3729.157 Mobile Safari/537.36 OPR/53.0.2569.141117</p></li><li><p><font color="#ff0000">Android / Edge 42.0.2.3819</font><br>Mozilla/5.0 (Linux; Android 7.1.1; OPPO R9sk) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/73.0.3683.90 Mobile Safari/537.36 EdgA/42.0.2.3819</p></li><li><p><font color="#ff0000">Android / QQ浏览器 9.6.1.5190</font><br>Mozilla/5.0 (Linux; U; Android 7.1.1; zh-cn; OPPO R9sk Build/NMF26F) AppleWebKit/537.36 (KHTML, like Gecko) Version/4.0 Chrome/66.0.3359.126 MQQBrowser/9.6 Mobile Safari/537.36</p></li><li><p><font color="#ff0000">Android / OPPO浏览器 10.5.1.2_2c91537</font><br>Mozilla/5.0 (Linux; U; Android 7.1.1; zh-cn; OPPO R9sk Build/NMF26F) AppleWebKit/537.36 (KHTML, like Gecko) Version/4.0 Chrome/70.0.3538.80 Mobile Safari/537.36 OppoBrowser/10.5.1.2</p></li><li><p><font color="#ff0000">Android / 360浏览器 8.2.0.162</font><br>Mozilla/5.0 (Linux; Android 7.1.1; OPPO R9sk Build/NMF26F; wv) AppleWebKit/537.36 (KHTML, like Gecko) Version/4.0 Chrome/62.0.3202.97 Mobile Safari/537.36</p></li><li><p><font color="#ff0000">Android / 360极速浏览器 1.0.100.1078</font><br>Mozilla/5.0 (Linux; Android 7.1.1; OPPO R9sk Build/NMF26F) AppleWebKit/537.36 (KHTML, like Gecko) Version/4.0 Chrome/70.0.3538.80 Mobile Safari/537.36 360 Alitephone Browser (1.5.0.90/1.0.100.1078) mso_sdk(1.0.0)</p></li><li><p><font color="#ff0000">Android / UC浏览器 12.6.0.1040</font><br>Mozilla/5.0 (Linux; U; Android 7.1.1; zh-CN; OPPO R9sk Build/NMF26F) AppleWebKit/537.36 (KHTML, like Gecko) Version/4.0 Chrome/57.0.2987.108 UCBrowser/12.6.0.1040 Mobile Safari/537.36</p></li><li><p><font color="#ff0000">Android / 猎豹浏览器 5.12.3</font><br>Mozilla/5.0 (Linux; Android 7.1.1; OPPO R9sk Build/NMF26F; wv) AppleWebKit/537.36 (KHTML, like Gecko) Version/4.0 Chrome/70.0.3538.80 Mobile Safari/537.36 LieBaoFast/5.12.3</p></li><li><p><font color="#ff0000">Android / 百度浏览器 7.19</font><br>Mozilla/5.0 (Linux; Android 7.1.1; OPPO R9sk Build/NMF26F; wv) AppleWebKit/537.36 (KHTML, like Gecko) Version/4.0 Chrome/48.0.2564.116 Mobile Safari/537.36 T7/9.1 baidubrowser/7.19.13.0 (Baidu; P1 7.1.1)</p></li><li><p><font color="#ff0000">Android / 搜狗浏览器 5.22.8.71677</font><br>Mozilla/5.0 (Linux; Android 7.1.1; OPPO R9sk Build/NMF26F; wv) AppleWebKit/537.36 (KHTML, like Gecko) Version/4.0 Chrome/68.0.3440.106 Mobile Safari/537.36 AWP/2.0 SogouMSE,SogouMobileBrowser/5.22.8</p></li><li><p><font color="#ff0000">Android / 2345浏览器 11.0.1</font><br>Mozilla/5.0 (Linux; Android 7.1.1; OPPO R9sk Build/NMF26F; wv) AppleWebKit/537.36 (KHTML, like Gecko) Version/4.0 Chrome/70.0.3538.80 Mobile Safari/537.36 Mb2345Browser/11.0.1</p></li></ul><h1 id="其他"><a href="#其他" class="headerlink" title="其他"></a><font color="#ff0000">其他</font></h1><ul><li><p><font color="#ff0000">iPhone3</font><br>Mozilla/5.0 (iPhone; U; CPU iPhone OS 3_0 like Mac OS X; en-us) AppleWebKit/420.1 (KHTML, like Gecko) Version/3.0 Mobile/1A542a Safari/419.3</p></li><li><p><font color="#ff0000">iPhone4</font><br>Mozilla/5.0 (iPhone; U; CPU iPhone OS 4_0 like Mac OS X; en-us) AppleWebKit/532.9 (KHTML, like Gecko) Version/4.0.5 Mobile/8A293 Safari/6531.22.7</p></li><li><p><font color="#ff0000">iPhone6s</font><br>Mozilla/5.0 (iPhone 6s; CPU iPhone OS 11_4_1 like Mac OS X) AppleWebKit/604.3.5 (KHTML, like Gecko) Version/11.0 MQQBrowser/8.3.0 Mobile/15B87 Safari/604.1 MttCustomUA/2 QBWebViewType/1 WKType/1</p></li><li><p><font color="#ff0000">iPad</font><br>Mozilla/5.0 (iPad; U; CPU OS 3_2 like Mac OS X; en-us) AppleWebKit/531.21.10 (KHTML, like Gecko) Version/4.0.4 Mobile/7B334b Safari/531.21.10</p></li><li><p><font color="#ff0000">iPod</font><br>Mozilla/5.0 (iPod; U; CPU iPhone OS 4_3_3 like Mac OS X; en-us) AppleWebKit/533.17.9 (KHTML, like Gecko) Version/5.0.2 Mobile/8J2 Safari/6533.18.5</p></li><li><p><font color="#ff0000">BlackBerry</font><br>Mozilla/5.0 (BlackBerry; U; BlackBerry 9800; en) AppleWebKit/534.1+ (KHTML, like Gecko) Version/6.0.0.337 Mobile Safari/534.1+</p></li><li><p><font color="#ff0000">WebOS HP Touchpad</font><br>Mozilla/5.0 (hp-tablet; Linux; hpwOS/3.0.0; U; en-US) AppleWebKit/534.6 (KHTML, like Gecko) wOSBrowser/233.70 Safari/534.6 TouchPad/1.0</p></li><li><p><font color="#ff0000">Nokia N97</font><br>Mozilla/5.0 (SymbianOS/9.4; Series60/5.0 NokiaN97-1/20.0.019; Profile/MIDP-2.1 Configuration/CLDC-1.1) AppleWebKit/525 (KHTML, like Gecko) BrowserNG/7.1.18124</p></li><li><p><font color="#ff0000">Windows Phone Mango</font><br>Mozilla/5.0 (compatible; MSIE 9.0; Windows Phone OS 7.5; Trident/5.0; IEMobile/9.0; HTC; Titan)</p></li></ul>]]></content>
    
    <summary type="html">
    
      常见 User-Agent 大全收集
    
    </summary>
    
      <category term="Python3 学习笔记" scheme="https://www.itrhx.com/categories/Python3-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
      <category term="Python3 经验" scheme="https://www.itrhx.com/categories/Python3-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/Python3-%E7%BB%8F%E9%AA%8C/"/>
    
    
      <category term="爬虫" scheme="https://www.itrhx.com/tags/%E7%88%AC%E8%99%AB/"/>
    
      <category term="User-Agent" scheme="https://www.itrhx.com/tags/User-Agent/"/>
    
  </entry>
  
  <entry>
    <title>Selenium 显式等待条件及其含义</title>
    <link href="https://www.itrhx.com/2019/08/23/A33-selenium/"/>
    <id>https://www.itrhx.com/2019/08/23/A33-selenium/</id>
    <published>2019-08-23T01:28:22.478Z</published>
    <updated>2019-08-24T10:39:18.904Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><table><thead><tr><th>等待条件</th><th>含义</th></tr></thead><tbody><tr><td>title_is</td><td>标题是某内容</td></tr><tr><td>title_contains</td><td>标题包含某内容</td></tr><tr><td>presence_of_element_located</td><td>节点加载出，传入定位元组，如 (By.ID, ‘p’)</td></tr><tr><td>visibility_of_element_located</td><td>节点可见，传入定位元组</td></tr><tr><td>visibility_of</td><td>可见，传入节点对象</td></tr><tr><td>presence_of_all_elements_located</td><td>所有节点加载出</td></tr><tr><td>text_to_be_present_in_element</td><td>某个节点文本包含某文字</td></tr><tr><td>text_to_be_present_in_element_value</td><td>某个节点值包含某文字</td></tr><tr><td>frame_to_be_available_and_switch_to_it frame</td><td>加载并切换</td></tr><tr><td>invisibility_of_element_located</td><td>节点不可见</td></tr><tr><td>element_to_be_clickable</td><td>节点可点击</td></tr><tr><td>staleness_of</td><td>判断一个节点是否仍在 DOM，可判断页面是否已经刷新</td></tr><tr><td>element_to_be_selected</td><td>节点可选择，传节点对象</td></tr><tr><td>element_located_to_be_selected</td><td>节点可选择，传入定位元组</td></tr><tr><td>element_selection_state_to_be</td><td>传入节点对象以及状态，相等返回 True，否则返回 False</td></tr><tr><td>element_located_selection_state_to_be</td><td>传入定位元组以及状态，相等返回 True，否则返回 False</td></tr><tr><td>alert_is_present</td><td>是否出现 Alert</td></tr></tbody></table><p>更多等待条件极其用法介绍：<a href="https://selenium-python.readthedocs.io/api.html#module-selenium.webdriver.support.expected_conditions" target="_blank" rel="noopener">https://selenium-python.readthedocs.io/api.html#module-selenium.webdriver.support.expected_conditions</a></p><p>Selenium 的使用：<a href="https://www.itrhx.com/2019/08/22/A32-Python3-spider-C04/">https://www.itrhx.com/2019/08/22/A32-Python3-spider-C04/</a></p>]]></content>
    
    <summary type="html">
    
      Selenium 显式等待条件及其含义附表
    
    </summary>
    
      <category term="Python3 学习笔记" scheme="https://www.itrhx.com/categories/Python3-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
      <category term="Python3 经验" scheme="https://www.itrhx.com/categories/Python3-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/Python3-%E7%BB%8F%E9%AA%8C/"/>
    
    
      <category term="爬虫" scheme="https://www.itrhx.com/tags/%E7%88%AC%E8%99%AB/"/>
    
      <category term="Selenium" scheme="https://www.itrhx.com/tags/Selenium/"/>
    
  </entry>
  
  <entry>
    <title>Python3 爬虫学习笔记 C04</title>
    <link href="https://www.itrhx.com/2019/08/23/A32-Python3-spider-C04/"/>
    <id>https://www.itrhx.com/2019/08/23/A32-Python3-spider-C04/</id>
    <published>2019-08-23T01:28:22.327Z</published>
    <updated>2019-08-24T10:40:44.765Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><blockquote><center><font color="#1BC3FB" size="4">Python3 爬虫学习笔记第四章 —— 【自动化测试工具 Selenium】</font></center></blockquote><a id="more"></a><p>Selenium 是一个用于 Web 应用程序测试的工具。Selenium 测试直接运行在浏览器中，就像真正的用户在操作一样。支持的浏览器包括IE（7, 8, 9, 10, 11），Mozilla Firefox，Safari，Google Chrome，Opera等。利用它可以驱动浏览器执行特定的动作，如点击、下拉等操作，同时还可以获取浏览器当前呈现的页面的源代码，做到可见即可爬。对于一些 JavaScript 动态渲染的页面来说，此种抓取方式非常有效。<font color="#FF0000">本文重点以 Selenium 使用谷歌浏览器的 Webdriver 为例。</font></p><h1 id="【4-1】下载驱动"><a href="#【4-1】下载驱动" class="headerlink" title=" 【4.1】下载驱动"></a><font color="#FF0000"> 【4.1】下载驱动</font></h1><p>使用 Selenium 操作不同浏览器，需要不同浏览器相应的驱动支持：</p><table><thead><tr><th>浏览器</th><th>驱动名称</th><th>下载地址</th><th>备注</th></tr></thead><tbody><tr><td>谷歌浏览器</td><td>chromedriver</td><td><a href="http://chromedriver.storage.googleapis.com/index.html" target="_blank" rel="noopener">点击进入下载页面</a></td><td>需要根据自己浏览器的版本下载不同版本的驱动</td></tr><tr><td>火狐浏览器</td><td>geckodriver</td><td><a href="https://github.com/mozilla/geckodriver/releases/" target="_blank" rel="noopener">点击进入下载页面</a></td><td>需要根据自己的操作系统下载对应的驱动</td></tr><tr><td>IE</td><td>IEDriverServer</td><td><a href="http://selenium-release.storage.googleapis.com/index.html" target="_blank" rel="noopener">点击进入下载页面</a></td><td>根据自己 selenium 版本和系统版本下载对应版本的驱动， selenium 版本可以在cmd中输入<code>pip show selenium</code>查看</td></tr></tbody></table><h1 id="【4-2】声明浏览器对象"><a href="#【4-2】声明浏览器对象" class="headerlink" title=" 【4.2】声明浏览器对象"></a><font color="#FF0000"> 【4.2】声明浏览器对象</font></h1><p>不同浏览器的对象声明方法：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"></span><br><span class="line">browser = webdriver.Chrome()  <span class="comment"># 谷歌浏览器</span></span><br><span class="line">browser = webdriver.Firefox()  <span class="comment"># 火狐浏览器</span></span><br><span class="line">browser = webdriver.Edge()  <span class="comment"># Edge</span></span><br><span class="line">browser = webdriver.PhantomJS()  <span class="comment"># PhantomJS无界面浏览器</span></span><br><span class="line">browser = webdriver.Safari()  <span class="comment"># Safari浏览器</span></span><br></pre></td></tr></table></figure></p><h1 id="【4-3】访问页面"><a href="#【4-3】访问页面" class="headerlink" title=" 【4.3】访问页面"></a><font color="#FF0000"> 【4.3】访问页面</font></h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"></span><br><span class="line">path = <span class="string">r'F:\PycharmProjects\Python3爬虫\chromedriver.exe'</span></span><br><span class="line">browser = webdriver.Chrome(executable_path=path)</span><br><span class="line">browser.get(<span class="string">'https://www.itrhx.com'</span>)</span><br><span class="line">print(browser.page_source)</span><br><span class="line">browser.close()</span><br></pre></td></tr></table></figure><p>运行代码就会自动打开谷歌浏览器，实现了用 get() 方法访问 <a href="http://www.itrhx.com">www.itrhx.com</a> ，path 里面的内容是谷歌浏览器驱动的目录， r 表示不转义，使用真实字符。<code>print(browser.page_source)</code> 表示打印页面源代码</p><h1 id="【4-4】启动参数"><a href="#【4-4】启动参数" class="headerlink" title=" 【4.4】启动参数"></a><font color="#FF0000"> 【4.4】启动参数</font></h1><p>Chrome Options 是一个 Chrome 的参数对象，在此对象中使用 add_argument() 方法可以添加启动参数，添加完毕后可以在初始化 Webdriver 对象时将此 Options 对象传入，则可以实现以特定参数启动Chrome。<br>示例：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.chrome.options <span class="keyword">import</span> Options</span><br><span class="line"></span><br><span class="line">path = <span class="string">r'F:\PycharmProjects\Python3爬虫\chromedriver.exe'</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 实例化一个启动参数对象</span></span><br><span class="line">chrome_options = Options()</span><br><span class="line"><span class="comment"># 添加启动参数</span></span><br><span class="line">chrome_options.add_argument(<span class="string">'--window-size=1366,768'</span>)</span><br><span class="line"><span class="comment"># 将参数对象传入Chrome，则启动了一个设置了窗口大小的Chrome</span></span><br><span class="line">browser = webdriver.Chrome(executable_path=path, chrome_options=chrome_options)</span><br><span class="line">browser.get(<span class="string">'http://www.itrhx.com'</span>)</span><br></pre></td></tr></table></figure></p><p>这样就启动了一个1366x768分辨率的浏览器<br>常见的启动参数：</p><table><thead><tr><th style="text-align:center">启动参数</th><th style="text-align:center">作用</th></tr></thead><tbody><tr><td style="text-align:center">–user-agent=””</td><td style="text-align:center">设置请求头的 User-Agent</td></tr><tr><td style="text-align:center">–window-size=xxx, xxx</td><td style="text-align:center">设置浏览器分辨率</td></tr><tr><td style="text-align:center">–headless</td><td style="text-align:center">无界面运行</td></tr><tr><td style="text-align:center">–start-maximized</td><td style="text-align:center">最大化运行</td></tr><tr><td style="text-align:center">–incognito</td><td style="text-align:center">隐身模式</td></tr><tr><td style="text-align:center">–disable-javascript</td><td style="text-align:center">禁用javascript</td></tr><tr><td style="text-align:center">–disable-infobars</td><td style="text-align:center">禁用“浏览器正在被自动化程序控制”的提示</td></tr></tbody></table><p>所有的启动参数：<a href="https://peter.sh/experiments/chromium-command-line-switches/" target="_blank" rel="noopener">https://peter.sh/experiments/chromium-command-line-switches/</a></p><h1 id="【4-5】查找节点"><a href="#【4-5】查找节点" class="headerlink" title=" 【4.5】查找节点"></a><font color="#FF0000"> 【4.5】查找节点</font></h1><p>Selenium 可以驱动浏览器完成各种操作，比如填充表单、模拟点击等。要完成这些操作，实现要知道在哪里点击，哪里填充，这就是 Selenium 节点查找</p><h2 id="【4-5-1】查找单个节点"><a href="#【4-5-1】查找单个节点" class="headerlink" title=" 【4.5.1】查找单个节点"></a><font color="#FF0000"> 【4.5.1】查找单个节点</font></h2><p>所有获取单个节点的方法：</p><ul><li><p><font color="#FF0000">find_element_by_id  【通过元素的 id 来选择】</font><br>例：<code>&lt;div id=&#39;bdy-inner&#39;&gt;test&lt;/div&gt;</code>，查找：<code>driver.find_element_by_id(&#39;bdy-inner&#39;)</code></p></li><li><p><font color="#FF0000">find_element_by_name  【通过元素的 name 来选择】</font><br>例：<code>&lt;input name=&quot;username&quot; type=&quot;text&quot; /&gt;</code>，查找：<code>driver.find_element_by_name(&#39;password&#39;)</code></p></li><li><p><font color="#FF0000">find_element_by_xpath  【通过 xpath 选择】</font><br>例：<code>&lt;form id=&quot;loginForm&quot;&gt;</code>，查找：<code>driver.find_element_by_xpath(&quot;//form[@id=&#39;loginForm&#39;]&quot;)</code></p></li><li><p><font color="#FF0000">find_element_by_link_text  【通过链接地址选择】</font><br>例：<code>&lt;a href=&quot;continue.html&quot;&gt;continue&lt;/a&gt;</code>，查询：<code>driver.find_element_by_link_text(&#39;continue&#39;)</code></p></li><li><p><font color="#FF0000">find_element_by_partial_link_text  【通过链接的部分地址选择】</font><br>例：<code>&lt;a href=&quot;continue.html&quot;&gt;continue&lt;/a&gt;</code>，查询：<code>driver.find_element_by_link_text(&#39;cont&#39;)</code></p></li><li><p><font color="#FF0000">find_element_by_tag_name  【通过元素的名称选择】</font><br>例：<code>&lt;h1&gt;welcome&lt;h1&gt;</code>，查询：<code>driver.find_element_by_tag_name(&#39;h1&#39;)</code></p></li><li><p><font color="#FF0000">find_element_by_class_name  【通过元素的 class 选择】</font><br>例：<code>&lt;p class=&quot;content&quot;&gt;welcome to TRHX&#39;S BLOG!&lt;/p&gt;</code>，查询：<code>driver.find_element_by_class_name(&#39;content&#39;)</code></p></li><li><p><font color="#FF0000">find_element_by_css_selector  【通过元素的 class 选择】</font><br>例：<code>&lt;div class=&#39;bdy-inner&#39;&gt;test&lt;/div&gt;</code>，查询：<code>driver.find_element_by_css_selector(&#39;div.bdy-inner&#39;)</code></p></li><li><p><font color="#FF0000">find_element()  【通用方法，需要传递两个参数：查找方式 By 和值】</font><br>例：<code>driver.find_element_by_id(&#39;inner&#39;)</code> 等价于 <code>find_element(By.ID, inner)</code>，使用时需要<code>from selenium.webdriver.common.by import By</code></p></li></ul><p>示例：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"></span><br><span class="line">path = <span class="string">r'F:\PycharmProjects\Python3爬虫\chromedriver.exe'</span></span><br><span class="line">browser = webdriver.Chrome(executable_path=path)</span><br><span class="line">browser.get(<span class="string">'https://www.itrhx.com'</span>)</span><br><span class="line">blog_title = browser.find_elements_by_class_name((<span class="string">'title'</span>))</span><br><span class="line">print(blog_title[<span class="number">0</span>].text)</span><br><span class="line">browser.close()</span><br></pre></td></tr></table></figure></p><p>输出结果：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">TRHX<span class="string">'S BLOG</span></span><br></pre></td></tr></table></figure></p><h2 id="【4-5-2】查找多个节点"><a href="#【4-5-2】查找多个节点" class="headerlink" title=" 【4.5.2】查找多个节点"></a><font color="#FF0000"> 【4.5.2】查找多个节点</font></h2><p>所有获取多个节点的方法：（与查找单个节点的区别是 element 多加了个 s）</p><ul><li>find_elements_by_id</li><li>find_elements_by_name</li><li>find_elements_by_xpath</li><li>find_elements_by_link_text</li><li>find_elements_by_partial_link_text</li><li>find_elements_by_tag_name</li><li>find_elements_by_class_name</li><li>find_elements_by_css_selector</li><li>find_elements()</li></ul><p>示例：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.common.by <span class="keyword">import</span> By</span><br><span class="line"></span><br><span class="line">path = <span class="string">r'F:\PycharmProjects\Python3爬虫\chromedriver.exe'</span></span><br><span class="line">browser = webdriver.Chrome(executable_path=path)</span><br><span class="line">browser.get(<span class="string">'https://www.itrhx.com'</span>)</span><br><span class="line">article_title = browser.find_elements(By.XPATH, <span class="string">"//h2[@class='title']"</span>)</span><br><span class="line">print(article_title)</span><br><span class="line">browser.close()</span><br></pre></td></tr></table></figure></p><h1 id="【4-6】节点交互"><a href="#【4-6】节点交互" class="headerlink" title=" 【4.6】节点交互"></a><font color="#FF0000"> 【4.6】节点交互</font></h1><p>Selenium 可以驱动浏览器来执行一些操作，也就是说可以让浏览器模拟执行一些动作。称为节点交互，比较常见的用法有：</p><ul><li>send_keys：模拟按键输入</li><li>clear：清除元素的内容</li><li>click：单击元素</li><li>submit：提交表单</li></ul><p>示例：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.common.keys <span class="keyword">import</span> Keys</span><br><span class="line"></span><br><span class="line">path = <span class="string">r'F:\PycharmProjects\Python3爬虫\chromedriver.exe'</span></span><br><span class="line">browser = webdriver.Chrome(executable_path=path)</span><br><span class="line">browser.get(<span class="string">'https://www.itrhx.com'</span>)</span><br><span class="line">search = browser.find_element_by_xpath(<span class="string">'//div[@class="cover-wrapper"]/cover/div/form/input'</span>)</span><br><span class="line">search.send_keys(<span class="string">"Python"</span>)</span><br><span class="line">search.send_keys(Keys.ENTER)</span><br></pre></td></tr></table></figure></p><p>此处模拟了键盘，需要导入键盘类 Keys()，send_keys(Keys.ENTER)表示模拟回车键，程序首先打开 <a href="http://www.itrhx.com">www.itrhx.com</a> ，也就是我的博客，然后通过 xpath 找到搜索框，输入 Python 并回车，等待结果显示出来<br>更多节点交互动作：<a href="https://selenium-python.readthedocs.io/api.html#module-selenium.webdriver.remote.webelement" target="_blank" rel="noopener">https://selenium-python.readthedocs.io/api.html#module-selenium.webdriver.remote.webelement</a></p><h1 id="【4-7】动作链"><a href="#【4-7】动作链" class="headerlink" title=" 【4.7】动作链"></a><font color="#FF0000"> 【4.7】动作链</font></h1><p>Selenium 还有另外一些操作，它们没有特定的执行对象，比如鼠标拖曳、键盘按键等，这些动作用另一种方式来执行，那就是动作链。以一个拖曳实例为例：<a href="http://www.runoob.com/try/try.php?filename=jqueryui-api-droppable" target="_blank" rel="noopener">http://www.runoob.com/try/try.php?filename=jqueryui-api-droppable</a><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver <span class="keyword">import</span> ActionChains</span><br><span class="line"></span><br><span class="line">path = <span class="string">r'F:\PycharmProjects\Python3爬虫\chromedriver.exe'</span></span><br><span class="line">browser = webdriver.Chrome(executable_path=path)</span><br><span class="line">url = <span class="string">'http://www.runoob.com/try/try.php?filename=jqueryui-api-droppable'</span></span><br><span class="line">browser.get(url)</span><br><span class="line">browser.switch_to.frame(<span class="string">'iframeResult'</span>)</span><br><span class="line">source = browser.find_element_by_css_selector(<span class="string">'#draggable'</span>)</span><br><span class="line">target = browser.find_element_by_css_selector(<span class="string">'#droppable'</span>)</span><br><span class="line">actions = ActionChains(browser)</span><br><span class="line">actions.drag_and_drop(source, target)</span><br><span class="line">actions.perform()</span><br></pre></td></tr></table></figure></p><p>依次选中要拖曳的节点和拖曳到的目标节点，接着声明 ActionChains 对象并将其赋值为 actions 变量，然后通过调用 actions 变量的 drag_and_drop() 方法，再调用 perform() 方法执行动作，此时就完成了拖曳操作，更多动作链操作：<a href="https://selenium-python.readthedocs.io/api.html#module-selenium.webdriver.common.action_chains" target="_blank" rel="noopener">https://selenium-python.readthedocs.io/api.html#module-selenium.webdriver.common.action_chains</a></p><h1 id="【4-8】执行-JavaScript"><a href="#【4-8】执行-JavaScript" class="headerlink" title=" 【4.8】执行 JavaScript"></a><font color="#FF0000"> 【4.8】执行 JavaScript</font></h1><p>Selenium API 并没有提供执行 JavaScript 的方法，但是实际上是可以实现的。比如，下拉进度条，它可以直接模拟运行 JavaScript，此时使用 execute_script() 方法即可实现<br>示例：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"></span><br><span class="line">path = <span class="string">r'F:\PycharmProjects\Python3爬虫\chromedriver.exe'</span></span><br><span class="line">browser = webdriver.Chrome(executable_path=path)</span><br><span class="line">browser.get(<span class="string">'https://www.itrhx.com'</span>)</span><br><span class="line">browser.execute_script(<span class="string">'window.scrollTo(0, document.body.scrollHeight)'</span>)</span><br><span class="line">browser.execute_script(<span class="string">'alert("已到达最底端！")'</span>)</span><br></pre></td></tr></table></figure></p><p>以上代码实现了利用 execute_script() 方法将进度条下拉到最底部，然后弹出 alert 提示框。</p><h1 id="【4-9】禁用加载"><a href="#【4-9】禁用加载" class="headerlink" title=" 【4.9】禁用加载"></a><font color="#FF0000"> 【4.9】禁用加载</font></h1><p>使用Selenium 时，限制图片和 Javascript 执行，从而提高网页加载速度。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"></span><br><span class="line">path = <span class="string">r'F:\PycharmProjects\Python3爬虫\chromedriver.exe'</span></span><br><span class="line"></span><br><span class="line">options = webdriver.ChromeOptions()</span><br><span class="line">prefs = &#123;</span><br><span class="line">    <span class="string">'profile.default_content_setting_values'</span>: &#123;</span><br><span class="line">        <span class="string">'images'</span>: <span class="number">2</span>,</span><br><span class="line">        <span class="string">'notifications'</span> : <span class="number">2</span>,  <span class="comment"># 禁用弹窗</span></span><br><span class="line">        <span class="string">'javascript'</span>: <span class="number">2</span>  <span class="comment"># 2即为禁用的意思</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">options.add_experimental_option(<span class="string">'prefs'</span>, prefs)</span><br><span class="line">browser = webdriver.Chrome(executable_path=path, chrome_options=options)</span><br><span class="line">browser.get(<span class="string">'http://www.itrhx.com'</span>)</span><br></pre></td></tr></table></figure></p><h1 id="【4-10】获取节点信息"><a href="#【4-10】获取节点信息" class="headerlink" title=" 【4.10】获取节点信息"></a><font color="#FF0000"> 【4.10】获取节点信息</font></h1><p>通过 page_source 属性可以获取网页的源代码，然后可以使用解析库（如正则表达式、Beautiful Soup等）来提取相关信息，Selenium 已经提供了选择节点的方法，返回的是 WebElement 类型，它也有相关的方法和属性来直接提取节点信息，如属性、文本等。就不需要再次使用解析库来提取信息了</p><h1 id="【4-10-1】获取属性"><a href="#【4-10-1】获取属性" class="headerlink" title=" 【4.10.1】获取属性"></a><font color="#FF0000"> 【4.10.1】获取属性</font></h1><p>使用 get_attribute() 方法来获取节点的属性：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"></span><br><span class="line">path = <span class="string">r'F:\PycharmProjects\Python3爬虫\chromedriver.exe'</span></span><br><span class="line">browser = webdriver.Chrome(executable_path=path)</span><br><span class="line">url = <span class="string">'http://www.itrhx.com'</span></span><br><span class="line">browser.get(url)</span><br><span class="line">meta = browser.find_element_by_id(<span class="string">'header-meta'</span>)</span><br><span class="line">print(meta)</span><br><span class="line">print(meta.get_attribute(<span class="string">'class'</span>))</span><br></pre></td></tr></table></figure></p><p>输出结果：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;selenium.webdriver.remote.webelement.WebElement (session=<span class="string">"d03cdaa497441d2e2a5161139b4a7ea5"</span>, element=<span class="string">"83f8fff9-60d7-4e9a-ade3-a8e97c9f0844"</span>)&gt;</span><br><span class="line">meta</span><br></pre></td></tr></table></figure></p><h1 id="【4-10-2】获取文本值"><a href="#【4-10-2】获取文本值" class="headerlink" title=" 【4.10.2】获取文本值"></a><font color="#FF0000"> 【4.10.2】获取文本值</font></h1><p>每个 WebElement 节点都有 text 属性，直接调用这个属性就可以得到节点内部的文本信息，相当于 Beautiful Soup 的 get_text() 方法、pyquery 的 text() 方法<br>示例：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"></span><br><span class="line">path = <span class="string">r'F:\PycharmProjects\Python3爬虫\chromedriver.exe'</span></span><br><span class="line">browser = webdriver.Chrome(executable_path=path)</span><br><span class="line">url = <span class="string">'http://www.itrhx.com'</span></span><br><span class="line">browser.get(url)</span><br><span class="line">footer_info = browser.find_element_by_id(<span class="string">'footer'</span>)</span><br><span class="line">print(footer_info.text)</span><br></pre></td></tr></table></figure></p><p>输出结果：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Copyright <span class="number">2018</span><span class="number">-2019</span> TRHX<span class="string">'BLOG   |   鄂ICP备19003281号-4  |   本站已勉强存活了 376 天 20 小时 57 分 52 秒   |   站点地图  |   站长统计</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">PoweredHexo HostedGitHub DNRAliyun CDNjsDelivr ThemeMaterial X BY-NC-SA 4.0 Link996.ICU UV4898 PV22066 WordCount54.9k</span></span><br></pre></td></tr></table></figure></p><h1 id="【4-10-3】获取-ID、位置、标签名、大小"><a href="#【4-10-3】获取-ID、位置、标签名、大小" class="headerlink" title=" 【4.10.3】获取 ID、位置、标签名、大小"></a><font color="#FF0000"> 【4.10.3】获取 ID、位置、标签名、大小</font></h1><p>其他属性，比如 id 属性可以获取节点 id，location 属性可以获取该节点在页面中的相对位置，tag_name 属性可以获取标签名称，size 属性可以获取节点的大小等<br>示例：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"></span><br><span class="line">path = <span class="string">r'F:\PycharmProjects\Python3爬虫\chromedriver.exe'</span></span><br><span class="line">browser = webdriver.Chrome(executable_path=path)</span><br><span class="line">url = <span class="string">'http://www.itrhx.com'</span></span><br><span class="line">browser.get(url)</span><br><span class="line">readmore = browser.find_element_by_class_name(<span class="string">'readmore'</span>)</span><br><span class="line">print(readmore.id)</span><br><span class="line">print(readmore.location)</span><br><span class="line">print(readmore.tag_name)</span><br><span class="line">print(readmore.size)</span><br></pre></td></tr></table></figure></p><p>输出结果：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">7</span>df561d3<span class="number">-7</span>ea4<span class="number">-4</span>b90<span class="number">-96</span>aa<span class="number">-64044060</span>bb47</span><br><span class="line">&#123;<span class="string">'x'</span>: <span class="number">50</span>, <span class="string">'y'</span>: <span class="number">1063</span>&#125;</span><br><span class="line">div</span><br><span class="line">&#123;<span class="string">'height'</span>: <span class="number">39</span>, <span class="string">'width'</span>: <span class="number">465</span>&#125;</span><br></pre></td></tr></table></figure></p><h1 id="【4-11】延时等待"><a href="#【4-11】延时等待" class="headerlink" title=" 【4.11】延时等待"></a><font color="#FF0000"> 【4.11】延时等待</font></h1><p>在 Selenium 中，get() 方法会在网页框架加载结束后结束执行，某些页面有额外的 Ajax 请求，若此时立即获取 page_source，可能并不是浏览器完全加载完成的页面，这里需要延时等待一定时间，确保节点已经加载出来</p><h2 id="【4-11-1】隐式等待"><a href="#【4-11-1】隐式等待" class="headerlink" title=" 【4.11.1】隐式等待"></a><font color="#FF0000"> 【4.11.1】隐式等待</font></h2><p>当查找节点的时候，节点并没有立即出现，隐式等待将等待一段时间再查找该节点，使用 <code>implicitly_wait()</code> 方法可以实现隐式等待<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"></span><br><span class="line">path = <span class="string">r'F:\PycharmProjects\Python3爬虫\chromedriver.exe'</span></span><br><span class="line">browser = webdriver.Chrome(executable_path=path)</span><br><span class="line">browser.implicitly_wait(<span class="number">10</span>)</span><br><span class="line">browser.get(<span class="string">'https://www.itrhx.com'</span>)</span><br><span class="line">readmore = browser.find_element_by_class_name(<span class="string">'readmore'</span>)</span><br><span class="line">print(readmore)</span><br></pre></td></tr></table></figure></p><h2 id="【4-11-2】显式等待"><a href="#【4-11-2】显式等待" class="headerlink" title=" 【4.11.2】显式等待"></a><font color="#FF0000"> 【4.11.2】显式等待</font></h2><p>指定要查找的节点，然后指定一个最长等待时间。如果在规定时间内加载出来了这个节点，就立即返回查找的节点，果到了规定时间依然没有加载出该节点，则抛出超时异常<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.common.by <span class="keyword">import</span> By</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.support.ui <span class="keyword">import</span> WebDriverWait</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.support <span class="keyword">import</span> expected_conditions <span class="keyword">as</span> EC</span><br><span class="line"></span><br><span class="line">path = <span class="string">r'F:\PycharmProjects\Python3爬虫\chromedriver.exe'</span></span><br><span class="line">browser = webdriver.Chrome(executable_path=path)</span><br><span class="line">browser.implicitly_wait(<span class="number">10</span>)</span><br><span class="line">browser.get(<span class="string">'https://www.itrhx.com'</span>)</span><br><span class="line">wait = WebDriverWait(browser, <span class="number">10</span>)</span><br><span class="line">footer_info = wait.until(EC.presence_of_element_located((By.ID, <span class="string">'footer'</span>)))</span><br><span class="line">print(footer_info)</span><br></pre></td></tr></table></figure></p><p>引入 WebDriverWait 对象，指定最长等待时间，调用它的 until() 方法，传入要等待条件 expected_conditions。比如，这里传入了 presence_of_element_located 这个条件，代表节点出现的意思，其参数是节点的定位元组，也就是 ID 为 footer 的节点。</p><p>这样可以做到的效果就是，在 10 秒内如果 ID 为 footer 的节点成功加载出来，就返回该节点；如果超过 10 秒还没有加载出来，就抛出异常。</p><p>加载成功时输出结果：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;selenium.webdriver.remote.webelement.WebElement (session=<span class="string">"4ca7015891fded627ab680d9462e9361"</span>, element=<span class="string">"3a80235c-9824-420b-b827-662638422765"</span>)&gt;</span><br></pre></td></tr></table></figure></p><p>加载失败时输出结果：<br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">TimeoutException Traceback (most recent call last)</span><br><span class="line">&lt;ipython-input<span class="number">-4</span>-f3d73973b223&gt; <span class="keyword">in</span> &lt;module&gt;()</span><br><span class="line">      <span class="number">7</span> browser.get(<span class="string">'https://www.itrhx.com'</span>)</span><br><span class="line">      <span class="number">8</span> wait = WebDriverWait(browser, <span class="number">10</span>)</span><br><span class="line">----&gt; 9 input = wait.until(EC.presence_of_element_located((By.ID, 'footer')))</span><br></pre></td></tr></table></figure></p><h1 id="【4-12】Cookies"><a href="#【4-12】Cookies" class="headerlink" title=" 【4.12】Cookies"></a><font color="#FF0000"> 【4.12】Cookies</font></h1><p>使用 Selenium，可以方便地对 Cookies 进行获取、添加、删除等操作：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"></span><br><span class="line">path = <span class="string">r'F:\PycharmProjects\Python3爬虫\chromedriver.exe'</span></span><br><span class="line">browser = webdriver.Chrome(executable_path=path)</span><br><span class="line">browser.get(<span class="string">'https://www.zhihu.com/explore'</span>)</span><br><span class="line">print(browser.get_cookies())</span><br><span class="line">browser.add_cookie(&#123;<span class="string">'name'</span>: <span class="string">'TRHX'</span>, <span class="string">'domain'</span>: <span class="string">'www.zhihu.com'</span>, <span class="string">'value'</span>: <span class="string">'germey'</span>&#125;)</span><br><span class="line">print(browser.get_cookies())</span><br><span class="line">browser.delete_all_cookies()</span><br><span class="line">print(browser.get_cookies())</span><br></pre></td></tr></table></figure></p><p>访问知乎，加载完成后，浏览器已经生成了 Cookies。调用 get_cookies() 方法获取所有的 Cookies。然后再添加一个 Cookie，传入一个字典，有 name、domain 和 value 等内容。接下来，再次获取所有的 Cookies。可以发现，结果就多了这一项新加的 Cookie。最后，调用 delete_all_cookies() 方法删除所有的 Cookies。再重新获取，发现结果就为空了<br>输出结果：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[&#123;<span class="string">'domain'</span>: <span class="string">'zhihu.com'</span>, <span class="string">'expiry'</span>: <span class="number">1661065738.754333</span>, <span class="string">'httpOnly'</span>: <span class="keyword">False</span>, <span class="string">'name'</span>: <span class="string">'d_c0'</span>, <span class="string">'path'</span>: <span class="string">'/'</span>, <span class="string">'secure'</span>: <span class="keyword">False</span>, <span class="string">'value'</span>: <span class="string">'"AODi_Lod7g-PTrrXUgXb1N4MkbStCrbNlD4=|1566457741"'</span>&#125;, &#123;<span class="string">'domain'</span>: <span class="string">'zhihu.com'</span>, <span class="string">'httpOnly'</span>: <span class="keyword">False</span>, <span class="string">'name'</span>: <span class="string">'_xsrf'</span>, <span class="string">'path'</span>: <span class="string">'/'</span>, <span class="string">'secure'</span>: <span class="keyword">False</span>, <span class="string">'value'</span>: <span class="string">'aba68431-9daf-4b62-a67a-023c1a24f0e8'</span>&#125;, &#123;<span class="string">'domain'</span>: <span class="string">'zhihu.com'</span>, <span class="string">'expiry'</span>: <span class="number">1629529738.75427</span>, <span class="string">'httpOnly'</span>: <span class="keyword">False</span>, <span class="string">'name'</span>: <span class="string">'_zap'</span>, <span class="string">'path'</span>: <span class="string">'/'</span>, <span class="string">'secure'</span>: <span class="keyword">False</span>, <span class="string">'value'</span>: <span class="string">'b6f63cfc-a525-4ae6-a7bf-6384bd1e0548'</span>&#125;, &#123;<span class="string">'domain'</span>: <span class="string">'www.zhihu.com'</span>, <span class="string">'expiry'</span>: <span class="number">1566458637.754178</span>, <span class="string">'httpOnly'</span>: <span class="keyword">False</span>, <span class="string">'name'</span>: <span class="string">'tgw_l7_route'</span>, <span class="string">'path'</span>: <span class="string">'/'</span>, <span class="string">'secure'</span>: <span class="keyword">False</span>, <span class="string">'value'</span>: <span class="string">'116a747939468d99065d12a386ab1c5f'</span>&#125;]</span><br><span class="line">[&#123;<span class="string">'domain'</span>: <span class="string">'www.zhihu.com'</span>, <span class="string">'httpOnly'</span>: <span class="keyword">False</span>, <span class="string">'name'</span>: <span class="string">'TRHX'</span>, <span class="string">'path'</span>: <span class="string">'/'</span>, <span class="string">'secure'</span>: <span class="keyword">True</span>, <span class="string">'value'</span>: <span class="string">'germey'</span>&#125;, &#123;<span class="string">'domain'</span>: <span class="string">'zhihu.com'</span>, <span class="string">'expiry'</span>: <span class="number">1661065738.754333</span>, <span class="string">'httpOnly'</span>: <span class="keyword">False</span>, <span class="string">'name'</span>: <span class="string">'d_c0'</span>, <span class="string">'path'</span>: <span class="string">'/'</span>, <span class="string">'secure'</span>: <span class="keyword">False</span>, <span class="string">'value'</span>: <span class="string">'"AODi_Lod7g-PTrrXUgXb1N4MkbStCrbNlD4=|1566457741"'</span>&#125;, &#123;<span class="string">'domain'</span>: <span class="string">'zhihu.com'</span>, <span class="string">'httpOnly'</span>: <span class="keyword">False</span>, <span class="string">'name'</span>: <span class="string">'_xsrf'</span>, <span class="string">'path'</span>: <span class="string">'/'</span>, <span class="string">'secure'</span>: <span class="keyword">False</span>, <span class="string">'value'</span>: <span class="string">'aba68431-9daf-4b62-a67a-023c1a24f0e8'</span>&#125;, &#123;<span class="string">'domain'</span>: <span class="string">'zhihu.com'</span>, <span class="string">'expiry'</span>: <span class="number">1629529738.75427</span>, <span class="string">'httpOnly'</span>: <span class="keyword">False</span>, <span class="string">'name'</span>: <span class="string">'_zap'</span>, <span class="string">'path'</span>: <span class="string">'/'</span>, <span class="string">'secure'</span>: <span class="keyword">False</span>, <span class="string">'value'</span>: <span class="string">'b6f63cfc-a525-4ae6-a7bf-6384bd1e0548'</span>&#125;, &#123;<span class="string">'domain'</span>: <span class="string">'www.zhihu.com'</span>, <span class="string">'expiry'</span>: <span class="number">1566458637.754178</span>, <span class="string">'httpOnly'</span>: <span class="keyword">False</span>, <span class="string">'name'</span>: <span class="string">'tgw_l7_route'</span>, <span class="string">'path'</span>: <span class="string">'/'</span>, <span class="string">'secure'</span>: <span class="keyword">False</span>, <span class="string">'value'</span>: <span class="string">'116a747939468d99065d12a386ab1c5f'</span>&#125;]</span><br><span class="line">[&#123;<span class="string">'domain'</span>: <span class="string">'zhihu.com'</span>, <span class="string">'expiry'</span>: <span class="number">1644217741.489889</span>, <span class="string">'httpOnly'</span>: <span class="keyword">False</span>, <span class="string">'name'</span>: <span class="string">'_xsrf'</span>, <span class="string">'path'</span>: <span class="string">'/'</span>, <span class="string">'secure'</span>: <span class="keyword">False</span>, <span class="string">'value'</span>: <span class="string">'WNOjpDbNmz36B4nG1lzSAuPdTyORMX6J'</span>&#125;]</span><br></pre></td></tr></table></figure></p><h1 id="【4-13】前进与后退"><a href="#【4-13】前进与后退" class="headerlink" title=" 【4.13】前进与后退"></a><font color="#FF0000"> 【4.13】前进与后退</font></h1><p>使用 back() 方法后退，使用 forward() 方法前进，与浏览器的前进后退一样<br>示例：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line">path = <span class="string">r'F:\PycharmProjects\Python3爬虫\chromedriver.exe'</span></span><br><span class="line">browser = webdriver.Chrome(executable_path=path)</span><br><span class="line">browser.get(<span class="string">'https://www.itrhx.com/'</span>)</span><br><span class="line">browser.get(<span class="string">'https://www.baidu.com/'</span>)</span><br><span class="line">browser.get(<span class="string">'https://www.zhihu.com/'</span>)</span><br><span class="line">browser.back()</span><br><span class="line">time.sleep(<span class="number">1</span>)</span><br><span class="line">browser.forward()</span><br><span class="line">browser.close()</span><br></pre></td></tr></table></figure></p><h1 id="【4-14】选项卡"><a href="#【4-14】选项卡" class="headerlink" title=" 【4.14】选项卡"></a><font color="#FF0000"> 【4.14】选项卡</font></h1><p>和浏览器一样，在 Selenium 中也可以新建一个选项卡<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line">path = <span class="string">r'F:\PycharmProjects\Python3爬虫\chromedriver.exe'</span></span><br><span class="line">browser = webdriver.Chrome(executable_path=path)</span><br><span class="line">browser.get(<span class="string">'https://www.itrhx.com'</span>)</span><br><span class="line">browser.execute_script(<span class="string">'window.open()'</span>)</span><br><span class="line">print(browser.window_handles)</span><br><span class="line">browser.switch_to.window(browser.window_handles[<span class="number">1</span>])</span><br><span class="line">browser.get(<span class="string">'https://www.baidu.com'</span>)</span><br><span class="line">time.sleep(<span class="number">1</span>)</span><br><span class="line">browser.switch_to.window(browser.window_handles[<span class="number">0</span>])</span><br><span class="line">browser.get(<span class="string">'https://www.zhihu.com'</span>)</span><br></pre></td></tr></table></figure></p><p>首先访问我的博客，然后调用了 <code>execute_script()</code> 方法，传入 <code>window.open()</code> 这个 JavaScript 语句开启一个新的选项卡。再调用 <code>window_handles</code> 属性获取当前开启的所有选项卡，返回的是选项卡的代号列表。调用 <code>switch_to_window()</code> 方法来切换选项卡，其中参数是选项卡的代号。<br>输出的选项卡代号列表：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[<span class="string">'CDwindow-C9CADF1ED28CE44970655238552A8DCF'</span>, <span class="string">'CDwindow-538D7F81E467746B7BB2D9D82E2D036E'</span>]</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;center&gt;&lt;font color=&quot;#1BC3FB&quot; size=&quot;4&quot;&gt;Python3 爬虫学习笔记第四章 —— 【自动化测试工具 Selenium】&lt;/font&gt;&lt;/center&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="Python3 学习笔记" scheme="https://www.itrhx.com/categories/Python3-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
      <category term="Python3 爬虫" scheme="https://www.itrhx.com/categories/Python3-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/Python3-%E7%88%AC%E8%99%AB/"/>
    
    
      <category term="爬虫" scheme="https://www.itrhx.com/tags/%E7%88%AC%E8%99%AB/"/>
    
      <category term="Selenium" scheme="https://www.itrhx.com/tags/Selenium/"/>
    
  </entry>
  
  <entry>
    <title>Python3爬虫学习笔记 C03</title>
    <link href="https://www.itrhx.com/2019/08/23/A31-Python3-spider-C03/"/>
    <id>https://www.itrhx.com/2019/08/23/A31-Python3-spider-C03/</id>
    <published>2019-08-23T01:28:22.178Z</published>
    <updated>2019-08-22T02:43:11.872Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><blockquote><center><font color="#1BC3FB" size="4">Python3 爬虫学习笔记第三章 ——【Ajax 数据爬取】</font></center></blockquote><a id="more"></a><h1 id="【3-1】Ajax-简介"><a href="#【3-1】Ajax-简介" class="headerlink" title=" 【3.1】Ajax 简介"></a><font color="#FF0000"> 【3.1】Ajax 简介</font></h1><p>Ajax — Asynchronous Javascript And XML（异步 JavaScript 和 XML），是指一种创建交互式网页应用的网页开发技术。可以在不重新加载整个网页的情况下，对网页的某部分进行更新。</p><h1 id="【3-2】解析真实地址提取"><a href="#【3-2】解析真实地址提取" class="headerlink" title=" 【3.2】解析真实地址提取"></a><font color="#FF0000"> 【3.2】解析真实地址提取</font></h1><p>以豆瓣电影动作片排行榜为例，地址为：<a href="https://movie.douban.com/typerank?type_name=%E5%8A%A8%E4%BD%9C&amp;type=5&amp;interval_id=100:90&amp;action=" target="_blank" rel="noopener">https://movie.douban.com/typerank?type_name=%E5%8A%A8%E4%BD%9C&amp;type=5&amp;interval_id=100:90&amp;action=</a> ，首先使用常用方法来爬取电影信息：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">url = <span class="string">'https://movie.douban.com/typerank?type_name=%E5%8A%A8%E4%BD%9C&amp;type=5&amp;interval_id=100:90&amp;action='</span></span><br><span class="line"></span><br><span class="line">headers = &#123;<span class="string">"User-Agent"</span>: <span class="string">"Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/58.0.3029.110 Safari/537.36 SE 2.X MetaSr 1.0"</span>&#125;</span><br><span class="line">response = requests.get(url, headers=headers)</span><br><span class="line"></span><br><span class="line">print(response.text)</span><br></pre></td></tr></table></figure></p><p>得到的数据里面我们并没有找到电影相关信息：<br><img src="https://cdn.jsdelivr.net/gh/TRHX/ImageHosting/ITRHX-PIC/A31/1.png" alt="1"><br>再次分析页面，发现鼠标下滑的时候，页面不刷新，URL 也不变，但是会加载新数据，那么此处就运用了 Ajax，可以使用抓包工具或者浏览器控制台来捕获 Ajax 接口，获取其真实地址，XHR 是 Ajax 特殊的请求类型，返回的是 json 数据，利用浏览器控制台过滤 XHR，随便点击一条请求，可以看到其 Request URL，也就是真实地址，点击 Preview 就可以看到返回的 json 数据。<br><img src="https://cdn.jsdelivr.net/gh/TRHX/ImageHosting/ITRHX-PIC/A31/2.png" alt="2"><br><img src="https://cdn.jsdelivr.net/gh/TRHX/ImageHosting/ITRHX-PIC/A31/3.png" alt="3"><br>同样，我们可以使用 Fiddler 抓包软件抓取 Ajax 接口：<br><img src="https://cdn.jsdelivr.net/gh/TRHX/ImageHosting/ITRHX-PIC/A31/4.png" alt="4"><br>分析其真实地址为：<a href="https://movie.douban.com/j/chart/top_list?type=5&amp;interval_id=100%3A90&amp;action=&amp;start=20&amp;limit=20" target="_blank" rel="noopener">https://movie.douban.com/j/chart/top_list?type=5&amp;interval_id=100%3A90&amp;action=&amp;start=20&amp;limit=20</a> ，多下滑几次，只有 start 参数发生了改变，观察变化可知：每一次页面将多出20个电影信息，start 为从第几个电影开始，由此就不难进行数据抓取了</p><p>代码：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">url = <span class="string">'https://movie.douban.com/j/chart/top_list?type=5&amp;interval_id=100%3A90&amp;action=&amp;'</span></span><br><span class="line"></span><br><span class="line">page = int(input(<span class="string">'请输入想要第几页的数据：'</span>))</span><br><span class="line">data = &#123;</span><br><span class="line"><span class="string">'start'</span>: (page - <span class="number">1</span>)*<span class="number">20</span>,</span><br><span class="line"><span class="string">'limit'</span>: <span class="string">'20'</span>,</span><br><span class="line">&#125;</span><br><span class="line">headers = &#123;</span><br><span class="line"><span class="string">'User-Agent'</span>: <span class="string">'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/73.0.3683.86 Safari/537.36'</span>,</span><br><span class="line">&#125;</span><br><span class="line">response = requests.get(url, params=data, headers=headers)</span><br><span class="line">print(response.text)</span><br></pre></td></tr></table></figure></p><p>运行代码即可得到电影排行信息：<br><img src="https://cdn.jsdelivr.net/gh/TRHX/ImageHosting/ITRHX-PIC/A31/5.png" alt="5"></p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;center&gt;&lt;font color=&quot;#1BC3FB&quot; size=&quot;4&quot;&gt;Python3 爬虫学习笔记第三章 ——【Ajax 数据爬取】&lt;/font&gt;&lt;/center&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="Python3 学习笔记" scheme="https://www.itrhx.com/categories/Python3-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
      <category term="Python3 爬虫" scheme="https://www.itrhx.com/categories/Python3-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/Python3-%E7%88%AC%E8%99%AB/"/>
    
    
      <category term="爬虫" scheme="https://www.itrhx.com/tags/%E7%88%AC%E8%99%AB/"/>
    
      <category term="Ajax" scheme="https://www.itrhx.com/tags/Ajax/"/>
    
  </entry>
  
  <entry>
    <title>Python3爬虫学习笔记 C02</title>
    <link href="https://www.itrhx.com/2019/08/23/A30-Python3-spider-C02/"/>
    <id>https://www.itrhx.com/2019/08/23/A30-Python3-spider-C02/</id>
    <published>2019-08-23T01:28:22.053Z</published>
    <updated>2019-08-22T02:43:04.417Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><blockquote><center><font color="#1BC3FB" size="4">Python3 爬虫学习笔记第二章 ——【基本库 requests 的使用】</font></center></blockquote><a id="more"></a><h1 id="【2-1】-requests-简介"><a href="#【2-1】-requests-简介" class="headerlink" title=" 【2.1】 requests 简介"></a><font color="#FF0000"> 【2.1】 requests 简介</font></h1><p>在 Python 中有两种方式可以发送 HTTP 请求，分别是自带的 urllib 库和第三方的 requests 库</p><blockquote><p>requests 模块需要使用 pip install 命令安装安装，相比 urllib，它的 API 更加人性化，使用 requests 可以让 Cookies、登录验证、代理设置等操作更加简便，官网介绍：<a href="http://cn.python-requests.org" target="_blank" rel="noopener">http://cn.python-requests.org</a></p></blockquote><h1 id="【2-2】-requests-基本用法"><a href="#【2-2】-requests-基本用法" class="headerlink" title=" 【2.2】 requests 基本用法"></a><font color="#FF0000"> 【2.2】 requests 基本用法</font></h1><p>示例：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line">r = requests.get(<span class="string">'https://www.itrhx.com/'</span>)</span><br><span class="line">print(type(r))</span><br><span class="line">print(r.encoding)</span><br><span class="line">print(r.status_code)</span><br><span class="line">print(r.cookies)</span><br><span class="line">print(r.json)</span><br><span class="line">print(r.text)</span><br><span class="line">print(r.content)</span><br></pre></td></tr></table></figure></p><p>输出结果：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;<span class="class"><span class="keyword">class</span> '<span class="title">requests</span>.<span class="title">models</span>.<span class="title">Response</span>'&gt;</span></span><br><span class="line"><span class="class"><span class="title">utf</span>-8</span></span><br><span class="line"><span class="class">200</span></span><br><span class="line"><span class="class">&lt;<span class="title">RequestsCookieJar</span>[]&gt;</span></span><br><span class="line"><span class="class">&lt;<span class="title">bound</span> <span class="title">method</span> <span class="title">Response</span>.<span class="title">json</span> <span class="title">of</span> &lt;<span class="title">Response</span> [200]&gt;&gt;</span></span><br><span class="line"><span class="class">&lt;!<span class="title">DOCTYPE</span> <span class="title">html</span>&gt;</span></span><br><span class="line"><span class="class">&lt;<span class="title">html</span>&gt;</span></span><br><span class="line"><span class="class">&lt;<span class="title">head</span>&gt;</span></span><br><span class="line">  &lt;meta charset="utf-8"&gt;</span><br><span class="line">  ......</span><br></pre></td></tr></table></figure></p><ul><li>r.encoding：服务器内容使用的文本编码；</li><li>r.status_code：响应状态码，200 代表成功，4xx 代表客户端错误，5xx 服务器响应错误；</li><li>r.cookies：返回 Cookies；</li><li>r.json：Requests 内置 JSON 解码器；</li><li>r.text：服务器响应内容，根据响应头部的字符编码自动解码；</li><li>r.content：字节方式的响应体，自动解码 gzip 和 deflate 编码的响应。</li></ul><h1 id="【2-3】-requests-构建-GET-请求"><a href="#【2-3】-requests-构建-GET-请求" class="headerlink" title=" 【2.3】 requests 构建 GET 请求"></a><font color="#FF0000"> 【2.3】 requests 构建 GET 请求</font></h1><h2 id="【2-3-1】-基本用法"><a href="#【2-3-1】-基本用法" class="headerlink" title=" 【2.3.1】 基本用法"></a><font color="#FF0000"> 【2.3.1】 基本用法</font></h2><p>示例：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">data = &#123;</span><br><span class="line">    <span class="string">'name'</span>: <span class="string">'TRHX'</span>,</span><br><span class="line">    <span class="string">'age'</span>: <span class="string">'20'</span></span><br><span class="line">&#125;</span><br><span class="line">r = requests.get(<span class="string">"http://httpbin.org/get"</span>, params=data)</span><br><span class="line">print(<span class="string">'编码后的URL：'</span>, r.url)</span><br><span class="line">print(<span class="string">'字符串方式的响应体：'</span>, r.text)</span><br></pre></td></tr></table></figure></p><p>输出结果：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">编码后的URL： http://httpbin.org/get?name=TRHX&amp;age=20</span><br><span class="line">字符串方式的响应体： &#123;</span><br><span class="line">  <span class="string">"args"</span>: &#123;</span><br><span class="line">    <span class="string">"age"</span>: <span class="string">"20"</span>, </span><br><span class="line">    <span class="string">"name"</span>: <span class="string">"TRHX"</span></span><br><span class="line">  &#125;, </span><br><span class="line">  <span class="string">"headers"</span>: &#123;</span><br><span class="line">    <span class="string">"Accept"</span>: <span class="string">"*/*"</span>, </span><br><span class="line">    <span class="string">"Accept-Encoding"</span>: <span class="string">"gzip, deflate"</span>, </span><br><span class="line">    <span class="string">"Host"</span>: <span class="string">"httpbin.org"</span>, </span><br><span class="line">    <span class="string">"User-Agent"</span>: <span class="string">"python-requests/2.22.0"</span></span><br><span class="line">  &#125;, </span><br><span class="line">  <span class="string">"origin"</span>: <span class="string">"171.115.102.230, 171.115.102.230"</span>, </span><br><span class="line">  <span class="string">"url"</span>: <span class="string">"https://httpbin.org/get?name=TRHX&amp;age=20"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="【2-3-2】-二进制数据抓取"><a href="#【2-3-2】-二进制数据抓取" class="headerlink" title=" 【2.3.2】 二进制数据抓取"></a><font color="#FF0000"> 【2.3.2】 二进制数据抓取</font></h2><p>以抓取 GitHub 站点图标为例：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">r = requests.get(<span class="string">"https://github.com/favicon.ico"</span>)</span><br><span class="line"><span class="keyword">with</span> open(<span class="string">'favicon.ico'</span>, <span class="string">'wb'</span>) <span class="keyword">as</span> f:</span><br><span class="line">    f.write(r.content)</span><br></pre></td></tr></table></figure></p><p>该代码将会保存站点图标到本地，其他的，比如音频，视频文件都是由二进制码组成的，皆可使用该方法</p><h2 id="【2-3-3】-添加-headers"><a href="#【2-3-3】-添加-headers" class="headerlink" title=" 【2.3.3】 添加 headers"></a><font color="#FF0000"> 【2.3.3】 添加 headers</font></h2><p>headers 的作用：部分页面禁止 Python 爬虫对其进行爬取，而添加 headers 就可以模拟成浏览器取访问网站，实现数据的爬取，headers 可以在任意网页 F12 检查控制台里面找到，headers 最重要的是 “User-Agent” 字段</p><p><fancybox><br><img src="https://cdn.jsdelivr.net/gh/TRHX/ImageHosting/ITRHX-PIC/A30/Snipaste_2019-08-19_17-10-11.png" alt="01"><br></fancybox><br>以为例知乎，只有加了 headers 才能正常爬取，否则会返回 400 Bad Request 没有任何数据<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">headers = &#123;<span class="string">'User-Agent'</span>: <span class="string">'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/75.0.3770.142 Safari/537.36'</span></span><br><span class="line">&#125;</span><br><span class="line">r = requests.get(<span class="string">"https://www.zhihu.com/explore"</span>, headers=headers)</span><br><span class="line">print(r.text)</span><br></pre></td></tr></table></figure></p><h1 id="【2-4】-requests-构建-POST-请求"><a href="#【2-4】-requests-构建-POST-请求" class="headerlink" title=" 【2.4】 requests 构建 POST 请求"></a><font color="#FF0000"> 【2.4】 requests 构建 POST 请求</font></h1><p>示例：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">data = &#123;<span class="string">'name'</span>: <span class="string">'TRHX'</span>, <span class="string">'age'</span>: <span class="string">'20'</span>&#125;</span><br><span class="line">r = requests.post(<span class="string">"http://httpbin.org/post"</span>, data=data)</span><br><span class="line">print(r.text)</span><br></pre></td></tr></table></figure></p><p>输出结果：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="string">"args"</span>: &#123;&#125;, </span><br><span class="line">  <span class="string">"data"</span>: <span class="string">""</span>, </span><br><span class="line">  <span class="string">"files"</span>: &#123;&#125;, </span><br><span class="line">  <span class="string">"form"</span>: &#123;</span><br><span class="line">    <span class="string">"age"</span>: <span class="string">"22"</span>, </span><br><span class="line">    <span class="string">"name"</span>: <span class="string">"germey"</span></span><br><span class="line">  &#125;, </span><br><span class="line">  <span class="string">"headers"</span>: &#123;</span><br><span class="line">    <span class="string">"Accept"</span>: <span class="string">"*/*"</span>, </span><br><span class="line">    <span class="string">"Accept-Encoding"</span>: <span class="string">"gzip, deflate"</span>, </span><br><span class="line">    <span class="string">"Content-Length"</span>: <span class="string">"18"</span>, </span><br><span class="line">    <span class="string">"Content-Type"</span>: <span class="string">"application/x-www-form-urlencoded"</span>, </span><br><span class="line">    <span class="string">"Host"</span>: <span class="string">"httpbin.org"</span>, </span><br><span class="line">    <span class="string">"User-Agent"</span>: <span class="string">"python-requests/2.22.0"</span></span><br><span class="line">  &#125;, </span><br><span class="line">  <span class="string">"json"</span>: null, </span><br><span class="line">  <span class="string">"origin"</span>: <span class="string">"171.115.102.230, 171.115.102.230"</span>, </span><br><span class="line">  <span class="string">"url"</span>: <span class="string">"https://httpbin.org/post"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>有关 POST 和 GET 两种请求的一些区别：</p><ul><li>POST 更加安全，不会作为 URL 的一部分，不会被缓存，保存在服务器日志、以及浏览器浏览记录中；</li><li>POST 发送的数据更大，GET 有 URL 长度限制；</li><li>POST 可以发送更多的数据类型，GET 只能发送 ASCII 字符；</li><li>POST 比 GET 慢；</li><li>POST 查询参数在 WebForms 保存，GET 查询参数在 QueryString 保存；</li><li>POST 用数据的修改和写入，GET 一般用于搜索排序和筛选之类的操作。</li></ul><h1 id="【2-5】-requests-高级用法"><a href="#【2-5】-requests-高级用法" class="headerlink" title=" 【2.5】 requests 高级用法"></a><font color="#FF0000"> 【2.5】 requests 高级用法</font></h1><h2 id="【2-5-1】-上传文件"><a href="#【2-5-1】-上传文件" class="headerlink" title=" 【2.5.1】 上传文件"></a><font color="#FF0000"> 【2.5.1】 上传文件</font></h2><p>示例：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">files = &#123;<span class="string">'file'</span>: open(<span class="string">'test.png'</span>, <span class="string">'rb'</span>)&#125;</span><br><span class="line">r = requests.post(<span class="string">'http://httpbin.org/post'</span>, files=files)</span><br><span class="line">print(r.text)</span><br></pre></td></tr></table></figure></p><p>输出结果：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="string">"args"</span>: &#123;&#125;, </span><br><span class="line">  <span class="string">"data"</span>: <span class="string">""</span>, </span><br><span class="line">  <span class="string">"files"</span>: &#123;</span><br><span class="line">    <span class="string">"file"</span>: <span class="string">"data:application/octet-stream;base64,iVBOR......"</span></span><br><span class="line">  &#125;, </span><br><span class="line">  <span class="string">"form"</span>: &#123;&#125;, </span><br><span class="line">  <span class="string">"headers"</span>: &#123;</span><br><span class="line">    <span class="string">"Accept"</span>: <span class="string">"*/*"</span>, </span><br><span class="line">    <span class="string">"Accept-Encoding"</span>: <span class="string">"gzip, deflate"</span>, </span><br><span class="line">    <span class="string">"Content-Length"</span>: <span class="string">"81383"</span>, </span><br><span class="line">    <span class="string">"Content-Type"</span>: <span class="string">"multipart/form-data; boundary=e36a8686cd77c79dc02bfe9d1b010f08"</span>, </span><br><span class="line">    <span class="string">"Host"</span>: <span class="string">"httpbin.org"</span>, </span><br><span class="line">    <span class="string">"User-Agent"</span>: <span class="string">"python-requests/2.22.0"</span></span><br><span class="line">  &#125;, </span><br><span class="line">  <span class="string">"json"</span>: null, </span><br><span class="line">  <span class="string">"origin"</span>: <span class="string">"171.115.102.230, 171.115.102.230"</span>, </span><br><span class="line">  <span class="string">"url"</span>: <span class="string">"https://httpbin.org/post"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="【2-5-2】-使用-Cookies"><a href="#【2-5-2】-使用-Cookies" class="headerlink" title=" 【2.5.2】 使用 Cookies"></a><font color="#FF0000"> 【2.5.2】 使用 Cookies</font></h2><p>对于需要登录后才能获取数据的网页，可以将账号登录的 Cookies 添加到 headers 来实现网页登录爬取，Cookies 可以抓包获取，代码示例：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">headers = &#123;</span><br><span class="line">    <span class="string">'Cookie'</span>: <span class="string">'xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx'</span>,</span><br><span class="line">    <span class="string">'Host'</span>: <span class="string">'www.zhihu.com'</span>,</span><br><span class="line">    <span class="string">'User-Agent'</span>: <span class="string">'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/75.0.3770.142 Safari/537.36'</span>,</span><br><span class="line">&#125;</span><br><span class="line">r = requests.get(<span class="string">'https://www.zhihu.com'</span>, headers=headers)</span><br><span class="line">print(r.text)</span><br></pre></td></tr></table></figure></p><h2 id="【2-5-3】-会话维持"><a href="#【2-5-3】-会话维持" class="headerlink" title=" 【2.5.3】 会话维持"></a><font color="#FF0000"> 【2.5.3】 会话维持</font></h2><ul><li><p>背景介绍：利用 get() 或者 post() 方法来模拟网页请求，相当于是不同的会话，可以理解为用两个浏览器打开了不同的网页；</p></li><li><p>运用场景：首先使用 post() 方法登录网页，然后再使用 get() 方法请求某个页面信息，如果不利用会话维持，将无法获取页面数据</p></li><li><p>维持方法：①两次请求设置一样的 cookies，缺点：繁琐；②使用 Session 对象。</p><p>Session 对象使用示例：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"> <span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">s = requests.Session()</span><br><span class="line">s.get(<span class="string">'http://httpbin.org/cookies/set/number/123456789'</span>)</span><br><span class="line">r = s.get(<span class="string">'http://httpbin.org/cookies'</span>)</span><br><span class="line">print(r.text)</span><br></pre></td></tr></table></figure></li></ul><p>输出结果成功获取到设置的 cookies：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="string">"cookies"</span>: &#123;</span><br><span class="line">    <span class="string">"number"</span>: <span class="string">"123456789"</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="【2-5-4】-SSL-证书验证"><a href="#【2-5-4】-SSL-证书验证" class="headerlink" title=" 【2.5.4】 SSL 证书验证"></a><font color="#FF0000"> 【2.5.4】 SSL 证书验证</font></h2><blockquote><p>SSL 证书是数字证书的一种，由受信任的数字证书颁发机构 CA 在验证服务器身份后颁发，具有服务器身份验证和数据传输加密功能，网站带有 HTTPS 就表明有 SSL 证书</p></blockquote><p>requests 提供了证书验证的功能。当发送 HTTP 请求的时候，它会检查 SSL 证书，verify 参数可以控制是否检查此证书。如果不加 verify 参数，默认为 True，会自动验证。当一个页面的 SSL 证书没有被官方机构认证时，打开页面就会提示“您的连接不是私密连接”，如果没有设置 verify 参数，将会报以下错误：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">requests.exceptions.SSLError: (<span class="string">"bad handshake: Error([('SSL routines', 'tls_process_server_certificate', 'certificate verify failed')],)"</span>,)</span><br></pre></td></tr></table></figure></p><p>设置 verify 参数代码示例：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">response = requests.get(<span class="string">'https://www.itrhx.com'</span>, verify=<span class="keyword">False</span>)</span><br><span class="line">print(response.text)</span><br></pre></td></tr></table></figure></p><h2 id="【2-5-5】-设置代理"><a href="#【2-5-5】-设置代理" class="headerlink" title=" 【2.5.5】 设置代理"></a><font color="#FF0000"> 【2.5.5】 设置代理</font></h2><p>为什么要设置代理：某些网页有反爬虫机制，频繁请求网页就会出现验证码等，还有可能直接封掉 IP，导致爬取失败；这种情况下就可以设置 proxies 参数。<br>示例：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">proxies = &#123;</span><br><span class="line">  <span class="string">'http'</span>: <span class="string">'http://10.10.1.10:1010'</span>,</span><br><span class="line">  <span class="string">'https'</span>: <span class="string">'http://10.10.1.10:1020'</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">requests.get(<span class="string">'https://www.itrhx.com'</span>, proxies=proxies)</span><br></pre></td></tr></table></figure></p><p>免费代理可在<a href="https://www.xicidaili.com/" target="_blank" rel="noopener">西刺代理</a>找到</p><h2 id="【2-5-6】-超时设置"><a href="#【2-5-6】-超时设置" class="headerlink" title=" 【2.5.6】 超时设置"></a><font color="#FF0000"> 【2.5.6】 超时设置</font></h2><p>与 urllib.request.urlopen() 类似，requests 也可以设置 timeout 参数，请求分为两个阶段：连接和读取</p><p>设置连接和读取时间总和：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">r = requests.get(<span class="string">'https://www.itrhx.com'</span>, timeout=<span class="number">1</span>)</span><br><span class="line">print(r.status_code)</span><br></pre></td></tr></table></figure><p>分别设置连接和读取时间：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">r = requests.get(<span class="string">'https://www.itrhx.com'</span>, timeout=(<span class="number">5</span>, <span class="number">10</span>))</span><br><span class="line">print(r.status_code)</span><br></pre></td></tr></table></figure></p><p>永久等待：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line"><span class="comment"># 两种方法实现</span></span><br><span class="line"><span class="comment"># r = requests.get('https://www.itrhx.com')</span></span><br><span class="line">r = requests.get(<span class="string">'https://www.itrhx.com'</span>, timeout=<span class="keyword">None</span>)</span><br><span class="line">print(r.status_code)</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;center&gt;&lt;font color=&quot;#1BC3FB&quot; size=&quot;4&quot;&gt;Python3 爬虫学习笔记第二章 ——【基本库 requests 的使用】&lt;/font&gt;&lt;/center&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="Python3 学习笔记" scheme="https://www.itrhx.com/categories/Python3-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
      <category term="Python3 爬虫" scheme="https://www.itrhx.com/categories/Python3-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/Python3-%E7%88%AC%E8%99%AB/"/>
    
    
      <category term="爬虫" scheme="https://www.itrhx.com/tags/%E7%88%AC%E8%99%AB/"/>
    
      <category term="requests" scheme="https://www.itrhx.com/tags/requests/"/>
    
  </entry>
  
  <entry>
    <title>Python3 爬虫学习笔记 C01</title>
    <link href="https://www.itrhx.com/2019/08/23/A29-Python3-spider-C01/"/>
    <id>https://www.itrhx.com/2019/08/23/A29-Python3-spider-C01/</id>
    <published>2019-08-23T01:28:21.841Z</published>
    <updated>2019-08-22T02:43:27.544Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><blockquote><center><font color="#1BC3FB" size="4">Python3 爬虫学习笔记第一章 ——【基本库 urllib 的使用】</font></center></blockquote><a id="more"></a><h1 id="【1-1】-urllib-简介"><a href="#【1-1】-urllib-简介" class="headerlink" title=" 【1.1】 urllib 简介"></a><font color="#FF0000"> 【1.1】 urllib 简介</font></h1><p>在 Python 中有两种方式可以发送 HTTP 请求，分别是自带的 urllib 库和第三方的 requests 库</p><blockquote><p>urllib 库：Python 内置的 HTTP 请求库，无需额外安装即可使用；Python 2 中有 urllib 和 urllib2 两个库来实现请求的发送，Python 3 中统一为 urllib。官方文档：<a href="https://docs.python.org/3/library/urllib.html" target="_blank" rel="noopener">https://docs.python.org/3/library/urllib.html</a></p></blockquote><font color="#FF0000">urllib 所包含的常用模块：</font><ul><li>urllib.request：模拟发送请求；</li><li>urllib.error：异常处理模块，用于捕获异常；</li><li>urllib.parse：解析、拆分、合并URL；</li><li>urllib.robotparser：读取网站的 robots.txt 文件，判断哪些内容可以爬取。</li></ul><font color="#FF0000">urllib.request 所包含的常用方法：</font><ul><li>urllib.request.urlopen()：打开网址URL，这可以是一个字符串或一个 Request对象；</li><li>urllib.request.Request()：在请求的时候传入一些 headers 等信息；</li><li>urllib.request.urlretrieve()：将获取的URL的内容写到文件目录中去。</li></ul><font color="#FF0000">urllib.error 所包含的两个异常：</font><ul><li>URLError：继承自 OSError 类，是 error 异常模块的基类，由 request 模块产生的异常都可以通过捕获这个类来处理。</li><li>HTTPError：是 URLError 的子类，专门用来处理 HTTP 请求错误，比如认证请求失败等。</li></ul><font color="#FF0000">urllib.parse 所包含的常用方法：</font><ul><li>urllib.parse.urlencode()：将字典参数序列化为 GET 请求参数；</li><li>urllib.parse.parse_qs()：将 GET 请求参数反序列化转回字典；</li><li>urllib.parse.parse_qsl()：将参数转化为元组组成的列表；</li><li>urllib.parse.urlparse()：对 URL 进行分段（返回6个结果）；</li><li>urllib.parse.urlunparse()：对 URL 进行组合（长度必须为6）；</li><li>urllib.parse.urlsplit()：对 URL 进行分段（不单独解析params部分，返回5个结果）；</li><li>urllib.parse.urlunsplit()：对 URL 进行组合（长度必须为5）；</li><li>urllib.parse.urljoin()：对 URL 进行组合（没有长度限制，给定两个参数，自动分析 scheme、netloc 和 path 这 3 个内容并对新链接缺失的部分进行补充，最后返回结果）；</li><li>urllib.parse.quote()：将内容转化为 URL 编码格式；</li><li>urllib.parse.unquote()：对 URL 进行解码。</li></ul><font color="#FF0000">urllib.robotparser 所包含的类：</font><ul><li>RobotFileParser：根据网站的 robots.txt 文件来判断一个爬取爬虫是否有权限来爬取这个网页</li></ul><h1 id="【1-2】-urllib-request-发送请求"><a href="#【1-2】-urllib-request-发送请求" class="headerlink" title=" 【1.2】 urllib.request 发送请求"></a><font color="#FF0000"> 【1.2】 urllib.request 发送请求</font></h1><h2 id="【1-2-1】-urllib-request-urlopen"><a href="#【1-2-1】-urllib-request-urlopen" class="headerlink" title="【1.2.1】 urllib.request.urlopen()"></a><font color="#FF0000">【1.2.1】 urllib.request.urlopen()</font></h2><h3 id="【1-2-1-1】-基本使用方法"><a href="#【1-2-1-1】-基本使用方法" class="headerlink" title="【1.2.1.1】 基本使用方法"></a><font color="#FF0000">【1.2.1.1】 基本使用方法</font></h3><p>urlopen() 函数的 API：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">urllib.request.urlopen(url, data=<span class="keyword">None</span>, [timeout,]*, cafile=<span class="keyword">None</span>, capath=<span class="keyword">None</span>, cadefault=<span class="keyword">False</span>, context=<span class="keyword">None</span>)</span><br></pre></td></tr></table></figure></p><p>基本使用：运行以下代码可得到 <a href="https://www.itrhx.com/">https://www.itrhx.com/</a> 的网页源代码：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> urllib.request</span><br><span class="line"></span><br><span class="line">response = urllib.request.urlopen(<span class="string">'https://www.itrhx.com/'</span>)</span><br><span class="line">print(response.read().decode(<span class="string">'utf-8'</span>))</span><br></pre></td></tr></table></figure></p><p>输出响应对象的类型和属性：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> urllib.request</span><br><span class="line"></span><br><span class="line">response = urllib.request.urlopen(<span class="string">'https://www.itrhx.com/'</span>)</span><br><span class="line">print(type(response))            <span class="comment"># 响应类型</span></span><br><span class="line">print(response.status)           <span class="comment"># 返回结果的状态码，200代表请求成功</span></span><br><span class="line">print(response.getheaders())       <span class="comment"># 响应的头信息</span></span><br><span class="line">print(response.getheader(<span class="string">'Server'</span>))  <span class="comment"># 获取响应头的 server 值</span></span><br></pre></td></tr></table></figure></p><p>运行结果：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;<span class="class"><span class="keyword">class</span> '<span class="title">http</span>.<span class="title">client</span>.<span class="title">HTTPResponse</span>'&gt;</span></span><br><span class="line"><span class="class">200</span></span><br><span class="line">[('Content-Type', 'text/html; charset=utf-8'), ('Server', 'GitHub.com'), ('Last-Modified', 'Sat, 17 Aug 2019 12:16:48 GMT'), ('ETag', '"5d57f030-10863"'), ('Access-Control-Allow-Origin', '*'), ('Expires', 'Sat, 17 Aug 2019 19:41:25 GMT'), ('Cache-Control', 'max-age=600'), ('X-Proxy-Cache', 'MISS'), ('X-GitHub-Request-Id', 'C748:735D:5B7461:619B95:5D58560B'), ('Content-Length', '67683'), ('Accept-Ranges', 'bytes'), ('Date', 'Sun, 18 Aug 2019 13:28:44 GMT'), ('Via', '1.1 varnish'), ('Age', '228'), ('Connection', 'close'), ('X-Served-By', 'cache-tyo19931-TYO'), ('X-Cache', 'HIT'), ('X-Cache-Hits', '1'), ('X-Timer', 'S1566134924.190474,VS0,VE0'), ('Vary', 'Accept-Encoding'), ('X-Fastly-Request-ID', '25a69f8130fc9cae412d28990a724543d7d05e8b')]</span><br><span class="line">GitHub.com</span><br></pre></td></tr></table></figure></p><h3 id="【1-2-1-2】-添加参数"><a href="#【1-2-1-2】-添加参数" class="headerlink" title="【1.2.1.2】 添加参数"></a><font color="#FF0000">【1.2.1.2】 添加参数</font></h3><p>根据 urlopen() 函数的 API 可知，除了最基本的 URL 参数以外，我们还可以传递其他内容，比如 data（附加数据）、timeout（超时时间）等，以下用 data 和 timeout 参数举例说明。</p><h4 id="●-data-参数"><a href="#●-data-参数" class="headerlink" title="● data 参数"></a><font color="#FF0000">● data 参数</font></h4><p>如果要添加 data 参数，需要使用 bytes 方法将参数转化为字节流编码格式的内容，即 bytes 类型。另外，如果传递了这个参数，则它的请求方式就不再是 GET 方式，而是 POST 方式。代码示例：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> urllib.parse</span><br><span class="line"><span class="keyword">import</span> urllib.request</span><br><span class="line"></span><br><span class="line">data = bytes(urllib.parse.urlencode(&#123;<span class="string">'word'</span>: <span class="string">'hello'</span>&#125;), encoding=<span class="string">'utf8'</span>)</span><br><span class="line">response = urllib.request.urlopen(<span class="string">'http://httpbin.org/post'</span>, data=data)</span><br><span class="line">print(response.read())</span><br></pre></td></tr></table></figure></p><p>httpbin.org 站点提供 HTTP 请求测试，<a href="http://httpbin.org/post" target="_blank" rel="noopener">http://httpbin.org/post</a> 用于测试 POST 请求，示例中传递一个值为 hello 的 word 参数。使用 bytes 方法，将其转码成 bytes（字节流）类型。该方法的第一个参数需要是 str（字符串）类型，需要用 urllib.parse 模块里的 urlencode 方法来将参数字典转化为字符串；第二个参数指定编码格式为 utf8，运行结果：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">b'&#123;</span></span><br><span class="line"><span class="string">"args": &#123;&#125;,</span></span><br><span class="line"><span class="string">"data": "", </span></span><br><span class="line"><span class="string">"files": &#123;&#125;,</span></span><br><span class="line"><span class="string">"form": &#123;</span></span><br><span class="line"><span class="string">"word": "hello"</span></span><br><span class="line"><span class="string">&#125;,</span></span><br><span class="line"><span class="string">"headers": &#123;</span></span><br><span class="line"><span class="string">"Accept-Encoding": "identity", </span></span><br><span class="line"><span class="string">"Content-Length": "10",</span></span><br><span class="line"><span class="string">"Content-Type": "application/x-www-form-urlencoded",</span></span><br><span class="line"><span class="string">"Host": "httpbin.org",</span></span><br><span class="line"><span class="string">"User-Agent": "Python-urllib/3.6"</span></span><br><span class="line"><span class="string">&#125;, </span></span><br><span class="line"><span class="string">"json": null, </span></span><br><span class="line"><span class="string">"origin": "171.115.101.10, 171.115.101.10", </span></span><br><span class="line"><span class="string">"url": "https://httpbin.org/post"</span></span><br><span class="line"><span class="string">&#125;'</span></span><br></pre></td></tr></table></figure></p><h4 id="●-timeout-参数"><a href="#●-timeout-参数" class="headerlink" title="● timeout 参数"></a><font color="#FF0000">● timeout 参数</font></h4><p>举例：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> urllib.request</span><br><span class="line"></span><br><span class="line">response = urllib.request.urlopen(<span class="string">'http://httpbin.org/get'</span>, timeout=<span class="number">0.1</span>)  </span><br><span class="line">print(response.read())</span><br></pre></td></tr></table></figure></p><p>运行结果：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line">During handling of the above exception, another exception occurred:</span><br><span class="line"></span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">"C:/Users/Lenovo/Desktop/1.py"</span>, line <span class="number">2</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">    response = urllib.request.urlopen(<span class="string">'http://httpbin.org/get'</span>, timeout=<span class="number">0.1</span>)</span><br><span class="line"> ...</span><br><span class="line">urllib.error.URLError: &lt;urlopen error timed out&gt;</span><br></pre></td></tr></table></figure></p><p>timeout 设置为0.1，0.1秒过后服务器没有响应，便会抛出 URLError 异常<br>进阶：使用 try except 语句抛出异常</p><h2 id="【1-2-2】-urllib-request-Request"><a href="#【1-2-2】-urllib-request-Request" class="headerlink" title="【1.2.2】 urllib.request.Request()"></a><font color="#FF0000">【1.2.2】 urllib.request.Request()</font></h2><p>Request() 方法可以在请求的时候传入一些 data、headers 等信息<br>Request() 的构造方法：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">urllib</span>.<span class="title">request</span>.<span class="title">Request</span><span class="params">(url, data=None, headers=&#123;&#125;, origin_req_host=None, unverifiable=False, method=None)</span></span></span><br></pre></td></tr></table></figure></p><p>构造方法各个参数的解释：</p><ul><li><p>url：用于请求 URL，这是必传参数，其他都是可选参数。</p></li><li><p>data：如果要传，必须传 bytes（字节流）类型的。如果它是字典，可以先用 urllib.parse 模块里的 urlencode() 编码。</p></li><li><p>headers：是一个字典，它就是请求头，可以在构造请求时通过 headers 参数直接构造，也可以通过调用请求实例的 add_header() 方法添加。添加请求头最常用的用法就是通过修改 User-Agent 来伪装浏览器，默认的 User-Agent 是 Python-urllib，我们可以通过修改它来伪装浏览器。</p></li><li><p>origin_req_host：指的是请求方的 host 名称或者 IP 地址。</p></li><li><p>unverifiable：表示这个请求是否是无法验证的，默认是 False，意思就是说用户没有足够权限来选择接收这个请求的结果。例如，我们请求一个 HTML 文档中的图片，但是我们没有自动抓取图像的权限，这时 unverifiable 的值就是 True。</p></li><li><p>method：是一个字符串，用来指示请求使用的方法，比如 GET、POST 和 PUT 等。</p></li></ul><p>简单举例：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> urllib.request</span><br><span class="line"><span class="keyword">import</span> urllib.parse</span><br><span class="line"></span><br><span class="line">url = <span class="string">'http://www.baidu.com/'</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 定制要伪装的头部</span></span><br><span class="line">headers = &#123;</span><br><span class="line">    <span class="string">'User-Agent'</span>: <span class="string">'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/73.0.3683.86 Safari/537.36'</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment"># 构建请求对象</span></span><br><span class="line">request = urllib.request.Request(url=url, headers=headers)</span><br><span class="line"><span class="comment"># 发送请求</span></span><br><span class="line">response = urllib.request.urlopen(request)</span><br><span class="line">print(response.read().decode())</span><br></pre></td></tr></table></figure></p><h2 id="【1-2-3】-urllib-request-urlretrieve"><a href="#【1-2-3】-urllib-request-urlretrieve" class="headerlink" title="【1.2.3】 urllib.request.urlretrieve()"></a><font color="#FF0000">【1.2.3】 urllib.request.urlretrieve()</font></h2><p>将获取到的 URL 内容保存到当前文件夹，简单举例：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> urllib.request</span><br><span class="line"></span><br><span class="line">url = <span class="string">'https://www.itrhx.com/images/trhx.png'</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># response = urllib.request.urlopen(image_url)</span></span><br><span class="line"><span class="comment"># with open('trhx.png', 'wb') as fp:</span></span><br><span class="line"><span class="comment">#    fp.write(response.read())</span></span><br><span class="line"></span><br><span class="line">urllib.request.urlretrieve(url, <span class="string">'trhx.png'</span>)</span><br></pre></td></tr></table></figure></p><h1 id="【1-3】-urllib-error-异常处理"><a href="#【1-3】-urllib-error-异常处理" class="headerlink" title=" 【1.3】 urllib.error 异常处理"></a><font color="#FF0000"> 【1.3】 urllib.error 异常处理</font></h1><h2 id="【1-3-1】-URLError"><a href="#【1-3-1】-URLError" class="headerlink" title="【1.3.1】 URLError"></a><font color="#FF0000">【1.3.1】 URLError</font></h2><p>如果打开一个不存在的页面，就会出现 URLError 错误，该错误有一个 reason 属性，用于返回错误的原因。简单举例：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> urllib <span class="keyword">import</span> request, error  </span><br><span class="line"><span class="keyword">try</span>:  </span><br><span class="line">    response = request.urlopen(<span class="string">'https://www.itrhx.com/index/'</span>)  </span><br><span class="line"><span class="keyword">except</span> error.URLError <span class="keyword">as</span> e:  </span><br><span class="line">    print(e.reason)</span><br></pre></td></tr></table></figure></p><p>输出结果：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Not Found</span><br></pre></td></tr></table></figure></p><h2 id="【1-3-2】-HTTPError"><a href="#【1-3-2】-HTTPError" class="headerlink" title="【1.3.2】 HTTPError"></a><font color="#FF0000">【1.3.2】 HTTPError</font></h2><p>URLError 的子类，专门用来处理 HTTP 请求错误，比如认证请求失败等。它有如下3个属性：</p><ul><li>code：返回 HTTP 状态码，比如 404 表示网页不存在，500 表示服务器内部错误等。</li><li>reason：同父类一样，用于返回错误的原因。</li><li>headers：返回请求头。</li></ul><p>简单举例：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> urllib <span class="keyword">import</span> request, error  </span><br><span class="line"><span class="keyword">try</span>:  </span><br><span class="line">    response = request.urlopen(<span class="string">'https://www.itrhx.com/index/'</span>)  </span><br><span class="line"><span class="keyword">except</span> error.HTTPError <span class="keyword">as</span> e:  </span><br><span class="line">    print(e.code, e.reason, e.headers)</span><br></pre></td></tr></table></figure></p><p>输出结果：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">404</span> Not Found Content-Type: text/html; charset=utf<span class="number">-8</span></span><br><span class="line">Server: GitHub.com</span><br><span class="line">ETag: <span class="string">"5d57f030-7f2"</span></span><br><span class="line">Access-Control-Allow-Origin: *</span><br><span class="line">X-Proxy-Cache: MISS</span><br><span class="line">X-GitHub-Request-Id: <span class="number">4</span>B46:<span class="number">2</span>F5D:<span class="number">6</span>DE0F1:<span class="number">755</span>BB2:<span class="number">5</span>D5964C5</span><br><span class="line">Content-Length: <span class="number">2034</span></span><br><span class="line">Accept-Ranges: bytes</span><br><span class="line">Date: Sun, <span class="number">18</span> Aug <span class="number">2019</span> <span class="number">14</span>:<span class="number">50</span>:<span class="number">41</span> GMT</span><br><span class="line">Via: <span class="number">1.1</span> varnish</span><br><span class="line">Age: <span class="number">252</span></span><br><span class="line">Connection: close</span><br><span class="line">X-Served-By: cache-tyo19951-TYO</span><br><span class="line">X-Cache: HIT</span><br><span class="line">X-Cache-Hits: <span class="number">1</span></span><br><span class="line">X-Timer: S1566139842<span class="number">.563134</span>,VS0,VE0</span><br><span class="line">Vary: Accept-Encoding</span><br><span class="line">X-Fastly-Request-ID: e9eb0a507be66a866bfaa7c5cc2e1c53b1f7ccab</span><br></pre></td></tr></table></figure></p><h2 id="【1-3-3】-进阶用法"><a href="#【1-3-3】-进阶用法" class="headerlink" title="【1.3.3】 进阶用法"></a><font color="#FF0000">【1.3.3】 进阶用法</font></h2><p>因为 URLError 是 HTTPError 的父类，所以可以先选择捕获子类的错误，再去捕获父类的错误，前面的代码改进：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> urllib <span class="keyword">import</span> request, error  </span><br><span class="line">​</span><br><span class="line"><span class="keyword">try</span>:  </span><br><span class="line">    response = request.urlopen(<span class="string">'https://www.itrhx.com/index/'</span>)  </span><br><span class="line"><span class="keyword">except</span> error.HTTPError <span class="keyword">as</span> e:  </span><br><span class="line">    print(e.reason, e.code, e.headers)  </span><br><span class="line"><span class="keyword">except</span> error.URLError <span class="keyword">as</span> e:  </span><br><span class="line">    print(e.reason)  </span><br><span class="line"><span class="keyword">else</span>:  </span><br><span class="line">    print(<span class="string">'Request Successfully'</span>)</span><br></pre></td></tr></table></figure></p><h1 id="【1-4】-urllib-parse-解析-URL"><a href="#【1-4】-urllib-parse-解析-URL" class="headerlink" title=" 【1.4】 urllib.parse 解析 URL"></a><font color="#FF0000"> 【1.4】 urllib.parse 解析 URL</font></h1><h2 id="【1-4-1】-urllib-parse-urlencode"><a href="#【1-4-1】-urllib-parse-urlencode" class="headerlink" title="【1.4.1】 urllib.parse.urlencode()"></a><font color="#FF0000">【1.4.1】 urllib.parse.urlencode()</font></h2><p>将字典参数序列化为 GET 请求参数，示例：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> urllib.parse <span class="keyword">import</span> urlencode</span><br><span class="line">data = &#123;</span><br><span class="line">    <span class="string">'ie'</span>: <span class="string">'utf-8'</span>,</span><br><span class="line">    <span class="string">'wd'</span>: <span class="string">'TRHX'</span>,</span><br><span class="line">&#125;</span><br><span class="line">base_url = <span class="string">'http://www.baidu.com?'</span></span><br><span class="line">url = base_url + urlencode(data)</span><br><span class="line">print(url)</span><br></pre></td></tr></table></figure></p><p>输出结果：<br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://www.baidu.com?ie=utf-8&amp;wd=TRHX</span><br></pre></td></tr></table></figure></p><h2 id="【1-4-2】-urllib-parse-parse-qs"><a href="#【1-4-2】-urllib-parse-parse-qs" class="headerlink" title="【1.4.2】 urllib.parse.parse_qs()"></a><font color="#FF0000">【1.4.2】 urllib.parse.parse_qs()</font></h2><p>与 urlencode() 相反，将 GET 请求参数反序列化转回字典，示例：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> urllib.parse <span class="keyword">import</span> parse_qs</span><br><span class="line">query = <span class="string">'name=TRHX&amp;age=20'</span></span><br><span class="line">print(parse_qs(query))</span><br></pre></td></tr></table></figure></p><p>输出结果：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;<span class="string">'name'</span>: [<span class="string">'TRHX'</span>], <span class="string">'age'</span>: [<span class="string">'20'</span>]&#125;</span><br></pre></td></tr></table></figure></p><h2 id="【1-4-3】-urllib-parse-parse-qsl"><a href="#【1-4-3】-urllib-parse-parse-qsl" class="headerlink" title="【1.4.3】 urllib.parse.parse_qsl()"></a><font color="#FF0000">【1.4.3】 urllib.parse.parse_qsl()</font></h2><p>将参数转化为元组组成的列表，示例：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> urllib.parse <span class="keyword">import</span> parse_qsl</span><br><span class="line">query = <span class="string">'name=TRHX&amp;age=20'</span></span><br><span class="line">print(parse_qsl(query))</span><br></pre></td></tr></table></figure></p><p>输出 结果：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[(<span class="string">'name'</span>, <span class="string">'TRHX'</span>), (<span class="string">'age'</span>, <span class="string">'20'</span>)]</span><br></pre></td></tr></table></figure></p><h2 id="【1-4-4】-urllib-parse-urlparse"><a href="#【1-4-4】-urllib-parse-urlparse" class="headerlink" title="【1.4.4】 urllib.parse.urlparse()"></a><font color="#FF0000">【1.4.4】 urllib.parse.urlparse()</font></h2><p>对 URL 进行分段，返回 6 个结果，示例：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> urllib.parse <span class="keyword">import</span> urlparse</span><br><span class="line">result = urlparse(<span class="string">'http://www.baidu.com/index.html;user?id=5#comment'</span>)</span><br><span class="line">print(type(result), result)</span><br></pre></td></tr></table></figure></p><p>输出结果：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;<span class="class"><span class="keyword">class</span> '<span class="title">urllib</span>.<span class="title">parse</span>.<span class="title">ParseResult</span>'&gt; <span class="title">ParseResult</span><span class="params">(scheme=<span class="string">'http'</span>, netloc=<span class="string">'www.baidu.com'</span>, path=<span class="string">'/index.html'</span>, params=<span class="string">'user'</span>, query=<span class="string">'id=5'</span>, fragment=<span class="string">'comment'</span>)</span></span></span><br></pre></td></tr></table></figure></p><p>返回结果为 ParseResult 类型的对象，含 scheme、netloc、path、params、query 和 fragment 6 个部分，依次代表协议、域名、路径、参数、查询条件、锚点</p><h2 id="【1-4-5】-urllib-parse-urlunparse"><a href="#【1-4-5】-urllib-parse-urlunparse" class="headerlink" title="【1.4.5】 urllib.parse.urlunparse()"></a><font color="#FF0000">【1.4.5】 urllib.parse.urlunparse()</font></h2><p>与 urlparse() 相反，对 URL 进行组合，传入的参数是一个可迭代对象，长度必须是 6，否则会抛出参数数量不足或者过多的问题，示例：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> urllib.parse <span class="keyword">import</span> urlunparse  </span><br><span class="line">data = [<span class="string">'http'</span>, <span class="string">'www.baidu.com'</span>, <span class="string">'index.html'</span>, <span class="string">'user'</span>, <span class="string">'a=6'</span>, <span class="string">'comment'</span>]  </span><br><span class="line">print(urlunparse(data))</span><br></pre></td></tr></table></figure></p><p>输出结果：<br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://www.baidu.com/index.html;user?a=6#comment</span><br></pre></td></tr></table></figure></p><h2 id="【1-4-6】-urllib-parse-urlsplit"><a href="#【1-4-6】-urllib-parse-urlsplit" class="headerlink" title="【1.4.6】 urllib.parse.urlsplit()"></a><font color="#FF0000">【1.4.6】 urllib.parse.urlsplit()</font></h2><p>与 urlparse() 方法相似，但是它不再单独解析 params 部分，只返回 5 个结果。params 会合并到 path 中，示例：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> urllib.parse <span class="keyword">import</span> urlsplit  </span><br><span class="line">result = urlsplit(<span class="string">'http://www.baidu.com/index.html;user?id=5#comment'</span>)  </span><br><span class="line">print(result)</span><br></pre></td></tr></table></figure></p><p>输出结果：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SplitResult(scheme=<span class="string">'http'</span>, netloc=<span class="string">'www.baidu.com'</span>, path=<span class="string">'/index.html;user'</span>, query=<span class="string">'id=5'</span>, fragment=<span class="string">'comment'</span>)</span><br></pre></td></tr></table></figure></p><h2 id="【1-4-7】-urllib-parse-urlunsplit"><a href="#【1-4-7】-urllib-parse-urlunsplit" class="headerlink" title="【1.4.7】 urllib.parse.urlunsplit()"></a><font color="#FF0000">【1.4.7】 urllib.parse.urlunsplit()</font></h2><p>与 urlunparse() 方法类似，对 URL 进行组合，传入的参数也是一个可迭代对象，长度必须为 5，示例：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> urllib.parse <span class="keyword">import</span> urlunsplit  </span><br><span class="line">data = [<span class="string">'http'</span>, <span class="string">'www.baidu.com'</span>, <span class="string">'index.html'</span>, <span class="string">'a=6'</span>, <span class="string">'comment'</span>]  </span><br><span class="line">print(urlunsplit(data))</span><br></pre></td></tr></table></figure></p><p>输出结果：<br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://www.baidu.com/index.html?a=6#comment</span><br></pre></td></tr></table></figure></p><h2 id="【1-4-8】-urllib-parse-urljoin"><a href="#【1-4-8】-urllib-parse-urljoin" class="headerlink" title="【1.4.8】 urllib.parse.urljoin()"></a><font color="#FF0000">【1.4.8】 urllib.parse.urljoin()</font></h2><p>对 URL 进行组合，提供两个 URL 作为两个参数，将会自动分析 URL 的 scheme、netloc 和 path 这 3 个内容并对新链接缺失的部分进行补充，最后返回结果，示例：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> urllib.parse <span class="keyword">import</span> urljoin  </span><br><span class="line">print(urljoin(<span class="string">'http://www.baidu.com'</span>, <span class="string">'friends.html'</span>))  </span><br><span class="line">print(urljoin(<span class="string">'http://www.baidu.com'</span>, <span class="string">'https://www.itrhx.com/friends.html'</span>))  </span><br><span class="line">print(urljoin(<span class="string">'http://www.baidu.com/friends.html'</span>, <span class="string">'https://www.itrhx.com/friends.html'</span>))  </span><br><span class="line">print(urljoin(<span class="string">'http://www.baidu.com/friends.html'</span>, <span class="string">'https://www.itrhx.com/friends.html?id=2'</span>))  </span><br><span class="line">print(urljoin(<span class="string">'http://www.baidu.com?wd=trhx'</span>, <span class="string">'https://www.itrhx.com/index.html'</span>))  </span><br><span class="line">print(urljoin(<span class="string">'http://www.baidu.com'</span>, <span class="string">'?category=2#comment'</span>))  </span><br><span class="line">print(urljoin(<span class="string">'www.baidu.com'</span>, <span class="string">'?category=2#comment'</span>))  </span><br><span class="line">print(urljoin(<span class="string">'www.baidu.com#comment'</span>, <span class="string">'?category=2'</span>))</span><br></pre></td></tr></table></figure></p><p>输出结果：<br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">http://www.baidu.com/friends.html</span><br><span class="line">https://www.itrhx.com/friends.html</span><br><span class="line">https://www.itrhx.com/friends.html</span><br><span class="line">https://www.itrhx.com/friends.html?id=2</span><br><span class="line">https://www.itrhx.com/index.html</span><br><span class="line">http://www.baidu.com?category=2#comment</span><br><span class="line">www.baidu.com?category=2#comment</span><br><span class="line">www.baidu.com?category=2</span><br></pre></td></tr></table></figure></p><h2 id="【1-4-9】-urllib-parse-quote"><a href="#【1-4-9】-urllib-parse-quote" class="headerlink" title="【1.4.9】 urllib.parse.quote()"></a><font color="#FF0000">【1.4.9】 urllib.parse.quote()</font></h2><p>将内容转化为 URL 编码的格式。当 URL 中带有中文参数时，可以将中文字符转化为 URL 编码，示例：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> urllib.parse <span class="keyword">import</span> quote</span><br><span class="line">keyword = <span class="string">'中国'</span>  </span><br><span class="line">url = <span class="string">'https://www.baidu.com/s?wd='</span> + quote(keyword)  </span><br><span class="line">print(url)</span><br></pre></td></tr></table></figure></p><p>输出结果：<br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://www.baidu.com/s?wd=%E4%B8%AD%E5%9B%BD</span><br></pre></td></tr></table></figure></p><h2 id="【1-4-10】-urllib-parse-unquote"><a href="#【1-4-10】-urllib-parse-unquote" class="headerlink" title="【1.4.10】 urllib.parse.unquote()"></a><font color="#FF0000">【1.4.10】 urllib.parse.unquote()</font></h2><p>与 quote() 方法相反，对 URL 进行解码，示例：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> urllib.parse <span class="keyword">import</span> unquote  </span><br><span class="line">url = <span class="string">'https://www.baidu.com/s?wd=%E4%B8%AD%E5%9B%BD'</span>  </span><br><span class="line">print(unquote(url))</span><br></pre></td></tr></table></figure></p><p>输出结果：<br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://www.baidu.com/s?wd=中国</span><br></pre></td></tr></table></figure></p><h1 id="【1-5】-urllib-robotparser-爬取权限判断"><a href="#【1-5】-urllib-robotparser-爬取权限判断" class="headerlink" title=" 【1.5】 urllib.robotparser 爬取权限判断"></a><font color="#FF0000"> 【1.5】 urllib.robotparser 爬取权限判断</font></h1><h2 id="【1-5-1】-Robots-协议简介"><a href="#【1-5-1】-Robots-协议简介" class="headerlink" title="【1.5.1】 Robots 协议简介"></a><font color="#FF0000">【1.5.1】 Robots 协议简介</font></h2><blockquote><p>Robots 协议即爬虫协议，用来告诉爬虫和搜索引擎哪些页面可以抓取，哪些不可以抓取。它通常是一个叫作 robots.txt 的文本文件，一般放在网站的根目录下。</p></blockquote><p>robots.txt 基本格式：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">User-agent:</span><br><span class="line">Disallow:</span><br><span class="line">Allow:</span><br></pre></td></tr></table></figure></p><ul><li>User-agent 为搜索爬虫的名称，设置为 * 则表示对任何爬虫皆有效；</li><li>Disallow 指定了不允许抓取的目录，设置为 / 则代表不允许抓取所有页面；</li><li>Allow 指定了允许抓取的目录，一般和 Disallow 一起使用，一般不会单独使用，用来排除某些限制。</li></ul><p>一些常见的搜索爬虫名称及其对应的网站：</p><table><thead><tr><th>爬虫名称</th><th>网站名称</th><th>网站地址</th></tr></thead><tbody><tr><td>BaiduSpider</td><td>百度</td><td><a href="http://www.baidu.com" target="_blank" rel="noopener">www.baidu.com</a></td></tr><tr><td>Googlebot</td><td>谷歌</td><td><a href="http://www.google.com" target="_blank" rel="noopener">www.google.com</a></td></tr><tr><td>360Spider</td><td>360</td><td><a href="http://www.so.com" target="_blank" rel="noopener">www.so.com</a></td></tr><tr><td>Sogouspider</td><td>搜狗</td><td><a href="http://www.sogou.com" target="_blank" rel="noopener">www.sogou.com</a></td></tr><tr><td>YodaoBot</td><td>有道</td><td><a href="http://www.youdao.com" target="_blank" rel="noopener">www.youdao.com</a></td></tr><tr><td>Bingbot</td><td>必应</td><td><a href="http://www.bing.com" target="_blank" rel="noopener">www.bing.com</a></td></tr><tr><td>Yahoo!  Slurp</td><td>雅虎</td><td><a href="http://www.yahoo.com" target="_blank" rel="noopener">www.yahoo.com</a></td></tr><tr><td>ia_archiver</td><td>Alexa</td><td><a href="http://www.alexa.cn" target="_blank" rel="noopener">www.alexa.cn</a></td></tr><tr><td>Scooter</td><td>altavista</td><td><a href="http://www.altavista.com" target="_blank" rel="noopener">www.altavista.com</a></td></tr></tbody></table><h2 id="【1-5-2】-RobotFileParser-类常用方法"><a href="#【1-5-2】-RobotFileParser-类常用方法" class="headerlink" title="【1.5.2】 RobotFileParser 类常用方法"></a><font color="#FF0000">【1.5.2】 RobotFileParser 类常用方法</font></h2><p>RobotFileParser 类的声明：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">urllib.robotparser.RobotFileParser(url=<span class="string">''</span>)</span><br></pre></td></tr></table></figure></p><p>常用方法及其解释：</p><ul><li><p>set_url：用来设置 robots.txt 文件的链接。如果在创建 RobotFileParser<br>对象时传入了链接，那么就不需要再用这种方法了。</p></li><li><p>read：读取 robots.txt 文件并进行分析。此方法执行一个读取和分析操作，若不调用此方法，接下来的判断都会为 False，这个方法不会返回任何内容，但是执行了读取操作。</p></li><li><p>parse：解析 robots.txt 文件，传入的参数是 robots.txt 某些行的内容，它会按照 robots.txt 的语法规则来分析这些内容。</p></li><li><p>can_fetch：该方法传入两个参数，第一个是 User-agent，第二个是要抓取的 URL。返回的内容是该搜索引擎是否可以抓取这个 URL，返回结果是 True 或 False。</p></li><li><p>mtime：返回的是上次抓取和分析 robots.txt 的时间，此方法可以定期检查来抓取最新的 robots.txt。</p></li><li><p>modified：将当前时间设置为上次抓取和分析 robots.txt 的时间。</p></li></ul><p>以简书为例：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> urllib.robotparser <span class="keyword">import</span> RobotFileParser</span><br><span class="line">rp = RobotFileParser()</span><br><span class="line">rp.set_url(<span class="string">'http://www.jianshu.com/robots.txt'</span>)</span><br><span class="line">rp.read()</span><br><span class="line">print(rp.can_fetch(<span class="string">'*'</span>, <span class="string">'https://www.jianshu.com/p/6d9527300b4c'</span>))</span><br><span class="line">print(rp.can_fetch(<span class="string">'*'</span>, <span class="string">"http://www.jianshu.com/search?q=python&amp;page=1&amp;type=collections"</span>))</span><br></pre></td></tr></table></figure></p><p>输出结果：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">False</span></span><br><span class="line"><span class="keyword">False</span></span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;center&gt;&lt;font color=&quot;#1BC3FB&quot; size=&quot;4&quot;&gt;Python3 爬虫学习笔记第一章 ——【基本库 urllib 的使用】&lt;/font&gt;&lt;/center&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="Python3 学习笔记" scheme="https://www.itrhx.com/categories/Python3-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
      <category term="Python3 爬虫" scheme="https://www.itrhx.com/categories/Python3-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/Python3-%E7%88%AC%E8%99%AB/"/>
    
    
      <category term="爬虫" scheme="https://www.itrhx.com/tags/%E7%88%AC%E8%99%AB/"/>
    
      <category term="urllib" scheme="https://www.itrhx.com/tags/urllib/"/>
    
  </entry>
  
  <entry>
    <title>一个 JS 脚本实现网站预加载，提升页面加载速度</title>
    <link href="https://www.itrhx.com/2019/08/23/A24-instant.page/"/>
    <id>https://www.itrhx.com/2019/08/23/A24-instant.page/</id>
    <published>2019-08-23T01:27:49.948Z</published>
    <updated>2019-07-31T12:41:50.811Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p><a href="https://instant.page/" target="_blank" rel="noopener">instant.page</a> 使用即时预加载技术，在用户点击之前预先加载页面。当用户的鼠标悬停在一个链接上超过 65 毫秒时，浏览器会对此页面进行预加载，当用户点击链接后，就从预加载的缓存中直接读取页面内容，从而达到缩短页面加载时间的目的。</p><a id="more"></a><fancybox><br><img src="https://cdn.jsdelivr.net/gh/TRHX/ImageHosting/ITRHX-PIC/A24/01.gif" alt="演示"><br></fancybox><p>以我博客为例，使用了这项技术后，当鼠标在一个链接停留超过 65 毫秒时，Network 里可以看见相关文章已经预加载出来了，而停留时间过短就不会预加载（红色部分，状态为 <font color="#FF0000">canceled</font>）</p><p>使用方法：<br>将以下HTML代码放在&lt;/ body&gt; 之前即可：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"//instant.page/1.2.2"</span> <span class="attr">type</span>=<span class="string">"module"</span> <span class="attr">integrity</span>=<span class="string">"sha384-2xV8M5griQmzyiY3CDqh1dn4z3llDVqZDqzjzcY+jCBCk/a5fXJmuZ/40JJAPeoU"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>但是此脚本是官方的，储存在国外服务器，对国内访问不太友好，可以将该JS脚本储存到自己的服务器上，<a href="https://cdn.jsdelivr.net/gh/TRHX/CDN-for-itrhx.com@2.0.2/js/instantclick-1.2.2.js" target="_blank" rel="noopener">点此获取</a>该JS脚本，然后再根据以下格式在&lt;/ body&gt; 之前引用：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"`存放路径`/instantclick-1.2.2.js"</span> <span class="attr">type</span>=<span class="string">"module"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>也可以直接使用我的，使用 jsDeliver CDN 加速，速度还可以：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://cdn.jsdelivr.net/gh/TRHX/CDN-for-itrhx.com@2.0.2/js/instantclick-1.2.2.js"</span> <span class="attr">type</span>=<span class="string">"module"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>参考资料：<a href="https://www.zrahh.com/archives/399.html" target="_blank" rel="noopener">《网站预加载 JS 脚本 instant.page》</a>——by 左岸  ；<a href="https://instant.page/" target="_blank" rel="noopener">instant.page官网</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;https://instant.page/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;instant.page&lt;/a&gt; 使用即时预加载技术，在用户点击之前预先加载页面。当用户的鼠标悬停在一个链接上超过 65 毫秒时，浏览器会对此页面进行预加载，当用户点击链接后，就从预加载的缓存中直接读取页面内容，从而达到缩短页面加载时间的目的。&lt;/p&gt;
    
    </summary>
    
      <category term="WEB前端" scheme="https://www.itrhx.com/categories/WEB%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="instant.page" scheme="https://www.itrhx.com/tags/instant-page/"/>
    
      <category term="JS 预加载" scheme="https://www.itrhx.com/tags/JS-%E9%A2%84%E5%8A%A0%E8%BD%BD/"/>
    
  </entry>
  
  <entry>
    <title>网站ICP备案和公安备案流程</title>
    <link href="https://www.itrhx.com/2019/08/23/A23-beian/"/>
    <id>https://www.itrhx.com/2019/08/23/A23-beian/</id>
    <published>2019-08-23T01:27:49.803Z</published>
    <updated>2019-08-05T16:52:28.618Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p><img src="https://cdn.jsdelivr.net/gh/TRHX/ImageHosting/ITRHX-PIC/A23/Website-Approve.png" alt="Website-Approve.png"></p><p>网站备案分为ICP备案和公安备案</p><ul><li><p>ICP备案：ICP备案的目的就是为了防止在网上从事非法的网站经营活动，打击不良互联网信息的传播，如果网站不备案的话，很有可能被查处以后关停。根据中华人民共和国信息产业部第十二次部务会议审议通过的《非经营性互联网信息服务备案管理办法》条例，在中华人民共和国境内提供非经营性互联网信息服务，应当办理备案。未经备案，不得在中华人民共和国境内从事非经营性互联网信息服务。而对于没有备案的网站将予以罚款或关闭。</p></li><li><p>公安备案：网站备案是根据国家法律法规需要网站的所有者向国家有关部门申请的备案，公安局备案是其中一种。公安局备案一般按照各地公安机关指定的地点和方式进行，操作流程会比ICP备案流程简单，主要是已登记为主。</p></li></ul><p>以百度官网为例，其中<code>京公安网备11000002000001</code>就是公安备案，<code>京ICP证030173号</code>就是ICP备案<br><img src="https://cdn.jsdelivr.net/gh/TRHX/ImageHosting/ITRHX-PIC/A23/01.png" alt="01.png"></p><h1 id="–-ICP备案"><a href="#–-ICP备案" class="headerlink" title=" – ICP备案 "></a><font color="#FF0000"> – ICP备案 </font></h1><p>一般在域名服务商那里都会有代备案系统，下面以阿里云为例，进入备案系统：<br><img src="https://cdn.jsdelivr.net/gh/TRHX/ImageHosting/ITRHX-PIC/A23/02.png" alt="02.png"></p><h3 id="1、填写信息验证备案类型"><a href="#1、填写信息验证备案类型" class="headerlink" title="1、填写信息验证备案类型"></a><font color="#FF0000">1、填写信息验证备案类型</font></h3><p>备案主办单位填写，个人就选个人，企业就选企业，按照实际信息填写：<br><img src="https://cdn.jsdelivr.net/gh/TRHX/ImageHosting/ITRHX-PIC/A23/03.png" alt="03.png"></p><h3 id="2、产品验证"><a href="#2、产品验证" class="headerlink" title="2、产品验证"></a><font color="#FF0000">2、产品验证</font></h3><p>对搭建备案网站的云服务器进行验证，如果你在阿里云购买了相关产品，就选择相应的产品类型和实例进行验证，也可以勾选<code>已有备案服务号</code>，填写服务号进行验证，备案服务号可以通过备案控制台进行申请，具体操作可以参考官方文档<a href="https://help.aliyun.com/knowledge_detail/36938.html" target="_blank" rel="noopener">《申请备案服务号》</a>，也有的小伙伴没有在任何地方购买过服务器等相关产品，比如单纯搭建一个 <a href="https://blog.csdn.net/qq_36759224/article/details/82121420" target="_blank" rel="noopener">Github Pages + Hexo</a> 轻量级的个人博客，这种博客没有后端，不需要服务器，但是要备案怎么办？这种情况也好解决，去某宝买一个服务号就行了。<br><img src="https://cdn.jsdelivr.net/gh/TRHX/ImageHosting/ITRHX-PIC/A23/04.png" alt="04.png"><br><img src="https://cdn.jsdelivr.net/gh/TRHX/ImageHosting/ITRHX-PIC/A23/05.png" alt="05.png"></p><h3 id="3、填写网站信息"><a href="#3、填写网站信息" class="headerlink" title="3、填写网站信息"></a><font color="#FF0000">3、填写网站信息</font></h3><p>填写网站信息以及办理备案的个人或者单位的真实信息，在填写网站名称的时候要<font color="#FF0000">特别注意！特别注意！特别注意！不满足要求的话是会被打回的！</font>不能使用姓名、地名、成语、不能包含公司、组织等企业性质的词语……具体要求可以参考官方文档<a href="https://help.aliyun.com/knowledge_detail/36948.html?spm=a2c4g.11186623.6.573.6e1369a5ZNlC0v" target="_blank" rel="noopener">《填写主体信息和网站信息》</a>。<br><img src="https://cdn.jsdelivr.net/gh/TRHX/ImageHosting/ITRHX-PIC/A23/06.png" alt="06.png"><br><img src="https://cdn.jsdelivr.net/gh/TRHX/ImageHosting/ITRHX-PIC/A23/07.png" alt="07.png"></p><h3 id="4、上传资料"><a href="#4、上传资料" class="headerlink" title="4、上传资料"></a><font color="#FF0000">4、上传资料</font></h3><p>根据要求，上传证件照片或证件彩色扫描件。身份证好说，拍好了上传就行了，注意《网站备案信息真实性核验单》需要你<font color="#FF0000">下载并打印在一张A4纸上，使用黑色签字笔填写，不能涂改</font>，具体可参照所给的示例进行填写，填写完成后再拍照上传。企业网站类似，提交备案后会在一个工作日内进行初审。<br><img src="https://cdn.jsdelivr.net/gh/TRHX/ImageHosting/ITRHX-PIC/A23/08.png" alt="08.png"><br><img src="https://cdn.jsdelivr.net/gh/TRHX/ImageHosting/ITRHX-PIC/A23/09.jpg" alt="09.jpg"><br><img src="https://cdn.jsdelivr.net/gh/TRHX/ImageHosting/ITRHX-PIC/A23/10.png" alt="10.png"></p><h3 id="5、人脸核验或幕布拍照核验"><a href="#5、人脸核验或幕布拍照核验" class="headerlink" title="5、人脸核验或幕布拍照核验"></a><font color="#FF0000">5、人脸核验或幕布拍照核验</font></h3><p>根据不同地域管局要求及核验平台的支持情况，使用人脸识别进行核验，或者申请专用幕布进行幕布拍照核验</p><table><thead><tr><th style="text-align:center">地区</th><th style="text-align:left">核验要求</th></tr></thead><tbody><tr><td style="text-align:center">上海、福建地区用户</td><td style="text-align:left">需使用阿里云APP进行人脸核验。如果使用PC端发起的备案申请，请根据界面提示下载阿里云APP进行人脸核验。</td></tr><tr><td style="text-align:center">广东、辽宁、安徽、重庆地区用户</td><td style="text-align:left">首次备案、新增网站：支持使用阿里云APP进行人脸核验或通过阿里云备案平台（PC端）进行幕布拍照核验。<br>其他备案类型：需通过阿里云备案平台（PC端）进行幕布拍照核验。</td></tr><tr><td style="text-align:center">其他地区用户</td><td style="text-align:left">通过阿里云备案平台（PC端）进行幕布拍照核验。</td></tr></tbody></table><p>以幕布拍照核验为例，如果你没有阿里云的幕布，就需要申请幕布（免费的），邮寄很快，大约两三天就到了，等收到幕布后，按照要求进行拍照，<font color="#FF0000">一定要仔细阅读拍照说明！一定要仔细阅读拍照说明！一定要仔细阅读拍照说明！不合格依旧会被打回！</font>拍照完成后上传即可。<br><img src="https://cdn.jsdelivr.net/gh/TRHX/ImageHosting/ITRHX-PIC/A23/11.png" alt="11.png"><br><img src="https://cdn.jsdelivr.net/gh/TRHX/ImageHosting/ITRHX-PIC/A23/12.png" alt="12.png"><br><img src="https://cdn.jsdelivr.net/gh/TRHX/ImageHosting/ITRHX-PIC/A23/13.png" alt="13.png"></p><h3 id="6、提交管局、短信核验"><a href="#6、提交管局、短信核验" class="headerlink" title="6、提交管局、短信核验"></a><font color="#FF0000">6、提交管局、短信核验</font></h3><p>当照片审核通过后，就会提交到管局，工信部要求部分省市成为手机号码短信核验试点省市，相应省市的用户在阿里云备案平台提交备案申请且初审完成后，会收到工信部发送的核验短信，短信包含验证码和验证地址，需要在收到短信的24小时内完成短信核验，备案申请才能进入管局审核。<br>需短信核验省份：</p><ul><li>2017年12月18日起：天津、甘肃、西藏、宁夏、海南、新疆、青海被列为试点省份。</li><li>2018年9月10日起：浙江、四川、福建、陕西、重庆、广西、云南被列为试点省份。</li><li>2018年9月24日起：山东、河南、安徽、湖南、山西、黑龙江、内蒙古、湖北被列为试点省份。</li></ul><p><img src="https://cdn.jsdelivr.net/gh/TRHX/ImageHosting/ITRHX-PIC/A23/14.png" alt="14.png"></p><h3 id="7、ICP备案完成"><a href="#7、ICP备案完成" class="headerlink" title="7、ICP备案完成"></a><font color="#FF0000">7、ICP备案完成</font></h3><p>整个备案过程中会有阿里云的客服打电话给你，进行信息确认，备案申请信息成功提交管局系统后，管局审核一般为 3 - 20 个工作日（亲测很快，不到一个周就通过了），审核通过后会收到阿里云的邮件通知。<br><img src="https://cdn.jsdelivr.net/gh/TRHX/ImageHosting/ITRHX-PIC/A23/15.png" alt="15.png"></p><h1 id="–-公安备案"><a href="#–-公安备案" class="headerlink" title=" – 公安备案 "></a><font color="#FF0000"> – 公安备案 </font></h1><p>公安备案个人觉得比ICP备案还要麻烦，自己在公安备案的时候，最开始申请了一个月也没给我处理（大概是地方原因，所在的市比较小，估计都没几个人办过网站，网警也不太负责），与ICP备案最大的不同，如果你是交互式网站的话，公安备案是需要你去公安机关当面审核的，这也是比较麻烦的一点。</p><h3 id="1、用户注册、登录"><a href="#1、用户注册、登录" class="headerlink" title="1、用户注册、登录"></a><font color="#FF0000">1、用户注册、登录</font></h3><p>登录<a href="http://www.beian.gov.cn" target="_blank" rel="noopener">全国互联网安全管理服务平台</a>，选择联网备案登录，注册账号并登录<br><img src="https://cdn.jsdelivr.net/gh/TRHX/ImageHosting/ITRHX-PIC/A23/16.png" alt="16.png"></p><h3 id="2、新办网站备案申请"><a href="#2、新办网站备案申请" class="headerlink" title="2、新办网站备案申请"></a><font color="#FF0000">2、新办网站备案申请</font></h3><p>点击新办网站申请，按实填写网站开办主体，上传身份证正反照和手持身份证件照。<br><img src="https://cdn.jsdelivr.net/gh/TRHX/ImageHosting/ITRHX-PIC/A23/17.png" alt="17.png"><br><img src="https://cdn.jsdelivr.net/gh/TRHX/ImageHosting/ITRHX-PIC/A23/18.png" alt="18.png"></p><h3 id="3、填写网站基本信息"><a href="#3、填写网站基本信息" class="headerlink" title="3、填写网站基本信息"></a><font color="#FF0000">3、填写网站基本信息</font></h3><p>按实填写网站基本信息，需要注意的地方：</p><p><font color="#FF0000">IP：</font>IP地址为阿里云/腾讯云的公网IP地址，请不要填写内网IP。</p><p><font color="#FF0000">域名证书：</font>以阿里云为例，进入【域名控制台】，点击域名后面的【管理】，选择【域名证书下载】即可，其它服务商类似。</p><p><font color="#FF0000">网络接入/域名注册服务商：</font>若办理公安备案的域名是通过<a href="https://www.aliyun.com/" target="_blank" rel="noopener">阿里云</a>完成的工信部备案，则按照以下填写：<br>网络接入服务商：</p><ul><li>接入商所属地区管辖：境内</li><li>接入商所属区域 ：浙江省 杭州市 滨江区</li><li>名称：阿里云计算有限公司</li><li>网站接入方式：租赁虚拟空间</li></ul><p>域名注册服务商：</p><ul><li>域名商所属地区管辖：境内</li><li>域名服务商所属区域：浙江省 杭州市 余杭区 </li><li>名称：阿里云计算有限公司（原万网）</li></ul><p>也可以通过点击后面的<code>查询网络接入\域名注册服务商</code>直接选择相应服务商，其他服务商类似</p><p><font color="#FF0000">服务类型：</font>交互式服务指：为互联网用户提供信息发布、交流互动等服务，包括但不限于论坛、博客、微博、网络购物、网上支付等服务类型，此项选择是否提供互联网交互服务将会直接影响到后面是否需要去公安局当面核验，若选择<code>是</code>，当地网警会打电话叫你去公安局当面核验，还需要填写《交互式服务安全检查表》等各种文件，总之是比较麻烦的，个人小网站，博客什么的建议选择<code>否</code>，选择<code>www服务</code>，这样的话不用去当面核验，审核下来也比较快，企业单位用户建议选择交互式。</p><p>其他信息如实填写即可！<br><img src="https://cdn.jsdelivr.net/gh/TRHX/ImageHosting/ITRHX-PIC/A23/19.png" alt="19.png"></p><h3 id="4、填写网站负责人信息"><a href="#4、填写网站负责人信息" class="headerlink" title="4、填写网站负责人信息"></a><font color="#FF0000">4、填写网站负责人信息</font></h3><p>填写网站安全负责人和网站应急联络人相关信息，网站应急联络人直接勾选同主体负责人后会自动填入。<br><img src="https://cdn.jsdelivr.net/gh/TRHX/ImageHosting/ITRHX-PIC/A23/20.png" alt="20.png"></p><h3 id="5、同意责任书并提交审核"><a href="#5、同意责任书并提交审核" class="headerlink" title="5、同意责任书并提交审核"></a><font color="#FF0000">5、同意责任书并提交审核</font></h3><p>《互联网信息服务单位网络安全责任告知书》有30秒的强制阅读时间，建议认真阅读一下告知书的内容。然后勾选我已阅读，点击提交即可。随后可以看到审核状态，不同地区政策有所不同，会有当地的网警联系网站负责人的，审核通过后记得在网站首页底部张贴公安机关核发的备案图标！<br><img src="https://cdn.jsdelivr.net/gh/TRHX/ImageHosting/ITRHX-PIC/A23/21.png" alt="21.png"><br><img src="https://cdn.jsdelivr.net/gh/TRHX/ImageHosting/ITRHX-PIC/A23/22.png" alt="22.png"></p>]]></content>
    
    <summary type="html">
    
      为了规范互联网信息服务活动，促进互联网信息服务健康有序发展，国家相关部门要求在国内的所有网站都必须备案(使用海外服务器则不需要备案)，未备案的域名不能使用国内服务器。部分推广平台也需要备案才可以开通。
    
    </summary>
    
      <category term="WEB前端" scheme="https://www.itrhx.com/categories/WEB%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="ICP备案" scheme="https://www.itrhx.com/tags/ICP%E5%A4%87%E6%A1%88/"/>
    
      <category term="公安备案" scheme="https://www.itrhx.com/tags/%E5%85%AC%E5%AE%89%E5%A4%87%E6%A1%88/"/>
    
  </entry>
  
  <entry>
    <title>恶意刷留言者——你是什么垃圾？</title>
    <link href="https://www.itrhx.com/2019/08/23/A25-SB/"/>
    <id>https://www.itrhx.com/2019/08/23/A25-SB/</id>
    <published>2019-08-23T01:27:46.962Z</published>
    <updated>2019-07-31T12:46:39.393Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><blockquote><p>有一种动物，自认为自己技术了得，实则和CXK差不多，以攻击他人为乐，这种动物称为程序员中的垃圾，哦！不，这种动物称不上程序员！</p></blockquote><blockquote><p>这个周连续被人刷垃圾评论，具体开始时间不记得了，不想多说什么，太多的文字用在垃圾身上简直是玷污中华上下五千年的文化，只问一句，你是什么垃圾？</p></blockquote><blockquote><p>随便提一句，这家伙连我的情侣博客一起刷的，真是让人大跌眼镜啊，估计自己没女朋友吧，见不得别人好，悲催啊，不知道又是哪个学校，哪个公司，哪个家庭摊上了这种垃圾。</p></blockquote><fancybox><br><img src="https://cdn.jsdelivr.net/gh/TRHX/ImageHosting/ITRHX-PIC/A25/01.png" alt="01"><br></fancybox><fancybox><br><center><img src="https://cdn.jsdelivr.net/gh/TRHX/ImageHosting/ITRHX-PIC/A25/02.png" alt="02"></center><br></fancybox><center><font color="#ff0000" size="50">请问你是什么垃圾？</font></center><br><center><font color="#ff0000" size="50">垃圾分类，从我做起！</font></center>]]></content>
    
    <summary type="html">
    
      有一种动物，自认为自己技术了得，实则和CXK差不多，以攻击他人为乐，这种动物称为程序员中的垃圾，哦！不，这种动物称不上程序员！
    
    </summary>
    
      <category term="BLOG" scheme="https://www.itrhx.com/categories/BLOG/"/>
    
    
      <category term="垃圾" scheme="https://www.itrhx.com/tags/%E5%9E%83%E5%9C%BE/"/>
    
  </entry>
  
  <entry>
    <title>利用官方支持为基于GitHub Pages的Hexo博客启用HTTPS</title>
    <link href="https://www.itrhx.com/2019/08/11/A28-hexo-add-https/"/>
    <id>https://www.itrhx.com/2019/08/11/A28-hexo-add-https/</id>
    <published>2019-08-11T14:16:09.175Z</published>
    <updated>2019-08-11T14:28:10.635Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><blockquote><p>利用官方支持为基于GitHub Pages的Hexo博客启用HTTPS</p></blockquote><a id="more"></a><hr><blockquote><p>HTTP（超文本传输协议），是一个基于请求与响应，无状态的，应用层的协议，常基于TCP/IP协议传输数据，互联网上应用最为广泛的一种网络协议，所有的WWW文件都必须遵守这个标准。设计HTTP的初衷是为了提供一种发布和接收HTML页面的方法。</p></blockquote><blockquote><p>HTTPS（超文本传输安全协议），是以安全为目标的HTTP通道，简单讲是HTTP的安全版。即HTTP下加入SSL层，HTTPS的安全基础是SSL，因此加密的详细内容就需要SSL。它是一个URI scheme（抽象标识符体系），句法类同http:体系。用于安全的HTTP数据传输。</p></blockquote><hr><p>目前大多数基于 GitHub Pages 的 Hexo 博客都是利用 CloudFlare 的 CDN 中转来启用 HTTPS 的，实现方法可以参考我的文章：<a href="https://www.itrhx.com/2019/07/31/A26-hexo-add-https/">《利用Cloudflare为基于GitHub Pages的Hexo博客添加HTTPS支持》</a>，这样的做法确实可以起到开启HTTPS的目的，但是这样做也有弊端，你会发现 CDN 中转，国外访问的话，可以起到加速的作用，但是国内访问反而速度降低了，还不如直接连接GitHub呢</p><p>其实 GitHub 官方是支持自定义域名开启 HTTPS 的，之前我和大多数人一样，以为只有 GitHub Pages 自带的域名（xxx.github.io）才能开启 HTTPS，直到有一天我发现了官方在2018年5月1日发表的博客：<a href="https://github.blog/2018-05-01-github-pages-custom-domains-https/" target="_blank" rel="noopener">《Custom domains on GitHub Pages gain support for HTTPS》</a>，大概讲的意思就是从8月份开始， GitHub Pages 上的自定义域名也能开启 HTTPS 了，下面就具体介绍一下如何实现</p><p>如果你以前域名的记录类型是 CNAME 方式，那么就不需要做任何更改<br>如果你以前域名的记录类型是 A 方式，那么就需要把记录值指向以下IP地址：</p><ul><li>185.199.108.153</li><li>185.199.109.153</li><li>185.199.110.153</li><li>185.199.111.153</li></ul><p>修改好记录值后，我们需要再次来到你博客的 GitHub 仓库，在仓库的【Settings】- 【GitHub Pages】下勾选【Enforce HTTPS】，注意，如果此时你不能勾选，请删除【Custom domain】里面你的域名并点击【Save】保存，刷新网页后就可以勾选了，然后在把域名填进去并保存即可，短时间可能会出现不安全的提示，这是因为加密证书大概一个小时左右才会生效，等一会儿就好了</p><fancybox><br><img src="https://cdn.jsdelivr.net/gh/TRHX/ImageHosting/ITRHX-PIC/A28/01.png" alt="01"><br></fancybox><br>最后贴一个我的域名解析，可作为参考：<br><br><fancybox><br><img src="https://cdn.jsdelivr.net/gh/TRHX/ImageHosting/ITRHX-PIC/A28/02.png" alt="02"><br></fancybox>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;利用官方支持为基于GitHub Pages的Hexo博客启用HTTPS&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="Hexo" scheme="https://www.itrhx.com/categories/Hexo/"/>
    
    
      <category term="Hexo" scheme="https://www.itrhx.com/tags/Hexo/"/>
    
      <category term="HTTPS" scheme="https://www.itrhx.com/tags/HTTPS/"/>
    
  </entry>
  
  <entry>
    <title>Github+jsDelivr+PicGo 打造稳定快速、高效免费图床</title>
    <link href="https://www.itrhx.com/2019/08/01/A27-image-hosting/"/>
    <id>https://www.itrhx.com/2019/08/01/A27-image-hosting/</id>
    <published>2019-07-31T16:02:08.497Z</published>
    <updated>2019-08-05T16:48:51.563Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><fancybox><br><img src="https://cdn.jsdelivr.net/gh/TRHX/ImageHosting/ITRHX-PIC/A27/ImageHosting.png" alt="ImageHosting"><br></fancybox><h1 id="–-前言"><a href="#–-前言" class="headerlink" title="– 前言"></a><font color="#FF000">– 前言</font></h1><p>图床是个啥东西就不用过多介绍了，先来对比一下各路图床：</p><blockquote><ul><li>微博图床：以前用的人比较多，从2019年4月开始开启了防盗链，凉凉</li><li>SM.MS：运营四年多了，也变得越来越慢了，到了晚上直接打不开图片，速度堪忧</li><li>其他小众图床：随时有挂掉的风险</li><li>Imgur等国外图床：国内访问速度太慢，随时有被墙的风险</li><li>大厂储存服务：例如七牛云、又拍云、腾讯云COS、阿里云OSS等，操作繁琐，又是实名认证又是域名备案的，麻烦，而且还要花钱（有钱又不怕麻烦的当我没说）</li></ul></blockquote><p>因此，GitHub图床是个不错的选择，利用jsDelivr CDN加速访问（jsDelivr 是一个免费开源的 CDN 解决方案），PicGo工具一键上传，操作简单高效，GitHub和jsDelivr都是大厂，不用担心跑路问题，不用担心速度和容量问题，而且完全免费，可以说是目前免费图床的最佳解决方案！</p><h1 id="–-新建GitHub仓库"><a href="#–-新建GitHub仓库" class="headerlink" title="– 新建GitHub仓库"></a><font color="#FF000">– 新建GitHub仓库</font></h1><p>登录/注册GitHub，新建一个仓库，填写好仓库名，仓库描述，根据需求选择是否为仓库初始化一个README.md描述文件</p><fancybox><br><img src="https://cdn.jsdelivr.net/gh/TRHX/ImageHosting/ITRHX-PIC/A27/01.png" alt="01"><br></fancybox><br><fancybox><br><img src="https://cdn.jsdelivr.net/gh/TRHX/ImageHosting/ITRHX-PIC/A27/02.png" alt="02"><br></fancybox><h1 id="–-生成一个Token"><a href="#–-生成一个Token" class="headerlink" title="– 生成一个Token"></a><font color="#FF000">– 生成一个Token</font></h1><p>在主页依次选择【Settings】-【Developer settings】-【Personal access tokens】-【Generate new token】，填写好描述，勾选【repo】，然后点击【Generate token】生成一个Token，注意这个Token只会显示一次，自己先保存下来，或者等后面配置好PicGo后再关闭此网页</p><fancybox><br><img src="https://cdn.jsdelivr.net/gh/TRHX/ImageHosting/ITRHX-PIC/A27/03.png" alt="03"><br></fancybox><br><fancybox><br><img src="https://cdn.jsdelivr.net/gh/TRHX/ImageHosting/ITRHX-PIC/A27/04.png" alt="04"><br></fancybox><br><fancybox><br><img src="https://cdn.jsdelivr.net/gh/TRHX/ImageHosting/ITRHX-PIC/A27/05.png" alt="05"><br></fancybox><br><fancybox><br><img src="https://cdn.jsdelivr.net/gh/TRHX/ImageHosting/ITRHX-PIC/A27/06.png" alt="06"><br></fancybox><br><fancybox><br><img src="https://cdn.jsdelivr.net/gh/TRHX/ImageHosting/ITRHX-PIC/A27/07.png" alt="07"><br></fancybox><h1 id="–-配置PicGo"><a href="#–-配置PicGo" class="headerlink" title="– 配置PicGo"></a><font color="#FF000">– 配置PicGo</font></h1><p>前往<a href="https://github.com/Molunerfinn/picgo/releases" target="_blank" rel="noopener">下载PicGo</a>，安装好后开始配置图床</p><fancybox><br><img src="https://cdn.jsdelivr.net/gh/TRHX/ImageHosting/ITRHX-PIC/A27/08.png" alt="08"><br></fancybox><blockquote><ul><li>设定仓库名：按照【用户名/图床仓库名】的格式填写</li><li>设定分支名：【master】</li><li>设定Token：粘贴之前生成的【Token】</li><li>指定存储路径：填写想要储存的路径，如【ITRHX-PIC/】，这样就会在仓库下创建一个名为ITRHX-PIC的文件夹，图片将会储存在此文件夹中</li><li>设定自定义域名：它的的作用是，在图片上传后，PicGo会按照【自定义域名+上传的图片名】的方式生成访问链接，放到粘贴板上，因为我们要使用jsDelivr加速访问，所以可以设置为【<a href="https://cdn.jsdelivr.net/gh/用户名/图床仓库名" target="_blank" rel="noopener">https://cdn.jsdelivr.net/gh/用户名/图床仓库名</a> 】，关于jsDelivr是如何引用资源的可以参考<a href="https://www.itrhx.com/2019/02/10/A18-free-cdn/">《免费CDN：jsDeliver+Github》</a></li></ul></blockquote><h1 id="–-进行高效创作"><a href="#–-进行高效创作" class="headerlink" title="– 进行高效创作"></a><font color="#FF000">– 进行高效创作</font></h1><p>配置好PicGo后，我们就可以进行高效创作了，将图片拖拽到上传区，将会自动上传并复制访问链接，将链接粘贴到博文中就行了，访问速度杠杠的，此外PicGo还有相册功能，可以对已上传的图片进行删除，修改链接等快捷操作，PicGo还可以生成不同格式的链接、支持批量上传、快捷键上传、自定义链接格式、上传前重命名等，更多功能自己去探索吧！</p>]]></content>
    
    <summary type="html">
    
      图床是每个博主不可或缺的工具，稳定快速、高效免费的图床越来越少，Github+jsDelivr+PicGo是一个不错的选择！
    
    </summary>
    
      <category term="图床" scheme="https://www.itrhx.com/categories/%E5%9B%BE%E5%BA%8A/"/>
    
    
      <category term="图床" scheme="https://www.itrhx.com/tags/%E5%9B%BE%E5%BA%8A/"/>
    
      <category term="PicGo" scheme="https://www.itrhx.com/tags/PicGo/"/>
    
      <category term="jsDelivr" scheme="https://www.itrhx.com/tags/jsDelivr/"/>
    
  </entry>
  
  <entry>
    <title>利用Cloudflare为基于GitHub Pages的Hexo博客添加HTTPS支持</title>
    <link href="https://www.itrhx.com/2019/07/31/A26-hexo-add-https/"/>
    <id>https://www.itrhx.com/2019/07/31/A26-hexo-add-https/</id>
    <published>2019-07-31T03:48:43.215Z</published>
    <updated>2019-08-11T14:20:49.341Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><blockquote><p>利用Cloudflare为基于GitHub Pages的Hexo博客添加HTTPS支持</p></blockquote><a id="more"></a><hr><blockquote><p>HTTP（超文本传输协议），是一个基于请求与响应，无状态的，应用层的协议，常基于TCP/IP协议传输数据，互联网上应用最为广泛的一种网络协议，所有的WWW文件都必须遵守这个标准。设计HTTP的初衷是为了提供一种发布和接收HTML页面的方法。</p></blockquote><blockquote><p>HTTPS（超文本传输安全协议），是以安全为目标的HTTP通道，简单讲是HTTP的安全版。即HTTP下加入SSL层，HTTPS的安全基础是SSL，因此加密的详细内容就需要SSL。它是一个URI scheme（抽象标识符体系），句法类同http:体系。用于安全的HTTP数据传输。</p></blockquote><hr><h1 id="–-前言"><a href="#–-前言" class="headerlink" title="– 前言"></a><font color="#FF000">– 前言</font></h1><p>GitHub Pages 自带的域名（xxx.github.io）支持开启 https 服务，可以在仓库的【Settings】- 【GitHub Pages】下勾选【Enforce HTTPS】即可，但是如果你设置了自定义域名的话，就比较复杂了，因为 hexo 博客是托管在 GitHub 上的，没有自己的服务器，因此也不支持上传 SSL 证书，从2018年5月1日起，GitHub官方也支持自定义域名开启https了，实现方法可参考我的文章：<a href="https://www.itrhx.com/2019/08/11/A28-hexo-add-https/">《利用官方支持为基于GitHub Pages的Hexo博客启用HTTPS》</a>，另外一种方法就是利用 Cloudflare 的 CDN 中转来启用 HTTPS，这种方法的弊端就是国内访问速度可能会变慢，本文主要讲述这种方法</p><p>Cloudflare 是一家美国的跨国科技企业，以向客户提供网站安全管理、性能优化及相关的技术支持为主要业务，它提供了免费的 https 服务，注意不是应用SSL证书，实现原理：用户到CDN服务器的连接为 https 方式，而CDN服务器到 GithubPages 服务器的连接为 http 方式，在CDN服务器那里加上反向代理</p><h1 id="–-注册-Cloudflare"><a href="#–-注册-Cloudflare" class="headerlink" title="– 注册 Cloudflare"></a><font color="#FF000">– 注册 Cloudflare</font></h1><p>到 <a href="https://dash.cloudflare.com/sign-up" target="_blank" rel="noopener">Cloudflare官网</a> 注册账号</p><fancybox><br><img src="https://cdn.jsdelivr.net/gh/TRHX/ImageHosting/ITRHX-PIC/A26/01.png" alt="01.png"><br></fancybox><h1 id="–-添加站点"><a href="#–-添加站点" class="headerlink" title="– 添加站点"></a><font color="#FF000">– 添加站点</font></h1><p>添加你的站点，一直下一步即可</p><fancybox><br><img src="https://cdn.jsdelivr.net/gh/TRHX/ImageHosting/ITRHX-PIC/A26/02.png" alt="02.png"><br></fancybox><br><fancybox><br><img src="https://cdn.jsdelivr.net/gh/TRHX/ImageHosting/ITRHX-PIC/A26/03.png" alt="03.png"><br></fancybox><br>如果你已经在域名服务商那里解析过域名的话，之后就会出现你域名的解析列表，如果还没有解析过，可以参考<a href="https://blog.csdn.net/qq_36759224/article/details/82121420#font_colorFF000__Hexo_font_270" target="_blank" rel="noopener">《为hexo博客配置个性域名》</a><br><fancybox><br><img src="https://cdn.jsdelivr.net/gh/TRHX/ImageHosting/ITRHX-PIC/A26/04.png" alt="04.png"><br></fancybox><h1 id="–修改DNS"><a href="#–修改DNS" class="headerlink" title="–修改DNS"></a><font color="#FF000">–修改DNS</font></h1><p>点击下一步 Cloudflare 会提供给你两个 DNS 地址</p><fancybox><br><img src="https://cdn.jsdelivr.net/gh/TRHX/ImageHosting/ITRHX-PIC/A26/05.png" alt="05.png"><br></fancybox><br>到域名服务商那里修改DNS，以阿里云为例，依次选择【控制台】-【域名】，选择你的域名，点击【管理】-【修改DNS】，将上面 Cloudflare 提供的两个 DNS 地址填进去，会过几分钟才生效<br><fancybox><br><img src="https://cdn.jsdelivr.net/gh/TRHX/ImageHosting/ITRHX-PIC/A26/08.png" alt="08.png"><br></fancybox><br><fancybox><br><img src="https://cdn.jsdelivr.net/gh/TRHX/ImageHosting/ITRHX-PIC/A26/09.png" alt="09.png"><br></fancybox><br><fancybox><br><img src="https://cdn.jsdelivr.net/gh/TRHX/ImageHosting/ITRHX-PIC/A26/10.png" alt="10.png"><br></fancybox><h1 id="–开启-HTTPS"><a href="#–开启-HTTPS" class="headerlink" title="–开启 HTTPS"></a><font color="#FF000">–开启 HTTPS</font></h1><p>在 Cloudflare 管理页面，点击【Crypto】选项，选择 SSL 的模式为【full】，注意：在CloudFlare 上激活站点后，可能需要24小时才能颁发新证书，耐心等待即可</p><fancybox><br><img src="https://cdn.jsdelivr.net/gh/TRHX/ImageHosting/ITRHX-PIC/A26/07.png" alt="07.png"><br></fancybox><p>关于三种模式 Flexible、Full、Full (Strict) 的区别：</p><ul><li><p>Flexible：访客与 Cloudflare 之间是加密的，Cloudflare 到站点服务器是不加密的</p></li><li><p>Full：访客到 Cloudflare、Cloudflare 到站点服务器都是加密的，它不会验证你服务器上的证书是否合法，因此你可以在你服务器上安装任何证书，包括自签名证书</p></li><li><p>Full (strict)：访客到 Cloudflare、Cloudflare 到站点服务器都是加密的，它会验证你服务器上的证书是否合法，你必须在你的服务器上安装有可信赖的CA证书，并且这个证书必须是未过期，包含有域名等信息的</p></li></ul><p>至此，我们的域名就支持 https 访问了，但是当用户输入 <a href="http://xxxxxx" target="_blank" rel="noopener">http://xxxxxx</a> 访问时，浏览器依旧会以 http 协议来访问，并不会跳转到 https，这时候就需要利用重定向来解决了</p><h1 id="–重定向强制-HTTPS"><a href="#–重定向强制-HTTPS" class="headerlink" title="–重定向强制 HTTPS"></a><font color="#FF000">–重定向强制 HTTPS</font></h1><p>Cloudflare 提供了一个名叫 Page Rules 的页面规则的功能，我们可以利用此功能对 URL 做一些处理，当用户访问是 HTTP 的时候重定向到 HTTPS，点击【Page Rules】选项，点击【Create Page Rules】，新建如下规则并保存即可</p><fancybox><br><img src="https://cdn.jsdelivr.net/gh/TRHX/ImageHosting/ITRHX-PIC/A26/06.png" alt="06.png"><br></fancybox><p>现在我们的 Hexo 博客就实现了全站 HTTPS！</p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;利用Cloudflare为基于GitHub Pages的Hexo博客添加HTTPS支持&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="Hexo" scheme="https://www.itrhx.com/categories/Hexo/"/>
    
    
      <category term="Hexo" scheme="https://www.itrhx.com/tags/Hexo/"/>
    
      <category term="HTTPS" scheme="https://www.itrhx.com/tags/HTTPS/"/>
    
  </entry>
  
  <entry>
    <title>Eclipse 通过 JDBC 连接 SQL Server</title>
    <link href="https://www.itrhx.com/2019/05/14/A22-eclipse-connects-to-sql/"/>
    <id>https://www.itrhx.com/2019/05/14/A22-eclipse-connects-to-sql/</id>
    <published>2019-05-13T18:21:23.785Z</published>
    <updated>2019-08-01T06:46:58.234Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>本文用到的软件版本以及相关环境：</p><blockquote><p>Eclipse Photon Release (4.8.0)<br>JDK-10.0.2<br>SQL Server 2012</p></blockquote><h1 id="1-配置-SQL-Server-2012"><a href="#1-配置-SQL-Server-2012" class="headerlink" title="1.配置 SQL Server 2012"></a><font color="#FF0000">1.配置 SQL Server 2012</font></h1><p>打开 SQL Server Management Studio，使用 <font color="#FF0000">SQL Server 身份验证</font> 登录：</p><p><img src="https://cdn.jsdelivr.net/gh/TRHX/ImageHosting/ITRHX-PIC/A22/001.png" alt="001.png"></p><p>如果在安装 SQL Server 2012 时选用了Windows身份验证登录方式，则需要重新设置，设置方法参考：<a href="https://blog.csdn.net/qq_36759224/article/details/90204243" target="_blank" rel="noopener">《SQL Server 登录更换【Windows身份验证】为【SQL Server 身份验证】》</a></p><p>登录成功后，打开 SQL Server 配置管理器：</p><p><img src="https://cdn.jsdelivr.net/gh/TRHX/ImageHosting/ITRHX-PIC/A22/002.png" alt="002.png"></p><p>在左边找到 SQL Server 网络配置，点击【你的数据库名】的协议，将右边栏的 <font color="#FF0000">Shared Memory、Named Pipes、TCP/IP</font> 全部右键选择<font color="#FF0000">启用</font>：</p><p><img src="https://cdn.jsdelivr.net/gh/TRHX/ImageHosting/ITRHX-PIC/A22/003.png" alt="003.png"><br><img src="https://cdn.jsdelivr.net/gh/TRHX/ImageHosting/ITRHX-PIC/A22/004.png" alt="004.png"></p><p>双击 <font color="#FF0000">TCP/IP</font>（或者右键选择属性），选择【<font color="#FF0000">IP地址</font>】，将【<font color="#FF0000">IP1</font>】和【<font color="#FF0000">IP10</font>】的【<font color="#FF0000">IP地址</font>】设为 <font color="#FF0000">127.0.0.1</font></p><p><img src="https://cdn.jsdelivr.net/gh/TRHX/ImageHosting/ITRHX-PIC/A22/005.png" alt="005.png"></p><p>将所有【<font color="#FF0000">IPx</font>】（<font color="#FF0000">IP1、IP10、IP11、IP12</font>等）的【<font color="#FF0000">已启用</font>】设为<font color="#FF0000">是</font></p><p><img src="https://cdn.jsdelivr.net/gh/TRHX/ImageHosting/ITRHX-PIC/A22/006.png" alt="006.png"></p><p>下拉到窗口底部，将 【<font color="#FF0000">IPAll</font>】 中的【<font color="#FF0000">TCP端口</font>】设成 <font color="#FF0000">1433</font>，其余不变</p><p><img src="https://cdn.jsdelivr.net/gh/TRHX/ImageHosting/ITRHX-PIC/A22/007.png" alt="007.png"></p><h1 id="2-开启-Telnet-服务"><a href="#2-开启-Telnet-服务" class="headerlink" title="2.开启 Telnet 服务"></a><font color="#FF0000">2.开启 Telnet 服务</font></h1><p>打开【<font color="#FF0000">控制面板</font>】，选择【<font color="#FF0000">程序</font>】，点击【<font color="#FF0000">启用或关闭 Windows 功能</font>】，找到【<font color="#FF0000">Telnet Client</font>】勾选并保存，Windows 7 或者以下的版本则勾选【<font color="#FF0000">Telnet 服务器</font>】和【<font color="#FF0000">Telnet 客户端</font>】</p><p><img src="https://cdn.jsdelivr.net/gh/TRHX/ImageHosting/ITRHX-PIC/A22/008.png" alt="008.png"><br><img src="https://cdn.jsdelivr.net/gh/TRHX/ImageHosting/ITRHX-PIC/A22/009.png" alt="009.png"></p><h1 id="3-测试1433端口是否打开"><a href="#3-测试1433端口是否打开" class="headerlink" title="3.测试1433端口是否打开"></a><font color="#FF0000">3.测试1433端口是否打开</font></h1><p> 运行cmd，输入 telnet 127.0.0.1 1433，若提示连接失败，则说明1433端口没有打开，需要重新进行以上配置，若连接成功，则显示如下：</p><p> <img src="https://cdn.jsdelivr.net/gh/TRHX/ImageHosting/ITRHX-PIC/A22/010.png" alt="010.png"></p><h1 id="4-下载JDBC"><a href="#4-下载JDBC" class="headerlink" title="4.下载JDBC"></a><font color="#FF0000">4.下载JDBC</font></h1><p> <a href="https://docs.microsoft.com/zh-cn/sql/connect/jdbc/download-microsoft-jdbc-driver-for-sql-server?view=sql-server-2017" target="_blank" rel="noopener">点击此处</a>下载各个版本JDBC，不同版本的JDBC驱动程序适用的JAR不同，与不同版本的SQL兼容性也不同，具体参考<a href="https://docs.microsoft.com/zh-cn/sql/connect/jdbc/microsoft-jdbc-driver-for-sql-server-support-matrix?view=sql-server-2017" target="_blank" rel="noopener">《Microsoft SQL Server JDBC 驱动程序支持矩阵》</a>，比如使用 SQL Server 2012 我们可以下载6.0的版本，下载<font color="#FF0000">sqljdbc_6.0.8112.200_chs.tar.gz</font>文件，解压后可以找到<font color="#FF0000">sqljdbc41.jar</font>与<font color="#FF0000">sqljdbc42.jar</font>文件，使用时要注意自己JDK是哪个版本的，1.80以上的则对应 <font color="#FF0000">sqljdbc42.jar</font> 类库</p><h1 id="5-Eclipse-连接-SQL-Server"><a href="#5-Eclipse-连接-SQL-Server" class="headerlink" title="5.Eclipse 连接 SQL Server"></a><font color="#FF0000">5.Eclipse 连接 SQL Server</font></h1><p>将 sqljdbc41.jar 或者 sqljdbc42.jar 放到一个文件夹下，打开 Eclipse，在需要连接数据库的项目里，右键【<font color="#FF0000">src</font>】，选择【<font color="#FF0000">Build Path</font>】、【<font color="#FF0000">Configure Build Path…</font>】，在弹出的窗口选择【<font color="#FF0000">Libraries</font>】，选择【<font color="#FF0000">Modulepath</font>】，单击【<font color="#FF0000">Add External JARs…</font>】，找到下载的 sqljdbc41.jar 或者 sqljdbc42.jar 文件并打开，然后【<font color="#FF0000">Apply and Close</font>】保存</p><p><img src="https://cdn.jsdelivr.net/gh/TRHX/ImageHosting/ITRHX-PIC/A22/011.png" alt="011.png"><br><img src="https://cdn.jsdelivr.net/gh/TRHX/ImageHosting/ITRHX-PIC/A22/012.png" alt="012.png"><br><img src="https://cdn.jsdelivr.net/gh/TRHX/ImageHosting/ITRHX-PIC/A22/013.png" alt="013.png"></p><h1 id="6-测试连接"><a href="#6-测试连接" class="headerlink" title="6.测试连接"></a><font color="#FF0000">6.测试连接</font></h1><p>打开 SQL Server 2012，在其中新建数据库 test</p><p><img src="https://cdn.jsdelivr.net/gh/TRHX/ImageHosting/ITRHX-PIC/A22/014.png" alt="014.png"></p><p>Eclipse中，在项目下新建一个package，再新建一个class，用于测试数据库的连接：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> test;</span><br><span class="line"><span class="keyword">import</span> java.sql.*;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String [] args)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">String driverName=<span class="string">"com.microsoft.sqlserver.jdbc.SQLServerDriver"</span>;</span><br><span class="line">String dbURL=<span class="string">"jdbc:sqlserver://localhost:1433;DatabaseName=test"</span>;  <span class="comment">//要连接的数据库名</span></span><br><span class="line">String userName=<span class="string">"sa"</span>;  <span class="comment">//数据库用户名</span></span><br><span class="line">String userPwd=<span class="string">"000000"</span>;  <span class="comment">//数据库密码</span></span><br><span class="line"><span class="keyword">try</span></span><br><span class="line">&#123;</span><br><span class="line">Class.forName(driverName);</span><br><span class="line">Connection dbConn=DriverManager.getConnection(dbURL,userName,userPwd);</span><br><span class="line">System.out.println(<span class="string">"连接数据库成功"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">catch</span>(Exception e)</span><br><span class="line">&#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">System.out.print(<span class="string">"连接失败"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>如果以上所有操作正确，就能成功连接数据库了：</p><p><img src="https://cdn.jsdelivr.net/gh/TRHX/ImageHosting/ITRHX-PIC/A22/015.png" alt="015.png"></p>]]></content>
    
    <summary type="html">
    
      Eclipse 与 SQL Server 建立连接
    
    </summary>
    
      <category term="Java" scheme="https://www.itrhx.com/categories/Java/"/>
    
    
      <category term="JDBC" scheme="https://www.itrhx.com/tags/JDBC/"/>
    
      <category term="SQL Server 2012" scheme="https://www.itrhx.com/tags/SQL-Server-2012/"/>
    
      <category term="Elicpse" scheme="https://www.itrhx.com/tags/Elicpse/"/>
    
  </entry>
  
  <entry>
    <title>Python PEP8 代码规范常见问题及解决方法</title>
    <link href="https://www.itrhx.com/2019/04/15/A21-PEP8/"/>
    <id>https://www.itrhx.com/2019/04/15/A21-PEP8/</id>
    <published>2019-04-14T17:09:58.738Z</published>
    <updated>2019-08-19T02:49:55.094Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>之前一直用 Python  IDLE 写代码，最近换成 PyCharm 写代码总是会出现波浪号，这才了解到 Python 的 PEP8 代码规范，所以将常见的 PEP8 代码规范问题和解决方法记录一下，学习一下，遇到了再持续更新，<font color="#FF0000">养成良好的习惯，编写规范的代码！</font></p><a id="more"></a><hr><ul><li><p><font color="#FF0000">PEP 8: no newline at end of file</font><br>解决方法：代码末尾需要另起一行，光标移到最后回车即可</p></li><li><p><font color="#FF0000">PEP 8: indentation is not a multiple of four</font><br>解决方法：缩进不是4的倍数，检查缩进</p></li><li><p><font color="#FF0000">PEP 8: over-indented</font><br>解决方法：过度缩进，检查缩进</p></li><li><p><font color="#FF0000">PEP 8: missing whitespace after’,’</font><br>解决方法：逗号后面少了空格，添加空格即可，类似还有分号或者冒号后面少了空格</p></li><li><p><font color="#FF0000">PEP 8: multiple imports on one line</font><br>解决方法：不要在一句 import 中引用多个库，举例：<code>import socket, urllib.error</code>最好写成：<code>import socket</code>   <code>import urllib.error</code></p></li><li><p><font color="#FF0000">PEP 8: blank line at end of line</font><br>解决方法：代码末尾行多了空格，删除空格即可</p></li><li><p><font color="#FF0000">PEP 8: at least two spaces before inline comment</font><br>解决方法：代码与注释之间至少要有两个空格</p></li><li><p><font color="#FF0000">PEP 8: block comment should start with ‘#’</font><br>解决方法：注释要以#加一个空格开始</p></li><li><p><font color="#FF0000">PEP 8: inline comment should start with ‘#’</font><br>解决方法：注释要以#加一个空格开始</p></li><li><p><font color="#FF0000">PEP 8: module level import not at top of file</font><br>解决方法：import不在文件的最上面，可能之前还有其它代码</p></li><li><p><font color="#FF0000">PEP 8: expected 2 blank lines，found 0</font><br>解决方法：需要两条空白行，添加两个空白行即可</p></li><li><p><font color="#FF0000">PEP 8: function name should be lowercase</font><br>解决方法：函数名改成小写即可</p></li><li><p><font color="#FF0000">PEP 8: missing whitespace around operator</font><br>解决方法：操作符（’=’、’&gt;’、’&lt;’等）前后缺少空格，加上即可</p></li><li><p><font color="#FF0000">PEP 8: unexpected spaces around keyword / parameter equals</font><br>解决方法：关键字/参数等号周围出现意外空格，去掉空格即可</p></li><li><p><font color="#FF0000">PEP 8: multiple statements on one line (colon)</font><br>解决方法：多行语句写到一行了，比如：<code>if x == 2: print(&#39;OK&#39;)</code>要分成两行写</p></li><li><p><font color="#FF0000">PEP 8: line too long (82 &gt; 79 characters)</font><br>解决方法：超过了每行的最大长度限制79</p></li></ul><hr><p>如果想要选择性忽略PEP8代码风格的警告信息可以使用以下方法：（养成良好的习惯，编写规范的代码！不推荐忽略！）</p><p>①将鼠标移到出现警告信息的地方，按 <font color="#FF0000">alt+Enter</font>，选择忽略（Ignore）这个错误即可：<br><img src="https://cdn.jsdelivr.net/gh/TRHX/ImageHosting/ITRHX-PIC/A21/01.png" alt="01"><br>②依次选择 <font color="#FF0000">File - Settings - Editor - Inspections</font>，在 Python下找到 <font color="#FF0000">PEP8 coding style violation</font> 选项，在右下角的 <font color="#FF0000">Ignore errors </font>里点击加号可以添加需要忽略的警告信息ID（ID信息见后面附录），例如想要忽略<code>indentation contains mixed spaces and tabs</code>这个警告，只需要添加其ID：<font color="#FF0000">E101</font> 即可<br><img src="https://cdn.jsdelivr.net/gh/TRHX/ImageHosting/ITRHX-PIC/A21/02.png" alt="02"><br>附录：全部警告信息以及对应的ID，官方地址：<a href="https://pep8.readthedocs.io/en/latest/intro.html#error-codes" target="_blank" rel="noopener">https://pep8.readthedocs.io/en/latest/intro.html#error-codes</a></p><table><thead><tr><th style="text-align:center">code</th><th style="text-align:center">sample message</th></tr></thead><tbody><tr><td style="text-align:center"><font color="#FF0000">E1</font></td><td style="text-align:center"><font color="#FF0000">Indentation</font></td></tr><tr><td style="text-align:center">E101</td><td style="text-align:center">indentation contains mixed spaces and tabs</td></tr><tr><td style="text-align:center">E111</td><td style="text-align:center">indentation is not a multiple of four</td></tr><tr><td style="text-align:center">E112</td><td style="text-align:center">expected an indented block</td></tr><tr><td style="text-align:center">E113</td><td style="text-align:center">unexpected indentation</td></tr><tr><td style="text-align:center">E114</td><td style="text-align:center">indentation is not a multiple of four (comment)</td></tr><tr><td style="text-align:center">E115</td><td style="text-align:center">expected an indented block (comment)</td></tr><tr><td style="text-align:center">E116</td><td style="text-align:center">unexpected indentation (comment)</td></tr><tr><td style="text-align:center">E117</td><td style="text-align:center">over-indented</td></tr><tr><td style="text-align:center">E121 (*^)</td><td style="text-align:center">continuation line under-indented for hanging indent</td></tr><tr><td style="text-align:center">E122 (^)</td><td style="text-align:center">continuation line missing indentation or outdented</td></tr><tr><td style="text-align:center">E123 (*)</td><td style="text-align:center">closing bracket does not match indentation of opening bracket’s line</td></tr><tr><td style="text-align:center">E124 (^)</td><td style="text-align:center">closing bracket does not match visual indentation</td></tr><tr><td style="text-align:center">E125 (^)</td><td style="text-align:center">continuation line with same indent as next logical line</td></tr><tr><td style="text-align:center">E126 (*^)</td><td style="text-align:center">continuation line over-indented for hanging indent</td></tr><tr><td style="text-align:center">E127 (^)</td><td style="text-align:center">continuation line over-indented for visual indent</td></tr><tr><td style="text-align:center">E128 (^)</td><td style="text-align:center">continuation line under-indented for visual indent</td></tr><tr><td style="text-align:center">E129 (^)</td><td style="text-align:center">visually indented line with same indent as next logical line</td></tr><tr><td style="text-align:center">E131 (^)</td><td style="text-align:center">continuation line unaligned for hanging indent</td></tr><tr><td style="text-align:center">E133 (*)</td><td style="text-align:center">closing bracket is missing indentation</td></tr><tr><td style="text-align:center"><font color="#FF0000">E2</font></td><td style="text-align:center"><font color="#FF0000">Whitespace</font></td></tr><tr><td style="text-align:center">E201</td><td style="text-align:center">whitespace after ‘(‘</td></tr><tr><td style="text-align:center">E202</td><td style="text-align:center">whitespace before ‘)’</td></tr><tr><td style="text-align:center">E203</td><td style="text-align:center">whitespace before ‘:’</td></tr><tr><td style="text-align:center">E211</td><td style="text-align:center">whitespace before ‘(‘</td></tr><tr><td style="text-align:center">E221</td><td style="text-align:center">multiple spaces before operator</td></tr><tr><td style="text-align:center">E222</td><td style="text-align:center">multiple spaces after operator</td></tr><tr><td style="text-align:center">E223</td><td style="text-align:center">tab before operator</td></tr><tr><td style="text-align:center">E224</td><td style="text-align:center">tab after operator</td></tr><tr><td style="text-align:center">E225</td><td style="text-align:center">missing whitespace around operator</td></tr><tr><td style="text-align:center">E226 (*)</td><td style="text-align:center">missing whitespace around arithmetic operator</td></tr><tr><td style="text-align:center">E227</td><td style="text-align:center">missing whitespace around bitwise or shift operator</td></tr><tr><td style="text-align:center">E228</td><td style="text-align:center">missing whitespace around modulo operator</td></tr><tr><td style="text-align:center">E231</td><td style="text-align:center">missing whitespace after ‘,’, ‘;’, or ‘:’</td></tr><tr><td style="text-align:center">E241 (*)</td><td style="text-align:center">multiple spaces after ‘,’</td></tr><tr><td style="text-align:center">E242 (*)</td><td style="text-align:center">tab after ‘,’</td></tr><tr><td style="text-align:center">E251</td><td style="text-align:center">unexpected spaces around keyword / parameter equals</td></tr><tr><td style="text-align:center">E261</td><td style="text-align:center">at least two spaces before inline comment</td></tr><tr><td style="text-align:center">E262</td><td style="text-align:center">inline comment should start with ‘# ‘</td></tr><tr><td style="text-align:center">E265</td><td style="text-align:center">block comment should start with ‘# ‘</td></tr><tr><td style="text-align:center">E266</td><td style="text-align:center">too many leading ‘#’ for block comment</td></tr><tr><td style="text-align:center">E271</td><td style="text-align:center">multiple spaces after keyword</td></tr><tr><td style="text-align:center">E272</td><td style="text-align:center">multiple spaces before keyword</td></tr><tr><td style="text-align:center">E273</td><td style="text-align:center">tab after keyword</td></tr><tr><td style="text-align:center">E274</td><td style="text-align:center">tab before keyword</td></tr><tr><td style="text-align:center">E275</td><td style="text-align:center">missing whitespace after keyword</td></tr><tr><td style="text-align:center"><font color="#FF0000">E3</font></td><td style="text-align:center"><font color="#FF0000">Blank line</font></td></tr><tr><td style="text-align:center">E301</td><td style="text-align:center">expected 1 blank line, found 0</td></tr><tr><td style="text-align:center">E302</td><td style="text-align:center">expected 2 blank lines, found 0</td></tr><tr><td style="text-align:center">E303</td><td style="text-align:center">too many blank lines (3)</td></tr><tr><td style="text-align:center">E304</td><td style="text-align:center">blank lines found after function decorator</td></tr><tr><td style="text-align:center">E305</td><td style="text-align:center">expected 2 blank lines after end of function or class</td></tr><tr><td style="text-align:center">E306</td><td style="text-align:center">expected 1 blank line before a nested definition</td></tr><tr><td style="text-align:center"><font color="#FF0000">E4</font></td><td style="text-align:center"><font color="#FF0000">Import</font></td></tr><tr><td style="text-align:center">E401</td><td style="text-align:center">multiple imports on one line</td></tr><tr><td style="text-align:center">E402</td><td style="text-align:center">module level import not at top of file</td></tr><tr><td style="text-align:center"><font color="#FF0000">E5</font></td><td style="text-align:center"><font color="#FF0000">Line length</font></td></tr><tr><td style="text-align:center">E501 (^)</td><td style="text-align:center">line too long (82 &gt; 79 characters)</td></tr><tr><td style="text-align:center">E502</td><td style="text-align:center">the backslash is redundant between brackets</td></tr><tr><td style="text-align:center"><font color="#FF0000">E7</font></td><td style="text-align:center"><font color="#FF0000">Statement</font></td></tr><tr><td style="text-align:center">E701</td><td style="text-align:center">multiple statements on one line (colon)</td></tr><tr><td style="text-align:center">E702</td><td style="text-align:center">multiple statements on one line (semicolon)</td></tr><tr><td style="text-align:center">E703</td><td style="text-align:center">statement ends with a semicolon</td></tr><tr><td style="text-align:center">E704 (*)</td><td style="text-align:center">multiple statements on one line (def)</td></tr><tr><td style="text-align:center">E711 (^)</td><td style="text-align:center">comparison to None should be ‘if cond is None:’</td></tr><tr><td style="text-align:center">E712 (^)</td><td style="text-align:center">comparison to True should be ‘if cond is True:’ or ‘if cond:’</td></tr><tr><td style="text-align:center">E713</td><td style="text-align:center">test for membership should be ‘not in’</td></tr><tr><td style="text-align:center">E714</td><td style="text-align:center">test for object identity should be ‘is not’</td></tr><tr><td style="text-align:center">E721 (^)</td><td style="text-align:center">do not compare types, use ‘isinstance()’</td></tr><tr><td style="text-align:center">E722</td><td style="text-align:center">do not use bare except, specify exception instead</td></tr><tr><td style="text-align:center">E731</td><td style="text-align:center">do not assign a lambda expression, use a def</td></tr><tr><td style="text-align:center">E741</td><td style="text-align:center">do not use variables named ‘l’, ‘O’, or ‘I’</td></tr><tr><td style="text-align:center">E742</td><td style="text-align:center">do not define classes named ‘l’, ‘O’, or ‘I’</td></tr><tr><td style="text-align:center">E743</td><td style="text-align:center">do not define functions named ‘l’, ‘O’, or ‘I’</td></tr><tr><td style="text-align:center"><font color="#FF0000">E9</font></td><td style="text-align:center"><font color="#FF0000">Runtime</font></td></tr><tr><td style="text-align:center">E901</td><td style="text-align:center">SyntaxError or IndentationError</td></tr><tr><td style="text-align:center">E902</td><td style="text-align:center">IOError</td></tr><tr><td style="text-align:center"><font color="#FF0000">W1</font></td><td style="text-align:center"><font color="#FF0000">Indentation warning</font></td></tr><tr><td style="text-align:center">W191</td><td style="text-align:center">indentation contains tabs</td></tr><tr><td style="text-align:center"><font color="#FF0000">W2</font></td><td style="text-align:center"><font color="#FF0000">Whitespace warning</font></td></tr><tr><td style="text-align:center">W291</td><td style="text-align:center">trailing whitespace</td></tr><tr><td style="text-align:center">W292</td><td style="text-align:center">no newline at end of file</td></tr><tr><td style="text-align:center">W293</td><td style="text-align:center">blank line contains whitespace</td></tr><tr><td style="text-align:center"><font color="#FF0000">W3</font></td><td style="text-align:center"><font color="#FF0000">Blank line warning</font></td></tr><tr><td style="text-align:center">W391</td><td style="text-align:center">blank line at end of file</td></tr><tr><td style="text-align:center"><font color="#FF0000">W5</font></td><td style="text-align:center"><font color="#FF0000">Line break warning</font></td></tr><tr><td style="text-align:center">W503 (*)</td><td style="text-align:center">line break before binary operator</td></tr><tr><td style="text-align:center">W504 (*)</td><td style="text-align:center">line break after binary operator</td></tr><tr><td style="text-align:center">W505 (*^)</td><td style="text-align:center">doc line too long (82 &gt; 79 characters)</td></tr><tr><td style="text-align:center"><font color="#FF0000">W6</font></td><td style="text-align:center"><font color="#FF0000">Deprecation warning</font></td></tr><tr><td style="text-align:center">W601</td><td style="text-align:center">.has_key() is deprecated, use ‘in’</td></tr><tr><td style="text-align:center">W602</td><td style="text-align:center">deprecated form of raising exception</td></tr><tr><td style="text-align:center">W603</td><td style="text-align:center">‘&lt;&gt;’ is deprecated, use ‘!=’</td></tr><tr><td style="text-align:center">W604</td><td style="text-align:center">backticks are deprecated, use ‘repr()’</td></tr><tr><td style="text-align:center">W605</td><td style="text-align:center">invalid escape sequence ‘x’</td></tr><tr><td style="text-align:center">W606</td><td style="text-align:center">‘async’ and ‘await’ are reserved keywords starting with Python 3.7</td></tr></tbody></table>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;之前一直用 Python  IDLE 写代码，最近换成 PyCharm 写代码总是会出现波浪号，这才了解到 Python 的 PEP8 代码规范，所以将常见的 PEP8 代码规范问题和解决方法记录一下，学习一下，遇到了再持续更新，&lt;font color=&quot;#FF0000&quot;&gt;养成良好的习惯，编写规范的代码！&lt;/font&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Python3 学习笔记" scheme="https://www.itrhx.com/categories/Python3-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
      <category term="Python3 经验" scheme="https://www.itrhx.com/categories/Python3-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/Python3-%E7%BB%8F%E9%AA%8C/"/>
    
    
      <category term="Python" scheme="https://www.itrhx.com/tags/Python/"/>
    
      <category term="PEP8" scheme="https://www.itrhx.com/tags/PEP8/"/>
    
  </entry>
  
  <entry>
    <title>VMware Pro 15 安装 Deepin15.9 国产操作系统</title>
    <link href="https://www.itrhx.com/2019/04/14/A20-install-deepin15.9/"/>
    <id>https://www.itrhx.com/2019/04/14/A20-install-deepin15.9/</id>
    <published>2019-04-14T12:53:34.310Z</published>
    <updated>2019-07-31T12:18:47.788Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p><a href="https://www.deepin.org/" target="_blank" rel="noopener">Deepin</a>是由武汉深之度科技有限公司开发的Linux发行版，个人认为其界面设计非常美观，而且作为国产操作系统，值得我们去体验和支持！</p><hr><h1 id="1-下载安装-VMware-Workstation-Pro-15"><a href="#1-下载安装-VMware-Workstation-Pro-15" class="headerlink" title="1.下载安装 VMware Workstation Pro 15"></a><font color="#FF0000">1.下载安装 VMware Workstation Pro 15</font></h1><p> 进入 <a href="https://www.vmware.com/products/workstation-pro/workstation-pro-evaluation.html" target="_blank" rel="noopener">VMware 官网</a>或者在软件商店下载最新版VMware虚拟机并安装<br><img src="https://cdn.jsdelivr.net/gh/TRHX/ImageHosting/ITRHX-PIC/A20/001.png" alt="001"></p><h1 id="2-下载-Deepin15-9-系统"><a href="#2-下载-Deepin15-9-系统" class="headerlink" title="2.下载 Deepin15.9 系统"></a><font color="#FF0000">2.下载 Deepin15.9 系统</font></h1><p>  进入 <a href="https://www.deepin.org/" target="_blank" rel="noopener">deepin 官网</a>，下载最新版 deepin 系统镜像<br><img src="https://cdn.jsdelivr.net/gh/TRHX/ImageHosting/ITRHX-PIC/A20/002.png" alt="002"></p><h1 id="3-在-VMware-中创建虚拟机"><a href="#3-在-VMware-中创建虚拟机" class="headerlink" title="3.在 VMware 中创建虚拟机"></a><font color="#FF0000">3.在 VMware 中创建虚拟机</font></h1><p>打开安装好的 VMware Workstation Pro 15，选择创建新的虚拟机<br><img src="https://cdn.jsdelivr.net/gh/TRHX/ImageHosting/ITRHX-PIC/A20/003.png" alt="003"><br>在新建虚拟机向导中选择自定义（高级）：<br><img src="https://cdn.jsdelivr.net/gh/TRHX/ImageHosting/ITRHX-PIC/A20/004.png" alt="004"><br>默认直接下一步，直到出现下图，再选择稍后安装操作系统：<br><img src="https://cdn.jsdelivr.net/gh/TRHX/ImageHosting/ITRHX-PIC/A20/005.png" alt="005"><br>选择客户机操作系统为 Linux ，如果你电脑是32位就选择 Ubuntu 版本，64位就选择 Ubuntu 64 位版本：<br><img src="https://cdn.jsdelivr.net/gh/TRHX/ImageHosting/ITRHX-PIC/A20/006.png" alt="006"><br>更改虚拟机名称及存放位置：<br><img src="https://cdn.jsdelivr.net/gh/TRHX/ImageHosting/ITRHX-PIC/A20/007.png" alt="007"><br>接下来为虚拟机指定处理器数量、分配内存（太大了可能会导致卡顿，太小了也不好，推荐内存大小即可）一直选择默认即可，选择磁盘时，选择创建新虚拟磁盘：<br><img src="https://cdn.jsdelivr.net/gh/TRHX/ImageHosting/ITRHX-PIC/A20/008.png" alt="008"><br>选择将虚拟磁盘储存为单个文件：<br><img src="https://cdn.jsdelivr.net/gh/TRHX/ImageHosting/ITRHX-PIC/A20/009.png" alt="009"><br>默认下一步：<br><img src="https://cdn.jsdelivr.net/gh/TRHX/ImageHosting/ITRHX-PIC/A20/010.png" alt="010"><br>点击完成：<br><img src="https://cdn.jsdelivr.net/gh/TRHX/ImageHosting/ITRHX-PIC/A20/011.png" alt="011"><br>此时我们就可以在虚拟机左侧“我的计算机”下面看到刚刚创建的虚拟机 Deepin，单击  Deepin，选择“编辑虚拟机设置”， 再选择“CD/DVD(SATA)”，选择“使用ISO映像文件”，点击“浏览”，找到先前我们下载好的 Deepin 15.9 镜像文件，点击“确定”<br><img src="https://cdn.jsdelivr.net/gh/TRHX/ImageHosting/ITRHX-PIC/A20/012.png" alt="012"><br><img src="https://cdn.jsdelivr.net/gh/TRHX/ImageHosting/ITRHX-PIC/A20/013.png" alt="013"></p><h1 id="4-在虚拟机上安装-Deepin-系统"><a href="#4-在虚拟机上安装-Deepin-系统" class="headerlink" title="4.在虚拟机上安装 Deepin 系统"></a><font color="#FF0000">4.在虚拟机上安装 Deepin 系统</font></h1><p>单击 Deepin，选择“开启此虚拟机”<br><img src="https://cdn.jsdelivr.net/gh/TRHX/ImageHosting/ITRHX-PIC/A20/014.png" alt="014"><br>接下来就是选择语言、创建用户、选择时区、指定磁盘等过程：<br><img src="https://cdn.jsdelivr.net/gh/TRHX/ImageHosting/ITRHX-PIC/A20/015.png" alt="015"><br><img src="https://cdn.jsdelivr.net/gh/TRHX/ImageHosting/ITRHX-PIC/A20/016.png" alt="016"><br><img src="https://cdn.jsdelivr.net/gh/TRHX/ImageHosting/ITRHX-PIC/A20/017.png" alt="017"><br><img src="https://cdn.jsdelivr.net/gh/TRHX/ImageHosting/ITRHX-PIC/A20/018.png" alt="018"><br>安装完成后：<br><img src="https://cdn.jsdelivr.net/gh/TRHX/ImageHosting/ITRHX-PIC/A20/019.png" alt="019"><br>可以看见界面还是相当美观的，系统也自带了深度的一些软件，比如深度录屏，深度录音，深度影院，深度计算器等等的一些小工具，作为国产操作系统，个人觉得已经非常优秀了，值得去体验！</p>]]></content>
    
    <summary type="html">
    
      VMware Pro 15 安装 Deepin 15.9 国产操作系统的详细教程
    
    </summary>
    
      <category term="Linux" scheme="https://www.itrhx.com/categories/Linux/"/>
    
    
      <category term="VMware" scheme="https://www.itrhx.com/tags/VMware/"/>
    
      <category term="Deepin" scheme="https://www.itrhx.com/tags/Deepin/"/>
    
  </entry>
  
  <entry>
    <title>Windows 系统中 Pygame 的安装</title>
    <link href="https://www.itrhx.com/2019/03/10/A19-install-pygame/"/>
    <id>https://www.itrhx.com/2019/03/10/A19-install-pygame/</id>
    <published>2019-03-10T14:34:09.591Z</published>
    <updated>2019-08-19T02:50:01.654Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><blockquote><p>Pygame是跨平台Python模块，专为电子游戏设计，可用于管理图形、动画乃至声音，建立在SDL基础上，允许实时电子游戏研发而无需被低级语言（如机器语言和汇编语言）束缚，通过使用Pygame来处理在屏幕上绘制图像等任务，你不用考虑众多繁琐而艰难的编码工作，而是将重点放在程序的高级逻辑上。</p></blockquote><p>你可以从以下三个地址查找与你运行的Python版本相匹配的Windows安装程序：</p><ul><li><p><a href="https://bitbucket.org/pygame/pygame/downloads/" target="_blank" rel="noopener">https://bitbucket.org/pygame/pygame/downloads/</a>  （Pygame项目托管在代码分享网站Bitbucket中）</p></li><li><p><a href="http://www.pygame.org/download.shtml" target="_blank" rel="noopener">http://www.pygame.org/download.shtml</a> （Pygame官网）</p></li><li><p><a href="https://www.lfd.uci.edu/~gohlke/pythonlibs/#pygame" target="_blank" rel="noopener">https://www.lfd.uci.edu/~gohlke/pythonlibs/#pygame</a> （如果以上两个地址找不到合适的安装程序，推荐去这个）</p></li></ul><p><img src="https://cdn.jsdelivr.net/gh/TRHX/ImageHosting/ITRHX-PIC/A19/01.png" alt="01"></p><p>如果下载的是.exe文件，直接运行它，如果下载的是.whl文件，就需要打开命令窗口，切换到该文件所在的目录，使用pip来运行它：</p><p>首先检查电脑是否安装了pip，打开终端窗口，执行如下命令：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt;python -m pip --version</span><br></pre></td></tr></table></figure></p><p>如果输出版本信息则已安装：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt;pip 18.1 from E:\Python\lib\site-packages\pip (python 3.6)</span><br></pre></td></tr></table></figure></p><p>否则请安装pip，访问 <a href="https://bootstrap.pypa.io/get-pip.py" target="_blank" rel="noopener">https://bootstrap.pypa.io/get-pip.py</a> ，如果出现对话框请直接保存文件，如果出现的是get-pip.py的源代码，则需要新建一个get-pip.py文件，将该代码复制粘贴到其中，使用下面的命令运行get-pip.py：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt;python get-pip.py</span><br></pre></td></tr></table></figure></p><p>安装完成后可再次使用<code>python -m pip --version</code>命令检查是否成功安装了pip，成功安装pip后，使用以下命令来安装Pygame：<font color="#FF0000">（注意要先cd到你下载的文件的目录）</font><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt;python -m pip install --user 下载的.whl文件名</span><br></pre></td></tr></table></figure></p><p>出现以下信息则表示安装成功：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt;Successfully installed 你安装的Pygame版本</span><br></pre></td></tr></table></figure></p><p>比如我的Python版本是3.6.5，64位的，则需要下载pygame‑1.9.4‑cp36‑cp36m‑win_amd64.whl，该文件保存到了桌面，使用下面的命令安装Pygame:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">C:\Users\Lenovo&gt;cd desktop</span><br><span class="line"></span><br><span class="line">C:\Users\Lenovo\Desktop&gt;python -m pip install --user pygame‑1.9.4‑cp36‑cp36m‑win_amd64.whl</span><br><span class="line">Processing c:\users\lenovo\desktop\pygame‑1.9.4‑cp36‑cp36m‑win_amd64.whl</span><br><span class="line">Installing collected packages: pygame</span><br><span class="line">Successfully installed pygame‑1.9.4</span><br><span class="line"></span><br><span class="line">C:\Users\Lenovo&gt;Desktop&gt;</span><br></pre></td></tr></table></figure></p><p>检查是否成功安装Pygame：在Python的IDLE里输入<code>import pygame</code>，如果不报错，则安装成功，再输入<code>pygame.ver</code>就能看到版本号：</p><p><img src="https://cdn.jsdelivr.net/gh/TRHX/ImageHosting/ITRHX-PIC/A19/02.png" alt="02"><br>)</p><p>可能出现的问题：<br>报错：<code>xxxxxxxxxxxxxxxxxxxxxx.whl is not a supported wheel on this platform.</code><br>原因：Python版本与Pygame版本不对应<br>解决方法：Pygame文件名中的cp**表示Python对应的版本，另外并不是你电脑64位则下载64位，要看你安装的Python是否为64位，注意下载对应的版本！</p><p>报错：<code>You are using pip version x.x.x, however version x.x.x is available.You should consider upgrading via the &#39;python -m pip install --upgrade pip&#39; command.</code><br>原因：版本需要更新<br>解决方法：输入<code>python -m pip install --upgrade pip</code>命令进行更新即可</p><p>Pygame安装完成后我们就可以使用Python来开发游戏啦！</p>]]></content>
    
    <summary type="html">
    
      Windows 系统中 Pygame 的安装笔记
    
    </summary>
    
      <category term="Python3 学习笔记" scheme="https://www.itrhx.com/categories/Python3-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
      <category term="Python3 经验" scheme="https://www.itrhx.com/categories/Python3-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/Python3-%E7%BB%8F%E9%AA%8C/"/>
    
    
      <category term="Pygame" scheme="https://www.itrhx.com/tags/Pygame/"/>
    
      <category term="Python" scheme="https://www.itrhx.com/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>免费CDN：jsDeliver+Github</title>
    <link href="https://www.itrhx.com/2019/02/10/A18-free-cdn/"/>
    <id>https://www.itrhx.com/2019/02/10/A18-free-cdn/</id>
    <published>2019-02-10T14:30:17.903Z</published>
    <updated>2019-08-01T01:32:35.150Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h4 id="本文有参考《jsDeliver-github使用教程，免费好用的cdn》——-By-hojun"><a href="#本文有参考《jsDeliver-github使用教程，免费好用的cdn》——-By-hojun" class="headerlink" title="本文有参考《jsDeliver+github使用教程，免费好用的cdn》—— By hojun"></a><center><font color="#FF0000">本文有参考</font><a href="https://www.hojun.cn/2019/01/18/jsDeliver-github%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B%EF%BC%8C%E5%85%8D%E8%B4%B9%E5%A5%BD%E7%94%A8%E7%9A%84cdn/" target="_blank" rel="noopener">《jsDeliver+github使用教程，免费好用的cdn》</a>—— By hojun</center></h4><hr><p>CDN的全称是Content Delivery Network，即内容分发网络。CDN是构建在网络之上的内容分发网络，依靠部署在各地的边缘服务器，通过中心平台的负载均衡、内容分发、调度等功能模块，使用户就近获取所需内容，降低网络拥塞，提高用户访问响应速度和命中率。CDN的关键技术主要有内容存储和分发技术。——百度百科</p><p>放在Github的资源在国内加载速度比较慢，因此需要使用CDN加速来优化网站打开速度，jsDeliver + Github便是免费且好用的CDN，非常适合博客网站使用。</p><hr><h1 id="1、新建Github仓库"><a href="#1、新建Github仓库" class="headerlink" title="1、新建Github仓库 "></a><font color="#FF0000">1、新建Github仓库 </font></h1><p><img src="https://cdn.jsdelivr.net/gh/TRHX/ImageHosting/ITRHX-PIC/A18/01.png" alt="01"></p><h1 id="2、克隆Github仓库到本地"><a href="#2、克隆Github仓库到本地" class="headerlink" title="2、克隆Github仓库到本地 "></a><font color="#FF0000">2、克隆Github仓库到本地 </font></h1><p>  点击 Clone or download，一键复制仓库地址<br><img src="https://cdn.jsdelivr.net/gh/TRHX/ImageHosting/ITRHX-PIC/A18/04.png" alt="04"></p><p> 在本地目录右键 Git Bash Here，执行以下命令：<br> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone 一键复制的仓库地址</span><br></pre></td></tr></table></figure></p><h1 id="3、上传资源"><a href="#3、上传资源" class="headerlink" title="3、上传资源 "></a><font color="#FF0000">3、上传资源 </font></h1><p>  复制需要上传的资源到本地git仓库（注：jsDeliver不支持加载超过20M的资源），在本地git仓库目录下右键 Git Bash Here，执行以下命令：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">git status                    //查看状态</span><br><span class="line">git add .                     //添加所有文件到暂存区</span><br><span class="line">git commit -m &apos;第一次提交&apos;      //把文件提交到仓库</span><br><span class="line">git push                      //推送至远程仓库</span><br></pre></td></tr></table></figure></p><h1 id="4、发布仓库"><a href="#4、发布仓库" class="headerlink" title="4、发布仓库 "></a><font color="#FF0000">4、发布仓库 </font></h1><p>  点击release发布<br><img src="https://cdn.jsdelivr.net/gh/TRHX/ImageHosting/ITRHX-PIC/A18/02.png" alt="02"></p><p>  自定义发布版本号<br>  <img src="https://cdn.jsdelivr.net/gh/TRHX/ImageHosting/ITRHX-PIC/A18/03.png" alt="03"></p><h1 id="5、通过jsDeliver引用资源"><a href="#5、通过jsDeliver引用资源" class="headerlink" title="5、通过jsDeliver引用资源 "></a><font color="#FF0000">5、通过jsDeliver引用资源 </font></h1><p>使用方法：<a href="https://cdn.jsdelivr.net/gh/你的用户名/你的仓库名@发布的版本号/文件路径" target="_blank" rel="noopener">https://cdn.jsdelivr.net/gh/你的用户名/你的仓库名@发布的版本号/文件路径</a><br>例如：<a href="https://cdn.jsdelivr.net/gh/TRHX/CDN-for-itrhx.com@1.0/images/trhx.png" target="_blank" rel="noopener">https://cdn.jsdelivr.net/gh/TRHX/CDN-for-itrhx.com@1.0/images/trhx.png</a><br>&nbsp;&nbsp;&nbsp;&nbsp;<a href="https://cdn.jsdelivr.net/gh/TRHX/CDN-for-itrhx.com@2.0.1/css/style.css" target="_blank" rel="noopener">https://cdn.jsdelivr.net/gh/TRHX/CDN-for-itrhx.com@2.0.1/css/style.css</a><br>&nbsp;&nbsp;&nbsp;&nbsp;<a href="https://cdn.jsdelivr.net/gh/moezx/cdn@3.1.3//The%20Pet%20Girl%20of%20Sakurasou.mp4" target="_blank" rel="noopener">https://cdn.jsdelivr.net/gh/moezx/cdn@3.1.3//The%20Pet%20Girl%20of%20Sakurasou.mp4</a></p><p>注意：版本号不是必需的，是为了区分新旧资源，如果不使用版本号，将会直接引用最新资源，除此之外还可以使用某个范围内的版本，查看所有资源等，具体使用方法如下：</p><ul><li><p>// 加载任何Github发布、提交或分支<br><a href="https://cdn.jsdelivr.net/gh/user/repo@version/file" target="_blank" rel="noopener">https://cdn.jsdelivr.net/gh/user/repo@version/file</a></p></li><li><p>// 加载 jQuery v3.2.1<br><a href="https://cdn.jsdelivr.net/gh/jquery/jquery@3.2.1/dist/jquery.min.js" target="_blank" rel="noopener">https://cdn.jsdelivr.net/gh/jquery/jquery@3.2.1/dist/jquery.min.js</a></p></li><li><p>// 使用版本范围而不是特定版本<br><a href="https://cdn.jsdelivr.net/gh/jquery/jquery@3.2/dist/jquery.min.js" target="_blank" rel="noopener">https://cdn.jsdelivr.net/gh/jquery/jquery@3.2/dist/jquery.min.js</a><br><a href="https://cdn.jsdelivr.net/gh/jquery/jquery@3/dist/jquery.min.js" target="_blank" rel="noopener">https://cdn.jsdelivr.net/gh/jquery/jquery@3/dist/jquery.min.js</a></p></li><li><p>// 完全省略该版本以获取最新版本<br><a href="https://cdn.jsdelivr.net/gh/jquery/jquery/dist/jquery.min.js" target="_blank" rel="noopener">https://cdn.jsdelivr.net/gh/jquery/jquery/dist/jquery.min.js</a></p></li><li><p>// 将“.min”添加到任何JS/CSS文件中以获取缩小版本，如果不存在，将为会自动生成<br><a href="https://cdn.jsdelivr.net/gh/jquery/jquery@3.2.1/src/core.min.js" target="_blank" rel="noopener">https://cdn.jsdelivr.net/gh/jquery/jquery@3.2.1/src/core.min.js</a></p></li><li><p>// 在末尾添加 / 以获取资源目录列表<br><a href="https://cdn.jsdelivr.net/gh/jquery/jquery/" target="_blank" rel="noopener">https://cdn.jsdelivr.net/gh/jquery/jquery/</a></p></li></ul>]]></content>
    
    <summary type="html">
    
      放在Github的资源在国内加载速度比较慢，因此需要使用CDN加速来优化网站打开速度，jsDeliver + Github便是免费且好用的CDN，非常适合博客网站使用。
    
    </summary>
    
      <category term="CDN" scheme="https://www.itrhx.com/categories/CDN/"/>
    
    
      <category term="jsDeliver" scheme="https://www.itrhx.com/tags/jsDeliver/"/>
    
      <category term="CDN" scheme="https://www.itrhx.com/tags/CDN/"/>
    
  </entry>
  
  <entry>
    <title>新年快乐！</title>
    <link href="https://www.itrhx.com/2019/02/05/A17-happy-new-year/"/>
    <id>https://www.itrhx.com/2019/02/05/A17-happy-new-year/</id>
    <published>2019-02-04T19:09:51.832Z</published>
    <updated>2019-04-01T16:34:14.610Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><table><thead><tr><th style="text-align:center">C</th><th style="text-align:center"><code>printf(&quot;2019，祝大家&quot;);</code></th></tr></thead><tbody><tr><td style="text-align:center">C++</td><td style="text-align:center"><code>cout&lt;&lt;&quot;一帆风顺&quot;;</code></td></tr><tr><td style="text-align:center">C#</td><td style="text-align:center"><code>System.Console.WriteLine(&quot;二龙腾飞&quot;)</code></td></tr><tr><td style="text-align:center">VB</td><td style="text-align:center"><code>Msg(&quot;三羊开泰&quot;)</code></td></tr><tr><td style="text-align:center">VC</td><td style="text-align:center"><code>MessageBox(&quot;四季平安&quot;);</code></td></tr><tr><td style="text-align:center">Java</td><td style="text-align:center"><code>System.out.println(&quot;五福临门&quot;);</code></td></tr><tr><td style="text-align:center">JavaScript</td><td style="text-align:center"><code>alert(&quot;六六大顺&quot;)</code></td></tr><tr><td style="text-align:center">PHP</td><td style="text-align:center"><code>echo &quot;七星高照&quot;;</code></td></tr><tr><td style="text-align:center">Python</td><td style="text-align:center"><code>print(&quot;八方来财&quot;)</code></td></tr><tr><td style="text-align:center">Html</td><td style="text-align:center"><code>&lt;br/&gt;九运当头&lt;br/&gt;</code></td></tr><tr><td style="text-align:center">Objectivec</td><td style="text-align:center"><code>NSLog(@&quot;十全十美&quot;);</code></td></tr><tr><td style="text-align:center">QBasic</td><td style="text-align:center"><code>Print &quot;阖家幸福&quot;</code></td></tr><tr><td style="text-align:center">Asp</td><td style="text-align:center"><code>Response.Write &quot;心想事成&quot;</code></td></tr><tr><td style="text-align:center">Ruby</td><td style="text-align:center"><code>puts &quot;财源广进&quot;</code></td></tr><tr><td style="text-align:center">VBScript</td><td style="text-align:center"><code>MsgBox &quot;幸福安康&quot;</code></td></tr><tr><td style="text-align:center">XML</td><td style="text-align:center"><code>&lt;TextView android:text=&quot;大展宏图&quot; /&gt;</code></td></tr><tr><td style="text-align:center">LUA</td><td style="text-align:center"><code>print(&quot;学业有成&quot;)</code></td></tr><tr><td style="text-align:center">Delphi</td><td style="text-align:center"><code>ShowMessage(&#39;万事如意&#39;);</code></td></tr><tr><td style="text-align:center">shell</td><td style="text-align:center"><code>echo 步步高升</code></td></tr><tr><td style="text-align:center">perl</td><td style="text-align:center"><code>print &#39;鸿案齐眉&#39;</code></td></tr><tr><td style="text-align:center">LISP</td><td style="text-align:center"><code>(format t &quot;身体健康~%&quot;)</code></td></tr><tr><td style="text-align:center">powerBuilder</td><td style="text-align:center"><code>messagebox（&quot;龙马精神&quot;)</code></td></tr><tr><td style="text-align:center">COBOL</td><td style="text-align:center"><code>DISPLAY &#39;笑口常开&#39;</code></td></tr><tr><td style="text-align:center">aswing</td><td style="text-align:center"><code>JOptionPane.showMessageDialog(&quot;happy&quot;,&quot;好运连连&quot;)</code></td></tr><tr><td style="text-align:center">Android</td><td style="text-align:center"><code>Toast.makeText(getApplicationContext(),&quot;年年有余&quot;,Toast.LENGTH_SHORT).show()</code></td></tr><tr><td style="text-align:center">flex</td><td style="text-align:center"><code>Alert.show(&quot;大吉大利&quot;);</code></td></tr><tr><td style="text-align:center">Foxpro</td><td style="text-align:center"><code>?[家庭幸福！]</code></td></tr><tr><td style="text-align:center">iapp</td><td style="text-align:center"><code>tw(&quot;瑞气盈门&quot;)</code></td></tr><tr><td style="text-align:center">DOS批处理</td><td style="text-align:center"><code>echo 鹏程万里</code></td></tr><tr><td style="text-align:center">易语言</td><td style="text-align:center"><code>调试输出(“万事亨通”)</code></td></tr><tr><td style="text-align:center">Clojure</td><td style="text-align:center"><code>(println &quot;年年有今昔&quot;)</code></td></tr><tr><td style="text-align:center">verilog/systemverilog/e</td><td style="text-align:center"><code>$display(&quot;岁岁有今朝&quot;)</code></td></tr><tr><td style="text-align:center">as</td><td style="text-align:center"><code>trace(&quot;祝大家新年快乐！&quot;);</code></td></tr></tbody></table>]]></content>
    
    <summary type="html">
    
      祝福的34种语言写法
    
    </summary>
    
      <category term="BLOG" scheme="https://www.itrhx.com/categories/BLOG/"/>
    
    
      <category term="BLOG" scheme="https://www.itrhx.com/tags/BLOG/"/>
    
  </entry>
  
</feed>
