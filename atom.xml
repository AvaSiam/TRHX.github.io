<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>TRHX&#39;S BLOG</title>
  
  <subtitle>一入 IT 深似海 从此学习无绝期</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://www.itrhx.com/"/>
  <updated>2019-10-01T05:28:05.860Z</updated>
  <id>https://www.itrhx.com/</id>
  
  <author>
    <name>TRHX&#39;BLOG</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>使用 Hexo-Git-Backup 插件备份你的 Hexo 博客</title>
    <link href="https://www.itrhx.com/2019/09/29/A53-hexo-backup/"/>
    <id>https://www.itrhx.com/2019/09/29/A53-hexo-backup/</id>
    <published>2019-09-29T10:02:15.603Z</published>
    <updated>2019-10-01T05:28:05.860Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>欢迎关注我的 CSDN 专栏：<a href="https://blog.csdn.net/qq_36759224/article/category/9285510" target="_blank" rel="noopener">《个人博客搭建：Hexo+Github Pages》</a>，从搭建到美化一条龙，帮你解决 Hexo 常见问题！</p><hr><p>由于 Hexo 博客是静态托管的，所有的原始数据都保存在本地，如果哪一天电脑坏了，或者是误删了本地数据，那就是叫天天不应叫地地不灵了，此时定时备份就显得比较重要了，常见的备份方法有：打包数据保存到U盘、云盘或者其他地方，但是早就有大神开发了备份插件：<a href="https://github.com/coneycode/hexo-git-backup" target="_blank" rel="noopener">hexo-git-backup</a> ，只需要一个命令就可以将所有数据包括主题文件备份到 github 了</p><p>首先进入你博客目录，输入命令 <code>hexo version</code> 查看 Hexo 版本，如图所示，我的版本是 3.7.1：</p><fancybox><br><img src="https://cdn.jsdelivr.net/gh/TRHX/ImageHosting/ITRHX-PIC/A53/01.png" alt="01"><br></fancybox><p>安装备份插件，如果你的 Hexo 版本是 2.x.x，则使用以下命令安装：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install hexo-git-backup@0.0.91 --save</span><br></pre></td></tr></table></figure><p>如果你的 Hexo 版本是 3.x.x，则使用以下命令安装：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install hexo-git-backup --save</span><br></pre></td></tr></table></figure><p>到 Hexo 博客根目录的 <code>_config.yml</code> 配置文件里添加以下配置：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">backup:</span><br><span class="line">  <span class="built_in">type</span>: git</span><br><span class="line">  theme: material-x-1.2.1</span><br><span class="line">  message: Back up my www.itrhx.com blog</span><br><span class="line">  repository:</span><br><span class="line">    github: git@github.com:TRHX/TRHX.github.io.git,backup</span><br><span class="line">    coding: git@git.dev.tencent.com:TRHX/TRHX.git,backup</span><br></pre></td></tr></table></figure><p>参数解释：</p><ul><li>theme：你要备份的主题名称</li><li>message：自定义提交信息</li><li>repository：仓库名，注意仓库地址后面要添加一个分支名，比如我就创建了一个 backup 分支</li></ul><p>最后使用以下命令备份你的博客：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo backup</span><br></pre></td></tr></table></figure><p>或者使用以下简写命令也可以：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo b</span><br></pre></td></tr></table></figure><p>备份成功后可以在你的仓库分支下看到备份的原始文件：</p><fancybox><br><img src="https://cdn.jsdelivr.net/gh/TRHX/ImageHosting/ITRHX-PIC/A53/02.png" alt="02"><br></fancybox><fancybox><br><img src="https://cdn.jsdelivr.net/gh/TRHX/ImageHosting/ITRHX-PIC/A53/03.png" alt="03"><br></fancybox>]]></content>
    
    <summary type="html">
    
      一键备份博客数据，再也不怕数据丢失了！
    
    </summary>
    
      <category term="Hexo" scheme="https://www.itrhx.com/categories/Hexo/"/>
    
    
      <category term="Hexo" scheme="https://www.itrhx.com/tags/Hexo/"/>
    
      <category term="备份" scheme="https://www.itrhx.com/tags/%E5%A4%87%E4%BB%BD/"/>
    
  </entry>
  
  <entry>
    <title>Python3 爬虫实战 — 豆瓣电影TOP250</title>
    <link href="https://www.itrhx.com/2019/09/28/A52-pyspider-combat-douban/"/>
    <id>https://www.itrhx.com/2019/09/28/A52-pyspider-combat-douban/</id>
    <published>2019-09-28T08:35:19.823Z</published>
    <updated>2019-09-28T09:12:23.502Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>爬取时间：2019-09-27<br>爬取难度：★★☆☆☆☆<br>请求链接：<a href="https://movie.douban.com/top250" target="_blank" rel="noopener">豆瓣电影 Top 250</a> 以及每部电影详情页<br>爬取目标：爬取榜单上每一部电影详情页的数据，保存为 CSV 文件；下载所有电影海报到本地<br>涉及知识：请求库 requests、解析库 lxml、Xpath 语法、正则表达式、CSV 和二进制数据储存、列表操作</p><hr><a id="more"></a><h1 id="【1x00】循环爬取首页"><a href="#【1x00】循环爬取首页" class="headerlink" title="【1x00】循环爬取首页"></a><font color="#FF0000">【1x00】循环爬取首页</font></h1><p>观察豆瓣电影 Top 250，请求地址为：<a href="https://movie.douban.com/top250" target="_blank" rel="noopener">https://movie.douban.com/top250</a></p><p>每页展示25条电影信息，照例翻页观察 url 的变化：</p><p>第一页：<a href="https://movie.douban.com/top250" target="_blank" rel="noopener">https://movie.douban.com/top250</a><br>第二页：<a href="https://movie.douban.com/top250?start=25&amp;filter=" target="_blank" rel="noopener">https://movie.douban.com/top250?start=25&amp;filter=</a><br>第三页：<a href="https://movie.douban.com/top250?start=50&amp;filter=" target="_blank" rel="noopener">https://movie.douban.com/top250?start=50&amp;filter=</a></p><p>一共有10页，每次改变的是 start 的值，利用一个 for 循环，从 0 到 250 每隔 25 取一个值拼接到 url，实现循环爬取每一页，由于我们的目标是进入每一部电影的详情页，然后爬取详情页的内容，所以我们可以使用 Xpath 提取每一页每部电影详情页的 URL，将其赋值给 <code>m_urls</code>，并返回 <code>m_urls</code>，<code>m_urls</code> 是一个列表，列表元素就是电影详情页的 URL</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index_pages</span><span class="params">(number)</span>:</span></span><br><span class="line">    url = <span class="string">'https://movie.douban.com/top250?start=%s&amp;filter='</span> % number</span><br><span class="line">    index_response = requests.get(url=url, headers=headers)</span><br><span class="line">    tree = etree.HTML(index_response.text)</span><br><span class="line">    m_urls = tree.xpath(<span class="string">"//li/div/div/a/@href"</span>)</span><br><span class="line">    <span class="keyword">return</span> m_urls</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>, <span class="number">250</span>, <span class="number">25</span>):</span><br><span class="line">        movie_urls = index_pages(i)</span><br></pre></td></tr></table></figure><hr><h1 id="【2x00】解析模块"><a href="#【2x00】解析模块" class="headerlink" title="【2x00】解析模块"></a><font color="#FF0000">【2x00】解析模块</font></h1><p>定义一个解析函数 <code>parse_pages()</code>，利用 for 循环，依次提取 <code>index_pages()</code> 函数返回的列表中的元素，也就是每部电影详情页的 URL，将其传给解析函数进行解析</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index_pages</span><span class="params">(number)</span>:</span></span><br><span class="line">expressions</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">parse_pages</span><span class="params">(url)</span>:</span></span><br><span class="line">expressions</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>, <span class="number">250</span>, <span class="number">25</span>):</span><br><span class="line">        movie_urls = index_pages(i)</span><br><span class="line">        <span class="keyword">for</span> movie_url <span class="keyword">in</span> movie_urls:</span><br><span class="line">            results = parse_pages(movie_url)</span><br></pre></td></tr></table></figure><p>详细看一下解析函数 <code>parse_pages()</code>，首先要对接收到的详情页 URL 发送请求，获取响应内容，然后再使用 Xpath 提取相关信息</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">parse_pages</span><span class="params">(url)</span>:</span></span><br><span class="line">    movie_pages = requests.get(url=url, headers=headers)</span><br><span class="line">    parse_movie = etree.HTML(movie_pages.text)</span><br></pre></td></tr></table></figure><hr><h2 id="【2x01】Xpath-解析排名、电影名、评分信息"><a href="#【2x01】Xpath-解析排名、电影名、评分信息" class="headerlink" title="【2x01】Xpath 解析排名、电影名、评分信息"></a><font color="#1BC3FB">【2x01】Xpath 解析排名、电影名、评分信息</font></h2><p>其中排名、电影名和评分信息是最容易匹配到的，直接使用 Xpath 语法就可以轻松解决：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 排名</span></span><br><span class="line">ranking = parse_movie.xpath(<span class="string">"//span[@class='top250-no']/text()"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 电影名</span></span><br><span class="line">name = parse_movie.xpath(<span class="string">"//h1/span[1]/text()"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 评分</span></span><br><span class="line">score = parse_movie.xpath(<span class="string">"//div[@class='rating_self clearfix']/strong/text()"</span>)</span><br></pre></td></tr></table></figure><hr><h2 id="【2x02】Xpath-解析参评人数"><a href="#【2x02】Xpath-解析参评人数" class="headerlink" title="【2x02】Xpath 解析参评人数"></a><font color="#1BC3FB">【2x02】Xpath 解析参评人数</font></h2><p>接下来准备爬取有多少人参与了评价，分析一下页面：</p><fancybox><br><img src="https://cdn.jsdelivr.net/gh/TRHX/ImageHosting/ITRHX-PIC/A52/01.png" alt="01"><br></fancybox><p>如果只爬取这个 <code>&lt;span&gt;</code> 标签下的数字的话，没有任何提示信息，别人看了不知道是啥东西，所以把 <code>人评价</code> 这三个字也爬下来的话就比较好了，但是可以看到数字和文字不在同一个元素标签下，而且文字部分还有空格，要爬取的话就要把 <code>class=&quot;rating_people&quot;</code> 的 <code>a</code> 标签下所有的 <code>text</code> 提取出来，然后再去掉空格：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 参评人数</span></span><br><span class="line"><span class="comment"># 匹配a节点</span></span><br><span class="line">value = parse_movie.xpath(<span class="string">"//a[@class='rating_people']"</span>)</span><br><span class="line"><span class="comment"># 提取a节点下所有文本</span></span><br><span class="line">string = [value[<span class="number">0</span>].xpath(<span class="string">'string(.)'</span>)]</span><br><span class="line"><span class="comment"># 去除多余空格</span></span><br><span class="line">number = [a.strip() <span class="keyword">for</span> a <span class="keyword">in</span> string]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 此时 number = ['1617307人评价']</span></span><br></pre></td></tr></table></figure><p>这样做太麻烦了，我们可以直接提取数字，得到一个列表，然后使用另一个带有提示信息的列表，将两个列表的元素合并，组成一个新列表，这个新列表的元素就是提示信息+人数<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 参评人数</span></span><br><span class="line">value = parse_movie.xpath(<span class="string">"//span[@property='v:votes']/text()"</span>)</span><br><span class="line"><span class="comment"># 合并元素</span></span><br><span class="line">number = [<span class="string">" "</span>.join([<span class="string">'参评人数：'</span>] + value)]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 此时 number = ['参评人数：1617307']</span></span><br></pre></td></tr></table></figure></p><hr><h2 id="【2x03】正则表达式解析制片国家、语言"><a href="#【2x03】正则表达式解析制片国家、语言" class="headerlink" title="【2x03】正则表达式解析制片国家、语言"></a><font color="#1BC3FB">【2x03】正则表达式解析制片国家、语言</font></h2><p>接下来尝试爬取制片国家/地区、语言等信息：</p><fancybox><br><img src="https://cdn.jsdelivr.net/gh/TRHX/ImageHosting/ITRHX-PIC/A52/02.png" alt="02"><br></fancybox><p>分析页面可以观察到，制片国家/地区和语言结构比较特殊，没有特别的 class 或者 id 属性，所包含的层次关系也太复杂，所以这里为了简便，直接采用正则表达式来匹配信息，就没有那么复杂了：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 制片国家/地区</span></span><br><span class="line">value = re.findall(<span class="string">'&lt;span class="pl"&gt;制片国家/地区:&lt;/span&gt;(.*?)&lt;br/&gt;'</span>, movie_pages.text)</span><br><span class="line">country = [<span class="string">" "</span>.join([<span class="string">'制片国家:'</span>] + value)]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 语言</span></span><br><span class="line">value = re.findall(<span class="string">'&lt;span class="pl"&gt;语言:&lt;/span&gt;(.*?)&lt;br/&gt;'</span>, movie_pages.text)</span><br><span class="line">language = [<span class="string">" "</span>.join([<span class="string">'语言:'</span>] + value)]</span><br></pre></td></tr></table></figure><hr><h1 id="【3x00】返回解析数据"><a href="#【3x00】返回解析数据" class="headerlink" title="【3x00】返回解析数据"></a><font color="#FF0000">【3x00】返回解析数据</font></h1><p>其他剩下的信息皆可利用以上方法进行提取，所有信息提取完毕，最后使用 <code>zip()</code> 函数，将所有提取的对象作为参数，将对象中对应的元素打包成一个个元组，然后返回由这些元组组成的列表</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">return</span> zip(ranking, name, score, number, types, country, language, date, time, other_name, director, screenwriter, performer, m_url, imdb_url)</span><br></pre></td></tr></table></figure><hr><h1 id="【4x00】数据储存模块"><a href="#【4x00】数据储存模块" class="headerlink" title="【4x00】数据储存模块"></a><font color="#FF0000">【4x00】数据储存模块</font></h1><p>定义一个数据保存函数 <code>save_results()</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">save_results</span><span class="params">(data)</span>:</span></span><br><span class="line">    <span class="keyword">with</span> open(<span class="string">'douban.csv'</span>, <span class="string">'a'</span>, encoding=<span class="string">"utf-8-sig"</span>) <span class="keyword">as</span> fp:</span><br><span class="line">        writer = csv.writer(fp)</span><br><span class="line">        writer.writerow(data)</span><br></pre></td></tr></table></figure><p>注意：编码方式要设置为 <code>utf-8-sig</code>，如果设置为 <code>utf-8</code>，则文件会乱码，不设置编码，则可能会报一下类似错误：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">UnicodeEncodeError: <span class="string">'gbk'</span> codec can<span class="string">'t encode character '</span>\ub3c4<span class="string">' in position 9: illegal multibyte sequence</span></span><br></pre></td></tr></table></figure><p>可以看到错误出现在 <code>\ub3c4</code> 上，将该 Unicode 编码转换为中文为 <code>도</code>，发现正是排名第 19 的电影：熔炉 도가니，因为标题有韩文，所以在储存为 CSV 文件时会报编码错误，而将编码设置为 <code>utf-8-sig</code> 就不会报错，具体原因参见：<a href="https://www.jianshu.com/p/d9b25fb0a098" target="_blank" rel="noopener">《Python 中文日文汉字乱码处理utf-8-sig》</a></p><p>接下来是保存电影的海报到本地：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 保存电影海报</span></span><br><span class="line">poster = parse_movie.xpath(<span class="string">"//div[@id='mainpic']/a/img/@src"</span>)</span><br><span class="line">response = requests.get(poster[<span class="number">0</span>])</span><br><span class="line">name2 = re.sub(<span class="string">r'[A-Za-z\:\s]'</span>, <span class="string">''</span>, name[<span class="number">0</span>])</span><br><span class="line">poster_name = str(ranking[<span class="number">0</span>]) + <span class="string">' - '</span> + name2 + <span class="string">'.jpg'</span></span><br><span class="line">dir_name = <span class="string">'douban_poster'</span></span><br><span class="line"><span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(dir_name):</span><br><span class="line">    os.mkdir(dir_name)</span><br><span class="line">poster_path = dir_name + <span class="string">'/'</span> + poster_name</span><br><span class="line"><span class="keyword">with</span> open(poster_path, <span class="string">"wb"</span>)<span class="keyword">as</span> f:</span><br><span class="line">    f.write(response.content)</span><br></pre></td></tr></table></figure><p>解析电影详情页，使用 Xpath 提取海报的 URL，向该 URL 发送请求</p><p>图片以 <code>排名+电影名.jpg</code> 的方式命名，但是由于提取的电影名部分含有特殊字符，比如排名第 10 的电影：忠犬八公的故事 Hachi: A Dog’s Tale，其中有个冒号，而 Windows 文件命名是不能包含这些字符的，所以我们直接去除电影名包含的英文字符、空白字符、特殊字符，只留下中文，代码实现： <code>name2 = re.sub(r&#39;[A-Za-z\:\s]&#39;, &#39;&#39;, name[0])</code></p><p>定义一个文件夹名称 <code>douban_poster</code>，利用 <code>os</code> 模块判断当前是否存在该文件夹，若不存在就创建一个</p><p>最后以二进制形式保存海报到当前目录的 douban_poster 文件夹下</p><hr><h1 id="【5x00】程序不足的地方"><a href="#【5x00】程序不足的地方" class="headerlink" title="【5x00】程序不足的地方"></a><font color="#FF0000">【5x00】程序不足的地方</font></h1><p>程序不足的地方：豆瓣电影有反爬机制，当程序爬取到大约 150 条数据的时候，IP 就会被封掉，第二天 IP 才会解封，可以考虑综合使用多个代理、多个 User-Agent、随机时间暂停等方法进行爬取</p><hr><h1 id="【6x00】完整代码"><a href="#【6x00】完整代码" class="headerlink" title="【6x00】完整代码"></a><font color="#FF0000">【6x00】完整代码</font></h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">from</span> lxml <span class="keyword">import</span> etree</span><br><span class="line"><span class="keyword">import</span> csv</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line">headers = &#123;<span class="string">'User-Agent'</span>: <span class="string">'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/75.0.3770.142 Safari/537.36'</span>&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index_pages</span><span class="params">(number)</span>:</span></span><br><span class="line">    url = <span class="string">'https://movie.douban.com/top250?start=%s&amp;filter='</span> % number</span><br><span class="line">    index_response = requests.get(url=url, headers=headers)</span><br><span class="line">    tree = etree.HTML(index_response.text)</span><br><span class="line">    m_urls = tree.xpath(<span class="string">"//li/div/div/a/@href"</span>)</span><br><span class="line">    <span class="keyword">return</span> m_urls</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">parse_pages</span><span class="params">(url)</span>:</span></span><br><span class="line">    movie_pages = requests.get(url=url, headers=headers)</span><br><span class="line">    parse_movie = etree.HTML(movie_pages.text)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 排名</span></span><br><span class="line">    ranking = parse_movie.xpath(<span class="string">"//span[@class='top250-no']/text()"</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 电影名</span></span><br><span class="line">    name = parse_movie.xpath(<span class="string">"//h1/span[1]/text()"</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 评分</span></span><br><span class="line">    score = parse_movie.xpath(<span class="string">"//div[@class='rating_self clearfix']/strong/text()"</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 参评人数</span></span><br><span class="line">    value = parse_movie.xpath(<span class="string">"//span[@property='v:votes']/text()"</span>)</span><br><span class="line">    number = [<span class="string">" "</span>.join([<span class="string">'参评人数：'</span>] + value)]</span><br><span class="line">    <span class="comment"># value = parse_movie.xpath("//a[@class='rating_people']")</span></span><br><span class="line">    <span class="comment"># string = [value[0].xpath('string(.)')]</span></span><br><span class="line">    <span class="comment"># number = [a.strip() for a in string]</span></span><br><span class="line">    <span class="comment"># print(number)</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 类型</span></span><br><span class="line">    value = parse_movie.xpath(<span class="string">"//span[@property='v:genre']/text()"</span>)</span><br><span class="line">    types = [<span class="string">" "</span>.join([<span class="string">'类型：'</span>] + value)]</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 制片国家/地区</span></span><br><span class="line">    value = re.findall(<span class="string">'&lt;span class="pl"&gt;制片国家/地区:&lt;/span&gt;(.*?)&lt;br/&gt;'</span>, movie_pages.text)</span><br><span class="line">    country = [<span class="string">" "</span>.join([<span class="string">'制片国家:'</span>] + value)]</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 语言</span></span><br><span class="line">    value = re.findall(<span class="string">'&lt;span class="pl"&gt;语言:&lt;/span&gt;(.*?)&lt;br/&gt;'</span>, movie_pages.text)</span><br><span class="line">    language = [<span class="string">" "</span>.join([<span class="string">'语言:'</span>] + value)]</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 上映时期</span></span><br><span class="line">    value = parse_movie.xpath(<span class="string">"//span[@property='v:initialReleaseDate']/text()"</span>)</span><br><span class="line">    date = [<span class="string">" "</span>.join([<span class="string">'上映日期：'</span>] + value)]</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 片长</span></span><br><span class="line">    value = parse_movie.xpath(<span class="string">"//span[@property='v:runtime']/text()"</span>)</span><br><span class="line">    time = [<span class="string">" "</span>.join([<span class="string">'片长：'</span>] + value)]</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 又名</span></span><br><span class="line">    value = re.findall(<span class="string">'&lt;span class="pl"&gt;又名:&lt;/span&gt;(.*?)&lt;br/&gt;'</span>, movie_pages.text)</span><br><span class="line">    other_name = [<span class="string">" "</span>.join([<span class="string">'又名:'</span>] + value)]</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 导演</span></span><br><span class="line">    value = parse_movie.xpath(<span class="string">"//div[@id='info']/span[1]/span[@class='attrs']/a/text()"</span>)</span><br><span class="line">    director = [<span class="string">" "</span>.join([<span class="string">'导演:'</span>] + value)]</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 编剧</span></span><br><span class="line">    value = parse_movie.xpath(<span class="string">"//div[@id='info']/span[2]/span[@class='attrs']/a/text()"</span>)</span><br><span class="line">    screenwriter = [<span class="string">" "</span>.join([<span class="string">'编剧:'</span>] + value)]</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 主演</span></span><br><span class="line">    value = parse_movie.xpath(<span class="string">"//div[@id='info']/span[3]"</span>)</span><br><span class="line">    performer = [value[<span class="number">0</span>].xpath(<span class="string">'string(.)'</span>)]</span><br><span class="line"></span><br><span class="line">    <span class="comment"># URL</span></span><br><span class="line">    m_url = [<span class="string">'豆瓣链接：'</span> + movie_url]</span><br><span class="line"></span><br><span class="line">    <span class="comment"># IMDb链接</span></span><br><span class="line">    value = parse_movie.xpath(<span class="string">"//div[@id='info']/a/@href"</span>)</span><br><span class="line">    imdb_url = [<span class="string">" "</span>.join([<span class="string">'IMDb链接：'</span>] + value)]</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 保存电影海报</span></span><br><span class="line">    poster = parse_movie.xpath(<span class="string">"//div[@id='mainpic']/a/img/@src"</span>)</span><br><span class="line">    response = requests.get(poster[<span class="number">0</span>])</span><br><span class="line">    name2 = re.sub(<span class="string">r'[A-Za-z\:\s]'</span>, <span class="string">''</span>, name[<span class="number">0</span>])</span><br><span class="line">    poster_name = str(ranking[<span class="number">0</span>]) + <span class="string">' - '</span> + name2 + <span class="string">'.jpg'</span></span><br><span class="line">    dir_name = <span class="string">'douban_poster'</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(dir_name):</span><br><span class="line">        os.mkdir(dir_name)</span><br><span class="line">    poster_path = dir_name + <span class="string">'/'</span> + poster_name</span><br><span class="line">    <span class="keyword">with</span> open(poster_path, <span class="string">"wb"</span>)<span class="keyword">as</span> f:</span><br><span class="line">        f.write(response.content)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> zip(ranking, name, score, number, types, country, language, date, time, other_name, director, screenwriter, performer, m_url, imdb_url)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">save_results</span><span class="params">(data)</span>:</span></span><br><span class="line">    <span class="keyword">with</span> open(<span class="string">'douban.csv'</span>, <span class="string">'a'</span>, encoding=<span class="string">"utf-8-sig"</span>) <span class="keyword">as</span> fp:</span><br><span class="line">        writer = csv.writer(fp)</span><br><span class="line">        writer.writerow(data)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    num = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>, <span class="number">250</span>, <span class="number">25</span>):</span><br><span class="line">        movie_urls = index_pages(i)</span><br><span class="line">        <span class="keyword">for</span> movie_url <span class="keyword">in</span> movie_urls:</span><br><span class="line">            results = parse_pages(movie_url)</span><br><span class="line">            <span class="keyword">for</span> result <span class="keyword">in</span> results:</span><br><span class="line">                num += <span class="number">1</span></span><br><span class="line">                save_results(result)</span><br><span class="line">                print(<span class="string">'第'</span> + str(num) + <span class="string">'条电影信息保存完毕！'</span>)</span><br><span class="line">                time.sleep(<span class="number">3</span>)</span><br></pre></td></tr></table></figure><hr><h1 id="【7x00】数据截图"><a href="#【7x00】数据截图" class="headerlink" title="【7x00】数据截图"></a><font color="#FF0000">【7x00】数据截图</font></h1><fancybox><br><img src="https://cdn.jsdelivr.net/gh/TRHX/ImageHosting/ITRHX-PIC/A52/03.png" alt="03"><br></fancybox><fancybox><br><img src="https://cdn.jsdelivr.net/gh/TRHX/ImageHosting/ITRHX-PIC/A52/04.png" alt="04"><br></fancybox>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;爬取时间：2019-09-27&lt;br&gt;爬取难度：★★☆☆☆☆&lt;br&gt;请求链接：&lt;a href=&quot;https://movie.douban.com/top250&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;豆瓣电影 Top 250&lt;/a&gt; 以及每部电影详情页&lt;br&gt;爬取目标：爬取榜单上每一部电影详情页的数据，保存为 CSV 文件；下载所有电影海报到本地&lt;br&gt;涉及知识：请求库 requests、解析库 lxml、Xpath 语法、正则表达式、CSV 和二进制数据储存、列表操作&lt;/p&gt;
&lt;hr&gt;
    
    </summary>
    
      <category term="Python3 学习笔记" scheme="https://www.itrhx.com/categories/Python3-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
      <category term="爬虫实战" scheme="https://www.itrhx.com/categories/Python3-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E7%88%AC%E8%99%AB%E5%AE%9E%E6%88%98/"/>
    
    
      <category term="爬虫" scheme="https://www.itrhx.com/tags/%E7%88%AC%E8%99%AB/"/>
    
      <category term="豆瓣电影" scheme="https://www.itrhx.com/tags/%E8%B1%86%E7%93%A3%E7%94%B5%E5%BD%B1/"/>
    
  </entry>
  
  <entry>
    <title>Python3 爬虫实战 — 猫眼电影TOP100</title>
    <link href="https://www.itrhx.com/2019/09/24/A51-pyspider-combat-maoyan/"/>
    <id>https://www.itrhx.com/2019/09/24/A51-pyspider-combat-maoyan/</id>
    <published>2019-09-24T11:31:56.965Z</published>
    <updated>2019-09-27T16:58:23.850Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>爬取时间：2019-09-24<br>爬取难度：★☆☆☆☆☆<br>请求链接：<a href="https://maoyan.com/board/4" target="_blank" rel="noopener">猫眼电影TOP100榜</a><br>爬取目标：猫眼 TOP100 的电影名称、排名、主演、上映时间、评分、封面图地址，数据保存为 CSV 文件<br>涉及知识：请求库 requests、解析库 lxml、Xpath 语法、CSV 文件储存</p><hr><a id="more"></a><p>观察猫眼电影TOP100榜，请求地址为：<a href="https://maoyan.com/board/4" target="_blank" rel="noopener">https://maoyan.com/board/4</a><br>每页展示10条电影信息，翻页观察 url 变化：<br>第一页：<a href="https://maoyan.com/board/4" target="_blank" rel="noopener">https://maoyan.com/board/4</a><br>第二页：<a href="https://maoyan.com/board/4?offset=10" target="_blank" rel="noopener">https://maoyan.com/board/4?offset=10</a><br>第三页：<a href="https://maoyan.com/board/4?offset=20" target="_blank" rel="noopener">https://maoyan.com/board/4?offset=20</a><br>一共有10页，利用一个 for 循环，从 0 到 100 每隔 10 取一个值拼接到 url，实现循环爬取每一页</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index_page</span><span class="params">(number)</span>:</span></span><br><span class="line">    url = <span class="string">'https://maoyan.com/board/4?offset=%s'</span> % number</span><br><span class="line">    response = requests.get(url=url, headers=headers)</span><br><span class="line">    <span class="keyword">return</span> response.text</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>, <span class="number">100</span>, <span class="number">10</span>):</span><br><span class="line">        index = index_page(i)</span><br></pre></td></tr></table></figure><p>定义一个页面解析函数 <code>parse_page()</code>，使用 lxml 解析库的 Xpath 方法依次提取电影排名（ranking）、电影名称（movie_name）、主演（performer）、上映时间（releasetime）、评分（score）、电影封面图 url（movie_img）</p><p>通过对主演部分的提取发现有多余的空格符和换行符，循环 performer 列表，使用 <code>strip()</code> 方法去除字符串头尾空格和换行符</p><p>电影评分分为整数部分和小数部分，依次提取两部分，循环遍历组成一个完整的评分</p><p>最后使用 <code>zip()</code> 函数，将所有提取的对象作为参数，将对象中对应的元素打包成一个个元组，然后返回由这些元组组成的列表</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">parse_page</span><span class="params">(content)</span>:</span></span><br><span class="line">    tree = etree.HTML(content)</span><br><span class="line">    <span class="comment"># 电影排名</span></span><br><span class="line">    ranking = tree.xpath(<span class="string">"//dd/i/text()"</span>)</span><br><span class="line">    <span class="comment"># 电影名称</span></span><br><span class="line">    movie_name = tree.xpath(<span class="string">'//p[@class="name"]/a/text()'</span>)</span><br><span class="line">    <span class="comment"># 主演</span></span><br><span class="line">    performer = tree.xpath(<span class="string">"//p[@class='star']/text()"</span>)</span><br><span class="line">    performer = [p.strip() <span class="keyword">for</span> p <span class="keyword">in</span> performer]</span><br><span class="line">    <span class="comment"># 上映时间</span></span><br><span class="line">    releasetime = tree.xpath(<span class="string">'//p[@class="releasetime"]/text()'</span>)</span><br><span class="line">    <span class="comment"># 评分</span></span><br><span class="line">    score1 = tree.xpath(<span class="string">'//p[@class="score"]/i[@class="integer"]/text()'</span>)</span><br><span class="line">    score2 = tree.xpath(<span class="string">'//p[@class="score"]/i[@class="fraction"]/text()'</span>)</span><br><span class="line">    score = [score1[i] + score2[i] <span class="keyword">for</span> i <span class="keyword">in</span> range(min(len(score1), len(score2)))]</span><br><span class="line">    <span class="comment"># 电影封面图</span></span><br><span class="line">    movie_img = tree.xpath(<span class="string">'//img[@class="board-img"]/@data-src'</span>)</span><br><span class="line">    <span class="keyword">return</span> zip(ranking, movie_name, performer, releasetime, score, movie_img)</span><br></pre></td></tr></table></figure><p>最后定义一个 <code>save_results()</code> 函数，将所有数据保存到 <code>maoyan.csv</code> 文件</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">save_results</span><span class="params">(result)</span>:</span></span><br><span class="line">    <span class="keyword">with</span> open(<span class="string">'maoyan.csv'</span>, <span class="string">'a'</span>) <span class="keyword">as</span> fp:</span><br><span class="line">        writer = csv.writer(fp)</span><br><span class="line">        writer.writerow(result)</span><br></pre></td></tr></table></figure><p>完整代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">from</span> lxml <span class="keyword">import</span> etree</span><br><span class="line"><span class="keyword">import</span> csv</span><br><span class="line"></span><br><span class="line">headers = &#123;</span><br><span class="line">    <span class="string">'User-Agent'</span>: <span class="string">'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/75.0.3770.142 Safari/537.36'</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index_page</span><span class="params">(number)</span>:</span></span><br><span class="line">    url = <span class="string">'https://maoyan.com/board/4?offset=%s'</span> % number</span><br><span class="line">    response = requests.get(url=url, headers=headers)</span><br><span class="line">    <span class="keyword">return</span> response.text</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">parse_page</span><span class="params">(content)</span>:</span></span><br><span class="line">    tree = etree.HTML(content)</span><br><span class="line">    <span class="comment"># 电影排名</span></span><br><span class="line">    ranking = tree.xpath(<span class="string">"//dd/i/text()"</span>)</span><br><span class="line">    <span class="comment"># 电影名称</span></span><br><span class="line">    movie_name = tree.xpath(<span class="string">'//p[@class="name"]/a/text()'</span>)</span><br><span class="line">    <span class="comment"># 主演</span></span><br><span class="line">    performer = tree.xpath(<span class="string">"//p[@class='star']/text()"</span>)</span><br><span class="line">    performer = [p.strip() <span class="keyword">for</span> p <span class="keyword">in</span> performer]</span><br><span class="line">    <span class="comment"># 上映时间</span></span><br><span class="line">    releasetime = tree.xpath(<span class="string">'//p[@class="releasetime"]/text()'</span>)</span><br><span class="line">    <span class="comment"># 评分</span></span><br><span class="line">    score1 = tree.xpath(<span class="string">'//p[@class="score"]/i[@class="integer"]/text()'</span>)</span><br><span class="line">    score2 = tree.xpath(<span class="string">'//p[@class="score"]/i[@class="fraction"]/text()'</span>)</span><br><span class="line">    score = [score1[i] + score2[i] <span class="keyword">for</span> i <span class="keyword">in</span> range(min(len(score1), len(score2)))]</span><br><span class="line">    <span class="comment"># 电影封面图</span></span><br><span class="line">    movie_img = tree.xpath(<span class="string">'//img[@class="board-img"]/@data-src'</span>)</span><br><span class="line">    <span class="keyword">return</span> zip(ranking, movie_name, performer, releasetime, score, movie_img)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">save_results</span><span class="params">(result)</span>:</span></span><br><span class="line">    <span class="keyword">with</span> open(<span class="string">'maoyan.csv'</span>, <span class="string">'a'</span>) <span class="keyword">as</span> fp:</span><br><span class="line">        writer = csv.writer(fp)</span><br><span class="line">        writer.writerow(result)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">print(<span class="string">'开始爬取数据...'</span>)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>, <span class="number">100</span>, <span class="number">10</span>):</span><br><span class="line">        index = index_page(i)</span><br><span class="line">        results = parse_page(index)</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> results:</span><br><span class="line">            save_results(i)</span><br><span class="line">print(<span class="string">'数据爬取完毕！！'</span>)</span><br></pre></td></tr></table></figure><p>爬取到的数据（maoyan.csv 文件）：</p><fancybox><br><img src="https://cdn.jsdelivr.net/gh/TRHX/ImageHosting/ITRHX-PIC/A51/01.png" alt="01"><br></fancybox>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;爬取时间：2019-09-24&lt;br&gt;爬取难度：★☆☆☆☆☆&lt;br&gt;请求链接：&lt;a href=&quot;https://maoyan.com/board/4&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;猫眼电影TOP100榜&lt;/a&gt;&lt;br&gt;爬取目标：猫眼 TOP100 的电影名称、排名、主演、上映时间、评分、封面图地址，数据保存为 CSV 文件&lt;br&gt;涉及知识：请求库 requests、解析库 lxml、Xpath 语法、CSV 文件储存&lt;/p&gt;
&lt;hr&gt;
    
    </summary>
    
      <category term="Python3 学习笔记" scheme="https://www.itrhx.com/categories/Python3-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
      <category term="爬虫实战" scheme="https://www.itrhx.com/categories/Python3-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E7%88%AC%E8%99%AB%E5%AE%9E%E6%88%98/"/>
    
    
      <category term="爬虫" scheme="https://www.itrhx.com/tags/%E7%88%AC%E8%99%AB/"/>
    
      <category term="猫眼电影" scheme="https://www.itrhx.com/tags/%E7%8C%AB%E7%9C%BC%E7%94%B5%E5%BD%B1/"/>
    
  </entry>
  
  <entry>
    <title>Python3 爬虫学习笔记 C18</title>
    <link href="https://www.itrhx.com/2019/09/21/A50-Python3-spider-C18/"/>
    <id>https://www.itrhx.com/2019/09/21/A50-Python3-spider-C18/</id>
    <published>2019-09-21T03:59:30.358Z</published>
    <updated>2019-09-24T12:41:19.337Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><blockquote><center><font color="#1BC3FB" size="4">Python3 爬虫学习笔记第十八章 —— 【爬虫框架 pyspider — 深入理解】</font></center></blockquote><a id="more"></a><hr><h1 id="【18-1】启动参数"><a href="#【18-1】启动参数" class="headerlink" title="【18.1】启动参数"></a><font color="#ff0000">【18.1】启动参数</font></h1><p>常用启动命令：<code>pyspider all</code>，完整命令结构为：<code>pyspider [OPTIONS] COMMAND [ARGS]</code>，OPTIONS 为可选参数，包含以下参数：</p><ul><li><font color="#ff0000"><strong>-c, –config FILENAME</strong></font>：指定配置文件名称</li><li><font color="#ff0000"><strong>–logging-config TEXT</strong></font>：日志配置文件名称，默认: pyspider/pyspider/logging.conf</li><li><font color="#ff0000"><strong>–debug</strong></font>：开启调试模式</li><li><font color="#ff0000"><strong>–queue-maxsize INTEGER</strong></font>：队列的最大长度</li><li><font color="#ff0000"><strong>–taskdb TEXT</strong></font>：taskdb 的数据库连接字符串，默认: sqlite</li><li><font color="#ff0000"><strong>–projectdb TEXT</strong></font>：projectdb 的数据库连接字符串，默认: sqlite</li><li><font color="#ff0000"><strong>–resultdb TEXT</strong></font>：resultdb 的数据库连接字符串，默认: sqlite</li><li><font color="#ff0000"><strong>–message-queue TEXT</strong></font>：消息队列连接字符串，默认: multiprocessing.Queue</li><li><font color="#ff0000"><strong>–phantomjs-proxy TEXT</strong></font>：PhantomJS 使用的代理，ip:port 的形式</li><li><font color="#ff0000"><strong>–data-path TEXT</strong></font>：数据库存放的路径</li><li><font color="#ff0000"><strong>–add-sys-path / –not-add-sys-path</strong></font>：将当前工作目录添加到python lib搜索路径</li><li><font color="#ff0000"><strong>–version</strong></font>：显示 pyspider 的版本信息</li><li><font color="#ff0000"><strong>–help</strong></font>：显示帮助信息</li></ul><p>配置文件为一个 JSON 文件，一般为 config.json 文件，常用配置如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="string">"taskdb"</span>: <span class="string">"mysql+taskdb://username:password@host:port/taskdb"</span>,</span><br><span class="line">  <span class="string">"projectdb"</span>: <span class="string">"mysql+projectdb://username:password@host:port/projectdb"</span>,</span><br><span class="line">  <span class="string">"resultdb"</span>: <span class="string">"mysql+resultdb://username:password@host:port/resultdb"</span>,</span><br><span class="line">  <span class="string">"message_queue"</span>: <span class="string">"amqp://username:password@host:port/%2F"</span>,</span><br><span class="line">  <span class="string">"webui"</span>: &#123;</span><br><span class="line">  <span class="string">"port"</span>: <span class="number">5000</span>,</span><br><span class="line">    <span class="string">"username"</span>: <span class="string">"some_name"</span>,</span><br><span class="line">    <span class="string">"password"</span>: <span class="string">"some_passwd"</span>,</span><br><span class="line">    <span class="string">"need-auth"</span>: true</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以设置对应的用户名，密码，端口等信息，使用命令 <code>pyspider -c config.json all</code> 即可运行</p><hr><h1 id="【18-2】运行单个组件"><a href="#【18-2】运行单个组件" class="headerlink" title="【18.2】运行单个组件"></a><font color="#ff0000">【18.2】运行单个组件</font></h1><p>pyspider 的架构主要分为 Scheduler（调度器）、Fetcher（抓取器）、Processer（处理器）三个部分，都可以单独运行，基本命令： <code>pyspider [component_name] [options]</code></p><hr><h2 id="【18-2-1】运行-Scheduler"><a href="#【18-2-1】运行-Scheduler" class="headerlink" title="【18.2.1】运行 Scheduler"></a><font color="#1BC3FB">【18.2.1】运行 Scheduler</font></h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pyspider scheduler [OPTIONS]</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">Options:</span><br><span class="line">  --xmlrpc /--no-xmlrpc</span><br><span class="line">  --xmlrpc-host TEXT</span><br><span class="line">  --xmlrpc-port INTEGER</span><br><span class="line">  --inqueue-limit INTEGER  任务队列的最大长度，如果满了则新的任务会被忽略</span><br><span class="line">  --delete-time INTEGER    设置为 delete 标记之前的删除时间</span><br><span class="line">  --active-tasks INTEGER   当前活跃任务数量配置</span><br><span class="line">  --loop-limit INTEGER     单轮最多调度的任务数量</span><br><span class="line">  --fail-pause-num INTEGER 上次失败时自动暂停项目暂停次数，任务失败，将<span class="number">0</span>设置为禁用</span><br><span class="line">  --scheduler-cls TEXT     Scheduler 使用的类</span><br><span class="line">  --threads TEXT           ThreadBaseScheduler 的线程号，默认值：<span class="number">4</span></span><br><span class="line">  --help                   显示帮助信息</span><br></pre></td></tr></table></figure><hr><h2 id="【18-2-2】运行-Fetcher"><a href="#【18-2-2】运行-Fetcher" class="headerlink" title="【18.2.2】运行 Fetcher"></a><font color="#1BC3FB">【18.2.2】运行 Fetcher</font></h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pyspider fetcher [OPTIONS]</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">Options:</span><br><span class="line">  --xmlrpc /--no-xmlrpc</span><br><span class="line">  --xmlrpc-host TEXT</span><br><span class="line">  --xmlrpc-port INTEGER</span><br><span class="line">  --poolsize INTEGER         同时请求的个数</span><br><span class="line">  --proxy TEXT               使用的代理</span><br><span class="line">  --user-agent TEXT          使用的 User-Agent</span><br><span class="line">  --timeout TEXT             超时时间</span><br><span class="line">  --phantomjs-endpoint TEXT  phantomjs 的端点，通过 pyspider 启动 phantomjs</span><br><span class="line">  --splash-endpoint TEXT     执行 splash 的端点：http://splash.readthedocs.io/en/stable/api.html execut</span><br><span class="line">  --fetcher-cls TEXT         Fetcher 使用的类</span><br><span class="line">  --help                     显示帮助信息</span><br></pre></td></tr></table></figure><hr><h2 id="【18-2-3】运行-Processer"><a href="#【18-2-3】运行-Processer" class="headerlink" title="【18.2.3】运行 Processer"></a><font color="#1BC3FB">【18.2.3】运行 Processer</font></h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pyspider processor [OPTIONS]</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Options:</span><br><span class="line">  --processor-cls TEXT  Processor 使用的类</span><br><span class="line">  --process-time-limit INTEGER    脚本处理时间限制</span><br><span class="line">  --help                          显示帮助信息</span><br></pre></td></tr></table></figure><hr><h2 id="【18-2-4】运行-WebUI"><a href="#【18-2-4】运行-WebUI" class="headerlink" title="【18.2.4】运行 WebUI"></a><font color="#1BC3FB">【18.2.4】运行 WebUI</font></h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pyspider webui [OPTIONS]</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">Options:</span><br><span class="line">  --host TEXT                   运行地址</span><br><span class="line">  --port INTEGER                运行端口</span><br><span class="line">  --cdn TEXT                    JS 和 CSS 的 CDN 服务器</span><br><span class="line">  --scheduler-rpc TEXT          Scheduler 的 xmlrpc 路径</span><br><span class="line">  --fetcher-rpc TEXT            Fetcher 的 xmlrpc 路径</span><br><span class="line">  --max-rate FLOAT              每个项目最大的 rate 值</span><br><span class="line">  --max-burst FLOAT             每个项目最大的 burst 值</span><br><span class="line">  --username TEXT               Auth 验证的用户名</span><br><span class="line">  --password TEXT               Auth 验证的密码</span><br><span class="line">  --need-auth                   是否需要验证</span><br><span class="line">  --webui-instance TEXT         运行时使用的 Flask 应用</span><br><span class="line">  --process-time-limit INTEGER  调试中的脚本处理时间限制</span><br><span class="line">  --help                        显示帮助信息</span><br></pre></td></tr></table></figure><hr><h1 id="【18-3】crawl-方法各参数"><a href="#【18-3】crawl-方法各参数" class="headerlink" title="【18.3】crawl() 方法各参数"></a><font color="#ff0000">【18.3】crawl() 方法各参数</font></h1><p>参数文档：<a href="http://docs.pyspider.org/en/latest/apis/self.crawl/" target="_blank" rel="noopener">http://docs.pyspider.org/en/latest/apis/self.crawl/</a></p><hr><ul><li><font color="#ff0000"><strong>url</strong></font>：爬取目标 URL，可以定义为单个 URL 字符串，也可以定义成 URL 列表</li></ul><hr><ul><li><font color="#ff0000"><strong>callback</strong></font>：回调函数，指定了该 URL 对应的响应内容用哪个方法来解析，示例：</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">on_start</span><span class="params">(self)</span>:</span></span><br><span class="line">  self.crawl(<span class="string">'http://www.itrhx.com/'</span>, callback=self.index_page)</span><br></pre></td></tr></table></figure><p>代码解释：指定 <code>callback</code> 为 <code>index_page</code>，代表爬取 <a href="http://www.itrhx.com/">http://www.itrhx.com/</a> 得到的响应会用 <code>index_page()</code> 方法来解析，而 <code>index_page()</code> 方法的第一个参数就是响应对象，如下所示：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index_page</span><span class="params">(self, response)</span>:</span></span><br><span class="line">  <span class="keyword">pass</span></span><br></pre></td></tr></table></figure><hr><ul><li><font color="#ff0000"><strong>age</strong></font>：任务的有效时间，如果某个任务在有效时间内且已经被执行，则它不会重复执行，有如下两种设置方法：</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">on_start</span><span class="params">(self)</span>:</span></span><br><span class="line">  self.crawl(<span class="string">'http://www.itrhx.com/'</span>, callback=self.callback, age=<span class="number">10</span>*<span class="number">24</span>*<span class="number">60</span>*<span class="number">60</span>)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@config(age=10 * 24 * 60 * 60)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">callback</span><span class="params">(self)</span>:</span></span><br><span class="line">    <span class="keyword">pass</span></span><br></pre></td></tr></table></figure><hr><ul><li><font color="#ff0000"><strong>priority</strong></font>：爬取任务的优先级，其值默认是 0，priority 的数值越大，对应的请求会越优先被调度，如下所示，<code>2.html</code> 页面将会优先爬取：</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index_page</span><span class="params">(self)</span>:</span></span><br><span class="line">  self.crawl(<span class="string">'http://www.itrhx.com/1.html'</span>, callback=self.index_page)</span><br><span class="line">  self.crawl(<span class="string">'http://www.itrhx.com/2.html'</span>, callback=self.detail_page, priority=<span class="number">1</span>)</span><br></pre></td></tr></table></figure><hr><ul><li><font color="#ff0000"><strong>exetime</strong></font>：设置定时任务，其值是时间戳，默认是 0，即代表立即执行，如下所示表示该任务会在 30 分钟之后执行：</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">on_start</span><span class="params">(self)</span>:</span></span><br><span class="line">  self.crawl(<span class="string">'http://www.itrhx.com/'</span>, callback=self.callback, exetime=time.time()+<span class="number">30</span>*<span class="number">60</span>)</span><br></pre></td></tr></table></figure><hr><ul><li><font color="#ff0000"><strong>retries</strong></font>：定义重试次数，其值默认是 3</li></ul><hr><ul><li><font color="#ff0000"><strong>itag</strong></font>：设置判定网页是否发生变化的节点值，在爬取时会判定次当前节点是否和上次爬取到的节点相同。如果节点相同，则证明页面没有更新，就不会重复爬取，如下所示：</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index_page</span><span class="params">(self, response)</span>:</span></span><br><span class="line">  <span class="keyword">for</span> item <span class="keyword">in</span> response.doc(<span class="string">'.item'</span>).items():</span><br><span class="line">      self.crawl(item.find(<span class="string">'a'</span>).attr.url, callback=self.detail_page, itag=item.find(<span class="string">'.update-time'</span>).text())</span><br></pre></td></tr></table></figure><p>代码解释：设置 <code>update-time</code> 这个节点的值为 itag，在下次爬取时就会首先检测这个值有没有发生变化，如果没有变化，则不再重复爬取，否则执行爬取</p><hr><ul><li><font color="#ff0000"><strong>auto_recrawl</strong></font>：开启时，爬取任务在过期后会重新执行，循环时间即定义的 age 时间长度，如下所示：</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">on_start</span><span class="params">(self)</span>:</span></span><br><span class="line">  self.crawl(<span class="string">'http://www.itrhx.com/'</span>, callback=self.callback, age=<span class="number">5</span>*<span class="number">60</span>*<span class="number">60</span>, auto_recrawl=<span class="keyword">True</span>)</span><br></pre></td></tr></table></figure><p>代码解释：定义 <code>age</code> 有效期为 5 小时，设置了 <code>auto_recrawl</code> 为 <code>True</code>，这样任务就会每 5 小时执行一次</p><hr><ul><li><font color="#ff0000"><strong>method</strong></font>：HTTP 请求方式，默认为 GET，如果想发起 POST 请求，可以将 method 设置为 POST</li></ul><hr><ul><li><font color="#ff0000"><strong>params</strong></font>：定义 GET 请求参数，如下所示表示两个等价的爬取任务：</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">on_start</span><span class="params">(self)</span>:</span></span><br><span class="line">  self.crawl(<span class="string">'http://httpbin.org/get'</span>, callback=self.callback, params=&#123;<span class="string">'a'</span>: <span class="number">123</span>, <span class="string">'b'</span>: <span class="string">'c'</span>&#125;)</span><br><span class="line">  self.crawl(<span class="string">'http://httpbin.org/get?a=123&amp;b=c'</span>, callback=self.callback)</span><br></pre></td></tr></table></figure><hr><ul><li><font color="#ff0000"><strong>data</strong></font>：POST 表单数据，当请求方式为 POST 时，我们可以通过此参数传递表单数据，如下所示：</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">on_start</span><span class="params">(self)</span>:</span></span><br><span class="line">  self.crawl(<span class="string">'http://httpbin.org/post'</span>, callback=self.callback, method=<span class="string">'POST'</span>, data=&#123;<span class="string">'a'</span>: <span class="number">123</span>, <span class="string">'b'</span>: <span class="string">'c'</span>&#125;)</span><br></pre></td></tr></table></figure><hr><ul><li><font color="#ff0000"><strong>files</strong></font>：上传的文件，需要指定文件名，如下所示：</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">on_start</span><span class="params">(self)</span>:</span></span><br><span class="line">  self.crawl(<span class="string">'http://httpbin.org/post'</span>, callback=self.callback, method=<span class="string">'POST'</span>, files=&#123;field: &#123;filename: <span class="string">'content'</span>&#125;&#125;)</span><br></pre></td></tr></table></figure><hr><ul><li><font color="#ff0000"><strong>user_agent</strong></font>：爬取使用的 User-Agent</li></ul><hr><ul><li><font color="#ff0000"><strong>headers</strong></font>：爬取时使用的 Headers，即 Request Headers</li></ul><hr><ul><li><font color="#ff0000"><strong>cookies</strong></font>：爬取时使用的 Cookies，为字典格式</li></ul><hr><ul><li><font color="#ff0000"><strong>connect_timeout</strong></font>：在初始化连接时的最长等待时间，默认为 20 秒</li></ul><hr><ul><li><font color="#ff0000"><strong>timeout</strong></font>：抓取网页时的最长等待时间，默认为 120 秒</li></ul><hr><ul><li><font color="#ff0000"><strong>allow_redirects</strong></font>：确定是否自动处理重定向，默认为 True</li></ul><hr><ul><li><font color="#ff0000"><strong>validate_cert</strong></font>：确定是否验证证书，此选项对 HTTPS 请求有效，默认为 True</li></ul><hr><ul><li><font color="#ff0000"><strong>proxy</strong></font>：爬取时使用的代理，支持用户名密码的配置，格式为 <code>username:password@hostname:port</code>，如下所示：</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">on_start</span><span class="params">(self)</span>:</span></span><br><span class="line">  self.crawl(<span class="string">'http://httpbin.org/get'</span>, callback=self.callback, proxy=<span class="string">'127.0.0.1:9743'</span>)</span><br></pre></td></tr></table></figure><p>也可以设置 <code>craw_config</code> 来实现全局配置，如下所示：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Handler</span><span class="params">(BaseHandler)</span>:</span></span><br><span class="line">  crawl_config = &#123;<span class="string">'proxy'</span>: <span class="string">'127.0.0.1:9743'</span>&#125;</span><br></pre></td></tr></table></figure><hr><ul><li><font color="#ff0000"><strong>fetch_type</strong></font>：开启 PhantomJS 渲染，如果遇到 JavaScript 渲染的页面，指定此字段即可实现 PhantomJS 的对接，pyspider 将会使用 PhantomJS 进行网页的抓取，如下所示：</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">on_start</span><span class="params">(self)</span>:</span></span><br><span class="line">  self.crawl(<span class="string">'https://www.taobao.com'</span>, callback=self.index_page, fetch_type=<span class="string">'js'</span>)</span><br></pre></td></tr></table></figure><hr><ul><li><font color="#ff0000"><strong>js_script</strong></font>：页面加载完毕后执行的 JavaScript 脚本，如下所示，页面加载成功后将执行页面混动的 JavaScript 代码，页面会下拉到最底部：</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">on_start</span><span class="params">(self)</span>:</span></span><br><span class="line">  self.crawl(<span class="string">'http://www.example.org/'</span>, callback=self.callback,</span><br><span class="line">             fetch_type=<span class="string">'js'</span>, js_script=<span class="string">'''</span></span><br><span class="line"><span class="string">             function() &#123;window.scrollTo(0,document.body.scrollHeight);</span></span><br><span class="line"><span class="string">                 return 123;</span></span><br><span class="line"><span class="string">             &#125;</span></span><br><span class="line"><span class="string">             '''</span>)</span><br></pre></td></tr></table></figure><hr><ul><li><font color="#ff0000"><strong>js_run_at</strong></font>：代表 JavaScript 脚本运行的位置，是在页面节点开头还是结尾，默认是结尾，即 <code>document-end</code></li></ul><hr><ul><li><font color="#ff0000"><strong>js_viewport_width/js_viewport_height</strong></font>：JavaScript 渲染页面时的窗口大小</li></ul><hr><ul><li><font color="#ff0000"><strong>load_images</strong></font>：在加载 JavaScript 页面时确定是否加载图片，默认为否</li></ul><hr><ul><li><font color="#ff0000"><strong>save</strong></font>：在不同的方法之间传递参数，如下所示：</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">on_start</span><span class="params">(self)</span>:</span></span><br><span class="line">  self.crawl(<span class="string">'http://www.example.org/'</span>, callback=self.callback,</span><br><span class="line">             save=&#123;<span class="string">'page'</span>: <span class="number">1</span>&#125;)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">callback</span><span class="params">(self, response)</span>:</span></span><br><span class="line">  <span class="keyword">return</span> response.save[<span class="string">'page'</span>]</span><br></pre></td></tr></table></figure><hr><ul><li><font color="#ff0000"><strong>cancel</strong></font>：取消任务，如果一个任务是 <code>ACTIVE</code> 状态的，则需要将 <code>force_update</code> 设置为 <code>True</code></li></ul><hr><ul><li><font color="#ff0000"><strong>force_update</strong></font>：即使任务处于 ACTIVE 状态，那也会强制更新状态</li></ul><hr><h1 id="【18-4】任务区分"><a href="#【18-4】任务区分" class="headerlink" title="【18.4】任务区分"></a><font color="#ff0000">【18.4】任务区分</font></h1><p>pyspider 判断两个任务是否是重复的是使用的是该任务对应的 URL 的 MD5 值作为任务的唯一 ID，如果 ID 相同，那么两个任务就会判定为相同，其中一个就不会爬取了</p><p>某些情况下，请求的链接是同一个，但是 POST 的参数不同，这时可以重写 <code>task_id()</code> 方法，利用 URL 和 POST 的参数来生成 ID，改变这个 ID 的计算方式来实现不同任务的区分：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">from</span> pyspider.libs.utils <span class="keyword">import</span> md5string</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_taskid</span><span class="params">(self, task)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> md5string(task[<span class="string">'url'</span>]+json.dumps(task[<span class="string">'fetch'</span>].get(<span class="string">'data'</span>, <span class="string">''</span>)))</span><br></pre></td></tr></table></figure><hr><h1 id="【18-5】全局配置"><a href="#【18-5】全局配置" class="headerlink" title="【18.5】全局配置"></a><font color="#ff0000">【18.5】全局配置</font></h1><p>pyspider 可以使用 <code>crawl_config</code> 来指定全局的配置，配置中的参数会和 <code>crawl()</code> 方法创建任务时的参数合并：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Handler</span><span class="params">(BaseHandler)</span>:</span></span><br><span class="line">    crawl_config = &#123;</span><br><span class="line">        <span class="string">'headers'</span>: &#123;<span class="string">'User-Agent'</span>: <span class="string">'GoogleBot'</span>,&#125;</span><br><span class="line">        <span class="string">'proxy'</span>: <span class="string">'127.0.0.1:9743'</span></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><hr><h1 id="【18-6】定时爬取"><a href="#【18-6】定时爬取" class="headerlink" title="【18.6】定时爬取"></a><font color="#ff0000">【18.6】定时爬取</font></h1><p>通过 <code>every</code> 属性来设置爬取的时间间隔，如下代码表示每天执行一次爬取：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@every(minutes=24 * 60)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">on_start</span><span class="params">(self)</span>:</span></span><br><span class="line">    <span class="keyword">for</span> url <span class="keyword">in</span> urllist:</span><br><span class="line">        self.crawl(url, callback=self.index_page)</span><br></pre></td></tr></table></figure><p>注意事项：如果设置了任务的有效时间（age 参数），因为在有效时间内爬取不会重复，所以要把有效时间设置得比重复时间更短，这样才可以实现定时爬取</p><p>错误举例：设定任务的过期时间为 5 天，而自动爬取的时间间隔为 1 天，当第二次尝试重新爬取的时候，pyspider 会监测到此任务尚未过期，便不会执行爬取：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@every(minutes=24 * 60)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">on_start</span><span class="params">(self)</span>:</span></span><br><span class="line">    self.crawl(<span class="string">'http://www.itrhx.com/'</span>, callback=self.index_page)</span><br><span class="line"></span><br><span class="line"><span class="meta">@config(age=5 * 24 * 60 * 60)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index_page</span><span class="params">(self)</span>:</span></span><br><span class="line">    <span class="keyword">pass</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;center&gt;&lt;font color=&quot;#1BC3FB&quot; size=&quot;4&quot;&gt;Python3 爬虫学习笔记第十八章 —— 【爬虫框架 pyspider — 深入理解】&lt;/font&gt;&lt;/center&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="Python3 学习笔记" scheme="https://www.itrhx.com/categories/Python3-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
      <category term="爬虫学习" scheme="https://www.itrhx.com/categories/Python3-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E7%88%AC%E8%99%AB%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="爬虫" scheme="https://www.itrhx.com/tags/%E7%88%AC%E8%99%AB/"/>
    
      <category term="pyspider" scheme="https://www.itrhx.com/tags/pyspider/"/>
    
  </entry>
  
  <entry>
    <title>Python3 爬虫学习笔记 C17</title>
    <link href="https://www.itrhx.com/2019/09/18/A49-Python3-spider-C17/"/>
    <id>https://www.itrhx.com/2019/09/18/A49-Python3-spider-C17/</id>
    <published>2019-09-18T06:18:23.904Z</published>
    <updated>2019-09-24T12:41:15.652Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><blockquote><center><font color="#1BC3FB" size="4">Python3 爬虫学习笔记第十七章 —— 【爬虫框架 pyspider — 基本使用】</font></center></blockquote><a id="more"></a><hr><h1 id="【17-1】初识-pyspider"><a href="#【17-1】初识-pyspider" class="headerlink" title="【17.1】初识 pyspider"></a><font color="#ff0000">【17.1】初识 pyspider</font></h1><p>pyspider 是由国人 Binux 编写的一个 Python 爬虫框架</p><ul><li>GitHub：<a href="https://github.com/binux/pyspider" target="_blank" rel="noopener">https://github.com/binux/pyspider</a> </li><li>官方文档（英文）：<a href="http://docs.pyspider.org/" target="_blank" rel="noopener">http://docs.pyspider.org/</a></li><li>非官方文档（中文）：<a href="http://book.crifan.com/books/python_spider_pyspider/website/" target="_blank" rel="noopener">http://book.crifan.com/books/python_spider_pyspider/website/</a></li><li>非官方文档（中文）：<a href="https://www.cntofu.com/book/156/index.md" target="_blank" rel="noopener">https://www.cntofu.com/book/156/index.md</a></li></ul><p>pyspider 特性：</p><ul><li>python 脚本控制，可以使用任何 html 解析包（内置 pyquery）</li><li>WEB 界面编写调试脚本，起停脚本，监控执行状态，查看活动历史，获取结果产出</li><li>支持 MySQL、MongoDB、Redis、SQLite、Elasticsearch、PostgreSQL</li><li>对接了 PhantomJS，支持抓取 JavaScript 的页面</li><li>组件可替换，支持单机和分布式部署，支持 Docker 部署</li><li>提供优先级控制、失败重试、定时抓取等功能</li></ul><p>Windows 系统安装 pyspider：</p><p>使用命令 <code>pip install pyspider</code> 安装，若报 PyCurl 相关错误，可访问 <a href="https://www.lfd.uci.edu/~gohlke/pythonlibs/#pycurl" target="_blank" rel="noopener">https://www.lfd.uci.edu/~gohlke/pythonlibs/#pycurl</a> 下载对应 wheel 文件并使用命令 <code>pip install whl文件名</code> 安装即可</p><p>如果要爬取 JavaScrip 渲染的页面，还要下载 PhantomJS，并将 PhantomJS 的路径配置到环境变量里，或者直接复制到 Python 安装目录的 Scripts 文件夹，需要用到数据库储存的话，同样要安装好相应的数据库</p><p>准备就绪后，使用 <code>pyspider all</code> 命令可启动 pyspider，浏览器打开：<a href="http://localhost:5000/" target="_blank" rel="noopener">http://localhost:5000/</a> 可以看到 pyspider 的 WebUI 管理界面</p><hr><h1 id="【17-2】使用-pyspider"><a href="#【17-2】使用-pyspider" class="headerlink" title="【17.2】使用 pyspider"></a><font color="#ff0000">【17.2】使用 pyspider</font></h1><hr><h2 id="【17-2-1】主界面"><a href="#【17-2-1】主界面" class="headerlink" title="【17.2.1】主界面"></a><font color="#1BC3FB">【17.2.1】主界面</font></h2><p>当成功创建了一个爬虫项目后，主界面如下所示：</p><fancybox><br><img src="https://cdn.jsdelivr.net/gh/TRHX/ImageHosting/ITRHX-PIC/A49/01.png" alt="01"><br></fancybox><ul><li><p><font color="#ff0000">Recent Active Tasks</font>：查看最近活动的任务，会跳转到一个页面有列表显示</p></li><li><p><font color="#ff0000">Create</font>：创建一个新的爬虫项目</p></li><li><p><font color="#ff0000">group</font>：定义项目的分组，以方便管理，若 group 设置为 delete，则该项目将会在24小时之后删除</p></li><li><p><font color="#ff0000">project name</font>：爬虫项目名称</p></li><li><p><font color="#ff0000">status</font>：项目状态，各状态如下：<br> <font color="#1BC3FB">TODO</font>：一个爬虫项目刚刚创建时的状态，此状态下可以编辑 Python 代码<br> <font color="#1BC3FB">STOP</font>：中止项目的运行<br> <font color="#1BC3FB">CHECKING</font>：当一个运行中的项目被编辑时项目状态会被自动设置成此状态并中止运行<br> <font color="#1BC3FB">DEBUG</font>：会运行爬虫，顾名思义找 BUG，一般来说用于调试阶段<br> <font color="#1BC3FB">RUNNING</font>：运行爬虫项目<br> <font color="#1BC3FB">PAUSED</font>：项目暂停运行，默认没有这个状态，但是当你在运行过程中突然断网就会出现此状态</p></li><li><p><font color="#ff0000">rate/burst</font>：当前的爬取速率，rate 代表 1 秒发出多少个请求，burst 相当于流量控制中的令牌桶算法的令牌数，rate 和 burst 设置的越大，爬取速率越快，速率的设定需要考虑本机性能和爬取过快被封的问题</p></li><li><p><font color="#ff0000">avg time</font>：任务平均时间</p></li><li><p><font color="#ff0000">process</font>：5m、1h、1d 分别指的是最近 5 分、1 小时、1 天内的请求情况，all 代表所有的请求情况，请求由不同颜色表示，蓝色的代表等待被执行的请求，绿色的代表成功的请求，黄色的代表请求失败后等待重试的请求，红色的代表失败次数过多而被忽略的请求</p></li><li><p><font color="#ff0000">actions</font>：对爬虫项目的操作，各操作如下：<br> <font color="#1BC3FB">Run</font>：立即执行任务，需要 status 为 RUNNING 或者 DEBUG 状态；假如在配置的调度执行时间内已经执行过，再点 run 是无效的，需要删除 task.db 里的数据才行<br> <font color="#1BC3FB">Active Tasks</font>：查看当前爬虫项目的活动任务<br> <font color="#1BC3FB">Results</font>：查看项目运行结果</p></li></ul><hr><h2 id="【17-2-2】项目界面"><a href="#【17-2-2】项目界面" class="headerlink" title="【17.2.2】项目界面"></a><font color="#1BC3FB">【17.2.2】项目界面</font></h2><p>创建一个爬虫项目，界面如下所示：</p><fancybox><br><img src="https://cdn.jsdelivr.net/gh/TRHX/ImageHosting/ITRHX-PIC/A49/02.png" alt="02"><br></fancybox><ul><li><font color="#ff0000">创建项目</font>：点击 Create 即可新建一个爬虫项目</li><li><font color="#ff0000">Project Name</font>：爬虫项目名称</li><li><font color="#ff0000">Start URL(s)</font> ：爬虫入口地址，选填，可在项目中更改</li></ul><p>项目创建完成进入调试界面：</p><fancybox><br><img src="https://cdn.jsdelivr.net/gh/TRHX/ImageHosting/ITRHX-PIC/A49/03.png" alt="03"><br></fancybox><ul><li><p><font color="#ff0000">调试界面右边</font>：编写代码的区域</p></li><li><p><font color="#ff0000">调试界面左边</font>：调试的区域，用于执行代码，显示输出信息等用途</p></li><li><p><font color="#ff0000">run</font>：单步调试爬虫程序，点击就可运行当前任务</p></li><li><p><font color="#ff0000">&lt; &gt; 箭头</font>：上一步、下一步，用于调试过程中切换到上一步骤或者下一步骤</p></li><li><p><font color="#ff0000">save</font>：保存当前代码，当代码变更后只有保存了再运行才能得到最新结果</p></li><li><p><font color="#ff0000">enable css selector helper</font>： CSS 选择器辅助程序</p></li><li><p><font color="#ff0000">web</font>：页面预览</p></li><li><p><font color="#ff0000">html</font>：可以查看页面源代码</p></li><li><p><font color="#ff0000">follows</font>：表示爬取请求，点击可查看所有的请求</p></li></ul><p>在新建一个爬虫项目的时候，pyspider 已经自动生成了如下代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- encoding: utf-8 -*-</span></span><br><span class="line"><span class="comment"># Created on 2019-09-17 21:18:13</span></span><br><span class="line"><span class="comment"># Project: 2</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> pyspider.libs.base_handler <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Handler</span><span class="params">(BaseHandler)</span>:</span></span><br><span class="line">    crawl_config = &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">    @every(minutes=24 * 60)</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">on_start</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.crawl(<span class="string">'__START_URL__'</span>, callback=self.index_page)</span><br><span class="line"></span><br><span class="line"><span class="meta">    @config(age=10 * 24 * 60 * 60)</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">index_page</span><span class="params">(self, response)</span>:</span></span><br><span class="line">        <span class="keyword">for</span> each <span class="keyword">in</span> response.doc(<span class="string">'a[href^="http"]'</span>).items():</span><br><span class="line">            self.crawl(each.attr.href, callback=self.detail_page)</span><br><span class="line"></span><br><span class="line"><span class="meta">    @config(priority=2)</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">detail_page</span><span class="params">(self, response)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> &#123;</span><br><span class="line">            <span class="string">"url"</span>: response.url,</span><br><span class="line">            <span class="string">"title"</span>: response.doc(<span class="string">'title'</span>).text(),</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><ul><li><p><font color="#ff0000">class Handler()：</font>pyspider 爬虫的主类，可以在此处定义爬取、解析、存储的逻辑。整个爬虫的功能只需要一个 Handler 即可完成</p></li><li><p><font color="#ff0000">crawl_config 属性：</font>项目的所有爬取配置将会统一定义到这里，如定义 headers、设置代理等，配置之后全局生效</p></li><li><p><font color="#ff0000">on_start() 方法：</font>爬取入口，初始的爬取请求会在这里产生，该方法通过调用 <code>crawl()</code> 方法即可新建一个爬取请求，第一个参数是爬取的 URL，另一个参数 <code>callback</code> 指定了这个页面爬取成功后用哪个方法进行解析，默认指定为 <code>index_page()</code> 方法，即如果这个 URL 对应的页面爬取成功了，那 Response 将交给 <code>index_page()</code> 方法解析</p></li><li><p><font color="#ff0000">index_page() 方法：</font>接收 Response 参数，Response 对接了 pyquery。直接调用 <code>doc()</code> 方法传入相应的 CSS 选择器，就可以像 pyquery 一样解析此页面，代码中默认是 <code>a[href^=&quot;http&quot;]</code>，即解析页面的所有链接，然后将链接遍历，再次调用了 <code>crawl()</code> 方法生成了新的爬取请求，同时再指定了 callback 为 detail_page，表示这些页面爬取成功了就调用 <code>detail_page()</code> 方法解析。<code>index_page()</code> 实现了两个功能，一是将爬取的结果进行解析，二是生成新的爬取请求</p></li><li><p><font color="#ff0000">detail_page() 方法：</font>同样接收 Response 作为参数。<code>detail_page()</code> 抓取的就是详情页的信息，就不会生成新的请求，只对 Response 对象做解析，解析之后将结果以字典的形式返回。当然也可以进行后续处理，如将结果保存到数据库等操作</p></li></ul><p>PS：pyspider 默认的 web 预览页面窗口较小，可以找到 pyspider 文件夹有个 debug.min.css 文件（如：E:\Python\Lib\site-packages\pyspider\webui\static\debug.min.css），搜索 iframe，将原样式：<code>iframe{border-width:0;width:100%}</code> 改为 <code>iframe{border-width:0;width:100%;height:400px !important}</code> 即可，清除浏览器缓存后就会生效！</p><hr><h1 id="【17-3】使用-pyspider-爬取去哪儿网"><a href="#【17-3】使用-pyspider-爬取去哪儿网" class="headerlink" title="【17.3】使用 pyspider 爬取去哪儿网"></a><font color="#ff0000">【17.3】使用 pyspider 爬取去哪儿网</font></h1><p>爬取地址：<a href="http://travel.qunar.com/travelbook/list.htm" target="_blank" rel="noopener">http://travel.qunar.com/travelbook/list.htm</a><br>爬取目标：去哪儿网旅游攻略，发帖作者、标题、正文等</p><hr><h2 id="【17-3-1】爬取首页"><a href="#【17-3-1】爬取首页" class="headerlink" title="【17.3.1】爬取首页"></a><font color="#1BC3FB">【17.3.1】爬取首页</font></h2><p>创建一个名为 qunar 的爬虫项目，Start URL 设置为 <a href="http://travel.qunar.com/travelbook/list.htm" target="_blank" rel="noopener">http://travel.qunar.com/travelbook/list.htm</a> ，点击 run 出现一个爬取请求</p><fancybox><br><img src="https://cdn.jsdelivr.net/gh/TRHX/ImageHosting/ITRHX-PIC/A49/04.png" alt="04"><br></fancybox><p>左边调试区域出现以下代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="string">"process"</span>: &#123;</span><br><span class="line">    <span class="string">"callback"</span>: <span class="string">"on_start"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="string">"project"</span>: <span class="string">"qunar"</span>,</span><br><span class="line">  <span class="string">"taskid"</span>: <span class="string">"data:,on_start"</span>,</span><br><span class="line">  <span class="string">"url"</span>: <span class="string">"data:,on_start"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>callback 为 on_start，表示此时执行了 <code>on_start()</code> 方法。在 <code>on_start()</code> 方法中，利用 <code>crawl()</code> 方法即可生成一个爬取请求，点击 index_page 链接后面的箭头会出现许多新的爬取请求，即首页所包含的所有链接</p><fancybox><br><img src="https://cdn.jsdelivr.net/gh/TRHX/ImageHosting/ITRHX-PIC/A49/05.png" alt="05"><br></fancybox><p>此时左边调试区域代码变为：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="string">"fetch"</span>: &#123;&#125;,</span><br><span class="line">  <span class="string">"process"</span>: &#123;</span><br><span class="line">    <span class="string">"callback"</span>: <span class="string">"index_page"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="string">"project"</span>: <span class="string">"qunar"</span>,</span><br><span class="line">  <span class="string">"schedule"</span>: &#123;</span><br><span class="line">    <span class="string">"age"</span>: <span class="number">864000</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="string">"taskid"</span>: <span class="string">"73a789f99528a2bdc3ab83a13902962a"</span>,</span><br><span class="line">  <span class="string">"url"</span>: <span class="string">"http://travel.qunar.com/travelbook/list.htm"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>callback 变为了 index_page，表示此时执行了 <code>index_page()</code> 方法。传入 <code>index_page()</code> 方法的 response 参数为刚才生成的第一个爬取请求的 response 对象，然后调用 <code>doc()</code> 方法，传入提取所有 a 节点的 CSS 选择器，获取 a 节点的属性 href，实现了页面所有链接的提取，随后遍历所有链接，调用 <code>crawl()</code> 方法，把每个链接构造成新的爬取请求，可以看到 follows 新生成了 229 个爬取请求。点击 web 按钮可以直接预览当前页面，点击 html 按钮可以查看此页面源代码</p><hr><h2 id="【17-3-2】信息匹配"><a href="#【17-3-2】信息匹配" class="headerlink" title="【17.3.2】信息匹配"></a><font color="#1BC3FB">【17.3.2】信息匹配</font></h2><p>代码 <code>for each in response.doc(&#39;a[href^=&quot;http&quot;]&#39;).items():</code> 实现了对整个页面链接的获取，我们需要提取网页的攻略的标题，内容等信息，那么直接替换 <code>doc()</code> 方法里的匹配语句即可，pyspider 提供了非常方便的 CSS 选择器，点击 <code>enable css selector helper</code> 按钮后，选择要匹配的信息并点击，再点击箭头 add to editor 即可得到匹配语句</p><fancybox><br><img src="https://cdn.jsdelivr.net/gh/TRHX/ImageHosting/ITRHX-PIC/A49/06.png" alt="06"><br></fancybox><p>完成了 CSS 选择器的替换，点击 <code>save</code> 保存，再次点击 <code>run</code> 重新执行 <code>index_page()</code> 方法，可以看到 follows 变为了 10 个，即抓取到了 10 篇攻略</p><hr><h2 id="【17-3-3】抓取下一页数据"><a href="#【17-3-3】抓取下一页数据" class="headerlink" title="【17.3.3】抓取下一页数据"></a><font color="#1BC3FB">【17.3.3】抓取下一页数据</font></h2><p>每一页只有 10 篇攻略，想要爬取所有页面的攻略，必须要得到下一页的数据，优化 <code>index_page()</code> 方法：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@config(age=10 * 24 * 60 * 60)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index_page</span><span class="params">(self, response)</span>:</span></span><br><span class="line">    <span class="keyword">for</span> each <span class="keyword">in</span> response.doc(<span class="string">'li &gt; .tit &gt; a'</span>).items():</span><br><span class="line">        self.crawl(each.attr.href, callback=self.detail_page)</span><br><span class="line">    next = response.doc(<span class="string">'.next'</span>).attr.href</span><br><span class="line">    self.crawl(next, callback=self.index_page)</span><br></pre></td></tr></table></figure><p>匹配下一页按钮，获取下一页按钮的 URL 并赋值给 next，将该 URL 传给 <code>crawl()</code> 方法，指定回调函数为 <code>index_page()</code> 方法，这样会再次调用 <code>index_page()</code> 方法，提取下一页的攻略标题</p><hr><h2 id="【17-3-4】抓取JS渲染数据"><a href="#【17-3-4】抓取JS渲染数据" class="headerlink" title="【17.3.4】抓取JS渲染数据"></a><font color="#1BC3FB">【17.3.4】抓取JS渲染数据</font></h2><p>随便点击一个获取到的攻略，预览该页面，可以观察到头图一直在加载中，切换到 html 查看源代码页面，可以观察到没有 img 节点，那么此处就是后期经过 JavaScript 渲染后才出现的</p><fancybox><br><img src="https://cdn.jsdelivr.net/gh/TRHX/ImageHosting/ITRHX-PIC/A49/07.png" alt="07"><br></fancybox><p>针对 JavaScript 渲染页面，可以通过 PhantomJS 来实现，具体到 pyspider 中，只需要在 <code>index_page()</code> 的 <code>crawl()</code> 抓取方法中添加一个参数 <code>fetch_type</code> 即可：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@config(age=10 * 24 * 60 * 60)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index_page</span><span class="params">(self, response)</span>:</span></span><br><span class="line">    <span class="keyword">for</span> each <span class="keyword">in</span> response.doc(<span class="string">'li &gt; .tit &gt; a'</span>).items():</span><br><span class="line">        self.crawl(each.attr.href, callback=self.detail_page, fetch_type=<span class="string">'js'</span>)</span><br><span class="line">    next = response.doc(<span class="string">'.next'</span>).attr.href</span><br><span class="line">    self.crawl(next, callback=self.index_page)</span><br></pre></td></tr></table></figure><p>保存之后再次运行即可看到正常页面</p><hr><h2 id="【17-3-5】抓取所有数据"><a href="#【17-3-5】抓取所有数据" class="headerlink" title="【17.3.5】抓取所有数据"></a><font color="#1BC3FB">【17.3.5】抓取所有数据</font></h2><p>改写 <code>detail_page()</code> 方法，同样通过 CSS 选择器提取 URL、标题、日期、作者、正文、图片等信息：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@config(priority=2)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">detail_page</span><span class="params">(self, response)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        <span class="string">'url'</span>: response.url,</span><br><span class="line">        <span class="string">'title'</span>: response.doc(<span class="string">'#booktitle'</span>).text(),</span><br><span class="line">        <span class="string">'date'</span>: response.doc(<span class="string">'.when .data'</span>).text(),</span><br><span class="line">        <span class="string">'day'</span>: response.doc(<span class="string">'.howlong .data'</span>).text(),</span><br><span class="line">        <span class="string">'who'</span>: response.doc(<span class="string">'.who .data'</span>).text(),</span><br><span class="line">        <span class="string">'text'</span>: response.doc(<span class="string">'#b_panel_schedule'</span>).text(),</span><br><span class="line">        <span class="string">'image'</span>: response.doc(<span class="string">'.cover_img'</span>).attr.src</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><hr><h2 id="【17-3-6】启动爬虫项目"><a href="#【17-3-6】启动爬虫项目" class="headerlink" title="【17.3.6】启动爬虫项目"></a><font color="#1BC3FB">【17.3.6】启动爬虫项目</font></h2><p>该爬虫项目完整代码如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- encoding: utf-8 -*-</span></span><br><span class="line"><span class="comment"># Created on 2019-09-18 09:48:29</span></span><br><span class="line"><span class="comment"># Project: qunar</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> pyspider.libs.base_handler <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Handler</span><span class="params">(BaseHandler)</span>:</span></span><br><span class="line">    crawl_config = &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">    @every(minutes=24 * 60)</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">on_start</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.crawl(<span class="string">'http://travel.qunar.com/travelbook/list.htm'</span>, callback=self.index_page)</span><br><span class="line"></span><br><span class="line"><span class="meta">    @config(age=10 * 24 * 60 * 60)</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">index_page</span><span class="params">(self, response)</span>:</span></span><br><span class="line">        <span class="keyword">for</span> each <span class="keyword">in</span> response.doc(<span class="string">'li &gt; .tit &gt; a'</span>).items():</span><br><span class="line">            self.crawl(each.attr.href, callback=self.detail_page, fetch_type=<span class="string">'js'</span>)</span><br><span class="line">        next = response.doc(<span class="string">'.next'</span>).attr.href</span><br><span class="line">        self.crawl(next, callback=self.index_page)</span><br><span class="line"></span><br><span class="line"><span class="meta">    @config(priority=2)</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">detail_page</span><span class="params">(self, response)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> &#123;</span><br><span class="line">            <span class="string">'url'</span>: response.url,</span><br><span class="line">            <span class="string">'title'</span>: response.doc(<span class="string">'#booktitle'</span>).text(),</span><br><span class="line">            <span class="string">'date'</span>: response.doc(<span class="string">'.when .data'</span>).text(),</span><br><span class="line">            <span class="string">'day'</span>: response.doc(<span class="string">'.howlong .data'</span>).text(),</span><br><span class="line">            <span class="string">'who'</span>: response.doc(<span class="string">'.who .data'</span>).text(),</span><br><span class="line">            <span class="string">'text'</span>: response.doc(<span class="string">'#b_panel_schedule'</span>).text(),</span><br><span class="line">            <span class="string">'image'</span>: response.doc(<span class="string">'.cover_img'</span>).attr.src</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><p>保存代码后，回到主界面，将项目 status 修改为 RUNNING ，点击 actions 的 run 按钮即可启动爬虫</p><fancybox><br><img src="https://cdn.jsdelivr.net/gh/TRHX/ImageHosting/ITRHX-PIC/A49/08.png" alt="08"><br></fancybox><p>点击 Active Tasks，即可查看最近请求的详细状况：</p><fancybox><br><img src="https://cdn.jsdelivr.net/gh/TRHX/ImageHosting/ITRHX-PIC/A49/09.png" alt="09"><br></fancybox><p>点击 Results，即可查看所有的爬取结果：</p><fancybox><br><img src="https://cdn.jsdelivr.net/gh/TRHX/ImageHosting/ITRHX-PIC/A49/10.png" alt="10"><br></fancybox><p>另外，右上角还可以选择 JSON、CSV 格式</p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;center&gt;&lt;font color=&quot;#1BC3FB&quot; size=&quot;4&quot;&gt;Python3 爬虫学习笔记第十七章 —— 【爬虫框架 pyspider — 基本使用】&lt;/font&gt;&lt;/center&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="Python3 学习笔记" scheme="https://www.itrhx.com/categories/Python3-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
      <category term="爬虫学习" scheme="https://www.itrhx.com/categories/Python3-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E7%88%AC%E8%99%AB%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="爬虫" scheme="https://www.itrhx.com/tags/%E7%88%AC%E8%99%AB/"/>
    
      <category term="pyspider" scheme="https://www.itrhx.com/tags/pyspider/"/>
    
  </entry>
  
  <entry>
    <title>Hexo 博客提交百度、谷歌搜索引擎收录</title>
    <link href="https://www.itrhx.com/2019/09/17/A48-submit-search-engine-inclusion/"/>
    <id>https://www.itrhx.com/2019/09/17/A48-submit-search-engine-inclusion/</id>
    <published>2019-09-17T07:59:46.143Z</published>
    <updated>2019-09-17T08:11:15.999Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="●-写在前面（必看）"><a href="#●-写在前面（必看）" class="headerlink" title="● 写在前面（必看）"></a><font color="#ff0000">● 写在前面（必看）</font></h1><p>网站在没有提交搜索引擎收录之前，直接搜索你网站的内容是搜不到的，只有提交搜索引擎之后，搜索引擎才能收录你的站点，通过爬虫抓取你网站的东西，<font color="#ff0000">对于 hexo 博客来说，如果你是部署在 GitHub Pages，那么你是无法被百度收录的，因为 GitHub 禁止了百度爬虫</font>，最常见的解决办法是双线部署到 Coding Pages 和 GitHub Pages，因为百度爬虫可以爬取到 Coding 上的内容，从而实现百度收录，如果你的 hexo 博客还没有实现双线部署，请参考：<a href="https://blog.csdn.net/qq_36759224/article/details/100879609" target="_blank" rel="noopener">《Hexo 双线部署到 Coding Pages 和 GitHub Pages 并实现全站 HPPTS》</a>，另外百度收录的所需的时间较长，大约半个月左右才会看到效果！</p><hr><h1 id="●-查看网站是否被收录"><a href="#●-查看网站是否被收录" class="headerlink" title="● 查看网站是否被收录"></a><font color="#ff0000">● 查看网站是否被收录</font></h1><p>首先我们可以输入 <code>site:域名</code> 来查看域名是否被搜索引擎收录，如下图所示，表示没有收录：</p><fancybox><br><img src="https://cdn.jsdelivr.net/gh/TRHX/ImageHosting/ITRHX-PIC/A48/01.png" alt="01"><br></fancybox><hr><h1 id="●-百度资源平台添加网站"><a href="#●-百度资源平台添加网站" class="headerlink" title="● 百度资源平台添加网站"></a><font color="#ff0000">● 百度资源平台添加网站</font></h1><p>访问<a href="https://ziyuan.baidu.com/" target="_blank" rel="noopener">百度搜索资源平台官网</a>，注册或者登陆百度账号，依次选择【用户中心】-【站点管理】，添加你的网站，在添加站点时会让你选择协议头（http 或者 https），如果选择 https，它会验证你的站点，大约能在一天之内完成，我的网站已经实现了全站 https，因此选择了 https 协议，但是不知道为什么始终验证失败，实在是无解，只能选择 http 协议了，如果你的站点也实现了全站 https，也可以尝试一下</p><fancybox><br><img src="https://cdn.jsdelivr.net/gh/TRHX/ImageHosting/ITRHX-PIC/A48/02.png" alt="02"><br></fancybox><p>之后会让你验证网站所有权，提供三种验证方式：</p><ul><li>文件验证：下载给定的文件，将其放到本地<font color="#ff0000">主题目录 source 文件夹</font>，然后部署上去完成验证</li><li>HTML 标签验证：一般是给一个 meta 标签，放到首页 <code>&lt;head&gt;</code> 与 <code>&lt;/head&gt;</code> 标签之间即可完成验证</li><li>CNAME 验证：个人觉得这种方法最简单，去域名 DNS 添加一个 CNAME 记录即可完成验证</li></ul><fancybox><br><img src="https://cdn.jsdelivr.net/gh/TRHX/ImageHosting/ITRHX-PIC/A48/03.png" alt="03"><br></fancybox><fancybox><br><img src="https://cdn.jsdelivr.net/gh/TRHX/ImageHosting/ITRHX-PIC/A48/04.png" alt="04"><br></fancybox><hr><h1 id="●-提交百度搜索"><a href="#●-提交百度搜索" class="headerlink" title="● 提交百度搜索"></a><font color="#ff0000">● 提交百度搜索</font></h1><p>百度提供了自动提交和手动提交两种方式，其中自动提交又分为主动推送、自动推送和 sitemap 三种方式，以下是官方给出的解释：</p><ul><li><p>主动推送：最为快速的提交方式，推荐您将站点当天新产出链接立即通过此方式推送给百度，以保证新链接可以及时被百度收录</p></li><li><p>自动推送：是轻量级链接提交组件，将自动推送的 JS 代码放置在站点每一个页面源代码中，当页面被访问时，页面链接会自动推送给百度，有利于新页面更快被百度发现</p></li><li><p>sitemap：您可以定期将网站链接放到sitemap中，然后将sitemap提交给百度。百度会周期性的抓取检查您提交的sitemap，对其中的链接进行处理，但收录速度慢于主动推送</p></li><li><p>手动提交：如果您不想通过程序提交，那么可以采用此种方式，手动将链接提交给百度</p></li></ul><p>四种提交方式对比：</p><table><thead><tr><th style="text-align:center">方式</th><th style="text-align:center">主动推送</th><th style="text-align:center">自动推送</th><th style="text-align:center">Sitemap</th><th style="text-align:center">手动提交</th></tr></thead><tbody><tr><td style="text-align:center">速度</td><td style="text-align:center">最快</td><td style="text-align:center">——</td><td style="text-align:center">——</td><td style="text-align:center">——</td></tr><tr><td style="text-align:center">开发成本</td><td style="text-align:center">高</td><td style="text-align:center">低</td><td style="text-align:center">中</td><td style="text-align:center">不需开发</td></tr><tr><td style="text-align:center">可提交量</td><td style="text-align:center">低</td><td style="text-align:center">高</td><td style="text-align:center">高</td><td style="text-align:center">低</td></tr><tr><td style="text-align:center">是否建议提交历史连接</td><td style="text-align:center">否</td><td style="text-align:center">是</td><td style="text-align:center">是</td><td style="text-align:center">是</td></tr><tr><td style="text-align:center">和其他提交方法是否有冲突</td><td style="text-align:center">无</td><td style="text-align:center">无</td><td style="text-align:center">无</td><td style="text-align:center">无</td></tr></tbody></table><p><strong>个人推荐同时使用主动推送和 sitemap 方式</strong>，下面将逐一介绍这四种提交方式的具体实现方法</p><hr><h2 id="●-主动推送"><a href="#●-主动推送" class="headerlink" title="● 主动推送"></a><font color="#1BC3FB">● 主动推送</font></h2><p>在博客根目录安装插件 <code>npm install hexo-baidu-url-submit --save</code>，然后在根目录 <code>_config.yml</code> 文件里写入以下配置：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">baidu_url_submit:</span><br><span class="line">  count: 1               # 提交最新的多少个链接</span><br><span class="line">  host: www.itrhx.com    # 在百度站长平台中添加的域名</span><br><span class="line">  token: your_token      # 秘钥</span><br><span class="line">  path: baidu_urls.txt   # 文本文档的地址， 新链接会保存在此文本文档里</span><br></pre></td></tr></table></figure><p>其中的 <code>token</code> 可以在【链接提交】-【自动提交】-【主动推送】下面看到，接口调用地址最后面 <code>token=xxxxx</code> 即为你的 <code>token</code></p><fancybox><br><img src="https://cdn.jsdelivr.net/gh/TRHX/ImageHosting/ITRHX-PIC/A48/05.png" alt="05"><br></fancybox><p>同样是在根目录的 <code>_config.yml</code> 文件，大约第 17 行处，url 要改为在百度站长平台添加的域名，也就是你网站的首页地址：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># URL</span><br><span class="line">url: https://www.itrhx.com</span><br><span class="line">root: /</span><br><span class="line">permalink: :year/:month/:day/:title/</span><br></pre></td></tr></table></figure><p>最后，加入新的 deployer：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"># Deployment</span><br><span class="line">## Docs: https://hexo.io/docs/deployment.html</span><br><span class="line">deploy:</span><br><span class="line">- type: git</span><br><span class="line">  repository:</span><br><span class="line">    github: git@github.com:TRHX/TRHX.github.io.git  # 这是原来的 github 配置</span><br><span class="line">    coding: git@git.dev.tencent.com:TRHX/TRHX.git   # 这是原来的 coding 配置</span><br><span class="line">  branch: master</span><br><span class="line">- type: baidu_url_submitter                         # 这是新加的主动推送</span><br></pre></td></tr></table></figure><p>最后执行 <code>hexo g -d</code> 部署一遍即可实现主动推送，推送成功的标志是：在执行部署命令最后会显示类似如下代码：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#123;<span class="string">"remain"</span>:4999953,<span class="string">"success"</span>:47&#125;</span><br><span class="line">INFO  Deploy <span class="keyword">done</span>: baidu_url_submitter</span><br></pre></td></tr></table></figure><p>这表示有 47 个页面已经主动推送成功，remain 的意思是当天剩余的可推送 url 条数</p><p>主动推送相关原理介绍：</p><ul><li>新链接的产生：hexo generate 会产生一个文本文件，里面包含最新的链接</li><li>新链接的提交：hexo deploy 会从上述文件中读取链接，提交至百度搜索引擎</li></ul><p>该插件的 GitHub 地址：<a href="https://github.com/huiwang/hexo-baidu-url-submit" target="_blank" rel="noopener">https://github.com/huiwang/hexo-baidu-url-submit</a></p><hr><h2 id="●-自动推送"><a href="#●-自动推送" class="headerlink" title="● 自动推送"></a><font color="#1BC3FB">● 自动推送</font></h2><p>关于自动推送百度官网给出的解释是：自动推送是百度搜索资源平台为提高站点新增网页发现速度推出的工具，安装自动推送JS代码的网页，在页面被访问时，页面URL将立即被推送给百度</p><fancybox><br><img src="https://cdn.jsdelivr.net/gh/TRHX/ImageHosting/ITRHX-PIC/A48/06.png" alt="06"><br></fancybox><p>此时要注意，有些 hexo 主题集成了这项功能，比如 next 主题，在 <code>themes\next\layout_scripts\</code> 下有个 <code>baidu_push.swig</code> 文件，我们只需要把如下代码粘贴到该文件，然后在主题配置文件设置 <code>baidu_push: true</code> 即可</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&#123;% <span class="keyword">if</span> theme.baidu_push %&#125;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> bp = <span class="built_in">document</span>.createElement(<span class="string">'script'</span>);</span><br><span class="line">    <span class="keyword">var</span> curProtocol = <span class="built_in">window</span>.location.protocol.split(<span class="string">':'</span>)[<span class="number">0</span>];</span><br><span class="line">    <span class="keyword">if</span> (curProtocol === <span class="string">'https'</span>) &#123;</span><br><span class="line">        bp.src = <span class="string">'https://zz.bdstatic.com/linksubmit/push.js'</span>;        </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        bp.src = <span class="string">'http://push.zhanzhang.baidu.com/push.js'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">var</span> s = <span class="built_in">document</span>.getElementsByTagName(<span class="string">"script"</span>)[<span class="number">0</span>];</span><br><span class="line">    s.parentNode.insertBefore(bp, s);</span><br><span class="line">&#125;)();</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br><span class="line"><span class="regexp">&#123;% endif %&#125;</span></span><br></pre></td></tr></table></figure><p>然而大部分主题是没有集成这项功能的，对于大部分主题来说，我们可以把以下代码粘贴到 <code>head.ejs</code> 文件的 <code>&lt;head&gt;</code> 与 <code>&lt;/head&gt;</code> 标签之间即可，从而实现自动推送（比如我使用的是 <a href="https://xaoxuu.com/wiki/material-x/" target="_blank" rel="noopener">Material X</a> 主题，那么只需要把代码粘贴到 <code>\themes\material-x\layout\_partial\head.ejs</code> 中即可）</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> bp = <span class="built_in">document</span>.createElement(<span class="string">'script'</span>);</span><br><span class="line">    <span class="keyword">var</span> curProtocol = <span class="built_in">window</span>.location.protocol.split(<span class="string">':'</span>)[<span class="number">0</span>];</span><br><span class="line">    <span class="keyword">if</span> (curProtocol === <span class="string">'https'</span>) &#123;</span><br><span class="line">        bp.src = <span class="string">'https://zz.bdstatic.com/linksubmit/push.js'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        bp.src = <span class="string">'http://push.zhanzhang.baidu.com/push.js'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">var</span> s = <span class="built_in">document</span>.getElementsByTagName(<span class="string">"script"</span>)[<span class="number">0</span>];</span><br><span class="line">    s.parentNode.insertBefore(bp, s);</span><br><span class="line">&#125;)();</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure><hr><h2 id="●-sitemap"><a href="#●-sitemap" class="headerlink" title="● sitemap"></a><font color="#1BC3FB">● sitemap</font></h2><p>首先我们要使用以下命令生成一个网站地图：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-generator-sitemap --save     </span><br><span class="line">npm install hexo-generator-baidu-sitemap --save</span><br></pre></td></tr></table></figure><p>这里也注意一下，将根目录的 <code>_config.yml</code> 文件，大约第 17 行处，url 改为在百度站长平台添加的域名，也就是你网站的首页地址：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># URL</span><br><span class="line">url: https://www.itrhx.com</span><br><span class="line">root: /</span><br><span class="line">permalink: :year/:month/:day/:title/</span><br></pre></td></tr></table></figure><p>然后使用命令 <code>hexo g -d</code> 将网站部署上去，然后访问 <code>你的首页/sitemap.xml</code> 或者 <code>你的首页/baidusitemap.xml</code> 就可以看到网站地图了</p><p>比如我的是：<a href="https://www.itrhx.com/baidusitemap.xml">https://www.itrhx.com/baidusitemap.xml</a> 或者 <a href="https://www.itrhx.com/sitemap.xml">https://www.itrhx.com/sitemap.xml</a></p><p>其中 <code>sitemap.xml</code> 文件是搜索引擎通用的 sitemap 文件，<code>baidusitemap.xml</code> 是百度专用的 sitemap 文件</p><p>然后来到百度站长平台的 sitemap 提交页面，将你的 sitemap 地址提交即可，如果成功的话状态会显示为正常，初次提交要等几分钟，sitemap.xml 相比 baidusitemap.xml 来说等待时间也会更长，如果以后你博客有新的文章或其他页面，可以点击<strong>手动更新文件</strong>，更新一下新的 sitemap</p><fancybox><br><img src="https://cdn.jsdelivr.net/gh/TRHX/ImageHosting/ITRHX-PIC/A48/07.png" alt="07"><br></fancybox><hr><h2 id="●-手动提交"><a href="#●-手动提交" class="headerlink" title="● 手动提交"></a><font color="#1BC3FB">● 手动提交</font></h2><p>手动提交不需要其他额外操作，直接把需要收录的页面的 url 提交即可，这种方法效率较低，更新较慢，不推荐使用</p><fancybox><br><img src="https://cdn.jsdelivr.net/gh/TRHX/ImageHosting/ITRHX-PIC/A48/08.png" alt="08"><br></fancybox><hr><h1 id="●-提交谷歌搜索"><a href="#●-提交谷歌搜索" class="headerlink" title="● 提交谷歌搜索"></a><font color="#ff0000">● 提交谷歌搜索</font></h1><p>提交谷歌搜索引擎比较简单，在提交之前，我们依然可以使用 <code>site:域名</code> 查看网站是否被收录，我的网站搭建了有差不多一年了，之前也没提交过收录，不过谷歌爬虫的确是强大，即使没有提交过，现在也能看到有一百多条结果了：</p><fancybox><br><img src="https://cdn.jsdelivr.net/gh/TRHX/ImageHosting/ITRHX-PIC/A48/09.png" alt="09"><br></fancybox><p>接下来我们将网站提交谷歌搜索引擎搜索，进入<a href="https://www.google.com/webmasters/" target="_blank" rel="noopener">谷歌站长平台</a>，登录你的谷歌账号之后会让你验证网站所有权：</p><fancybox><br><img src="https://cdn.jsdelivr.net/gh/TRHX/ImageHosting/ITRHX-PIC/A48/10.png" alt="10"><br></fancybox><p>有两种验证方式，分别是网域和网址前缀，两种资源类型区别如下：</p><table><thead><tr><th></th><th style="text-align:left"><center>网址前缀资源</center></th><th style="text-align:left"><center>网域资源</center></th></tr></thead><tbody><tr><td>说明</td><td style="text-align:left">仅包含具有指定前缀（包括协议 http/https）的网址。如果希望资源匹配任何协议或子网域（http/https/www./m. 等），建议改为添加网域资源。</td><td style="text-align:left">包括所有子网域（m、www 等）和多种协议（http、https、ftp）的网域级资源。</td></tr><tr><td>验证</td><td style="text-align:left">多种类型</td><td style="text-align:left">仅 DNS 记录验证</td></tr><tr><td>示例</td><td style="text-align:left">资源 <a href="http://example.com/" target="_blank" rel="noopener">http://example.com/</a><br><br><font color="#ff0000">✔</font> <a href="http://example.com/dresses/1234" target="_blank" rel="noopener">http://example.com/dresses/1234</a><br><font color="#ff0000">X</font> <a href="https://example.com/dresses/1234" target="_blank" rel="noopener">https://example.com/dresses/1234</a><br><font color="#ff0000">X</font> <a href="http://www.example.com/dresses/1234" target="_blank" rel="noopener">http://www.example.com/dresses/1234</a></td><td style="text-align:left">资源 example.com<br><br><font color="#ff0000">✔</font> <a href="http://example.com/dresses/1234" target="_blank" rel="noopener">http://example.com/dresses/1234</a><br><font color="#ff0000">✔</font> <a href="https://example.com/dresses/1234" target="_blank" rel="noopener">https://example.com/dresses/1234</a><br><font color="#ff0000">✔</font> <a href="http://www.example.com/dresses/1234" target="_blank" rel="noopener">http://www.example.com/dresses/1234</a><br><font color="#ff0000">✔</font> <a href="http://support.m.example.com/dresses/1234" target="_blank" rel="noopener">http://support.m.example.com/dresses/1234</a></td></tr></tbody></table><p>由对比可知选择网域资源验证方式比较好，只需要一个域名就可以匹配到多种格式的 URL，之后会给你一个 TXT 的记录值，复制它到你域名 DNS 增加一个 TXT 记录，点击验证即可</p><fancybox><br><img src="https://cdn.jsdelivr.net/gh/TRHX/ImageHosting/ITRHX-PIC/A48/11.png" alt="11"><br></fancybox><p>提交谷歌收录比较简单，选择站点地图，将我们之前生成的 sitemap 提交就行了，过几分钟刷新一下看到成功字样表示提交成功！</p><fancybox><br><img src="https://cdn.jsdelivr.net/gh/TRHX/ImageHosting/ITRHX-PIC/A48/12.png" alt="12"><br></fancybox>]]></content>
    
    <summary type="html">
    
      网站 SEO 优化，Hexo 博客提交百度、谷歌搜索引擎收录
    
    </summary>
    
      <category term="Hexo" scheme="https://www.itrhx.com/categories/Hexo/"/>
    
    
      <category term="Hexo" scheme="https://www.itrhx.com/tags/Hexo/"/>
    
      <category term="SEO" scheme="https://www.itrhx.com/tags/SEO/"/>
    
  </entry>
  
  <entry>
    <title>Hexo 双线部署到 Coding Pages 和 GitHub Pages 并实现全站 HPPTS</title>
    <link href="https://www.itrhx.com/2019/09/16/A47-hexo-deployed-to-github-and-coding/"/>
    <id>https://www.itrhx.com/2019/09/16/A47-hexo-deployed-to-github-and-coding/</id>
    <published>2019-09-16T06:11:40.959Z</published>
    <updated>2019-09-19T07:24:46.575Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><blockquote><p>部署到 Coding Pages 的好处：国内访问速度更快，可以提交百度收录（GitHub 禁止了百度的爬取）</p></blockquote><blockquote><p>部署到 Coding Pages 的坏处：就今年来说，Coding 不太稳定，随时有宕机的可能，群里的朋友已经经历过几次了，不过相信以后会越来越稳定的</p></blockquote><blockquote><p>部署过程中常见的问题：无法实现全站 HTTPS，Coding 申请 SSL 证书失败，浏览器可能会提示不是安全链接</p></blockquote><blockquote><p>本文前提：你已经将 Hexo 成功部署到了 GitHub Pages，如果还没有，请参考：<a href="https://blog.csdn.net/qq_36759224/article/details/82121420" target="_blank" rel="noopener">《使用Github Pages和Hexo搭建自己的独立博客【超级详细的小白教程】》</a></p></blockquote><blockquote><p>本文将全面讲述如何成功双线部署到 Coding Pages 和 GitHub Pages 并实现全站 HPPTS，同时解决一些常见的问题！</p></blockquote><hr><h1 id="1-创建项目"><a href="#1-创建项目" class="headerlink" title="1.创建项目"></a><font color="#ff0000">1.创建项目</font></h1><p>进入 <a href="https://coding.net/" target="_blank" rel="noopener">Coding 官网</a>，点击个人版登陆，没有账号就注册一个并登录，由于 Coding 已经被腾讯收购了，所以登录就会来到腾讯云开发者平台，点击创建项目</p><fancybox><br><img src="https://cdn.jsdelivr.net/gh/TRHX/ImageHosting/ITRHX-PIC/A47/01.jpg" alt="01"><br></fancybox><p>项目名称建议和你的用户名一致，这样做的好处是：到时候可以直接通过 <code>user_name.coding.me</code> 访问你的博客，如果项目名与用户名不一致，则需要通过 <code>user_name.coding.me/project_name</code> 才能访问，项目描述可以随便写</p><fancybox><br><img src="https://cdn.jsdelivr.net/gh/TRHX/ImageHosting/ITRHX-PIC/A47/02.jpg" alt="02"><br></fancybox><hr><h1 id="2-配置公钥"><a href="#2-配置公钥" class="headerlink" title="2.配置公钥"></a><font color="#ff0000">2.配置公钥</font></h1><p>配置 SSH 公钥方法与 GitHub Pages 的方式差不多，点击你的头像，依次选择【个人设置】-【SSH公钥】-【新增公钥】</p><fancybox><br><img src="https://cdn.jsdelivr.net/gh/TRHX/ImageHosting/ITRHX-PIC/A47/03.jpg" alt="03"><br></fancybox><p>前面部署到 GitHub Pages 的时候就已经有了一对公钥，我们直接将该公钥粘贴进去就行，公钥名称可以随便写，选中永久有效选项</p><p>PS：公钥储存位置一般在 <font color="#ff0000">C:\Users\用户名\.ssh</font> 目录下的 <font color="#ff0000">id_rsa.pub</font> 文件里，用记事本打开复制其内容即可</p><fancybox><br><img src="https://cdn.jsdelivr.net/gh/TRHX/ImageHosting/ITRHX-PIC/A47/04.jpg" alt="04"><br></fancybox><p>添加公钥后，我们可以右键 <code>Get Bash</code>，输入以下命令来检查是否配置成功：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh -T git@git.coding.net</span><br></pre></td></tr></table></figure><p>若出现以下提示，则证明配置成功：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Coding 提示: Hello XXX, You<span class="string">'ve connected to Coding.net via SSH. This is a personal key.</span></span><br><span class="line"><span class="string">XXX，你好，你已经通过 SSH 协议认证 Coding.net 服务，这是一个个人公钥</span></span><br></pre></td></tr></table></figure><hr><h1 id="3-配置-config-yml"><a href="#3-配置-config-yml" class="headerlink" title="3.配置 _config.yml"></a><font color="#ff0000">3.配置 _config.yml</font></h1><p>进入你的项目，在右下角有选择连接方式，选择 SSH 方式（HTTPS 方式也可以，但是这种方式有时候可能连接不上，SSH 连接不容易出问题），一键复制，然后打开你本地博客根目录的 <code>_config.yml</code> 文件，找到 <code>deploy</code> 关键字，添加 coding 地址：<code>coding: git@git.dev.tencent.com:user_name/user_name.git</code>，也就是刚刚复制的 SSH 地址</p><fancybox><br><img src="https://cdn.jsdelivr.net/gh/TRHX/ImageHosting/ITRHX-PIC/A47/05.jpg" alt="05"><br></fancybox><fancybox><br><img src="https://cdn.jsdelivr.net/gh/TRHX/ImageHosting/ITRHX-PIC/A47/06.jpg" alt="06"><br></fancybox><p>添加完成后先执行命令 <code>hexo clean</code> 清理一下缓存，然后执行命令 <code>hexo g -d</code> 将博客双线部署到 Coding Pages 和 GitHub Pages，如下图所示表示部署成功：</p><fancybox><br><img src="https://cdn.jsdelivr.net/gh/TRHX/ImageHosting/ITRHX-PIC/A47/13.jpg" alt="13"><br></fancybox><h1 id="4-开启-Coding-Pages"><a href="#4-开启-Coding-Pages" class="headerlink" title="4.开启 Coding Pages"></a><font color="#ff0000">4.开启 Coding Pages</font></h1><p>进入你的项目，在代码栏下选择 Pages 服务，一键开启 Coding Pages，等待几秒后刷新网页即可看到已经开启的 Coding Pages，到目前为止，你就可以通过 xxxx.coding.me（比如我的是 trhx.coding.me）访问你的 Coding Pages 页面了</p><fancybox><br><img src="https://cdn.jsdelivr.net/gh/TRHX/ImageHosting/ITRHX-PIC/A47/07.jpg" alt="07"><br></fancybox><fancybox><br><img src="https://cdn.jsdelivr.net/gh/TRHX/ImageHosting/ITRHX-PIC/A47/08.jpg" alt="08"><br></fancybox><h1 id="5-绑定域名并开启-HPPTS"><a href="#5-绑定域名并开启-HPPTS" class="headerlink" title="5.绑定域名并开启 HPPTS"></a><font color="#ff0000">5.绑定域名并开启 HPPTS</font></h1><p>首先在你的域名 DNS 设置中添加一条 CNAME 记录指向 xxxx.coding.me，解析路线选择默认，将 GitHub 的解析路线改为境外，这样境外访问就会走 GitHub，境内就会走 Coding，也有人说阿里云是智能解析，自动分配路线，如果解析路线都是默认，境外访问同样会智能选择走 GitHub，境内走 Coding，我没有验证过，有兴趣的可以自己试试，我的解析如下图所示：</p><fancybox><br><img src="https://cdn.jsdelivr.net/gh/TRHX/ImageHosting/ITRHX-PIC/A47/09.jpg" alt="09"><br></fancybox><p>然后点击静态 Pages 应用右上角的设置，进入设置页面，这里要注意，如果你之前已经部署到了 GitHub Pages 并开启了 HTTPS，那么直接在设置页面绑定你自己的域名，SSL/TLS 安全证书就会显示申请错误，如下图所示，没有申请到 SSL 证书，当你访问你的网站时，浏览器就会提示不是安全连接</p><fancybox><br><img src="https://cdn.jsdelivr.net/gh/TRHX/ImageHosting/ITRHX-PIC/A47/10.jpg" alt="10"><br></fancybox><p>申请错误原因是：在验证域名所有权时会定位到 Github Pages 的主机上导致 SSL 证书申请失败</p><p>正确的做法是：<font color="#ff0000">先去域名 DNS 把 GitHub 的解析暂停掉，然后再重新申请 SSL 证书</font>，大约十秒左右就能申请成功，然后开启强制 HTTPS 访问</p><p>这里也建议同时绑定有 www 前缀后没有 www 前缀的，然后在域名 DNS 添加一个 CNAME 或者 A 记录，记录值为 @，这样不管用户是否输入 www 前缀都可以访问了</p><p>在博客资源引用的时候也要注意所有资源的 URL 必须是以 https:// 开头，不然浏览器依旧会提示不安全！</p><fancybox><br><img src="https://cdn.jsdelivr.net/gh/TRHX/ImageHosting/ITRHX-PIC/A47/11.jpg" alt="11"><br></fancybox><p>至此，我们的 Hexo 博客就成功双线部署到 Coding Pages 和 GitHub Pages 了，并且也实现了全站 HPPTS，最后来一张 GitHub Pages 和 Coding Pages 在国内的速度对比图，可以明显看到速度的提升</p><fancybox><br><img src="https://cdn.jsdelivr.net/gh/TRHX/ImageHosting/ITRHX-PIC/A47/12.jpg" alt="12"><br></fancybox>]]></content>
    
    <summary type="html">
    
      Hexo 双线部署到 Coding Pages 和 GitHub Pages 并实现全站 HPPTS
    
    </summary>
    
      <category term="Hexo" scheme="https://www.itrhx.com/categories/Hexo/"/>
    
    
      <category term="Hexo" scheme="https://www.itrhx.com/tags/Hexo/"/>
    
      <category term="Coding Pages" scheme="https://www.itrhx.com/tags/Coding-Pages/"/>
    
      <category term="GitHub Pages" scheme="https://www.itrhx.com/tags/GitHub-Pages/"/>
    
  </entry>
  
  <entry>
    <title>Python3 爬虫学习笔记 C16</title>
    <link href="https://www.itrhx.com/2019/09/14/A46-Python3-spider-C16/"/>
    <id>https://www.itrhx.com/2019/09/14/A46-Python3-spider-C16/</id>
    <published>2019-09-13T16:44:50.577Z</published>
    <updated>2019-09-24T12:43:19.863Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><blockquote><center><font color="#1BC3FB" size="4">Python3 爬虫学习笔记第十六章 —— 【数据储存系列 — Redis】</font></center></blockquote><a id="more"></a><hr><h1 id="【16-1】关于-Redis"><a href="#【16-1】关于-Redis" class="headerlink" title="【16.1】关于 Redis"></a><font color="#ff0000">【16.1】关于 Redis</font></h1><p>Redis 是一个基于内存的高效的键值型（key-value）非关系型数据库，它支持存储的 value 类型非常多，包括 string(字符串)、list(链表)、set(集合)、zset(sorted set –有序集合) 和 hash（哈希类型），它的性能十分优越，可以支持每秒十几万此的读/写操作，其性能远超数据库，并且还支持集群、分布式、主从同步等配置，原则上可以无限扩展，让更多的数据存储在内存中，此外，它还支持一定的事务能力，这保证了高并发的场景下数据的安全和一致性。</p><hr><h1 id="【16-2】使用-Redis"><a href="#【16-2】使用-Redis" class="headerlink" title="【16.2】使用 Redis"></a><font color="#ff0000">【16.2】使用 Redis</font></h1><p>首先安装 Redis 和 redis-py 库，管理 Redis 可以使用可视化工具 Redis Desktop Manager，该工具现在收费了，分享个 0.8.8.384 的免费版本</p><p>安装 redis-py 库：<code>pip install redis</code><br>Redis 官网：<a href="https://redis.io" target="_blank" rel="noopener">https://redis.io</a><br>官方文档：<a href="https://redis.io/documentation" target="_blank" rel="noopener">https://redis.io/documentation</a><br>中文官网：<a href="http://www.redis.cn" target="_blank" rel="noopener">http://www.redis.cn</a><br>中文教程：<a href="http://www.runoob.com/redis/redis-tutorial.html" target="_blank" rel="noopener">http://www.runoob.com/redis/redis-tutorial.html</a><br>GitHub：<a href="https://github.com/antirez/redis" target="_blank" rel="noopener">https://github.com/antirez/redis</a><br>Redis Windows下载地址一：<a href="https://github.com/microsoftarchive/redis/releases" target="_blank" rel="noopener">https://github.com/microsoftarchive/redis/releases</a> （最新版 3.2.100，似乎不再更新）<br>Redis Windows下载地址二：<a href="https://github.com/tporadowski/redis/releases" target="_blank" rel="noopener">https://github.com/tporadowski/redis/releases</a> （最新版）<br>Redis Desktop Manager 官网：<a href="https://redisdesktop.com/" target="_blank" rel="noopener">https://redisdesktop.com/</a><br>Redis Desktop Manager 0.8.8.384 免费版：<a href="https://pan.baidu.com/s/18MKeCqT0MG0hc89jfkpIkA" target="_blank" rel="noopener">https://pan.baidu.com/s/18MKeCqT0MG0hc89jfkpIkA</a> （提取码：3ovc）</p><p>利用 Python 连接 Redis 示例：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> redis <span class="keyword">import</span> StrictRedis</span><br><span class="line"></span><br><span class="line">redis = StrictRedis(host=<span class="string">'localhost'</span>, port=<span class="number">6379</span>, db=<span class="number">0</span>, password=<span class="string">'000000'</span>)</span><br><span class="line">redis.set(<span class="string">'name'</span>, <span class="string">'TRHX'</span>)</span><br><span class="line">print(redis.get(<span class="string">'name'</span>))</span><br></pre></td></tr></table></figure><p>传入 Redis 的地址、运行端口、使用的数据库和密码， 4 个参数默认值分别为 localhost、6379、0 和 None，声明一个 StrictRedis 对象，调用 set() 方法，设置一个键值对，输出结果如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">b'TRHX'</span></span><br></pre></td></tr></table></figure><p>另外也可以使用 ConnectionPool 来连接：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> redis <span class="keyword">import</span> StrictRedis, ConnectionPool  </span><br><span class="line"></span><br><span class="line">pool = ConnectionPool(host=<span class="string">'localhost'</span>, port=<span class="number">6379</span>, db=<span class="number">0</span>, password=<span class="string">'000000'</span>)  </span><br><span class="line">redis = StrictRedis(connection_pool=pool)</span><br></pre></td></tr></table></figure><p>ConnectionPool 也支持通过 URL 来构建：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">redis://[:password]@host:port/db  <span class="comment"># 创建 Redis TCP 连接</span></span><br><span class="line">rediss://[:password]@host:port/db  <span class="comment"># 创建 Redis TCP+SSL 连接</span></span><br><span class="line">unix://[:password]@/path/to/socket.sock?db=db  # 创建 Redis UNIX socket 连接</span><br></pre></td></tr></table></figure><p>代码示例：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> redis <span class="keyword">import</span> StrictRedis, ConnectionPool</span><br><span class="line"></span><br><span class="line">url = <span class="string">'redis://:000000@localhost:6379/0'</span>  </span><br><span class="line">pool = ConnectionPool.from_url(url)  </span><br><span class="line">redis = StrictRedis(connection_pool=pool)</span><br></pre></td></tr></table></figure><p>以下是有关的键操作、字符串操作、列表操作、集合操作、散列操作的各种方法，记录一下，方便查阅<br>来源：《Python3 网络爬虫开发实战（崔庆才著）》<br>Redis 命令参考：<a href="http://redisdoc.com/" target="_blank" rel="noopener">http://redisdoc.com/</a> 、<a href="http://doc.redisfans.com/" target="_blank" rel="noopener">http://doc.redisfans.com/</a></p><hr><h1 id="【16-3】Key（键）操作"><a href="#【16-3】Key（键）操作" class="headerlink" title="【16.3】Key（键）操作"></a><font color="#ff0000">【16.3】Key（键）操作</font></h1><table><thead><tr><th>方法</th><th>作用</th><th>参数说明</th><th>示例</th><th>示例说明</th><th>示例结果</th></tr></thead><tbody><tr><td>exists(name)</td><td>判断一个键是否存在</td><td>name：键名</td><td>redis.exists(‘name’)</td><td>是否存在 name 这个键</td><td>True</td></tr><tr><td>delete(name)</td><td>删除一个键</td><td>name：键名</td><td>redis.delete(‘name’)</td><td>删除 name 这个键</td><td>1</td></tr><tr><td>type(name)</td><td>判断键类型</td><td>name：键名</td><td>redis.type(‘name’)</td><td>判断 name 这个键类型</td><td>b’string’</td></tr><tr><td>keys(pattern)</td><td>获取所有符合规则的键</td><td>pattern：匹配规则</td><td>redis.keys(‘n*’)</td><td>获取所有以 n 开头的键</td><td>[b’name’]</td></tr><tr><td>randomkey()</td><td>获取随机的一个键</td><td></td><td>randomkey()</td><td>获取随机的一个键</td><td>b’name’</td></tr><tr><td>rename(src, dst)</td><td>重命名键</td><td>src：原键名；dst：新键名</td><td>redis.rename(‘name’, ‘nickname’)</td><td>将 name 重命名为 nickname</td><td>True</td></tr><tr><td>dbsize()</td><td>获取当前数据库中键的数目</td><td></td><td>dbsize()</td><td>获取当前数据库中键的数目</td><td>100</td></tr><tr><td>expire(name, time)</td><td>设定键的过期时间，单位为秒</td><td>name：键名；time：秒数</td><td>redis.expire(‘name’, 2)</td><td>将 name 键的过期时间设置为 2 秒</td><td>True</td></tr><tr><td>ttl(name)</td><td>获取键的过期时间，单位为秒，-1 表示永久不过期</td><td>name：键名</td><td>redis.ttl(‘name’)</td><td>获取 name 这个键的过期时间</td><td>-1</td></tr><tr><td>move(name, db)</td><td>将键移动到其他数据库</td><td>name：键名；db：数据库代号</td><td>move(‘name’, 2)</td><td>将 name 移动到 2 号数据库</td><td>True</td></tr><tr><td>flushdb()</td><td>删除当前选择数据库中的所有键</td><td></td><td>flushdb()</td><td>删除当前选择数据库中的所有键</td><td>True</td></tr><tr><td>flushall()</td><td>删除所有数据库中的所有键</td><td></td><td>flushall()</td><td>删除所有数据库中的所有键</td><td>True</td></tr></tbody></table><hr><h1 id="【16-4】String（字符串）操作"><a href="#【16-4】String（字符串）操作" class="headerlink" title="【16.4】String（字符串）操作"></a><font color="#ff0000">【16.4】String（字符串）操作</font></h1><table><thead><tr><th>方法</th><th>作用</th><th>参数说明</th><th>示例</th><th>示例说明</th><th>示例结果</th></tr></thead><tbody><tr><td>set(name, value)</td><td>给数据库中键名为 name 的 string 赋予值 value</td><td>name：键名；value：值</td><td>redis.set(‘name’, ‘Bob’)</td><td>给 name 这个键的 value 赋值为 Bob</td><td>True</td></tr><tr><td>get(name)</td><td>返回数据库中键名为 name 的 string 的 value</td><td>name：键名</td><td>redis.get(‘name’)</td><td>返回 name 这个键的 value</td><td>b’Bob’</td></tr><tr><td>getset(name, value)</td><td>给数据库中键名为 name 的 string 赋予值 value 并返回上次的 value</td><td>name：键名；value：新值</td><td>redis.getset(‘name’, ‘Mike’)</td><td>赋值 name 为 Mike 并得到上次的 value</td><td>b’Bob’</td></tr><tr><td>mget(keys, *args)</td><td>返回多个键对应的 value 组成的列表</td><td>keys：键名序列</td><td>redis.mget([‘name’, ‘nickname’])</td><td>返回 name 和 nickname 的 value</td><td>[b’Mike’, b’Miker’]</td></tr><tr><td>setnx(name, value)</td><td>如果不存在这个键值对，则更新 value，否则不变</td><td>name：键名</td><td>redis.setnx(‘newname’, ‘James’)</td><td>如果 newname 这个键不存在，则设置值为 James</td><td>第一次运行结果是 True，第二次运行结果是 False</td></tr><tr><td>setex(name, time, value)</td><td>设置可以对应的值为 string 类型的 value，并指定此键值对应的有效期</td><td>name：键名；time：有效期；value：值</td><td>redis.setex(‘name’, 1, ‘James’)</td><td>将 name 这个键的值设为 James，有效期为 1 秒</td><td>True</td></tr><tr><td>setrange(name, offset, value)</td><td>设置指定键的 value 值的子字符串</td><td>name：键名；offset：偏移量；value：值</td><td>redis.set(‘name’, ‘Hello’) redis.setrange (‘name’, 6, ‘World’)</td><td>设置 name 为 Hello 字符串，并在 index 为 6 的位置补 World</td><td>11，修改后的字符串长度</td></tr><tr><td>mset(mapping)</td><td>批量赋值</td><td>mapping：字典或关键字参数</td><td>redis.mset({‘name1’: ‘Durant’, ‘name2’: ‘James’})</td><td>将 name1 设为 Durant，name2 设为 James</td><td>True</td></tr><tr><td>msetnx(mapping)</td><td>键均不存在时才批量赋值</td><td>mapping：字典或关键字参数</td><td>redis.msetnx({‘name3’: ‘Smith’, ‘name4’: ‘Curry’})</td><td>在 name3 和 name4 均不存在的情况下才设置二者值</td><td>True</td></tr><tr><td>incr(name, amount=1)</td><td>键名为 name 的 value 增值操作，默认为 1，键不存在则被创建并设为 amount</td><td>name：键名；amount：增长的值</td><td>redis.incr(‘age’, 1)</td><td>age 对应的值增 1，若不存在，则会创建并设置为 1</td><td>1，即修改后的值</td></tr><tr><td>decr(name, amount=1)</td><td>键名为 name 的 value 减值操作，默认为 1，键不存在则被创建并将 value 设置为 - amount</td><td>name：键名；amount：减少的值</td><td>redis.decr(‘age’, 1)</td><td>age 对应的值减 1，若不存在，则会创建并设置为-1</td><td>-1，即修改后的值</td></tr><tr><td>append(key, value)</td><td>键名为 key 的 string 的值附加 value</td><td>key：键名</td><td>redis.append(‘nickname’, ‘OK’)</td><td>向键名为 nickname 的值后追加 OK</td><td>13，即修改后的字符串长度</td></tr><tr><td>substr(name, start, end=-1)</td><td>返回键名为 name 的 string 的子字符串</td><td>name：键名；start：起始索引；end：终止索引，默认为-1，表示截取到末尾</td><td>redis.substr(‘name’, 1, 4)</td><td>返回键名为 name 的值的字符串，截取索引为 1~4 的字符</td><td>b’ello’</td></tr><tr><td>getrange(key, start, end)</td><td>获取键的 value 值从 start 到 end 的子字符串</td><td>key：键名；start：起始索引；end：终止索引</td><td>redis.getrange(‘name’, 1, 4)</td><td>返回键名为 name 的值的字符串，截取索引为 1~4 的字符</td><td>b’ello</td></tr></tbody></table><hr><h1 id="【16-5】Hash（哈希表）操作"><a href="#【16-5】Hash（哈希表）操作" class="headerlink" title="【16.5】Hash（哈希表）操作"></a><font color="#ff0000">【16.5】Hash（哈希表）操作</font></h1><table><thead><tr><th>方法</th><th>作用</th><th>参数说明</th><th>示例</th><th>示例说明</th><th>示例结果</th></tr></thead><tbody><tr><td>hset(name, key, value)</td><td>向键名为 name 的散列表中添加映射</td><td>name：键名；key：映射键名；value：映射键值</td><td>hset(‘price’, ‘cake’, 5)</td><td>向键名为 price 的散列表中添加映射关系，cake 的值为 5</td><td>1，即添加的映射个数</td></tr><tr><td>hsetnx(name, key, value)</td><td>如果映射键名不存在，则向键名为 name 的散列表中添加映射</td><td>name：键名；key：映射键名；value：映射键值</td><td>hsetnx(‘price’, ‘book’, 6)</td><td>向键名为 price 的散列表中添加映射关系，book 的值为 6</td><td>1，即添加的映射个数</td></tr><tr><td>hget(name, key)</td><td>返回键名为 name 的散列表中 key 对应的值</td><td>name：键名；key：映射键名</td><td>redis.hget(‘price’, ‘cake’)</td><td>获取键名为 price 的散列表中键名为 cake 的值</td><td>5</td></tr><tr><td>hmget(name, keys, *args)</td><td>返回键名为 name 的散列表中各个键对应的值</td><td>name：键名；keys：键名序列</td><td>redis.hmget(‘price’, [‘apple’, ‘orange’])</td><td>获取键名为 price 的散列表中 apple 和 orange 的值</td><td>[b’3’, b’7’]</td></tr><tr><td>hmset(name, mapping)</td><td>向键名为 name 的散列表中批量添加映射</td><td>name：键名；mapping：映射字典</td><td>redis.hmset(‘price’, {‘banana’: 2, ‘pear’: 6})</td><td>向键名为 price 的散列表中批量添加映射</td><td>True</td></tr><tr><td>hincrby(name, key, amount=1)</td><td>将键名为 name 的散列表中映射的值增加 amount</td><td>name：键名；key：映射键名；amount：增长量</td><td>redis.hincrby(‘price’, ‘apple’, 3)</td><td>key 为 price 的散列表中 apple 的值增加 3</td><td>6，修改后的值</td></tr><tr><td>hexists(name, key)</td><td>键名为 name 的散列表中是否存在键名为键的映射</td><td>name：键名；key：映射键名</td><td>redis.hexists(‘price’, ‘banana’)</td><td>键名为 price 的散列表中 banana 的值是否存在</td><td>True</td></tr><tr><td>hdel(name, *keys)</td><td>在键名为 name 的散列表中，删除键名为键的映射</td><td>name：键名；keys：键名序列</td><td>redis.hdel(‘price’, ‘banana’)</td><td>从键名为 price 的散列表中删除键名为 banana 的映射</td><td>True</td></tr><tr><td>hlen(name)</td><td>从键名为 name 的散列表中获取映射个数</td><td>name：键名</td><td>redis.hlen(‘price’)</td><td>从键名为 price 的散列表中获取映射个数</td><td>6</td></tr><tr><td>hkeys(name)</td><td>从键名为 name 的散列表中获取所有映射键名</td><td>name：键名</td><td>redis.hkeys(‘price’)</td><td>从键名为 price 的散列表中获取所有映射键名</td><td>[b’cake’, b’book’, b’banana’, b’pear’]</td></tr><tr><td>hvals(name)</td><td>从键名为 name 的散列表中获取所有映射键值</td><td>name：键名</td><td>redis.hvals(‘price’)</td><td>从键名为 price 的散列表中获取所有映射键值</td><td>[b’5’, b’6’, b’2’, b’6’]</td></tr><tr><td>hgetall(name)</td><td>从键名为 name 的散列表中获取所有映射键值对</td><td>name：键名</td><td>redis.hgetall(‘price’)</td><td>从键名为 price 的散列表中获取所有映射键值对</td><td>{b’cake’: b’5’, b’book’: b’6’, b’orange’: b’7’, b’pear’: b’6’}</td></tr></tbody></table><hr><h1 id="【16-6】List（列表）操作"><a href="#【16-6】List（列表）操作" class="headerlink" title="【16.6】List（列表）操作"></a><font color="#ff0000">【16.6】List（列表）操作</font></h1><table><thead><tr><th>方法</th><th>作用</th><th>参数说明</th><th>示例</th><th>示例说明</th><th>示例结果</th></tr></thead><tbody><tr><td>rpush(name, *values)</td><td>在键名为 name 的列表末尾添加值为 value 的元素，可以传多个</td><td>name：键名；values：值</td><td>redis.rpush(‘list’, 1, 2, 3)</td><td>向键名为 list 的列表尾添加 1、2、3</td><td>3，列表大小</td></tr><tr><td>lpush(name, *values)</td><td>在键名为 name 的列表头添加值为 value 的元素，可以传多个</td><td>name：键名；values：值</td><td>redis.lpush(‘list’, 0)</td><td>向键名为 list 的列表头部添加 0</td><td>4，列表大小</td></tr><tr><td>llen(name)</td><td>返回键名为 name 的列表的长度</td><td>name：键名</td><td>redis.llen(‘list’)</td><td>返回键名为 list 的列表的长度</td><td>4</td></tr><tr><td>lrange(name, start, end)</td><td>返回键名为 name 的列表中 start 至 end 之间的元素</td><td>name：键名；start：起始索引；end：终止索引</td><td>redis.lrange(‘list’, 1, 3)</td><td>返回起始索引为 1 终止索引为 3 的索引范围对应的列表</td><td>[b’3’, b’2’, b’1’]</td></tr><tr><td>ltrim(name, start, end)</td><td>截取键名为 name 的列表，保留索引为 start 到 end 的内容</td><td>name：键名；start：起始索引；end：终止索引</td><td>ltrim(‘list’, 1, 3)</td><td>保留键名为 list 的索引为 1 到 3 的元素</td><td>True</td></tr><tr><td>lindex(name, index)</td><td>返回键名为 name 的列表中 index 位置的元素</td><td>name：键名；index：索引</td><td>redis.lindex(‘list’, 1)</td><td>返回键名为 list 的列表索引为 1 的元素</td><td>b’2’</td></tr><tr><td>lset(name, index, value)</td><td>给键名为 name 的列表中 index 位置的元素赋值，越界则报错</td><td>name：键名；index：索引位置；value：值</td><td>redis.lset(‘list’, 1, 5)</td><td>将键名为 list 的列表中索引为 1 的位置赋值为 5</td><td>True</td></tr><tr><td>lrem(name, count, value)</td><td>删除 count 个键的列表中值为 value 的元素</td><td>name：键名；count：删除个数；value：值</td><td>redis.lrem(‘list’, 2, 3)</td><td>将键名为 list 的列表删除两个 3</td><td>1，即删除的个数</td></tr><tr><td>lpop(name)</td><td>返回并删除键名为 name 的列表中的首元素</td><td>name：键名</td><td>redis.lpop(‘list’)</td><td>返回并删除名为 list 的列表中的第一个元素</td><td>b’5’</td></tr><tr><td>rpop(name)</td><td>返回并删除键名为 name 的列表中的尾元素</td><td>name：键名</td><td>redis.rpop(‘list’)</td><td>返回并删除名为 list 的列表中的最后一个元素</td><td>b’2’</td></tr><tr><td>blpop(keys, timeout=0)</td><td>返回并删除名称在 keys 中的 list 中的首个元素，如果列表为空，则会一直阻塞等待</td><td>keys：键名序列；timeout：超时等待时间，0 为一直等待</td><td>redis.blpop(‘list’)</td><td>返回并删除键名为 list 的列表中的第一个元素</td><td>[b’5’]</td></tr><tr><td>brpop(keys, timeout=0)</td><td>返回并删除键名为 name 的列表中的尾元素，如果 list 为空，则会一直阻塞等待</td><td>keys：键名序列；timeout：超时等待时间，0 为一直等待</td><td>redis.brpop(‘list’)</td><td>返回并删除名为 list 的列表中的最后一个元素</td><td>[b’2’]</td></tr><tr><td>rpoplpush(src, dst)</td><td>返回并删除名称为 src 的列表的尾元素，并将该元素添加到名称为 dst 的列表头部</td><td>src：源列表的键；dst：目标列表的 key</td><td>redis.rpoplpush(‘list’, ‘list2’)</td><td>将键名为 list 的列表尾元素删除并将其添加到键名为 list2 的列表头部，然后返回</td><td>b’2’</td></tr></tbody></table><hr><h1 id="【16-7】Set（集合）操作"><a href="#【16-7】Set（集合）操作" class="headerlink" title="【16.7】Set（集合）操作"></a><font color="#ff0000">【16.7】Set（集合）操作</font></h1><table><thead><tr><th>方法</th><th>作用</th><th>参数说明</th><th>示例</th><th>示例说明</th><th>示例结果</th></tr></thead><tbody><tr><td>sadd(name, *values)</td><td>向键名为 name 的集合中添加元素</td><td>name：键名；values：值，可为多个</td><td>redis.sadd(‘tags’, ‘Book’, ‘Tea’, ‘Coffee’)</td><td>向键名为 tags 的集合中添加 Book、Tea 和 Coffee 这 3 个内容</td><td>3，即插入的数据个数</td></tr><tr><td>srem(name, *values)</td><td>从键名为 name 的集合中删除元素</td><td>name：键名；values：值，可为多个</td><td>redis.srem(‘tags’, ‘Book’)</td><td>从键名为 tags 的集合中删除 Book</td><td>1，即删除的数据个数</td></tr><tr><td>spop(name)</td><td>随机返回并删除键名为 name 的集合中的一个元素</td><td>name：键名</td><td>redis.spop(‘tags’)</td><td>从键名为 tags 的集合中随机删除并返回该元素</td><td>b’Tea’</td></tr><tr><td>smove(src, dst, value)</td><td>从 src 对应的集合中移除元素并将其添加到 dst 对应的集合中</td><td>src：源集合；dst：目标集合；value：元素值</td><td>redis.smove(‘tags’, ‘tags2’, ‘Coffee’)</td><td>从键名为 tags 的集合中删除元素 Coffee 并将其添加到键为 tags2 的集合</td><td>True</td></tr><tr><td>scard(name)</td><td>返回键名为 name 的集合的元素个数</td><td>name：键名</td><td>redis.scard(‘tags’)</td><td>获取键名为 tags 的集合中的元素个数</td><td>3</td></tr><tr><td>sismember(name, value)</td><td>测试 member 是否是键名为 name 的集合的元素</td><td>name：键值</td><td>redis.sismember(‘tags’, ‘Book’)</td><td>判断 Book 是否是键名为 tags 的集合元素</td><td>True</td></tr><tr><td>sinter(keys, *args)</td><td>返回所有给定键的集合的交集</td><td>keys：键名序列</td><td>redis.sinter([‘tags’, ‘tags2’])</td><td>返回键名为 tags 的集合和键名为 tags2 的集合的交集</td><td>{b’Coffee’}</td></tr><tr><td>sinterstore(dest, keys, *args)</td><td>求交集并将交集保存到 dest 的集合</td><td>dest：结果集合；keys：键名序列</td><td>redis.sinterstore (‘inttag’, [‘tags’, ‘tags2’])</td><td>求键名为 tags 的集合和键名为 tags2 的集合的交集并将其保存为 inttag</td><td>1</td></tr><tr><td>sunion(keys, *args)</td><td>返回所有给定键的集合的并集</td><td>keys：键名序列</td><td>redis.sunion([‘tags’, ‘tags2’])</td><td>返回键名为 tags 的集合和键名为 tags2 的集合的并集</td><td>{b’Coffee’, b’Book’, b’Pen’}</td></tr><tr><td>sunionstore(dest, keys, *args)</td><td>求并集并将并集保存到 dest 的集合</td><td>dest：结果集合；keys：键名序列</td><td>redis.sunionstore (‘inttag’, [‘tags’, ‘tags2’])</td><td>求键名为 tags 的集合和键名为 tags2 的集合的并集并将其保存为 inttag</td><td>3</td></tr><tr><td>sdiff(keys, *args)</td><td>返回所有给定键的集合的差集</td><td>keys：键名序列</td><td>redis.sdiff([‘tags’, ‘tags2’])</td><td>返回键名为 tags 的集合和键名为 tags2 的集合的差集</td><td>{b’Book’, b’Pen’}</td></tr><tr><td>sdiffstore(dest, keys, *args)</td><td>求差集并将差集保存到 dest 集合</td><td>dest：结果集合；keys：键名序列</td><td>redis.sdiffstore (‘inttag’, [‘tags’, ‘tags2’])</td><td>求键名为 tags 的集合和键名为 tags2 的集合的差集并将其保存为 inttag</td><td>3</td></tr><tr><td>smembers(name)</td><td>返回键名为 name 的集合的所有元素</td><td>name：键名</td><td>redis.smembers(‘tags’)</td><td>返回键名为 tags 的集合的所有元素</td><td>{b’Pen’, b’Book’, b’Coffee’}</td></tr><tr><td>srandmember(name)</td><td>随机返回键名为 name 的集合中的一个元素，但不删除元素</td><td>name：键值</td><td>redis.srandmember(‘tags’)</td><td>随机返回键名为 tags 的集合中的一个元素</td><td>Srandmember (name)</td></tr></tbody></table><hr><h1 id="【16-8】SortedSet（有序集合）操作"><a href="#【16-8】SortedSet（有序集合）操作" class="headerlink" title="【16.8】SortedSet（有序集合）操作"></a><font color="#ff0000">【16.8】SortedSet（有序集合）操作</font></h1><table><thead><tr><th>方法</th><th>作用</th><th>参数说明</th><th>示例</th><th>示例说明</th><th>示例结果</th></tr></thead><tbody><tr><td>zadd(name, args, *kwargs)</td><td>向键名为 name 的 zset 中添加元素 member，score 用于排序。如果该元素存在，则更新其顺序</td><td>name：键名；args：可变参数</td><td>redis.zadd(‘grade’, 100, ‘Bob’, 98, ‘Mike’)</td><td>向键名为 grade 的 zset 中添加 Bob（其 score 为 100），并添加 Mike（其 score 为 98）</td><td>2，即添加的元素个数</td></tr><tr><td>zrem(name, *values)</td><td>删除键名为 name 的 zset 中的元素</td><td>name：键名；values：元素</td><td>redis.zrem(‘grade’, ‘Mike’)</td><td>从键名为 grade 的 zset 中删除 Mike</td><td>1，即删除的元素个数</td></tr><tr><td>zincrby(name, value, amount=1)</td><td>如果在键名为 name 的 zset 中已经存在元素 value，则将该元素的 score 增加 amount；否则向该集合中添加该元素，其 score 的值为 amount</td><td>name：键名；value：元素；amount：增长的 score 值</td><td>redis.zincrby(‘grade’, ‘Bob’, -2)</td><td>键名为 grade 的 zset 中 Bob 的 score 减 2</td><td>98.0，即修改后的值</td></tr><tr><td>zrank(name, value)</td><td>返回键名为 name 的 zset 中元素的排名，按 score 从小到大排序，即名次</td><td>name：键名；value：元素值</td><td>redis.zrank(‘grade’, ‘Amy’)</td><td>得到键名为 grade 的 zset 中 Amy 的排名</td><td>1</td></tr><tr><td>zrevrank(name, value)</td><td>返回键为 name 的 zset 中元素的倒数排名（按 score 从大到小排序），即名次</td><td>name：键名；value：元素值</td><td>redis.zrevrank (‘grade’, ‘Amy’)</td><td>得到键名为 grade 的 zset 中 Amy 的倒数排名</td><td>2</td></tr><tr><td>zrevrange(name, start, end, withscores= False)</td><td>返回键名为 name 的 zset（按 score 从大到小排序）中 index 从 start 到 end 的所有元素</td><td>name：键值；start：开始索引；end：结束索引；withscores：是否带 score</td><td>redis.zrevrange (‘grade’, 0, 3)</td><td>返回键名为 grade 的 zset 中前四名元素</td><td>[b’Bob’, b’Mike’, b’Amy’, b’James’]</td></tr><tr><td>zrangebyscore (name, min, max, start=None, num=None, withscores=False)</td><td>返回键名为 name 的 zset 中 score 在给定区间的元素</td><td>name：键名；min：最低 score；max：最高 score；start：起始索引；num：个数；withscores：是否带 score</td><td>redis.zrangebyscore (‘grade’, 80, 95)</td><td>返回键名为 grade 的 zset 中 score 在 80 和 95 之间的元素</td><td>[b’Bob’, b’Mike’, b’Amy’, b’James’]</td></tr><tr><td>zcount(name, min, max)</td><td>返回键名为 name 的 zset 中 score 在给定区间的数量</td><td>name：键名；min：最低 score；max：最高 score</td><td>redis.zcount(‘grade’, 80, 95)</td><td>返回键名为 grade 的 zset 中 score 在 80 到 95 的元素个数</td><td>2</td></tr><tr><td>zcard(name)</td><td>返回键名为 name 的 zset 的元素个数</td><td>name：键名</td><td>redis.zcard(‘grade’)</td><td>获取键名为 grade 的 zset 中元素的个数</td><td>3</td></tr><tr><td>zremrangebyrank (name, min, max)</td><td>删除键名为 name 的 zset 中排名在给定区间的元素</td><td>name：键名；min：最低位次；max：最高位次</td><td>redis.zremrangebyrank (‘grade’, 0, 0)</td><td>删除键名为 grade 的 zset 中排名第一的元素</td><td>1，即删除的元素个数</td></tr><tr><td>zremrangebyscore (name, min, max)</td><td>删除键名为 name 的 zset 中 score 在给定区间的元素</td><td>name：键名；min：最低 score；max：最高 score</td><td>redis.zremrangebyscore (‘grade’, 80, 90)</td><td>删除 score 在 80 到 90 之间的元素</td><td>1，即删除的元素个数</td></tr></tbody></table><hr><h1 id="【16-9】RedisDump"><a href="#【16-9】RedisDump" class="headerlink" title="【16.9】RedisDump"></a><font color="#ff0000">【16.9】RedisDump</font></h1><p>RedisDump 是 Redis 一个数据导入导出工具，是基于 Ruby 实现的，首先访问 Ruby 官网安装对应操作系统的 Ruby：<a href="http://www.ruby-lang.org/zh_cn/downloads/" target="_blank" rel="noopener">http://www.ruby-lang.org/zh_cn/downloads/</a> ，安装完成即可使用 gem 命令，该命令类似于 Python 当中的 pip 命令，使用 <code>gem install redis-dump</code> 即可完成 RedisDump 的安装，安装完成后就可以使用导出数据 <code>redis-dump</code> 命令和导入数据 <code>redis-load</code> 命令了</p><hr><h2 id="【16-9-1】导出数据-redis-dump"><a href="#【16-9-1】导出数据-redis-dump" class="headerlink" title="【16.9.1】导出数据 redis-dump"></a><font color="#1BC3FB">【16.9.1】导出数据 redis-dump</font></h2><p>在命令行输入 <code>redis-dump -h</code> 可以查看：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">Usage: E:/Ruby26-x64/bin/redis-dump [global options] COMMAND [command options]</span><br><span class="line">    -u, --uri=S                      Redis URI (e.g. redis://hostname[:port])</span><br><span class="line">    -d, --database=S                 Redis database (e.g. -d 15)</span><br><span class="line">    -a, --password=S                 Redis password (e.g. -a 'my@pass/word')</span><br><span class="line">    -s, --sleep=S                    Sleep for S seconds after dumping (for debugging)</span><br><span class="line">    -c, --count=S                    Chunk size (default: 10000)</span><br><span class="line">    -f, --filter=S                   Filter selected keys (passed directly to redis' KEYS command)</span><br><span class="line">    -b, --base64                     Encode key values as base64 (useful for binary values)</span><br><span class="line">    -O, --without_optimizations      Disable run time optimizations</span><br><span class="line">    -V, --version                    Display version</span><br><span class="line">    -D, --debug</span><br><span class="line">        --nosafe</span><br></pre></td></tr></table></figure><p>命令解释：</p><ul><li>-u Redis 连接字符串</li><li>-d 数据库代号</li><li>-a 数据库密码</li><li>-s 导出之后的休眠时间</li><li>-c 分块大小，默认是 10000</li><li>-f 导出时的过滤器</li><li>-b 将键值编码为 base64（对二进制值有用）</li><li>-O 禁用运行时优化</li><li>-V 显示版本</li><li>-D 开启调试</li></ul><p>导出数据示例：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">redis-dump</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 指定端口</span></span><br><span class="line">redis-dump -u 127.0.0.1:6379</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 指定端口和密码</span></span><br><span class="line">redis-dump -u :password@127.0.0.1:6379</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 导出指定数据库</span></span><br><span class="line">redis-dump -u 127.0.0.1:6379 -d 3</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 导出包含特定值的数据</span></span><br><span class="line">redis-dump -u 127.0.0.1:6379 -f age</span><br></pre></td></tr></table></figure><p>输出示例：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 导出所有数据</span></span><br><span class="line">&#123;"db":0,"key":"name5","ttl":-1,"type":"string","value":"DDD","size":3&#125;</span><br><span class="line">&#123;"db":0,"key":"name2","ttl":-1,"type":"string","value":"AAA","size":3&#125;</span><br><span class="line">&#123;"db":0,"key":"name4","ttl":-1,"type":"string","value":"CCC","size":3&#125;</span><br><span class="line">&#123;"db":0,"key":"name6","ttl":-1,"type":"string","value":"CCC","size":3&#125;</span><br><span class="line">&#123;"db":0,"key":"name","ttl":-1,"type":"string","value":"TRHX","size":4&#125;</span><br><span class="line">&#123;"db":0,"key":"name3","ttl":-1,"type":"string","value":"BBB","size":3&#125;</span><br><span class="line">&#123;"db":1,"key":"name2","ttl":-1,"type":"string","value":"BBB","size":3&#125;</span><br><span class="line">&#123;"db":1,"key":"name1","ttl":-1,"type":"string","value":"AAA","size":3&#125;</span><br><span class="line">&#123;"db":2,"key":"name2","ttl":-1,"type":"string","value":"BBB","size":3&#125;</span><br><span class="line">&#123;"db":2,"key":"name1","ttl":-1,"type":"string","value":"AAA","size":3&#125;</span><br><span class="line">&#123;"db":3,"key":"name2","ttl":-1,"type":"string","value":"HHH","size":3&#125;</span><br><span class="line">&#123;"db":3,"key":"name1","ttl":-1,"type":"string","value":"RRR","size":3&#125;</span><br><span class="line">&#123;"db":4,"key":"age","ttl":-1,"type":"string","value":"20","size":2&#125;</span><br><span class="line">&#123;"db":4,"key":"age2","ttl":-1,"type":"string","value":"19","size":2&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 导出 3 号数据库</span></span><br><span class="line">&#123;"db":3,"key":"name2","ttl":-1,"type":"string","value":"HHH","size":3&#125;</span><br><span class="line">&#123;"db":3,"key":"name1","ttl":-1,"type":"string","value":"RRR","size":3&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 导出 key 包含 age 的数据</span></span><br><span class="line">&#123;"db":4,"key":"age","ttl":-1,"type":"string","value":"20","size":2&#125;</span><br><span class="line">&#123;"db":4,"key":"age2","ttl":-1,"type":"string","value":"19","size":2&#125;</span><br></pre></td></tr></table></figure><p>导出所有数据为 JSON 文件：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">redis-dump -u 127.0.0.1:6379 &gt; db_full.json</span><br></pre></td></tr></table></figure><p>该命令将会在当前目录生成一个名为 db_full.json 的文件，文件内容如下：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&#123;<span class="attr">"db"</span>:<span class="number">0</span>,<span class="attr">"key"</span>:<span class="string">"name5"</span>,<span class="attr">"ttl"</span>:<span class="number">-1</span>,<span class="attr">"type"</span>:<span class="string">"string"</span>,<span class="attr">"value"</span>:<span class="string">"DDD"</span>,<span class="attr">"size"</span>:<span class="number">3</span>&#125;</span><br><span class="line">&#123;<span class="attr">"db"</span>:<span class="number">0</span>,<span class="attr">"key"</span>:<span class="string">"name2"</span>,<span class="attr">"ttl"</span>:<span class="number">-1</span>,<span class="attr">"type"</span>:<span class="string">"string"</span>,<span class="attr">"value"</span>:<span class="string">"AAA"</span>,<span class="attr">"size"</span>:<span class="number">3</span>&#125;</span><br><span class="line">&#123;<span class="attr">"db"</span>:<span class="number">0</span>,<span class="attr">"key"</span>:<span class="string">"name4"</span>,<span class="attr">"ttl"</span>:<span class="number">-1</span>,<span class="attr">"type"</span>:<span class="string">"string"</span>,<span class="attr">"value"</span>:<span class="string">"CCC"</span>,<span class="attr">"size"</span>:<span class="number">3</span>&#125;</span><br><span class="line">&#123;<span class="attr">"db"</span>:<span class="number">0</span>,<span class="attr">"key"</span>:<span class="string">"name6"</span>,<span class="attr">"ttl"</span>:<span class="number">-1</span>,<span class="attr">"type"</span>:<span class="string">"string"</span>,<span class="attr">"value"</span>:<span class="string">"CCC"</span>,<span class="attr">"size"</span>:<span class="number">3</span>&#125;</span><br><span class="line">&#123;<span class="attr">"db"</span>:<span class="number">0</span>,<span class="attr">"key"</span>:<span class="string">"name"</span>,<span class="attr">"ttl"</span>:<span class="number">-1</span>,<span class="attr">"type"</span>:<span class="string">"string"</span>,<span class="attr">"value"</span>:<span class="string">"TRHX"</span>,<span class="attr">"size"</span>:<span class="number">4</span>&#125;</span><br><span class="line">&#123;<span class="attr">"db"</span>:<span class="number">0</span>,<span class="attr">"key"</span>:<span class="string">"name3"</span>,<span class="attr">"ttl"</span>:<span class="number">-1</span>,<span class="attr">"type"</span>:<span class="string">"string"</span>,<span class="attr">"value"</span>:<span class="string">"BBB"</span>,<span class="attr">"size"</span>:<span class="number">3</span>&#125;</span><br><span class="line">&#123;<span class="attr">"db"</span>:<span class="number">1</span>,<span class="attr">"key"</span>:<span class="string">"name2"</span>,<span class="attr">"ttl"</span>:<span class="number">-1</span>,<span class="attr">"type"</span>:<span class="string">"string"</span>,<span class="attr">"value"</span>:<span class="string">"BBB"</span>,<span class="attr">"size"</span>:<span class="number">3</span>&#125;</span><br><span class="line">&#123;<span class="attr">"db"</span>:<span class="number">1</span>,<span class="attr">"key"</span>:<span class="string">"name1"</span>,<span class="attr">"ttl"</span>:<span class="number">-1</span>,<span class="attr">"type"</span>:<span class="string">"string"</span>,<span class="attr">"value"</span>:<span class="string">"AAA"</span>,<span class="attr">"size"</span>:<span class="number">3</span>&#125;</span><br><span class="line">&#123;<span class="attr">"db"</span>:<span class="number">2</span>,<span class="attr">"key"</span>:<span class="string">"name2"</span>,<span class="attr">"ttl"</span>:<span class="number">-1</span>,<span class="attr">"type"</span>:<span class="string">"string"</span>,<span class="attr">"value"</span>:<span class="string">"BBB"</span>,<span class="attr">"size"</span>:<span class="number">3</span>&#125;</span><br><span class="line">&#123;<span class="attr">"db"</span>:<span class="number">2</span>,<span class="attr">"key"</span>:<span class="string">"name1"</span>,<span class="attr">"ttl"</span>:<span class="number">-1</span>,<span class="attr">"type"</span>:<span class="string">"string"</span>,<span class="attr">"value"</span>:<span class="string">"AAA"</span>,<span class="attr">"size"</span>:<span class="number">3</span>&#125;</span><br><span class="line">&#123;<span class="attr">"db"</span>:<span class="number">3</span>,<span class="attr">"key"</span>:<span class="string">"name2"</span>,<span class="attr">"ttl"</span>:<span class="number">-1</span>,<span class="attr">"type"</span>:<span class="string">"string"</span>,<span class="attr">"value"</span>:<span class="string">"HHH"</span>,<span class="attr">"size"</span>:<span class="number">3</span>&#125;</span><br><span class="line">&#123;<span class="attr">"db"</span>:<span class="number">3</span>,<span class="attr">"key"</span>:<span class="string">"name1"</span>,<span class="attr">"ttl"</span>:<span class="number">-1</span>,<span class="attr">"type"</span>:<span class="string">"string"</span>,<span class="attr">"value"</span>:<span class="string">"RRR"</span>,<span class="attr">"size"</span>:<span class="number">3</span>&#125;</span><br><span class="line">&#123;<span class="attr">"db"</span>:<span class="number">4</span>,<span class="attr">"key"</span>:<span class="string">"age"</span>,<span class="attr">"ttl"</span>:<span class="number">-1</span>,<span class="attr">"type"</span>:<span class="string">"string"</span>,<span class="attr">"value"</span>:<span class="string">"20"</span>,<span class="attr">"size"</span>:<span class="number">2</span>&#125;</span><br><span class="line">&#123;<span class="attr">"db"</span>:<span class="number">4</span>,<span class="attr">"key"</span>:<span class="string">"age2"</span>,<span class="attr">"ttl"</span>:<span class="number">-1</span>,<span class="attr">"type"</span>:<span class="string">"string"</span>,<span class="attr">"value"</span>:<span class="string">"19"</span>,<span class="attr">"size"</span>:<span class="number">2</span>&#125;</span><br></pre></td></tr></table></figure><p>使用参数 -d 指定某个数据库的所有数据导出为 JSON 文件：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">redis-dump -u 127.0.0.1:6379 -d 4 &gt; db_db4.json</span><br></pre></td></tr></table></figure><p>该命令会将 4 号数据库的数据导出到 db_db4.json 文件：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#123;<span class="attr">"db"</span>:<span class="number">4</span>,<span class="attr">"key"</span>:<span class="string">"age"</span>,<span class="attr">"ttl"</span>:<span class="number">-1</span>,<span class="attr">"type"</span>:<span class="string">"string"</span>,<span class="attr">"value"</span>:<span class="string">"20"</span>,<span class="attr">"size"</span>:<span class="number">2</span>&#125;</span><br><span class="line">&#123;<span class="attr">"db"</span>:<span class="number">4</span>,<span class="attr">"key"</span>:<span class="string">"age2"</span>,<span class="attr">"ttl"</span>:<span class="number">-1</span>,<span class="attr">"type"</span>:<span class="string">"string"</span>,<span class="attr">"value"</span>:<span class="string">"19"</span>,<span class="attr">"size"</span>:<span class="number">2</span>&#125;</span><br></pre></td></tr></table></figure><p>使用参数 -f 过滤数据，只导出特定的数据：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">redis-dump -u 127.0.0.1:6379 -f name &gt; db_name.json</span><br></pre></td></tr></table></figure><p>该命令会导出 key 包含 name 的数据到 db_name.json 文件：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&#123;<span class="attr">"db"</span>:<span class="number">0</span>,<span class="attr">"key"</span>:<span class="string">"name5"</span>,<span class="attr">"ttl"</span>:<span class="number">-1</span>,<span class="attr">"type"</span>:<span class="string">"string"</span>,<span class="attr">"value"</span>:<span class="string">"DDD"</span>,<span class="attr">"size"</span>:<span class="number">3</span>&#125;</span><br><span class="line">&#123;<span class="attr">"db"</span>:<span class="number">0</span>,<span class="attr">"key"</span>:<span class="string">"name2"</span>,<span class="attr">"ttl"</span>:<span class="number">-1</span>,<span class="attr">"type"</span>:<span class="string">"string"</span>,<span class="attr">"value"</span>:<span class="string">"AAA"</span>,<span class="attr">"size"</span>:<span class="number">3</span>&#125;</span><br><span class="line">&#123;<span class="attr">"db"</span>:<span class="number">0</span>,<span class="attr">"key"</span>:<span class="string">"name4"</span>,<span class="attr">"ttl"</span>:<span class="number">-1</span>,<span class="attr">"type"</span>:<span class="string">"string"</span>,<span class="attr">"value"</span>:<span class="string">"CCC"</span>,<span class="attr">"size"</span>:<span class="number">3</span>&#125;</span><br><span class="line">&#123;<span class="attr">"db"</span>:<span class="number">0</span>,<span class="attr">"key"</span>:<span class="string">"name6"</span>,<span class="attr">"ttl"</span>:<span class="number">-1</span>,<span class="attr">"type"</span>:<span class="string">"string"</span>,<span class="attr">"value"</span>:<span class="string">"CCC"</span>,<span class="attr">"size"</span>:<span class="number">3</span>&#125;</span><br><span class="line">&#123;<span class="attr">"db"</span>:<span class="number">0</span>,<span class="attr">"key"</span>:<span class="string">"name"</span>,<span class="attr">"ttl"</span>:<span class="number">-1</span>,<span class="attr">"type"</span>:<span class="string">"string"</span>,<span class="attr">"value"</span>:<span class="string">"TRHX"</span>,<span class="attr">"size"</span>:<span class="number">4</span>&#125;</span><br><span class="line">&#123;<span class="attr">"db"</span>:<span class="number">0</span>,<span class="attr">"key"</span>:<span class="string">"name3"</span>,<span class="attr">"ttl"</span>:<span class="number">-1</span>,<span class="attr">"type"</span>:<span class="string">"string"</span>,<span class="attr">"value"</span>:<span class="string">"BBB"</span>,<span class="attr">"size"</span>:<span class="number">3</span>&#125;</span><br><span class="line">&#123;<span class="attr">"db"</span>:<span class="number">1</span>,<span class="attr">"key"</span>:<span class="string">"name2"</span>,<span class="attr">"ttl"</span>:<span class="number">-1</span>,<span class="attr">"type"</span>:<span class="string">"string"</span>,<span class="attr">"value"</span>:<span class="string">"BBB"</span>,<span class="attr">"size"</span>:<span class="number">3</span>&#125;</span><br><span class="line">&#123;<span class="attr">"db"</span>:<span class="number">1</span>,<span class="attr">"key"</span>:<span class="string">"name1"</span>,<span class="attr">"ttl"</span>:<span class="number">-1</span>,<span class="attr">"type"</span>:<span class="string">"string"</span>,<span class="attr">"value"</span>:<span class="string">"AAA"</span>,<span class="attr">"size"</span>:<span class="number">3</span>&#125;</span><br><span class="line">&#123;<span class="attr">"db"</span>:<span class="number">2</span>,<span class="attr">"key"</span>:<span class="string">"name2"</span>,<span class="attr">"ttl"</span>:<span class="number">-1</span>,<span class="attr">"type"</span>:<span class="string">"string"</span>,<span class="attr">"value"</span>:<span class="string">"BBB"</span>,<span class="attr">"size"</span>:<span class="number">3</span>&#125;</span><br><span class="line">&#123;<span class="attr">"db"</span>:<span class="number">2</span>,<span class="attr">"key"</span>:<span class="string">"name1"</span>,<span class="attr">"ttl"</span>:<span class="number">-1</span>,<span class="attr">"type"</span>:<span class="string">"string"</span>,<span class="attr">"value"</span>:<span class="string">"AAA"</span>,<span class="attr">"size"</span>:<span class="number">3</span>&#125;</span><br><span class="line">&#123;<span class="attr">"db"</span>:<span class="number">3</span>,<span class="attr">"key"</span>:<span class="string">"name2"</span>,<span class="attr">"ttl"</span>:<span class="number">-1</span>,<span class="attr">"type"</span>:<span class="string">"string"</span>,<span class="attr">"value"</span>:<span class="string">"HHH"</span>,<span class="attr">"size"</span>:<span class="number">3</span>&#125;</span><br><span class="line">&#123;<span class="attr">"db"</span>:<span class="number">3</span>,<span class="attr">"key"</span>:<span class="string">"name1"</span>,<span class="attr">"ttl"</span>:<span class="number">-1</span>,<span class="attr">"type"</span>:<span class="string">"string"</span>,<span class="attr">"value"</span>:<span class="string">"RRR"</span>,<span class="attr">"size"</span>:<span class="number">3</span>&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="【16-9-2】导入数据-redis-load"><a href="#【16-9-2】导入数据-redis-load" class="headerlink" title="【16.9.2】导入数据 redis-load"></a><font color="#1BC3FB">【16.9.2】导入数据 redis-load</font></h2><p>在命令行输入 <code>redis-load -h</code> 可以查看：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">redis-load --help  </span><br><span class="line">  Try: redis-load [global options] COMMAND [command options]   </span><br><span class="line">    -u, --uri=S                      Redis URI (e.g. redis://hostname[:port])  </span><br><span class="line">    -d, --database=S                 Redis database (e.g. -d 15)  </span><br><span class="line">    -s, --sleep=S                    Sleep for S seconds after dumping (for debugging)  </span><br><span class="line">    -n, --no_check_utf8  </span><br><span class="line">    -V, --version                    Display version  </span><br><span class="line">    -D, --debug  </span><br><span class="line">        --nosafe</span><br></pre></td></tr></table></figure><p>命令解释：</p><ul><li>-u Redis 连接字符串</li><li>-d 数据库代号，默认是全部</li><li>-s 导出之后的休眠时间</li><li>-n 不检测 UTF-8 编码</li><li>-V 显示版本</li><li>-D 开启调试</li></ul><p>导入示例：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 将 test.json 文件所有内容导入到数据库</span></span><br><span class="line">&lt; test.json redis-load -u 127.0.0.1:6379</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 将 test.json 文件 db 值为 6 的数据导入到数据库 </span></span><br><span class="line">&lt; test.json redis-load -u 127.0.0.1:6379 -d 6</span><br></pre></td></tr></table></figure><p>另外，以下方法也能导入数据：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 将 test.json 文件所有内容导入到数据库</span></span><br><span class="line">cat test.json | redis-load -u 127.0.0.1:6379</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 将 test.json 文件 db 值为 6 的数据导入到数据库 </span></span><br><span class="line">cat test.json | redis-load -u 127.0.0.1:6379 -d 6</span><br></pre></td></tr></table></figure><p>注意：<code>cat</code> 是 Linux 系统专有的命令，在 Windows 系统里没有 <code>cat</code> 这个命令，可以使用 Windows 批处理命令 <code>type</code> 代替 <code>cat</code></p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;center&gt;&lt;font color=&quot;#1BC3FB&quot; size=&quot;4&quot;&gt;Python3 爬虫学习笔记第十六章 —— 【数据储存系列 — Redis】&lt;/font&gt;&lt;/center&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="Python3 学习笔记" scheme="https://www.itrhx.com/categories/Python3-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
      <category term="爬虫学习" scheme="https://www.itrhx.com/categories/Python3-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E7%88%AC%E8%99%AB%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="爬虫" scheme="https://www.itrhx.com/tags/%E7%88%AC%E8%99%AB/"/>
    
      <category term="Redis" scheme="https://www.itrhx.com/tags/Redis/"/>
    
  </entry>
  
  <entry>
    <title>Python3 爬虫学习笔记 C15</title>
    <link href="https://www.itrhx.com/2019/09/10/A45-Python3-spider-C15/"/>
    <id>https://www.itrhx.com/2019/09/10/A45-Python3-spider-C15/</id>
    <published>2019-09-10T11:46:13.293Z</published>
    <updated>2019-09-24T12:41:02.822Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><blockquote><center><font color="#1BC3FB" size="4">Python3 爬虫学习笔记第十五章 —— 【代理的基本使用】</font></center></blockquote><a id="more"></a><hr><h1 id="【15-1】代理初识"><a href="#【15-1】代理初识" class="headerlink" title="【15.1】代理初识"></a><font color="#ff0000">【15.1】代理初识</font></h1><p>大多数网站都有反爬虫机制，如果一段时间内同一个 IP 发送的请求过多，服务器就会拒绝访问，直接禁封该 IP，此时，设置代理即可解决这个问题，网络上有许多免费代理和付费代理，比如<a href="https://www.xicidaili.com/" target="_blank" rel="noopener">西刺代理</a>，<a href="http://www.goubanjia.com/" target="_blank" rel="noopener">全网代理 IP</a>，<a href="https://www.kuaidaili.com/" target="_blank" rel="noopener">快代理</a>等，设置代理需要用到的就是代理 IP 地址和端口号，如果电脑上装有代理软件（例如：酸酸乳SSR），软件一般会在本机创建 HTTP 或 SOCKS 代理服务，直接使用此代理也可以</p><h1 id="【15-2】urllib-库使用代理"><a href="#【15-2】urllib-库使用代理" class="headerlink" title="【15.2】urllib 库使用代理"></a><font color="#ff0000">【15.2】urllib 库使用代理</font></h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> urllib.error <span class="keyword">import</span> URLError</span><br><span class="line"><span class="keyword">from</span> urllib.request <span class="keyword">import</span> ProxyHandler, build_opener</span><br><span class="line"></span><br><span class="line">proxy = <span class="string">'127.0.0.1:1080'</span></span><br><span class="line">proxy_handler = ProxyHandler(&#123;</span><br><span class="line">    <span class="string">'http'</span>: <span class="string">'http://'</span> + proxy,</span><br><span class="line">    <span class="string">'https'</span>: <span class="string">'https://'</span> + proxy</span><br><span class="line">&#125;)</span><br><span class="line">opener = build_opener(proxy_handler)</span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    response = opener.open(<span class="string">'http://httpbin.org/get'</span>)</span><br><span class="line">    print(response.read().decode(<span class="string">'utf8'</span>))</span><br><span class="line"><span class="keyword">except</span> URLError <span class="keyword">as</span> e:</span><br><span class="line">    print(e.reason)</span><br></pre></td></tr></table></figure><p><a href="http://httpbin.org/get" target="_blank" rel="noopener">http://httpbin.org/get</a> 是一个请求测试站点，借助 ProxyHandler 设置代理，参数为字典类型，键名为协议类型，键值为代理，代理的写法：<code>proxy = &#39;127.0.0.1:1080&#39;</code>，其中 127.0.0.1 为 IP 地址，1080 为端口号，这里表示本机的代理软件已经在本地 1080 端口创建了代理服务，代理前面需要加上 http 或者 https 协议，当请求的链接为 http 协议时，ProxyHandler 会自动调用 http 代理，同理，当请求的链接为 https 协议时，ProxyHandler 会自动调用 https 代理，<code>build_opener()</code> 方法传入 ProxyHandler 对象来创建一个 opener，调用 <code>open()</code> 方法传入一个 url 即可通过代理访问该链接，运行结果为一个 JSON，origin 字段为此时客户端的 IP</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="string">"args"</span>: &#123;&#125;, </span><br><span class="line">  <span class="string">"headers"</span>: &#123;</span><br><span class="line">    <span class="string">"Accept-Encoding"</span>: <span class="string">"identity"</span>, </span><br><span class="line">    <span class="string">"Host"</span>: <span class="string">"httpbin.org"</span>, </span><br><span class="line">    <span class="string">"User-Agent"</span>: <span class="string">"Python-urllib/3.6"</span></span><br><span class="line">  &#125;, </span><br><span class="line">  <span class="string">"origin"</span>: <span class="string">"168.70.60.141, 168.70.60.141"</span>, </span><br><span class="line">  <span class="string">"url"</span>: <span class="string">"https://httpbin.org/get"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果是需要认证的代理，只需要在代理前面加入代理认证的用户名密码即可：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> urllib.error <span class="keyword">import</span> URLError</span><br><span class="line"><span class="keyword">from</span> urllib.request <span class="keyword">import</span> ProxyHandler, build_opener</span><br><span class="line"></span><br><span class="line">proxy = <span class="string">'username:password@127.0.0.1:1080'</span></span><br><span class="line">proxy_handler = ProxyHandler(&#123;</span><br><span class="line">    <span class="string">'http'</span>: <span class="string">'http://'</span> + proxy,</span><br><span class="line">    <span class="string">'https'</span>: <span class="string">'https://'</span> + proxy</span><br><span class="line">&#125;)</span><br><span class="line">opener = build_opener(proxy_handler)</span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    response = opener.open(<span class="string">'http://httpbin.org/get'</span>)</span><br><span class="line">    print(response.read().decode(<span class="string">'utf8'</span>))</span><br><span class="line"><span class="keyword">except</span> URLError <span class="keyword">as</span> e:</span><br><span class="line">    print(e.reason)</span><br></pre></td></tr></table></figure><p>如果代理是 SOCKS5 类型，需要用到 <code>socks</code> 模块，设置代理方法如下：</p><blockquote><p>扩展：SOCKS5 是一个代理协议，它在使用TCP/IP协议通讯的前端机器和服务器机器之间扮演一个中介角色，使得内部网中的前端机器变得能够访问 Internet 网中的服务器，或者使通讯更加安全</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> socks</span><br><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"><span class="keyword">from</span> urllib <span class="keyword">import</span> request</span><br><span class="line"><span class="keyword">from</span> urllib.error <span class="keyword">import</span> URLError</span><br><span class="line"></span><br><span class="line">socks.set_default_proxy(socks.SOCKS5, <span class="string">'127.0.0.1'</span>, <span class="number">1080</span>)</span><br><span class="line">socket.socket = socks.socksocket</span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    response = request.urlopen(<span class="string">'http://httpbin.org/get'</span>)</span><br><span class="line">    print(response.read().decode(<span class="string">'utf-8'</span>))</span><br><span class="line"><span class="keyword">except</span> URLError <span class="keyword">as</span> e:</span><br><span class="line">    print(e.reason)</span><br></pre></td></tr></table></figure><h1 id="【15-3】requests-库使用代理"><a href="#【15-3】requests-库使用代理" class="headerlink" title="【15.3】requests 库使用代理"></a><font color="#ff0000">【15.3】requests 库使用代理</font></h1><p>requests 库使用代理只需要传入 proxies 参数即可：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">proxy = <span class="string">'127.0.0.1:1080'</span></span><br><span class="line">proxies = (&#123;</span><br><span class="line">    <span class="string">'http'</span>: <span class="string">'http://'</span> + proxy,</span><br><span class="line">    <span class="string">'https'</span>: <span class="string">'https://'</span> + proxy</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    response = requests.get(<span class="string">'http://httpbin.org/get'</span>, proxies=proxies)</span><br><span class="line">    print(response.text)</span><br><span class="line"><span class="keyword">except</span> requests.exceptions.ChunkedEncodingError <span class="keyword">as</span> e:</span><br><span class="line">    print(<span class="string">'Error'</span>, e.args)</span><br></pre></td></tr></table></figure><p>输出结果：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="string">"args"</span>: &#123;&#125;, </span><br><span class="line">  <span class="string">"headers"</span>: &#123;</span><br><span class="line">    <span class="string">"Accept"</span>: <span class="string">"*/*"</span>, </span><br><span class="line">    <span class="string">"Accept-Encoding"</span>: <span class="string">"gzip, deflate"</span>, </span><br><span class="line">    <span class="string">"Host"</span>: <span class="string">"httpbin.org"</span>, </span><br><span class="line">    <span class="string">"User-Agent"</span>: <span class="string">"python-requests/2.22.0"</span></span><br><span class="line">  &#125;, </span><br><span class="line">  <span class="string">"origin"</span>: <span class="string">"168.70.60.141, 168.70.60.141"</span>, </span><br><span class="line">  <span class="string">"url"</span>: <span class="string">"https://httpbin.org/get"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>同样的，如果是需要认证的代理，也只需要在代理前面加入代理认证的用户名密码即可：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">proxy = <span class="string">'username:password@127.0.0.1:1080'</span></span><br><span class="line">proxies = (&#123;</span><br><span class="line">    <span class="string">'http'</span>: <span class="string">'http://'</span> + proxy,</span><br><span class="line">    <span class="string">'https'</span>: <span class="string">'https://'</span> + proxy</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    response = requests.get(<span class="string">'http://httpbin.org/get'</span>, proxies=proxies)</span><br><span class="line">    print(response.text)</span><br><span class="line"><span class="keyword">except</span> requests.exceptions.ChunkedEncodingError <span class="keyword">as</span> e:</span><br><span class="line">    print(<span class="string">'Error'</span>, e.args)</span><br></pre></td></tr></table></figure><p>如果代理是 SOCKS5 类型，需要用到  <code>requests[socks]</code> 模块或者 <code>socks</code> 模块，使用 <code>requests[socks]</code> 模块时设置代理方法如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">proxy = <span class="string">'127.0.0.1:1080'</span></span><br><span class="line">proxies = &#123;</span><br><span class="line">    <span class="string">'http'</span>: <span class="string">'socks5://'</span> + proxy,</span><br><span class="line">    <span class="string">'https'</span>: <span class="string">'socks5://'</span> + proxy</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    response = requests.get(<span class="string">'http://httpbin.org/get'</span>, proxies=proxies)</span><br><span class="line">    print(response.text)</span><br><span class="line"><span class="keyword">except</span> requests.exceptions.ConnectionError <span class="keyword">as</span> e:</span><br><span class="line">    print(<span class="string">'Error'</span>, e.args)</span><br></pre></td></tr></table></figure><p>使用 <code>socks</code> 模块时设置代理方法如下（此类方法为全局设置）：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> socks</span><br><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"></span><br><span class="line">socks.set_default_proxy(socks.SOCKS5, <span class="string">'127.0.0.1'</span>, <span class="number">1080</span>)</span><br><span class="line">socket.socket = socks.socksocket</span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    response = requests.get(<span class="string">'http://httpbin.org/get'</span>)</span><br><span class="line">    print(response.text)</span><br><span class="line"><span class="keyword">except</span> requests.exceptions.ConnectionError <span class="keyword">as</span> e:</span><br><span class="line">    print(<span class="string">'Error'</span>, e.args)</span><br></pre></td></tr></table></figure><h1 id="【15-4】Selenium-使用代理"><a href="#【15-4】Selenium-使用代理" class="headerlink" title="【15.4】Selenium 使用代理"></a><font color="#ff0000">【15.4】Selenium 使用代理</font></h1><h2 id="【15-4-1】Chrome"><a href="#【15-4-1】Chrome" class="headerlink" title="【15.4.1】Chrome"></a><font color="#1BC3FB">【15.4.1】Chrome</font></h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"></span><br><span class="line">proxy = <span class="string">'127.0.0.1:1080'</span></span><br><span class="line">chrome_options = webdriver.ChromeOptions()</span><br><span class="line">chrome_options.add_argument(<span class="string">'--proxy-server=http://'</span> + proxy)</span><br><span class="line">path = <span class="string">r'F:\PycharmProjects\Python3爬虫\chromedriver.exe'</span></span><br><span class="line">browser = webdriver.Chrome(executable_path=path, chrome_options=chrome_options)</span><br><span class="line">browser.get(<span class="string">'http://httpbin.org/get'</span>)</span><br></pre></td></tr></table></figure><p>通过 ChromeOptions 来设置代理，在创建 Chrome 对象的时候用 chrome_options 参数传递即可，访问目标链接后显示如下信息：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="string">"args"</span>: &#123;&#125;, </span><br><span class="line">  <span class="string">"headers"</span>: &#123;</span><br><span class="line">    <span class="string">"Accept"</span>: <span class="string">"text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3"</span>, </span><br><span class="line">    <span class="string">"Accept-Encoding"</span>: <span class="string">"gzip, deflate"</span>, </span><br><span class="line">    <span class="string">"Accept-Language"</span>: <span class="string">"zh-CN,zh;q=0.9"</span>, </span><br><span class="line">    <span class="string">"Host"</span>: <span class="string">"httpbin.org"</span>, </span><br><span class="line">    <span class="string">"Upgrade-Insecure-Requests"</span>: <span class="string">"1"</span>, </span><br><span class="line">    <span class="string">"User-Agent"</span>: <span class="string">"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/75.0.3770.142 Safari/537.36"</span></span><br><span class="line">  &#125;, </span><br><span class="line">  <span class="string">"origin"</span>: <span class="string">"168.70.60.141, 168.70.60.141"</span>, </span><br><span class="line">  <span class="string">"url"</span>: <span class="string">"https://httpbin.org/get"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果是认证代理，则设置方法如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.chrome.options <span class="keyword">import</span> Options</span><br><span class="line"><span class="keyword">import</span> zipfile</span><br><span class="line"></span><br><span class="line">ip = <span class="string">'127.0.0.1'</span></span><br><span class="line">port = <span class="number">1080</span></span><br><span class="line">username = <span class="string">'username'</span></span><br><span class="line">password = <span class="string">'password'</span></span><br><span class="line"></span><br><span class="line">manifest_json = <span class="string">"""&#123;"version":"1.0.0","manifest_version": 2,"name":"Chrome Proxy","permissions": ["proxy","tabs","unlimitedStorage","storage","&lt;all_urls&gt;","webRequest","webRequestBlocking"],"background": &#123;"scripts": ["background.js"]</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"></span><br><span class="line">background_js =<span class="string">"""</span></span><br><span class="line"><span class="string">var config = &#123;</span></span><br><span class="line"><span class="string">        mode: "fixed_servers",</span></span><br><span class="line"><span class="string">        rules: &#123;</span></span><br><span class="line"><span class="string">          singleProxy: &#123;</span></span><br><span class="line"><span class="string">            scheme: "http",</span></span><br><span class="line"><span class="string">            host: "%(ip) s",</span></span><br><span class="line"><span class="string">            port: %(port) s</span></span><br><span class="line"><span class="string">          &#125;</span></span><br><span class="line"><span class="string">        &#125;</span></span><br><span class="line"><span class="string">      &#125;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">chrome.proxy.settings.set(&#123;value: config, scope: "regular"&#125;, function() &#123;&#125;);</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">function callbackFn(details) &#123;</span></span><br><span class="line"><span class="string">    return &#123;</span></span><br><span class="line"><span class="string">        authCredentials: &#123;username: "%(username) s",</span></span><br><span class="line"><span class="string">            password: "%(password) s"</span></span><br><span class="line"><span class="string">        &#125;</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">chrome.webRequest.onAuthRequired.addListener(</span></span><br><span class="line"><span class="string">            callbackFn,</span></span><br><span class="line"><span class="string">            &#123;urls: ["&lt;all_urls&gt;"]&#125;,</span></span><br><span class="line"><span class="string">            ['blocking']</span></span><br><span class="line"><span class="string">)</span></span><br><span class="line"><span class="string">"""</span> % &#123;<span class="string">'ip'</span>: ip, <span class="string">'port'</span>: port, <span class="string">'username'</span>: username, <span class="string">'password'</span>: password&#125;</span><br><span class="line"></span><br><span class="line">plugin_file = <span class="string">'proxy_auth_plugin.zip'</span></span><br><span class="line"><span class="keyword">with</span> zipfile.ZipFile(plugin_file, <span class="string">'w'</span>) <span class="keyword">as</span> zp:</span><br><span class="line">    zp.writestr(<span class="string">"manifest.json"</span>, manifest_json)</span><br><span class="line">    zp.writestr(<span class="string">"background.js"</span>, background_js)</span><br><span class="line">chrome_options = Options()</span><br><span class="line">chrome_options.add_argument(<span class="string">"--start-maximized"</span>)</span><br><span class="line">path = <span class="string">r'F:\PycharmProjects\Python3爬虫\chromedriver.exe'</span></span><br><span class="line">chrome_options.add_extension(plugin_file)</span><br><span class="line">browser = webdriver.Chrome(executable_path=path, chrome_options=chrome_options)</span><br><span class="line">browser.get(<span class="string">'http://httpbin.org/get'</span>)</span><br></pre></td></tr></table></figure><p>需要在本地创建一个 manifest.json 配置文件和 background.js 脚本来设置认证代理。运行代码之后本地会生成一个 proxy_auth_plugin.zip 文件来保存当前配置</p><h2 id="【15-4-1】PhantomJS"><a href="#【15-4-1】PhantomJS" class="headerlink" title="【15.4.1】PhantomJS"></a><font color="#1BC3FB">【15.4.1】PhantomJS</font></h2><p>借助 service_args 参数，也就是命令行参数即可设置代理：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"></span><br><span class="line">service_args = [</span><br><span class="line">    <span class="string">'--proxy=127.0.0.1:1080'</span>,</span><br><span class="line">    <span class="string">'--proxy-type=http'</span></span><br><span class="line">]</span><br><span class="line">path = <span class="string">r'F:\PycharmProjects\Python3爬虫\phantomjs-2.1.1\bin\phantomjs.exe'</span></span><br><span class="line">browser = webdriver.PhantomJS(executable_path=path, service_args=service_args)</span><br><span class="line">browser.get(<span class="string">'http://httpbin.org/get'</span>)</span><br><span class="line">print(browser.page_source)</span><br></pre></td></tr></table></figure><p>运行结果：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;html&gt;&lt;head&gt;&lt;/head&gt;&lt;body&gt;&lt;pre style="word-wrap: break-word; white-space: pre-wrap;"&gt;&#123;</span><br><span class="line">  <span class="string">"args"</span>: &#123;&#125;, </span><br><span class="line">  <span class="string">"headers"</span>: &#123;</span><br><span class="line">    <span class="string">"Accept"</span>: <span class="string">"text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8"</span>, </span><br><span class="line">    <span class="string">"Accept-Encoding"</span>: <span class="string">"gzip, deflate"</span>, </span><br><span class="line">    <span class="string">"Accept-Language"</span>: <span class="string">"zh-CN,en,*"</span>, </span><br><span class="line">    <span class="string">"Host"</span>: <span class="string">"httpbin.org"</span>, </span><br><span class="line">    <span class="string">"User-Agent"</span>: <span class="string">"Mozilla/5.0 (Windows NT 6.2; WOW64) AppleWebKit/538.1 (KHTML, like Gecko) PhantomJS/2.1.1 Safari/538.1"</span></span><br><span class="line">  &#125;, </span><br><span class="line">  <span class="string">"origin"</span>: <span class="string">"168.70.60.141, 168.70.60.141"</span>, </span><br><span class="line">  <span class="string">"url"</span>: <span class="string">"https://httpbin.org/get"</span></span><br><span class="line">&#125;</span><br><span class="line">&lt;/pre&gt;&lt;/body&gt;&lt;/html&gt;</span><br></pre></td></tr></table></figure><p>如果是需要认证的代理，只需要在 service_args 参数加入 –proxy-auth 选项即可：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"></span><br><span class="line">service_args = [</span><br><span class="line">    <span class="string">'--proxy=127.0.0.1:1080'</span>,</span><br><span class="line">    <span class="string">'--proxy-type=http'</span>,</span><br><span class="line">    <span class="string">'--proxy-auth=username:password'</span></span><br><span class="line">]</span><br><span class="line">path = <span class="string">r'F:\PycharmProjects\Python3爬虫\phantomjs-2.1.1\bin\phantomjs.exe'</span></span><br><span class="line">browser = webdriver.PhantomJS(executable_path=path, service_args=service_args)</span><br><span class="line">browser.get(<span class="string">'http://httpbin.org/get'</span>)</span><br><span class="line">print(browser.page_source)</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;center&gt;&lt;font color=&quot;#1BC3FB&quot; size=&quot;4&quot;&gt;Python3 爬虫学习笔记第十五章 —— 【代理的基本使用】&lt;/font&gt;&lt;/center&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="Python3 学习笔记" scheme="https://www.itrhx.com/categories/Python3-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
      <category term="爬虫学习" scheme="https://www.itrhx.com/categories/Python3-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E7%88%AC%E8%99%AB%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="爬虫" scheme="https://www.itrhx.com/tags/%E7%88%AC%E8%99%AB/"/>
    
      <category term="代理" scheme="https://www.itrhx.com/tags/%E4%BB%A3%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>Python3 爬虫学习笔记 C14</title>
    <link href="https://www.itrhx.com/2019/09/08/A44-Python3-spider-C14/"/>
    <id>https://www.itrhx.com/2019/09/08/A44-Python3-spider-C14/</id>
    <published>2019-09-07T17:38:41.491Z</published>
    <updated>2019-09-24T12:43:31.445Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><blockquote><center><font color="#1BC3FB" size="4">Python3 爬虫学习笔记第十四章 —— 【验证码对抗系列 — 点触验证码】</font></center></blockquote><a id="more"></a><hr><h1 id="【14-1】关于点触验证码"><a href="#【14-1】关于点触验证码" class="headerlink" title="【14.1】关于点触验证码"></a><font color="#ff0000">【14.1】关于点触验证码</font></h1><p>点触验证码是由杭州微触科技有限公司研发的新一代的互联网验证码，使用点击的形式完成验证，采用专利的印刷算法以及加密算法，保证每次请求到的验证图具有极高的安全性，常见的点触验证码如下：</p><fancybox><br><img src="https://cdn.jsdelivr.net/gh/TRHX/ImageHosting/ITRHX-PIC/A44/01.png" alt="01"><br></fancybox><hr><h1 id="【14-2】点触验证码攻克思路"><a href="#【14-2】点触验证码攻克思路" class="headerlink" title="【14.2】点触验证码攻克思路"></a><font color="#ff0000">【14.2】点触验证码攻克思路</font></h1><p>点触验证码相对其他类型验证码比较复杂，如果依靠 OCR 图像识别点触验证码，则识别难度非常大，此时就要用到互联网的验证码服务平台，这些服务平台全部都是人工在线识别，准确率非常高，原理就是先将验证码图片提交给平台，平台会返回识别结果在图片中的坐标位置，然后我们再解析坐标模拟点击即可，常见的打码平台有超级鹰、云打码等，打码平台是收费的，拿超级鹰来说，1元 = 1000题分，识别一次验证码将花费一定的题分，不同类型验证码需要的题分不同，验证码越复杂所需题分越高，比如 7 位中文汉字需要 70 题分，常见 4 ~ 6 位英文数字只要 10 题分，其他打码平台价格也都差不多</p><p>以下以<a href="http://www.chaojiying.com/" target="_blank" rel="noopener">超级鹰打码平台</a>和<a href="https://www.12306.cn/" target="_blank" rel="noopener">中国铁路12306官网</a>来做练习</p><hr><h1 id="【14-3】模拟登录-12306-—-总体思路"><a href="#【14-3】模拟登录-12306-—-总体思路" class="headerlink" title="【14.3】模拟登录 12306 — 总体思路"></a><font color="#ff0000">【14.3】模拟登录 12306 — 总体思路</font></h1><p>首先在超级鹰打码平台注册账号并申请一个软件 ID，官网：<a href="http://www.chaojiying.com/" target="_blank" rel="noopener">http://www.chaojiying.com/</a> ，先充值一块钱得到 1000 题分，观察 12306 官网，发现验证码是要我们点击所有满足条件的图片，一般有 1~4 张图片满足要求，由此可确定在超级鹰打码平台的验证码类型为 9004（坐标多选,返回1~4个坐标,如:x1,y1|x2,y2|x3,y3）， 获取其 Python API：<a href="http://www.chaojiying.com/download/Chaojiying_Python.rar" target="_blank" rel="noopener">http://www.chaojiying.com/download/Chaojiying_Python.rar</a> ，然后用 Selenium 模拟登陆，获取到验证码，并将验证码发送给超级鹰后台，返回识别图片的坐标，最后模拟点击即可，整个过程的实现由主程序 <code>12306.py</code> 和超级鹰 API <code>chaojiying.py</code> 组成</p><p>整个程序包含的函数：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">()</span>:</span> 初始化 WebDriver、Chaojiying 对象等</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">crack</span><span class="params">()</span>:</span> 破解入口、获取、识别验证码、模拟登录</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">open</span><span class="params">()</span>:</span> 账号密码输入</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_screenshot</span><span class="params">()</span>:</span> 整个页面截图</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_touclick_element</span><span class="params">()</span>:</span> 获取验证码位置</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_position</span><span class="params">()</span>:</span> 获取验证码坐标</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_touclick_image</span><span class="params">()</span>:</span> 剪裁验证码部分</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_points</span><span class="params">(self, captcha_result)</span>:</span> 分析超级鹰返回的坐标</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">touch_click_words</span><span class="params">(self, locations)</span>:</span> 模拟点击符合要求的图片</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">login</span><span class="params">(self)</span>:</span> 点击登陆按钮，完成模拟登录</span><br></pre></td></tr></table></figure><p>整个程序用到的库：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">from</span> io <span class="keyword">import</span> BytesIO</span><br><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image</span><br><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.chrome.options <span class="keyword">import</span> Options</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver <span class="keyword">import</span> ActionChains</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.common.by <span class="keyword">import</span> By</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.support.ui <span class="keyword">import</span> WebDriverWait</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.support <span class="keyword">import</span> expected_conditions <span class="keyword">as</span> EC</span><br><span class="line"><span class="keyword">from</span> chaojiying <span class="keyword">import</span> Chaojiying</span><br><span class="line"><span class="keyword">from</span> selenium.common.exceptions <span class="keyword">import</span> TimeoutException</span><br></pre></td></tr></table></figure><hr><h1 id="【14-4】主函数"><a href="#【14-4】主函数" class="headerlink" title="【14.4】主函数"></a><font color="#ff0000">【14.4】主函数</font></h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    crack = CrackTouClick()</span><br><span class="line">    crack.crack()</span><br></pre></td></tr></table></figure><hr><h1 id="【14-5】初始化函数"><a href="#【14-5】初始化函数" class="headerlink" title="【14.5】初始化函数"></a><font color="#ff0000">【14.5】初始化函数</font></h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">USERNAME = <span class="string">'155********'</span></span><br><span class="line">PASSWORD = <span class="string">'***********'</span></span><br><span class="line"></span><br><span class="line">CHAOJIYING_USERNAME = <span class="string">'*******'</span></span><br><span class="line">CHAOJIYING_PASSWORD = <span class="string">'*******'</span></span><br><span class="line">CHAOJIYING_SOFT_ID = <span class="string">'********'</span></span><br><span class="line">CHAOJIYING_KIND = <span class="string">'9004'</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CrackTouClick</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.url = <span class="string">'https://kyfw.12306.cn/otn/resources/login.html'</span></span><br><span class="line">        path = <span class="string">r'F:\PycharmProjects\Python3爬虫\chromedriver.exe'</span></span><br><span class="line">        chrome_options = Options()</span><br><span class="line">        chrome_options.add_argument(<span class="string">'--start-maximized'</span>)</span><br><span class="line">        self.browser = webdriver.Chrome(executable_path=path, chrome_options=chrome_options)</span><br><span class="line">        self.wait = WebDriverWait(self.browser, <span class="number">20</span>)</span><br><span class="line">        self.email = USERNAME</span><br><span class="line">        self.password = PASSWORD</span><br><span class="line">        self.chaojiying = Chaojiying_Client(CHAOJIYING_USERNAME, CHAOJIYING_PASSWORD, CHAOJIYING_SOFT_ID)</span><br></pre></td></tr></table></figure><p>定义 12306 账号（<code>USERNAME</code>）、密码（<code>PASSWORD</code>）、超级鹰用户名（<code>CHAOJIYING_USERNAME</code>）、超级鹰登录密码（<code>CHAOJIYING_PASSWORD</code>）、超级鹰软件 ID（<code>CHAOJIYING_SOFT_ID</code>）、验证码类型（<code>CHAOJIYING_KIND</code>），登录链接 url：<a href="https://kyfw.12306.cn/otn/resources/login.html" target="_blank" rel="noopener">https://kyfw.12306.cn/otn/resources/login.html</a> ，谷歌浏览器驱动的目录（<code>path</code>），浏览器启动参数，并将相关参数传递给超级鹰 API</p><hr><h1 id="【14-6】破解入口函数"><a href="#【14-6】破解入口函数" class="headerlink" title="【14.6】破解入口函数"></a><font color="#ff0000">【14.6】破解入口函数</font></h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">crack</span><span class="params">(self)</span>:</span></span><br><span class="line">    self.open()</span><br><span class="line">    image = self.get_touclick_image()</span><br><span class="line">    bytes_array = BytesIO()</span><br><span class="line">    image.save(bytes_array, format=<span class="string">'PNG'</span>)</span><br><span class="line">    result = self.chaojiying.PostPic(bytes_array.getvalue(), CHAOJIYING_KIND)</span><br><span class="line">    print(result)</span><br><span class="line">    locations = self.get_points(result)</span><br><span class="line">    self.touch_click_words(locations)</span><br><span class="line">    self.login()</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        success = self.wait.until(EC.text_to_be_present_in_element((By.CSS_SELECTOR, <span class="string">'.welcome-name'</span>), <span class="string">'用户姓名'</span>))</span><br><span class="line">        print(success)</span><br><span class="line">        cc = self.browser.find_element(By.CSS_SELECTOR, <span class="string">'.welcome-name'</span>)</span><br><span class="line">        print(cc.text)</span><br><span class="line">    <span class="keyword">except</span> TimeoutException:</span><br><span class="line">        self.chaojiying.ReportError(result[<span class="string">'pic_id'</span>])</span><br><span class="line">        self.crack()</span><br></pre></td></tr></table></figure><p>调用 <code>open()</code> 函数输入账号密码</p><p>调用 <code>get_touclick_image()</code> 函数获取验证码图片</p><p>利用超级鹰 Python API <code>PostPic()</code> 方法即可把图片发送给超级鹰后台，发送的图像是字节流格式，返回的结果是一个 JSON，如果识别成功，典型的返回结果类似于：<code>{&#39;err_no&#39;: 0, &#39;err_str&#39;: &#39;OK&#39;, &#39;pic_id&#39;: &#39;6002001380949200001&#39;, &#39;pic_str&#39;: &#39;132,127|56,77&#39;, &#39;md5&#39;: &#39;1f8e1d4bef8b11484cb1f1f34299865b&#39;}</code>，其中，pic_str 就是识别的文字的坐标，是以字符串形式返回的，每个坐标都以 | 分隔</p><p>调用 <code>get_points()</code> 函数解析超级鹰识别结果</p><p>调用 <code>touch_click_words()</code> 函数对符合要求的图片进行点击，然后点击登陆按钮模拟登陆</p><p>使用 <code>try-except</code> 语句判断是否出现了用户信息，判断依据是是否有用户姓名的出现，出现的姓名和实际姓名一致则登录成功，如果失败了就重试，超级鹰会返回该分值</p><hr><h1 id="【14-7】账号密码输入函数"><a href="#【14-7】账号密码输入函数" class="headerlink" title="【14.7】账号密码输入函数"></a><font color="#ff0000">【14.7】账号密码输入函数</font></h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">open</span><span class="params">(self)</span>:</span></span><br><span class="line">    self.browser.get(self.url)</span><br><span class="line">    login = self.wait.until(EC.presence_of_element_located((By.CSS_SELECTOR, <span class="string">'.login-hd-account'</span>)))</span><br><span class="line">    login.click()</span><br><span class="line">    time.sleep(<span class="number">3</span>)</span><br><span class="line">    username = self.wait.until(EC.presence_of_element_located((By.CSS_SELECTOR, <span class="string">'input#J-userName'</span>)))</span><br><span class="line">    password = self.wait.until(EC.presence_of_element_located((By.CSS_SELECTOR, <span class="string">'input#J-password'</span>)))</span><br><span class="line">    username.send_keys(self.email)</span><br><span class="line">    password.send_keys(self.password)</span><br></pre></td></tr></table></figure><p>分析页面可知，登陆页面 URL 为：<a href="https://kyfw.12306.cn/otn/resources/login.html" target="_blank" rel="noopener">https://kyfw.12306.cn/otn/resources/login.html</a> ，该页面默认出现的是扫描二维码登陆，所以要先点击账号登录，找到该 CSS 元素为 <code>login-hd-account</code>，调用 <code>click()</code> 方法实现模拟点击，此时出现账号密码输入框，同样找到其 ID 分别为 <code>J-userName</code> 和 <code>J-password</code>，调用 <code>send_keys()</code> 方法输入账号密码</p><hr><h1 id="【14-8】页面截图函数"><a href="#【14-8】页面截图函数" class="headerlink" title="【14.8】页面截图函数"></a><font color="#ff0000">【14.8】页面截图函数</font></h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_screenshot</span><span class="params">(self)</span>:</span></span><br><span class="line">    screenshot = self.browser.get_screenshot_as_png()</span><br><span class="line">    screenshot = Image.open(BytesIO(screenshot))</span><br><span class="line">    <span class="keyword">return</span> screenshot</span><br></pre></td></tr></table></figure><p>对整个页面进行截图</p><hr><h1 id="【14-9】验证码元素查找函数"><a href="#【14-9】验证码元素查找函数" class="headerlink" title="【14.9】验证码元素查找函数"></a><font color="#ff0000">【14.9】验证码元素查找函数</font></h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_touclick_element</span><span class="params">(self)</span>:</span></span><br><span class="line">    element = self.wait.until(EC.presence_of_element_located((By.CSS_SELECTOR, <span class="string">'.login-pwd-code'</span>)))</span><br><span class="line">    <span class="keyword">return</span> element</span><br></pre></td></tr></table></figure><p>同样分析页面，验证码所在位置的 CSS 为 <code>login-pwd-code</code></p><hr><h1 id="【14-10】获取验证码坐标函数"><a href="#【14-10】获取验证码坐标函数" class="headerlink" title="【14.10】获取验证码坐标函数"></a><font color="#ff0000">【14.10】获取验证码坐标函数</font></h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_position</span><span class="params">(self)</span>:</span></span><br><span class="line">    element = self.get_touclick_element()</span><br><span class="line">    time.sleep(<span class="number">3</span>)</span><br><span class="line">    location = element.location</span><br><span class="line">    size = element.size</span><br><span class="line">    top, bottom, left, right = location[<span class="string">'y'</span>], location[<span class="string">'y'</span>] + size[<span class="string">'height'</span>], location[<span class="string">'x'</span>], location[<span class="string">'x'</span>] + size[<span class="string">'width'</span>]</span><br><span class="line">    <span class="keyword">return</span> (top, bottom, left, right)</span><br></pre></td></tr></table></figure><p>location 属性可以返回该图片对象在浏览器中的位置，坐标轴是以屏幕左上角为原点，x 轴向右递增，y 轴向下递增，size 属性可以返回该图片对象的高度和宽度，由此可以得到验证码的位置信息</p><hr><h1 id="【14-11】验证码剪裁函数"><a href="#【14-11】验证码剪裁函数" class="headerlink" title="【14.11】验证码剪裁函数"></a><font color="#ff0000">【14.11】验证码剪裁函数</font></h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_touclick_image</span><span class="params">(self, name=<span class="string">'12306.png'</span>)</span>:</span></span><br><span class="line">    top, bottom, left, right = self.get_position()</span><br><span class="line">    screenshot = self.get_screenshot()</span><br><span class="line">    captcha = screenshot.crop((left, top, right, bottom))</span><br><span class="line">    captcha.save(name)</span><br><span class="line">    <span class="keyword">return</span> captcha</span><br></pre></td></tr></table></figure><p>根据验证码的坐标信息，对页面截图进行剪裁，得到验证码部分，将其保存为 12306.png</p><hr><h1 id="【14-12】验证码坐标解析函数"><a href="#【14-12】验证码坐标解析函数" class="headerlink" title="【14.12】验证码坐标解析函数"></a><font color="#ff0000">【14.12】验证码坐标解析函数</font></h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_points</span><span class="params">(self, captcha_result)</span>:</span></span><br><span class="line">    groups = captcha_result.get(<span class="string">'pic_str'</span>).split(<span class="string">'|'</span>)</span><br><span class="line">    locations = [[int(number) <span class="keyword">for</span> number <span class="keyword">in</span> group.split(<span class="string">','</span>)] <span class="keyword">for</span> group <span class="keyword">in</span> groups]</span><br><span class="line">    <span class="keyword">return</span> locations</span><br></pre></td></tr></table></figure><p><code>get_points()</code> 方法将超级鹰的验证码识别结果变成列表的形式</p><hr><h1 id="【14-13】验证码模拟点击函数"><a href="#【14-13】验证码模拟点击函数" class="headerlink" title="【14.13】验证码模拟点击函数"></a><font color="#ff0000">【14.13】验证码模拟点击函数</font></h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">touch_click_words</span><span class="params">(self, locations)</span>:</span></span><br><span class="line">    <span class="keyword">for</span> location <span class="keyword">in</span> locations:</span><br><span class="line">        print(location)</span><br><span class="line">        ActionChains(self.browser).move_to_element_with_offset(self.get_touclick_element(), location[<span class="number">0</span>]/<span class="number">1.25</span>, location[<span class="number">1</span>]/<span class="number">1.25</span>).click().perform()</span><br></pre></td></tr></table></figure><p><code>touch_click_words()</code> 方法通过调用 <code>move_to_element_with_offset()</code> 方法依次传入解析后的坐标，点击即可</p><hr><h1 id="【14-14】模拟点击登陆函数"><a href="#【14-14】模拟点击登陆函数" class="headerlink" title="【14.14】模拟点击登陆函数"></a><font color="#ff0000">【14.14】模拟点击登陆函数</font></h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">login</span><span class="params">(self)</span>:</span></span><br><span class="line">    submit = self.wait.until(EC.element_to_be_clickable((By.ID, <span class="string">'J-login'</span>)))</span><br><span class="line">    submit.click()</span><br></pre></td></tr></table></figure><p>分析页面，找到登陆按钮的 ID 为 <code>J-login</code>，调用 <code>click()</code> 方法模拟点击按钮实现登录</p><hr><h1 id="【14-15】效果实现动图"><a href="#【14-15】效果实现动图" class="headerlink" title="【14.15】效果实现动图"></a><font color="#ff0000">【14.15】效果实现动图</font></h1><p>最终实现效果图：（关键信息已经过打码处理）</p><fancybox><br><img src="https://cdn.jsdelivr.net/gh/TRHX/ImageHosting/ITRHX-PIC/A44/12306.gif" alt="02"><br></fancybox><hr><h1 id="【14-16】完整代码"><a href="#【14-16】完整代码" class="headerlink" title="【14.16】完整代码"></a><font color="#ff0000">【14.16】完整代码</font></h1><p><code>12306.py</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">from</span> io <span class="keyword">import</span> BytesIO</span><br><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image</span><br><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.chrome.options <span class="keyword">import</span> Options</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver <span class="keyword">import</span> ActionChains</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.common.by <span class="keyword">import</span> By</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.support.ui <span class="keyword">import</span> WebDriverWait</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.support <span class="keyword">import</span> expected_conditions <span class="keyword">as</span> EC</span><br><span class="line"><span class="keyword">from</span> chaojiying <span class="keyword">import</span> Chaojiying_Client</span><br><span class="line"><span class="keyword">from</span> selenium.common.exceptions <span class="keyword">import</span> TimeoutException</span><br><span class="line"></span><br><span class="line">USERNAME = <span class="string">'155********'</span></span><br><span class="line">PASSWORD = <span class="string">'***********'</span></span><br><span class="line"></span><br><span class="line">CHAOJIYING_USERNAME = <span class="string">'***********'</span></span><br><span class="line">CHAOJIYING_PASSWORD = <span class="string">'***********'</span></span><br><span class="line">CHAOJIYING_SOFT_ID = <span class="string">'******'</span></span><br><span class="line">CHAOJIYING_KIND = <span class="string">'9004'</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CrackTouClick</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span>     <span class="comment">#登陆</span></span><br><span class="line">        self.url = <span class="string">'https://kyfw.12306.cn/otn/resources/login.html'</span></span><br><span class="line">        path = <span class="string">r'F:\PycharmProjects\Python3爬虫\chromedriver.exe'</span></span><br><span class="line">        chrome_options = Options()</span><br><span class="line">        chrome_options.add_argument(<span class="string">'--start-maximized'</span>)</span><br><span class="line">        self.browser = webdriver.Chrome(executable_path=path, chrome_options=chrome_options)</span><br><span class="line">        self.wait = WebDriverWait(self.browser, <span class="number">20</span>)</span><br><span class="line">        self.email = USERNAME</span><br><span class="line">        self.password = PASSWORD</span><br><span class="line">        self.chaojiying = Chaojiying_Client(CHAOJIYING_USERNAME, CHAOJIYING_PASSWORD, CHAOJIYING_SOFT_ID)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">crack</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.open()</span><br><span class="line">        image = self.get_touclick_image()</span><br><span class="line">        bytes_array = BytesIO()</span><br><span class="line">        image.save(bytes_array, format=<span class="string">'PNG'</span>)</span><br><span class="line">        result = self.chaojiying.PostPic(bytes_array.getvalue(), CHAOJIYING_KIND)</span><br><span class="line">        print(result)</span><br><span class="line">        locations = self.get_points(result)</span><br><span class="line">        self.touch_click_words(locations)</span><br><span class="line">        self.login()</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            success = self.wait.until(EC.text_to_be_present_in_element((By.CSS_SELECTOR, <span class="string">'.welcome-name'</span>), <span class="string">'谭仁侯'</span>))</span><br><span class="line">            print(success)</span><br><span class="line">            cc = self.browser.find_element(By.CSS_SELECTOR, <span class="string">'.welcome-name'</span>)</span><br><span class="line">            print(cc.text)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">except</span> TimeoutException:</span><br><span class="line">            self.chaojiying.ReportError(result[<span class="string">'pic_id'</span>])</span><br><span class="line">            self.crack()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">open</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.browser.get(self.url)</span><br><span class="line">        login = self.wait.until(EC.presence_of_element_located((By.CSS_SELECTOR, <span class="string">'.login-hd-account'</span>)))</span><br><span class="line">        login.click()</span><br><span class="line">        time.sleep(<span class="number">3</span>)</span><br><span class="line">        username = self.wait.until(EC.presence_of_element_located((By.CSS_SELECTOR, <span class="string">'input#J-userName'</span>)))</span><br><span class="line">        password = self.wait.until(EC.presence_of_element_located((By.CSS_SELECTOR, <span class="string">'input#J-password'</span>)))</span><br><span class="line">        username.send_keys(self.email)</span><br><span class="line">        password.send_keys(self.password)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_screenshot</span><span class="params">(self)</span>:</span></span><br><span class="line">        screenshot = self.browser.get_screenshot_as_png()</span><br><span class="line">        screenshot = Image.open(BytesIO(screenshot))</span><br><span class="line">        <span class="keyword">return</span> screenshot</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_touclick_element</span><span class="params">(self)</span>:</span></span><br><span class="line">        element = self.wait.until(EC.presence_of_element_located((By.CSS_SELECTOR, <span class="string">'.login-pwd-code'</span>)))</span><br><span class="line">        <span class="keyword">return</span> element</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_position</span><span class="params">(self)</span>:</span></span><br><span class="line">        element = self.get_touclick_element()</span><br><span class="line">        time.sleep(<span class="number">3</span>)</span><br><span class="line">        location = element.location</span><br><span class="line">        size = element.size</span><br><span class="line">        top, bottom, left, right = location[<span class="string">'y'</span>], location[<span class="string">'y'</span>] + size[<span class="string">'height'</span>], location[<span class="string">'x'</span>], location[<span class="string">'x'</span>] + size[<span class="string">'width'</span>]</span><br><span class="line">        <span class="keyword">return</span> (top, bottom, left, right)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_touclick_image</span><span class="params">(self, name=<span class="string">'12306.png'</span>)</span>:</span></span><br><span class="line">        top, bottom, left, right = self.get_position()</span><br><span class="line">        screenshot = self.get_screenshot()</span><br><span class="line">        captcha = screenshot.crop((left, top, right, bottom))</span><br><span class="line">        captcha.save(name)</span><br><span class="line">        <span class="keyword">return</span> captcha</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_points</span><span class="params">(self, captcha_result)</span>:</span></span><br><span class="line">        groups = captcha_result.get(<span class="string">'pic_str'</span>).split(<span class="string">'|'</span>)</span><br><span class="line">        locations = [[int(number) <span class="keyword">for</span> number <span class="keyword">in</span> group.split(<span class="string">','</span>)] <span class="keyword">for</span> group <span class="keyword">in</span> groups]</span><br><span class="line">        <span class="keyword">return</span> locations</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">touch_click_words</span><span class="params">(self, locations)</span>:</span></span><br><span class="line">        <span class="keyword">for</span> location <span class="keyword">in</span> locations:</span><br><span class="line">            print(location)</span><br><span class="line">            ActionChains(self.browser).move_to_element_with_offset(self.get_touclick_element(), location[<span class="number">0</span>]/<span class="number">1.25</span>, location[<span class="number">1</span>]/<span class="number">1.25</span>).click().perform()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">login</span><span class="params">(self)</span>:</span></span><br><span class="line">        submit = self.wait.until(EC.element_to_be_clickable((By.ID, <span class="string">'J-login'</span>)))</span><br><span class="line">        submit.click()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    crack = CrackTouClick()</span><br><span class="line">    crack.crack()</span><br></pre></td></tr></table></figure><p><code>chaojiying.py</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">from</span> hashlib <span class="keyword">import</span> md5</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Chaojiying_Client</span><span class="params">(object)</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, username, password, soft_id)</span>:</span></span><br><span class="line">        self.username = username</span><br><span class="line">        password = password.encode(<span class="string">'utf8'</span>)</span><br><span class="line">        self.password = md5(password).hexdigest()</span><br><span class="line">        self.soft_id = soft_id</span><br><span class="line">        self.base_params = &#123;</span><br><span class="line">            <span class="string">'user'</span>: self.username,</span><br><span class="line">            <span class="string">'pass2'</span>: self.password,</span><br><span class="line">            <span class="string">'softid'</span>: self.soft_id,</span><br><span class="line">        &#125;</span><br><span class="line">        self.headers = &#123;</span><br><span class="line">            <span class="string">'Connection'</span>: <span class="string">'Keep-Alive'</span>,</span><br><span class="line">            <span class="string">'User-Agent'</span>: <span class="string">'Mozilla/4.0 (compatible; MSIE 8.0; Windows NT 5.1; Trident/4.0)'</span>,</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">PostPic</span><span class="params">(self, im, codetype)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        im: 图片字节</span></span><br><span class="line"><span class="string">        codetype: 题目类型 参考 http://www.chaojiying.com/price.html</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        params = &#123;</span><br><span class="line">            <span class="string">'codetype'</span>: codetype,</span><br><span class="line">        &#125;</span><br><span class="line">        params.update(self.base_params)</span><br><span class="line">        files = &#123;<span class="string">'userfile'</span>: (<span class="string">'ccc.jpg'</span>, im)&#125;</span><br><span class="line">        r = requests.post(<span class="string">'http://upload.chaojiying.net/Upload/Processing.php'</span>, data=params, files=files, headers=self.headers)</span><br><span class="line">        <span class="keyword">return</span> r.json()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">ReportError</span><span class="params">(self, im_id)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        im_id:报错题目的图片ID</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        params = &#123;</span><br><span class="line">            <span class="string">'id'</span>: im_id,</span><br><span class="line">        &#125;</span><br><span class="line">        params.update(self.base_params)</span><br><span class="line">        r = requests.post(<span class="string">'http://upload.chaojiying.net/Upload/ReportError.php'</span>, data=params, headers=self.headers)</span><br><span class="line">        <span class="keyword">return</span> r.json()</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;center&gt;&lt;font color=&quot;#1BC3FB&quot; size=&quot;4&quot;&gt;Python3 爬虫学习笔记第十四章 —— 【验证码对抗系列 — 点触验证码】&lt;/font&gt;&lt;/center&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="Python3 学习笔记" scheme="https://www.itrhx.com/categories/Python3-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
      <category term="爬虫学习" scheme="https://www.itrhx.com/categories/Python3-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E7%88%AC%E8%99%AB%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="爬虫" scheme="https://www.itrhx.com/tags/%E7%88%AC%E8%99%AB/"/>
    
      <category term="点触验证码" scheme="https://www.itrhx.com/tags/%E7%82%B9%E8%A7%A6%E9%AA%8C%E8%AF%81%E7%A0%81/"/>
    
  </entry>
  
  <entry>
    <title>Python3 爬虫学习笔记 C13</title>
    <link href="https://www.itrhx.com/2019/09/07/A43-Python3-spider-C13/"/>
    <id>https://www.itrhx.com/2019/09/07/A43-Python3-spider-C13/</id>
    <published>2019-09-06T19:52:14.161Z</published>
    <updated>2019-09-24T12:40:56.234Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><blockquote><center><font color="#1BC3FB" size="4">Python3 爬虫学习笔记第十三章 —— 【验证码对抗系列 — 滑动验证码】</font></center></blockquote><a id="more"></a><hr><h1 id="【13-1】关于滑动验证码"><a href="#【13-1】关于滑动验证码" class="headerlink" title="【13.1】关于滑动验证码"></a><font color="#ff0000">【13.1】关于滑动验证码</font></h1><p>滑动验证码属于行为式验证码，需要通过用户的操作行为来完成验证，一般是根据提示用鼠标将滑块拖动到指定的位置完成验证，此类验证码背景图片采用多种图像加密技术，且添加了很多随机效果，能有效防止OCR文字识别，另外，验证码上的文字采用了随机印刷技术，能够随机采用多种字体、多种变形的实时随机印刷，防止暴力破解；斗鱼、哔哩哔哩、淘宝等平台都使用了滑动验证码</p><fancybox><br><img src="https://cdn.jsdelivr.net/gh/TRHX/ImageHosting/ITRHX-PIC/A43/01.png" alt="01"><br></fancybox><hr><h1 id="【13-2】滑动验证码攻克思路"><a href="#【13-2】滑动验证码攻克思路" class="headerlink" title="【13.2】滑动验证码攻克思路"></a><font color="#ff0000">【13.2】滑动验证码攻克思路</font></h1><p>利用自动化测试工具 Selenium 直接模拟人的行为方式来完成验证，首先要分析页面，想办法找到滑动验证码的完整图片、带有缺口的图片和需要滑动的图片，通过对比原始的图片和带滑块缺口的图片的像素，像素不同的地方就是缺口位置，计算出滑块缺口的位置，得到所需要滑动的距离，最后利用 Selenium 进行对滑块的拖拽，拖拽时要模仿人的行为，由于有个对准过程，所以是先快后慢，匀速移动、随机速度移动都不会成功</p><p>以下以哔哩哔哩为例来做模拟登录练习</p><hr><h1 id="【13-3】模拟登录-bilibili-—-总体思路"><a href="#【13-3】模拟登录-bilibili-—-总体思路" class="headerlink" title="【13.3】模拟登录 bilibili — 总体思路"></a><font color="#ff0000">【13.3】模拟登录 bilibili — 总体思路</font></h1><p>首先使用 Selenium 模拟登陆 bilibili，自动输入账号密码，查找到登陆按钮并点击，使其出现滑动验证码，此时分析页面，滑动验证组件是由3个 canvas 组成，分别代表完整图片、带有缺口的图片和需要滑动的图片，3个 canvas 元素包含 CSS  <code>display</code> 属性，<code>display:block</code> 为可见，<code>display:none</code> 为不可见，分别获取三张图片时要将其他两张图片设置为 <code>display:none</code>，获取元素位置后即可对图片截图并保存，通过图片像素对比，找到缺口位置即为滑块要移动的距离，随后构造滑动轨迹，按照先加速后减速的方式移动滑块完成验证。</p><p>整个程序包含的函数：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">init</span><span class="params">()</span>:</span> 初始化函数，定义全局变量</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">login</span><span class="params">()</span>:</span> 登录函数，输入账号密码并点击登录</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">find_element</span><span class="params">()</span>:</span> 验证码元素查找函数，查找三张图的元素</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">hide_element</span><span class="params">()</span>:</span> 设置元素不可见函数</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">show_element</span><span class="params">()</span>:</span> 设置元素可见函数</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">save_screenshot</span><span class="params">()</span>:</span> 验证码截图函数，截取三张图并保存</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">slide</span><span class="params">()</span>:</span> 滑动函数</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">is_pixel_equal</span><span class="params">()</span>:</span> 像素判断函数，寻找缺口位置</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_distance</span><span class="params">()</span>:</span> 计算滑块移动距离函数</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_track</span><span class="params">()</span>:</span> 构造移动轨迹函数</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">move_to_gap</span><span class="params">()</span>:</span> 模拟拖动函数</span><br></pre></td></tr></table></figure><p>整个程序用到的库：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.chrome.options <span class="keyword">import</span> Options</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.support.wait <span class="keyword">import</span> WebDriverWait</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.support <span class="keyword">import</span> expected_conditions <span class="keyword">as</span> EC</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.common.by <span class="keyword">import</span> By</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver <span class="keyword">import</span> ActionChains</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> random</span><br></pre></td></tr></table></figure><hr><h1 id="【13-4】主函数"><a href="#【13-4】主函数" class="headerlink" title="【13.4】主函数"></a><font color="#ff0000">【13.4】主函数</font></h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    init()</span><br><span class="line">    login()</span><br><span class="line">    find_element()</span><br><span class="line">    slide()</span><br></pre></td></tr></table></figure><hr><h1 id="【13-5】初始化函数"><a href="#【13-5】初始化函数" class="headerlink" title="【13.5】初始化函数"></a><font color="#ff0000">【13.5】初始化函数</font></h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">init</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">global</span> url, browser, username, password, wait</span><br><span class="line">    url = <span class="string">'https://passport.bilibili.com/login'</span></span><br><span class="line">    path = <span class="string">r'F:\PycharmProjects\Python3爬虫\chromedriver.exe'</span></span><br><span class="line">    chrome_options = Options()</span><br><span class="line">    chrome_options.add_argument(<span class="string">'--start-maximized'</span>)</span><br><span class="line">    browser = webdriver.Chrome(executable_path=path, chrome_options=chrome_options)</span><br><span class="line">    username = <span class="string">'155********'</span></span><br><span class="line">    password = <span class="string">'***********'</span></span><br><span class="line">    wait = WebDriverWait(browser, <span class="number">20</span>)</span><br></pre></td></tr></table></figure><p>global 关键字定义了全局变量，随后是登录页面url、谷歌浏览器驱动的目录path、实例化 Chrome 浏览器、设置浏览器分辨率最大化、用户名、密码、WebDriverWait() 方法设置等待超时</p><hr><h1 id="【13-6】登录函数"><a href="#【13-6】登录函数" class="headerlink" title="【13.6】登录函数"></a><font color="#ff0000">【13.6】登录函数</font></h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">login</span><span class="params">()</span>:</span></span><br><span class="line">    browser.get(url)</span><br><span class="line">    user = wait.until(EC.presence_of_element_located((By.ID, <span class="string">'login-username'</span>)))</span><br><span class="line">    passwd = wait.until(EC.presence_of_element_located((By.ID, <span class="string">'login-passwd'</span>)))</span><br><span class="line">    user.send_keys(username)</span><br><span class="line">    passwd.send_keys(password)</span><br><span class="line">    login_btn = wait.until(EC.presence_of_element_located((By.CSS_SELECTOR, <span class="string">'a.btn.btn-login'</span>)))</span><br><span class="line">    time.sleep(random.random() * <span class="number">3</span>)</span><br><span class="line">    login_btn.click()</span><br></pre></td></tr></table></figure><p>等待用户名输入框和密码输入框对应的 ID 节点加载出来，分析页面可知，用户名输入框 <code>id=&quot;login-username&quot;</code>，密码输入框 <code>id=&quot;login-passwd&quot;</code>，获取这两个节点，调用 <code>send_keys()</code> 方法输入用户名和密码，随后获取登录按钮，分析页面可知登录按钮 <code>class=&quot;btn btn-login&quot;</code>，随机产生一个数并将其扩大三倍作为暂停时间，最后调用 <code>click()</code> 方法实现登录按钮的点击</p><hr><h1 id="【13-7】验证码元素查找函数"><a href="#【13-7】验证码元素查找函数" class="headerlink" title="【13.7】验证码元素查找函数"></a><font color="#ff0000">【13.7】验证码元素查找函数</font></h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">find_element</span><span class="params">()</span>:</span></span><br><span class="line">    c_background = wait.until(</span><br><span class="line">        EC.presence_of_element_located((By.CSS_SELECTOR, <span class="string">'canvas.geetest_canvas_bg.geetest_absolute'</span>)))</span><br><span class="line">    c_slice = wait.until(</span><br><span class="line">        EC.presence_of_element_located((By.CSS_SELECTOR, <span class="string">'canvas.geetest_canvas_slice.geetest_absolute'</span>)))</span><br><span class="line">    c_full_bg = wait.until(</span><br><span class="line">        EC.presence_of_element_located((By.CSS_SELECTOR, <span class="string">'canvas.geetest_canvas_fullbg.geetest_fade.geetest_absolute'</span>)))</span><br><span class="line">    hide_element(c_slice)</span><br><span class="line">    save_screenshot(c_background, <span class="string">'back'</span>)</span><br><span class="line">    show_element(c_slice)</span><br><span class="line">    save_screenshot(c_slice, <span class="string">'slice'</span>)</span><br><span class="line">    show_element(c_full_bg)</span><br><span class="line">    save_screenshot(c_full_bg, <span class="string">'full'</span>)</span><br></pre></td></tr></table></figure><p>我们要获取验证码的三张图片，分别是完整的图片、带有缺口的图片和需要滑动的图片，分析页面代码，这三张图片是由 3 个 canvas 组成，3 个 canvas 元素包含 CSS  <code>display</code> 属性，<code>display:block</code> 为可见，<code>display:none</code> 为不可见，在分别获取三张图片时要将其他两张图片设置为 <code>display:none</code>，这样做才能单独提取到每张图片，定位三张图片的 class 分别为：带有缺口的图片（c_background）：<code>geetest_canvas_bg geetest_absolute</code>、需要滑动的图片（c_slice）：<code>geetest_canvas_slice geetest_absolute</code>、完整图片（c_full_bg）：<code>geetest_canvas_fullbg geetest_fade geetest_absolute</code>，随后传值给 <code>save_screenshot()</code> 函数，进一步对验证码进行处理</p><fancybox><br><img src="https://cdn.jsdelivr.net/gh/TRHX/ImageHosting/ITRHX-PIC/A43/02.png" alt="02"><br></fancybox><hr><h1 id="【13-8】元素可见性设置函数"><a href="#【13-8】元素可见性设置函数" class="headerlink" title="【13.8】元素可见性设置函数"></a><font color="#ff0000">【13.8】元素可见性设置函数</font></h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"># 设置元素不可见</span><br><span class="line">def hide_element(element):</span><br><span class="line">    browser.execute_script(&quot;arguments[0].style=arguments[1]&quot;, element, &quot;display: none;&quot;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 设置元素可见</span><br><span class="line">def show_element(element):</span><br><span class="line">    browser.execute_script(&quot;arguments[0].style=arguments[1]&quot;, element, &quot;display: block;&quot;)</span><br></pre></td></tr></table></figure><hr><h1 id="【13-9】验证码截图函数"><a href="#【13-9】验证码截图函数" class="headerlink" title="【13.9】验证码截图函数"></a><font color="#ff0000">【13.9】验证码截图函数</font></h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">save_screenshot</span><span class="params">(obj, name)</span>:</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        pic_url = browser.save_screenshot(<span class="string">'.\\bilibili.png'</span>)</span><br><span class="line">        print(<span class="string">"%s:截图成功!"</span> % pic_url)</span><br><span class="line">        left = obj.location[<span class="string">'x'</span>]</span><br><span class="line">        top = obj.location[<span class="string">'y'</span>]</span><br><span class="line">        right = left + obj.size[<span class="string">'width'</span>]</span><br><span class="line">        bottom = top + obj.size[<span class="string">'height'</span>]</span><br><span class="line">        print(<span class="string">'图：'</span> + name)</span><br><span class="line">        print(<span class="string">'Left %s'</span> % left)</span><br><span class="line">        print(<span class="string">'Top %s'</span> % top)</span><br><span class="line">        print(<span class="string">'Right %s'</span> % right)</span><br><span class="line">        print(<span class="string">'Bottom %s'</span> % bottom)</span><br><span class="line">        print(<span class="string">''</span>)</span><br><span class="line">        im = Image.open(<span class="string">'.\\bilibili.png'</span>)</span><br><span class="line">        im = im.crop((left, top, right, bottom))</span><br><span class="line">        file_name = <span class="string">'bili_'</span> + name + <span class="string">'.png'</span></span><br><span class="line">        im.save(file_name)</span><br><span class="line">    <span class="keyword">except</span> BaseException <span class="keyword">as</span> msg:</span><br><span class="line">        print(<span class="string">"%s:截图失败!"</span> % msg)</span><br></pre></td></tr></table></figure><p><code>location</code> 属性可以返回该图片对象在浏览器中的位置，坐标轴是以屏幕左上角为原点，x轴向右递增，y轴向下递增，<code>size</code> 属性可以返回该图片对象的高度和宽度，由此可以得到验证码的位置信息，首先调用 <code>save_screenshot()</code> 属性对整个页面截图并保存，然后向 <code>crop()</code> 方法传入验证码的位置信息，由位置信息再对验证码进行剪裁并保存</p><hr><h1 id="【13-10】滑动函数"><a href="#【13-10】滑动函数" class="headerlink" title="【13.10】滑动函数"></a><font color="#ff0000">【13.10】滑动函数</font></h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">slide</span><span class="params">()</span>:</span></span><br><span class="line">    distance = get_distance(Image.open(<span class="string">'.\\bili_back.png'</span>), Image.open(<span class="string">'.\\bili_full.png'</span>))</span><br><span class="line">    print(<span class="string">'计算偏移量为：%s Px'</span> % distance)</span><br><span class="line">    trace = get_trace(distance - <span class="number">5</span>)</span><br><span class="line">    move_to_gap(trace)</span><br><span class="line">    time.sleep(<span class="number">3</span>)</span><br></pre></td></tr></table></figure><p>向 <code>get_distance()</code> 函数传入完整的图片和缺口图片，计算滑块需要滑动的距离，再把距离信息传入 <code>get_trace()</code> 函数，构造滑块的移动轨迹，最后根据轨迹信息调用 <code>move_to_gap()</code> 函数移动滑块完成验证</p><hr><h1 id="【13-11】计算滑块移动距离函数"><a href="#【13-11】计算滑块移动距离函数" class="headerlink" title="【13.11】计算滑块移动距离函数"></a><font color="#ff0000">【13.11】计算滑块移动距离函数</font></h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_distance</span><span class="params">(bg_image, fullbg_image)</span>:</span></span><br><span class="line">    distance = <span class="number">60</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(distance, fullbg_image.size[<span class="number">0</span>]):</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> range(fullbg_image.size[<span class="number">1</span>]):</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> is_pixel_equal(fullbg_image, bg_image, i, j):</span><br><span class="line">                <span class="keyword">return</span> i</span><br></pre></td></tr></table></figure><p><code>get_distance()</code> 方法即获取缺口位置的方法，此方法的参数是两张图片，一张为完整的图片，另一张为带缺口的图片，distance 为滑块的初始位置，遍历两张图片的每个像素，利用 <code>is_pixel_equal()</code> 像素判断函数判断两张图片同一位置的像素是否相同，比较两张图 RGB 的绝对值是否均小于定义的阈值 threshold，如果绝对值均在阈值之内，则代表像素点相同，继续遍历，否则代表不相同的像素点，即缺口的位置</p><hr><h1 id="【13-12】像素判断函数"><a href="#【13-12】像素判断函数" class="headerlink" title="【13.12】像素判断函数"></a><font color="#ff0000">【13.12】像素判断函数</font></h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">is_pixel_equal</span><span class="params">(bg_image, fullbg_image, x, y)</span>:</span></span><br><span class="line">    bg_pixel = bg_image.load()[x, y]</span><br><span class="line">    fullbg_pixel = fullbg_image.load()[x, y]</span><br><span class="line">    threshold = <span class="number">60</span></span><br><span class="line">    <span class="keyword">if</span> (abs(bg_pixel[<span class="number">0</span>] - fullbg_pixel[<span class="number">0</span>] &lt; threshold) <span class="keyword">and</span> abs(bg_pixel[<span class="number">1</span>] - fullbg_pixel[<span class="number">1</span>] &lt; threshold) <span class="keyword">and</span> abs(</span><br><span class="line">            bg_pixel[<span class="number">2</span>] - fullbg_pixel[<span class="number">2</span>] &lt; threshold)):</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">True</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">False</span></span><br></pre></td></tr></table></figure><p>将完整图片和缺口图片两个对象分别赋值给变量 bg_image和 fullbg_image，接下来对比图片获取缺口。我们在这里遍历图片的每个坐标点，获取两张图片对应像素点的 RGB 数据，判断像素的各个颜色之差，<code>abs()</code> 用于取绝对值，如果二者的 RGB 数据差距在一定范围内，那就代表两个像素相同，继续比对下一个像素点，如果差距超过一定范围，则代表像素点不同，当前位置即为缺口位置</p><hr><h1 id="【13-13】构造移动轨迹函数"><a href="#【13-13】构造移动轨迹函数" class="headerlink" title="【13.13】构造移动轨迹函数"></a><font color="#ff0000">【13.13】构造移动轨迹函数</font></h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_trace</span><span class="params">(distance)</span>:</span></span><br><span class="line">    trace = []</span><br><span class="line">    faster_distance = distance * (<span class="number">4</span> / <span class="number">5</span>)</span><br><span class="line">    start, v0, t = <span class="number">0</span>, <span class="number">0</span>, <span class="number">0.1</span></span><br><span class="line">    <span class="keyword">while</span> start &lt; distance:</span><br><span class="line">        <span class="keyword">if</span> start &lt; faster_distance:</span><br><span class="line">            a = <span class="number">20</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            a = <span class="number">-20</span></span><br><span class="line">        move = v0 * t + <span class="number">1</span> / <span class="number">2</span> * a * t * t</span><br><span class="line">        v = v0 + a * t</span><br><span class="line">        v0 = v</span><br><span class="line">        start += move</span><br><span class="line">        trace.append(round(move))</span><br><span class="line">    <span class="keyword">return</span> trace</span><br></pre></td></tr></table></figure><p><code>get_trace()</code> 方法传入的参数为移动的总距离，返回的是运动轨迹，运动轨迹用 trace 表示，它是一个列表，列表的每个元素代表每次移动多少距离，利用 Selenium 进行对滑块的拖拽时要模仿人的行为，由于有个对准过程，所以是先快后慢，匀速移动、随机速度移动都不会成功，因此要设置一个加速和减速的距离，这里设置加速距离 <code>faster_distance</code> 是总距离 <code>distance</code> 的4/5倍，滑块滑动的加速度用 a 来表示，当前速度用 v 表示，初速度用 v0 表示，位移用 move 表示，所需时间用 t 表示，它们之间满足以下关系：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">move = v0 * t + 0.5 * a * t * t </span><br><span class="line">v = v0 + a * t</span><br></pre></td></tr></table></figure><p>设置初始位置、初始速度、时间间隔分别为0, 0, 0.1，加速阶段和减速阶段的加速度分别设置为20和-20，直到运动轨迹达到总距离时，循环终止，最后得到的 trace 记录了每个时间间隔移动了多少位移，这样滑块的运动轨迹就得到了</p><hr><h1 id="【13-14】模拟拖动函数"><a href="#【13-14】模拟拖动函数" class="headerlink" title="【13.14】模拟拖动函数"></a><font color="#ff0000">【13.14】模拟拖动函数</font></h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">move_to_gap</span><span class="params">(trace)</span>:</span></span><br><span class="line">    slider = wait.until(EC.presence_of_element_located((By.CSS_SELECTOR, <span class="string">'div.geetest_slider_button'</span>)))</span><br><span class="line">    ActionChains(browser).click_and_hold(slider).perform()</span><br><span class="line">    <span class="keyword">for</span> x <span class="keyword">in</span> trace:</span><br><span class="line">        ActionChains(browser).move_by_offset(xoffset=x, yoffset=<span class="number">0</span>).perform()</span><br><span class="line">    time.sleep(<span class="number">0.5</span>)</span><br><span class="line">    ActionChains(browser).release().perform()</span><br></pre></td></tr></table></figure><p>传入的参数为运动轨迹，首先查找到滑动按钮，然后调用 ActionChains 的 <code>click_and_hold()</code> 方法按住拖动底部滑块，<code>perform()</code> 方法用于执行，遍历运动轨迹获取每小段位移距离，调用 <code>move_by_offset()</code> 方法移动此位移，最后调用 <code>release()</code> 方法松开鼠标即可</p><hr><h1 id="【13-15】效果实现动图"><a href="#【13-15】效果实现动图" class="headerlink" title="【13.15】效果实现动图"></a><font color="#ff0000">【13.15】效果实现动图</font></h1><p>最终实现效果图：（关键信息已经过打码处理）</p><fancybox><br><img src="https://cdn.jsdelivr.net/gh/TRHX/ImageHosting/ITRHX-PIC/A43/bilibili.gif" alt="03"><br></fancybox><hr><h1 id="【13-16】完整代码"><a href="#【13-16】完整代码" class="headerlink" title="【13.16】完整代码"></a><font color="#ff0000">【13.16】完整代码</font></h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.chrome.options <span class="keyword">import</span> Options</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.support.wait <span class="keyword">import</span> WebDriverWait</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.support <span class="keyword">import</span> expected_conditions <span class="keyword">as</span> EC</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.common.by <span class="keyword">import</span> By</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver <span class="keyword">import</span> ActionChains</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">init</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">global</span> url, browser, username, password, wait</span><br><span class="line">    url = <span class="string">'https://passport.bilibili.com/login'</span></span><br><span class="line">    path = <span class="string">r'F:\PycharmProjects\Python3爬虫\chromedriver.exe'</span></span><br><span class="line">    chrome_options = Options()</span><br><span class="line">    chrome_options.add_argument(<span class="string">'--start-maximized'</span>)</span><br><span class="line">    browser = webdriver.Chrome(executable_path=path, chrome_options=chrome_options)</span><br><span class="line">    username = <span class="string">'155********'</span></span><br><span class="line">    password = <span class="string">'***********'</span></span><br><span class="line">    wait = WebDriverWait(browser, <span class="number">20</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">login</span><span class="params">()</span>:</span></span><br><span class="line">    browser.get(url)</span><br><span class="line">    user = wait.until(EC.presence_of_element_located((By.ID, <span class="string">'login-username'</span>)))</span><br><span class="line">    passwd = wait.until(EC.presence_of_element_located((By.ID, <span class="string">'login-passwd'</span>)))</span><br><span class="line">    user.send_keys(username)</span><br><span class="line">    passwd.send_keys(password)</span><br><span class="line">    login_btn = wait.until(EC.presence_of_element_located((By.CSS_SELECTOR, <span class="string">'a.btn.btn-login'</span>)))</span><br><span class="line">    time.sleep(random.random() * <span class="number">3</span>)</span><br><span class="line">    login_btn.click()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">find_element</span><span class="params">()</span>:</span></span><br><span class="line">    c_background = wait.until(</span><br><span class="line">        EC.presence_of_element_located((By.CSS_SELECTOR, <span class="string">'canvas.geetest_canvas_bg.geetest_absolute'</span>)))</span><br><span class="line">    c_slice = wait.until(</span><br><span class="line">        EC.presence_of_element_located((By.CSS_SELECTOR, <span class="string">'canvas.geetest_canvas_slice.geetest_absolute'</span>)))</span><br><span class="line">    c_full_bg = wait.until(</span><br><span class="line">        EC.presence_of_element_located((By.CSS_SELECTOR, <span class="string">'canvas.geetest_canvas_fullbg.geetest_fade.geetest_absolute'</span>)))</span><br><span class="line">    hide_element(c_slice)</span><br><span class="line">    save_screenshot(c_background, <span class="string">'back'</span>)</span><br><span class="line">    show_element(c_slice)</span><br><span class="line">    save_screenshot(c_slice, <span class="string">'slice'</span>)</span><br><span class="line">    show_element(c_full_bg)</span><br><span class="line">    save_screenshot(c_full_bg, <span class="string">'full'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">hide_element</span><span class="params">(element)</span>:</span></span><br><span class="line">    browser.execute_script(<span class="string">"arguments[0].style=arguments[1]"</span>, element, <span class="string">"display: none;"</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">show_element</span><span class="params">(element)</span>:</span></span><br><span class="line">    browser.execute_script(<span class="string">"arguments[0].style=arguments[1]"</span>, element, <span class="string">"display: block;"</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">save_screenshot</span><span class="params">(obj, name)</span>:</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        pic_url = browser.save_screenshot(<span class="string">'.\\bilibili.png'</span>)</span><br><span class="line">        print(<span class="string">"%s:截图成功!"</span> % pic_url)</span><br><span class="line">        left = obj.location[<span class="string">'x'</span>]</span><br><span class="line">        top = obj.location[<span class="string">'y'</span>]</span><br><span class="line">        right = left + obj.size[<span class="string">'width'</span>]</span><br><span class="line">        bottom = top + obj.size[<span class="string">'height'</span>]</span><br><span class="line">        print(<span class="string">'图：'</span> + name)</span><br><span class="line">        print(<span class="string">'Left %s'</span> % left)</span><br><span class="line">        print(<span class="string">'Top %s'</span> % top)</span><br><span class="line">        print(<span class="string">'Right %s'</span> % right)</span><br><span class="line">        print(<span class="string">'Bottom %s'</span> % bottom)</span><br><span class="line">        print(<span class="string">''</span>)</span><br><span class="line">        im = Image.open(<span class="string">'.\\bilibili.png'</span>)</span><br><span class="line">        im = im.crop((left, top, right, bottom))</span><br><span class="line">        file_name = <span class="string">'bili_'</span> + name + <span class="string">'.png'</span></span><br><span class="line">        im.save(file_name)</span><br><span class="line">    <span class="keyword">except</span> BaseException <span class="keyword">as</span> msg:</span><br><span class="line">        print(<span class="string">"%s:截图失败!"</span> % msg)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">slide</span><span class="params">()</span>:</span></span><br><span class="line">    distance = get_distance(Image.open(<span class="string">'.\\bili_back.png'</span>), Image.open(<span class="string">'.\\bili_full.png'</span>))</span><br><span class="line">    print(<span class="string">'计算偏移量为：%s Px'</span> % distance)</span><br><span class="line">    trace = get_trace(distance - <span class="number">5</span>)</span><br><span class="line">    move_to_gap(trace)</span><br><span class="line">    time.sleep(<span class="number">3</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_distance</span><span class="params">(bg_image, fullbg_image)</span>:</span></span><br><span class="line">    distance = <span class="number">60</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(distance, fullbg_image.size[<span class="number">0</span>]):</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> range(fullbg_image.size[<span class="number">1</span>]):</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> is_pixel_equal(fullbg_image, bg_image, i, j):</span><br><span class="line">                <span class="keyword">return</span> i</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">is_pixel_equal</span><span class="params">(bg_image, fullbg_image, x, y)</span>:</span></span><br><span class="line">    bg_pixel = bg_image.load()[x, y]</span><br><span class="line">    fullbg_pixel = fullbg_image.load()[x, y]</span><br><span class="line">    threshold = <span class="number">60</span></span><br><span class="line">    <span class="keyword">if</span> (abs(bg_pixel[<span class="number">0</span>] - fullbg_pixel[<span class="number">0</span>] &lt; threshold) <span class="keyword">and</span> abs(bg_pixel[<span class="number">1</span>] - fullbg_pixel[<span class="number">1</span>] &lt; threshold) <span class="keyword">and</span> abs(</span><br><span class="line">            bg_pixel[<span class="number">2</span>] - fullbg_pixel[<span class="number">2</span>] &lt; threshold)):</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">True</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">False</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_trace</span><span class="params">(distance)</span>:</span></span><br><span class="line">    trace = []</span><br><span class="line">    faster_distance = distance * (<span class="number">4</span> / <span class="number">5</span>)</span><br><span class="line">    start, v0, t = <span class="number">0</span>, <span class="number">0</span>, <span class="number">0.1</span></span><br><span class="line">    <span class="keyword">while</span> start &lt; distance:</span><br><span class="line">        <span class="keyword">if</span> start &lt; faster_distance:</span><br><span class="line">            a = <span class="number">20</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            a = <span class="number">-20</span></span><br><span class="line">        move = v0 * t + <span class="number">1</span> / <span class="number">2</span> * a * t * t</span><br><span class="line">        v = v0 + a * t</span><br><span class="line">        v0 = v</span><br><span class="line">        start += move</span><br><span class="line">        trace.append(round(move))</span><br><span class="line">    <span class="keyword">return</span> trace</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">move_to_gap</span><span class="params">(trace)</span>:</span></span><br><span class="line">    slider = wait.until(EC.presence_of_element_located((By.CSS_SELECTOR, <span class="string">'div.geetest_slider_button'</span>)))</span><br><span class="line">    ActionChains(browser).click_and_hold(slider).perform()</span><br><span class="line">    <span class="keyword">for</span> x <span class="keyword">in</span> trace:</span><br><span class="line">        ActionChains(browser).move_by_offset(xoffset=x, yoffset=<span class="number">0</span>).perform()</span><br><span class="line">    time.sleep(<span class="number">0.5</span>)</span><br><span class="line">    ActionChains(browser).release().perform()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    init()</span><br><span class="line">    login()</span><br><span class="line">    find_element()</span><br><span class="line">    slide()</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;center&gt;&lt;font color=&quot;#1BC3FB&quot; size=&quot;4&quot;&gt;Python3 爬虫学习笔记第十三章 —— 【验证码对抗系列 — 滑动验证码】&lt;/font&gt;&lt;/center&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="Python3 学习笔记" scheme="https://www.itrhx.com/categories/Python3-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
      <category term="爬虫学习" scheme="https://www.itrhx.com/categories/Python3-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E7%88%AC%E8%99%AB%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="爬虫" scheme="https://www.itrhx.com/tags/%E7%88%AC%E8%99%AB/"/>
    
      <category term="滑动验证码" scheme="https://www.itrhx.com/tags/%E6%BB%91%E5%8A%A8%E9%AA%8C%E8%AF%81%E7%A0%81/"/>
    
  </entry>
  
  <entry>
    <title>Python3 爬虫学习笔记 C12</title>
    <link href="https://www.itrhx.com/2019/09/05/A42-Python3-spider-C12/"/>
    <id>https://www.itrhx.com/2019/09/05/A42-Python3-spider-C12/</id>
    <published>2019-09-05T14:54:48.887Z</published>
    <updated>2019-09-24T12:40:54.127Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><blockquote><center><font color="#1BC3FB" size="4">Python3 爬虫学习笔记第十二章 —— 【验证码对抗系列 — 图形验证码】</font></center></blockquote><a id="more"></a><h1 id="【12-1】关于普通图形验证码"><a href="#【12-1】关于普通图形验证码" class="headerlink" title="【12.1】关于普通图形验证码"></a><font color="#ff0000">【12.1】关于普通图形验证码</font></h1><p>普通图形验证码一般由四位纯数字、纯字母或者字母数字组合构成，是最常见的验证码，也是最简单的验证码，利用 tesserocr 或者 pytesseract 库即可识别此类验证码，前提是已经安装好 Tesseract-OCR 软件</p><fancybox><br><img src="https://cdn.jsdelivr.net/gh/TRHX/ImageHosting/ITRHX-PIC/A42/01.png" alt="01"><br></fancybox><h1 id="【12-2】tesserocr-库识别验证码"><a href="#【12-2】tesserocr-库识别验证码" class="headerlink" title="【12.2】tesserocr 库识别验证码"></a><font color="#ff0000">【12.2】tesserocr 库识别验证码</font></h1><p>简单示例：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> tesserocr</span><br><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image</span><br><span class="line"></span><br><span class="line">image = Image.open(<span class="string">'code.png'</span>)</span><br><span class="line">result = tesserocr.image_to_text(image)</span><br><span class="line">print(result)</span><br></pre></td></tr></table></figure><p>新建一个 Image 对象，调用 tesserocr 的 <code>image_to_text()</code> 方法，传入 Image 对象即可完成识别，另一种方法：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> tesserocr</span><br><span class="line">print(tesserocr.file_to_text(<span class="string">'code.png'</span>))</span><br></pre></td></tr></table></figure><h1 id="【12-3】pytesseract-库识别验证码"><a href="#【12-3】pytesseract-库识别验证码" class="headerlink" title="【12.3】pytesseract 库识别验证码"></a><font color="#ff0000">【12.3】pytesseract 库识别验证码</font></h1><p>简单示例：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pytesseract</span><br><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image</span><br><span class="line"></span><br><span class="line">img = Image.open(<span class="string">'code.png'</span>)</span><br><span class="line">img = img.convert(<span class="string">'RGB'</span>)</span><br><span class="line">img.show()</span><br><span class="line">print(pytesseract.image_to_string(img))</span><br></pre></td></tr></table></figure><p>pytesseract 的各种方法：</p><ul><li>get_tesseract_version：返回 Tesseract 的版本信息；</li><li>image_to_string：将图像上的 Tesseract OCR 运行结果返回到字符串；</li><li>image_to_boxes：返回包含已识别字符及其框边界的结果；</li><li>image_to_data：返回包含框边界，置信度和其他信息的结果。需要 Tesseract 3.05+；</li><li>image_to_osd：返回包含有关方向和脚本检测的信息的结果。</li></ul><p>有关参数：</p><p><code>image_to_data(image, lang=&#39;&#39;, config=&#39;&#39;, nice=0, output_type=Output.STRING)</code></p><ul><li>image：图像对象；</li><li>lang：Tesseract 语言代码字符串；</li><li>config：任何其他配置为字符串，例如：config=’–psm 6’；</li><li>nice：修改 Tesseract 运行的处理器优先级。Windows不支持。尼斯调整了类似 unix 的流程的优点；</li><li>output_type：类属性，指定输出的类型，默认为string。</li></ul><p>lang 参数，常见语言代码如下：</p><ul><li>chi_sim：简体中文</li><li>chi_tra：繁体中文</li><li>eng：英文</li><li>rus：俄罗斯语</li><li>fra：法语</li><li>deu：德语</li><li>jpn：日语</li></ul><h1 id="【12-4】验证码处理"><a href="#【12-4】验证码处理" class="headerlink" title="【12.4】验证码处理"></a><font color="#ff0000">【12.4】验证码处理</font></h1><p>利用 Image 对象的 <code>convert()</code> 方法传入不同参数可以对验证码做一些额外的处理，如转灰度、二值化等操作，经过处理过后的验证码会更加容易被识别，识别准确度更高，各种参数及含义：</p><ul><li>1：1位像素，黑白，每字节一个像素存储；</li><li>L：8位像素，黑白；</li><li>P：8位像素，使用调色板映射到任何其他模式；</li><li>RGB：3x8位像素，真彩色；</li><li>RGBA：4x8位像素，带透明度掩模的真彩色；</li><li>CMYK：4x8位像素，分色；</li><li>YCbCr：3x8位像素，彩色视频格式；</li><li>I：32位有符号整数像素；</li><li>F：32位浮点像素。</li></ul><p>示例：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pytesseract</span><br><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image</span><br><span class="line"></span><br><span class="line">image = Image.open(<span class="string">'code.png'</span>)</span><br><span class="line">image = image.convert(<span class="string">'L'</span>)</span><br><span class="line">image.show()</span><br><span class="line">result = pytesseract.image_to_string(image)</span><br><span class="line">print(result)</span><br></pre></td></tr></table></figure><p>Image 对象的 <code>convert()</code> 方法参数传入 L，即可将图片转化为灰度图像，转换前后对比：</p><fancybox><br><img src="https://cdn.jsdelivr.net/gh/TRHX/ImageHosting/ITRHX-PIC/A42/02.png" alt="02"><br></fancybox><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pytesseract</span><br><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image</span><br><span class="line"></span><br><span class="line">image = Image.open(<span class="string">'code.png'</span>)</span><br><span class="line">image = image.convert(<span class="string">'1'</span>)</span><br><span class="line">image.show()</span><br><span class="line">result = pytesseract.image_to_string(image)</span><br><span class="line">print(result)</span><br></pre></td></tr></table></figure><p>Image 对象的 <code>convert()</code> 方法参数传入 1，即可将图片进行二值化处理，处理前后对比：</p><fancybox><br><img src="https://cdn.jsdelivr.net/gh/TRHX/ImageHosting/ITRHX-PIC/A42/03.png" alt="03"><br></fancybox><h1 id="【12-5】tesserocr-与-pytesserocr-相关资料"><a href="#【12-5】tesserocr-与-pytesserocr-相关资料" class="headerlink" title="【12.5】tesserocr 与 pytesserocr 相关资料"></a><font color="#ff0000">【12.5】tesserocr 与 pytesserocr 相关资料</font></h1><ul><li><p>tesserocr GitHub：<a href="https://github.com/sirfz/tesserocr" target="_blank" rel="noopener">https://github.com/sirfz/tesserocr</a></p></li><li><p>tesserocr PyPI：<a href="https://pypi.python.org/pypi/tesserocr" target="_blank" rel="noopener">https://pypi.python.org/pypi/tesserocr</a></p></li><li><p>pytesserocr GitHub：<a href="https://github.com/madmaze/pytesseract" target="_blank" rel="noopener">https://github.com/madmaze/pytesseract</a></p></li><li><p>pytesserocr PyPI：<a href="https://pypi.org/project/pytesseract/" target="_blank" rel="noopener">https://pypi.org/project/pytesseract/</a></p></li><li><p>Tesseract-OCR 下载地址：<a href="http://digi.bib.uni-mannheim.de/tesseract" target="_blank" rel="noopener">http://digi.bib.uni-mannheim.de/tesseract</a></p></li><li><p>tesseract GitHub：<a href="https://github.com/tesseract-ocr/tesseract" target="_blank" rel="noopener">https://github.com/tesseract-ocr/tesseract</a></p></li><li><p>tesseract 语言包：<a href="https://github.com/tesseract-ocr/tessdata" target="_blank" rel="noopener">https://github.com/tesseract-ocr/tessdata</a></p></li><li><p>tesseract 文档：<a href="https://github.com/tesseract-ocr/tesseract/wiki/Documentation" target="_blank" rel="noopener">https://github.com/tesseract-ocr/tesseract/wiki/Documentation</a></p></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;center&gt;&lt;font color=&quot;#1BC3FB&quot; size=&quot;4&quot;&gt;Python3 爬虫学习笔记第十二章 —— 【验证码对抗系列 — 图形验证码】&lt;/font&gt;&lt;/center&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="Python3 学习笔记" scheme="https://www.itrhx.com/categories/Python3-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
      <category term="爬虫学习" scheme="https://www.itrhx.com/categories/Python3-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E7%88%AC%E8%99%AB%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="爬虫" scheme="https://www.itrhx.com/tags/%E7%88%AC%E8%99%AB/"/>
    
      <category term="图形验证码" scheme="https://www.itrhx.com/tags/%E5%9B%BE%E5%BD%A2%E9%AA%8C%E8%AF%81%E7%A0%81/"/>
    
  </entry>
  
  <entry>
    <title>Python3 爬虫学习笔记 C11</title>
    <link href="https://www.itrhx.com/2019/09/04/A41-Python3-spider-C11/"/>
    <id>https://www.itrhx.com/2019/09/04/A41-Python3-spider-C11/</id>
    <published>2019-09-04T14:06:03.110Z</published>
    <updated>2019-09-24T12:40:45.074Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><blockquote><center><font color="#1BC3FB" size="4">Python3 爬虫学习笔记第十一章 —— 【MongoDB数据储存】</font></center></blockquote><a id="more"></a><h1 id="【11-1】关于-MongoDB"><a href="#【11-1】关于-MongoDB" class="headerlink" title="【11.1】关于 MongoDB"></a><font color="#ff0000">【11.1】关于 MongoDB</font></h1><p>MongoDB 属于非关系型数据库，即 NoSQL（Not Only SQL），NoSQL 是基于键值对的，不需要经过 SQL 层的解析，数据之间没有耦合性，性能极高，非关系型数据库分为以下几种：</p><ul><li>键值存储数据库：Redis、Voldemort、Oracle BDB 等；</li><li>列存储数据库：Cassandra、HBase、Riak 等；</li><li>文档型数据库：CouchDB、MongoDB 等；</li><li>图形数据库：Neo4J、InfoGrid、Infinite Graph 等。</li></ul><h1 id="【11-2】MongoDB-基本操作语句"><a href="#【11-2】MongoDB-基本操作语句" class="headerlink" title="【11.2】MongoDB 基本操作语句"></a><font color="#ff0000">【11.2】MongoDB 基本操作语句</font></h1><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"># 创建数据库（如果数据库不存在就创建数据库, 存在就切换到指定的数据库）</span><br><span class="line"><span class="keyword">use</span> DATABASE_NAME</span><br><span class="line"></span><br><span class="line"># 查看所有数据库</span><br><span class="line"><span class="keyword">show</span> dbs</span><br><span class="line"></span><br><span class="line"># 查看当前所在数据库</span><br><span class="line">db</span><br><span class="line"></span><br><span class="line"># 删除当前数据库</span><br><span class="line">db.dropDatabase()</span><br><span class="line"></span><br><span class="line"># 删除集合</span><br><span class="line">db.COLLECTION_NAME.drop()</span><br><span class="line"></span><br><span class="line"># 创建集合</span><br><span class="line">db.createCollection(<span class="string">"COLLECTION_NAME"</span>)</span><br><span class="line"></span><br><span class="line"># 插入文档</span><br><span class="line">db.COLLECTION_NAME.insert(<span class="keyword">document</span>)</span><br><span class="line">db.COLLECTION_NAME.save(<span class="keyword">document</span>) </span><br><span class="line"></span><br><span class="line"># 更新文档</span><br><span class="line">db.COLLECTION_NAME.update()</span><br><span class="line"></span><br><span class="line"># 删除文档</span><br><span class="line">db.COLLECTION_NAME.remove()</span><br><span class="line"></span><br><span class="line"># 查询文档</span><br><span class="line">db.COLLECTION_NAME.find(<span class="keyword">query</span>, projection)</span><br></pre></td></tr></table></figure><h1 id="【11-3】连接-MongoDB"><a href="#【11-3】连接-MongoDB" class="headerlink" title="【11.3】连接 MongoDB"></a><font color="#ff0000">【11.3】连接 MongoDB</font></h1><p>连接 MongoDB 需要导入 pymongo 库，使用 <code>MongoClient()</code> 方法，向其传入地址参数 host 和 端口参数 port 即可 </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pymongo</span><br><span class="line"></span><br><span class="line">client = pymongo.MongoClient(host=<span class="string">'localhost'</span>, port=<span class="number">27017</span>)</span><br></pre></td></tr></table></figure><p>也可以直接传入 MongoDB 的连接字符串：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pymongo</span><br><span class="line"></span><br><span class="line">client = pymongo.MongoClient(<span class="string">'mongodb://localhost:27017/'</span>)</span><br></pre></td></tr></table></figure><h1 id="【11-4】指定数据库"><a href="#【11-4】指定数据库" class="headerlink" title="【11.4】指定数据库"></a><font color="#ff0000">【11.4】指定数据库</font></h1><p>使用以下语句皆可指定一个名为 spiders 的数据库：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db = client.spiders</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db = client[<span class="string">'spiders'</span>]</span><br></pre></td></tr></table></figure><h1 id="【11-5】指定集合"><a href="#【11-5】指定集合" class="headerlink" title="【11.5】指定集合"></a><font color="#ff0000">【11.5】指定集合</font></h1><p>MongoDB 的每个数据库包含多个集合（collection），类似于关系型数据库 MySQL 中的数据表，使用以下语句皆可指定一个名为 students 的集合：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">collection = db.students</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">collection = db[<span class="string">'students'</span>]</span><br></pre></td></tr></table></figure><h1 id="【11-6】插入数据"><a href="#【11-6】插入数据" class="headerlink" title="【11.6】插入数据"></a><font color="#ff0000">【11.6】插入数据</font></h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pymongo</span><br><span class="line"></span><br><span class="line">client = pymongo.MongoClient(host=<span class="string">'localhost'</span>, port=<span class="number">27017</span>)</span><br><span class="line">db = client.spiders</span><br><span class="line">collection = db.students</span><br><span class="line">students = &#123;</span><br><span class="line">    <span class="string">'id'</span>: <span class="string">'17110105'</span>,</span><br><span class="line">    <span class="string">'name'</span>: <span class="string">'TRHX'</span>,</span><br><span class="line">    <span class="string">'age'</span>: <span class="number">20</span>,</span><br><span class="line">    <span class="string">'gender'</span>: <span class="string">'male'</span></span><br><span class="line">&#125;</span><br><span class="line">result = collection.insert(students)</span><br><span class="line">print(result)</span><br></pre></td></tr></table></figure><p>在 spiders 数据库的 students 集合里，新建一条学生数据，该数据以字典形式表示，调用 collection 的 <code>insert()</code> 方法插入数据，在 MongoDB 中，每条数据都有一个_id 属性来唯一标识。如果没有显式指明该属性，MongoDB 会自动产生一个 ObjectId 类型的_id 属性。<code>insert()</code> 方法会在执行后返回 _id  值，在 MongoDB 数据库里面可以看到已经成功插入数据，输出结果：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">5</span>d6f1a4b57b65e1547bb3c24</span><br></pre></td></tr></table></figure><fancybox><br><img src="https://cdn.jsdelivr.net/gh/TRHX/ImageHosting/ITRHX-PIC/A41/01.png" alt="01"><br></fancybox><p>进阶操作：同时插入多条数据，以列表形式传递：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pymongo</span><br><span class="line"></span><br><span class="line">client = pymongo.MongoClient(host=<span class="string">'localhost'</span>, port=<span class="number">27017</span>)</span><br><span class="line">db = client.spiders</span><br><span class="line">collection = db.students</span><br><span class="line">students1 = &#123;</span><br><span class="line">    <span class="string">'id'</span>: <span class="string">'17110105'</span>,</span><br><span class="line">    <span class="string">'name'</span>: <span class="string">'TRHX'</span>,</span><br><span class="line">    <span class="string">'age'</span>: <span class="number">20</span>,</span><br><span class="line">    <span class="string">'gender'</span>: <span class="string">'male'</span></span><br><span class="line">&#125;</span><br><span class="line">students2 = &#123;</span><br><span class="line">    <span class="string">'id'</span>: <span class="string">'17110106'</span>,</span><br><span class="line">    <span class="string">'name'</span>: <span class="string">'AAAA'</span>,</span><br><span class="line">    <span class="string">'age'</span>: <span class="number">22</span>,</span><br><span class="line">    <span class="string">'gender'</span>: <span class="string">'male'</span></span><br><span class="line">&#125;</span><br><span class="line">result = collection.insert([students1, students2])</span><br><span class="line">print(result)</span><br></pre></td></tr></table></figure><p>输出结果：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[ObjectId(<span class="string">'5d6f2be3cd1721962218a709'</span>), ObjectId(<span class="string">'5d6f2be3cd1721962218a70a'</span>)]</span><br></pre></td></tr></table></figure><fancybox><br><img src="https://cdn.jsdelivr.net/gh/TRHX/ImageHosting/ITRHX-PIC/A41/02.png" alt="02"><br></fancybox><p>PyMongo 3.x 及以上版本中，推荐使用 <code>insert_one()</code> 和 <code>insert_many()</code> 方法来分别插入单条记录和多条记录，示例：</p><p>插入单条记录</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pymongo</span><br><span class="line"></span><br><span class="line">client = pymongo.MongoClient(host=<span class="string">'localhost'</span>, port=<span class="number">27017</span>)</span><br><span class="line">db = client.spiders</span><br><span class="line">collection = db.students</span><br><span class="line">students = &#123;</span><br><span class="line">    <span class="string">'id'</span>: <span class="string">'17110105'</span>,</span><br><span class="line">    <span class="string">'name'</span>: <span class="string">'TRHX'</span>,</span><br><span class="line">    <span class="string">'age'</span>: <span class="number">20</span>,</span><br><span class="line">    <span class="string">'gender'</span>: <span class="string">'male'</span></span><br><span class="line">&#125;</span><br><span class="line">result = collection.insert_one(students)</span><br><span class="line">print(result)</span><br><span class="line">print(result.inserted_id)</span><br></pre></td></tr></table></figure><p>返回的是 InsertOneResult 对象，调用其 <code>inserted_id</code> 属性获取_id：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;pymongo.results.InsertOneResult object at <span class="number">0x0000020ED91A5608</span>&gt;</span><br><span class="line"><span class="number">5</span>d6f73940fe700c5a7ac19f0</span><br></pre></td></tr></table></figure><p>插入多条记录</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pymongo</span><br><span class="line"></span><br><span class="line">client = pymongo.MongoClient(host=<span class="string">'localhost'</span>, port=<span class="number">27017</span>)</span><br><span class="line">db = client.spiders</span><br><span class="line">collection = db.students</span><br><span class="line">students1 = &#123;</span><br><span class="line">    <span class="string">'id'</span>: <span class="string">'17110105'</span>,</span><br><span class="line">    <span class="string">'name'</span>: <span class="string">'TRHX'</span>,</span><br><span class="line">    <span class="string">'age'</span>: <span class="number">20</span>,</span><br><span class="line">    <span class="string">'gender'</span>: <span class="string">'male'</span></span><br><span class="line">&#125;</span><br><span class="line">students2 = &#123;</span><br><span class="line">    <span class="string">'id'</span>: <span class="string">'17110106'</span>,</span><br><span class="line">    <span class="string">'name'</span>: <span class="string">'AAAA'</span>,</span><br><span class="line">    <span class="string">'age'</span>: <span class="number">22</span>,</span><br><span class="line">    <span class="string">'gender'</span>: <span class="string">'male'</span></span><br><span class="line">&#125;</span><br><span class="line">result = collection.insert_many([students1, students2])</span><br><span class="line">print(result)</span><br><span class="line">print(result.inserted_ids)</span><br></pre></td></tr></table></figure><p>返回的类型是 InsertManyResult，调用 <code>inserted_ids</code> 属性可以获取插入数据的_id 列表：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;pymongo.results.InsertManyResult object at <span class="number">0x0000021698DD36C8</span>&gt;</span><br><span class="line">[ObjectId(<span class="string">'5d6f68598fa881c69b2e0006'</span>), ObjectId(<span class="string">'5d6f68598fa881c69b2e0007'</span>)]</span><br></pre></td></tr></table></figure><h1 id="【11-6】数据查询"><a href="#【11-6】数据查询" class="headerlink" title="【11.6】数据查询"></a><font color="#ff0000">【11.6】数据查询</font></h1><p>事先已经创建好 spiders 数据库和 students 集合，包含以下数据：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">_id:ObjectId("5d6f95d40828142f1dc35fa5")</span><br><span class="line">id:"17110105"</span><br><span class="line">name:"TRHX"</span><br><span class="line">age:20</span><br><span class="line">gender:"male"</span><br><span class="line"></span><br><span class="line">_id:ObjectId("5d6f95d40828142f1dc35fa6")</span><br><span class="line">id:"17110106"</span><br><span class="line">name:"AAA"</span><br><span class="line">age:20</span><br><span class="line">gender:"male"</span><br><span class="line"></span><br><span class="line">_id:ObjectId("5d6f95d40828142f1dc35fa7")</span><br><span class="line">id:"17110107"</span><br><span class="line">name:"BBB"</span><br><span class="line">age:19</span><br><span class="line">gender:"female"</span><br><span class="line"></span><br><span class="line">_id:ObjectId("5d6f95d40828142f1dc35fa8")</span><br><span class="line">id:"17110108"</span><br><span class="line">name:"CCC"</span><br><span class="line">age:22</span><br><span class="line">gender:"male"</span><br></pre></td></tr></table></figure><p>查询方法一：利用 <code>find_one()</code> 或 <code>find()</code> 方法进行查询， <code>find_one()</code> 查询得到的是单个结果，<code>find()</code> 则返回一个生成器对象</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pymongo</span><br><span class="line"></span><br><span class="line">client = pymongo.MongoClient(host=<span class="string">'localhost'</span>, port=<span class="number">27017</span>)</span><br><span class="line">db = client.spiders</span><br><span class="line">collection = db.students</span><br><span class="line">result = collection.find_one(&#123;<span class="string">'name'</span>: <span class="string">'TRHX'</span>&#125;)</span><br><span class="line">print(result)</span><br></pre></td></tr></table></figure><p>查询 name 为 TRHX 的数据，返回一个字典类型：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;<span class="string">'_id'</span>: ObjectId(<span class="string">'5d6f95d40828142f1dc35fa5'</span>), <span class="string">'id'</span>: <span class="string">'17110105'</span>, <span class="string">'name'</span>: <span class="string">'TRHX'</span>, <span class="string">'age'</span>: <span class="number">20</span>, <span class="string">'gender'</span>: <span class="string">'male'</span>&#125;</span><br></pre></td></tr></table></figure><p>查询方法二：根据 ObjectId 查询，查询时需要使用 bson 库里面的 objectid：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pymongo</span><br><span class="line"><span class="keyword">from</span> bson.objectid <span class="keyword">import</span> ObjectId</span><br><span class="line"></span><br><span class="line">client = pymongo.MongoClient(host=<span class="string">'localhost'</span>, port=<span class="number">27017</span>)</span><br><span class="line">db = client.spiders</span><br><span class="line">collection = db.students</span><br><span class="line">result = collection.find_one(&#123;<span class="string">'_id'</span>: ObjectId(<span class="string">'5d6f95d40828142f1dc35fa7'</span>)&#125;)</span><br><span class="line">print(result)</span><br></pre></td></tr></table></figure><p>查询结果：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;<span class="string">'_id'</span>: ObjectId(<span class="string">'5d6f95d40828142f1dc35fa7'</span>), <span class="string">'id'</span>: <span class="string">'17110107'</span>, <span class="string">'name'</span>: <span class="string">'BBB'</span>, <span class="string">'age'</span>: <span class="number">19</span>, <span class="string">'gender'</span>: <span class="string">'female'</span>&#125;</span><br></pre></td></tr></table></figure><p>使用 <code>find()</code> 方法查询多条数据：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pymongo</span><br><span class="line"></span><br><span class="line">client = pymongo.MongoClient(host=<span class="string">'localhost'</span>, port=<span class="number">27017</span>)</span><br><span class="line">db = client.spiders</span><br><span class="line">collection = db.students</span><br><span class="line">results = collection.find(&#123;<span class="string">'gender'</span>: <span class="string">'male'</span>&#125;)</span><br><span class="line">print(results)</span><br><span class="line"><span class="keyword">for</span> result <span class="keyword">in</span> results:</span><br><span class="line">    print(result)</span><br></pre></td></tr></table></figure><p><code>find()</code> 方法返回一个生成器对象，遍历得到所有数据，每条数据都是字典类型：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;pymongo.cursor.Cursor object at <span class="number">0x00000191F69AAA90</span>&gt;</span><br><span class="line">&#123;<span class="string">'_id'</span>: ObjectId(<span class="string">'5d6f95d40828142f1dc35fa5'</span>), <span class="string">'id'</span>: <span class="string">'17110105'</span>, <span class="string">'name'</span>: <span class="string">'TRHX'</span>, <span class="string">'age'</span>: <span class="number">20</span>, <span class="string">'gender'</span>: <span class="string">'male'</span>&#125;</span><br><span class="line">&#123;<span class="string">'_id'</span>: ObjectId(<span class="string">'5d6f95d40828142f1dc35fa6'</span>), <span class="string">'id'</span>: <span class="string">'17110106'</span>, <span class="string">'name'</span>: <span class="string">'AAA'</span>, <span class="string">'age'</span>: <span class="number">20</span>, <span class="string">'gender'</span>: <span class="string">'male'</span>&#125;</span><br><span class="line">&#123;<span class="string">'_id'</span>: ObjectId(<span class="string">'5d6f95d40828142f1dc35fa8'</span>), <span class="string">'id'</span>: <span class="string">'17110108'</span>, <span class="string">'name'</span>: <span class="string">'CCC'</span>, <span class="string">'age'</span>: <span class="number">22</span>, <span class="string">'gender'</span>: <span class="string">'male'</span>&#125;</span><br></pre></td></tr></table></figure><p>在查询条件中加入比较符号进行查询，以下代码实现了年龄大于等于20的数据查询：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pymongo</span><br><span class="line"></span><br><span class="line">client = pymongo.MongoClient(host=<span class="string">'localhost'</span>, port=<span class="number">27017</span>)</span><br><span class="line">db = client.spiders</span><br><span class="line">collection = db.students</span><br><span class="line">results = collection.find(&#123;<span class="string">'age'</span>: &#123;<span class="string">'$gte'</span>: <span class="number">20</span>&#125;&#125;)</span><br><span class="line"><span class="keyword">for</span> result <span class="keyword">in</span> results:</span><br><span class="line">    print(result)</span><br></pre></td></tr></table></figure><p>符号 <code>$gte</code> 表示大于等于，查询结果如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;<span class="string">'_id'</span>: ObjectId(<span class="string">'5d6f95d40828142f1dc35fa5'</span>), <span class="string">'id'</span>: <span class="string">'17110105'</span>, <span class="string">'name'</span>: <span class="string">'TRHX'</span>, <span class="string">'age'</span>: <span class="number">20</span>, <span class="string">'gender'</span>: <span class="string">'male'</span>&#125;</span><br><span class="line">&#123;<span class="string">'_id'</span>: ObjectId(<span class="string">'5d6f95d40828142f1dc35fa6'</span>), <span class="string">'id'</span>: <span class="string">'17110106'</span>, <span class="string">'name'</span>: <span class="string">'AAA'</span>, <span class="string">'age'</span>: <span class="number">20</span>, <span class="string">'gender'</span>: <span class="string">'male'</span>&#125;</span><br><span class="line">&#123;<span class="string">'_id'</span>: ObjectId(<span class="string">'5d6f95d40828142f1dc35fa8'</span>), <span class="string">'id'</span>: <span class="string">'17110108'</span>, <span class="string">'name'</span>: <span class="string">'CCC'</span>, <span class="string">'age'</span>: <span class="number">22</span>, <span class="string">'gender'</span>: <span class="string">'male'</span>&#125;</span><br></pre></td></tr></table></figure><center>附表：各种比较符号</center><table><thead><tr><th>符号</th><th>含义</th><th>示例</th></tr></thead><tbody><tr><td>$lt</td><td>小于</td><td>{‘age’: {‘$lt’: 20}}</td></tr><tr><td>$gt</td><td>大于</td><td>{‘age’: {‘$gt’: 20}}</td></tr><tr><td>$lte</td><td>小于等于</td><td>{‘age’: {‘$lte’: 20}}</td></tr><tr><td>$gte</td><td>大于等于</td><td>{‘age’: {‘$gte’: 20}}</td></tr><tr><td>$ne</td><td>不等于</td><td>{‘age’: {‘$ne’: 20}}</td></tr><tr><td>$in</td><td>在范围内</td><td>{‘age’: {‘$in’: [20, 23]}}</td></tr><tr><td>$nin</td><td>不在范围内</td><td>{‘age’: {‘$nin’: [20, 23]}}</td></tr></tbody></table><p>在查询条件中加入功能符号进行查询，以下代码用正则匹配实现了对名字以 T 开头的学生数据的查询：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pymongo</span><br><span class="line"></span><br><span class="line">client = pymongo.MongoClient(host=<span class="string">'localhost'</span>, port=<span class="number">27017</span>)</span><br><span class="line">db = client.spiders</span><br><span class="line">collection = db.students</span><br><span class="line">results = collection.find(&#123;<span class="string">'name'</span>: &#123;<span class="string">'$regex'</span>: <span class="string">'^T.*'</span>&#125;&#125;)</span><br><span class="line"><span class="keyword">for</span> result <span class="keyword">in</span> results:</span><br><span class="line">    print(result)</span><br></pre></td></tr></table></figure><p>查询结果：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;<span class="string">'_id'</span>: ObjectId(<span class="string">'5d6f95d40828142f1dc35fa5'</span>), <span class="string">'id'</span>: <span class="string">'17110105'</span>, <span class="string">'name'</span>: <span class="string">'TRHX'</span>, <span class="string">'age'</span>: <span class="number">20</span>, <span class="string">'gender'</span>: <span class="string">'male'</span>&#125;</span><br></pre></td></tr></table></figure><center>附表：各种功能符号</center><table><thead><tr><th>符号</th><th>含义</th><th>示例</th><th>示例含义</th></tr></thead><tbody><tr><td>$regex</td><td>匹配正则表达式</td><td>{‘name’: {‘$regex’: ‘^T.*’}}</td><td>name 以 T 开头</td></tr><tr><td>$exists</td><td>属性是否存在</td><td>{‘name’: {‘$exists’: True}}</td><td>name 属性存在</td></tr><tr><td>$type</td><td>类型判断</td><td>{‘age’: {‘$type’: ‘int’}}</td><td>age 的类型为 int</td></tr><tr><td>$mod</td><td>数字模操作</td><td>{‘age’: {‘$mod’: [5, 0]}}</td><td>年龄模 5 余 0</td></tr><tr><td>$text</td><td>文本查询</td><td>{‘$text’: {‘$search’: ‘Mike’}}</td><td>text 类型的属性中包含 Mike 字符串</td></tr><tr><td>$where</td><td>高级条件查询</td><td>{‘$where’: ‘obj.fans_count == obj.follows_count’}</td><td>自身粉丝数等于关注数</td></tr></tbody></table><p>其他操作：<a href="https://docs.mongodb.com/manual/reference/operator/query/" target="_blank" rel="noopener">https://docs.mongodb.com/manual/reference/operator/query/</a></p><h1 id="【11-7】数据计数"><a href="#【11-7】数据计数" class="headerlink" title="【11.7】数据计数"></a><font color="#ff0000">【11.7】数据计数</font></h1><p>调用 <code>count()</code> 方法可以统计查询结果有多少条数据，输出结果为一个整数：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pymongo</span><br><span class="line"></span><br><span class="line">client = pymongo.MongoClient(host=<span class="string">'localhost'</span>, port=<span class="number">27017</span>)</span><br><span class="line">db = client.spiders</span><br><span class="line">collection = db.students</span><br><span class="line">result = collection.find(&#123;<span class="string">'name'</span>: &#123;<span class="string">'$regex'</span>: <span class="string">'^T.*'</span>&#125;&#125;).count()</span><br><span class="line">print(result)</span><br></pre></td></tr></table></figure><h1 id="【11-8】数据排序"><a href="#【11-8】数据排序" class="headerlink" title="【11.8】数据排序"></a><font color="#ff0000">【11.8】数据排序</font></h1><p>调用 <code>sort()</code> 方法，向其传入排序的字段及升降序标志即可完成排序：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pymongo</span><br><span class="line"></span><br><span class="line">client = pymongo.MongoClient(host=<span class="string">'localhost'</span>, port=<span class="number">27017</span>)</span><br><span class="line">db = client.spiders</span><br><span class="line">collection = db.students</span><br><span class="line">ascending = collection.find().sort(<span class="string">'name'</span>, pymongo.ASCENDING)</span><br><span class="line">descending = collection.find().sort(<span class="string">'name'</span>, pymongo.DESCENDING)</span><br><span class="line">print(<span class="string">'升序排列：'</span>, [result[<span class="string">'name'</span>] <span class="keyword">for</span> result <span class="keyword">in</span> ascending])</span><br><span class="line">print(<span class="string">'降序排列：'</span>, [result[<span class="string">'name'</span>] <span class="keyword">for</span> result <span class="keyword">in</span> descending])</span><br></pre></td></tr></table></figure><p>输出结果：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">升序排列： [<span class="string">'AAA'</span>, <span class="string">'BBB'</span>, <span class="string">'CCC'</span>, <span class="string">'TRHX'</span>]</span><br><span class="line">降序排列： [<span class="string">'TRHX'</span>, <span class="string">'CCC'</span>, <span class="string">'BBB'</span>, <span class="string">'AAA'</span>]</span><br></pre></td></tr></table></figure><h1 id="【11-9】数据偏移"><a href="#【11-9】数据偏移" class="headerlink" title="【11.9】数据偏移"></a><font color="#ff0000">【11.9】数据偏移</font></h1><p>利用 <code>skip()</code> 方法偏移几个位置，就可以跳过前几条数据，获取偏移量之后的几个数据；利用 <code>limit()</code> 方法指定获取前几条数据：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pymongo</span><br><span class="line"></span><br><span class="line">client = pymongo.MongoClient(host=<span class="string">'localhost'</span>, port=<span class="number">27017</span>)</span><br><span class="line">db = client.spiders</span><br><span class="line">collection = db.students</span><br><span class="line">ascending = collection.find().sort(<span class="string">'name'</span>, pymongo.ASCENDING).skip(<span class="number">1</span>)</span><br><span class="line">descending = collection.find().sort(<span class="string">'name'</span>, pymongo.DESCENDING).limit(<span class="number">2</span>)</span><br><span class="line">print(<span class="string">'升序排列（偏移量为1，获取后三条数据）：'</span>, [result[<span class="string">'name'</span>] <span class="keyword">for</span> result <span class="keyword">in</span> ascending])</span><br><span class="line">print(<span class="string">'降序排列（限制获取前两条数据）：'</span>, [result[<span class="string">'name'</span>] <span class="keyword">for</span> result <span class="keyword">in</span> descending])</span><br></pre></td></tr></table></figure><p>输出结果：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">升序排列（偏移量为<span class="number">1</span>，获取后三条数据）： [<span class="string">'BBB'</span>, <span class="string">'CCC'</span>, <span class="string">'TRHX'</span>]</span><br><span class="line">降序排列（限制获取前两条数据）： [<span class="string">'TRHX'</span>, <span class="string">'CCC'</span>]</span><br></pre></td></tr></table></figure><h1 id="【11-10】更新数据"><a href="#【11-10】更新数据" class="headerlink" title="【11.10】更新数据"></a><font color="#ff0000">【11.10】更新数据</font></h1><p>使用 <code>update()</code> 方法，指定更新的条件和更新后的数据即可：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pymongo</span><br><span class="line"></span><br><span class="line">client = pymongo.MongoClient(host=<span class="string">'localhost'</span>, port=<span class="number">27017</span>)</span><br><span class="line">db = client.spiders</span><br><span class="line">collection = db.students</span><br><span class="line">condition = &#123;<span class="string">'name'</span>: <span class="string">'TRHX'</span>&#125;</span><br><span class="line">student = collection.find_one(condition)</span><br><span class="line">student[<span class="string">'age'</span>] = <span class="number">18</span></span><br><span class="line">result = collection.update(condition, student)</span><br><span class="line">print(result)</span><br></pre></td></tr></table></figure><p>该代码将 name 为 TRHX 的 age 改为了 18，返回结果仍然是字典形式，ok 代表执行成功，nModified 代表影响的数据条数：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;<span class="string">'n'</span>: <span class="number">1</span>, <span class="string">'nModified'</span>: <span class="number">1</span>, <span class="string">'ok'</span>: <span class="number">1.0</span>, <span class="string">'updatedExisting'</span>: <span class="keyword">True</span>&#125;</span><br></pre></td></tr></table></figure><p>进阶操作：使用 <code>$set</code> 操作符对数据进行更新，指定更新的条件和更新后的数据即可，这样做的好处是：只更新指定的 student 字典内存在的字段，如果原先还有其他字段，则不会更新，也不会删除；如果不用 <code>$set</code> ，则会把之前的数据全部用 student 字典替换，如果原本存在其他字段，则会被删除</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pymongo</span><br><span class="line"></span><br><span class="line">client = pymongo.MongoClient(host=<span class="string">'localhost'</span>, port=<span class="number">27017</span>)</span><br><span class="line">db = client.spiders</span><br><span class="line">collection = db.students</span><br><span class="line">condition = &#123;<span class="string">'name'</span>: <span class="string">'TRHX'</span>&#125;</span><br><span class="line">student = collection.find_one(condition)</span><br><span class="line">student[<span class="string">'age'</span>] = <span class="number">18</span></span><br><span class="line">result = collection.update(condition, &#123;<span class="string">'$set'</span>: student&#125;)</span><br><span class="line">print(result)</span><br></pre></td></tr></table></figure><p>和插入数据的 <code>insert()</code> 方法一样，在 PyMongo 3.x 版本里，推荐使用 <code>update_one()</code> 和 <code>update_many()</code> 方法</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pymongo</span><br><span class="line"></span><br><span class="line">client = pymongo.MongoClient(host=<span class="string">'localhost'</span>, port=<span class="number">27017</span>)</span><br><span class="line">db = client.spiders</span><br><span class="line">collection = db.students</span><br><span class="line">condition = &#123;<span class="string">'name'</span>: <span class="string">'TRHX'</span>&#125;</span><br><span class="line">student = collection.find_one(condition)</span><br><span class="line">student[<span class="string">'age'</span>] = <span class="number">19</span></span><br><span class="line">result = collection.update_one(condition, &#123;<span class="string">'$set'</span>: student&#125;)</span><br><span class="line">print(result)</span><br><span class="line">print(result.matched_count, result.modified_count)</span><br></pre></td></tr></table></figure><p>注意：<code>update_one()</code> 方法不能直接传入修改后的字典，只能使用 <code>{&#39;$set&#39;: student}</code> 的形式传入，可以调用 <code>matched_count</code> 和 <code>modified_count</code> 属性，获取匹配的数据条数和影响的数据条数：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;pymongo.results.UpdateResult object at <span class="number">0x00000235A1684508</span>&gt;</span><br><span class="line"><span class="number">1</span> <span class="number">1</span></span><br></pre></td></tr></table></figure><p>使用<code>update_many()</code> 方法可以将所有符合条件的数据都更新：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pymongo</span><br><span class="line"></span><br><span class="line">client = pymongo.MongoClient(host=<span class="string">'localhost'</span>, port=<span class="number">27017</span>)</span><br><span class="line">db = client.spiders</span><br><span class="line">collection = db.students</span><br><span class="line">condition = &#123;<span class="string">'age'</span>: &#123;<span class="string">'$gt'</span>: <span class="number">18</span>&#125;&#125;</span><br><span class="line">result = collection.update_many(condition, &#123;<span class="string">'$set'</span>: &#123;<span class="string">'age'</span>: <span class="number">25</span>&#125;&#125;)</span><br><span class="line">print(result)</span><br><span class="line">print(result.matched_count, result.modified_count)</span><br></pre></td></tr></table></figure><p>匹配所有年龄大于 18 的数据，更新条件为将这些所有满足条件的年龄都设置成 25，输出结果如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;pymongo.results.UpdateResult object at <span class="number">0x00000285CECC45C8</span>&gt;</span><br><span class="line"><span class="number">4</span> <span class="number">4</span></span><br></pre></td></tr></table></figure><h1 id="【11-11】删除数据"><a href="#【11-11】删除数据" class="headerlink" title="【11.11】删除数据"></a><font color="#ff0000">【11.11】删除数据</font></h1><p>调用 <code>remove()</code> 方法并指定删除的条件，此时符合条件的所有数据均会被删除</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pymongo</span><br><span class="line"></span><br><span class="line">client = pymongo.MongoClient(host=<span class="string">'localhost'</span>, port=<span class="number">27017</span>)</span><br><span class="line">db = client.spiders</span><br><span class="line">collection = db.students</span><br><span class="line">result = collection.remove(&#123;<span class="string">'name'</span>: <span class="string">'CCC'</span>&#125;)</span><br><span class="line">print(result)</span><br></pre></td></tr></table></figure><p>输出结果：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;<span class="string">'n'</span>: <span class="number">1</span>, <span class="string">'ok'</span>: <span class="number">1.0</span>&#125;</span><br></pre></td></tr></table></figure><p>同样的，在 PyMongo 3.x 版本里，推荐使用 <code>delete_one()</code> 和 <code>delete_many()</code> 方法</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pymongo</span><br><span class="line"></span><br><span class="line">client = pymongo.MongoClient(host=<span class="string">'localhost'</span>, port=<span class="number">27017</span>)</span><br><span class="line">db = client.spiders</span><br><span class="line">collection = db.students</span><br><span class="line">result = collection.delete_one(&#123;<span class="string">'name'</span>: <span class="string">'AAA'</span>&#125;)</span><br><span class="line">print(result)</span><br><span class="line">print(result.deleted_count)</span><br><span class="line">result = collection.delete_many(&#123;<span class="string">'gender'</span>: <span class="string">'female'</span>&#125;)</span><br><span class="line">print(result.deleted_count)</span><br></pre></td></tr></table></figure><p>调用 <code>deleted_count</code> 属性可以获取删除的数据条数，输出结果：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;pymongo.results.DeleteResult object at <span class="number">0x0000024441B245C8</span>&gt;</span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="number">1</span></span><br></pre></td></tr></table></figure><p>PyMongo 官方文档：<a href="http://api.mongodb.com/python/current/api/pymongo/collection.html" target="_blank" rel="noopener">http://api.mongodb.com/python/current/api/pymongo/collection.html</a></p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;center&gt;&lt;font color=&quot;#1BC3FB&quot; size=&quot;4&quot;&gt;Python3 爬虫学习笔记第十一章 —— 【MongoDB数据储存】&lt;/font&gt;&lt;/center&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="Python3 学习笔记" scheme="https://www.itrhx.com/categories/Python3-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
      <category term="爬虫学习" scheme="https://www.itrhx.com/categories/Python3-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E7%88%AC%E8%99%AB%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="爬虫" scheme="https://www.itrhx.com/tags/%E7%88%AC%E8%99%AB/"/>
    
      <category term="MongoDB" scheme="https://www.itrhx.com/tags/MongoDB/"/>
    
  </entry>
  
  <entry>
    <title>Python3 爬虫学习笔记 C10</title>
    <link href="https://www.itrhx.com/2019/09/03/A40-Python3-spider-C10/"/>
    <id>https://www.itrhx.com/2019/09/03/A40-Python3-spider-C10/</id>
    <published>2019-09-03T15:39:27.326Z</published>
    <updated>2019-09-24T12:40:41.602Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><blockquote><center><font color="#1BC3FB" size="4">Python3 爬虫学习笔记第十章 —— 【MySQL数据储存】</font></center></blockquote><a id="more"></a><h1 id="【10-1】MySQL-基本操作语句"><a href="#【10-1】MySQL-基本操作语句" class="headerlink" title="【10.1】MySQL 基本操作语句"></a><font color="#ff0000">【10.1】MySQL 基本操作语句</font></h1><p>安装完 MySQL 后，打开 MySQL x.x Command Line Client - Unicode，输入密码即可登录 MySQL，也可在 MySQL 安装目录下打开 cmd 使用命令登录数据库</p><h2 id="数据库操作"><a href="#数据库操作" class="headerlink" title="数据库操作"></a>数据库操作</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"># 连接数据库</span><br><span class="line">mysql -u root -p</span><br><span class="line"></span><br><span class="line"># 退出数据库</span><br><span class="line">exit</span><br><span class="line"></span><br><span class="line"># 查看所有的数据库</span><br><span class="line"><span class="keyword">SHOW</span> <span class="keyword">DATABASES</span>;</span><br><span class="line"></span><br><span class="line"># 创建一个数据库</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">DATABASE</span> X;</span><br><span class="line"></span><br><span class="line"># 删除一个数据库</span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">DATABASE</span> <span class="keyword">IF</span> <span class="keyword">EXISTS</span> X;</span><br><span class="line"></span><br><span class="line"># 使用这个数据库</span><br><span class="line"><span class="keyword">USE</span> X;</span><br></pre></td></tr></table></figure><h2 id="表操作"><a href="#表操作" class="headerlink" title="表操作"></a>表操作</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"># 查看所有的表</span><br><span class="line"><span class="keyword">SHOW</span> <span class="keyword">TABLES</span> ;</span><br><span class="line"></span><br><span class="line"># 创建一个表</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> n(<span class="keyword">id</span> <span class="built_in">INT</span>, <span class="keyword">name</span> <span class="built_in">VARCHAR</span>(<span class="number">10</span>));</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> m(<span class="keyword">id</span> <span class="built_in">INT</span>, <span class="keyword">name</span> <span class="built_in">VARCHAR</span>(<span class="number">10</span>), PRIMARY <span class="keyword">KEY</span> (<span class="keyword">id</span>), FOREIGN <span class="keyword">KEY</span> (<span class="keyword">id</span>) <span class="keyword">REFERENCES</span> n(<span class="keyword">id</span>), <span class="keyword">UNIQUE</span> (<span class="keyword">name</span>));</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> m(<span class="keyword">id</span> <span class="built_in">INT</span>, <span class="keyword">name</span> <span class="built_in">VARCHAR</span>(<span class="number">10</span>));</span><br><span class="line"></span><br><span class="line"># 直接将查询结果导入或复制到新创建的表</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> n <span class="keyword">SELECT</span> * <span class="keyword">FROM</span> m;</span><br><span class="line"></span><br><span class="line"># 新创建的表与一个存在的表的数据结构类似</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> m <span class="keyword">LIKE</span> n;</span><br><span class="line"></span><br><span class="line"># 创建一个临时表</span><br><span class="line"># 临时表将在你连接MySQL期间存在。当断开连接时，MySQL将自动删除表并释放所用的空间。也可手动删除。</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TEMPORARY</span> <span class="keyword">TABLE</span> l(<span class="keyword">id</span> <span class="built_in">INT</span>, <span class="keyword">name</span> <span class="built_in">VARCHAR</span>(<span class="number">10</span>));</span><br><span class="line"></span><br><span class="line"># 直接将查询结果导入或复制到新创建的临时表</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TEMPORARY</span> <span class="keyword">TABLE</span> tt <span class="keyword">SELECT</span> * <span class="keyword">FROM</span> n;</span><br><span class="line"></span><br><span class="line"># 删除一个存在表</span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> <span class="keyword">IF</span> <span class="keyword">EXISTS</span> m;</span><br><span class="line"></span><br><span class="line"># 更改存在表的名称</span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> n <span class="keyword">RENAME</span> m;</span><br><span class="line"><span class="keyword">RENAME</span> <span class="keyword">TABLE</span> n <span class="keyword">TO</span> m;</span><br><span class="line"></span><br><span class="line"># 查看表的结构(以下五条语句效果相同）</span><br><span class="line">DESC n;</span><br><span class="line"><span class="keyword">DESCRIBE</span> n;</span><br><span class="line"><span class="keyword">SHOW</span> <span class="keyword">COLUMNS</span> <span class="keyword">IN</span> n;</span><br><span class="line"><span class="keyword">SHOW</span> <span class="keyword">COLUMNS</span> <span class="keyword">FROM</span> n;</span><br><span class="line"><span class="keyword">EXPLAIN</span> n;</span><br><span class="line"></span><br><span class="line"># 查看表的创建语句</span><br><span class="line"><span class="keyword">SHOW</span> <span class="keyword">CREATE</span> <span class="keyword">TABLE</span> n;</span><br></pre></td></tr></table></figure><h2 id="表的结构"><a href="#表的结构" class="headerlink" title="表的结构"></a>表的结构</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"># 添加字段</span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> n <span class="keyword">ADD</span> age <span class="built_in">VARCHAR</span>(<span class="number">2</span>);</span><br><span class="line"></span><br><span class="line"># 添加字段时设定位置</span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> n <span class="keyword">ADD</span> age <span class="built_in">VARCHAR</span>(<span class="number">2</span>)  <span class="keyword">FIRST</span>;</span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> n <span class="keyword">ADD</span> age <span class="built_in">VARCHAR</span>(<span class="number">2</span>)  <span class="keyword">AFTER</span> <span class="keyword">name</span>;</span><br><span class="line"></span><br><span class="line"># 修改字段在表中的位置</span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> n <span class="keyword">MODIFY</span> age <span class="built_in">VARCHAR</span>(<span class="number">2</span>) <span class="keyword">AFTER</span> <span class="keyword">name</span>;</span><br><span class="line"></span><br><span class="line"># 删除字段</span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> n <span class="keyword">DROP</span> age;</span><br><span class="line"></span><br><span class="line"># 更改字段属性和属性</span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> n <span class="keyword">CHANGE</span> age a <span class="built_in">INT</span>;</span><br><span class="line"></span><br><span class="line"># 只更改字段属性</span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> n <span class="keyword">MODIFY</span> age <span class="built_in">VARCHAR</span>(<span class="number">7</span>) ;</span><br><span class="line"></span><br><span class="line"># 改变表的存储引擎</span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> t <span class="keyword">ENGINE</span> myisam;</span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> t <span class="keyword">ENGINE</span> <span class="keyword">innodb</span>;</span><br><span class="line"></span><br><span class="line"># 设定自增 初始为1，只能一个字段使用，该字段为主键的一部分</span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> t AUTO_INCREMENT = <span class="number">0</span>;</span><br></pre></td></tr></table></figure><h2 id="表的数据"><a href="#表的数据" class="headerlink" title="表的数据"></a>表的数据</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"># 增加数据</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> n <span class="keyword">VALUES</span> (<span class="number">1</span>, <span class="string">'tom'</span>, <span class="string">'23'</span>), (<span class="number">2</span>, <span class="string">'john'</span>, <span class="string">'22'</span>);</span><br><span class="line">INSERT INTO n SELECT * FROM n;  # 把数据复制一遍重新插入</span><br><span class="line"></span><br><span class="line"># 删除数据</span><br><span class="line"><span class="keyword">DELETE</span> <span class="keyword">FROM</span> n <span class="keyword">WHERE</span> <span class="keyword">id</span> = <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line"># 更改数据</span><br><span class="line"><span class="keyword">UPDATE</span> n <span class="keyword">SET</span> <span class="keyword">name</span> = <span class="string">'tom'</span> <span class="keyword">WHERE</span> <span class="keyword">id</span> = <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line"># 数据查找</span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> n <span class="keyword">WHERE</span> <span class="keyword">name</span> <span class="keyword">LIKE</span> <span class="string">'%h%'</span>;</span><br><span class="line"></span><br><span class="line"># 数据排序(反序)</span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> n <span class="keyword">ORDER</span> <span class="keyword">BY</span> <span class="keyword">name</span>, <span class="keyword">id</span> <span class="keyword">DESC</span> ;</span><br></pre></td></tr></table></figure><h1 id="【10-2】Python-连接-MySQL"><a href="#【10-2】Python-连接-MySQL" class="headerlink" title="【10.2】Python 连接 MySQL"></a><font color="#ff0000">【10.2】Python 连接 MySQL</font></h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pymysql</span><br><span class="line"></span><br><span class="line">db = pymysql.connect(host=<span class="string">'localhost'</span>, user=<span class="string">'root'</span>, password=<span class="string">'000000'</span>, port=<span class="number">3306</span>)</span><br><span class="line">cursor = db.cursor()</span><br><span class="line">cursor.execute(<span class="string">'SELECT VERSION()'</span>)</span><br><span class="line">data = cursor.fetchone()</span><br><span class="line">print(<span class="string">'Database version:'</span>, data)</span><br><span class="line">cursor.execute(<span class="string">"CREATE DATABASE spiders DEFAULT CHARACTER SET utf8mb4"</span>)</span><br><span class="line">db.close()</span><br></pre></td></tr></table></figure><p>通过 PyMySQL 的 connect 方法声明一个 MySQL 连接对象 db，当前 MySQL 数据库运行在本地，设定 <code>host=&#39;localhost&#39;</code>，用户名为 <code>root</code>，登录密码为 <code>000000</code>，运行在 <code>3306</code> 端口，调用 <code>cursor()</code> 方法获得 MySQL 的操作游标，该游标用来执行 SQL 语句，通过游标操作 <code>execute()</code> 方法写入 SQL 语句，第一条 SQL 语句获取 MySQL 的版本信息，调用 <code>fetchone()</code> 方法获得第一条数据，即 MySQL 的版本号。第二条 SQL 语句执行创建 spiders 数据库的操作，编码为 utf8mb4，运行该段代码将输出 MySQL 的版本号：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Database version: (<span class="string">'8.0.17'</span>,)</span><br></pre></td></tr></table></figure><h1 id="【10-3】创建表"><a href="#【10-3】创建表" class="headerlink" title="【10.3】创建表"></a><font color="#ff0000">【10.3】创建表</font></h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pymysql</span><br><span class="line"></span><br><span class="line">db = pymysql.connect(host=<span class="string">'localhost'</span>, user=<span class="string">'root'</span>, password=<span class="string">'000000'</span>, port=<span class="number">3306</span>, db=<span class="string">'spiders'</span>)</span><br><span class="line">cursor = db.cursor()</span><br><span class="line">sql = <span class="string">'CREATE TABLE IF NOT EXISTS students (id VARCHAR(255) NOT NULL, name VARCHAR(255) NOT NULL, age VARCHAR(255) NOT NULL, PRIMARY KEY (id))'</span></span><br><span class="line">cursor.execute(sql)</span><br><span class="line">db.close()</span><br></pre></td></tr></table></figure><p>该段代码实现了在 spiders 数据库里创建了一个名为 students 的表，包含 id、name、age 三个字段，类型依次为 varchar、varchar、int</p><h1 id="【10-4】插入数据"><a href="#【10-4】插入数据" class="headerlink" title="【10.4】插入数据"></a><font color="#ff0000">【10.4】插入数据</font></h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pymysql</span><br><span class="line"></span><br><span class="line">id = <span class="string">'17110105'</span></span><br><span class="line">user = <span class="string">'TRH'</span></span><br><span class="line">age = <span class="number">20</span></span><br><span class="line">db = pymysql.connect(host=<span class="string">'localhost'</span>, user=<span class="string">'root'</span>, password=<span class="string">'000000'</span>, port=<span class="number">3306</span>, db=<span class="string">'spiders'</span>)</span><br><span class="line">cursor = db.cursor()</span><br><span class="line">sql = <span class="string">'INSERT INTO students(id, name, age) values(%s, %s, %s)'</span></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    cursor.execute(sql, (id, user, age))</span><br><span class="line">    db.commit()</span><br><span class="line"><span class="keyword">except</span>:</span><br><span class="line">    db.rollback()</span><br><span class="line">db.close()</span><br></pre></td></tr></table></figure><p><code>commit()</code> 方法的作用是实现数据插入，是真正将语句提交到数据库执行的方法，使用 <code>try except</code> 语句实现异常处理，如果执行失败，则调用 <code>rollback()</code> 方法执行数据回滚，保证原数据不被破坏，使用查询语句可以看到已经插入的数据：</p><fancybox><br><img src="https://cdn.jsdelivr.net/gh/TRHX/ImageHosting/ITRHX-PIC/A40/01.png" alt="01"><br></fancybox><p>进阶操作：将需要插入的数据构造成一个字典，这样的做法可以让插入方法无需改动，只需要传入一个动态变化的字典就行了，改写原来的代码如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pymysql</span><br><span class="line"></span><br><span class="line">data = &#123;</span><br><span class="line">    <span class="string">'id'</span>: <span class="string">'17110105'</span>,</span><br><span class="line">    <span class="string">'name'</span>: <span class="string">'TRH'</span>,</span><br><span class="line">    <span class="string">'age'</span>: <span class="number">20</span></span><br><span class="line">&#125;</span><br><span class="line">table = <span class="string">'students'</span></span><br><span class="line">keys = <span class="string">', '</span>.join(data.keys())</span><br><span class="line">values = <span class="string">', '</span>.join([<span class="string">'%s'</span>]*len(data))</span><br><span class="line">db = pymysql.connect(host=<span class="string">'localhost'</span>, user=<span class="string">'root'</span>, password=<span class="string">'000000'</span>, port=<span class="number">3306</span>, db=<span class="string">'spiders'</span>)</span><br><span class="line">cursor = db.cursor()</span><br><span class="line">sql = <span class="string">'INSERT INTO &#123;table&#125;(&#123;keys&#125;) VALUES (&#123;values&#125;)'</span>.format(table=table, keys=keys, values=values)</span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    cursor.execute(sql, tuple(data.values()))</span><br><span class="line">    print(<span class="string">'数据插入成功！'</span>)</span><br><span class="line">    db.commit()</span><br><span class="line"><span class="keyword">except</span>:</span><br><span class="line">    print(<span class="string">'数据插入失败！'</span>)</span><br><span class="line">    db.rollback()</span><br><span class="line">db.close()</span><br></pre></td></tr></table></figure><p>传入的数是字典，将其定义为 data 变量，表名定义成变量 table，构造插入的字段 id、name 和 age。<code>&#39;, &#39;.join(data.keys())</code>  的结果就是 id, name, age，接着需要构造多个 <code>%s</code> 当作占位符，有三个字段，就需要构造 <code>%s, %s, %s</code>。首先定义长度为 1 的数组 <code>[&#39;%s&#39;]</code>，然后用乘法将其扩充为 <code>[&#39;%s&#39;, &#39;%s&#39;, &#39;%s&#39;]</code>，再调用 <code>join()</code> 方法，最终变成 <code>%s, %s, %s</code>。再利用字符串的 <code>format()</code> 方法将表名、字段名和占位符构造出来。最终的 SQL 语句就被动态构造成了如下语句：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">INSERT INTO students(id, name, age) VALUES (%s, %s, %s)</span><br></pre></td></tr></table></figure><h1 id="【10-5】更新数据"><a href="#【10-5】更新数据" class="headerlink" title="【10.5】更新数据"></a><font color="#ff0000">【10.5】更新数据</font></h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pymysql</span><br><span class="line"></span><br><span class="line">data = &#123;</span><br><span class="line">    <span class="string">'id'</span>: <span class="string">'17110105'</span>,</span><br><span class="line">    <span class="string">'name'</span>: <span class="string">'TRH'</span>,</span><br><span class="line">    <span class="string">'age'</span>: <span class="number">21</span></span><br><span class="line">&#125;</span><br><span class="line">table = <span class="string">'students'</span></span><br><span class="line">keys = <span class="string">', '</span>.join(data.keys())</span><br><span class="line">values = <span class="string">', '</span>.join([<span class="string">'%s'</span>]*len(data))</span><br><span class="line">db = pymysql.connect(host=<span class="string">'localhost'</span>, user=<span class="string">'root'</span>, password=<span class="string">'000000'</span>, port=<span class="number">3306</span>, db=<span class="string">'spiders'</span>)</span><br><span class="line">cursor = db.cursor()</span><br><span class="line">sql = <span class="string">'INSERT INTO &#123;table&#125;(&#123;keys&#125;) VALUES (&#123;values&#125;) ON DUPLICATE KEY UPDATE'</span>.format(table=table, keys=keys, values=values)</span><br><span class="line">update = <span class="string">','</span>.join([<span class="string">"&#123;key&#125; = % s"</span>.format(key=key) <span class="keyword">for</span> key <span class="keyword">in</span> data])</span><br><span class="line">sql += update</span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    <span class="keyword">if</span> cursor.execute(sql, tuple(data.values())*<span class="number">2</span>):</span><br><span class="line">        print(<span class="string">'数据插入成功！'</span>)</span><br><span class="line">        db.commit()</span><br><span class="line"><span class="keyword">except</span>:</span><br><span class="line">    print(<span class="string">'数据插入失败！'</span>)</span><br><span class="line">    db.rollback()</span><br><span class="line">db.close()</span><br></pre></td></tr></table></figure><p><code>ON DUPLICATE KEY UPDATE</code> 表示如果主键已经存在，就执行更新操作，最终被构造成如下语句：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">INSERT INTO students(id, name, age) VALUES (% s, % s, % s) ON DUPLICATE KEY UPDATE id = % s, name = % s, age = % s</span><br></pre></td></tr></table></figure><h1 id="【10-6】删除数据"><a href="#【10-6】删除数据" class="headerlink" title="【10.6】删除数据"></a><font color="#ff0000">【10.6】删除数据</font></h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pymysql</span><br><span class="line"></span><br><span class="line">table = <span class="string">'students'</span></span><br><span class="line">condition = <span class="string">'age = 20'</span></span><br><span class="line">db = pymysql.connect(host=<span class="string">'localhost'</span>, user=<span class="string">'root'</span>, password=<span class="string">'000000'</span>, port=<span class="number">3306</span>, db=<span class="string">'spiders'</span>)</span><br><span class="line">cursor = db.cursor()</span><br><span class="line">sql = <span class="string">'DELETE FROM  &#123;table&#125; WHERE &#123;condition&#125;'</span>.format(table=table, condition=condition)</span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    cursor.execute(sql)</span><br><span class="line">    print(<span class="string">'数据删除成功！'</span>)</span><br><span class="line">    db.commit()</span><br><span class="line"><span class="keyword">except</span>:</span><br><span class="line">    print(<span class="string">'数据删除失败！'</span>)</span><br><span class="line">    db.rollback()</span><br><span class="line">db.close()</span><br></pre></td></tr></table></figure><p>删除操作直接使用 <code>DELETE</code> 语句，指定要删除的目标表名和删除条件即可</p><h1 id="【10-7】查询数据"><a href="#【10-7】查询数据" class="headerlink" title="【10.7】查询数据"></a><font color="#ff0000">【10.7】查询数据</font></h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pymysql</span><br><span class="line"></span><br><span class="line">table = <span class="string">'students'</span></span><br><span class="line">db = pymysql.connect(host=<span class="string">'localhost'</span>, user=<span class="string">'root'</span>, password=<span class="string">'000000'</span>, port=<span class="number">3306</span>, db=<span class="string">'spiders'</span>)</span><br><span class="line">cursor = db.cursor()</span><br><span class="line">sql = <span class="string">'SELECT * FROM students WHERE age &gt;= 20'</span></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    cursor.execute(sql)</span><br><span class="line">    print(<span class="string">'Count:'</span>, cursor.rowcount)</span><br><span class="line">    one = cursor.fetchone()</span><br><span class="line">    print(<span class="string">'One:'</span>, one)</span><br><span class="line">    results = cursor.fetchall()</span><br><span class="line">    print(<span class="string">'Results:'</span>, results)</span><br><span class="line">    print(<span class="string">'Results Type:'</span>, type(results))</span><br><span class="line">    <span class="keyword">for</span> row <span class="keyword">in</span> results:</span><br><span class="line">        print(row)</span><br><span class="line"><span class="keyword">except</span>:</span><br><span class="line">    print(<span class="string">'查询失败！'</span>)</span><br></pre></td></tr></table></figure><p><code>sql = &#39;SELECT * FROM students WHERE age &gt;= 20&#39;</code>：构造一条 SQL 语句，将年龄 大于等于20 岁的学生查询出来</p><p><code>cursor.rowcount</code>：调用 cursor 的 rowcount 属性获取查询结果的条数</p><p><code>cursor.fetchone()</code>：调用 cursor 的 fetchone() 方法，获取结果的第一条数据，返回结果是元组形式，元组的元素顺序跟字段一一对应，即第一个元素就是第一个字段 id，第二个元素就是第二个字段 name，以此类推</p><p><code>cursor.fetchall()</code>：调用 cursor 的 fetchall() 方法，得到结果的所有数据，它是二重元组，每个元素都是一条记录，本例中显示的是 3 条数据而不是 4 条，这是因为它的内部实现有一个偏移指针用来指向查询结果，最开始偏移指针指向第一条数据，取一次之后，指针偏移到下一条数据，这样再取的话，就会取到下一条数据了。我们最初调用了一次 fetchone 方法，这样结果的偏移指针就指向下一条数据，fetchall 方法返回的是偏移指针指向的数据一直到结束的所有数据，所以该方法获取的结果就只剩 3 个了</p><h1 id="【10-8】实战训练-—-爬取CSDN博客标题和地址保存到-MySQL"><a href="#【10-8】实战训练-—-爬取CSDN博客标题和地址保存到-MySQL" class="headerlink" title="【10.8】实战训练 — 爬取CSDN博客标题和地址保存到 MySQL"></a><font color="#ff0000">【10.8】实战训练 — 爬取CSDN博客标题和地址保存到 MySQL</font></h1><p>利用 requests 库构建请求，BeautifulSoup 解析库解析网页，获取自己博客文章的标题和地址，将其储存到本地 MySQL 数据库中，事先已经创建好了一个 blog 数据库，并创建了一个名为 article 的数据表，数据表包含 id、title、url 三个字段，其中 id 的 <code>AUTO_INCREMENT</code> 属性可以使 id 自己增加，<code>PRIMARY KEY</code> 关键字用于将 id 定义为主键</p><p>创建 article 数据表：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pymysql</span><br><span class="line"></span><br><span class="line">db = pymysql.connect(host=<span class="string">'localhost'</span>, user=<span class="string">'root'</span>, password=<span class="string">'000000'</span>, port=<span class="number">3306</span>, db=<span class="string">'blog'</span>)</span><br><span class="line">cursor = db.cursor()</span><br><span class="line">sql = <span class="string">'CREATE TABLE IF NOT EXISTS article (id INT NOT NULL AUTO_INCREMENT, title VARCHAR(255) NOT NULL, url VARCHAR(255) NOT NULL, PRIMARY KEY (id))'</span></span><br><span class="line">cursor.execute(sql)</span><br><span class="line">db.close()</span><br></pre></td></tr></table></figure><p>获取文章标题和对应的 URL 并将其储存到 MySQL 中：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> pymysql</span><br><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line"></span><br><span class="line">db = pymysql.connect(host=<span class="string">'localhost'</span>, user=<span class="string">'root'</span>, password=<span class="string">'000000'</span>, port=<span class="number">3306</span>, db=<span class="string">'blog'</span>)</span><br><span class="line">cursor = db.cursor()</span><br><span class="line"></span><br><span class="line">headers = &#123;</span><br><span class="line">    <span class="string">'User-Agent'</span>: <span class="string">'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/73.0.3683.86 Safari/537.36'</span>,</span><br><span class="line">&#125;</span><br><span class="line">url = <span class="string">"https://blog.csdn.net/qq_36759224"</span></span><br><span class="line"></span><br><span class="line">request = requests.get(url, headers=headers)</span><br><span class="line">soup = BeautifulSoup(request.text, <span class="string">'lxml'</span>)</span><br><span class="line">title_list = soup.find_all(<span class="string">'h4'</span>)</span><br><span class="line"><span class="keyword">for</span> list <span class="keyword">in</span> title_list:</span><br><span class="line">    s = list.a.text.strip()</span><br><span class="line">    title = s.replace(<span class="string">'原'</span>, <span class="string">''</span>)</span><br><span class="line">    url = list.a[<span class="string">'href'</span>].strip()</span><br><span class="line">    <span class="comment"># print(title + url)</span></span><br><span class="line">    cursor.execute(<span class="string">'INSERT INTO article (title, url) VALUES (%s, %s)'</span>, (title, url))</span><br><span class="line">db.commit()</span><br><span class="line">print(<span class="string">'数据写入完毕！'</span>)</span><br><span class="line">db.close()</span><br></pre></td></tr></table></figure><p>在命令行中使用 <code>SELECT * FROM article;</code> 命令可以查看到数据已经成功获取并储存到了数据库中：</p><fancybox><br><img src="https://cdn.jsdelivr.net/gh/TRHX/ImageHosting/ITRHX-PIC/A40/02.png" alt="02"><br></fancybox>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;center&gt;&lt;font color=&quot;#1BC3FB&quot; size=&quot;4&quot;&gt;Python3 爬虫学习笔记第十章 —— 【MySQL数据储存】&lt;/font&gt;&lt;/center&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="Python3 学习笔记" scheme="https://www.itrhx.com/categories/Python3-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
      <category term="爬虫学习" scheme="https://www.itrhx.com/categories/Python3-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E7%88%AC%E8%99%AB%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="爬虫" scheme="https://www.itrhx.com/tags/%E7%88%AC%E8%99%AB/"/>
    
      <category term="MySQL" scheme="https://www.itrhx.com/tags/MySQL/"/>
    
  </entry>
  
  <entry>
    <title>Python3 爬虫学习笔记 C09</title>
    <link href="https://www.itrhx.com/2019/08/27/A39-Python3-spider-C09/"/>
    <id>https://www.itrhx.com/2019/08/27/A39-Python3-spider-C09/</id>
    <published>2019-08-27T10:58:37.295Z</published>
    <updated>2019-09-24T12:40:37.866Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><blockquote><center><font color="#1BC3FB" size="4">Python3 爬虫学习笔记第九章 —— 【文件储存】</font></center></blockquote><a id="more"></a><p>用解析器解析出数据之后，还需要对数据进行保存。保存的形式多种多样，最简单的形式是直接保存为文本文件，如 TXT、JSON、CSV 等。</p><h1 id="【9-1】TXT-文本存储"><a href="#【9-1】TXT-文本存储" class="headerlink" title="【9.1】TXT 文本存储"></a><font color="#ff0000">【9.1】TXT 文本存储</font></h1><p>TXT 文本存储的优点：操作非常简单，TXT 文本几乎兼容任何平台；缺点：不利于检索。</p><h2 id="【9-1-1】基本示例"><a href="#【9-1-1】基本示例" class="headerlink" title="【9.1.1】基本示例"></a><font color="#ff0000">【9.1.1】基本示例</font></h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">from</span> lxml <span class="keyword">import</span> etree</span><br><span class="line"></span><br><span class="line">headers = &#123;</span><br><span class="line">    <span class="string">'User-Agent'</span>: <span class="string">'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/73.0.3683.86 Safari/537.36'</span>,</span><br><span class="line">&#125;</span><br><span class="line">url = <span class="string">"https://blog.csdn.net/qq_36759224"</span></span><br><span class="line"></span><br><span class="line">request = requests.get(url, headers=headers)</span><br><span class="line">tree = etree.HTML(request.text)</span><br><span class="line">title_list = tree.xpath(<span class="string">'//h4/a/text()'</span>)</span><br><span class="line"><span class="keyword">for</span> title <span class="keyword">in</span> title_list:</span><br><span class="line">    <span class="keyword">with</span> open(<span class="string">'blog.txt'</span>, <span class="string">'a'</span>, encoding=<span class="string">'utf8'</span>) <span class="keyword">as</span> fp:</span><br><span class="line">        fp.write(title)</span><br></pre></td></tr></table></figure><p>代码实现了我的 CSDN 博客首页所有博文标题的爬取，利用 requests 请求库发送请求，获取响应，用 XPath 获取每一篇博文的标题，然后写入 blog.txt 文件中：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">帝都的凛冬</span><br><span class="line">    最新屏蔽 CSDN 广告方法，专注阅读学习！      </span><br><span class="line">    使用Github Pages和Hexo搭建自己的独立博客【超级详细的小白教程】      </span><br><span class="line">    Python3 爬虫学习笔记 C08【解析库 Beautiful Soup】      </span><br><span class="line">    Python3 爬虫学习笔记 C07 【解析库 lxml】      </span><br><span class="line">    Python3 爬虫学习笔记 C06 【正则表达式】      </span><br><span class="line">    Python3 爬虫学习笔记 C05 【Selenium + 无界面浏览器】      </span><br><span class="line">    Python3 已经安装相关库，Pycharm 仍然报错 ModuleNotFoundError: No module named &apos;xxxxxx&apos; 的解决办法      </span><br><span class="line">    Windows/Android/iOS 等常见 User-Agent 大全      </span><br><span class="line">    Selenium 显式等待条件及其含义      </span><br><span class="line">    Python3 爬虫学习笔记 C04 【自动化测试工具 Selenium】      </span><br><span class="line">    Python3 爬虫学习笔记 C03 【Ajax 数据爬取】      </span><br><span class="line">    Python3 爬虫学习笔记 C02 【基本库 requests 的使用】      </span><br><span class="line">    Python3 爬虫学习笔记 C01 【基本库 urllib 的使用】      </span><br><span class="line">    利用官方支持为基于GitHub Pages的Hexo博客启用HTTPS      </span><br><span class="line">    光学字符识别 Tesseract-OCR 的下载、安装和基本用法      </span><br><span class="line">    Github+jsDelivr+PicGo 打造稳定快速、高效免费图床      </span><br><span class="line">    利用Cloudflare为基于GitHub Pages的Hexo博客添加HTTPS支持      </span><br><span class="line">    Python 中 if __name__ == &apos;__main__&apos;: 的理解      </span><br><span class="line">    Hexo 博客本地预览报错：Error: listen EADDRINUSE 0.0.0.0:4000      </span><br><span class="line">    谷歌浏览器检查更新时出错：无法启动更新检查（错误代码为 3: 0x80080005 -- system level）</span><br></pre></td></tr></table></figure><h2 id="【9-1-2】打开方式"><a href="#【9-1-2】打开方式" class="headerlink" title="【9.1.2】打开方式"></a><font color="#ff0000">【9.1.2】打开方式</font></h2><p>open() 方法的第二个参数为打开方式，不同的打开方式如下：</p><table><thead><tr><th>读写方式</th><th>可否读写</th><th>若文件不存在</th><th>写入方式</th></tr></thead><tbody><tr><td>r</td><td>读取</td><td>报错</td><td>不可写入</td></tr><tr><td>rb</td><td>以二进制方式读取</td><td>报错</td><td>不可写入</td></tr><tr><td>r+</td><td>读取 + 写入</td><td>报错</td><td>覆盖写入</td></tr><tr><td>rb+</td><td>以二进制方式读取+写入</td><td>报错</td><td>覆盖写入</td></tr><tr><td>w</td><td>写入</td><td>创建</td><td>覆盖写入</td></tr><tr><td>wb</td><td>以二进制方式写入</td><td>创建</td><td>覆盖写入</td></tr><tr><td>w+</td><td>读取 + 写入</td><td>创建</td><td>覆盖写入</td></tr><tr><td>wb+</td><td>以二进制方式读取+写入</td><td>创建</td><td>覆盖写入</td></tr><tr><td>a</td><td>写入</td><td>创建</td><td>附加写入</td></tr><tr><td>ab</td><td>以二进制方式写入</td><td>创建</td><td>附加写入</td></tr><tr><td>a+</td><td>读取 + 写入</td><td>创建</td><td>附加写入</td></tr><tr><td>ab+</td><td>以二进制方式读取+写入</td><td>创建</td><td>附加写入</td></tr></tbody></table><h1 id="【9-2】JSON-文件存储"><a href="#【9-2】JSON-文件存储" class="headerlink" title="【9.2】JSON 文件存储"></a><font color="#ff0000">【9.2】JSON 文件存储</font></h1><p>JSON，全称为 JavaScript Object Notation, 即 JavaScript 对象标记，它通过对象和数组的组合来表示数据，构造简洁但是结构化程度非常高，是一种轻量级的数据交换格式。</p><h2 id="【9-2-1】对象和数组"><a href="#【9-2-1】对象和数组" class="headerlink" title="【9.2.1】对象和数组"></a><font color="#ff0000">【9.2.1】对象和数组</font></h2><p>在 JavaScript 语言中，一切都是对象。因此，任何支持的类型都可以通过 JSON 来表示，例如字符串、数字、对象、数组等，但是对象和数组是比较特殊且常用的两种类型</p><ul><li><p>对象：它在 JavaScript 中是使用花括号 {} 包裹起来的内容，数据结构为 {key1：value1, key2：value2, …} 的键值对结构。在面向对象的语言中，key 为对象的属性，value 为对应的值。键名可以使用整数和字符串来表示。值的类型可以是任意类型。</p></li><li><p>数组：数组在 JavaScript 中是方括号 [] 包裹起来的内容，数据结构为 [“java”, “javascript”, “vb”, …] 的索引结构。在 JavaScript 中，数组是一种比较特殊的数据类型，它也可以像对象那样使用键值对，但还是索引用得多。同样，值的类型可以是任意类型。</p></li></ul><p>示例：一个 JSON 对象</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">[&#123;</span><br><span class="line">    <span class="attr">"name"</span>: <span class="string">"TRH"</span>,</span><br><span class="line">    <span class="attr">"gender"</span>: <span class="string">"male"</span>,</span><br><span class="line">    <span class="attr">"birthday"</span>: <span class="string">"1999-01-25"</span></span><br><span class="line">&#125;, &#123;</span><br><span class="line">     <span class="attr">"name"</span>: <span class="string">"XXX"</span>,</span><br><span class="line">    <span class="attr">"gender"</span>: <span class="string">"female"</span>,</span><br><span class="line">    <span class="attr">"birthday"</span>: <span class="string">"1999-10-18"</span></span><br><span class="line">&#125;]</span><br></pre></td></tr></table></figure><h2 id="【9-2-2】读取-JSON"><a href="#【9-2-2】读取-JSON" class="headerlink" title="【9.2.2】读取 JSON"></a><font color="#ff0000">【9.2.2】读取 JSON</font></h2><p>Python 里面的 JSON 库可以实现对 JSON 文件的读写操作，调用 JSON 库的 loads 方法将 JSON 文本字符串转为 JSON 对象、 dumps() 方法将 JSON 对象转为文本字符串</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> json</span><br><span class="line"></span><br><span class="line">str = <span class="string">'''</span></span><br><span class="line"><span class="string">[&#123;</span></span><br><span class="line"><span class="string">    "name": "TRH",</span></span><br><span class="line"><span class="string">    "gender": "male",</span></span><br><span class="line"><span class="string">    "birthday": "1999-01-25"</span></span><br><span class="line"><span class="string">&#125;, &#123;</span></span><br><span class="line"><span class="string">     "name": "XXX",</span></span><br><span class="line"><span class="string">    "gender": "female",</span></span><br><span class="line"><span class="string">    "birthday": "1999-10-18"</span></span><br><span class="line"><span class="string">&#125;]</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line">data = json.loads(str)</span><br><span class="line">print(data)</span><br><span class="line">print(data[<span class="number">0</span>][<span class="string">'name'</span>])</span><br><span class="line">print(data[<span class="number">0</span>].get(<span class="string">'name'</span>))</span><br><span class="line">print(data[<span class="number">0</span>].get(<span class="string">'age'</span>))</span><br><span class="line">print(data[<span class="number">0</span>].get(<span class="string">'age'</span>, <span class="number">25</span>))</span><br></pre></td></tr></table></figure><p>使用 loads 方法将字符串转为 JSON 对象，通过索引来获取对应的内容，获取键值时有两种方式，一种是中括号加键名，另一种是通过 get 方法传入键名。使用 get 方法，如果键名不存在，则不会报错，会返回 None，get 方法还可以传入第二个参数（即默认值），尝试获取一个原字典中不存在的键名，此时默认会返回 None。如果传入第二个参数（即默认值），那么在不存在的情况下返回该默认值。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[&#123;<span class="string">'name'</span>: <span class="string">'TRH'</span>, <span class="string">'gender'</span>: <span class="string">'male'</span>, <span class="string">'birthday'</span>: <span class="string">'1999-01-25'</span>&#125;, &#123;<span class="string">'name'</span>: <span class="string">'XXX'</span>, <span class="string">'gender'</span>: <span class="string">'female'</span>, <span class="string">'birthday'</span>: <span class="string">'1999-10-18'</span>&#125;]</span><br><span class="line">TRH</span><br><span class="line">TRH</span><br><span class="line"><span class="keyword">None</span></span><br><span class="line"><span class="number">25</span></span><br></pre></td></tr></table></figure><h2 id="【9-2-3】写入-JSON-文件"><a href="#【9-2-3】写入-JSON-文件" class="headerlink" title="【9.2.3】写入 JSON 文件"></a><font color="#ff0000">【9.2.3】写入 JSON 文件</font></h2><p>调用 dumps 方法可以将 JSON 对象转化为字符串，然后再调用文件的 write 方法即可写入文本</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> json</span><br><span class="line"></span><br><span class="line">data = [&#123;</span><br><span class="line">    <span class="string">'name'</span>: <span class="string">'TRH'</span>,</span><br><span class="line">    <span class="string">'gender'</span>: <span class="string">'male'</span>,</span><br><span class="line">    <span class="string">'birthday'</span>: <span class="string">'1999-01-25'</span></span><br><span class="line">&#125;]</span><br><span class="line"><span class="keyword">with</span> open(<span class="string">'data.json'</span>, <span class="string">'w'</span>) <span class="keyword">as</span> fp:</span><br><span class="line">    fp.write(json.dumps(data))</span><br></pre></td></tr></table></figure><p>data.json 文件：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[&#123;<span class="attr">"name"</span>: <span class="string">"TRH"</span>, <span class="attr">"gender"</span>: <span class="string">"male"</span>, <span class="attr">"birthday"</span>: <span class="string">"1999-01-25"</span>&#125;]</span><br></pre></td></tr></table></figure><p>添加参数 indent（代表缩进字符个数），将会格式化输出：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> json</span><br><span class="line"></span><br><span class="line">data = [&#123;</span><br><span class="line">    <span class="string">'name'</span>: <span class="string">'TRH'</span>,</span><br><span class="line">    <span class="string">'gender'</span>: <span class="string">'male'</span>,</span><br><span class="line">    <span class="string">'birthday'</span>: <span class="string">'1999-01-25'</span></span><br><span class="line">&#125;]</span><br><span class="line"><span class="keyword">with</span> open(<span class="string">'data.json'</span>, <span class="string">'w'</span>) <span class="keyword">as</span> file:</span><br><span class="line">    file.write(json.dumps(data, indent=<span class="number">2</span>))</span><br></pre></td></tr></table></figure></p><p>输出结果：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">"name"</span>: <span class="string">"TRH"</span>,</span><br><span class="line">    <span class="attr">"gender"</span>: <span class="string">"male"</span>,</span><br><span class="line">    <span class="attr">"birthday"</span>: <span class="string">"1999-01-25"</span></span><br><span class="line">  &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>如果 JSON 中包含中文字符，需要指定参数 ensure_ascii 为 False，另外还要规定文件输出的编码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> json</span><br><span class="line"></span><br><span class="line">data = [&#123;</span><br><span class="line">    <span class="string">'name'</span>: <span class="string">'小明'</span>,</span><br><span class="line">    <span class="string">'gender'</span>: <span class="string">'男'</span>,</span><br><span class="line">    <span class="string">'birthday'</span>: <span class="string">'1999年01月25日'</span></span><br><span class="line">&#125;]</span><br><span class="line"><span class="keyword">with</span> open(<span class="string">'data.json'</span>, <span class="string">'w'</span>, encoding=<span class="string">'utf-8'</span>) <span class="keyword">as</span> file:</span><br><span class="line">    file.write(json.dumps(data, indent=<span class="number">2</span>, ensure_ascii=<span class="keyword">False</span>))</span><br></pre></td></tr></table></figure><p>输出结果：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">"name"</span>: <span class="string">"小明"</span>,</span><br><span class="line">    <span class="attr">"gender"</span>: <span class="string">"男"</span>,</span><br><span class="line">    <span class="attr">"birthday"</span>: <span class="string">"1999年01月25日"</span></span><br><span class="line">  &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure><h1 id="【9-3】CSV-文本存储"><a href="#【9-3】CSV-文本存储" class="headerlink" title="【9.3】CSV 文本存储"></a><font color="#ff0000">【9.3】CSV 文本存储</font></h1><p>CSV（Comma-Separated Values）是逗号分隔值或字符分隔值的文件格式，其文件以纯文本的形式储存表格数据（数字和文本），CSV 文件的行与行之间用换行符分隔，列与列之间用逗号分隔</p><h2 id="【9-3-1】写入"><a href="#【9-3-1】写入" class="headerlink" title="【9.3.1】写入"></a><font color="#ff0000">【9.3.1】写入</font></h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> csv</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> open(<span class="string">'data.csv'</span>, <span class="string">'w'</span>) <span class="keyword">as</span> csvfile:</span><br><span class="line">    writer = csv.writer(csvfile)</span><br><span class="line">    writer.writerow([<span class="string">'id'</span>, <span class="string">'name'</span>, <span class="string">'age'</span>])</span><br><span class="line">    writer.writerow([<span class="string">'10001'</span>, <span class="string">'TRHX'</span>, <span class="number">20</span>])</span><br><span class="line">    writer.writerow([<span class="string">'10002'</span>, <span class="string">'Bob'</span>, <span class="number">22</span>])</span><br><span class="line">    writer.writerow([<span class="string">'10003'</span>, <span class="string">'Jordan'</span>, <span class="number">21</span>])</span><br></pre></td></tr></table></figure><p>打开 data.csv 文件，调用 CSV 库的 writer 方法初始化写入对象，然后调用 writerow 方法传入每行的数据即可完成写入，用 Excel 打开 data.csv 文件将是表格形式</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">id,name,age</span><br><span class="line"></span><br><span class="line"><span class="number">10001</span>,TRHX,<span class="number">20</span></span><br><span class="line"></span><br><span class="line"><span class="number">10002</span>,Bob,<span class="number">22</span></span><br><span class="line"></span><br><span class="line"><span class="number">10003</span>,Jordan,<span class="number">21</span></span><br></pre></td></tr></table></figure><p>列与列之间的分隔符是可以修改的，只需要传入 delimiter 参数即可：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> csv</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> open(<span class="string">'data.csv'</span>, <span class="string">'w'</span>) <span class="keyword">as</span> csvfile:</span><br><span class="line">    writer = csv.writer(csvfile, delimiter=<span class="string">' '</span>)</span><br><span class="line">    writer.writerow([<span class="string">'id'</span>, <span class="string">'name'</span>, <span class="string">'age'</span>])</span><br><span class="line">    writer.writerow([<span class="string">'10001'</span>, <span class="string">'TRHX'</span>, <span class="number">20</span>])</span><br><span class="line">    writer.writerow([<span class="string">'10002'</span>, <span class="string">'Bob'</span>, <span class="number">22</span>])</span><br><span class="line">    writer.writerow([<span class="string">'10003'</span>, <span class="string">'Jordan'</span>, <span class="number">21</span>])</span><br></pre></td></tr></table></figure><p>输出结果：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">id name age</span><br><span class="line"></span><br><span class="line"><span class="number">10001</span> TRHX <span class="number">20</span></span><br><span class="line"></span><br><span class="line"><span class="number">10002</span> Bob <span class="number">22</span></span><br><span class="line"></span><br><span class="line"><span class="number">10003</span> Jordan <span class="number">21</span></span><br></pre></td></tr></table></figure><p>调用 writerows 方法也可以同时写入多行，此时参数就需要为二维列表：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> csv</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> open(<span class="string">'data.csv'</span>, <span class="string">'w'</span>) <span class="keyword">as</span> csvfile:</span><br><span class="line">    writer = csv.writer(csvfile, delimiter=<span class="string">' '</span>)</span><br><span class="line">    writer.writerow([<span class="string">'id'</span>, <span class="string">'name'</span>, <span class="string">'age'</span>])</span><br><span class="line">    writer.writerows([[<span class="string">'10001'</span>, <span class="string">'TRHX'</span>, <span class="number">20</span>], [<span class="string">'10002'</span>, <span class="string">'Bob'</span>, <span class="number">22</span>], [<span class="string">'10003'</span>, <span class="string">'Jordan'</span>, <span class="number">21</span>]])</span><br></pre></td></tr></table></figure><p>输出结果仍与原来的一样</p><p>此外 CSV 库中也提供了字典的写入方式：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> csv</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> open(<span class="string">'data.csv'</span>, <span class="string">'w'</span>) <span class="keyword">as</span> csvfile:</span><br><span class="line">    fieldnames = [<span class="string">'id'</span>, <span class="string">'name'</span>, <span class="string">'age'</span>]</span><br><span class="line">    writer = csv.DictWriter(csvfile, fieldnames=fieldnames)</span><br><span class="line">    writer.writeheader()</span><br><span class="line">    writer.writerow(&#123;<span class="string">'id'</span>: <span class="string">'10001'</span>, <span class="string">'name'</span>: <span class="string">'TRHX'</span>, <span class="string">'age'</span>: <span class="number">20</span>&#125;)</span><br><span class="line">    writer.writerow(&#123;<span class="string">'id'</span>: <span class="string">'10002'</span>, <span class="string">'name'</span>: <span class="string">'Bob'</span>, <span class="string">'age'</span>: <span class="number">22</span>&#125;)</span><br><span class="line">    writer.writerow(&#123;<span class="string">'id'</span>: <span class="string">'10003'</span>, <span class="string">'name'</span>: <span class="string">'Jordan'</span>, <span class="string">'age'</span>: <span class="number">21</span>&#125;)</span><br></pre></td></tr></table></figure><p>首先定义 3 个字段，用 fieldnames 表示，然后将其传给 DictWriter 来初始化一个字典写入对象，接着可以调用 writeheader 方法先写入头信息，然后再调用 writerow 方法传入相应字典即可</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">id,name,age</span><br><span class="line"></span><br><span class="line"><span class="number">10001</span>,TRHX,<span class="number">20</span></span><br><span class="line"></span><br><span class="line"><span class="number">10002</span>,Bob,<span class="number">22</span></span><br><span class="line"></span><br><span class="line"><span class="number">10003</span>,Jordan,<span class="number">21</span></span><br></pre></td></tr></table></figure><h2 id="【9-3-2】读取"><a href="#【9-3-2】读取" class="headerlink" title="【9.3.2】读取"></a><font color="#ff0000">【9.3.2】读取</font></h2><p>有写入方法，同样也可以使用 csv 库来读取 CSV 文件：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> csv</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> open(<span class="string">'data.csv'</span>, <span class="string">'r'</span>, encoding=<span class="string">'utf-8'</span>) <span class="keyword">as</span> csvfile:</span><br><span class="line">    reader = csv.reader(csvfile)</span><br><span class="line">    <span class="keyword">for</span> row <span class="keyword">in</span> reader:</span><br><span class="line">        print(row)</span><br></pre></td></tr></table></figure><p>构造 Reader 对象，遍历输出每行的内容，每一行都是一个列表形式。（如果 CSV 文件中包含中文的话，还需要指定文件编码）读取结果：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[<span class="string">'id'</span>, <span class="string">'name'</span>, <span class="string">'age'</span>]</span><br><span class="line">[<span class="string">'10001'</span>, <span class="string">'TRHX'</span>, <span class="string">'20'</span>]</span><br><span class="line">[<span class="string">'10002'</span>, <span class="string">'Bob'</span>, <span class="string">'22'</span>]</span><br><span class="line">[<span class="string">'10003'</span>, <span class="string">'Jordan'</span>, <span class="string">'21'</span>]</span><br></pre></td></tr></table></figure><p>此外，还可以利用 pandas 的 read_csv 方法将数据从 CSV 中读取出来（pandas 是基于NumPy 的一种工具，该工具是为了解决数据分析任务而创建的。Pandas 纳入了大量库和一些标准的数据模型，提供了高效地操作大型数据集所需的工具）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"></span><br><span class="line">df = pd.read_csv(<span class="string">'data.csv'</span>)</span><br><span class="line">print(df)</span><br></pre></td></tr></table></figure><p>读取结果：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">      id    name  age</span><br><span class="line"><span class="number">0</span>  <span class="number">10001</span>    TRHX   <span class="number">20</span></span><br><span class="line"><span class="number">1</span>  <span class="number">10002</span>     Bob   <span class="number">22</span></span><br><span class="line"><span class="number">2</span>  <span class="number">10003</span>  Jordan   <span class="number">21</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;center&gt;&lt;font color=&quot;#1BC3FB&quot; size=&quot;4&quot;&gt;Python3 爬虫学习笔记第九章 —— 【文件储存】&lt;/font&gt;&lt;/center&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="Python3 学习笔记" scheme="https://www.itrhx.com/categories/Python3-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
      <category term="爬虫学习" scheme="https://www.itrhx.com/categories/Python3-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E7%88%AC%E8%99%AB%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="爬虫" scheme="https://www.itrhx.com/tags/%E7%88%AC%E8%99%AB/"/>
    
      <category term="文件储存" scheme="https://www.itrhx.com/tags/%E6%96%87%E4%BB%B6%E5%82%A8%E5%AD%98/"/>
    
  </entry>
  
  <entry>
    <title>Python3 爬虫学习笔记 C08</title>
    <link href="https://www.itrhx.com/2019/08/26/A38-Python3-spider-C08/"/>
    <id>https://www.itrhx.com/2019/08/26/A38-Python3-spider-C08/</id>
    <published>2019-08-26T13:57:58.870Z</published>
    <updated>2019-09-24T12:40:34.686Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><blockquote><center><font color="#1BC3FB" size="4">Python3 爬虫学习笔记第八章 —— 【解析库 Beautiful Soup】</font></center></blockquote><a id="more"></a><h1 id="【8-1】关于-Beautiful-Soup"><a href="#【8-1】关于-Beautiful-Soup" class="headerlink" title="【8.1】关于 Beautiful Soup"></a><font color="#ff0000">【8.1】关于 Beautiful Soup</font></h1><p>Beautiful Soup 可以从 HTML 或者 XML 文件中提取数据，Beautiful Soup 可以提供一些简单的、Python 式的函数用来处理导航、搜索、修改分析树等，它借助网页的结构和属性等特性来解析网页，lxml 只会局部遍历，而 Beautiful Soup 是基于 HTML DOM 的，会载入整个文档，解析整个 DOM 树，因此时间和内存开销都会大很多，所以性能要低于lxml</p><table><thead><tr><th style="text-align:center">抓取工具</th><th style="text-align:center">速度</th><th style="text-align:center">使用难度</th><th style="text-align:center">安装难度</th></tr></thead><tbody><tr><td style="text-align:center">正则</td><td style="text-align:center">最快</td><td style="text-align:center">困难</td><td style="text-align:center">无（内置）</td></tr><tr><td style="text-align:center">lxml</td><td style="text-align:center">快</td><td style="text-align:center">简单</td><td style="text-align:center">一般</td></tr><tr><td style="text-align:center">BeautifulSoup</td><td style="text-align:center">慢</td><td style="text-align:center">最简单</td><td style="text-align:center">简单</td></tr></tbody></table><h1 id="【8-2】Beautiful-Soup-的基本使用"><a href="#【8-2】Beautiful-Soup-的基本使用" class="headerlink" title="【8.2】Beautiful Soup 的基本使用"></a><font color="#ff0000">【8.2】Beautiful Soup 的基本使用</font></h1><p>需要使用命令 <code>pip install bs4</code> 安装库，Beautiful Soup 在解析时依赖解析器，除了支持 Python 标准库中的 HTML 解析器外，还支持一些第三方解析器：</p><table><thead><tr><th>解析器</th><th>使用方法</th><th>优势</th><th>劣势</th></tr></thead><tbody><tr><td>Python 标准库</td><td>BeautifulSoup(markup, “html.parser”)</td><td>Python 的内置标准库、执行速度适中 、文档容错能力强</td><td>Python 2.7.3 or 3.2.2) 前的版本中文容错能力差</td></tr><tr><td>LXML HTML 解析器</td><td>BeautifulSoup(markup, “lxml”)</td><td>速度快、文档容错能力强</td><td>需要安装 C 语言库</td></tr><tr><td>LXML XML 解析器</td><td>BeautifulSoup(markup, “xml”)</td><td>速度快、唯一支持 XML 的解析器</td><td>需要安装 C 语言库</td></tr><tr><td>html5lib</td><td>BeautifulSoup(markup, “html5lib”)</td><td>最好的容错性、以浏览器的方式解析文档、生成 HTML5 格式的文档</td><td>速度慢、不依赖外部扩展</td></tr></tbody></table><p>基本使用：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line">soup = BeautifulSoup(<span class="string">'&lt;p&gt;Hello&lt;/p&gt;'</span>, <span class="string">'lxml'</span>)</span><br><span class="line"><span class="comment"># soup = BeautifulSoup(open('soup.html', encoding='utf8'), 'lxml')</span></span><br><span class="line">print(soup.p.string)</span><br></pre></td></tr></table></figure></p><p>输出结果：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Hello</span><br></pre></td></tr></table></figure></p><h1 id="【8-3】节点选择器"><a href="#【8-3】节点选择器" class="headerlink" title="【8.3】节点选择器"></a><font color="#ff0000">【8.3】节点选择器</font></h1><p>直接调用节点的名称就可以选择节点元素，再调用 string 属性就可以得到节点内的文本</p><h2 id="【8-3-1】元素选择"><a href="#【8-3-1】元素选择" class="headerlink" title="【8.3.1】元素选择"></a><font color="#ff0000">【8.3.1】元素选择</font></h2><p>新建 <code>soup.html</code> 文件：<br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=<span class="string">"en"</span>&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=<span class="string">"UTF-8"</span> /&gt;</span><br><span class="line">    &lt;title&gt;测试bs4&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;div&gt;</span><br><span class="line">    甄姬</span><br><span class="line">    &lt;p&gt;百里守约&lt;/p&gt;</span><br><span class="line">    &lt;p&gt;李白&lt;/p&gt;</span><br><span class="line">    太乙真人</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;div class="song"&gt;</span><br><span class="line">    &lt;p&gt;李清照&lt;/p&gt;</span><br><span class="line">    &lt;p&gt;王安石&lt;/p&gt;</span><br><span class="line">    &lt;p&gt;苏轼&lt;/p&gt;</span><br><span class="line">    &lt;p&gt;柳宗元&lt;/p&gt;</span><br><span class="line">    &lt;a href="http://www.song.com/" title="赵匡义" target="_self"&gt;宋朝是最强大的王朝，不是军队的强大，而是经济很强大，国民都很有钱。&lt;/a&gt;</span><br><span class="line">    &lt;img src=<span class="string">"http://www.baidu.com/meinv.jpg"</span> alt=<span class="string">""</span>&gt;</span><br><span class="line">    &lt;a href="" class="du"&gt;总为浮云能蔽日，长安不见使人愁&lt;/a&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;div class="tang"&gt;</span><br><span class="line">    &lt;ul&gt;</span><br><span class="line">        &lt;li&gt;&lt;a href="http://www.baidu.com" title="qing"&gt;清明时节雨纷纷，路上行人欲断魂，借问酒家何处有，牧童遥指杏花村。&lt;/a&gt; &lt;/li&gt;</span><br><span class="line">        &lt;li&gt;&lt;a href="http://www.163.com" title="qin"&gt;秦时明月汉时关，万里长征人未还，但使龙城飞将在，不教胡马度阴山。&lt;/a&gt; &lt;/li&gt;</span><br><span class="line">        &lt;li&gt;&lt;a href="http://www.126.com" alt="qi"&gt;岐王宅里寻常见，崔九堂前几度闻，正是江南好风景，落花时节又逢君。&lt;/a&gt; &lt;/li&gt;</span><br><span class="line">        &lt;li&gt;&lt;a href="http://www.sina.com" class="du"&gt;杜甫&lt;/a&gt; &lt;/li&gt;</span><br><span class="line">        &lt;li&gt;&lt;b&gt;唐朝&lt;/b&gt;&lt;/li&gt;</span><br><span class="line">        &lt;li&gt;&lt;i&gt;宋朝&lt;/i&gt;&lt;/li&gt;</span><br><span class="line">        &lt;li&gt;&lt;a href="http://www.haha.com" id="feng"&gt;凤凰台上凤凰游，凤去台空江自流，吴宫花草埋幽径，晋代衣冠成古丘。&lt;/a&gt; &lt;/li&gt;</span><br><span class="line">    &lt;/ul&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line">soup = BeautifulSoup(open(<span class="string">'soup.html'</span>, encoding=<span class="string">'utf8'</span>), <span class="string">'lxml'</span>)</span><br><span class="line">print(soup.title)</span><br><span class="line">print(type(soup.title))</span><br><span class="line">print(soup.title.string)</span><br><span class="line">print(soup.head)</span><br><span class="line">print(soup.p)</span><br></pre></td></tr></table></figure><p>依次查找 title、head、p 节点。输出结果：<br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;title&gt;测试bs4&lt;/title&gt;</span><br><span class="line">&lt;<span class="class"><span class="keyword">class</span> '<span class="title">bs4</span>.<span class="title">element</span>.<span class="title">Tag</span>'&gt;</span></span><br><span class="line"><span class="class">测试<span class="title">bs4</span></span></span><br><span class="line"><span class="class">&lt;<span class="title">head</span>&gt;</span></span><br><span class="line">&lt;meta charset="utf-8"/&gt;</span><br><span class="line">&lt;title&gt;测试bs4&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;p&gt;百里守约&lt;/p&gt;</span><br></pre></td></tr></table></figure></p><h2 id="【8-3-2】提取信息"><a href="#【8-3-2】提取信息" class="headerlink" title="【8.3.2】提取信息"></a><font color="#ff0000">【8.3.2】提取信息</font></h2><ul><li>string 属性：获取节点包含的文本值（如果标签里面还有标签，那么string获取到的结果为None）</li><li>text 属性：获取节点包含的文本值</li><li>get_text() 属性：获取节点包含的文本值</li><li>name 属性：获取节点的名称</li><li>attrs ：获取所有属性</li><li>attrs[‘属性名’] ：获取指定属性</li></ul><p>依然以 soup.html 为例：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line">soup = BeautifulSoup(open(<span class="string">'soup.html'</span>, encoding=<span class="string">'utf8'</span>), <span class="string">'lxml'</span>)</span><br><span class="line">print(soup.title)</span><br><span class="line">print(soup.title.text)</span><br><span class="line">print(soup.title.get_text())</span><br><span class="line">print(soup.title.string)</span><br><span class="line">print(soup.div.string)</span><br><span class="line">print(soup.div.text)</span><br><span class="line">print(soup.title.name)</span><br><span class="line">print(soup.a[<span class="string">'href'</span>])  <span class="comment"># 获取href属性</span></span><br><span class="line">print(soup.a[<span class="string">'title'</span>])  <span class="comment"># 获取title属性</span></span><br><span class="line">print(soup.a[<span class="string">'target'</span>])  <span class="comment"># 获取target属性</span></span><br><span class="line">print(soup.a.attrs)  <span class="comment"># 获取所有属性</span></span><br><span class="line">print(soup.a.attrs[<span class="string">'href'</span>])  <span class="comment"># 获取href属性</span></span><br></pre></td></tr></table></figure></p><p>输出结果：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&lt;title&gt;测试bs4&lt;/title&gt;</span><br><span class="line">测试bs4</span><br><span class="line">测试bs4</span><br><span class="line">测试bs4</span><br><span class="line"><span class="keyword">None</span></span><br><span class="line"></span><br><span class="line">    甄姬</span><br><span class="line">    百里守约</span><br><span class="line">李白</span><br><span class="line">    太乙真人</span><br><span class="line"></span><br><span class="line">title</span><br><span class="line">http://www.song.com/</span><br><span class="line">赵匡义</span><br><span class="line">_self</span><br><span class="line">&#123;<span class="string">'href'</span>: <span class="string">'http://www.song.com/'</span>, <span class="string">'title'</span>: <span class="string">'赵匡义'</span>, <span class="string">'target'</span>: <span class="string">'_self'</span>&#125;</span><br><span class="line">http://www.song.com/</span><br></pre></td></tr></table></figure></p><h1 id="【8-3-3】嵌套选择"><a href="#【8-3-3】嵌套选择" class="headerlink" title="【8.3.3】嵌套选择"></a><font color="#ff0000">【8.3.3】嵌套选择</font></h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line"></span><br><span class="line">html = <span class="string">"""</span></span><br><span class="line"><span class="string">&lt;html&gt;&lt;head&gt;&lt;title&gt;This is a demo&lt;/title&gt;&lt;/head&gt;</span></span><br><span class="line"><span class="string">&lt;body&gt;</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line">soup = BeautifulSoup(html, <span class="string">'lxml'</span>)</span><br><span class="line">print(soup.head.title)</span><br><span class="line">print(type(soup.head.title))</span><br><span class="line">print(soup.head.title.string)</span><br></pre></td></tr></table></figure><p>获取 head 节点里面的 title 节点，输出结果：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;title&gt;This is a demo&lt;/title&gt;</span><br><span class="line">&lt;<span class="class"><span class="keyword">class</span> '<span class="title">bs4</span>.<span class="title">element</span>.<span class="title">Tag</span>'&gt;</span></span><br><span class="line"><span class="class"><span class="title">This</span> <span class="title">is</span> <span class="title">a</span> <span class="title">demo</span></span></span><br></pre></td></tr></table></figure></p><h1 id="【8-3-4】关联选择"><a href="#【8-3-4】关联选择" class="headerlink" title="【8.3.4】关联选择"></a><font color="#ff0000">【8.3.4】关联选择</font></h1><ul><li>contents 属性：获取某个节点元素的直接子节点</li><li>children 属性：遍历某个节点元素的子节点</li><li>descendants 属性：获取某个节点元素所有的子孙节点</li><li>parent 属性：获取某个节点元素的父节点</li><li>parents 属性：获取某个节点元素所有的祖先节点</li><li>next_sibling 属性：获取节点的下一个兄弟元素</li><li>previous_sibling 属性：获取节点的上一个兄弟元素</li><li>next_siblings 属性：获取某个节点所有后面的兄弟元素</li><li>previous_siblings 属性：获取某个节点所有前面的兄弟元素</li></ul><font color="#ff0000">contents 属性应用示例</font><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line"></span><br><span class="line">html = <span class="string">"""</span></span><br><span class="line"><span class="string">&lt;html&gt;</span></span><br><span class="line"><span class="string">    &lt;head&gt;</span></span><br><span class="line"><span class="string">        &lt;title&gt;The Dormouse's story&lt;/title&gt;</span></span><br><span class="line"><span class="string">    &lt;/head&gt;</span></span><br><span class="line"><span class="string">    &lt;body&gt;</span></span><br><span class="line"><span class="string">        &lt;p class="story"&gt;</span></span><br><span class="line"><span class="string">            Once upon a time there were three little sisters; and their names were</span></span><br><span class="line"><span class="string">            &lt;a href="http://example.com/elsie" class="sister" id="link1"&gt;</span></span><br><span class="line"><span class="string">                &lt;span&gt;Elsie&lt;/span&gt;</span></span><br><span class="line"><span class="string">            &lt;/a&gt;</span></span><br><span class="line"><span class="string">            &lt;a href="http://example.com/lacie" class="sister" id="link2"&gt;Lacie&lt;/a&gt; </span></span><br><span class="line"><span class="string">            and</span></span><br><span class="line"><span class="string">            &lt;a href="http://example.com/tillie" class="sister" id="link3"&gt;Tillie&lt;/a&gt;</span></span><br><span class="line"><span class="string">            and they lived at the bottom of a well.</span></span><br><span class="line"><span class="string">        &lt;/p&gt;</span></span><br><span class="line"><span class="string">        &lt;p class="story"&gt;...&lt;/p&gt;</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line">soup = BeautifulSoup(html, <span class="string">'lxml'</span>)</span><br><span class="line">print(soup.p.contents)</span><br></pre></td></tr></table></figure><p>获取 p 节点元素的直接子节点，输出结果：<br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">['\n            Once upon a time there were three little sisters; and their names were\n            ', &lt;a class="sister" href="http://example.com/elsie" id="link1"&gt;</span><br><span class="line">&lt;span&gt;Elsie&lt;/span&gt;</span><br><span class="line">&lt;/a&gt;, '\n', &lt;a class="sister" href="http://example.com/lacie" id="link2"&gt;Lacie&lt;/a&gt;, ' \n            and\n            ', &lt;a class="sister" href="http://example.com/tillie" id="link3"&gt;Tillie&lt;/a&gt;, '\n            and they lived at the bottom of a well.\n        ']</span><br></pre></td></tr></table></figure></p><font color="#ff0000">children 属性应用示例：</font><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line"></span><br><span class="line">html = <span class="string">"""</span></span><br><span class="line"><span class="string">&lt;html&gt;</span></span><br><span class="line"><span class="string">    &lt;head&gt;</span></span><br><span class="line"><span class="string">        &lt;title&gt;The Dormouse's story&lt;/title&gt;</span></span><br><span class="line"><span class="string">    &lt;/head&gt;</span></span><br><span class="line"><span class="string">    &lt;body&gt;</span></span><br><span class="line"><span class="string">        &lt;p class="story"&gt;</span></span><br><span class="line"><span class="string">            Once upon a time there were three little sisters; and their names were</span></span><br><span class="line"><span class="string">            &lt;a href="http://example.com/elsie" class="sister" id="link1"&gt;</span></span><br><span class="line"><span class="string">                &lt;span&gt;Elsie&lt;/span&gt;</span></span><br><span class="line"><span class="string">            &lt;/a&gt;</span></span><br><span class="line"><span class="string">            &lt;a href="http://example.com/lacie" class="sister" id="link2"&gt;Lacie&lt;/a&gt; </span></span><br><span class="line"><span class="string">            and</span></span><br><span class="line"><span class="string">            &lt;a href="http://example.com/tillie" class="sister" id="link3"&gt;Tillie&lt;/a&gt;</span></span><br><span class="line"><span class="string">            and they lived at the bottom of a well.</span></span><br><span class="line"><span class="string">        &lt;/p&gt;</span></span><br><span class="line"><span class="string">        &lt;p class="story"&gt;...&lt;/p&gt;</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line">soup = BeautifulSoup(html, <span class="string">'lxml'</span>)</span><br><span class="line">print(soup.p.children)</span><br><span class="line"><span class="keyword">for</span> i, child <span class="keyword">in</span> enumerate(soup.p.children):</span><br><span class="line">    print(i, child)</span><br></pre></td></tr></table></figure><p>遍历 p 节点元素的子节点，输出结果：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&lt;list_iterator object at <span class="number">0x00000228E3C205F8</span>&gt;</span><br><span class="line"><span class="number">0</span> </span><br><span class="line">            Once upon a time there were three little sisters; <span class="keyword">and</span> their names were</span><br><span class="line">            </span><br><span class="line">1 &lt;a class="sister" href="http://example.com/elsie" id="link1"&gt;</span><br><span class="line">&lt;span&gt;Elsie&lt;/span&gt;</span><br><span class="line">&lt;/a&gt;</span><br><span class="line"><span class="number">2</span> </span><br><span class="line"></span><br><span class="line">3 &lt;a class="sister" href="http://example.com/lacie" id="link2"&gt;Lacie&lt;/a&gt;</span><br><span class="line"><span class="number">4</span>  </span><br><span class="line">            <span class="keyword">and</span></span><br><span class="line">            </span><br><span class="line">5 &lt;a class="sister" href="http://example.com/tillie" id="link3"&gt;Tillie&lt;/a&gt;</span><br><span class="line"><span class="number">6</span> </span><br><span class="line">            <span class="keyword">and</span> they lived at the bottom of a well.</span><br></pre></td></tr></table></figure></p><font color="#ff0000">descendants 属性应用示例：</font><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line"></span><br><span class="line">html = <span class="string">"""</span></span><br><span class="line"><span class="string">&lt;html&gt;</span></span><br><span class="line"><span class="string">    &lt;head&gt;</span></span><br><span class="line"><span class="string">        &lt;title&gt;The Dormouse's story&lt;/title&gt;</span></span><br><span class="line"><span class="string">    &lt;/head&gt;</span></span><br><span class="line"><span class="string">    &lt;body&gt;</span></span><br><span class="line"><span class="string">        &lt;p class="story"&gt;</span></span><br><span class="line"><span class="string">            Once upon a time there were three little sisters; and their names were</span></span><br><span class="line"><span class="string">            &lt;a href="http://example.com/elsie" class="sister" id="link1"&gt;</span></span><br><span class="line"><span class="string">                &lt;span&gt;Elsie&lt;/span&gt;</span></span><br><span class="line"><span class="string">            &lt;/a&gt;</span></span><br><span class="line"><span class="string">            &lt;a href="http://example.com/lacie" class="sister" id="link2"&gt;Lacie&lt;/a&gt; </span></span><br><span class="line"><span class="string">            and</span></span><br><span class="line"><span class="string">            &lt;a href="http://example.com/tillie" class="sister" id="link3"&gt;Tillie&lt;/a&gt;</span></span><br><span class="line"><span class="string">            and they lived at the bottom of a well.</span></span><br><span class="line"><span class="string">        &lt;/p&gt;</span></span><br><span class="line"><span class="string">        &lt;p class="story"&gt;...&lt;/p&gt;</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line">soup = BeautifulSoup(html, <span class="string">'lxml'</span>)</span><br><span class="line">print(soup.p.descendants)</span><br><span class="line"><span class="keyword">for</span> i, child <span class="keyword">in</span> enumerate(soup.p.descendants):</span><br><span class="line">    print(i, child)</span><br></pre></td></tr></table></figure><br><br>获取 p 节点元素所有的子孙节点，输出结果：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">&lt;generator object descendants at <span class="number">0x0000018404A4C3B8</span>&gt;</span><br><span class="line"><span class="number">0</span> </span><br><span class="line">            Once upon a time there were three little sisters; <span class="keyword">and</span> their names were</span><br><span class="line">            </span><br><span class="line">1 &lt;a class="sister" href="http://example.com/elsie" id="link1"&gt;</span><br><span class="line">&lt;span&gt;Elsie&lt;/span&gt;</span><br><span class="line">&lt;/a&gt;</span><br><span class="line"><span class="number">2</span> </span><br><span class="line"></span><br><span class="line">3 &lt;span&gt;Elsie&lt;/span&gt;</span><br><span class="line"><span class="number">4</span> Elsie</span><br><span class="line"><span class="number">5</span> </span><br><span class="line"></span><br><span class="line"><span class="number">6</span> </span><br><span class="line"></span><br><span class="line">7 &lt;a class="sister" href="http://example.com/lacie" id="link2"&gt;Lacie&lt;/a&gt;</span><br><span class="line"><span class="number">8</span> Lacie</span><br><span class="line"><span class="number">9</span>  </span><br><span class="line">            <span class="keyword">and</span></span><br><span class="line">            </span><br><span class="line">10 &lt;a class="sister" href="http://example.com/tillie" id="link3"&gt;Tillie&lt;/a&gt;</span><br><span class="line"><span class="number">11</span> Tillie</span><br><span class="line"><span class="number">12</span> </span><br><span class="line">            <span class="keyword">and</span> they lived at the bottom of a well.</span><br></pre></td></tr></table></figure><br><br><font color="#ff0000">parent 属性应用示例：</font><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line">html = <span class="string">"""</span></span><br><span class="line"><span class="string">&lt;html&gt;</span></span><br><span class="line"><span class="string">    &lt;head&gt;</span></span><br><span class="line"><span class="string">        &lt;title&gt;The Dormouse's story&lt;/title&gt;</span></span><br><span class="line"><span class="string">    &lt;/head&gt;</span></span><br><span class="line"><span class="string">    &lt;body&gt;</span></span><br><span class="line"><span class="string">        &lt;p class="story"&gt;</span></span><br><span class="line"><span class="string">            Once upon a time there were three little sisters; and their names were</span></span><br><span class="line"><span class="string">            &lt;a href="http://example.com/elsie" class="sister" id="link1"&gt;</span></span><br><span class="line"><span class="string">                &lt;span&gt;Elsie&lt;/span&gt;</span></span><br><span class="line"><span class="string">            &lt;/a&gt;</span></span><br><span class="line"><span class="string">        &lt;/p&gt;</span></span><br><span class="line"><span class="string">    &lt;/body&gt;</span></span><br><span class="line"><span class="string">&lt;/html&gt;</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line">soup = BeautifulSoup(html, <span class="string">'lxml'</span>)</span><br><span class="line">print(soup.a.parent)</span><br></pre></td></tr></table></figure><br><br>获取 a 节点元素的父节点，输出结果：<br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;p class="story"&gt;</span><br><span class="line">            Once upon a time there were three little sisters; <span class="keyword">and</span> their names were</span><br><span class="line">            &lt;a class="sister" href="http://example.com/elsie" id="link1"&gt;</span><br><span class="line">&lt;span&gt;Elsie&lt;/span&gt;</span><br><span class="line">&lt;/a&gt;</span><br><span class="line">&lt;/p&gt;</span><br></pre></td></tr></table></figure><br><br><font color="#ff0000">parents 属性应用示例：</font><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line"></span><br><span class="line">html = <span class="string">"""</span></span><br><span class="line"><span class="string">&lt;html&gt;</span></span><br><span class="line"><span class="string">    &lt;body&gt;</span></span><br><span class="line"><span class="string">        &lt;p class="story"&gt;</span></span><br><span class="line"><span class="string">            &lt;a href="http://example.com/elsie" class="sister" id="link1"&gt;</span></span><br><span class="line"><span class="string">                &lt;span&gt;Elsie&lt;/span&gt;</span></span><br><span class="line"><span class="string">            &lt;/a&gt;</span></span><br><span class="line"><span class="string">        &lt;/p&gt;</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line">soup = BeautifulSoup(html, <span class="string">'lxml'</span>)</span><br><span class="line">print(type(soup.a.parents))</span><br><span class="line">print(list(enumerate(soup.a.parents)))</span><br></pre></td></tr></table></figure><br><br>获取 a 节点元素所有的祖先节点，输出结果：<br><br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">&lt;<span class="class"><span class="keyword">class</span> '<span class="title">generator</span>'&gt;</span></span><br><span class="line"><span class="class">[<span class="params">(<span class="number">0</span>, &lt;p class=<span class="string">"story"</span>&gt;</span></span></span><br><span class="line"><span class="class"><span class="params">&lt;a class=<span class="string">"sister"</span> href=<span class="string">"http://example.com/elsie"</span> id=<span class="string">"link1"</span>&gt;</span></span></span><br><span class="line"><span class="class"><span class="params">&lt;span&gt;Elsie&lt;/span&gt;</span></span></span><br><span class="line"><span class="class"><span class="params">&lt;/a&gt;</span></span></span><br><span class="line">&lt;/p&gt;), (1, &lt;body&gt;</span><br><span class="line">&lt;p class="story"&gt;</span><br><span class="line">&lt;a class="sister" href="http://example.com/elsie" id="link1"&gt;</span><br><span class="line">&lt;span&gt;Elsie&lt;/span&gt;</span><br><span class="line">&lt;/a&gt;</span><br><span class="line">&lt;/p&gt;</span><br><span class="line">&lt;/body&gt;), (2, &lt;html&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;p class="story"&gt;</span><br><span class="line">&lt;a class="sister" href="http://example.com/elsie" id="link1"&gt;</span><br><span class="line">&lt;span&gt;Elsie&lt;/span&gt;</span><br><span class="line">&lt;/a&gt;</span><br><span class="line">&lt;/p&gt;</span><br><span class="line">&lt;/body&gt;&lt;/html&gt;), (3, &lt;html&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;p class="story"&gt;</span><br><span class="line">&lt;a class="sister" href="http://example.com/elsie" id="link1"&gt;</span><br><span class="line">&lt;span&gt;Elsie&lt;/span&gt;</span><br><span class="line">&lt;/a&gt;</span><br><span class="line">&lt;/p&gt;</span><br><span class="line">&lt;/body&gt;&lt;/html&gt;)]</span><br></pre></td></tr></table></figure><br><br><font color="#ff0000">next_sibling、previous_sibling、next_siblings、previous_siblings 属性应用示例：</font><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">html = <span class="string">"""</span></span><br><span class="line"><span class="string">&lt;html&gt;</span></span><br><span class="line"><span class="string">    &lt;body&gt;</span></span><br><span class="line"><span class="string">        &lt;p class="story"&gt;</span></span><br><span class="line"><span class="string">            Once upon a time there were three little sisters; and their names were</span></span><br><span class="line"><span class="string">            &lt;a href="http://example.com/elsie" class="sister" id="link1"&gt;</span></span><br><span class="line"><span class="string">                &lt;span&gt;Elsie&lt;/span&gt;</span></span><br><span class="line"><span class="string">            &lt;/a&gt;</span></span><br><span class="line"><span class="string">            Hello</span></span><br><span class="line"><span class="string">            &lt;a href="http://example.com/lacie" class="sister" id="link2"&gt;Lacie&lt;/a&gt; </span></span><br><span class="line"><span class="string">            and</span></span><br><span class="line"><span class="string">            &lt;a href="http://example.com/tillie" class="sister" id="link3"&gt;Tillie&lt;/a&gt;</span></span><br><span class="line"><span class="string">            and they lived at the bottom of a well.</span></span><br><span class="line"><span class="string">        &lt;/p&gt;</span></span><br><span class="line"><span class="string">    &lt;/body&gt;</span></span><br><span class="line"><span class="string">&lt;/html&gt;</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line">soup = BeautifulSoup(html, <span class="string">'lxml'</span>)</span><br><span class="line">print(<span class="string">'Next Sibling'</span>, soup.a.next_sibling)</span><br><span class="line">print(<span class="string">'Prev Sibling'</span>, soup.a.previous_sibling)</span><br><span class="line">print(<span class="string">'Next Siblings'</span>, list(enumerate(soup.a.next_siblings)))</span><br><span class="line">print(<span class="string">'Prev Siblings'</span>, list(enumerate(soup.a.previous_siblings)))</span><br></pre></td></tr></table></figure><p>next_sibling 和 previous_sibling 分别获取 a 节点的下一个和上一个兄弟元素，next_siblings 和 previous_siblings 则分别返回 a 节点后面和前面的兄弟节点，输出结果：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Next Sibling </span><br><span class="line">            Hello</span><br><span class="line">            </span><br><span class="line">Prev Sibling </span><br><span class="line">            Once upon a time there were three little sisters; <span class="keyword">and</span> their names were</span><br><span class="line">            </span><br><span class="line">Next Siblings [(0, '\n            Hello\n            '), (1, &lt;a class="sister" href="http://example.com/lacie" id="link2"&gt;Lacie&lt;/a&gt;), (2, ' \n            and\n            '), (3, &lt;a class="sister" href="http://example.com/tillie" id="link3"&gt;Tillie&lt;/a&gt;), (4, '\n            and they lived at the bottom of a well.\n        ')]</span><br><span class="line">Prev Siblings [(<span class="number">0</span>, <span class="string">'\n            Once upon a time there were three little sisters; and their names were\n            '</span>)]</span><br></pre></td></tr></table></figure><h1 id="【8-4】方法选择器"><a href="#【8-4】方法选择器" class="headerlink" title="【8.4】方法选择器"></a><font color="#ff0000">【8.4】方法选择器</font></h1><p>节点选择器直接调用节点的名称就可以选择节点元素，如果进行比较复杂的选择的话，方法选择器是一个不错的选择，它更灵活，常见的方法有 find_all、find 等，调用它们，直接传入相应的参数，就可以灵活查询了。</p><h2 id="【8-4-1】find-all-方法"><a href="#【8-4-1】find-all-方法" class="headerlink" title="【8.4.1】find_all() 方法"></a><font color="#ff0000">【8.4.1】find_all() 方法</font></h2><p>find_all 方法可以查询所有符合条件的元素，给它传入一些属性或文本来得到符合条件的元素。find_all 方法的 API：<code>find_all(name , attrs , recursive , text , **kwargs)</code><br>新建 soup.html：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>测试bs4<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    甄姬</span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>百里守约<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>李白<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    太乙真人</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"song"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>李清照<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>王安石<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>苏轼<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>柳宗元<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"http://www.song.com/"</span> <span class="attr">title</span>=<span class="string">"赵匡义"</span> <span class="attr">target</span>=<span class="string">"_self"</span>&gt;</span>宋朝是最强大的王朝，不是军队的强大，而是经济很强大，国民都很有钱。<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"http://www.baidu.com/meinv.jpg"</span> <span class="attr">alt</span>=<span class="string">""</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">""</span> <span class="attr">class</span>=<span class="string">"du"</span>&gt;</span>总为浮云能蔽日，长安不见使人愁<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"tang"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"http://www.baidu.com"</span> <span class="attr">title</span>=<span class="string">"qing"</span>&gt;</span>清明时节雨纷纷，路上行人欲断魂，借问酒家何处有，牧童遥指杏花村。<span class="tag">&lt;/<span class="name">a</span>&gt;</span> <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"http://www.163.com"</span> <span class="attr">title</span>=<span class="string">"qin"</span>&gt;</span>秦时明月汉时关，万里长征人未还，但使龙城飞将在，不教胡马度阴山。<span class="tag">&lt;/<span class="name">a</span>&gt;</span> <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"http://www.126.com"</span> <span class="attr">name</span>=<span class="string">"qi"</span>&gt;</span>岐王宅里寻常见，崔九堂前几度闻，正是江南好风景，落花时节又逢君。<span class="tag">&lt;/<span class="name">a</span>&gt;</span> <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"http://www.sina.com"</span> <span class="attr">class</span>=<span class="string">"du"</span>&gt;</span>杜甫<span class="tag">&lt;/<span class="name">a</span>&gt;</span> <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">b</span>&gt;</span>唐朝<span class="tag">&lt;/<span class="name">b</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">i</span>&gt;</span>宋朝<span class="tag">&lt;/<span class="name">i</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"http://www.haha.com"</span> <span class="attr">id</span>=<span class="string">"feng"</span>&gt;</span>凤凰台上凤凰游，凤去台空江自流，吴宫花草埋幽径，晋代衣冠成古丘。<span class="tag">&lt;/<span class="name">a</span>&gt;</span> <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>示例代码：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line"></span><br><span class="line">soup = BeautifulSoup(open(<span class="string">'soup.html'</span>, encoding=<span class="string">'utf8'</span>), <span class="string">'lxml'</span>)</span><br><span class="line">print(soup.find_all(<span class="string">'a'</span>), <span class="string">'\n'</span>)</span><br><span class="line">print(soup.find_all(<span class="string">'a'</span>)[<span class="number">1</span>], <span class="string">'\n'</span>)</span><br><span class="line">print(soup.find_all(<span class="string">'a'</span>)[<span class="number">1</span>].text, <span class="string">'\n'</span>)</span><br><span class="line">print(soup.find_all([<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'i'</span>]), <span class="string">'\n'</span>)</span><br><span class="line">print(soup.find_all(<span class="string">'a'</span>, limit=<span class="number">2</span>), <span class="string">'\n'</span>)</span><br><span class="line">print(soup.find_all(title=<span class="string">'qing'</span>), <span class="string">'\n'</span>)</span><br><span class="line">print(soup.find_all(attrs=&#123;<span class="string">'id'</span>: <span class="string">'feng'</span>&#125;), <span class="string">'\n'</span>)</span><br></pre></td></tr></table></figure></p><p>输出结果：<br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">[&lt;a href="http://www.song.com/" target="_self" title="赵匡义"&gt;宋朝是最强大的王朝，不是军队的强大，而是经济很强大，国民都很有钱。&lt;/a&gt;, &lt;a class="du" href=""&gt;总为浮云能蔽日，长安不见使人愁&lt;/a&gt;, &lt;a href="http://www.baidu.com" title="qing"&gt;清明时节雨纷纷，路上行人欲断魂，借问酒家何处有，牧童遥指杏花村。&lt;/a&gt;, &lt;a href="http://www.163.com" title="qin"&gt;秦时明月汉时关，万里长征人未还，但使龙城飞将在，不教胡马度阴山。&lt;/a&gt;, &lt;a href="http://www.126.com" name="qi"&gt;岐王宅里寻常见，崔九堂前几度闻，正是江南好风景，落花时节又逢君。&lt;/a&gt;, &lt;a class="du" href="http://www.sina.com"&gt;杜甫&lt;/a&gt;, &lt;a href="http://www.haha.com" id="feng"&gt;凤凰台上凤凰游，凤去台空江自流，吴宫花草埋幽径，晋代衣冠成古丘。&lt;/a&gt;] </span><br><span class="line"></span><br><span class="line">&lt;a class="du" href=""&gt;总为浮云能蔽日，长安不见使人愁&lt;/a&gt; </span><br><span class="line"></span><br><span class="line">总为浮云能蔽日，长安不见使人愁 </span><br><span class="line"></span><br><span class="line">[&lt;a href="http://www.song.com/" target="_self" title="赵匡义"&gt;宋朝是最强大的王朝，不是军队的强大，而是经济很强大，国民都很有钱。&lt;/a&gt;, &lt;a class="du" href=""&gt;总为浮云能蔽日，长安不见使人愁&lt;/a&gt;, &lt;a href="http://www.baidu.com" title="qing"&gt;清明时节雨纷纷，路上行人欲断魂，借问酒家何处有，牧童遥指杏花村。&lt;/a&gt;, &lt;a href="http://www.163.com" title="qin"&gt;秦时明月汉时关，万里长征人未还，但使龙城飞将在，不教胡马度阴山。&lt;/a&gt;, &lt;a href="http://www.126.com" name="qi"&gt;岐王宅里寻常见，崔九堂前几度闻，正是江南好风景，落花时节又逢君。&lt;/a&gt;, &lt;a class="du" href="http://www.sina.com"&gt;杜甫&lt;/a&gt;, &lt;b&gt;唐朝&lt;/b&gt;, &lt;i&gt;宋朝&lt;/i&gt;, &lt;a href="http://www.haha.com" id="feng"&gt;凤凰台上凤凰游，凤去台空江自流，吴宫花草埋幽径，晋代衣冠成古丘。&lt;/a&gt;] </span><br><span class="line"></span><br><span class="line">[&lt;a href="http://www.song.com/" target="_self" title="赵匡义"&gt;宋朝是最强大的王朝，不是军队的强大，而是经济很强大，国民都很有钱。&lt;/a&gt;, &lt;a class="du" href=""&gt;总为浮云能蔽日，长安不见使人愁&lt;/a&gt;] </span><br><span class="line"></span><br><span class="line">[&lt;a href="http://www.baidu.com" title="qing"&gt;清明时节雨纷纷，路上行人欲断魂，借问酒家何处有，牧童遥指杏花村。&lt;/a&gt;] </span><br><span class="line"></span><br><span class="line">[&lt;a href="http://www.haha.com" id="feng"&gt;凤凰台上凤凰游，凤去台空江自流，吴宫花草埋幽径，晋代衣冠成古丘。&lt;/a&gt;]</span><br></pre></td></tr></table></figure></p><h2 id="【8-4-2】find-方法"><a href="#【8-4-2】find-方法" class="headerlink" title="【8.4.2】find() 方法"></a><font color="#ff0000">【8.4.2】find() 方法</font></h2><p>find() 方法使用方法与 find_all() 方法相同，不同的是，find 方法返回的是单个元素，也就是第一个匹配的元素，而 find_all 返回的是所有匹配的元素组成的列表<br>特别的：</p><ul><li><p>find_parents 和 find_parent：前者返回所有祖先节点，后者返回直接父节点。</p></li><li><p>find_next_siblings 和 find_next_sibling：前者返回后面所有的兄弟节点，后者返回后面第一个兄弟节点。</p></li><li><p>find_previous_siblings 和 find_previous_sibling：前者返回前面所有的兄弟节点，后者返回前面第一个兄弟节点。</p></li><li><p>find_all_next 和 find_next：前者返回节点后所有符合条件的节点，后者返回第一个符合条件的节点。</p></li><li><p>find_all_previous 和 find_previous：前者返回节点前所有符合条件的节点，后者返回第一个符合条件的节点。</p></li></ul><h1 id="【8-5】CSS-选择器"><a href="#【8-5】CSS-选择器" class="headerlink" title="【8.5】CSS 选择器"></a><font color="#ff0000">【8.5】CSS 选择器</font></h1><p>使用 CSS 选择器，只需要调用 select 方法，传入相应的 CSS 选择器即可<br>新建 soup.html 文件：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"tang"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"http://www.baidu.com"</span> <span class="attr">title</span>=<span class="string">"qing"</span>&gt;</span>清明时节雨纷纷，路上行人欲断魂，借问酒家何处有，牧童遥指杏花村。<span class="tag">&lt;/<span class="name">a</span>&gt;</span> <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"http://www.163.com"</span> <span class="attr">title</span>=<span class="string">"qin"</span>&gt;</span>秦时明月汉时关，万里长征人未还，但使龙城飞将在，不教胡马度阴山。<span class="tag">&lt;/<span class="name">a</span>&gt;</span> <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"http://www.126.com"</span> <span class="attr">name</span>=<span class="string">"qi"</span>&gt;</span>岐王宅里寻常见，崔九堂前几度闻，正是江南好风景，落花时节又逢君。<span class="tag">&lt;/<span class="name">a</span>&gt;</span> <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"http://www.sina.com"</span> <span class="attr">class</span>=<span class="string">"du"</span>&gt;</span>杜甫<span class="tag">&lt;/<span class="name">a</span>&gt;</span> <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"http://www.haha.com"</span> <span class="attr">id</span>=<span class="string">"feng"</span>&gt;</span>凤凰台上凤凰游，凤去台空江自流，吴宫花草埋幽径，晋代衣冠成古丘。<span class="tag">&lt;/<span class="name">a</span>&gt;</span> <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>通过 CSS 选择器依次选择 class=”tang” 的 div 节点下的 a 节点、id 为 feng 的节点以及其 href 元素：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line"></span><br><span class="line">soup = BeautifulSoup(open(<span class="string">'soup.html'</span>, encoding=<span class="string">'utf8'</span>), <span class="string">'lxml'</span>)</span><br><span class="line">print(soup.select(<span class="string">'li'</span>), <span class="string">'\n'</span>)</span><br><span class="line">print(soup.select(<span class="string">'.tang &gt; ul &gt; li &gt; a'</span>)[<span class="number">2</span>], <span class="string">'\n'</span>)</span><br><span class="line">print(soup.select(<span class="string">'#feng'</span>)[<span class="number">0</span>].text, <span class="string">'\n'</span>)</span><br><span class="line">print(soup.select(<span class="string">'#feng'</span>)[<span class="number">0</span>][<span class="string">'href'</span>], <span class="string">'\n'</span>)</span><br></pre></td></tr></table></figure></p><p>输出结果：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[&lt;li&gt;&lt;a href="http://www.baidu.com" title="qing"&gt;清明时节雨纷纷，路上行人欲断魂，借问酒家何处有，牧童遥指杏花村。&lt;/a&gt; &lt;/li&gt;, &lt;li&gt;&lt;a href="http://www.163.com" title="qin"&gt;秦时明月汉时关，万里长征人未还，但使龙城飞将在，不教胡马度阴山。&lt;/a&gt; &lt;/li&gt;, &lt;li&gt;&lt;a href="http://www.126.com" name="qi"&gt;岐王宅里寻常见，崔九堂前几度闻，正是江南好风景，落花时节又逢君。&lt;/a&gt; &lt;/li&gt;, &lt;li&gt;&lt;a class="du" href="http://www.sina.com"&gt;杜甫&lt;/a&gt; &lt;/li&gt;, &lt;li&gt;&lt;a href="http://www.haha.com" id="feng"&gt;凤凰台上凤凰游，凤去台空江自流，吴宫花草埋幽径，晋代衣冠成古丘。&lt;/a&gt; &lt;/li&gt;] </span><br><span class="line"></span><br><span class="line">&lt;a href="http://www.126.com" name="qi"&gt;岐王宅里寻常见，崔九堂前几度闻，正是江南好风景，落花时节又逢君。&lt;/a&gt; </span><br><span class="line"></span><br><span class="line">凤凰台上凤凰游，凤去台空江自流，吴宫花草埋幽径，晋代衣冠成古丘。 </span><br><span class="line"></span><br><span class="line">http://www.haha.com</span><br></pre></td></tr></table></figure></p><p>附表：CSS 选择器，来源：<a href="https://www.w3school.com.cn/cssref/css_selectors.asp" target="_blank" rel="noopener">https://www.w3school.com.cn/cssref/css_selectors.asp</a></p><table><thead><tr><th>选择器</th><th>例子</th><th>例子描述</th><th>CSS</th></tr></thead><tbody><tr><td>.class</td><td>.intro</td><td>选择 class=”intro” 的所有元素</td><td>1</td></tr><tr><td>#id</td><td>#firstname</td><td>选择 id=”firstname” 的所有元素</td><td>1</td></tr><tr><td>*</td><td>*</td><td>选择所有元素</td><td>2</td></tr><tr><td>element</td><td>p</td><td>选择所有 <p> 元素</p></td><td>1</td></tr><tr><td>element,element</td><td>div,p</td><td>选择所有 <div> 元素和所有 <p> 元素</p></div></td><td>1</td></tr><tr><td>element element</td><td>div p</td><td>选择 <div> 元素内部的所有 <p> 元素</p></div></td><td>1</td></tr><tr><td>element&gt;element</td><td>div&gt;p</td><td>选择父元素为 <div> 元素的所有 <p> 元素</p></div></td><td>2</td></tr><tr><td>element+element</td><td>div+p</td><td>选择紧接在 <div> 元素之后的所有 <p> 元素</p></div></td><td>2</td></tr><tr><td>[attribute]</td><td>[target]</td><td>选择带有 target 属性所有元素</td><td>2</td></tr><tr><td>[attribute=value]</td><td>[target=_blank]</td><td>选择 target=”_blank” 的所有元素</td><td>2</td></tr><tr><td>[attribute~=value]</td><td>[title~=flower]</td><td>选择 title 属性包含单词 “flower” 的所有元素</td><td>2</td></tr><tr><td>[attribute</td><td>=value]</td><td>[lang</td><td>=en]</td><td>选择 lang 属性值以 “en” 开头的所有元素</td><td>2</td></tr><tr><td>:link</td><td>a:link</td><td>选择所有未被访问的链接</td><td>1</td></tr><tr><td>:visited</td><td>a:visited</td><td>选择所有已被访问的链接</td><td>1</td></tr><tr><td>:active</td><td>a:active</td><td>选择活动链接</td><td>1</td></tr><tr><td>:hover</td><td>a:hover</td><td>选择鼠标指针位于其上的链接</td><td>1</td></tr><tr><td>:focus</td><td>input:focus</td><td>选择获得焦点的 input 元素</td><td>2</td></tr><tr><td>:first-letter</td><td>p:first-letter</td><td>选择每个 <p> 元素的首字母</p></td><td>1</td></tr><tr><td>:first-line</td><td>p:first-line</td><td>选择每个 <p> 元素的首行</p></td><td>1</td></tr><tr><td>:first-child</td><td>p:first-child</td><td>选择属于父元素的第一个子元素的每个 <p> 元素</p></td><td>2</td></tr><tr><td>:before</td><td>p:before</td><td>在每个 <p> 元素的内容之前插入内容</p></td><td>2</td></tr><tr><td>:after</td><td>p:after</td><td>在每个 <p> 元素的内容之后插入内容</p></td><td>2</td></tr><tr><td>:lang(language)</td><td>p:lang(it)</td><td>选择带有以 “it” 开头的 lang 属性值的每个 <p> 元素</p></td><td>2</td></tr><tr><td>element1~element2</td><td>p~ul</td><td>选择前面有 <p> 元素的每个 <ul> 元素</ul></p></td><td>3</td></tr><tr><td>[attribute^=value]</td><td>a[src^=”https”]</td><td>选择其 src 属性值以 “https” 开头的每个 <a> 元素</a></td><td>3</td></tr><tr><td>[attribute$=value]</td><td>a[src$=”.pdf”]</td><td>选择其 src 属性以 “.pdf” 结尾的所有 <a> 元素</a></td><td>3</td></tr><tr><td>[attribute*=value]</td><td>a[src*=”abc”]</td><td>选择其 src 属性中包含 “abc” 子串的每个 <a> 元素</a></td><td>3</td></tr><tr><td>:first-of-type</td><td>p:first-of-type</td><td>选择属于其父元素的首个 <p> 元素的每个 </p><p> 元素</p></td><td>3</td></tr><tr><td>:last-of-type</td><td>p:last-of-type</td><td>选择属于其父元素的最后 <p> 元素的每个 </p><p> 元素</p></td><td>3</td></tr><tr><td>:only-of-type</td><td>p:only-of-type</td><td>选择属于其父元素唯一的 <p> 元素的每个 </p><p> 元素</p></td><td>3</td></tr><tr><td>:only-child</td><td>p:only-child</td><td>选择属于其父元素的唯一子元素的每个 <p> 元素</p></td><td>3</td></tr><tr><td>:nth-child(n)</td><td>p:nth-child(2)</td><td>选择属于其父元素的第二个子元素的每个 <p> 元素</p></td><td>3</td></tr><tr><td>:nth-last-child(n)</td><td>p:nth-last-child(2)</td><td>同上，从最后一个子元素开始计数</td><td>3</td></tr><tr><td>:nth-of-type(n)</td><td>p:nth-of-type(2)</td><td>选择属于其父元素第二个 <p> 元素的每个 </p><p> 元素</p></td><td>3</td></tr><tr><td>:nth-last-of-type(n)</td><td>p:nth-last-of-type(2)</td><td>同上，但是从最后一个子元素开始计数</td><td>3</td></tr><tr><td>:last-child</td><td>p:last-child</td><td>选择属于其父元素最后一个子元素每个 <p> 元素</p></td><td>3</td></tr><tr><td>:root</td><td>:root</td><td>选择文档的根元素</td><td>3</td></tr><tr><td>:empty</td><td>p:empty</td><td>选择没有子元素的每个 <p> 元素（包括文本节点）</p></td><td>3</td></tr><tr><td>:target</td><td>#news:target</td><td>选择当前活动的 #news 元素</td><td>3</td></tr><tr><td>:enabled</td><td>input:enabled</td><td>选择每个启用的 <input> 元素</td><td>3</td></tr><tr><td>:disabled</td><td>input:disabled</td><td>选择每个禁用的 <input> 元素</td><td>3</td></tr><tr><td>:checked</td><td>input:checked</td><td>选择每个被选中的 <input> 元素</td><td>3</td></tr><tr><td>:not(selector)</td><td>:not(p)</td><td>选择非 <p> 元素的每个元素</p></td><td>3</td></tr><tr><td>::selection</td><td>::selection</td><td>选择被用户选取的元素部分</td><td>3</td></tr></tbody></table><h1 id="【8-6】附表：Beautiful-Soup-库-soup-对象常用属性与方法"><a href="#【8-6】附表：Beautiful-Soup-库-soup-对象常用属性与方法" class="headerlink" title="【8.6】附表：Beautiful Soup 库 soup 对象常用属性与方法"></a><font color="#ff0000">【8.6】附表：Beautiful Soup 库 soup 对象常用属性与方法</font></h1><table><thead><tr><th>基本元素</th><th>说明</th><th>返回类型</th></tr></thead><tbody><tr><td>tag</td><td>soup.a</td><td>bs4.element.Tag</td></tr><tr><td>name</td><td>soup.a.name</td><td>str</td></tr><tr><td>attrs</td><td>soup.a.attrs</td><td>dict</td></tr><tr><td>contents</td><td>子节点</td><td>list</td></tr><tr><td>children</td><td>遍历子节点</td><td>list_iterator</td></tr><tr><td>descendants</td><td>遍历所有子孙节点</td><td>generator</td></tr><tr><td>parent</td><td>返回父亲标签</td><td>bs4.element.Tag</td></tr><tr><td>parents</td><td>上行遍历父辈标签</td><td>generator</td></tr><tr><td>prettify()</td><td>添加/n</td><td>str</td></tr><tr><td>find_all(name,attr)</td><td>soup.find_all(‘a’)/([‘a’,‘b’])/(True)/(‘p’,‘course’)/(id=‘link1’)/(string=‘python’)</td><td>bs4.element.ResultSet</td></tr><tr><td>find()</td><td>soup.find(‘a’)/返回第一个a标签</td><td>bs4.element.Tag</td></tr></tbody></table>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;center&gt;&lt;font color=&quot;#1BC3FB&quot; size=&quot;4&quot;&gt;Python3 爬虫学习笔记第八章 —— 【解析库 Beautiful Soup】&lt;/font&gt;&lt;/center&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="Python3 学习笔记" scheme="https://www.itrhx.com/categories/Python3-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
      <category term="爬虫学习" scheme="https://www.itrhx.com/categories/Python3-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E7%88%AC%E8%99%AB%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="爬虫" scheme="https://www.itrhx.com/tags/%E7%88%AC%E8%99%AB/"/>
    
      <category term="Beautiful Soup" scheme="https://www.itrhx.com/tags/Beautiful-Soup/"/>
    
  </entry>
  
  <entry>
    <title>Python3 爬虫学习笔记 C07</title>
    <link href="https://www.itrhx.com/2019/08/25/A37-Python3-spider-C07/"/>
    <id>https://www.itrhx.com/2019/08/25/A37-Python3-spider-C07/</id>
    <published>2019-08-25T11:31:18.872Z</published>
    <updated>2019-09-24T12:40:30.940Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><blockquote><center><font color="#1BC3FB" size="4">Python3 爬虫学习笔记第七章 —— 【解析库 lxml】</font></center></blockquote><a id="more"></a><h1 id="【7-1】关于-lxml"><a href="#【7-1】关于-lxml" class="headerlink" title="【7.1】关于 lxml"></a><font color="#ff0000">【7.1】关于 lxml</font></h1><p> lxml 是 Python 的一个解析库，支持 HTML 和 XML 的解析，支持 XPath 解析方式，解析效率非常高，使用前需要用命令 <code>pip3 install lxml</code> 安装 lxml 库</p><h1 id="【7-2】使用-XPath"><a href="#【7-2】使用-XPath" class="headerlink" title="【7.2】使用  XPath"></a><font color="#ff0000">【7.2】使用  XPath</font></h1><p> XPath（XML Path Language）即 XML 路径语言， lxml 解析库使用的正是 XPath 语法，最初是用来搜寻 XML 文档的，是一门在 XML 文档中查找信息的语言，它同样适用于 HTML 文档的搜索</p><p>  XPath 常用规则</p><table><thead><tr><th style="text-align:center">表达式</th><th style="text-align:center">描述</th></tr></thead><tbody><tr><td style="text-align:center">nodename</td><td style="text-align:center">选取此节点的所有子节点</td></tr><tr><td style="text-align:center">/</td><td style="text-align:center">从当前节点选取直接子节点</td></tr><tr><td style="text-align:center">//</td><td style="text-align:center">从当前节点选取子孙节点</td></tr><tr><td style="text-align:center">.</td><td style="text-align:center">选取当前节点</td></tr><tr><td style="text-align:center">..</td><td style="text-align:center">选取当前节点的父节点</td></tr><tr><td style="text-align:center">@</td><td style="text-align:center">选取属性</td></tr><tr><td style="text-align:center">*</td><td style="text-align:center">通配符，选择所有元素节点与元素名</td></tr><tr><td style="text-align:center">@*</td><td style="text-align:center">选取所有属性</td></tr><tr><td style="text-align:center">[@attrib]</td><td style="text-align:center">选取具有给定属性的所有元素</td></tr><tr><td style="text-align:center">[@attrib=’value’]</td><td style="text-align:center">选取给定属性具有给定值的所有元素</td></tr><tr><td style="text-align:center">[tag]</td><td style="text-align:center">选取所有具有指定元素的直接子节点</td></tr><tr><td style="text-align:center">[tag=’text’]</td><td style="text-align:center">选取所有具有指定元素并且文本内容是text节点</td></tr></tbody></table><p> 浏览器插件 XPath Helper，在线验证 XPath，谷歌商店下载地址：<a href="https://chrome.google.com/webstore/detail/hgimnogjllphhhkhlmebbmlgjoejdpjl" target="_blank" rel="noopener">https://chrome.google.com/webstore/detail/hgimnogjllphhhkhlmebbmlgjoejdpjl</a></p><p> XPath 基本使用方法：首先使用代码 <code>from lxml import etree</code>导入库，然后将 HTML 文档变成一个对象，再调用对象的方法去查找指定的节点，方法有两种：<code>tree = etree.parse()</code> 为本地文件查找，<code>tree = etree.HTML()</code> 为网络文件查找，再使用语句 <code>tree.xpath()</code> 查找指定节点。</p><h1 id="【7-3】查找所有节点"><a href="#【7-3】查找所有节点" class="headerlink" title="【7.3】查找所有节点"></a><font color="#ff0000">【7.3】查找所有节点</font></h1><p> 新建一个 xpath.html 本地文件，内容如下：<br> <figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"> <span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>xpath测试<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"song"</span>&gt;</span></span><br><span class="line">    火药</span><br><span class="line">    <span class="tag">&lt;<span class="name">b</span>&gt;</span>指南针<span class="tag">&lt;/<span class="name">b</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">b</span>&gt;</span>印刷术<span class="tag">&lt;/<span class="name">b</span>&gt;</span></span><br><span class="line">    造纸术</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"tang"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"balove"</span>&gt;</span>停车坐爱枫林晚，霜叶红于二月花。<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span> <span class="attr">id</span>=<span class="string">"hua"</span>&gt;</span>商女不知亡国恨，隔江犹唱后庭花。<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"love"</span> <span class="attr">name</span>=<span class="string">"yang"</span>&gt;</span>一骑红尘妃子笑，无人知是荔枝来。<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span> <span class="attr">id</span>=<span class="string">"bei"</span>&gt;</span>葡萄美酒夜光杯，欲饮琵琶马上催。<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"http://www.baidu.com/"</span>&gt;</span>百度一下<span class="tag">&lt;/<span class="name">a</span>&gt;</span> <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ol</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"balucy"</span>&gt;</span>寻寻觅觅冷冷清清，凄凄惨惨戚戚。<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"lily"</span>&gt;</span>咋暖还寒时候，最难将息。<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"lilei"</span>&gt;</span>三杯两盏淡酒。<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>怎敌他晚来风急。<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>雁过也，正伤心，却是旧时相识。<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>爱情三十六计<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>什么是爱情<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ol</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>查找所有节点：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> lxml <span class="keyword">import</span> etree</span><br><span class="line"></span><br><span class="line">html = etree.parse(<span class="string">'./xpath.html'</span>)</span><br><span class="line">result = html.xpath(<span class="string">'//*'</span>)</span><br><span class="line">print(result)</span><br></pre></td></tr></table></figure></p><p>使用 <code>*</code> 代表匹配所有节点，整个 xpath.html 文件中的所有节点都会被获取到，返回形式是一个列表，每个元素是 Element 类型，其后跟了节点的名称，如 html、body、div、ul、li、a 等，所有节点都包含在列表中，输出结果如下：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[&lt;Element html at <span class="number">0x1a836a34508</span>&gt;, &lt;Element head at <span class="number">0x1a836a344c8</span>&gt;, &lt;Element meta at <span class="number">0x1a836a345c8</span>&gt;, &lt;Element title at <span class="number">0x1a836a34608</span>&gt;, &lt;Element body at <span class="number">0x1a836a34648</span>&gt;, &lt;Element div at <span class="number">0x1a836a346c8</span>&gt;, &lt;Element b at <span class="number">0x1a836a34708</span>&gt;, &lt;Element b at <span class="number">0x1a836a34748</span>&gt;, &lt;Element div at <span class="number">0x1a836a34788</span>&gt;, &lt;Element ul at <span class="number">0x1a836a34688</span>&gt;, &lt;Element li at <span class="number">0x1a836a347c8</span>&gt;, &lt;Element li at <span class="number">0x1a836a34808</span>&gt;, &lt;Element li at <span class="number">0x1a836a34848</span>&gt;, &lt;Element li at <span class="number">0x1a836a34888</span>&gt;, &lt;Element li at <span class="number">0x1a836a348c8</span>&gt;, &lt;Element a at <span class="number">0x1a836a34908</span>&gt;, &lt;Element ol at <span class="number">0x1a836a34948</span>&gt;, &lt;Element li at <span class="number">0x1a836a34988</span>&gt;, &lt;Element li at <span class="number">0x1a836a349c8</span>&gt;, &lt;Element li at <span class="number">0x1a836a34a08</span>&gt;, &lt;Element li at <span class="number">0x1a836a34a48</span>&gt;, &lt;Element li at <span class="number">0x1a836a34a88</span>&gt;, &lt;Element li at <span class="number">0x1a836a34ac8</span>&gt;, &lt;Element li at <span class="number">0x1a836a34b08</span>&gt;]</span><br></pre></td></tr></table></figure></p><h1 id="【7-4】查找子节点"><a href="#【7-4】查找子节点" class="headerlink" title="【7.4】查找子节点"></a><font color="#ff0000">【7.4】查找子节点</font></h1><p> 通过 <font color="#ff0000">/</font> 或 <font color="#ff0000">//</font> 即可查找元素的子节点或子孙节点：<br> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"> <span class="keyword">from</span> lxml <span class="keyword">import</span> etree</span><br><span class="line"></span><br><span class="line">html = etree.parse(<span class="string">'./xpath.html'</span>)</span><br><span class="line">result = html.xpath(<span class="string">'//ul/li'</span>)</span><br><span class="line">print(result)</span><br></pre></td></tr></table></figure></p><p>选择 ul 节点的所有<font color="#ff0000">直接</font> li 子节点：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[&lt;Element li at <span class="number">0x2a094d044c8</span>&gt;, &lt;Element li at <span class="number">0x2a094d045c8</span>&gt;, &lt;Element li at <span class="number">0x2a094d04608</span>&gt;, &lt;Element li at <span class="number">0x2a094d04648</span>&gt;, &lt;Element li at <span class="number">0x2a094d04688</span>&gt;]</span><br></pre></td></tr></table></figure></p><h1 id="【7-5】查找父节点"><a href="#【7-5】查找父节点" class="headerlink" title="【7.5】查找父节点"></a><font color="#ff0000">【7.5】查找父节点</font></h1><p> 知道了子节点，也可以用 <font color="#ff0000">..</font> 或者 <font color="#ff0000">parent::</font> 查找其父节点<br> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"> <span class="keyword">from</span> lxml <span class="keyword">import</span> etree</span><br><span class="line"></span><br><span class="line">html = etree.parse(<span class="string">'./xpath.html'</span>)</span><br><span class="line">result = html.xpath(<span class="string">'//ol/../@class'</span>)</span><br><span class="line">print(result)</span><br></pre></td></tr></table></figure></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> lxml <span class="keyword">import</span> etree</span><br><span class="line"></span><br><span class="line">html = etree.parse(<span class="string">'./xpath.html'</span>)</span><br><span class="line">result = html.xpath(<span class="string">'//ol/parent::*/@class'</span>)</span><br><span class="line">print(result)</span><br></pre></td></tr></table></figure><p>先查找到 ol 节点，随后获取其父节点以及其 class 属性：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[<span class="string">'tang'</span>]</span><br></pre></td></tr></table></figure></p><h1 id="【7-6】属性匹配"><a href="#【7-6】属性匹配" class="headerlink" title="【7.6】属性匹配"></a><font color="#ff0000">【7.6】属性匹配</font></h1><p> 有时候 HTML 包含多个相同名的节点，而节点的属性是不一样的，此时可以用 <font color="#ff0000">@</font> 符号进行属性过滤<br> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"> <span class="keyword">from</span> lxml <span class="keyword">import</span> etree</span><br><span class="line"></span><br><span class="line">html = etree.parse(<span class="string">'./xpath.html'</span>)</span><br><span class="line">result = html.xpath(<span class="string">'//li[@class="balucy"]'</span>)</span><br><span class="line">print(result)</span><br></pre></td></tr></table></figure></p><p>xpath.html 文件中，只有一个 class 为 balucy 的节点：<code>&lt;li class=&quot;balucy&quot;&gt;寻寻觅觅冷冷清清，凄凄惨惨戚戚。&lt;/li&gt;</code>，运行以上代码将返回一个该元素：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[&lt;Element li at <span class="number">0x16e53aa54c8</span>&gt;]</span><br></pre></td></tr></table></figure></p><h1 id="【7-7】文本获取"><a href="#【7-7】文本获取" class="headerlink" title="【7.7】文本获取"></a><font color="#ff0000">【7.7】文本获取</font></h1><p> 使用 text() 方法即可提取节点中的文本：<br> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"> <span class="keyword">from</span> lxml <span class="keyword">import</span> etree</span><br><span class="line"></span><br><span class="line">html = etree.parse(<span class="string">'./xpath.html'</span>)</span><br><span class="line">result = html.xpath(<span class="string">'//li[@class="balucy"]/text()'</span>)</span><br><span class="line">print(result)</span><br></pre></td></tr></table></figure></p><p>输出结果：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[<span class="string">'寻寻觅觅冷冷清清，凄凄惨惨戚戚。'</span>]</span><br></pre></td></tr></table></figure></p><p>再次观察 xpath.html 文件中的 <code>&lt;ol&gt;&lt;/ol&gt;</code>这一部分：<br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;ol&gt;</span><br><span class="line">    &lt;li class="balucy"&gt;寻寻觅觅冷冷清清，凄凄惨惨戚戚。&lt;/li&gt;</span><br><span class="line">    &lt;li class="lily"&gt;咋暖还寒时候，最难将息。&lt;/li&gt;</span><br><span class="line">    &lt;li class="lilei"&gt;三杯两盏淡酒。&lt;/li&gt;</span><br><span class="line">    &lt;li&gt;怎敌他晚来风急。&lt;/li&gt;</span><br><span class="line">    &lt;li&gt;雁过也，正伤心，却是旧时相识。&lt;/li&gt;</span><br><span class="line">    &lt;li&gt;爱情三十六计&lt;/li&gt;</span><br><span class="line">    &lt;li&gt;什么是爱情&lt;/li&gt;</span><br><span class="line">&lt;/ol&gt;</span><br></pre></td></tr></table></figure></p><p>如果我们想要提取 <code>&lt;li&gt;</code> 节点里面所有的文本，就可以使用 <code>html.xpath(&#39;//ol/li/text()&#39;)</code> 语句：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> lxml <span class="keyword">import</span> etree</span><br><span class="line"></span><br><span class="line">html = etree.parse(<span class="string">'./xpath.html'</span>)</span><br><span class="line">result = html.xpath(<span class="string">'//ol/li/text()'</span>)</span><br><span class="line">print(result)</span><br></pre></td></tr></table></figure></p><p>输出结果：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[<span class="string">'寻寻觅觅冷冷清清，凄凄惨惨戚戚。'</span>, <span class="string">'咋暖还寒时候，最难将息。'</span>, <span class="string">'三杯两盏淡酒。'</span>, <span class="string">'怎敌他晚来风急。'</span>, <span class="string">'雁过也，正伤心，却是旧时相识。'</span>, <span class="string">'爱情三十六计'</span>, <span class="string">'什么是爱情'</span>]</span><br></pre></td></tr></table></figure></p><p>同样还有另一种方法，使用 <code>html.xpath(&#39;//ol//text()&#39;)</code> 语句，<code>//</code> 将会选取所有子孙节点的文本，<code>&lt;ol&gt;</code> 和 <code>&lt;li&gt;</code> 节点下的换行符也将被提取出来：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> lxml <span class="keyword">import</span> etree</span><br><span class="line"></span><br><span class="line">html = etree.parse(<span class="string">'./xpath.html'</span>)</span><br><span class="line">result = html.xpath(<span class="string">'//ol//text()'</span>)</span><br><span class="line">print(result)</span><br></pre></td></tr></table></figure></p><p>输出结果：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[<span class="string">'\n        '</span>, <span class="string">'寻寻觅觅冷冷清清，凄凄惨惨戚戚。'</span>, <span class="string">'\n        '</span>, <span class="string">'咋暖还寒时候，最难将息。'</span>, <span class="string">'\n        '</span>, <span class="string">'三杯两盏淡酒。'</span>, <span class="string">'\n        '</span>, <span class="string">'怎敌他晚来风急。'</span>, <span class="string">'\n        '</span>, <span class="string">'雁过也，正伤心，却是旧时相识。'</span>, <span class="string">'\n        '</span>, <span class="string">'爱情三十六计'</span>, <span class="string">'\n        '</span>, <span class="string">'什么是爱情'</span>, <span class="string">'\n    '</span>]</span><br></pre></td></tr></table></figure></p><h1 id="【7-8】属性获取"><a href="#【7-8】属性获取" class="headerlink" title="【7.8】属性获取"></a><font color="#ff0000">【7.8】属性获取</font></h1><p> 与属性匹配一样，属性获取仍然使用 <font color="#ff0000">@</font>：<br> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"> <span class="keyword">from</span> lxml <span class="keyword">import</span> etree</span><br><span class="line"></span><br><span class="line">html = etree.parse(<span class="string">'./xpath.html'</span>)</span><br><span class="line">result = html.xpath(<span class="string">'//ul/li[5]/a/@href'</span>)</span><br><span class="line">print(result)</span><br></pre></td></tr></table></figure></p><p> 获取 href 属性：<br> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[<span class="string">'http://www.baidu.com/'</span>]</span><br></pre></td></tr></table></figure></p><h1 id="【7-9】一个属性包含多个值的匹配"><a href="#【7-9】一个属性包含多个值的匹配" class="headerlink" title="【7.9】一个属性包含多个值的匹配"></a><font color="#ff0000">【7.9】一个属性包含多个值的匹配</font></h1><p>某个节点的某个属性可能有多个值，例如：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"li li-first"</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"link.html"</span>&gt;</span>first item<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>li 节点的 class 属性有 li 和 li-first 两个值，如果使用 <code>html.xpath(&#39;//li[@class=&quot;li&quot;]</code> 语句，将无法成功匹配，这时就需要使用<font color="#ff0000"> contains</font> 方法了，第一个参数传入属性名称，第二个参数传入属性值，只要此属性包含所传入的属性值，就可以完成匹配了</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> lxml <span class="keyword">import</span> etree</span><br><span class="line">text = <span class="string">'''  </span></span><br><span class="line"><span class="string">&lt;li class="li li-first"&gt;&lt;a href="link.html"&gt;first item&lt;/a&gt;&lt;/li&gt;  </span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line">html = etree.HTML(text)</span><br><span class="line">result = html.xpath(<span class="string">'//li[contains(@class, "li")]/a/text()'</span>)</span><br><span class="line">print(result)</span><br></pre></td></tr></table></figure><p>输出结果：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[<span class="string">'first item'</span>]</span><br></pre></td></tr></table></figure></p><h1 id="【7-10】多个属性匹配一个节点"><a href="#【7-10】多个属性匹配一个节点" class="headerlink" title="【7.10】多个属性匹配一个节点"></a><font color="#ff0000">【7.10】多个属性匹配一个节点</font></h1><p>XPath 还可以根据多个属性来确定一个节点，这时就需要同时匹配多个属性。此时可以使用运算符 and 来连接：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> lxml <span class="keyword">import</span> etree</span><br><span class="line">text = <span class="string">'''  </span></span><br><span class="line"><span class="string">&lt;li class="li" name="item"&gt;&lt;a href="link.html"&gt;first item&lt;/a&gt;&lt;/li&gt;</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line">html = etree.HTML(text)</span><br><span class="line">result = html.xpath(<span class="string">'//li[@class="li" and @name="item"]/a/text()'</span>)</span><br><span class="line">print(result)</span><br></pre></td></tr></table></figure></p><p>输出结果：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[<span class="string">'first item'</span>]</span><br></pre></td></tr></table></figure></p><p>示例中运用了运算符 and 来连接，此外常见的运算符如下：</p><table><thead><tr><th>运算符</th><th>描述</th><th>实例</th><th>返回值</th></tr></thead><tbody><tr><td>or</td><td>或</td><td>age=19 or age=20</td><td>如果 age 是 19 或者 20，则返回 true。如果 age 是其他值，则返回 false</td></tr><tr><td>and</td><td>与</td><td>age&gt;19 and age&lt;21</td><td>如果 age 大于 19 且小于 21，则返回 true。如果 age 是其他值，则返回 false</td></tr><tr><td>mod</td><td>计算除法的余数</td><td>5 mod 2</td><td>1</td></tr><tr><td>&#124;</td><td>计算两个节点集</td><td>//book &#124; //cd</td><td>返回所有拥有 book 和 cd 元素的节点集</td></tr><tr><td>+</td><td>加法</td><td>10 + 5</td><td>15</td></tr><tr><td>-</td><td>减法</td><td>10 - 5</td><td>5</td></tr><tr><td>*</td><td>乘法</td><td>10 * 5</td><td>50</td></tr><tr><td>div</td><td>除法</td><td>10 div 5</td><td>2</td></tr><tr><td>=</td><td>等于</td><td>age=19</td><td>如果 age 是 19，则返回 true。如果 age 不是 19，则返回 false</td></tr><tr><td>!=</td><td>不等于</td><td>age!=19</td><td>如果 age 不是 19，则返回 true。如果 age 是 19，则返回 false</td></tr><tr><td>&lt;</td><td>小于</td><td>age&lt;19</td><td>如果 age 小于 19，则返回 true。如果 age 不小于 19，则返回 false</td></tr><tr><td>&lt;=</td><td>小于或等于</td><td>age&lt;=19</td><td>如果 age 小于等于 19，则返回 true。如果 age 大于 19，则返回 false</td></tr><tr><td>&gt;</td><td>大于</td><td>age&gt;19</td><td>如果 age 大于 19，则返回 true。如果 age 不大于 19，则返回 false</td></tr><tr><td>&gt;=</td><td>大于或等于</td><td>age&gt;=19</td><td>如果 age 大于等于 19，则返回 true。如果 age 小于 19，则返回 false</td></tr></tbody></table><h1 id="【7-11】按顺序选择节点"><a href="#【7-11】按顺序选择节点" class="headerlink" title="【7.11】按顺序选择节点"></a><font color="#ff0000">【7.11】按顺序选择节点</font></h1><p>某些属性可能同时匹配了多个节点，如果要选择其中几个节点，可以利用中括号传入索引的方法获取特定次序的节点<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> lxml <span class="keyword">import</span> etree</span><br><span class="line"></span><br><span class="line">text = <span class="string">'''</span></span><br><span class="line"><span class="string">&lt;div&gt;</span></span><br><span class="line"><span class="string">    &lt;ul&gt;</span></span><br><span class="line"><span class="string">         &lt;li class="item-0"&gt;&lt;a href="link1.html"&gt;first item&lt;/a&gt;&lt;/li&gt;</span></span><br><span class="line"><span class="string">         &lt;li class="item-1"&gt;&lt;a href="link2.html"&gt;second item&lt;/a&gt;&lt;/li&gt;</span></span><br><span class="line"><span class="string">         &lt;li class="item-inactive"&gt;&lt;a href="link3.html"&gt;third item&lt;/a&gt;&lt;/li&gt;</span></span><br><span class="line"><span class="string">         &lt;li class="item-1"&gt;&lt;a href="link4.html"&gt;fourth item&lt;/a&gt;&lt;/li&gt;</span></span><br><span class="line"><span class="string">         &lt;li class="item-0"&gt;&lt;a href="link5.html"&gt;fifth item&lt;/a&gt;</span></span><br><span class="line"><span class="string">    &lt;/ul&gt;</span></span><br><span class="line"><span class="string"> &lt;/div&gt;</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line">html = etree.HTML(text)</span><br><span class="line">result = html.xpath(<span class="string">'//li[1]/a/text()'</span>)</span><br><span class="line">print(result)</span><br><span class="line">result = html.xpath(<span class="string">'//li[last()]/a/text()'</span>)</span><br><span class="line">print(result)</span><br><span class="line">result = html.xpath(<span class="string">'//li[position()&lt;3]/a/text()'</span>)</span><br><span class="line">print(result)</span><br><span class="line">result = html.xpath(<span class="string">'//li[last()-2]/a/text()'</span>)</span><br><span class="line">print(result)</span><br></pre></td></tr></table></figure></p><ul><li>li[1]：选取第一个 li 节点；</li><li>li[last()]：选取最后一个 li 节点；</li><li>position()&lt;3：选取位置小于 3 的 li 节点；</li><li>li[last()-2]：选取倒数第三个 li 节点</li></ul><p>输出结果：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[<span class="string">'first item'</span>]</span><br><span class="line">[<span class="string">'fifth item'</span>]</span><br><span class="line">[<span class="string">'first item'</span>, <span class="string">'second item'</span>]</span><br><span class="line">[<span class="string">'third item'</span>]</span><br></pre></td></tr></table></figure></p><h1 id="【7-12】节点轴选择"><a href="#【7-12】节点轴选择" class="headerlink" title="【7.12】节点轴选择"></a><font color="#ff0000">【7.12】节点轴选择</font></h1><p>节点轴选择：获取子元素、兄弟元素、父元素、祖先元素等<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> lxml <span class="keyword">import</span> etree</span><br><span class="line"></span><br><span class="line">text = <span class="string">'''</span></span><br><span class="line"><span class="string">&lt;div&gt;</span></span><br><span class="line"><span class="string">    &lt;ul&gt;</span></span><br><span class="line"><span class="string">         &lt;li class="item-0"&gt;&lt;a href="link1.html"&gt;&lt;span&gt;first item&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;</span></span><br><span class="line"><span class="string">         &lt;li class="item-1"&gt;&lt;a href="link2.html"&gt;second item&lt;/a&gt;&lt;/li&gt;</span></span><br><span class="line"><span class="string">         &lt;li class="item-inactive"&gt;&lt;a href="link3.html"&gt;third item&lt;/a&gt;&lt;/li&gt;</span></span><br><span class="line"><span class="string">         &lt;li class="item-1"&gt;&lt;a href="link4.html"&gt;fourth item&lt;/a&gt;&lt;/li&gt;</span></span><br><span class="line"><span class="string">         &lt;li class="item-0"&gt;&lt;a href="link5.html"&gt;fifth item&lt;/a&gt;</span></span><br><span class="line"><span class="string">     &lt;/ul&gt;</span></span><br><span class="line"><span class="string"> &lt;/div&gt;</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line">html = etree.HTML(text)</span><br><span class="line">result = html.xpath(<span class="string">'//li[1]/ancestor::*'</span>)</span><br><span class="line">print(result)</span><br><span class="line">result = html.xpath(<span class="string">'//li[1]/ancestor::div'</span>)</span><br><span class="line">print(result)</span><br><span class="line">result = html.xpath(<span class="string">'//li[1]/attribute::*'</span>)</span><br><span class="line">print(result)</span><br><span class="line">result = html.xpath(<span class="string">'//li[1]/child::a[@href="link1.html"]'</span>)</span><br><span class="line">print(result)</span><br><span class="line">result = html.xpath(<span class="string">'//li[1]/descendant::span'</span>)</span><br><span class="line">print(result)</span><br><span class="line">result = html.xpath(<span class="string">'//li[1]/following::*[2]'</span>)</span><br><span class="line">print(result)</span><br><span class="line">result = html.xpath(<span class="string">'//li[1]/following-sibling::*'</span>)</span><br><span class="line">print(result)</span><br></pre></td></tr></table></figure></p><p>输出结果：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[&lt;Element html at <span class="number">0x1d3749e9548</span>&gt;, &lt;Element body at <span class="number">0x1d3749e94c8</span>&gt;, &lt;Element div at <span class="number">0x1d3749e9488</span>&gt;, &lt;Element ul at <span class="number">0x1d3749e9588</span>&gt;]</span><br><span class="line">[&lt;Element div at <span class="number">0x1d3749e9488</span>&gt;]</span><br><span class="line">[<span class="string">'item-0'</span>]</span><br><span class="line">[&lt;Element a at <span class="number">0x1d3749e9588</span>&gt;]</span><br><span class="line">[&lt;Element span at <span class="number">0x1d3749e9488</span>&gt;]</span><br><span class="line">[&lt;Element a at <span class="number">0x1d3749e9588</span>&gt;]</span><br><span class="line">[&lt;Element li at <span class="number">0x1d3749e94c8</span>&gt;, &lt;Element li at <span class="number">0x1d3749e95c8</span>&gt;, &lt;Element li at <span class="number">0x1d3749e9608</span>&gt;, &lt;Element li at <span class="number">0x1d3749e9648</span>&gt;]</span><br></pre></td></tr></table></figure></p><p>基本语法：轴名称::节点测试[谓语]</p><p>轴名称对应的结果：</p><table><thead><tr><th>轴名称</th><th>结果</th></tr></thead><tbody><tr><td>ancestor</td><td>选取当前节点的所有先辈（父、祖父等）</td></tr><tr><td>ancestor-or-self</td><td>选取当前节点的所有先辈（父、祖父等）以及当前节点本身</td></tr><tr><td>attribute</td><td>选取当前节点的所有属性</td></tr><tr><td>child</td><td>选取当前节点的所有子元素</td></tr><tr><td>descendant</td><td>选取当前节点的所有后代元素（子、孙等）</td></tr><tr><td>descendant-or-self</td><td>选取当前节点的所有后代元素（子、孙等）以及当前节点本身</td></tr><tr><td>following</td><td>选取文档中当前节点的结束标签之后的所有节点</td></tr><tr><td>namespace</td><td>选取当前节点的所有命名空间节点</td></tr><tr><td>parent</td><td>选取当前节点的父节点</td></tr><tr><td>preceding</td><td>选取文档中当前节点的开始标签之前的所有节点</td></tr><tr><td>preceding-sibling</td><td>选取当前节点之前的所有同级节点</td></tr><tr><td>self</td><td>选取当前节点</td></tr></tbody></table><p>实例：</p><table><thead><tr><th>例子</th><th>结果</th></tr></thead><tbody><tr><td>child::book</td><td>选取所有属于当前节点的子元素的 book 节点</td></tr><tr><td>attribute::lang</td><td>选取当前节点的 lang 属性</td></tr><tr><td>child::*</td><td>选取当前节点的所有子元素</td></tr><tr><td>attribute::*</td><td>选取当前节点的所有属性</td></tr><tr><td>child::text()</td><td>选取当前节点的所有文本子节点</td></tr><tr><td>child::node()</td><td>选取当前节点的所有子节点</td></tr><tr><td>descendant::book</td><td>选取当前节点的所有 book 后代</td></tr><tr><td>ancestor::book</td><td>选择当前节点的所有 book 先辈</td></tr><tr><td>ancestor-or-self::book</td><td>选取当前节点的所有 book 先辈以及当前节点（如果此节点是 book 节点）</td></tr><tr><td>child::*/child::price</td><td>选取当前节点的所有 price 孙节点</td></tr></tbody></table>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;center&gt;&lt;font color=&quot;#1BC3FB&quot; size=&quot;4&quot;&gt;Python3 爬虫学习笔记第七章 —— 【解析库 lxml】&lt;/font&gt;&lt;/center&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="Python3 学习笔记" scheme="https://www.itrhx.com/categories/Python3-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
      <category term="爬虫学习" scheme="https://www.itrhx.com/categories/Python3-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E7%88%AC%E8%99%AB%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="爬虫" scheme="https://www.itrhx.com/tags/%E7%88%AC%E8%99%AB/"/>
    
      <category term="lxml" scheme="https://www.itrhx.com/tags/lxml/"/>
    
      <category term="XPath" scheme="https://www.itrhx.com/tags/XPath/"/>
    
  </entry>
  
  <entry>
    <title>Python3 爬虫学习笔记 C06</title>
    <link href="https://www.itrhx.com/2019/08/24/A36-Python3-spider-C06/"/>
    <id>https://www.itrhx.com/2019/08/24/A36-Python3-spider-C06/</id>
    <published>2019-08-24T10:37:05.278Z</published>
    <updated>2019-09-24T12:40:18.770Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><blockquote><center><font color="#1BC3FB" size="4">Python3 爬虫学习笔记第六章 —— 【正则表达式】</font></center></blockquote><a id="more"></a><h1 id="【6-1】关于正则表达式"><a href="#【6-1】关于正则表达式" class="headerlink" title="【6.1】关于正则表达式"></a><font color="#ff0000">【6.1】关于正则表达式</font></h1><p>正则表达式是对字符串操作的一种逻辑公式，用定义好的特定字符和这些特定字符的组合组成一个规则字符串，这个规则字符串原来表达对字符串的一种过滤逻辑，从而实现字符串的检索、替换、匹配验证等。Python 的 re 库提供了整个正则表达式的实现，包含五种方法：<font color="#ff0000">match、search、findall、sub、compile</font><br>常用的匹配规则：</p><table><thead><tr><th>模式</th><th>描述</th></tr></thead><tbody><tr><td>\w</td><td>匹配字母、数字及下划线</td></tr><tr><td>\W</td><td>匹配不是字母、数字及下划线的字符</td></tr><tr><td>\s</td><td>匹配任意空白字符，等价于 [\t\n\r\f]</td></tr><tr><td>\S</td><td>匹配任意非空字符</td></tr><tr><td>\d</td><td>匹配任意数字，等价于 [0-9]</td></tr><tr><td>\D</td><td>匹配任意非数字的字符</td></tr><tr><td>\A</td><td>匹配字符串开头</td></tr><tr><td>\z</td><td>匹配字符串结尾，如果存在换行，同时还会匹配换行符</td></tr><tr><td>\Z</td><td>匹配字符串结尾，如果存在换行，只匹配到换行前的结束字符串</td></tr><tr><td>\G</td><td>匹配最后匹配完成的位置</td></tr><tr><td>\n</td><td>匹配一个换行符</td></tr><tr><td>\t</td><td>匹配一个制表符</td></tr><tr><td>^</td><td>匹配一行字符串的开头</td></tr><tr><td>$</td><td>匹配一行字符串的结尾</td></tr><tr><td>.</td><td>匹配任意字符，除了换行符，当 re.DOTALL 标记被指定时，则可以匹配包括换行符的任意字符</td></tr><tr><td>[…]</td><td>用来表示一组字符，单独列出，比如 [amk] 匹配 a、m 或 k</td></tr><tr><td>[^…]</td><td>不在 [] 中的字符，比如  匹配除了 a、b、c 之外的字符</td></tr><tr><td>*</td><td>匹配 0 个或多个表达式</td></tr><tr><td>+</td><td>匹配 1 个或多个表达式</td></tr><tr><td>?</td><td>匹配 0 个或 1 个前面的正则表达式定义的片段，非贪婪方式</td></tr><tr><td>{n}</td><td>精确匹配 n 个前面的表达式</td></tr><tr><td>{n, m}</td><td>匹配 n 到 m 次由前面正则表达式定义的片段，贪婪方式</td></tr><tr><td>a\</td><td>b</td><td>匹配 a 或 b</td></tr><tr><td>( )</td><td>匹配括号内的表达式，也表示一个组</td></tr></tbody></table><h1 id="【6-2】re-match-方法"><a href="#【6-2】re-match-方法" class="headerlink" title="【6.2】re.match 方法"></a><font color="#ff0000">【6.2】re.match 方法</font></h1><p>match() 方法会尝试从字符串的起始位置匹配正则表达式，如果匹配，就返回匹配成功的结果；如果不匹配，就返回 None，在 match() 方法中，第一个参数传入正则表达式，第二个参数传入要匹配的字符串。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line">content = <span class="string">'This is a Demo_123 4567_I Love China'</span></span><br><span class="line">print(len(content))</span><br><span class="line">result = re.match(<span class="string">'^This\s\w\w\s\w\s\w&#123;5&#125;\d&#123;3&#125;\s\w&#123;6&#125;'</span>, content)</span><br><span class="line">print(result)</span><br><span class="line">print(result.group())</span><br><span class="line">print(result.span())</span><br></pre></td></tr></table></figure></p><p>输出结果：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">36</span></span><br><span class="line">&lt;_sre.SRE_Match object; span=(<span class="number">0</span>, <span class="number">25</span>), match=<span class="string">'This is a Demo_123 4567_I'</span>&gt;</span><br><span class="line">This <span class="keyword">is</span> a Demo_123 <span class="number">4567</span>_I</span><br><span class="line">(<span class="number">0</span>, <span class="number">25</span>)</span><br></pre></td></tr></table></figure></p><p>打印 result 结果是 SRE_Match 对象，表明匹配成功。SRE_Match 对象有两种方法：<font color="#ff0000">group()</font> 方法可以输出匹配到的内容；<font color="#ff0000">span()</font> 方法可以输出匹配的范围。</p><h2 id="【6-2-1】提取内容"><a href="#【6-2-1】提取内容" class="headerlink" title="【6.2.1】提取内容"></a><font color="#ff0000">【6.2.1】提取内容</font></h2><p>使用括号将想提取的子字符串括起来。括号实际上标记了一个子表达式的开始和结束位置，被标记的每个子表达式会依次对应每一个分组，调用 <font color="#ff0000">group()</font> 方法传入分组的索引即可获取提取的结果。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line">content = <span class="string">'This is a Demo_123 4567_I Love China'</span></span><br><span class="line">result = re.match(<span class="string">'^This\s\w\w\s\w\s(\w&#123;5&#125;)\d&#123;3&#125;\s\w&#123;6&#125;'</span>, content)</span><br><span class="line">print(result)</span><br><span class="line">print(result.group())</span><br><span class="line">print(result.group(<span class="number">1</span>))</span><br><span class="line">print(result.span())</span><br></pre></td></tr></table></figure></p><p>输出结果：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;_sre.SRE_Match object; span=(<span class="number">0</span>, <span class="number">25</span>), match=<span class="string">'This is a Demo_123 4567_I'</span>&gt;</span><br><span class="line">This <span class="keyword">is</span> a Demo_123 <span class="number">4567</span>_I</span><br><span class="line">Demo_</span><br><span class="line">(<span class="number">0</span>, <span class="number">25</span>)</span><br></pre></td></tr></table></figure></p><h2 id="【6-2-2】通用匹配"><a href="#【6-2-2】通用匹配" class="headerlink" title="【6.2.2】通用匹配"></a><font color="#ff0000">【6.2.2】通用匹配</font></h2><p>如果每个字符都用都用一个符号来匹配的话就显得比较麻烦，可以用 <code>.*</code>来匹配，<code>.</code> 可以匹配除换行符外的任意字符，<code>*</code> 代表匹配前面的字符无限次。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line">content = <span class="string">'This is a Demo_123 4567_I Love China'</span></span><br><span class="line">result = re.match(<span class="string">'^This.*China$'</span>, content)</span><br><span class="line">print(result)</span><br><span class="line">print(result.group())</span><br><span class="line">print(result.span())</span><br></pre></td></tr></table></figure></p><p>输出结果：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;_sre.SRE_Match object; span=(<span class="number">0</span>, <span class="number">36</span>), match=<span class="string">'This is a Demo_123 4567_I Love China'</span>&gt;</span><br><span class="line">This <span class="keyword">is</span> a Demo_123 <span class="number">4567</span>_I Love China</span><br><span class="line">(<span class="number">0</span>, <span class="number">36</span>)</span><br></pre></td></tr></table></figure></p><h2 id="【6-2-3】贪婪匹配"><a href="#【6-2-3】贪婪匹配" class="headerlink" title="【6.2.3】贪婪匹配"></a><font color="#ff0000">【6.2.3】贪婪匹配</font></h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line">content = <span class="string">'This is a Demo_1234567_I Love China'</span></span><br><span class="line">result = re.match(<span class="string">'^This.*(\d+).*China$'</span>, content)</span><br><span class="line">print(result)</span><br><span class="line">print(result.group())</span><br><span class="line">print(result.group(<span class="number">1</span>))</span><br><span class="line">print(result.span())</span><br></pre></td></tr></table></figure><p>输出结果：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;_sre.SRE_Match object; span=(<span class="number">0</span>, <span class="number">35</span>), match=<span class="string">'This is a Demo_1234567_I Love China'</span>&gt;</span><br><span class="line">This <span class="keyword">is</span> a Demo_1234567_I Love China</span><br><span class="line"><span class="number">7</span></span><br><span class="line">(<span class="number">0</span>, <span class="number">35</span>)</span><br></pre></td></tr></table></figure></p><font color="#ff0000"><code>.*</code> 为贪婪匹配，会匹配尽可能多的字符，所以 \d+ 只会匹配到最后一个数字，而不是所有的数字</font><h2 id="【6-2-4】非贪婪匹配"><a href="#【6-2-4】非贪婪匹配" class="headerlink" title="【6.2.4】非贪婪匹配"></a><font color="#ff0000">【6.2.4】非贪婪匹配</font></h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line">content = <span class="string">'This is a Demo_1234567_I Love China'</span></span><br><span class="line">result = re.match(<span class="string">'^This.*?(\d+).*China$'</span>, content)</span><br><span class="line">print(result)</span><br><span class="line">print(result.group())</span><br><span class="line">print(result.group(<span class="number">1</span>))</span><br><span class="line">print(result.span())</span><br></pre></td></tr></table></figure><p>输出结果：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;_sre.SRE_Match object; span=(<span class="number">0</span>, <span class="number">35</span>), match=<span class="string">'This is a Demo_1234567_I Love China'</span>&gt;</span><br><span class="line">This <span class="keyword">is</span> a Demo_1234567_I Love China</span><br><span class="line"><span class="number">1234567</span></span><br><span class="line">(<span class="number">0</span>, <span class="number">35</span>)</span><br></pre></td></tr></table></figure></p><font color="#ff0000"><code>.*?</code> 为非贪婪匹配，会匹配尽可能少的字符，所以 \d+ 会匹配到所有的数字</font><h2 id="【6-2-5】转义匹配"><a href="#【6-2-5】转义匹配" class="headerlink" title="【6.2.5】转义匹配"></a><font color="#ff0000">【6.2.5】转义匹配</font></h2><p>当遇到用于正则匹配模式的特殊字符时，在前面加反斜线转义一下即可。例如 <code>.</code> 可以用 <code>\.</code> 来匹配：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line">content = <span class="string">'(博客)www.itrhx.com'</span></span><br><span class="line">result = re.match(<span class="string">'\(博客\)www\.itrhx\.com'</span>, content)</span><br><span class="line">print(result)</span><br><span class="line">print(result.group())</span><br></pre></td></tr></table></figure></p><p>输出结果：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;_sre.SRE_Match object; span=(<span class="number">0</span>, <span class="number">17</span>), match=<span class="string">'(博客)www.itrhx.com'</span>&gt;</span><br><span class="line">(博客)www.itrhx.com</span><br></pre></td></tr></table></figure></p><h2 id="【6-2-6】修饰符"><a href="#【6-2-6】修饰符" class="headerlink" title="【6.2.6】修饰符"></a><font color="#ff0000">【6.2.6】修饰符</font></h2><p>修饰符用来解决换行、大小写等问题，较为常用的有 re.S 和 re.I。</p><table><thead><tr><th style="text-align:center">修饰符</th><th style="text-align:center">描述</th></tr></thead><tbody><tr><td style="text-align:center">re.S</td><td style="text-align:center">使 <code>.</code> 匹配包括换行在内的所有字符</td></tr><tr><td style="text-align:center">re.I</td><td style="text-align:center">使匹配对大小写不敏感</td></tr><tr><td style="text-align:center">re.L</td><td style="text-align:center">做本地化识别（locale-aware）匹配</td></tr><tr><td style="text-align:center">re.M</td><td style="text-align:center">多行匹配，影响 <code>^</code> 和 <code>$</code></td></tr><tr><td style="text-align:center">re.U</td><td style="text-align:center">根据 Unicode 字符集解析字符。这个标志影响 <code>\w</code>、<code>\W</code>、<code>\b</code> 和 <code>\B</code></td></tr><tr><td style="text-align:center">re.X</td><td style="text-align:center">该标志通过给予你更灵活的格式以便你将正则表达式写得更易于理解</td></tr></tbody></table><p>示例：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line">content = <span class="string">'''This is a Demo_1234567</span></span><br><span class="line"><span class="string">          _I Love China'''</span></span><br><span class="line">result = re.match(<span class="string">'^This.*?(\d+).*China$'</span>, content)</span><br><span class="line">print(result)</span><br><span class="line">print(result.group())</span><br><span class="line">print(result.group(<span class="number">1</span>))</span><br><span class="line">print(result.span())</span><br></pre></td></tr></table></figure></p><p>示例中 content 字段进行了换行处理，如果没有修饰符，就会报错：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Traceback (most recent call last):</span><br><span class="line"><span class="keyword">None</span></span><br><span class="line">  File <span class="string">"F:/PycharmProjects/Python3爬虫/test.py"</span>, line <span class="number">7</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">    print(result.group())</span><br><span class="line">AttributeError: <span class="string">'NoneType'</span> object has no attribute <span class="string">'group'</span></span><br></pre></td></tr></table></figure></p><p>添加 re.S 修饰符后即可匹配成功：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line">content = <span class="string">'''This is a Demo_1234567</span></span><br><span class="line"><span class="string">          _I Love China'''</span></span><br><span class="line">result = re.match(<span class="string">'^This.*?(\d+).*China$'</span>, content, re.S)</span><br><span class="line">print(result)</span><br><span class="line">print(result.group())</span><br><span class="line">print(result.group(<span class="number">1</span>))</span><br><span class="line">print(result.span())</span><br></pre></td></tr></table></figure></p><p>输出结果：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;_sre.SRE_Match object; span=(<span class="number">0</span>, <span class="number">46</span>), match=<span class="string">'This is a Demo_1234567\n          _I Love China'</span>&gt;</span><br><span class="line">This <span class="keyword">is</span> a Demo_1234567</span><br><span class="line">          _I Love China</span><br><span class="line"><span class="number">1234567</span></span><br><span class="line">(<span class="number">0</span>, <span class="number">46</span>)</span><br></pre></td></tr></table></figure></p><h1 id="【6-3】re-search-方法"><a href="#【6-3】re-search-方法" class="headerlink" title="【6.3】re.search 方法"></a><font color="#ff0000">【6.3】re.search 方法</font></h1><p>match() 方法只能从字符串的开头开始匹配，一旦开头不匹配，那么整个匹配就失败了，match() 方法更适合用来检测某个字符串是否符合某个正则表达式的规则，而 search() 方法则会扫描整个字符串并返回第一个成功的匹配<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line">content = <span class="string">'This is a Demo_1234567_I Love China'</span></span><br><span class="line">result = re.search(<span class="string">'a.*?(\d&#123;5&#125;)'</span>, content)</span><br><span class="line">print(result)</span><br><span class="line">print(result.group(<span class="number">1</span>))</span><br></pre></td></tr></table></figure></p><p>输出结果：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;_sre.SRE_Match object; span=(<span class="number">8</span>, <span class="number">20</span>), match=<span class="string">'a Demo_12345'</span>&gt;</span><br><span class="line"><span class="number">12345</span></span><br></pre></td></tr></table></figure></p><h1 id="【6-4】re-findall-方法"><a href="#【6-4】re-findall-方法" class="headerlink" title="【6.4】re.findall 方法"></a><font color="#ff0000">【6.4】re.findall 方法</font></h1><p>search() 方法则会扫描整个字符串，但是返回的是第一个成功的匹配，而 findall() 方法将会返回所有成功的匹配<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line">html = <span class="string">'''&lt;div id="songs-list"&gt;</span></span><br><span class="line"><span class="string">        &lt;h2 class="title"&gt; 民谣 &lt;/h2&gt;</span></span><br><span class="line"><span class="string">        &lt;p class="introduction"&gt;</span></span><br><span class="line"><span class="string">        民谣歌曲列表</span></span><br><span class="line"><span class="string">        &lt;/p&gt;</span></span><br><span class="line"><span class="string">        &lt;ul id="list" class="list-group"&gt;</span></span><br><span class="line"><span class="string">        &lt;li data-view="2"&gt; 七里香 &lt;/li&gt;</span></span><br><span class="line"><span class="string">        &lt;li data-view="7"&gt;</span></span><br><span class="line"><span class="string">        &lt;a href="/2.mp3" singer="赵雷"&gt; 理想 &lt;/a&gt;</span></span><br><span class="line"><span class="string">        &lt;/li&gt;</span></span><br><span class="line"><span class="string">        &lt;li data-view="4" class="active"&gt;</span></span><br><span class="line"><span class="string">        &lt;a href="/3.mp3" singer="许巍"&gt; 像风一样自由 &lt;/a&gt;</span></span><br><span class="line"><span class="string">        &lt;/li&gt;</span></span><br><span class="line"><span class="string">        &lt;li data-view="6"&gt;&lt;a href="/4.mp3" singer="安与骑兵"&gt; 红山果 &lt;/a&gt;&lt;/li&gt;</span></span><br><span class="line"><span class="string">        &lt;li data-view="5"&gt;&lt;a href="/5.mp3" singer="薛之谦"&gt; 意外 &lt;/a&gt;&lt;/li&gt;</span></span><br><span class="line"><span class="string">        &lt;li data-view="5"&gt;</span></span><br><span class="line"><span class="string">        &lt;a href="/6.mp3" singer="马頔"&gt; 但南山南 &lt;/a&gt;</span></span><br><span class="line"><span class="string">        &lt;/li&gt;</span></span><br><span class="line"><span class="string">        &lt;/ul&gt;</span></span><br><span class="line"><span class="string">        &lt;/div&gt;'''</span></span><br><span class="line">results = re.findall(<span class="string">'&lt;li.*?href="(.*?)".*?singer="(.*?)"&gt;(.*?)&lt;/a&gt;'</span>, html, re.S)</span><br><span class="line">print(results)</span><br><span class="line">print(type(results))</span><br><span class="line"><span class="keyword">for</span> result <span class="keyword">in</span> results:</span><br><span class="line">    print(result)</span><br><span class="line">    print(result[<span class="number">0</span>], result[<span class="number">1</span>], result[<span class="number">2</span>])</span><br></pre></td></tr></table></figure></p><p>输出结果：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">[(<span class="string">'/2.mp3'</span>, <span class="string">'赵雷'</span>, <span class="string">' 理想 '</span>), (<span class="string">'/3.mp3'</span>, <span class="string">'许巍'</span>, <span class="string">' 像风一样自由 '</span>), (<span class="string">'/4.mp3'</span>, <span class="string">'安与骑兵'</span>, <span class="string">' 红山果 '</span>), (<span class="string">'/5.mp3'</span>, <span class="string">'薛之谦'</span>, <span class="string">' 意外 '</span>), (<span class="string">'/6.mp3'</span>, <span class="string">'马頔'</span>, <span class="string">' 但南山南 '</span>)]</span><br><span class="line">&lt;<span class="class"><span class="keyword">class</span> '<span class="title">list</span>'&gt;</span></span><br><span class="line"><span class="class"><span class="params">(<span class="string">'/2.mp3'</span>, <span class="string">'赵雷'</span>, <span class="string">' 理想 '</span>)</span></span></span><br><span class="line"><span class="class">/2.<span class="title">mp3</span> 赵雷  理想 </span></span><br><span class="line"><span class="class"><span class="params">(<span class="string">'/3.mp3'</span>, <span class="string">'许巍'</span>, <span class="string">' 像风一样自由 '</span>)</span></span></span><br><span class="line"><span class="class">/3.<span class="title">mp3</span> 许巍  像风一样自由 </span></span><br><span class="line"><span class="class"><span class="params">(<span class="string">'/4.mp3'</span>, <span class="string">'安与骑兵'</span>, <span class="string">' 红山果 '</span>)</span></span></span><br><span class="line"><span class="class">/4.<span class="title">mp3</span> 安与骑兵  红山果 </span></span><br><span class="line"><span class="class"><span class="params">(<span class="string">'/5.mp3'</span>, <span class="string">'薛之谦'</span>, <span class="string">' 意外 '</span>)</span></span></span><br><span class="line"><span class="class">/5.<span class="title">mp3</span> 薛之谦  意外 </span></span><br><span class="line"><span class="class"><span class="params">(<span class="string">'/6.mp3'</span>, <span class="string">'马頔'</span>, <span class="string">' 但南山南 '</span>)</span></span></span><br><span class="line"><span class="class">/6.<span class="title">mp3</span> 马頔  但南山南</span></span><br></pre></td></tr></table></figure></p><h1 id="【6-5】re-sub-方法"><a href="#【6-5】re-sub-方法" class="headerlink" title="【6.5】re.sub 方法"></a><font color="#ff0000">【6.5】re.sub 方法</font></h1><p>与字符串的 replace() 方法类似，sub() 方法可以对文本进行修改，sub() 方法第一个参数为匹配对象，第二个参数为替换成的字符串，如果要去掉匹配对象的话，可以赋值为空，第三个参数为原来的字符串<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line">content = <span class="string">'87dsf4as2w4jh1k4kdl4'</span></span><br><span class="line">result = re.sub(<span class="string">'\d+'</span>, <span class="string">''</span>, content)</span><br><span class="line">print(result)</span><br></pre></td></tr></table></figure></p><p>输出结果：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dsfaswjhkkdl</span><br></pre></td></tr></table></figure></p><h1 id="【6-5】re-compile-方法"><a href="#【6-5】re-compile-方法" class="headerlink" title="【6.5】re.compile() 方法"></a><font color="#ff0000">【6.5】re.compile() 方法</font></h1><p>compile() 方法可以将正则字符串编译成正则表达式对象，以便在后面的匹配中复用<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line">content1 = <span class="string">'北京时间：2019-08-24 18:30'</span></span><br><span class="line">content2 = <span class="string">'伦敦时间：2019-08-24 11:30'</span></span><br><span class="line">content3 = <span class="string">'巴黎时间：2019-08-24 12:30'</span></span><br><span class="line">content4 = <span class="string">'外星时间：9019-99-66 50:30'</span></span><br><span class="line">pattern = re.compile(<span class="string">'\d&#123;2&#125;:\d&#123;2&#125;'</span>)</span><br><span class="line">result1 = re.sub(pattern, <span class="string">''</span>, content1)</span><br><span class="line">result2 = re.sub(pattern, <span class="string">''</span>, content2)</span><br><span class="line">result3 = re.sub(pattern, <span class="string">''</span>, content3)</span><br><span class="line">result4 = re.sub(pattern, <span class="string">''</span>, content4)</span><br><span class="line">print(result1, result2, result3, result4)</span><br></pre></td></tr></table></figure></p><p>利用 compile() 方法将正则表达式编译成一个正则表达式对象，以便复用，然后用 sub() 方法去掉具体时间<br>输出结果：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">北京时间：<span class="number">2019</span><span class="number">-08</span><span class="number">-24</span>  伦敦时间：<span class="number">2019</span><span class="number">-08</span><span class="number">-24</span>  巴黎时间：<span class="number">2019</span><span class="number">-08</span><span class="number">-24</span>  外星时间：<span class="number">9019</span><span class="number">-99</span><span class="number">-66</span></span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;center&gt;&lt;font color=&quot;#1BC3FB&quot; size=&quot;4&quot;&gt;Python3 爬虫学习笔记第六章 —— 【正则表达式】&lt;/font&gt;&lt;/center&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="Python3 学习笔记" scheme="https://www.itrhx.com/categories/Python3-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
      <category term="爬虫学习" scheme="https://www.itrhx.com/categories/Python3-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E7%88%AC%E8%99%AB%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="爬虫" scheme="https://www.itrhx.com/tags/%E7%88%AC%E8%99%AB/"/>
    
      <category term="正则表达式" scheme="https://www.itrhx.com/tags/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>Python3 爬虫学习笔记 C05</title>
    <link href="https://www.itrhx.com/2019/08/23/A35-Python3-spider-C05/"/>
    <id>https://www.itrhx.com/2019/08/23/A35-Python3-spider-C05/</id>
    <published>2019-08-23T12:13:55.085Z</published>
    <updated>2019-09-24T12:40:15.920Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><blockquote><center><font color="#1BC3FB" size="4">Python3 爬虫学习笔记第五章 —— 【Selenium + 无界面浏览器】</font></center></blockquote><a id="more"></a><h1 id="【5-1】关于无界面浏览器"><a href="#【5-1】关于无界面浏览器" class="headerlink" title="【5.1】关于无界面浏览器"></a><font color="#ff0000">【5.1】关于无界面浏览器</font></h1><p>无界面（headless）浏览器，会把网站加载到内存并执行页面上的 JavaScript，因为不会展示图形界面，所以运行起来比完整的浏览器更高效。Selenium 搭配无界面浏览器使用，被称为爬虫利器，常用的无界面浏览器有：PhantomJS、Headless Chrome、Headless Firefox，其中，18年3月，PhantomJS 的作者在 GitHub 上宣布暂停开发 PhantomJS，现在使用 PhantomJS 会出现警告：<code>UserWarning: Selenium support for PhantomJS has been deprecated, please use headless versions of Chrome or Firefox instead</code>，所以推荐使用谷歌或者火狐的无界面浏览器</p><h1 id="【5-2】PhantomJS"><a href="#【5-2】PhantomJS" class="headerlink" title="【5.2】PhantomJS"></a><font color="#ff0000">【5.2】PhantomJS</font></h1><p>下载 PhantomJS：<a href="https://phantomjs.org/download.html" target="_blank" rel="noopener">https://phantomjs.org/download.html</a><br>path 为 PhantomJS 路径，如果系统配置了环境变量，就不用手动指定 executable_path 参数<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"></span><br><span class="line">path = <span class="string">r'F:\PycharmProjects\Python3爬虫\phantomjs-2.1.1\bin\phantomjs.exe'</span></span><br><span class="line">driver = webdriver.PhantomJS(executable_path=path)</span><br><span class="line">driver.get(<span class="string">"https://www.itrhx.com"</span>)</span><br><span class="line">print(driver.page_source)</span><br><span class="line">driver.close()</span><br></pre></td></tr></table></figure></p><h1 id="【5-3】Headless-Chrome"><a href="#【5-3】Headless-Chrome" class="headerlink" title="【5.3】Headless Chrome"></a><font color="#ff0000">【5.3】Headless Chrome</font></h1><p>下载 Chromedriver：<a href="http://chromedriver.storage.googleapis.com/index.html" target="_blank" rel="noopener">http://chromedriver.storage.googleapis.com/index.html</a><br>需要本地有 Chrome 浏览器，path 为 Headless Chrome 路径，如果系统配置了环境变量，就不用手动指定 executable_path 参数<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.chrome.options <span class="keyword">import</span> Options</span><br><span class="line"></span><br><span class="line">chrome_options = Options()</span><br><span class="line">chrome_options.add_argument(<span class="string">'--headless'</span>)</span><br><span class="line">chrome_options.add_argument(<span class="string">'--disable-gpu'</span>)</span><br><span class="line">path = <span class="string">'F:\PycharmProjects\Python3爬虫\chromedriver.exe'</span></span><br><span class="line">driver = webdriver.Chrome(executable_path=path, chrome_options=chrome_options)</span><br><span class="line">driver.get(<span class="string">"https://www.itrhx.com"</span>)</span><br><span class="line">print(driver.page_source)</span><br><span class="line">driver.close()</span><br></pre></td></tr></table></figure></p><h1 id="【5-4】Headless-Firefox"><a href="#【5-4】Headless-Firefox" class="headerlink" title="【5.4】Headless Firefox"></a><font color="#ff0000">【5.4】Headless Firefox</font></h1><p>下载 geckodriver：<a href="https://github.com/mozilla/geckodriver/releases/" target="_blank" rel="noopener">https://github.com/mozilla/geckodriver/releases/</a><br>需要本地有 Firefox 浏览器，path 为 Headless Firefox 路径，如果系统配置了环境变量，就不用手动指定 executable_path 参数<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium.webdriver <span class="keyword">import</span> Firefox</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.firefox.options <span class="keyword">import</span> Options</span><br><span class="line"></span><br><span class="line">options = Options()</span><br><span class="line">options.add_argument(<span class="string">'-headless'</span>)</span><br><span class="line">path = <span class="string">'F:\PycharmProjects\Python3爬虫\geckodriver.exe'</span></span><br><span class="line">driver = Firefox(executable_path=path, firefox_options=options)</span><br><span class="line">driver.get(<span class="string">"https://www.itrhx.com"</span>)</span><br><span class="line">print(driver.page_source)</span><br><span class="line">driver.close()</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;center&gt;&lt;font color=&quot;#1BC3FB&quot; size=&quot;4&quot;&gt;Python3 爬虫学习笔记第五章 —— 【Selenium + 无界面浏览器】&lt;/font&gt;&lt;/center&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="Python3 学习笔记" scheme="https://www.itrhx.com/categories/Python3-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
      <category term="爬虫学习" scheme="https://www.itrhx.com/categories/Python3-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E7%88%AC%E8%99%AB%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="爬虫" scheme="https://www.itrhx.com/tags/%E7%88%AC%E8%99%AB/"/>
    
      <category term="Selenium" scheme="https://www.itrhx.com/tags/Selenium/"/>
    
      <category term="无界面浏览器" scheme="https://www.itrhx.com/tags/%E6%97%A0%E7%95%8C%E9%9D%A2%E6%B5%8F%E8%A7%88%E5%99%A8/"/>
    
  </entry>
  
  <entry>
    <title>常见 User-Agent 大全</title>
    <link href="https://www.itrhx.com/2019/08/23/A34-UserAgent/"/>
    <id>https://www.itrhx.com/2019/08/23/A34-UserAgent/</id>
    <published>2019-08-23T01:28:22.624Z</published>
    <updated>2019-09-24T12:47:21.096Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>User Agent 中文名为用户代理，简称 UA，是一个特殊字符串头，使得服务器能够识别客户使用的操作系统及版本、CPU 类型、浏览器及版本、浏览器渲染引擎、浏览器语言、浏览器插件等。Python 爬虫通过伪装 UA 可以绕过某些检测。</p><p>以下为搜集的常见的各浏览器的 User-Agent，其中：</p><ul><li>安卓操作系统：Android 7.1.1；OPPO R9sk Build/NMF26F</li><li>PC操作系统：Windows 10 64位 10.0.18362.10000</li><li>其他操作系统：iOS、Backerry、WebOS、Symbian、Windows Phone</li></ul><p>相关链接：</p><ul><li>手机User-Agent大全：<a href="http://www.fynas.com/ua" target="_blank" rel="noopener">http://www.fynas.com/ua</a></li><li>User-Agent在线检测：<a href="http://www.user-agent.cn/" target="_blank" rel="noopener">http://www.user-agent.cn/</a></li><li><p>常用User-Agent大全：<a href="http://www.jsons.cn/useragent/" target="_blank" rel="noopener">http://www.jsons.cn/useragent/</a></p><h1 id="Windows10"><a href="#Windows10" class="headerlink" title="Windows10"></a><font color="#ff0000">Windows10</font></h1></li><li><p><font color="#ff0000">Windows10 / Chrome 75.0.3770.142</font><br>Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/75.0.3770.142 Safari/537.36</p></li><li><p><font color="#ff0000">Windows10 / Firefox 69.0b15</font><br>Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:69.0) Gecko/20100101 Firefox/69.0</p></li><li><p><font color="#ff0000">Windows10 / Opera 63.0.3368.43</font><br>Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/76.0.3809.100 Safari/537.36 OPR/63.0.3368.43</p></li><li><p><font color="#ff0000">Windows10 / Edge 44.18362.1.0</font><br>User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/70.0.3538.102 Safari/537.36 Edge/18.18362</p></li><li><p><font color="#ff0000">Windows10 / IE 11.10000.18362.0</font><br>User-Agent: Mozilla/5.0 (Windows NT 10.0; WOW64; Trident/7.0; LCTE; rv:11.0) like Gecko</p></li><li><p><font color="#ff0000">Windows10 x64 / Safari 5.1.4（7534.54.16）</font><br>Mozilla/5.0 (Windows NT 6.2; WOW64) AppleWebKit/534.54.16 (KHTML, like Gecko) Version/5.1.4 Safari/534.54.16</p></li><li><p><font color="#ff0000">Windows10 / QQ浏览器 10.5（3739）</font><br>Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/70.0.3538.25 Safari/537.36 Core/1.70.3722.400 QQBrowser/10.5.3739.400</p></li><li><p><font color="#ff0000">Windows10 / 360安全浏览器 10.0.1977.0</font><br>Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/63.0.3239.132 Safari/537.36 QIHU 360SE</p></li><li><p><font color="#ff0000">Windows10 / 360极速浏览器 11.0.2179.0</font><br>Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/69.0.3497.100 Safari/537.36 QIHU 360EE</p></li><li><p><font color="#ff0000">Windows10 / UC浏览器 6.2.3964.2</font><br>Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/55.0.2883.87 UBrowser/6.2.3964.2 Safari/537.36</p></li><li><p><font color="#ff0000">Windows10 / 搜狗浏览器 8.5.10.31270</font><br>Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/58.0.3029.110 Safari/537.36 SE 2.X MetaSr 1.0</p></li><li><p><font color="#ff0000">Windows10 / 猎豹浏览器 6.5.115.19331.8001</font><br>Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/57.0.2987.98 Safari/537.36 LBBROWSER</p></li><li><p><font color="#ff0000">Windows10 / 傲游浏览器 5.2.7.5000</font><br>Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/61.0.3163.79 Safari/537.36</p></li><li><p><font color="#ff0000">Windows10 / 2345加速浏览器 10.1.0.19399</font><br>Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/69.0.3947.100 Safari/537.36</p></li></ul><h1 id="Android"><a href="#Android" class="headerlink" title="Android"></a><font color="#ff0000">Android</font></h1><ul><li><p><font color="#ff0000">Android / Chrome 76.0.3809.111</font><br>Mozilla/5.0 (Linux; Android 7.1.1; OPPO R9sk) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/76.0.3809.111 Mobile Safari/537.36</p></li><li><p><font color="#ff0000">Android / Firefox 68.0.2</font><br>Mozilla/5.0 (Android 7.1.1; Mobile; rv:68.0) Gecko/68.0 Firefox/68.0</p></li><li><p><font color="#ff0000">Android / Opera 53.0.2569.141117</font><br>Mozilla/5.0 (Linux; Android 7.1.1; OPPO R9sk Build/NMF26F) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/74.0.3729.157 Mobile Safari/537.36 OPR/53.0.2569.141117</p></li><li><p><font color="#ff0000">Android / Edge 42.0.2.3819</font><br>Mozilla/5.0 (Linux; Android 7.1.1; OPPO R9sk) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/73.0.3683.90 Mobile Safari/537.36 EdgA/42.0.2.3819</p></li><li><p><font color="#ff0000">Android / QQ浏览器 9.6.1.5190</font><br>Mozilla/5.0 (Linux; U; Android 7.1.1; zh-cn; OPPO R9sk Build/NMF26F) AppleWebKit/537.36 (KHTML, like Gecko) Version/4.0 Chrome/66.0.3359.126 MQQBrowser/9.6 Mobile Safari/537.36</p></li><li><p><font color="#ff0000">Android / OPPO浏览器 10.5.1.2_2c91537</font><br>Mozilla/5.0 (Linux; U; Android 7.1.1; zh-cn; OPPO R9sk Build/NMF26F) AppleWebKit/537.36 (KHTML, like Gecko) Version/4.0 Chrome/70.0.3538.80 Mobile Safari/537.36 OppoBrowser/10.5.1.2</p></li><li><p><font color="#ff0000">Android / 360浏览器 8.2.0.162</font><br>Mozilla/5.0 (Linux; Android 7.1.1; OPPO R9sk Build/NMF26F; wv) AppleWebKit/537.36 (KHTML, like Gecko) Version/4.0 Chrome/62.0.3202.97 Mobile Safari/537.36</p></li><li><p><font color="#ff0000">Android / 360极速浏览器 1.0.100.1078</font><br>Mozilla/5.0 (Linux; Android 7.1.1; OPPO R9sk Build/NMF26F) AppleWebKit/537.36 (KHTML, like Gecko) Version/4.0 Chrome/70.0.3538.80 Mobile Safari/537.36 360 Alitephone Browser (1.5.0.90/1.0.100.1078) mso_sdk(1.0.0)</p></li><li><p><font color="#ff0000">Android / UC浏览器 12.6.0.1040</font><br>Mozilla/5.0 (Linux; U; Android 7.1.1; zh-CN; OPPO R9sk Build/NMF26F) AppleWebKit/537.36 (KHTML, like Gecko) Version/4.0 Chrome/57.0.2987.108 UCBrowser/12.6.0.1040 Mobile Safari/537.36</p></li><li><p><font color="#ff0000">Android / 猎豹浏览器 5.12.3</font><br>Mozilla/5.0 (Linux; Android 7.1.1; OPPO R9sk Build/NMF26F; wv) AppleWebKit/537.36 (KHTML, like Gecko) Version/4.0 Chrome/70.0.3538.80 Mobile Safari/537.36 LieBaoFast/5.12.3</p></li><li><p><font color="#ff0000">Android / 百度浏览器 7.19</font><br>Mozilla/5.0 (Linux; Android 7.1.1; OPPO R9sk Build/NMF26F; wv) AppleWebKit/537.36 (KHTML, like Gecko) Version/4.0 Chrome/48.0.2564.116 Mobile Safari/537.36 T7/9.1 baidubrowser/7.19.13.0 (Baidu; P1 7.1.1)</p></li><li><p><font color="#ff0000">Android / 搜狗浏览器 5.22.8.71677</font><br>Mozilla/5.0 (Linux; Android 7.1.1; OPPO R9sk Build/NMF26F; wv) AppleWebKit/537.36 (KHTML, like Gecko) Version/4.0 Chrome/68.0.3440.106 Mobile Safari/537.36 AWP/2.0 SogouMSE,SogouMobileBrowser/5.22.8</p></li><li><p><font color="#ff0000">Android / 2345浏览器 11.0.1</font><br>Mozilla/5.0 (Linux; Android 7.1.1; OPPO R9sk Build/NMF26F; wv) AppleWebKit/537.36 (KHTML, like Gecko) Version/4.0 Chrome/70.0.3538.80 Mobile Safari/537.36 Mb2345Browser/11.0.1</p></li></ul><h1 id="其他"><a href="#其他" class="headerlink" title="其他"></a><font color="#ff0000">其他</font></h1><ul><li><p><font color="#ff0000">iPhone3</font><br>Mozilla/5.0 (iPhone; U; CPU iPhone OS 3_0 like Mac OS X; en-us) AppleWebKit/420.1 (KHTML, like Gecko) Version/3.0 Mobile/1A542a Safari/419.3</p></li><li><p><font color="#ff0000">iPhone4</font><br>Mozilla/5.0 (iPhone; U; CPU iPhone OS 4_0 like Mac OS X; en-us) AppleWebKit/532.9 (KHTML, like Gecko) Version/4.0.5 Mobile/8A293 Safari/6531.22.7</p></li><li><p><font color="#ff0000">iPhone6s</font><br>Mozilla/5.0 (iPhone 6s; CPU iPhone OS 11_4_1 like Mac OS X) AppleWebKit/604.3.5 (KHTML, like Gecko) Version/11.0 MQQBrowser/8.3.0 Mobile/15B87 Safari/604.1 MttCustomUA/2 QBWebViewType/1 WKType/1</p></li><li><p><font color="#ff0000">iPad</font><br>Mozilla/5.0 (iPad; U; CPU OS 3_2 like Mac OS X; en-us) AppleWebKit/531.21.10 (KHTML, like Gecko) Version/4.0.4 Mobile/7B334b Safari/531.21.10</p></li><li><p><font color="#ff0000">iPod</font><br>Mozilla/5.0 (iPod; U; CPU iPhone OS 4_3_3 like Mac OS X; en-us) AppleWebKit/533.17.9 (KHTML, like Gecko) Version/5.0.2 Mobile/8J2 Safari/6533.18.5</p></li><li><p><font color="#ff0000">BlackBerry</font><br>Mozilla/5.0 (BlackBerry; U; BlackBerry 9800; en) AppleWebKit/534.1+ (KHTML, like Gecko) Version/6.0.0.337 Mobile Safari/534.1+</p></li><li><p><font color="#ff0000">WebOS HP Touchpad</font><br>Mozilla/5.0 (hp-tablet; Linux; hpwOS/3.0.0; U; en-US) AppleWebKit/534.6 (KHTML, like Gecko) wOSBrowser/233.70 Safari/534.6 TouchPad/1.0</p></li><li><p><font color="#ff0000">Nokia N97</font><br>Mozilla/5.0 (SymbianOS/9.4; Series60/5.0 NokiaN97-1/20.0.019; Profile/MIDP-2.1 Configuration/CLDC-1.1) AppleWebKit/525 (KHTML, like Gecko) BrowserNG/7.1.18124</p></li><li><p><font color="#ff0000">Windows Phone Mango</font><br>Mozilla/5.0 (compatible; MSIE 9.0; Windows Phone OS 7.5; Trident/5.0; IEMobile/9.0; HTC; Titan)</p></li></ul>]]></content>
    
    <summary type="html">
    
      常见 User-Agent 大全收集
    
    </summary>
    
      <category term="Python3 学习笔记" scheme="https://www.itrhx.com/categories/Python3-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
      <category term="学习经验" scheme="https://www.itrhx.com/categories/Python3-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%AD%A6%E4%B9%A0%E7%BB%8F%E9%AA%8C/"/>
    
    
      <category term="爬虫" scheme="https://www.itrhx.com/tags/%E7%88%AC%E8%99%AB/"/>
    
      <category term="User-Agent" scheme="https://www.itrhx.com/tags/User-Agent/"/>
    
  </entry>
  
</feed>
