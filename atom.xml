<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>TRHX&#39;S BLOG</title>
  
  <subtitle>求知若饥 虚心若愚</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://www.itrhx.com/"/>
  <updated>2019-09-13T17:19:42.612Z</updated>
  <id>https://www.itrhx.com/</id>
  
  <author>
    <name>TRHX&#39;BLOG</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Python3 爬虫学习笔记 C16</title>
    <link href="https://www.itrhx.com/2019/09/14/A46-Python3-spider-C16/"/>
    <id>https://www.itrhx.com/2019/09/14/A46-Python3-spider-C16/</id>
    <published>2019-09-13T16:44:50.577Z</published>
    <updated>2019-09-13T17:19:42.612Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><blockquote><center><font color="#1BC3FB" size="4">Python3 爬虫学习笔记第十六章 —— 【数据储存系列 — Redis】</font></center></blockquote><a id="more"></a><hr><h1 id="【16-1】关于-Redis"><a href="#【16-1】关于-Redis" class="headerlink" title="【16.1】关于 Redis"></a><font color="#ff0000">【16.1】关于 Redis</font></h1><p>Redis 是一个基于内存的高效的键值型（key-value）非关系型数据库，它支持存储的 value 类型非常多，包括 string(字符串)、list(链表)、set(集合)、zset(sorted set –有序集合) 和 hash（哈希类型），它的性能十分优越，可以支持每秒十几万此的读/写操作，其性能远超数据库，并且还支持集群、分布式、主从同步等配置，原则上可以无限扩展，让更多的数据存储在内存中，此外，它还支持一定的事务能力，这保证了高并发的场景下数据的安全和一致性。</p><hr><h1 id="【16-2】使用-Redis"><a href="#【16-2】使用-Redis" class="headerlink" title="【16.2】使用 Redis"></a><font color="#ff0000">【16.2】使用 Redis</font></h1><p>首先安装 Redis 和 redis-py 库，管理 Redis 可以使用可视化工具 Redis Desktop Manager，该工具现在收费了，分享个 0.8.8.384 的免费版本</p><p>安装 redis-py 库：<code>pip install redis</code><br>Redis 官网：<a href="https://redis.io" target="_blank" rel="noopener">https://redis.io</a><br>官方文档：<a href="https://redis.io/documentation" target="_blank" rel="noopener">https://redis.io/documentation</a><br>中文官网：<a href="http://www.redis.cn" target="_blank" rel="noopener">http://www.redis.cn</a><br>中文教程：<a href="http://www.runoob.com/redis/redis-tutorial.html" target="_blank" rel="noopener">http://www.runoob.com/redis/redis-tutorial.html</a><br>GitHub：<a href="https://github.com/antirez/redis" target="_blank" rel="noopener">https://github.com/antirez/redis</a><br>Redis Windows下载地址一：<a href="https://github.com/microsoftarchive/redis/releases" target="_blank" rel="noopener">https://github.com/microsoftarchive/redis/releases</a> （最新版 3.2.100，似乎不再更新）<br>Redis Windows下载地址二：<a href="https://github.com/tporadowski/redis/releases" target="_blank" rel="noopener">https://github.com/tporadowski/redis/releases</a> （最新版）<br>Redis Desktop Manager 官网：<a href="https://redisdesktop.com/" target="_blank" rel="noopener">https://redisdesktop.com/</a><br>Redis Desktop Manager 0.8.8.384 免费版：<a href="https://pan.baidu.com/s/18MKeCqT0MG0hc89jfkpIkA" target="_blank" rel="noopener">https://pan.baidu.com/s/18MKeCqT0MG0hc89jfkpIkA</a> （提取码：3ovc）</p><p>利用 Python 连接 Redis 示例：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> redis <span class="keyword">import</span> StrictRedis</span><br><span class="line"></span><br><span class="line">redis = StrictRedis(host=<span class="string">'localhost'</span>, port=<span class="number">6379</span>, db=<span class="number">0</span>, password=<span class="string">'000000'</span>)</span><br><span class="line">redis.set(<span class="string">'name'</span>, <span class="string">'TRHX'</span>)</span><br><span class="line">print(redis.get(<span class="string">'name'</span>))</span><br></pre></td></tr></table></figure><p>传入 Redis 的地址、运行端口、使用的数据库和密码， 4 个参数默认值分别为 localhost、6379、0 和 None，声明一个 StrictRedis 对象，调用 set() 方法，设置一个键值对，输出结果如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">b'TRHX'</span></span><br></pre></td></tr></table></figure><p>另外也可以使用 ConnectionPool 来连接：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> redis <span class="keyword">import</span> StrictRedis, ConnectionPool  </span><br><span class="line"></span><br><span class="line">pool = ConnectionPool(host=<span class="string">'localhost'</span>, port=<span class="number">6379</span>, db=<span class="number">0</span>, password=<span class="string">'000000'</span>)  </span><br><span class="line">redis = StrictRedis(connection_pool=pool)</span><br></pre></td></tr></table></figure><p>ConnectionPool 也支持通过 URL 来构建：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">redis://[:password]@host:port/db  <span class="comment"># 创建 Redis TCP 连接</span></span><br><span class="line">rediss://[:password]@host:port/db  <span class="comment"># 创建 Redis TCP+SSL 连接</span></span><br><span class="line">unix://[:password]@/path/to/socket.sock?db=db  # 创建 Redis UNIX socket 连接</span><br></pre></td></tr></table></figure><p>代码示例：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> redis <span class="keyword">import</span> StrictRedis, ConnectionPool</span><br><span class="line"></span><br><span class="line">url = <span class="string">'redis://:000000@localhost:6379/0'</span>  </span><br><span class="line">pool = ConnectionPool.from_url(url)  </span><br><span class="line">redis = StrictRedis(connection_pool=pool)</span><br></pre></td></tr></table></figure><p>以下是有关的键操作、字符串操作、列表操作、集合操作、散列操作的各种方法，记录一下，方便查阅<br>来源：《Python3 网络爬虫开发实战（崔庆才著）》<br>Redis 命令参考：<a href="http://redisdoc.com/" target="_blank" rel="noopener">http://redisdoc.com/</a> 、<a href="http://doc.redisfans.com/" target="_blank" rel="noopener">http://doc.redisfans.com/</a></p><hr><h1 id="【16-3】Key（键）操作"><a href="#【16-3】Key（键）操作" class="headerlink" title="【16.3】Key（键）操作"></a><font color="#ff0000">【16.3】Key（键）操作</font></h1><table><thead><tr><th>方法</th><th>作用</th><th>参数说明</th><th>示例</th><th>示例说明</th><th>示例结果</th></tr></thead><tbody><tr><td>exists(name)</td><td>判断一个键是否存在</td><td>name：键名</td><td>redis.exists(‘name’)</td><td>是否存在 name 这个键</td><td>True</td></tr><tr><td>delete(name)</td><td>删除一个键</td><td>name：键名</td><td>redis.delete(‘name’)</td><td>删除 name 这个键</td><td>1</td></tr><tr><td>type(name)</td><td>判断键类型</td><td>name：键名</td><td>redis.type(‘name’)</td><td>判断 name 这个键类型</td><td>b’string’</td></tr><tr><td>keys(pattern)</td><td>获取所有符合规则的键</td><td>pattern：匹配规则</td><td>redis.keys(‘n*’)</td><td>获取所有以 n 开头的键</td><td>[b’name’]</td></tr><tr><td>randomkey()</td><td>获取随机的一个键</td><td></td><td>randomkey()</td><td>获取随机的一个键</td><td>b’name’</td></tr><tr><td>rename(src, dst)</td><td>重命名键</td><td>src：原键名；dst：新键名</td><td>redis.rename(‘name’, ‘nickname’)</td><td>将 name 重命名为 nickname</td><td>True</td></tr><tr><td>dbsize()</td><td>获取当前数据库中键的数目</td><td></td><td>dbsize()</td><td>获取当前数据库中键的数目</td><td>100</td></tr><tr><td>expire(name, time)</td><td>设定键的过期时间，单位为秒</td><td>name：键名；time：秒数</td><td>redis.expire(‘name’, 2)</td><td>将 name 键的过期时间设置为 2 秒</td><td>True</td></tr><tr><td>ttl(name)</td><td>获取键的过期时间，单位为秒，-1 表示永久不过期</td><td>name：键名</td><td>redis.ttl(‘name’)</td><td>获取 name 这个键的过期时间</td><td>-1</td></tr><tr><td>move(name, db)</td><td>将键移动到其他数据库</td><td>name：键名；db：数据库代号</td><td>move(‘name’, 2)</td><td>将 name 移动到 2 号数据库</td><td>True</td></tr><tr><td>flushdb()</td><td>删除当前选择数据库中的所有键</td><td></td><td>flushdb()</td><td>删除当前选择数据库中的所有键</td><td>True</td></tr><tr><td>flushall()</td><td>删除所有数据库中的所有键</td><td></td><td>flushall()</td><td>删除所有数据库中的所有键</td><td>True</td></tr></tbody></table><hr><h1 id="【16-4】String（字符串）操作"><a href="#【16-4】String（字符串）操作" class="headerlink" title="【16.4】String（字符串）操作"></a><font color="#ff0000">【16.4】String（字符串）操作</font></h1><table><thead><tr><th>方法</th><th>作用</th><th>参数说明</th><th>示例</th><th>示例说明</th><th>示例结果</th></tr></thead><tbody><tr><td>set(name, value)</td><td>给数据库中键名为 name 的 string 赋予值 value</td><td>name：键名；value：值</td><td>redis.set(‘name’, ‘Bob’)</td><td>给 name 这个键的 value 赋值为 Bob</td><td>True</td></tr><tr><td>get(name)</td><td>返回数据库中键名为 name 的 string 的 value</td><td>name：键名</td><td>redis.get(‘name’)</td><td>返回 name 这个键的 value</td><td>b’Bob’</td></tr><tr><td>getset(name, value)</td><td>给数据库中键名为 name 的 string 赋予值 value 并返回上次的 value</td><td>name：键名；value：新值</td><td>redis.getset(‘name’, ‘Mike’)</td><td>赋值 name 为 Mike 并得到上次的 value</td><td>b’Bob’</td></tr><tr><td>mget(keys, *args)</td><td>返回多个键对应的 value 组成的列表</td><td>keys：键名序列</td><td>redis.mget([‘name’, ‘nickname’])</td><td>返回 name 和 nickname 的 value</td><td>[b’Mike’, b’Miker’]</td></tr><tr><td>setnx(name, value)</td><td>如果不存在这个键值对，则更新 value，否则不变</td><td>name：键名</td><td>redis.setnx(‘newname’, ‘James’)</td><td>如果 newname 这个键不存在，则设置值为 James</td><td>第一次运行结果是 True，第二次运行结果是 False</td></tr><tr><td>setex(name, time, value)</td><td>设置可以对应的值为 string 类型的 value，并指定此键值对应的有效期</td><td>name：键名；time：有效期；value：值</td><td>redis.setex(‘name’, 1, ‘James’)</td><td>将 name 这个键的值设为 James，有效期为 1 秒</td><td>True</td></tr><tr><td>setrange(name, offset, value)</td><td>设置指定键的 value 值的子字符串</td><td>name：键名；offset：偏移量；value：值</td><td>redis.set(‘name’, ‘Hello’) redis.setrange (‘name’, 6, ‘World’)</td><td>设置 name 为 Hello 字符串，并在 index 为 6 的位置补 World</td><td>11，修改后的字符串长度</td></tr><tr><td>mset(mapping)</td><td>批量赋值</td><td>mapping：字典或关键字参数</td><td>redis.mset({‘name1’: ‘Durant’, ‘name2’: ‘James’})</td><td>将 name1 设为 Durant，name2 设为 James</td><td>True</td></tr><tr><td>msetnx(mapping)</td><td>键均不存在时才批量赋值</td><td>mapping：字典或关键字参数</td><td>redis.msetnx({‘name3’: ‘Smith’, ‘name4’: ‘Curry’})</td><td>在 name3 和 name4 均不存在的情况下才设置二者值</td><td>True</td></tr><tr><td>incr(name, amount=1)</td><td>键名为 name 的 value 增值操作，默认为 1，键不存在则被创建并设为 amount</td><td>name：键名；amount：增长的值</td><td>redis.incr(‘age’, 1)</td><td>age 对应的值增 1，若不存在，则会创建并设置为 1</td><td>1，即修改后的值</td></tr><tr><td>decr(name, amount=1)</td><td>键名为 name 的 value 减值操作，默认为 1，键不存在则被创建并将 value 设置为 - amount</td><td>name：键名；amount：减少的值</td><td>redis.decr(‘age’, 1)</td><td>age 对应的值减 1，若不存在，则会创建并设置为-1</td><td>-1，即修改后的值</td></tr><tr><td>append(key, value)</td><td>键名为 key 的 string 的值附加 value</td><td>key：键名</td><td>redis.append(‘nickname’, ‘OK’)</td><td>向键名为 nickname 的值后追加 OK</td><td>13，即修改后的字符串长度</td></tr><tr><td>substr(name, start, end=-1)</td><td>返回键名为 name 的 string 的子字符串</td><td>name：键名；start：起始索引；end：终止索引，默认为-1，表示截取到末尾</td><td>redis.substr(‘name’, 1, 4)</td><td>返回键名为 name 的值的字符串，截取索引为 1~4 的字符</td><td>b’ello’</td></tr><tr><td>getrange(key, start, end)</td><td>获取键的 value 值从 start 到 end 的子字符串</td><td>key：键名；start：起始索引；end：终止索引</td><td>redis.getrange(‘name’, 1, 4)</td><td>返回键名为 name 的值的字符串，截取索引为 1~4 的字符</td><td>b’ello</td></tr></tbody></table><hr><h1 id="【16-5】Hash（哈希表）操作"><a href="#【16-5】Hash（哈希表）操作" class="headerlink" title="【16.5】Hash（哈希表）操作"></a><font color="#ff0000">【16.5】Hash（哈希表）操作</font></h1><table><thead><tr><th>方法</th><th>作用</th><th>参数说明</th><th>示例</th><th>示例说明</th><th>示例结果</th></tr></thead><tbody><tr><td>hset(name, key, value)</td><td>向键名为 name 的散列表中添加映射</td><td>name：键名；key：映射键名；value：映射键值</td><td>hset(‘price’, ‘cake’, 5)</td><td>向键名为 price 的散列表中添加映射关系，cake 的值为 5</td><td>1，即添加的映射个数</td></tr><tr><td>hsetnx(name, key, value)</td><td>如果映射键名不存在，则向键名为 name 的散列表中添加映射</td><td>name：键名；key：映射键名；value：映射键值</td><td>hsetnx(‘price’, ‘book’, 6)</td><td>向键名为 price 的散列表中添加映射关系，book 的值为 6</td><td>1，即添加的映射个数</td></tr><tr><td>hget(name, key)</td><td>返回键名为 name 的散列表中 key 对应的值</td><td>name：键名；key：映射键名</td><td>redis.hget(‘price’, ‘cake’)</td><td>获取键名为 price 的散列表中键名为 cake 的值</td><td>5</td></tr><tr><td>hmget(name, keys, *args)</td><td>返回键名为 name 的散列表中各个键对应的值</td><td>name：键名；keys：键名序列</td><td>redis.hmget(‘price’, [‘apple’, ‘orange’])</td><td>获取键名为 price 的散列表中 apple 和 orange 的值</td><td>[b’3’, b’7’]</td></tr><tr><td>hmset(name, mapping)</td><td>向键名为 name 的散列表中批量添加映射</td><td>name：键名；mapping：映射字典</td><td>redis.hmset(‘price’, {‘banana’: 2, ‘pear’: 6})</td><td>向键名为 price 的散列表中批量添加映射</td><td>True</td></tr><tr><td>hincrby(name, key, amount=1)</td><td>将键名为 name 的散列表中映射的值增加 amount</td><td>name：键名；key：映射键名；amount：增长量</td><td>redis.hincrby(‘price’, ‘apple’, 3)</td><td>key 为 price 的散列表中 apple 的值增加 3</td><td>6，修改后的值</td></tr><tr><td>hexists(name, key)</td><td>键名为 name 的散列表中是否存在键名为键的映射</td><td>name：键名；key：映射键名</td><td>redis.hexists(‘price’, ‘banana’)</td><td>键名为 price 的散列表中 banana 的值是否存在</td><td>True</td></tr><tr><td>hdel(name, *keys)</td><td>在键名为 name 的散列表中，删除键名为键的映射</td><td>name：键名；keys：键名序列</td><td>redis.hdel(‘price’, ‘banana’)</td><td>从键名为 price 的散列表中删除键名为 banana 的映射</td><td>True</td></tr><tr><td>hlen(name)</td><td>从键名为 name 的散列表中获取映射个数</td><td>name：键名</td><td>redis.hlen(‘price’)</td><td>从键名为 price 的散列表中获取映射个数</td><td>6</td></tr><tr><td>hkeys(name)</td><td>从键名为 name 的散列表中获取所有映射键名</td><td>name：键名</td><td>redis.hkeys(‘price’)</td><td>从键名为 price 的散列表中获取所有映射键名</td><td>[b’cake’, b’book’, b’banana’, b’pear’]</td></tr><tr><td>hvals(name)</td><td>从键名为 name 的散列表中获取所有映射键值</td><td>name：键名</td><td>redis.hvals(‘price’)</td><td>从键名为 price 的散列表中获取所有映射键值</td><td>[b’5’, b’6’, b’2’, b’6’]</td></tr><tr><td>hgetall(name)</td><td>从键名为 name 的散列表中获取所有映射键值对</td><td>name：键名</td><td>redis.hgetall(‘price’)</td><td>从键名为 price 的散列表中获取所有映射键值对</td><td>{b’cake’: b’5’, b’book’: b’6’, b’orange’: b’7’, b’pear’: b’6’}</td></tr></tbody></table><hr><h1 id="【16-6】List（列表）操作"><a href="#【16-6】List（列表）操作" class="headerlink" title="【16.6】List（列表）操作"></a><font color="#ff0000">【16.6】List（列表）操作</font></h1><table><thead><tr><th>方法</th><th>作用</th><th>参数说明</th><th>示例</th><th>示例说明</th><th>示例结果</th></tr></thead><tbody><tr><td>rpush(name, *values)</td><td>在键名为 name 的列表末尾添加值为 value 的元素，可以传多个</td><td>name：键名；values：值</td><td>redis.rpush(‘list’, 1, 2, 3)</td><td>向键名为 list 的列表尾添加 1、2、3</td><td>3，列表大小</td></tr><tr><td>lpush(name, *values)</td><td>在键名为 name 的列表头添加值为 value 的元素，可以传多个</td><td>name：键名；values：值</td><td>redis.lpush(‘list’, 0)</td><td>向键名为 list 的列表头部添加 0</td><td>4，列表大小</td></tr><tr><td>llen(name)</td><td>返回键名为 name 的列表的长度</td><td>name：键名</td><td>redis.llen(‘list’)</td><td>返回键名为 list 的列表的长度</td><td>4</td></tr><tr><td>lrange(name, start, end)</td><td>返回键名为 name 的列表中 start 至 end 之间的元素</td><td>name：键名；start：起始索引；end：终止索引</td><td>redis.lrange(‘list’, 1, 3)</td><td>返回起始索引为 1 终止索引为 3 的索引范围对应的列表</td><td>[b’3’, b’2’, b’1’]</td></tr><tr><td>ltrim(name, start, end)</td><td>截取键名为 name 的列表，保留索引为 start 到 end 的内容</td><td>name：键名；start：起始索引；end：终止索引</td><td>ltrim(‘list’, 1, 3)</td><td>保留键名为 list 的索引为 1 到 3 的元素</td><td>True</td></tr><tr><td>lindex(name, index)</td><td>返回键名为 name 的列表中 index 位置的元素</td><td>name：键名；index：索引</td><td>redis.lindex(‘list’, 1)</td><td>返回键名为 list 的列表索引为 1 的元素</td><td>b’2’</td></tr><tr><td>lset(name, index, value)</td><td>给键名为 name 的列表中 index 位置的元素赋值，越界则报错</td><td>name：键名；index：索引位置；value：值</td><td>redis.lset(‘list’, 1, 5)</td><td>将键名为 list 的列表中索引为 1 的位置赋值为 5</td><td>True</td></tr><tr><td>lrem(name, count, value)</td><td>删除 count 个键的列表中值为 value 的元素</td><td>name：键名；count：删除个数；value：值</td><td>redis.lrem(‘list’, 2, 3)</td><td>将键名为 list 的列表删除两个 3</td><td>1，即删除的个数</td></tr><tr><td>lpop(name)</td><td>返回并删除键名为 name 的列表中的首元素</td><td>name：键名</td><td>redis.lpop(‘list’)</td><td>返回并删除名为 list 的列表中的第一个元素</td><td>b’5’</td></tr><tr><td>rpop(name)</td><td>返回并删除键名为 name 的列表中的尾元素</td><td>name：键名</td><td>redis.rpop(‘list’)</td><td>返回并删除名为 list 的列表中的最后一个元素</td><td>b’2’</td></tr><tr><td>blpop(keys, timeout=0)</td><td>返回并删除名称在 keys 中的 list 中的首个元素，如果列表为空，则会一直阻塞等待</td><td>keys：键名序列；timeout：超时等待时间，0 为一直等待</td><td>redis.blpop(‘list’)</td><td>返回并删除键名为 list 的列表中的第一个元素</td><td>[b’5’]</td></tr><tr><td>brpop(keys, timeout=0)</td><td>返回并删除键名为 name 的列表中的尾元素，如果 list 为空，则会一直阻塞等待</td><td>keys：键名序列；timeout：超时等待时间，0 为一直等待</td><td>redis.brpop(‘list’)</td><td>返回并删除名为 list 的列表中的最后一个元素</td><td>[b’2’]</td></tr><tr><td>rpoplpush(src, dst)</td><td>返回并删除名称为 src 的列表的尾元素，并将该元素添加到名称为 dst 的列表头部</td><td>src：源列表的键；dst：目标列表的 key</td><td>redis.rpoplpush(‘list’, ‘list2’)</td><td>将键名为 list 的列表尾元素删除并将其添加到键名为 list2 的列表头部，然后返回</td><td>b’2’</td></tr></tbody></table><hr><h1 id="【16-7】Set（集合）操作"><a href="#【16-7】Set（集合）操作" class="headerlink" title="【16.7】Set（集合）操作"></a><font color="#ff0000">【16.7】Set（集合）操作</font></h1><table><thead><tr><th>方法</th><th>作用</th><th>参数说明</th><th>示例</th><th>示例说明</th><th>示例结果</th></tr></thead><tbody><tr><td>sadd(name, *values)</td><td>向键名为 name 的集合中添加元素</td><td>name：键名；values：值，可为多个</td><td>redis.sadd(‘tags’, ‘Book’, ‘Tea’, ‘Coffee’)</td><td>向键名为 tags 的集合中添加 Book、Tea 和 Coffee 这 3 个内容</td><td>3，即插入的数据个数</td></tr><tr><td>srem(name, *values)</td><td>从键名为 name 的集合中删除元素</td><td>name：键名；values：值，可为多个</td><td>redis.srem(‘tags’, ‘Book’)</td><td>从键名为 tags 的集合中删除 Book</td><td>1，即删除的数据个数</td></tr><tr><td>spop(name)</td><td>随机返回并删除键名为 name 的集合中的一个元素</td><td>name：键名</td><td>redis.spop(‘tags’)</td><td>从键名为 tags 的集合中随机删除并返回该元素</td><td>b’Tea’</td></tr><tr><td>smove(src, dst, value)</td><td>从 src 对应的集合中移除元素并将其添加到 dst 对应的集合中</td><td>src：源集合；dst：目标集合；value：元素值</td><td>redis.smove(‘tags’, ‘tags2’, ‘Coffee’)</td><td>从键名为 tags 的集合中删除元素 Coffee 并将其添加到键为 tags2 的集合</td><td>True</td></tr><tr><td>scard(name)</td><td>返回键名为 name 的集合的元素个数</td><td>name：键名</td><td>redis.scard(‘tags’)</td><td>获取键名为 tags 的集合中的元素个数</td><td>3</td></tr><tr><td>sismember(name, value)</td><td>测试 member 是否是键名为 name 的集合的元素</td><td>name：键值</td><td>redis.sismember(‘tags’, ‘Book’)</td><td>判断 Book 是否是键名为 tags 的集合元素</td><td>True</td></tr><tr><td>sinter(keys, *args)</td><td>返回所有给定键的集合的交集</td><td>keys：键名序列</td><td>redis.sinter([‘tags’, ‘tags2’])</td><td>返回键名为 tags 的集合和键名为 tags2 的集合的交集</td><td>{b’Coffee’}</td></tr><tr><td>sinterstore(dest, keys, *args)</td><td>求交集并将交集保存到 dest 的集合</td><td>dest：结果集合；keys：键名序列</td><td>redis.sinterstore (‘inttag’, [‘tags’, ‘tags2’])</td><td>求键名为 tags 的集合和键名为 tags2 的集合的交集并将其保存为 inttag</td><td>1</td></tr><tr><td>sunion(keys, *args)</td><td>返回所有给定键的集合的并集</td><td>keys：键名序列</td><td>redis.sunion([‘tags’, ‘tags2’])</td><td>返回键名为 tags 的集合和键名为 tags2 的集合的并集</td><td>{b’Coffee’, b’Book’, b’Pen’}</td></tr><tr><td>sunionstore(dest, keys, *args)</td><td>求并集并将并集保存到 dest 的集合</td><td>dest：结果集合；keys：键名序列</td><td>redis.sunionstore (‘inttag’, [‘tags’, ‘tags2’])</td><td>求键名为 tags 的集合和键名为 tags2 的集合的并集并将其保存为 inttag</td><td>3</td></tr><tr><td>sdiff(keys, *args)</td><td>返回所有给定键的集合的差集</td><td>keys：键名序列</td><td>redis.sdiff([‘tags’, ‘tags2’])</td><td>返回键名为 tags 的集合和键名为 tags2 的集合的差集</td><td>{b’Book’, b’Pen’}</td></tr><tr><td>sdiffstore(dest, keys, *args)</td><td>求差集并将差集保存到 dest 集合</td><td>dest：结果集合；keys：键名序列</td><td>redis.sdiffstore (‘inttag’, [‘tags’, ‘tags2’])</td><td>求键名为 tags 的集合和键名为 tags2 的集合的差集并将其保存为 inttag</td><td>3</td></tr><tr><td>smembers(name)</td><td>返回键名为 name 的集合的所有元素</td><td>name：键名</td><td>redis.smembers(‘tags’)</td><td>返回键名为 tags 的集合的所有元素</td><td>{b’Pen’, b’Book’, b’Coffee’}</td></tr><tr><td>srandmember(name)</td><td>随机返回键名为 name 的集合中的一个元素，但不删除元素</td><td>name：键值</td><td>redis.srandmember(‘tags’)</td><td>随机返回键名为 tags 的集合中的一个元素</td><td>Srandmember (name)</td></tr></tbody></table><hr><h1 id="【16-8】SortedSet（有序集合）操作"><a href="#【16-8】SortedSet（有序集合）操作" class="headerlink" title="【16.8】SortedSet（有序集合）操作"></a><font color="#ff0000">【16.8】SortedSet（有序集合）操作</font></h1><table><thead><tr><th>方法</th><th>作用</th><th>参数说明</th><th>示例</th><th>示例说明</th><th>示例结果</th></tr></thead><tbody><tr><td>zadd(name, args, *kwargs)</td><td>向键名为 name 的 zset 中添加元素 member，score 用于排序。如果该元素存在，则更新其顺序</td><td>name：键名；args：可变参数</td><td>redis.zadd(‘grade’, 100, ‘Bob’, 98, ‘Mike’)</td><td>向键名为 grade 的 zset 中添加 Bob（其 score 为 100），并添加 Mike（其 score 为 98）</td><td>2，即添加的元素个数</td></tr><tr><td>zrem(name, *values)</td><td>删除键名为 name 的 zset 中的元素</td><td>name：键名；values：元素</td><td>redis.zrem(‘grade’, ‘Mike’)</td><td>从键名为 grade 的 zset 中删除 Mike</td><td>1，即删除的元素个数</td></tr><tr><td>zincrby(name, value, amount=1)</td><td>如果在键名为 name 的 zset 中已经存在元素 value，则将该元素的 score 增加 amount；否则向该集合中添加该元素，其 score 的值为 amount</td><td>name：键名；value：元素；amount：增长的 score 值</td><td>redis.zincrby(‘grade’, ‘Bob’, -2)</td><td>键名为 grade 的 zset 中 Bob 的 score 减 2</td><td>98.0，即修改后的值</td></tr><tr><td>zrank(name, value)</td><td>返回键名为 name 的 zset 中元素的排名，按 score 从小到大排序，即名次</td><td>name：键名；value：元素值</td><td>redis.zrank(‘grade’, ‘Amy’)</td><td>得到键名为 grade 的 zset 中 Amy 的排名</td><td>1</td></tr><tr><td>zrevrank(name, value)</td><td>返回键为 name 的 zset 中元素的倒数排名（按 score 从大到小排序），即名次</td><td>name：键名；value：元素值</td><td>redis.zrevrank (‘grade’, ‘Amy’)</td><td>得到键名为 grade 的 zset 中 Amy 的倒数排名</td><td>2</td></tr><tr><td>zrevrange(name, start, end, withscores= False)</td><td>返回键名为 name 的 zset（按 score 从大到小排序）中 index 从 start 到 end 的所有元素</td><td>name：键值；start：开始索引；end：结束索引；withscores：是否带 score</td><td>redis.zrevrange (‘grade’, 0, 3)</td><td>返回键名为 grade 的 zset 中前四名元素</td><td>[b’Bob’, b’Mike’, b’Amy’, b’James’]</td></tr><tr><td>zrangebyscore (name, min, max, start=None, num=None, withscores=False)</td><td>返回键名为 name 的 zset 中 score 在给定区间的元素</td><td>name：键名；min：最低 score；max：最高 score；start：起始索引；num：个数；withscores：是否带 score</td><td>redis.zrangebyscore (‘grade’, 80, 95)</td><td>返回键名为 grade 的 zset 中 score 在 80 和 95 之间的元素</td><td>[b’Bob’, b’Mike’, b’Amy’, b’James’]</td></tr><tr><td>zcount(name, min, max)</td><td>返回键名为 name 的 zset 中 score 在给定区间的数量</td><td>name：键名；min：最低 score；max：最高 score</td><td>redis.zcount(‘grade’, 80, 95)</td><td>返回键名为 grade 的 zset 中 score 在 80 到 95 的元素个数</td><td>2</td></tr><tr><td>zcard(name)</td><td>返回键名为 name 的 zset 的元素个数</td><td>name：键名</td><td>redis.zcard(‘grade’)</td><td>获取键名为 grade 的 zset 中元素的个数</td><td>3</td></tr><tr><td>zremrangebyrank (name, min, max)</td><td>删除键名为 name 的 zset 中排名在给定区间的元素</td><td>name：键名；min：最低位次；max：最高位次</td><td>redis.zremrangebyrank (‘grade’, 0, 0)</td><td>删除键名为 grade 的 zset 中排名第一的元素</td><td>1，即删除的元素个数</td></tr><tr><td>zremrangebyscore (name, min, max)</td><td>删除键名为 name 的 zset 中 score 在给定区间的元素</td><td>name：键名；min：最低 score；max：最高 score</td><td>redis.zremrangebyscore (‘grade’, 80, 90)</td><td>删除 score 在 80 到 90 之间的元素</td><td>1，即删除的元素个数</td></tr></tbody></table><hr><h1 id="【16-9】RedisDump"><a href="#【16-9】RedisDump" class="headerlink" title="【16.9】RedisDump"></a><font color="#ff0000">【16.9】RedisDump</font></h1><p>RedisDump 是 Redis 一个数据导入导出工具，是基于 Ruby 实现的，首先访问 Ruby 官网安装对应操作系统的 Ruby：<a href="http://www.ruby-lang.org/zh_cn/downloads/" target="_blank" rel="noopener">http://www.ruby-lang.org/zh_cn/downloads/</a> ，安装完成即可使用 gem 命令，该命令类似于 Python 当中的 pip 命令，使用 <code>gem install redis-dump</code> 即可完成 RedisDump 的安装，安装完成后就可以使用导出数据 <code>redis-dump</code> 命令和导入数据 <code>redis-load</code> 命令了</p><hr><h2 id="【16-9-1】导出数据-redis-dump"><a href="#【16-9-1】导出数据-redis-dump" class="headerlink" title="【16.9.1】导出数据 redis-dump"></a><font color="#1BC3FB">【16.9.1】导出数据 redis-dump</font></h2><p>在命令行输入 <code>redis-dump -h</code> 可以查看：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">Usage: E:/Ruby26-x64/bin/redis-dump [global options] COMMAND [command options]</span><br><span class="line">    -u, --uri=S                      Redis URI (e.g. redis://hostname[:port])</span><br><span class="line">    -d, --database=S                 Redis database (e.g. -d 15)</span><br><span class="line">    -a, --password=S                 Redis password (e.g. -a 'my@pass/word')</span><br><span class="line">    -s, --sleep=S                    Sleep for S seconds after dumping (for debugging)</span><br><span class="line">    -c, --count=S                    Chunk size (default: 10000)</span><br><span class="line">    -f, --filter=S                   Filter selected keys (passed directly to redis' KEYS command)</span><br><span class="line">    -b, --base64                     Encode key values as base64 (useful for binary values)</span><br><span class="line">    -O, --without_optimizations      Disable run time optimizations</span><br><span class="line">    -V, --version                    Display version</span><br><span class="line">    -D, --debug</span><br><span class="line">        --nosafe</span><br></pre></td></tr></table></figure><p>命令解释：</p><ul><li>-u Redis 连接字符串</li><li>-d 数据库代号</li><li>-a 数据库密码</li><li>-s 导出之后的休眠时间</li><li>-c 分块大小，默认是 10000</li><li>-f 导出时的过滤器</li><li>-b 将键值编码为 base64（对二进制值有用）</li><li>-O 禁用运行时优化</li><li>-V 显示版本</li><li>-D 开启调试</li></ul><p>导出数据示例：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">redis-dump</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 指定端口</span></span><br><span class="line">redis-dump -u 127.0.0.1:6379</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 指定端口和密码</span></span><br><span class="line">redis-dump -u :password@127.0.0.1:6379</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 导出指定数据库</span></span><br><span class="line">redis-dump -u 127.0.0.1:6379 -d 3</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 导出包含特定值的数据</span></span><br><span class="line">redis-dump -u 127.0.0.1:6379 -f age</span><br></pre></td></tr></table></figure><p>输出示例：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 导出所有数据</span></span><br><span class="line">&#123;"db":0,"key":"name5","ttl":-1,"type":"string","value":"DDD","size":3&#125;</span><br><span class="line">&#123;"db":0,"key":"name2","ttl":-1,"type":"string","value":"AAA","size":3&#125;</span><br><span class="line">&#123;"db":0,"key":"name4","ttl":-1,"type":"string","value":"CCC","size":3&#125;</span><br><span class="line">&#123;"db":0,"key":"name6","ttl":-1,"type":"string","value":"CCC","size":3&#125;</span><br><span class="line">&#123;"db":0,"key":"name","ttl":-1,"type":"string","value":"TRHX","size":4&#125;</span><br><span class="line">&#123;"db":0,"key":"name3","ttl":-1,"type":"string","value":"BBB","size":3&#125;</span><br><span class="line">&#123;"db":1,"key":"name2","ttl":-1,"type":"string","value":"BBB","size":3&#125;</span><br><span class="line">&#123;"db":1,"key":"name1","ttl":-1,"type":"string","value":"AAA","size":3&#125;</span><br><span class="line">&#123;"db":2,"key":"name2","ttl":-1,"type":"string","value":"BBB","size":3&#125;</span><br><span class="line">&#123;"db":2,"key":"name1","ttl":-1,"type":"string","value":"AAA","size":3&#125;</span><br><span class="line">&#123;"db":3,"key":"name2","ttl":-1,"type":"string","value":"HHH","size":3&#125;</span><br><span class="line">&#123;"db":3,"key":"name1","ttl":-1,"type":"string","value":"RRR","size":3&#125;</span><br><span class="line">&#123;"db":4,"key":"age","ttl":-1,"type":"string","value":"20","size":2&#125;</span><br><span class="line">&#123;"db":4,"key":"age2","ttl":-1,"type":"string","value":"19","size":2&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 导出 3 号数据库</span></span><br><span class="line">&#123;"db":3,"key":"name2","ttl":-1,"type":"string","value":"HHH","size":3&#125;</span><br><span class="line">&#123;"db":3,"key":"name1","ttl":-1,"type":"string","value":"RRR","size":3&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 导出 key 包含 age 的数据</span></span><br><span class="line">&#123;"db":4,"key":"age","ttl":-1,"type":"string","value":"20","size":2&#125;</span><br><span class="line">&#123;"db":4,"key":"age2","ttl":-1,"type":"string","value":"19","size":2&#125;</span><br></pre></td></tr></table></figure><p>导出所有数据为 JSON 文件：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">redis-dump -u 127.0.0.1:6379 &gt; db_full.json</span><br></pre></td></tr></table></figure><p>该命令将会在当前目录生成一个名为 db_full.json 的文件，文件内容如下：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&#123;<span class="attr">"db"</span>:<span class="number">0</span>,<span class="attr">"key"</span>:<span class="string">"name5"</span>,<span class="attr">"ttl"</span>:<span class="number">-1</span>,<span class="attr">"type"</span>:<span class="string">"string"</span>,<span class="attr">"value"</span>:<span class="string">"DDD"</span>,<span class="attr">"size"</span>:<span class="number">3</span>&#125;</span><br><span class="line">&#123;<span class="attr">"db"</span>:<span class="number">0</span>,<span class="attr">"key"</span>:<span class="string">"name2"</span>,<span class="attr">"ttl"</span>:<span class="number">-1</span>,<span class="attr">"type"</span>:<span class="string">"string"</span>,<span class="attr">"value"</span>:<span class="string">"AAA"</span>,<span class="attr">"size"</span>:<span class="number">3</span>&#125;</span><br><span class="line">&#123;<span class="attr">"db"</span>:<span class="number">0</span>,<span class="attr">"key"</span>:<span class="string">"name4"</span>,<span class="attr">"ttl"</span>:<span class="number">-1</span>,<span class="attr">"type"</span>:<span class="string">"string"</span>,<span class="attr">"value"</span>:<span class="string">"CCC"</span>,<span class="attr">"size"</span>:<span class="number">3</span>&#125;</span><br><span class="line">&#123;<span class="attr">"db"</span>:<span class="number">0</span>,<span class="attr">"key"</span>:<span class="string">"name6"</span>,<span class="attr">"ttl"</span>:<span class="number">-1</span>,<span class="attr">"type"</span>:<span class="string">"string"</span>,<span class="attr">"value"</span>:<span class="string">"CCC"</span>,<span class="attr">"size"</span>:<span class="number">3</span>&#125;</span><br><span class="line">&#123;<span class="attr">"db"</span>:<span class="number">0</span>,<span class="attr">"key"</span>:<span class="string">"name"</span>,<span class="attr">"ttl"</span>:<span class="number">-1</span>,<span class="attr">"type"</span>:<span class="string">"string"</span>,<span class="attr">"value"</span>:<span class="string">"TRHX"</span>,<span class="attr">"size"</span>:<span class="number">4</span>&#125;</span><br><span class="line">&#123;<span class="attr">"db"</span>:<span class="number">0</span>,<span class="attr">"key"</span>:<span class="string">"name3"</span>,<span class="attr">"ttl"</span>:<span class="number">-1</span>,<span class="attr">"type"</span>:<span class="string">"string"</span>,<span class="attr">"value"</span>:<span class="string">"BBB"</span>,<span class="attr">"size"</span>:<span class="number">3</span>&#125;</span><br><span class="line">&#123;<span class="attr">"db"</span>:<span class="number">1</span>,<span class="attr">"key"</span>:<span class="string">"name2"</span>,<span class="attr">"ttl"</span>:<span class="number">-1</span>,<span class="attr">"type"</span>:<span class="string">"string"</span>,<span class="attr">"value"</span>:<span class="string">"BBB"</span>,<span class="attr">"size"</span>:<span class="number">3</span>&#125;</span><br><span class="line">&#123;<span class="attr">"db"</span>:<span class="number">1</span>,<span class="attr">"key"</span>:<span class="string">"name1"</span>,<span class="attr">"ttl"</span>:<span class="number">-1</span>,<span class="attr">"type"</span>:<span class="string">"string"</span>,<span class="attr">"value"</span>:<span class="string">"AAA"</span>,<span class="attr">"size"</span>:<span class="number">3</span>&#125;</span><br><span class="line">&#123;<span class="attr">"db"</span>:<span class="number">2</span>,<span class="attr">"key"</span>:<span class="string">"name2"</span>,<span class="attr">"ttl"</span>:<span class="number">-1</span>,<span class="attr">"type"</span>:<span class="string">"string"</span>,<span class="attr">"value"</span>:<span class="string">"BBB"</span>,<span class="attr">"size"</span>:<span class="number">3</span>&#125;</span><br><span class="line">&#123;<span class="attr">"db"</span>:<span class="number">2</span>,<span class="attr">"key"</span>:<span class="string">"name1"</span>,<span class="attr">"ttl"</span>:<span class="number">-1</span>,<span class="attr">"type"</span>:<span class="string">"string"</span>,<span class="attr">"value"</span>:<span class="string">"AAA"</span>,<span class="attr">"size"</span>:<span class="number">3</span>&#125;</span><br><span class="line">&#123;<span class="attr">"db"</span>:<span class="number">3</span>,<span class="attr">"key"</span>:<span class="string">"name2"</span>,<span class="attr">"ttl"</span>:<span class="number">-1</span>,<span class="attr">"type"</span>:<span class="string">"string"</span>,<span class="attr">"value"</span>:<span class="string">"HHH"</span>,<span class="attr">"size"</span>:<span class="number">3</span>&#125;</span><br><span class="line">&#123;<span class="attr">"db"</span>:<span class="number">3</span>,<span class="attr">"key"</span>:<span class="string">"name1"</span>,<span class="attr">"ttl"</span>:<span class="number">-1</span>,<span class="attr">"type"</span>:<span class="string">"string"</span>,<span class="attr">"value"</span>:<span class="string">"RRR"</span>,<span class="attr">"size"</span>:<span class="number">3</span>&#125;</span><br><span class="line">&#123;<span class="attr">"db"</span>:<span class="number">4</span>,<span class="attr">"key"</span>:<span class="string">"age"</span>,<span class="attr">"ttl"</span>:<span class="number">-1</span>,<span class="attr">"type"</span>:<span class="string">"string"</span>,<span class="attr">"value"</span>:<span class="string">"20"</span>,<span class="attr">"size"</span>:<span class="number">2</span>&#125;</span><br><span class="line">&#123;<span class="attr">"db"</span>:<span class="number">4</span>,<span class="attr">"key"</span>:<span class="string">"age2"</span>,<span class="attr">"ttl"</span>:<span class="number">-1</span>,<span class="attr">"type"</span>:<span class="string">"string"</span>,<span class="attr">"value"</span>:<span class="string">"19"</span>,<span class="attr">"size"</span>:<span class="number">2</span>&#125;</span><br></pre></td></tr></table></figure><p>使用参数 -d 指定某个数据库的所有数据导出为 JSON 文件：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">redis-dump -u 127.0.0.1:6379 -d 4 &gt; db_db4.json</span><br></pre></td></tr></table></figure><p>该命令会将 4 号数据库的数据导出到 db_db4.json 文件：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#123;<span class="attr">"db"</span>:<span class="number">4</span>,<span class="attr">"key"</span>:<span class="string">"age"</span>,<span class="attr">"ttl"</span>:<span class="number">-1</span>,<span class="attr">"type"</span>:<span class="string">"string"</span>,<span class="attr">"value"</span>:<span class="string">"20"</span>,<span class="attr">"size"</span>:<span class="number">2</span>&#125;</span><br><span class="line">&#123;<span class="attr">"db"</span>:<span class="number">4</span>,<span class="attr">"key"</span>:<span class="string">"age2"</span>,<span class="attr">"ttl"</span>:<span class="number">-1</span>,<span class="attr">"type"</span>:<span class="string">"string"</span>,<span class="attr">"value"</span>:<span class="string">"19"</span>,<span class="attr">"size"</span>:<span class="number">2</span>&#125;</span><br></pre></td></tr></table></figure><p>使用参数 -f 过滤数据，只导出特定的数据：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">redis-dump -u 127.0.0.1:6379 -f name &gt; db_name.json</span><br></pre></td></tr></table></figure><p>该命令会导出 key 包含 name 的数据到 db_name.json 文件：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&#123;<span class="attr">"db"</span>:<span class="number">0</span>,<span class="attr">"key"</span>:<span class="string">"name5"</span>,<span class="attr">"ttl"</span>:<span class="number">-1</span>,<span class="attr">"type"</span>:<span class="string">"string"</span>,<span class="attr">"value"</span>:<span class="string">"DDD"</span>,<span class="attr">"size"</span>:<span class="number">3</span>&#125;</span><br><span class="line">&#123;<span class="attr">"db"</span>:<span class="number">0</span>,<span class="attr">"key"</span>:<span class="string">"name2"</span>,<span class="attr">"ttl"</span>:<span class="number">-1</span>,<span class="attr">"type"</span>:<span class="string">"string"</span>,<span class="attr">"value"</span>:<span class="string">"AAA"</span>,<span class="attr">"size"</span>:<span class="number">3</span>&#125;</span><br><span class="line">&#123;<span class="attr">"db"</span>:<span class="number">0</span>,<span class="attr">"key"</span>:<span class="string">"name4"</span>,<span class="attr">"ttl"</span>:<span class="number">-1</span>,<span class="attr">"type"</span>:<span class="string">"string"</span>,<span class="attr">"value"</span>:<span class="string">"CCC"</span>,<span class="attr">"size"</span>:<span class="number">3</span>&#125;</span><br><span class="line">&#123;<span class="attr">"db"</span>:<span class="number">0</span>,<span class="attr">"key"</span>:<span class="string">"name6"</span>,<span class="attr">"ttl"</span>:<span class="number">-1</span>,<span class="attr">"type"</span>:<span class="string">"string"</span>,<span class="attr">"value"</span>:<span class="string">"CCC"</span>,<span class="attr">"size"</span>:<span class="number">3</span>&#125;</span><br><span class="line">&#123;<span class="attr">"db"</span>:<span class="number">0</span>,<span class="attr">"key"</span>:<span class="string">"name"</span>,<span class="attr">"ttl"</span>:<span class="number">-1</span>,<span class="attr">"type"</span>:<span class="string">"string"</span>,<span class="attr">"value"</span>:<span class="string">"TRHX"</span>,<span class="attr">"size"</span>:<span class="number">4</span>&#125;</span><br><span class="line">&#123;<span class="attr">"db"</span>:<span class="number">0</span>,<span class="attr">"key"</span>:<span class="string">"name3"</span>,<span class="attr">"ttl"</span>:<span class="number">-1</span>,<span class="attr">"type"</span>:<span class="string">"string"</span>,<span class="attr">"value"</span>:<span class="string">"BBB"</span>,<span class="attr">"size"</span>:<span class="number">3</span>&#125;</span><br><span class="line">&#123;<span class="attr">"db"</span>:<span class="number">1</span>,<span class="attr">"key"</span>:<span class="string">"name2"</span>,<span class="attr">"ttl"</span>:<span class="number">-1</span>,<span class="attr">"type"</span>:<span class="string">"string"</span>,<span class="attr">"value"</span>:<span class="string">"BBB"</span>,<span class="attr">"size"</span>:<span class="number">3</span>&#125;</span><br><span class="line">&#123;<span class="attr">"db"</span>:<span class="number">1</span>,<span class="attr">"key"</span>:<span class="string">"name1"</span>,<span class="attr">"ttl"</span>:<span class="number">-1</span>,<span class="attr">"type"</span>:<span class="string">"string"</span>,<span class="attr">"value"</span>:<span class="string">"AAA"</span>,<span class="attr">"size"</span>:<span class="number">3</span>&#125;</span><br><span class="line">&#123;<span class="attr">"db"</span>:<span class="number">2</span>,<span class="attr">"key"</span>:<span class="string">"name2"</span>,<span class="attr">"ttl"</span>:<span class="number">-1</span>,<span class="attr">"type"</span>:<span class="string">"string"</span>,<span class="attr">"value"</span>:<span class="string">"BBB"</span>,<span class="attr">"size"</span>:<span class="number">3</span>&#125;</span><br><span class="line">&#123;<span class="attr">"db"</span>:<span class="number">2</span>,<span class="attr">"key"</span>:<span class="string">"name1"</span>,<span class="attr">"ttl"</span>:<span class="number">-1</span>,<span class="attr">"type"</span>:<span class="string">"string"</span>,<span class="attr">"value"</span>:<span class="string">"AAA"</span>,<span class="attr">"size"</span>:<span class="number">3</span>&#125;</span><br><span class="line">&#123;<span class="attr">"db"</span>:<span class="number">3</span>,<span class="attr">"key"</span>:<span class="string">"name2"</span>,<span class="attr">"ttl"</span>:<span class="number">-1</span>,<span class="attr">"type"</span>:<span class="string">"string"</span>,<span class="attr">"value"</span>:<span class="string">"HHH"</span>,<span class="attr">"size"</span>:<span class="number">3</span>&#125;</span><br><span class="line">&#123;<span class="attr">"db"</span>:<span class="number">3</span>,<span class="attr">"key"</span>:<span class="string">"name1"</span>,<span class="attr">"ttl"</span>:<span class="number">-1</span>,<span class="attr">"type"</span>:<span class="string">"string"</span>,<span class="attr">"value"</span>:<span class="string">"RRR"</span>,<span class="attr">"size"</span>:<span class="number">3</span>&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="【16-9-2】导入数据-redis-load"><a href="#【16-9-2】导入数据-redis-load" class="headerlink" title="【16.9.2】导入数据 redis-load"></a><font color="#1BC3FB">【16.9.2】导入数据 redis-load</font></h2><p>在命令行输入 <code>redis-load -h</code> 可以查看：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">redis-load --help  </span><br><span class="line">  Try: redis-load [global options] COMMAND [command options]   </span><br><span class="line">    -u, --uri=S                      Redis URI (e.g. redis://hostname[:port])  </span><br><span class="line">    -d, --database=S                 Redis database (e.g. -d 15)  </span><br><span class="line">    -s, --sleep=S                    Sleep for S seconds after dumping (for debugging)  </span><br><span class="line">    -n, --no_check_utf8  </span><br><span class="line">    -V, --version                    Display version  </span><br><span class="line">    -D, --debug  </span><br><span class="line">        --nosafe</span><br></pre></td></tr></table></figure><p>命令解释：</p><ul><li>-u Redis 连接字符串</li><li>-d 数据库代号，默认是全部</li><li>-s 导出之后的休眠时间</li><li>-n 不检测 UTF-8 编码</li><li>-V 显示版本</li><li>-D 开启调试</li></ul><p>导入示例：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 将 test.json 文件所有内容导入到数据库</span></span><br><span class="line">&lt; test.json redis-load -u 127.0.0.1:6379</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 将 test.json 文件 db 值为 6 的数据导入到数据库 </span></span><br><span class="line">&lt; test.json redis-load -u 127.0.0.1:6379 -d 6</span><br></pre></td></tr></table></figure><p>另外，以下方法也能导入数据：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 将 test.json 文件所有内容导入到数据库</span></span><br><span class="line">cat test.json | redis-load -u 127.0.0.1:6379</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 将 test.json 文件 db 值为 6 的数据导入到数据库 </span></span><br><span class="line">cat test.json | redis-load -u 127.0.0.1:6379 -d 6</span><br></pre></td></tr></table></figure><p>注意：<code>cat</code> 是 Linux 系统专有的命令，在 Windows 系统里没有 <code>cat</code> 这个命令，可以使用 Windows 批处理命令 <code>type</code> 代替 <code>cat</code></p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;center&gt;&lt;font color=&quot;#1BC3FB&quot; size=&quot;4&quot;&gt;Python3 爬虫学习笔记第十六章 —— 【数据储存系列 — Redis】&lt;/font&gt;&lt;/center&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="Python3 学习笔记" scheme="https://www.itrhx.com/categories/Python3-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
      <category term="Python3 爬虫" scheme="https://www.itrhx.com/categories/Python3-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/Python3-%E7%88%AC%E8%99%AB/"/>
    
    
      <category term="爬虫" scheme="https://www.itrhx.com/tags/%E7%88%AC%E8%99%AB/"/>
    
      <category term="Redis" scheme="https://www.itrhx.com/tags/Redis/"/>
    
  </entry>
  
  <entry>
    <title>Python3 爬虫学习笔记 C15</title>
    <link href="https://www.itrhx.com/2019/09/10/A45-Python3-spider-C15/"/>
    <id>https://www.itrhx.com/2019/09/10/A45-Python3-spider-C15/</id>
    <published>2019-09-10T11:46:13.293Z</published>
    <updated>2019-09-13T17:19:37.323Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><blockquote><center><font color="#1BC3FB" size="4">Python3 爬虫学习笔记第十五章 —— 【代理的基本使用】</font></center></blockquote><a id="more"></a><hr><h1 id="【15-1】代理初识"><a href="#【15-1】代理初识" class="headerlink" title="【15.1】代理初识"></a><font color="#ff0000">【15.1】代理初识</font></h1><p>大多数网站都有反爬虫机制，如果一段时间内同一个 IP 发送的请求过多，服务器就会拒绝访问，直接禁封该 IP，此时，设置代理即可解决这个问题，网络上有许多免费代理和付费代理，比如<a href="https://www.xicidaili.com/" target="_blank" rel="noopener">西刺代理</a>，<a href="http://www.goubanjia.com/" target="_blank" rel="noopener">全网代理 IP</a>，<a href="https://www.kuaidaili.com/" target="_blank" rel="noopener">快代理</a>等，设置代理需要用到的就是代理 IP 地址和端口号，如果电脑上装有代理软件（例如：酸酸乳SSR），软件一般会在本机创建 HTTP 或 SOCKS 代理服务，直接使用此代理也可以</p><h1 id="【15-2】urllib-库使用代理"><a href="#【15-2】urllib-库使用代理" class="headerlink" title="【15.2】urllib 库使用代理"></a><font color="#ff0000">【15.2】urllib 库使用代理</font></h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> urllib.error <span class="keyword">import</span> URLError</span><br><span class="line"><span class="keyword">from</span> urllib.request <span class="keyword">import</span> ProxyHandler, build_opener</span><br><span class="line"></span><br><span class="line">proxy = <span class="string">'127.0.0.1:1080'</span></span><br><span class="line">proxy_handler = ProxyHandler(&#123;</span><br><span class="line">    <span class="string">'http'</span>: <span class="string">'http://'</span> + proxy,</span><br><span class="line">    <span class="string">'https'</span>: <span class="string">'https://'</span> + proxy</span><br><span class="line">&#125;)</span><br><span class="line">opener = build_opener(proxy_handler)</span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    response = opener.open(<span class="string">'http://httpbin.org/get'</span>)</span><br><span class="line">    print(response.read().decode(<span class="string">'utf8'</span>))</span><br><span class="line"><span class="keyword">except</span> URLError <span class="keyword">as</span> e:</span><br><span class="line">    print(e.reason)</span><br></pre></td></tr></table></figure><p><a href="http://httpbin.org/get" target="_blank" rel="noopener">http://httpbin.org/get</a> 是一个请求测试站点，借助 ProxyHandler 设置代理，参数为字典类型，键名为协议类型，键值为代理，代理的写法：<code>proxy = &#39;127.0.0.1:1080&#39;</code>，其中 127.0.0.1 为 IP 地址，1080 为端口号，这里表示本机的代理软件已经在本地 1080 端口创建了代理服务，代理前面需要加上 http 或者 https 协议，当请求的链接为 http 协议时，ProxyHandler 会自动调用 http 代理，同理，当请求的链接为 https 协议时，ProxyHandler 会自动调用 https 代理，<code>build_opener()</code> 方法传入 ProxyHandler 对象来创建一个 opener，调用 <code>open()</code> 方法传入一个 url 即可通过代理访问该链接，运行结果为一个 JSON，origin 字段为此时客户端的 IP</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="string">"args"</span>: &#123;&#125;, </span><br><span class="line">  <span class="string">"headers"</span>: &#123;</span><br><span class="line">    <span class="string">"Accept-Encoding"</span>: <span class="string">"identity"</span>, </span><br><span class="line">    <span class="string">"Host"</span>: <span class="string">"httpbin.org"</span>, </span><br><span class="line">    <span class="string">"User-Agent"</span>: <span class="string">"Python-urllib/3.6"</span></span><br><span class="line">  &#125;, </span><br><span class="line">  <span class="string">"origin"</span>: <span class="string">"168.70.60.141, 168.70.60.141"</span>, </span><br><span class="line">  <span class="string">"url"</span>: <span class="string">"https://httpbin.org/get"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果是需要认证的代理，只需要在代理前面加入代理认证的用户名密码即可：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> urllib.error <span class="keyword">import</span> URLError</span><br><span class="line"><span class="keyword">from</span> urllib.request <span class="keyword">import</span> ProxyHandler, build_opener</span><br><span class="line"></span><br><span class="line">proxy = <span class="string">'username:password@127.0.0.1:1080'</span></span><br><span class="line">proxy_handler = ProxyHandler(&#123;</span><br><span class="line">    <span class="string">'http'</span>: <span class="string">'http://'</span> + proxy,</span><br><span class="line">    <span class="string">'https'</span>: <span class="string">'https://'</span> + proxy</span><br><span class="line">&#125;)</span><br><span class="line">opener = build_opener(proxy_handler)</span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    response = opener.open(<span class="string">'http://httpbin.org/get'</span>)</span><br><span class="line">    print(response.read().decode(<span class="string">'utf8'</span>))</span><br><span class="line"><span class="keyword">except</span> URLError <span class="keyword">as</span> e:</span><br><span class="line">    print(e.reason)</span><br></pre></td></tr></table></figure><p>如果代理是 SOCKS5 类型，需要用到 <code>socks</code> 模块，设置代理方法如下：</p><blockquote><p>扩展：SOCKS5 是一个代理协议，它在使用TCP/IP协议通讯的前端机器和服务器机器之间扮演一个中介角色，使得内部网中的前端机器变得能够访问 Internet 网中的服务器，或者使通讯更加安全</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> socks</span><br><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"><span class="keyword">from</span> urllib <span class="keyword">import</span> request</span><br><span class="line"><span class="keyword">from</span> urllib.error <span class="keyword">import</span> URLError</span><br><span class="line"></span><br><span class="line">socks.set_default_proxy(socks.SOCKS5, <span class="string">'127.0.0.1'</span>, <span class="number">1080</span>)</span><br><span class="line">socket.socket = socks.socksocket</span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    response = request.urlopen(<span class="string">'http://httpbin.org/get'</span>)</span><br><span class="line">    print(response.read().decode(<span class="string">'utf-8'</span>))</span><br><span class="line"><span class="keyword">except</span> URLError <span class="keyword">as</span> e:</span><br><span class="line">    print(e.reason)</span><br></pre></td></tr></table></figure><h1 id="【15-3】requests-库使用代理"><a href="#【15-3】requests-库使用代理" class="headerlink" title="【15.3】requests 库使用代理"></a><font color="#ff0000">【15.3】requests 库使用代理</font></h1><p>requests 库使用代理只需要传入 proxies 参数即可：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">proxy = <span class="string">'127.0.0.1:1080'</span></span><br><span class="line">proxies = (&#123;</span><br><span class="line">    <span class="string">'http'</span>: <span class="string">'http://'</span> + proxy,</span><br><span class="line">    <span class="string">'https'</span>: <span class="string">'https://'</span> + proxy</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    response = requests.get(<span class="string">'http://httpbin.org/get'</span>, proxies=proxies)</span><br><span class="line">    print(response.text)</span><br><span class="line"><span class="keyword">except</span> requests.exceptions.ChunkedEncodingError <span class="keyword">as</span> e:</span><br><span class="line">    print(<span class="string">'Error'</span>, e.args)</span><br></pre></td></tr></table></figure><p>输出结果：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="string">"args"</span>: &#123;&#125;, </span><br><span class="line">  <span class="string">"headers"</span>: &#123;</span><br><span class="line">    <span class="string">"Accept"</span>: <span class="string">"*/*"</span>, </span><br><span class="line">    <span class="string">"Accept-Encoding"</span>: <span class="string">"gzip, deflate"</span>, </span><br><span class="line">    <span class="string">"Host"</span>: <span class="string">"httpbin.org"</span>, </span><br><span class="line">    <span class="string">"User-Agent"</span>: <span class="string">"python-requests/2.22.0"</span></span><br><span class="line">  &#125;, </span><br><span class="line">  <span class="string">"origin"</span>: <span class="string">"168.70.60.141, 168.70.60.141"</span>, </span><br><span class="line">  <span class="string">"url"</span>: <span class="string">"https://httpbin.org/get"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>同样的，如果是需要认证的代理，也只需要在代理前面加入代理认证的用户名密码即可：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">proxy = <span class="string">'username:password@127.0.0.1:1080'</span></span><br><span class="line">proxies = (&#123;</span><br><span class="line">    <span class="string">'http'</span>: <span class="string">'http://'</span> + proxy,</span><br><span class="line">    <span class="string">'https'</span>: <span class="string">'https://'</span> + proxy</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    response = requests.get(<span class="string">'http://httpbin.org/get'</span>, proxies=proxies)</span><br><span class="line">    print(response.text)</span><br><span class="line"><span class="keyword">except</span> requests.exceptions.ChunkedEncodingError <span class="keyword">as</span> e:</span><br><span class="line">    print(<span class="string">'Error'</span>, e.args)</span><br></pre></td></tr></table></figure><p>如果代理是 SOCKS5 类型，需要用到  <code>requests[socks]</code> 模块或者 <code>socks</code> 模块，使用 <code>requests[socks]</code> 模块时设置代理方法如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">proxy = <span class="string">'127.0.0.1:1080'</span></span><br><span class="line">proxies = &#123;</span><br><span class="line">    <span class="string">'http'</span>: <span class="string">'socks5://'</span> + proxy,</span><br><span class="line">    <span class="string">'https'</span>: <span class="string">'socks5://'</span> + proxy</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    response = requests.get(<span class="string">'http://httpbin.org/get'</span>, proxies=proxies)</span><br><span class="line">    print(response.text)</span><br><span class="line"><span class="keyword">except</span> requests.exceptions.ConnectionError <span class="keyword">as</span> e:</span><br><span class="line">    print(<span class="string">'Error'</span>, e.args)</span><br></pre></td></tr></table></figure><p>使用 <code>socks</code> 模块时设置代理方法如下（此类方法为全局设置）：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> socks</span><br><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"></span><br><span class="line">socks.set_default_proxy(socks.SOCKS5, <span class="string">'127.0.0.1'</span>, <span class="number">1080</span>)</span><br><span class="line">socket.socket = socks.socksocket</span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    response = requests.get(<span class="string">'http://httpbin.org/get'</span>)</span><br><span class="line">    print(response.text)</span><br><span class="line"><span class="keyword">except</span> requests.exceptions.ConnectionError <span class="keyword">as</span> e:</span><br><span class="line">    print(<span class="string">'Error'</span>, e.args)</span><br></pre></td></tr></table></figure><h1 id="【15-4】Selenium-使用代理"><a href="#【15-4】Selenium-使用代理" class="headerlink" title="【15.4】Selenium 使用代理"></a><font color="#ff0000">【15.4】Selenium 使用代理</font></h1><h2 id="【15-4-1】Chrome"><a href="#【15-4-1】Chrome" class="headerlink" title="【15.4.1】Chrome"></a><font color="#1BC3FB">【15.4.1】Chrome</font></h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"></span><br><span class="line">proxy = <span class="string">'127.0.0.1:1080'</span></span><br><span class="line">chrome_options = webdriver.ChromeOptions()</span><br><span class="line">chrome_options.add_argument(<span class="string">'--proxy-server=http://'</span> + proxy)</span><br><span class="line">path = <span class="string">r'F:\PycharmProjects\Python3爬虫\chromedriver.exe'</span></span><br><span class="line">browser = webdriver.Chrome(executable_path=path, chrome_options=chrome_options)</span><br><span class="line">browser.get(<span class="string">'http://httpbin.org/get'</span>)</span><br></pre></td></tr></table></figure><p>通过 ChromeOptions 来设置代理，在创建 Chrome 对象的时候用 chrome_options 参数传递即可，访问目标链接后显示如下信息：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="string">"args"</span>: &#123;&#125;, </span><br><span class="line">  <span class="string">"headers"</span>: &#123;</span><br><span class="line">    <span class="string">"Accept"</span>: <span class="string">"text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3"</span>, </span><br><span class="line">    <span class="string">"Accept-Encoding"</span>: <span class="string">"gzip, deflate"</span>, </span><br><span class="line">    <span class="string">"Accept-Language"</span>: <span class="string">"zh-CN,zh;q=0.9"</span>, </span><br><span class="line">    <span class="string">"Host"</span>: <span class="string">"httpbin.org"</span>, </span><br><span class="line">    <span class="string">"Upgrade-Insecure-Requests"</span>: <span class="string">"1"</span>, </span><br><span class="line">    <span class="string">"User-Agent"</span>: <span class="string">"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/75.0.3770.142 Safari/537.36"</span></span><br><span class="line">  &#125;, </span><br><span class="line">  <span class="string">"origin"</span>: <span class="string">"168.70.60.141, 168.70.60.141"</span>, </span><br><span class="line">  <span class="string">"url"</span>: <span class="string">"https://httpbin.org/get"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果是认证代理，则设置方法如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.chrome.options <span class="keyword">import</span> Options</span><br><span class="line"><span class="keyword">import</span> zipfile</span><br><span class="line"></span><br><span class="line">ip = <span class="string">'127.0.0.1'</span></span><br><span class="line">port = <span class="number">1080</span></span><br><span class="line">username = <span class="string">'username'</span></span><br><span class="line">password = <span class="string">'password'</span></span><br><span class="line"></span><br><span class="line">manifest_json = <span class="string">"""&#123;"version":"1.0.0","manifest_version": 2,"name":"Chrome Proxy","permissions": ["proxy","tabs","unlimitedStorage","storage","&lt;all_urls&gt;","webRequest","webRequestBlocking"],"background": &#123;"scripts": ["background.js"]</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"></span><br><span class="line">background_js =<span class="string">"""</span></span><br><span class="line"><span class="string">var config = &#123;</span></span><br><span class="line"><span class="string">        mode: "fixed_servers",</span></span><br><span class="line"><span class="string">        rules: &#123;</span></span><br><span class="line"><span class="string">          singleProxy: &#123;</span></span><br><span class="line"><span class="string">            scheme: "http",</span></span><br><span class="line"><span class="string">            host: "%(ip) s",</span></span><br><span class="line"><span class="string">            port: %(port) s</span></span><br><span class="line"><span class="string">          &#125;</span></span><br><span class="line"><span class="string">        &#125;</span></span><br><span class="line"><span class="string">      &#125;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">chrome.proxy.settings.set(&#123;value: config, scope: "regular"&#125;, function() &#123;&#125;);</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">function callbackFn(details) &#123;</span></span><br><span class="line"><span class="string">    return &#123;</span></span><br><span class="line"><span class="string">        authCredentials: &#123;username: "%(username) s",</span></span><br><span class="line"><span class="string">            password: "%(password) s"</span></span><br><span class="line"><span class="string">        &#125;</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">chrome.webRequest.onAuthRequired.addListener(</span></span><br><span class="line"><span class="string">            callbackFn,</span></span><br><span class="line"><span class="string">            &#123;urls: ["&lt;all_urls&gt;"]&#125;,</span></span><br><span class="line"><span class="string">            ['blocking']</span></span><br><span class="line"><span class="string">)</span></span><br><span class="line"><span class="string">"""</span> % &#123;<span class="string">'ip'</span>: ip, <span class="string">'port'</span>: port, <span class="string">'username'</span>: username, <span class="string">'password'</span>: password&#125;</span><br><span class="line"></span><br><span class="line">plugin_file = <span class="string">'proxy_auth_plugin.zip'</span></span><br><span class="line"><span class="keyword">with</span> zipfile.ZipFile(plugin_file, <span class="string">'w'</span>) <span class="keyword">as</span> zp:</span><br><span class="line">    zp.writestr(<span class="string">"manifest.json"</span>, manifest_json)</span><br><span class="line">    zp.writestr(<span class="string">"background.js"</span>, background_js)</span><br><span class="line">chrome_options = Options()</span><br><span class="line">chrome_options.add_argument(<span class="string">"--start-maximized"</span>)</span><br><span class="line">path = <span class="string">r'F:\PycharmProjects\Python3爬虫\chromedriver.exe'</span></span><br><span class="line">chrome_options.add_extension(plugin_file)</span><br><span class="line">browser = webdriver.Chrome(executable_path=path, chrome_options=chrome_options)</span><br><span class="line">browser.get(<span class="string">'http://httpbin.org/get'</span>)</span><br></pre></td></tr></table></figure><p>需要在本地创建一个 manifest.json 配置文件和 background.js 脚本来设置认证代理。运行代码之后本地会生成一个 proxy_auth_plugin.zip 文件来保存当前配置</p><h2 id="【15-4-1】PhantomJS"><a href="#【15-4-1】PhantomJS" class="headerlink" title="【15.4.1】PhantomJS"></a><font color="#1BC3FB">【15.4.1】PhantomJS</font></h2><p>借助 service_args 参数，也就是命令行参数即可设置代理：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"></span><br><span class="line">service_args = [</span><br><span class="line">    <span class="string">'--proxy=127.0.0.1:1080'</span>,</span><br><span class="line">    <span class="string">'--proxy-type=http'</span></span><br><span class="line">]</span><br><span class="line">path = <span class="string">r'F:\PycharmProjects\Python3爬虫\phantomjs-2.1.1\bin\phantomjs.exe'</span></span><br><span class="line">browser = webdriver.PhantomJS(executable_path=path, service_args=service_args)</span><br><span class="line">browser.get(<span class="string">'http://httpbin.org/get'</span>)</span><br><span class="line">print(browser.page_source)</span><br></pre></td></tr></table></figure><p>运行结果：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;html&gt;&lt;head&gt;&lt;/head&gt;&lt;body&gt;&lt;pre style="word-wrap: break-word; white-space: pre-wrap;"&gt;&#123;</span><br><span class="line">  <span class="string">"args"</span>: &#123;&#125;, </span><br><span class="line">  <span class="string">"headers"</span>: &#123;</span><br><span class="line">    <span class="string">"Accept"</span>: <span class="string">"text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8"</span>, </span><br><span class="line">    <span class="string">"Accept-Encoding"</span>: <span class="string">"gzip, deflate"</span>, </span><br><span class="line">    <span class="string">"Accept-Language"</span>: <span class="string">"zh-CN,en,*"</span>, </span><br><span class="line">    <span class="string">"Host"</span>: <span class="string">"httpbin.org"</span>, </span><br><span class="line">    <span class="string">"User-Agent"</span>: <span class="string">"Mozilla/5.0 (Windows NT 6.2; WOW64) AppleWebKit/538.1 (KHTML, like Gecko) PhantomJS/2.1.1 Safari/538.1"</span></span><br><span class="line">  &#125;, </span><br><span class="line">  <span class="string">"origin"</span>: <span class="string">"168.70.60.141, 168.70.60.141"</span>, </span><br><span class="line">  <span class="string">"url"</span>: <span class="string">"https://httpbin.org/get"</span></span><br><span class="line">&#125;</span><br><span class="line">&lt;/pre&gt;&lt;/body&gt;&lt;/html&gt;</span><br></pre></td></tr></table></figure><p>如果是需要认证的代理，只需要在 service_args 参数加入 –proxy-auth 选项即可：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"></span><br><span class="line">service_args = [</span><br><span class="line">    <span class="string">'--proxy=127.0.0.1:1080'</span>,</span><br><span class="line">    <span class="string">'--proxy-type=http'</span>,</span><br><span class="line">    <span class="string">'--proxy-auth=username:password'</span></span><br><span class="line">]</span><br><span class="line">path = <span class="string">r'F:\PycharmProjects\Python3爬虫\phantomjs-2.1.1\bin\phantomjs.exe'</span></span><br><span class="line">browser = webdriver.PhantomJS(executable_path=path, service_args=service_args)</span><br><span class="line">browser.get(<span class="string">'http://httpbin.org/get'</span>)</span><br><span class="line">print(browser.page_source)</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;center&gt;&lt;font color=&quot;#1BC3FB&quot; size=&quot;4&quot;&gt;Python3 爬虫学习笔记第十五章 —— 【代理的基本使用】&lt;/font&gt;&lt;/center&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="Python3 学习笔记" scheme="https://www.itrhx.com/categories/Python3-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
      <category term="Python3 爬虫" scheme="https://www.itrhx.com/categories/Python3-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/Python3-%E7%88%AC%E8%99%AB/"/>
    
    
      <category term="爬虫" scheme="https://www.itrhx.com/tags/%E7%88%AC%E8%99%AB/"/>
    
      <category term="代理" scheme="https://www.itrhx.com/tags/%E4%BB%A3%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>Python3 爬虫学习笔记 C14</title>
    <link href="https://www.itrhx.com/2019/09/08/A44-Python3-spider-C14/"/>
    <id>https://www.itrhx.com/2019/09/08/A44-Python3-spider-C14/</id>
    <published>2019-09-07T17:38:41.491Z</published>
    <updated>2019-09-13T17:19:32.764Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><blockquote><center><font color="#1BC3FB" size="4">Python3 爬虫学习笔记第十四章 —— 【验证码对抗系列 — 点触验证码】</font></center></blockquote><a id="more"></a><hr><h1 id="【14-1】关于点触验证码"><a href="#【14-1】关于点触验证码" class="headerlink" title="【14.1】关于点触验证码"></a><font color="#ff0000">【14.1】关于点触验证码</font></h1><p>点触验证码是由杭州微触科技有限公司研发的新一代的互联网验证码，使用点击的形式完成验证，采用专利的印刷算法以及加密算法，保证每次请求到的验证图具有极高的安全性，常见的点触验证码如下：</p><fancybox><br><img src="https://cdn.jsdelivr.net/gh/TRHX/ImageHosting/ITRHX-PIC/A44/01.png" alt="01"><br></fancybox><hr><h1 id="【14-2】点触验证码攻克思路"><a href="#【14-2】点触验证码攻克思路" class="headerlink" title="【14.2】点触验证码攻克思路"></a><font color="#ff0000">【14.2】点触验证码攻克思路</font></h1><p>点触验证码相对其他类型验证码比较复杂，如果依靠 OCR 图像识别点触验证码，则识别难度非常大，此时就要用到互联网的验证码服务平台，这些服务平台全部都是人工在线识别，准确率非常高，原理就是先将验证码图片提交给平台，平台会返回识别结果在图片中的坐标位置，然后我们再解析坐标模拟点击即可，常见的打码平台有超级鹰、云打码等，打码平台是收费的，拿超级鹰来说，1元 = 1000题分，识别一次验证码将花费一定的题分，不同类型验证码需要的题分不同，验证码越复杂所需题分越高，比如 7 位中文汉字需要 70 题分，常见 4 ~ 6 位英文数字只要 10 题分，其他打码平台价格也都差不多</p><p>以下以<a href="http://www.chaojiying.com/" target="_blank" rel="noopener">超级鹰打码平台</a>和<a href="https://www.12306.cn/" target="_blank" rel="noopener">中国铁路12306官网</a>来做练习</p><hr><h1 id="【14-3】模拟登录-12306-—-总体思路"><a href="#【14-3】模拟登录-12306-—-总体思路" class="headerlink" title="【14.3】模拟登录 12306 — 总体思路"></a><font color="#ff0000">【14.3】模拟登录 12306 — 总体思路</font></h1><p>首先在超级鹰打码平台注册账号并申请一个软件 ID，官网：<a href="http://www.chaojiying.com/" target="_blank" rel="noopener">http://www.chaojiying.com/</a> ，先充值一块钱得到 1000 题分，观察 12306 官网，发现验证码是要我们点击所有满足条件的图片，一般有 1~4 张图片满足要求，由此可确定在超级鹰打码平台的验证码类型为 9004（坐标多选,返回1~4个坐标,如:x1,y1|x2,y2|x3,y3）， 获取其 Python API：<a href="http://www.chaojiying.com/download/Chaojiying_Python.rar" target="_blank" rel="noopener">http://www.chaojiying.com/download/Chaojiying_Python.rar</a> ，然后用 Selenium 模拟登陆，获取到验证码，并将验证码发送给超级鹰后台，返回识别图片的坐标，最后模拟点击即可，整个过程的实现由主程序 <code>12306.py</code> 和超级鹰 API <code>chaojiying.py</code> 组成</p><p>整个程序包含的函数：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">()</span>:</span> 初始化 WebDriver、Chaojiying 对象等</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">crack</span><span class="params">()</span>:</span> 破解入口、获取、识别验证码、模拟登录</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">open</span><span class="params">()</span>:</span> 账号密码输入</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_screenshot</span><span class="params">()</span>:</span> 整个页面截图</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_touclick_element</span><span class="params">()</span>:</span> 获取验证码位置</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_position</span><span class="params">()</span>:</span> 获取验证码坐标</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_touclick_image</span><span class="params">()</span>:</span> 剪裁验证码部分</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_points</span><span class="params">(self, captcha_result)</span>:</span> 分析超级鹰返回的坐标</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">touch_click_words</span><span class="params">(self, locations)</span>:</span> 模拟点击符合要求的图片</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">login</span><span class="params">(self)</span>:</span> 点击登陆按钮，完成模拟登录</span><br></pre></td></tr></table></figure><p>整个程序用到的库：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">from</span> io <span class="keyword">import</span> BytesIO</span><br><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image</span><br><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.chrome.options <span class="keyword">import</span> Options</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver <span class="keyword">import</span> ActionChains</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.common.by <span class="keyword">import</span> By</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.support.ui <span class="keyword">import</span> WebDriverWait</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.support <span class="keyword">import</span> expected_conditions <span class="keyword">as</span> EC</span><br><span class="line"><span class="keyword">from</span> chaojiying <span class="keyword">import</span> Chaojiying</span><br><span class="line"><span class="keyword">from</span> selenium.common.exceptions <span class="keyword">import</span> TimeoutException</span><br></pre></td></tr></table></figure><hr><h1 id="【14-4】主函数"><a href="#【14-4】主函数" class="headerlink" title="【14.4】主函数"></a><font color="#ff0000">【14.4】主函数</font></h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    crack = CrackTouClick()</span><br><span class="line">    crack.crack()</span><br></pre></td></tr></table></figure><hr><h1 id="【14-5】初始化函数"><a href="#【14-5】初始化函数" class="headerlink" title="【14.5】初始化函数"></a><font color="#ff0000">【14.5】初始化函数</font></h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">USERNAME = <span class="string">'155********'</span></span><br><span class="line">PASSWORD = <span class="string">'***********'</span></span><br><span class="line"></span><br><span class="line">CHAOJIYING_USERNAME = <span class="string">'*******'</span></span><br><span class="line">CHAOJIYING_PASSWORD = <span class="string">'*******'</span></span><br><span class="line">CHAOJIYING_SOFT_ID = <span class="string">'********'</span></span><br><span class="line">CHAOJIYING_KIND = <span class="string">'9004'</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CrackTouClick</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.url = <span class="string">'https://kyfw.12306.cn/otn/resources/login.html'</span></span><br><span class="line">        path = <span class="string">r'F:\PycharmProjects\Python3爬虫\chromedriver.exe'</span></span><br><span class="line">        chrome_options = Options()</span><br><span class="line">        chrome_options.add_argument(<span class="string">'--start-maximized'</span>)</span><br><span class="line">        self.browser = webdriver.Chrome(executable_path=path, chrome_options=chrome_options)</span><br><span class="line">        self.wait = WebDriverWait(self.browser, <span class="number">20</span>)</span><br><span class="line">        self.email = USERNAME</span><br><span class="line">        self.password = PASSWORD</span><br><span class="line">        self.chaojiying = Chaojiying_Client(CHAOJIYING_USERNAME, CHAOJIYING_PASSWORD, CHAOJIYING_SOFT_ID)</span><br></pre></td></tr></table></figure><p>定义 12306 账号（<code>USERNAME</code>）、密码（<code>PASSWORD</code>）、超级鹰用户名（<code>CHAOJIYING_USERNAME</code>）、超级鹰登录密码（<code>CHAOJIYING_PASSWORD</code>）、超级鹰软件 ID（<code>CHAOJIYING_SOFT_ID</code>）、验证码类型（<code>CHAOJIYING_KIND</code>），登录链接 url：<a href="https://kyfw.12306.cn/otn/resources/login.html" target="_blank" rel="noopener">https://kyfw.12306.cn/otn/resources/login.html</a> ，谷歌浏览器驱动的目录（<code>path</code>），浏览器启动参数，并将相关参数传递给超级鹰 API</p><hr><h1 id="【14-6】破解入口函数"><a href="#【14-6】破解入口函数" class="headerlink" title="【14.6】破解入口函数"></a><font color="#ff0000">【14.6】破解入口函数</font></h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">crack</span><span class="params">(self)</span>:</span></span><br><span class="line">    self.open()</span><br><span class="line">    image = self.get_touclick_image()</span><br><span class="line">    bytes_array = BytesIO()</span><br><span class="line">    image.save(bytes_array, format=<span class="string">'PNG'</span>)</span><br><span class="line">    result = self.chaojiying.PostPic(bytes_array.getvalue(), CHAOJIYING_KIND)</span><br><span class="line">    print(result)</span><br><span class="line">    locations = self.get_points(result)</span><br><span class="line">    self.touch_click_words(locations)</span><br><span class="line">    self.login()</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        success = self.wait.until(EC.text_to_be_present_in_element((By.CSS_SELECTOR, <span class="string">'.welcome-name'</span>), <span class="string">'用户姓名'</span>))</span><br><span class="line">        print(success)</span><br><span class="line">        cc = self.browser.find_element(By.CSS_SELECTOR, <span class="string">'.welcome-name'</span>)</span><br><span class="line">        print(cc.text)</span><br><span class="line">    <span class="keyword">except</span> TimeoutException:</span><br><span class="line">        self.chaojiying.ReportError(result[<span class="string">'pic_id'</span>])</span><br><span class="line">        self.crack()</span><br></pre></td></tr></table></figure><p>调用 <code>open()</code> 函数输入账号密码</p><p>调用 <code>get_touclick_image()</code> 函数获取验证码图片</p><p>利用超级鹰 Python API <code>PostPic()</code> 方法即可把图片发送给超级鹰后台，发送的图像是字节流格式，返回的结果是一个 JSON，如果识别成功，典型的返回结果类似于：<code>{&#39;err_no&#39;: 0, &#39;err_str&#39;: &#39;OK&#39;, &#39;pic_id&#39;: &#39;6002001380949200001&#39;, &#39;pic_str&#39;: &#39;132,127|56,77&#39;, &#39;md5&#39;: &#39;1f8e1d4bef8b11484cb1f1f34299865b&#39;}</code>，其中，pic_str 就是识别的文字的坐标，是以字符串形式返回的，每个坐标都以 | 分隔</p><p>调用 <code>get_points()</code> 函数解析超级鹰识别结果</p><p>调用 <code>touch_click_words()</code> 函数对符合要求的图片进行点击，然后点击登陆按钮模拟登陆</p><p>使用 <code>try-except</code> 语句判断是否出现了用户信息，判断依据是是否有用户姓名的出现，出现的姓名和实际姓名一致则登录成功，如果失败了就重试，超级鹰会返回该分值</p><hr><h1 id="【14-7】账号密码输入函数"><a href="#【14-7】账号密码输入函数" class="headerlink" title="【14.7】账号密码输入函数"></a><font color="#ff0000">【14.7】账号密码输入函数</font></h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">open</span><span class="params">(self)</span>:</span></span><br><span class="line">    self.browser.get(self.url)</span><br><span class="line">    login = self.wait.until(EC.presence_of_element_located((By.CSS_SELECTOR, <span class="string">'.login-hd-account'</span>)))</span><br><span class="line">    login.click()</span><br><span class="line">    time.sleep(<span class="number">3</span>)</span><br><span class="line">    username = self.wait.until(EC.presence_of_element_located((By.CSS_SELECTOR, <span class="string">'input#J-userName'</span>)))</span><br><span class="line">    password = self.wait.until(EC.presence_of_element_located((By.CSS_SELECTOR, <span class="string">'input#J-password'</span>)))</span><br><span class="line">    username.send_keys(self.email)</span><br><span class="line">    password.send_keys(self.password)</span><br></pre></td></tr></table></figure><p>分析页面可知，登陆页面 URL 为：<a href="https://kyfw.12306.cn/otn/resources/login.html" target="_blank" rel="noopener">https://kyfw.12306.cn/otn/resources/login.html</a> ，该页面默认出现的是扫描二维码登陆，所以要先点击账号登录，找到该 CSS 元素为 <code>login-hd-account</code>，调用 <code>click()</code> 方法实现模拟点击，此时出现账号密码输入框，同样找到其 ID 分别为 <code>J-userName</code> 和 <code>J-password</code>，调用 <code>send_keys()</code> 方法输入账号密码</p><hr><h1 id="【14-8】页面截图函数"><a href="#【14-8】页面截图函数" class="headerlink" title="【14.8】页面截图函数"></a><font color="#ff0000">【14.8】页面截图函数</font></h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_screenshot</span><span class="params">(self)</span>:</span></span><br><span class="line">    screenshot = self.browser.get_screenshot_as_png()</span><br><span class="line">    screenshot = Image.open(BytesIO(screenshot))</span><br><span class="line">    <span class="keyword">return</span> screenshot</span><br></pre></td></tr></table></figure><p>对整个页面进行截图</p><hr><h1 id="【14-9】验证码元素查找函数"><a href="#【14-9】验证码元素查找函数" class="headerlink" title="【14.9】验证码元素查找函数"></a><font color="#ff0000">【14.9】验证码元素查找函数</font></h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_touclick_element</span><span class="params">(self)</span>:</span></span><br><span class="line">    element = self.wait.until(EC.presence_of_element_located((By.CSS_SELECTOR, <span class="string">'.login-pwd-code'</span>)))</span><br><span class="line">    <span class="keyword">return</span> element</span><br></pre></td></tr></table></figure><p>同样分析页面，验证码所在位置的 CSS 为 <code>login-pwd-code</code></p><hr><h1 id="【14-10】获取验证码坐标函数"><a href="#【14-10】获取验证码坐标函数" class="headerlink" title="【14.10】获取验证码坐标函数"></a><font color="#ff0000">【14.10】获取验证码坐标函数</font></h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_position</span><span class="params">(self)</span>:</span></span><br><span class="line">    element = self.get_touclick_element()</span><br><span class="line">    time.sleep(<span class="number">3</span>)</span><br><span class="line">    location = element.location</span><br><span class="line">    size = element.size</span><br><span class="line">    top, bottom, left, right = location[<span class="string">'y'</span>], location[<span class="string">'y'</span>] + size[<span class="string">'height'</span>], location[<span class="string">'x'</span>], location[<span class="string">'x'</span>] + size[<span class="string">'width'</span>]</span><br><span class="line">    <span class="keyword">return</span> (top, bottom, left, right)</span><br></pre></td></tr></table></figure><p>location 属性可以返回该图片对象在浏览器中的位置，坐标轴是以屏幕左上角为原点，x 轴向右递增，y 轴向下递增，size 属性可以返回该图片对象的高度和宽度，由此可以得到验证码的位置信息</p><hr><h1 id="【14-11】验证码剪裁函数"><a href="#【14-11】验证码剪裁函数" class="headerlink" title="【14.11】验证码剪裁函数"></a><font color="#ff0000">【14.11】验证码剪裁函数</font></h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_touclick_image</span><span class="params">(self, name=<span class="string">'12306.png'</span>)</span>:</span></span><br><span class="line">    top, bottom, left, right = self.get_position()</span><br><span class="line">    screenshot = self.get_screenshot()</span><br><span class="line">    captcha = screenshot.crop((left, top, right, bottom))</span><br><span class="line">    captcha.save(name)</span><br><span class="line">    <span class="keyword">return</span> captcha</span><br></pre></td></tr></table></figure><p>根据验证码的坐标信息，对页面截图进行剪裁，得到验证码部分，将其保存为 12306.png</p><hr><h1 id="【14-12】验证码坐标解析函数"><a href="#【14-12】验证码坐标解析函数" class="headerlink" title="【14.12】验证码坐标解析函数"></a><font color="#ff0000">【14.12】验证码坐标解析函数</font></h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_points</span><span class="params">(self, captcha_result)</span>:</span></span><br><span class="line">    groups = captcha_result.get(<span class="string">'pic_str'</span>).split(<span class="string">'|'</span>)</span><br><span class="line">    locations = [[int(number) <span class="keyword">for</span> number <span class="keyword">in</span> group.split(<span class="string">','</span>)] <span class="keyword">for</span> group <span class="keyword">in</span> groups]</span><br><span class="line">    <span class="keyword">return</span> locations</span><br></pre></td></tr></table></figure><p><code>get_points()</code> 方法将超级鹰的验证码识别结果变成列表的形式</p><hr><h1 id="【14-13】验证码模拟点击函数"><a href="#【14-13】验证码模拟点击函数" class="headerlink" title="【14.13】验证码模拟点击函数"></a><font color="#ff0000">【14.13】验证码模拟点击函数</font></h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">touch_click_words</span><span class="params">(self, locations)</span>:</span></span><br><span class="line">    <span class="keyword">for</span> location <span class="keyword">in</span> locations:</span><br><span class="line">        print(location)</span><br><span class="line">        ActionChains(self.browser).move_to_element_with_offset(self.get_touclick_element(), location[<span class="number">0</span>]/<span class="number">1.25</span>, location[<span class="number">1</span>]/<span class="number">1.25</span>).click().perform()</span><br></pre></td></tr></table></figure><p><code>touch_click_words()</code> 方法通过调用 <code>move_to_element_with_offset()</code> 方法依次传入解析后的坐标，点击即可</p><hr><h1 id="【14-14】模拟点击登陆函数"><a href="#【14-14】模拟点击登陆函数" class="headerlink" title="【14.14】模拟点击登陆函数"></a><font color="#ff0000">【14.14】模拟点击登陆函数</font></h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">login</span><span class="params">(self)</span>:</span></span><br><span class="line">    submit = self.wait.until(EC.element_to_be_clickable((By.ID, <span class="string">'J-login'</span>)))</span><br><span class="line">    submit.click()</span><br></pre></td></tr></table></figure><p>分析页面，找到登陆按钮的 ID 为 <code>J-login</code>，调用 <code>click()</code> 方法模拟点击按钮实现登录</p><hr><h1 id="【14-15】效果实现动图"><a href="#【14-15】效果实现动图" class="headerlink" title="【14.15】效果实现动图"></a><font color="#ff0000">【14.15】效果实现动图</font></h1><p>最终实现效果图：（关键信息已经过打码处理）</p><fancybox><br><img src="https://cdn.jsdelivr.net/gh/TRHX/ImageHosting/ITRHX-PIC/A44/12306.gif" alt="02"><br></fancybox><hr><h1 id="【14-16】完整代码"><a href="#【14-16】完整代码" class="headerlink" title="【14.16】完整代码"></a><font color="#ff0000">【14.16】完整代码</font></h1><p><code>12306.py</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">from</span> io <span class="keyword">import</span> BytesIO</span><br><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image</span><br><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.chrome.options <span class="keyword">import</span> Options</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver <span class="keyword">import</span> ActionChains</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.common.by <span class="keyword">import</span> By</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.support.ui <span class="keyword">import</span> WebDriverWait</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.support <span class="keyword">import</span> expected_conditions <span class="keyword">as</span> EC</span><br><span class="line"><span class="keyword">from</span> chaojiying <span class="keyword">import</span> Chaojiying_Client</span><br><span class="line"><span class="keyword">from</span> selenium.common.exceptions <span class="keyword">import</span> TimeoutException</span><br><span class="line"></span><br><span class="line">USERNAME = <span class="string">'155********'</span></span><br><span class="line">PASSWORD = <span class="string">'***********'</span></span><br><span class="line"></span><br><span class="line">CHAOJIYING_USERNAME = <span class="string">'***********'</span></span><br><span class="line">CHAOJIYING_PASSWORD = <span class="string">'***********'</span></span><br><span class="line">CHAOJIYING_SOFT_ID = <span class="string">'******'</span></span><br><span class="line">CHAOJIYING_KIND = <span class="string">'9004'</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CrackTouClick</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span>     <span class="comment">#登陆</span></span><br><span class="line">        self.url = <span class="string">'https://kyfw.12306.cn/otn/resources/login.html'</span></span><br><span class="line">        path = <span class="string">r'F:\PycharmProjects\Python3爬虫\chromedriver.exe'</span></span><br><span class="line">        chrome_options = Options()</span><br><span class="line">        chrome_options.add_argument(<span class="string">'--start-maximized'</span>)</span><br><span class="line">        self.browser = webdriver.Chrome(executable_path=path, chrome_options=chrome_options)</span><br><span class="line">        self.wait = WebDriverWait(self.browser, <span class="number">20</span>)</span><br><span class="line">        self.email = USERNAME</span><br><span class="line">        self.password = PASSWORD</span><br><span class="line">        self.chaojiying = Chaojiying_Client(CHAOJIYING_USERNAME, CHAOJIYING_PASSWORD, CHAOJIYING_SOFT_ID)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">crack</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.open()</span><br><span class="line">        image = self.get_touclick_image()</span><br><span class="line">        bytes_array = BytesIO()</span><br><span class="line">        image.save(bytes_array, format=<span class="string">'PNG'</span>)</span><br><span class="line">        result = self.chaojiying.PostPic(bytes_array.getvalue(), CHAOJIYING_KIND)</span><br><span class="line">        print(result)</span><br><span class="line">        locations = self.get_points(result)</span><br><span class="line">        self.touch_click_words(locations)</span><br><span class="line">        self.login()</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            success = self.wait.until(EC.text_to_be_present_in_element((By.CSS_SELECTOR, <span class="string">'.welcome-name'</span>), <span class="string">'谭仁侯'</span>))</span><br><span class="line">            print(success)</span><br><span class="line">            cc = self.browser.find_element(By.CSS_SELECTOR, <span class="string">'.welcome-name'</span>)</span><br><span class="line">            print(cc.text)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">except</span> TimeoutException:</span><br><span class="line">            self.chaojiying.ReportError(result[<span class="string">'pic_id'</span>])</span><br><span class="line">            self.crack()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">open</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.browser.get(self.url)</span><br><span class="line">        login = self.wait.until(EC.presence_of_element_located((By.CSS_SELECTOR, <span class="string">'.login-hd-account'</span>)))</span><br><span class="line">        login.click()</span><br><span class="line">        time.sleep(<span class="number">3</span>)</span><br><span class="line">        username = self.wait.until(EC.presence_of_element_located((By.CSS_SELECTOR, <span class="string">'input#J-userName'</span>)))</span><br><span class="line">        password = self.wait.until(EC.presence_of_element_located((By.CSS_SELECTOR, <span class="string">'input#J-password'</span>)))</span><br><span class="line">        username.send_keys(self.email)</span><br><span class="line">        password.send_keys(self.password)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_screenshot</span><span class="params">(self)</span>:</span></span><br><span class="line">        screenshot = self.browser.get_screenshot_as_png()</span><br><span class="line">        screenshot = Image.open(BytesIO(screenshot))</span><br><span class="line">        <span class="keyword">return</span> screenshot</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_touclick_element</span><span class="params">(self)</span>:</span></span><br><span class="line">        element = self.wait.until(EC.presence_of_element_located((By.CSS_SELECTOR, <span class="string">'.login-pwd-code'</span>)))</span><br><span class="line">        <span class="keyword">return</span> element</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_position</span><span class="params">(self)</span>:</span></span><br><span class="line">        element = self.get_touclick_element()</span><br><span class="line">        time.sleep(<span class="number">3</span>)</span><br><span class="line">        location = element.location</span><br><span class="line">        size = element.size</span><br><span class="line">        top, bottom, left, right = location[<span class="string">'y'</span>], location[<span class="string">'y'</span>] + size[<span class="string">'height'</span>], location[<span class="string">'x'</span>], location[<span class="string">'x'</span>] + size[<span class="string">'width'</span>]</span><br><span class="line">        <span class="keyword">return</span> (top, bottom, left, right)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_touclick_image</span><span class="params">(self, name=<span class="string">'12306.png'</span>)</span>:</span></span><br><span class="line">        top, bottom, left, right = self.get_position()</span><br><span class="line">        screenshot = self.get_screenshot()</span><br><span class="line">        captcha = screenshot.crop((left, top, right, bottom))</span><br><span class="line">        captcha.save(name)</span><br><span class="line">        <span class="keyword">return</span> captcha</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_points</span><span class="params">(self, captcha_result)</span>:</span></span><br><span class="line">        groups = captcha_result.get(<span class="string">'pic_str'</span>).split(<span class="string">'|'</span>)</span><br><span class="line">        locations = [[int(number) <span class="keyword">for</span> number <span class="keyword">in</span> group.split(<span class="string">','</span>)] <span class="keyword">for</span> group <span class="keyword">in</span> groups]</span><br><span class="line">        <span class="keyword">return</span> locations</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">touch_click_words</span><span class="params">(self, locations)</span>:</span></span><br><span class="line">        <span class="keyword">for</span> location <span class="keyword">in</span> locations:</span><br><span class="line">            print(location)</span><br><span class="line">            ActionChains(self.browser).move_to_element_with_offset(self.get_touclick_element(), location[<span class="number">0</span>]/<span class="number">1.25</span>, location[<span class="number">1</span>]/<span class="number">1.25</span>).click().perform()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">login</span><span class="params">(self)</span>:</span></span><br><span class="line">        submit = self.wait.until(EC.element_to_be_clickable((By.ID, <span class="string">'J-login'</span>)))</span><br><span class="line">        submit.click()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    crack = CrackTouClick()</span><br><span class="line">    crack.crack()</span><br></pre></td></tr></table></figure><p><code>chaojiying.py</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">from</span> hashlib <span class="keyword">import</span> md5</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Chaojiying_Client</span><span class="params">(object)</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, username, password, soft_id)</span>:</span></span><br><span class="line">        self.username = username</span><br><span class="line">        password = password.encode(<span class="string">'utf8'</span>)</span><br><span class="line">        self.password = md5(password).hexdigest()</span><br><span class="line">        self.soft_id = soft_id</span><br><span class="line">        self.base_params = &#123;</span><br><span class="line">            <span class="string">'user'</span>: self.username,</span><br><span class="line">            <span class="string">'pass2'</span>: self.password,</span><br><span class="line">            <span class="string">'softid'</span>: self.soft_id,</span><br><span class="line">        &#125;</span><br><span class="line">        self.headers = &#123;</span><br><span class="line">            <span class="string">'Connection'</span>: <span class="string">'Keep-Alive'</span>,</span><br><span class="line">            <span class="string">'User-Agent'</span>: <span class="string">'Mozilla/4.0 (compatible; MSIE 8.0; Windows NT 5.1; Trident/4.0)'</span>,</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">PostPic</span><span class="params">(self, im, codetype)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        im: 图片字节</span></span><br><span class="line"><span class="string">        codetype: 题目类型 参考 http://www.chaojiying.com/price.html</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        params = &#123;</span><br><span class="line">            <span class="string">'codetype'</span>: codetype,</span><br><span class="line">        &#125;</span><br><span class="line">        params.update(self.base_params)</span><br><span class="line">        files = &#123;<span class="string">'userfile'</span>: (<span class="string">'ccc.jpg'</span>, im)&#125;</span><br><span class="line">        r = requests.post(<span class="string">'http://upload.chaojiying.net/Upload/Processing.php'</span>, data=params, files=files, headers=self.headers)</span><br><span class="line">        <span class="keyword">return</span> r.json()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">ReportError</span><span class="params">(self, im_id)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        im_id:报错题目的图片ID</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        params = &#123;</span><br><span class="line">            <span class="string">'id'</span>: im_id,</span><br><span class="line">        &#125;</span><br><span class="line">        params.update(self.base_params)</span><br><span class="line">        r = requests.post(<span class="string">'http://upload.chaojiying.net/Upload/ReportError.php'</span>, data=params, headers=self.headers)</span><br><span class="line">        <span class="keyword">return</span> r.json()</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;center&gt;&lt;font color=&quot;#1BC3FB&quot; size=&quot;4&quot;&gt;Python3 爬虫学习笔记第十四章 —— 【验证码对抗系列 — 点触验证码】&lt;/font&gt;&lt;/center&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="Python3 学习笔记" scheme="https://www.itrhx.com/categories/Python3-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
      <category term="Python3 爬虫" scheme="https://www.itrhx.com/categories/Python3-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/Python3-%E7%88%AC%E8%99%AB/"/>
    
    
      <category term="爬虫" scheme="https://www.itrhx.com/tags/%E7%88%AC%E8%99%AB/"/>
    
      <category term="点触验证码" scheme="https://www.itrhx.com/tags/%E7%82%B9%E8%A7%A6%E9%AA%8C%E8%AF%81%E7%A0%81/"/>
    
  </entry>
  
  <entry>
    <title>Python3 爬虫学习笔记 C13</title>
    <link href="https://www.itrhx.com/2019/09/07/A43-Python3-spider-C13/"/>
    <id>https://www.itrhx.com/2019/09/07/A43-Python3-spider-C13/</id>
    <published>2019-09-06T19:52:14.161Z</published>
    <updated>2019-09-13T17:19:28.298Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><blockquote><center><font color="#1BC3FB" size="4">Python3 爬虫学习笔记第十三章 —— 【验证码对抗系列 — 滑动验证码】</font></center></blockquote><a id="more"></a><hr><h1 id="【13-1】关于滑动验证码"><a href="#【13-1】关于滑动验证码" class="headerlink" title="【13.1】关于滑动验证码"></a><font color="#ff0000">【13.1】关于滑动验证码</font></h1><p>滑动验证码属于行为式验证码，需要通过用户的操作行为来完成验证，一般是根据提示用鼠标将滑块拖动到指定的位置完成验证，此类验证码背景图片采用多种图像加密技术，且添加了很多随机效果，能有效防止OCR文字识别，另外，验证码上的文字采用了随机印刷技术，能够随机采用多种字体、多种变形的实时随机印刷，防止暴力破解；斗鱼、哔哩哔哩、淘宝等平台都使用了滑动验证码</p><fancybox><br><img src="https://cdn.jsdelivr.net/gh/TRHX/ImageHosting/ITRHX-PIC/A43/01.png" alt="01"><br></fancybox><hr><h1 id="【13-2】滑动验证码攻克思路"><a href="#【13-2】滑动验证码攻克思路" class="headerlink" title="【13.2】滑动验证码攻克思路"></a><font color="#ff0000">【13.2】滑动验证码攻克思路</font></h1><p>利用自动化测试工具 Selenium 直接模拟人的行为方式来完成验证，首先要分析页面，想办法找到滑动验证码的完整图片、带有缺口的图片和需要滑动的图片，通过对比原始的图片和带滑块缺口的图片的像素，像素不同的地方就是缺口位置，计算出滑块缺口的位置，得到所需要滑动的距离，最后利用 Selenium 进行对滑块的拖拽，拖拽时要模仿人的行为，由于有个对准过程，所以是先快后慢，匀速移动、随机速度移动都不会成功</p><p>以下以哔哩哔哩为例来做模拟登录练习</p><hr><h1 id="【13-3】模拟登录-bilibili-—-总体思路"><a href="#【13-3】模拟登录-bilibili-—-总体思路" class="headerlink" title="【13.3】模拟登录 bilibili — 总体思路"></a><font color="#ff0000">【13.3】模拟登录 bilibili — 总体思路</font></h1><p>首先使用 Selenium 模拟登陆 bilibili，自动输入账号密码，查找到登陆按钮并点击，使其出现滑动验证码，此时分析页面，滑动验证组件是由3个 canvas 组成，分别代表完整图片、带有缺口的图片和需要滑动的图片，3个 canvas 元素包含 CSS  <code>display</code> 属性，<code>display:block</code> 为可见，<code>display:none</code> 为不可见，分别获取三张图片时要将其他两张图片设置为 <code>display:none</code>，获取元素位置后即可对图片截图并保存，通过图片像素对比，找到缺口位置即为滑块要移动的距离，随后构造滑动轨迹，按照先加速后减速的方式移动滑块完成验证。</p><p>整个程序包含的函数：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">init</span><span class="params">()</span>:</span> 初始化函数，定义全局变量</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">login</span><span class="params">()</span>:</span> 登录函数，输入账号密码并点击登录</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">find_element</span><span class="params">()</span>:</span> 验证码元素查找函数，查找三张图的元素</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">hide_element</span><span class="params">()</span>:</span> 设置元素不可见函数</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">show_element</span><span class="params">()</span>:</span> 设置元素可见函数</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">save_screenshot</span><span class="params">()</span>:</span> 验证码截图函数，截取三张图并保存</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">slide</span><span class="params">()</span>:</span> 滑动函数</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">is_pixel_equal</span><span class="params">()</span>:</span> 像素判断函数，寻找缺口位置</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_distance</span><span class="params">()</span>:</span> 计算滑块移动距离函数</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_track</span><span class="params">()</span>:</span> 构造移动轨迹函数</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">move_to_gap</span><span class="params">()</span>:</span> 模拟拖动函数</span><br></pre></td></tr></table></figure><p>整个程序用到的库：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.chrome.options <span class="keyword">import</span> Options</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.support.wait <span class="keyword">import</span> WebDriverWait</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.support <span class="keyword">import</span> expected_conditions <span class="keyword">as</span> EC</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.common.by <span class="keyword">import</span> By</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver <span class="keyword">import</span> ActionChains</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> random</span><br></pre></td></tr></table></figure><hr><h1 id="【13-4】主函数"><a href="#【13-4】主函数" class="headerlink" title="【13.4】主函数"></a><font color="#ff0000">【13.4】主函数</font></h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    init()</span><br><span class="line">    login()</span><br><span class="line">    find_element()</span><br><span class="line">    slide()</span><br></pre></td></tr></table></figure><hr><h1 id="【13-5】初始化函数"><a href="#【13-5】初始化函数" class="headerlink" title="【13.5】初始化函数"></a><font color="#ff0000">【13.5】初始化函数</font></h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">init</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">global</span> url, browser, username, password, wait</span><br><span class="line">    url = <span class="string">'https://passport.bilibili.com/login'</span></span><br><span class="line">    path = <span class="string">r'F:\PycharmProjects\Python3爬虫\chromedriver.exe'</span></span><br><span class="line">    chrome_options = Options()</span><br><span class="line">    chrome_options.add_argument(<span class="string">'--start-maximized'</span>)</span><br><span class="line">    browser = webdriver.Chrome(executable_path=path, chrome_options=chrome_options)</span><br><span class="line">    username = <span class="string">'155********'</span></span><br><span class="line">    password = <span class="string">'***********'</span></span><br><span class="line">    wait = WebDriverWait(browser, <span class="number">20</span>)</span><br></pre></td></tr></table></figure><p>global 关键字定义了全局变量，随后是登录页面url、谷歌浏览器驱动的目录path、实例化 Chrome 浏览器、设置浏览器分辨率最大化、用户名、密码、WebDriverWait() 方法设置等待超时</p><hr><h1 id="【13-6】登录函数"><a href="#【13-6】登录函数" class="headerlink" title="【13.6】登录函数"></a><font color="#ff0000">【13.6】登录函数</font></h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">login</span><span class="params">()</span>:</span></span><br><span class="line">    browser.get(url)</span><br><span class="line">    user = wait.until(EC.presence_of_element_located((By.ID, <span class="string">'login-username'</span>)))</span><br><span class="line">    passwd = wait.until(EC.presence_of_element_located((By.ID, <span class="string">'login-passwd'</span>)))</span><br><span class="line">    user.send_keys(username)</span><br><span class="line">    passwd.send_keys(password)</span><br><span class="line">    login_btn = wait.until(EC.presence_of_element_located((By.CSS_SELECTOR, <span class="string">'a.btn.btn-login'</span>)))</span><br><span class="line">    time.sleep(random.random() * <span class="number">3</span>)</span><br><span class="line">    login_btn.click()</span><br></pre></td></tr></table></figure><p>等待用户名输入框和密码输入框对应的 ID 节点加载出来，分析页面可知，用户名输入框 <code>id=&quot;login-username&quot;</code>，密码输入框 <code>id=&quot;login-passwd&quot;</code>，获取这两个节点，调用 <code>send_keys()</code> 方法输入用户名和密码，随后获取登录按钮，分析页面可知登录按钮 <code>class=&quot;btn btn-login&quot;</code>，随机产生一个数并将其扩大三倍作为暂停时间，最后调用 <code>click()</code> 方法实现登录按钮的点击</p><hr><h1 id="【13-7】验证码元素查找函数"><a href="#【13-7】验证码元素查找函数" class="headerlink" title="【13.7】验证码元素查找函数"></a><font color="#ff0000">【13.7】验证码元素查找函数</font></h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">find_element</span><span class="params">()</span>:</span></span><br><span class="line">    c_background = wait.until(</span><br><span class="line">        EC.presence_of_element_located((By.CSS_SELECTOR, <span class="string">'canvas.geetest_canvas_bg.geetest_absolute'</span>)))</span><br><span class="line">    c_slice = wait.until(</span><br><span class="line">        EC.presence_of_element_located((By.CSS_SELECTOR, <span class="string">'canvas.geetest_canvas_slice.geetest_absolute'</span>)))</span><br><span class="line">    c_full_bg = wait.until(</span><br><span class="line">        EC.presence_of_element_located((By.CSS_SELECTOR, <span class="string">'canvas.geetest_canvas_fullbg.geetest_fade.geetest_absolute'</span>)))</span><br><span class="line">    hide_element(c_slice)</span><br><span class="line">    save_screenshot(c_background, <span class="string">'back'</span>)</span><br><span class="line">    show_element(c_slice)</span><br><span class="line">    save_screenshot(c_slice, <span class="string">'slice'</span>)</span><br><span class="line">    show_element(c_full_bg)</span><br><span class="line">    save_screenshot(c_full_bg, <span class="string">'full'</span>)</span><br></pre></td></tr></table></figure><p>我们要获取验证码的三张图片，分别是完整的图片、带有缺口的图片和需要滑动的图片，分析页面代码，这三张图片是由 3 个 canvas 组成，3 个 canvas 元素包含 CSS  <code>display</code> 属性，<code>display:block</code> 为可见，<code>display:none</code> 为不可见，在分别获取三张图片时要将其他两张图片设置为 <code>display:none</code>，这样做才能单独提取到每张图片，定位三张图片的 class 分别为：带有缺口的图片（c_background）：<code>geetest_canvas_bg geetest_absolute</code>、需要滑动的图片（c_slice）：<code>geetest_canvas_slice geetest_absolute</code>、完整图片（c_full_bg）：<code>geetest_canvas_fullbg geetest_fade geetest_absolute</code>，随后传值给 <code>save_screenshot()</code> 函数，进一步对验证码进行处理</p><fancybox><br><img src="https://cdn.jsdelivr.net/gh/TRHX/ImageHosting/ITRHX-PIC/A43/02.png" alt="02"><br></fancybox><hr><h1 id="【13-8】元素可见性设置函数"><a href="#【13-8】元素可见性设置函数" class="headerlink" title="【13.8】元素可见性设置函数"></a><font color="#ff0000">【13.8】元素可见性设置函数</font></h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"># 设置元素不可见</span><br><span class="line">def hide_element(element):</span><br><span class="line">    browser.execute_script(&quot;arguments[0].style=arguments[1]&quot;, element, &quot;display: none;&quot;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 设置元素可见</span><br><span class="line">def show_element(element):</span><br><span class="line">    browser.execute_script(&quot;arguments[0].style=arguments[1]&quot;, element, &quot;display: block;&quot;)</span><br></pre></td></tr></table></figure><hr><h1 id="【13-9】验证码截图函数"><a href="#【13-9】验证码截图函数" class="headerlink" title="【13.9】验证码截图函数"></a><font color="#ff0000">【13.9】验证码截图函数</font></h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">save_screenshot</span><span class="params">(obj, name)</span>:</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        pic_url = browser.save_screenshot(<span class="string">'.\\bilibili.png'</span>)</span><br><span class="line">        print(<span class="string">"%s:截图成功!"</span> % pic_url)</span><br><span class="line">        left = obj.location[<span class="string">'x'</span>]</span><br><span class="line">        top = obj.location[<span class="string">'y'</span>]</span><br><span class="line">        right = left + obj.size[<span class="string">'width'</span>]</span><br><span class="line">        bottom = top + obj.size[<span class="string">'height'</span>]</span><br><span class="line">        print(<span class="string">'图：'</span> + name)</span><br><span class="line">        print(<span class="string">'Left %s'</span> % left)</span><br><span class="line">        print(<span class="string">'Top %s'</span> % top)</span><br><span class="line">        print(<span class="string">'Right %s'</span> % right)</span><br><span class="line">        print(<span class="string">'Bottom %s'</span> % bottom)</span><br><span class="line">        print(<span class="string">''</span>)</span><br><span class="line">        im = Image.open(<span class="string">'.\\bilibili.png'</span>)</span><br><span class="line">        im = im.crop((left, top, right, bottom))</span><br><span class="line">        file_name = <span class="string">'bili_'</span> + name + <span class="string">'.png'</span></span><br><span class="line">        im.save(file_name)</span><br><span class="line">    <span class="keyword">except</span> BaseException <span class="keyword">as</span> msg:</span><br><span class="line">        print(<span class="string">"%s:截图失败!"</span> % msg)</span><br></pre></td></tr></table></figure><p><code>location</code> 属性可以返回该图片对象在浏览器中的位置，坐标轴是以屏幕左上角为原点，x轴向右递增，y轴向下递增，<code>size</code> 属性可以返回该图片对象的高度和宽度，由此可以得到验证码的位置信息，首先调用 <code>save_screenshot()</code> 属性对整个页面截图并保存，然后向 <code>crop()</code> 方法传入验证码的位置信息，由位置信息再对验证码进行剪裁并保存</p><hr><h1 id="【13-10】滑动函数"><a href="#【13-10】滑动函数" class="headerlink" title="【13.10】滑动函数"></a><font color="#ff0000">【13.10】滑动函数</font></h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">slide</span><span class="params">()</span>:</span></span><br><span class="line">    distance = get_distance(Image.open(<span class="string">'.\\bili_back.png'</span>), Image.open(<span class="string">'.\\bili_full.png'</span>))</span><br><span class="line">    print(<span class="string">'计算偏移量为：%s Px'</span> % distance)</span><br><span class="line">    trace = get_trace(distance - <span class="number">5</span>)</span><br><span class="line">    move_to_gap(trace)</span><br><span class="line">    time.sleep(<span class="number">3</span>)</span><br></pre></td></tr></table></figure><p>向 <code>get_distance()</code> 函数传入完整的图片和缺口图片，计算滑块需要滑动的距离，再把距离信息传入 <code>get_trace()</code> 函数，构造滑块的移动轨迹，最后根据轨迹信息调用 <code>move_to_gap()</code> 函数移动滑块完成验证</p><hr><h1 id="【13-11】计算滑块移动距离函数"><a href="#【13-11】计算滑块移动距离函数" class="headerlink" title="【13.11】计算滑块移动距离函数"></a><font color="#ff0000">【13.11】计算滑块移动距离函数</font></h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_distance</span><span class="params">(bg_image, fullbg_image)</span>:</span></span><br><span class="line">    distance = <span class="number">60</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(distance, fullbg_image.size[<span class="number">0</span>]):</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> range(fullbg_image.size[<span class="number">1</span>]):</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> is_pixel_equal(fullbg_image, bg_image, i, j):</span><br><span class="line">                <span class="keyword">return</span> i</span><br></pre></td></tr></table></figure><p><code>get_distance()</code> 方法即获取缺口位置的方法，此方法的参数是两张图片，一张为完整的图片，另一张为带缺口的图片，distance 为滑块的初始位置，遍历两张图片的每个像素，利用 <code>is_pixel_equal()</code> 像素判断函数判断两张图片同一位置的像素是否相同，比较两张图 RGB 的绝对值是否均小于定义的阈值 threshold，如果绝对值均在阈值之内，则代表像素点相同，继续遍历，否则代表不相同的像素点，即缺口的位置</p><hr><h1 id="【13-12】像素判断函数"><a href="#【13-12】像素判断函数" class="headerlink" title="【13.12】像素判断函数"></a><font color="#ff0000">【13.12】像素判断函数</font></h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">is_pixel_equal</span><span class="params">(bg_image, fullbg_image, x, y)</span>:</span></span><br><span class="line">    bg_pixel = bg_image.load()[x, y]</span><br><span class="line">    fullbg_pixel = fullbg_image.load()[x, y]</span><br><span class="line">    threshold = <span class="number">60</span></span><br><span class="line">    <span class="keyword">if</span> (abs(bg_pixel[<span class="number">0</span>] - fullbg_pixel[<span class="number">0</span>] &lt; threshold) <span class="keyword">and</span> abs(bg_pixel[<span class="number">1</span>] - fullbg_pixel[<span class="number">1</span>] &lt; threshold) <span class="keyword">and</span> abs(</span><br><span class="line">            bg_pixel[<span class="number">2</span>] - fullbg_pixel[<span class="number">2</span>] &lt; threshold)):</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">True</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">False</span></span><br></pre></td></tr></table></figure><p>将完整图片和缺口图片两个对象分别赋值给变量 bg_image和 fullbg_image，接下来对比图片获取缺口。我们在这里遍历图片的每个坐标点，获取两张图片对应像素点的 RGB 数据，判断像素的各个颜色之差，<code>abs()</code> 用于取绝对值，如果二者的 RGB 数据差距在一定范围内，那就代表两个像素相同，继续比对下一个像素点，如果差距超过一定范围，则代表像素点不同，当前位置即为缺口位置</p><hr><h1 id="【13-13】构造移动轨迹函数"><a href="#【13-13】构造移动轨迹函数" class="headerlink" title="【13.13】构造移动轨迹函数"></a><font color="#ff0000">【13.13】构造移动轨迹函数</font></h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_trace</span><span class="params">(distance)</span>:</span></span><br><span class="line">    trace = []</span><br><span class="line">    faster_distance = distance * (<span class="number">4</span> / <span class="number">5</span>)</span><br><span class="line">    start, v0, t = <span class="number">0</span>, <span class="number">0</span>, <span class="number">0.1</span></span><br><span class="line">    <span class="keyword">while</span> start &lt; distance:</span><br><span class="line">        <span class="keyword">if</span> start &lt; faster_distance:</span><br><span class="line">            a = <span class="number">20</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            a = <span class="number">-20</span></span><br><span class="line">        move = v0 * t + <span class="number">1</span> / <span class="number">2</span> * a * t * t</span><br><span class="line">        v = v0 + a * t</span><br><span class="line">        v0 = v</span><br><span class="line">        start += move</span><br><span class="line">        trace.append(round(move))</span><br><span class="line">    <span class="keyword">return</span> trace</span><br></pre></td></tr></table></figure><p><code>get_trace()</code> 方法传入的参数为移动的总距离，返回的是运动轨迹，运动轨迹用 trace 表示，它是一个列表，列表的每个元素代表每次移动多少距离，利用 Selenium 进行对滑块的拖拽时要模仿人的行为，由于有个对准过程，所以是先快后慢，匀速移动、随机速度移动都不会成功，因此要设置一个加速和减速的距离，这里设置加速距离 <code>faster_distance</code> 是总距离 <code>distance</code> 的4/5倍，滑块滑动的加速度用 a 来表示，当前速度用 v 表示，初速度用 v0 表示，位移用 move 表示，所需时间用 t 表示，它们之间满足以下关系：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">move = v0 * t + 0.5 * a * t * t </span><br><span class="line">v = v0 + a * t</span><br></pre></td></tr></table></figure><p>设置初始位置、初始速度、时间间隔分别为0, 0, 0.1，加速阶段和减速阶段的加速度分别设置为20和-20，直到运动轨迹达到总距离时，循环终止，最后得到的 trace 记录了每个时间间隔移动了多少位移，这样滑块的运动轨迹就得到了</p><hr><h1 id="【13-14】模拟拖动函数"><a href="#【13-14】模拟拖动函数" class="headerlink" title="【13.14】模拟拖动函数"></a><font color="#ff0000">【13.14】模拟拖动函数</font></h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">move_to_gap</span><span class="params">(trace)</span>:</span></span><br><span class="line">    slider = wait.until(EC.presence_of_element_located((By.CSS_SELECTOR, <span class="string">'div.geetest_slider_button'</span>)))</span><br><span class="line">    ActionChains(browser).click_and_hold(slider).perform()</span><br><span class="line">    <span class="keyword">for</span> x <span class="keyword">in</span> trace:</span><br><span class="line">        ActionChains(browser).move_by_offset(xoffset=x, yoffset=<span class="number">0</span>).perform()</span><br><span class="line">    time.sleep(<span class="number">0.5</span>)</span><br><span class="line">    ActionChains(browser).release().perform()</span><br></pre></td></tr></table></figure><p>传入的参数为运动轨迹，首先查找到滑动按钮，然后调用 ActionChains 的 <code>click_and_hold()</code> 方法按住拖动底部滑块，<code>perform()</code> 方法用于执行，遍历运动轨迹获取每小段位移距离，调用 <code>move_by_offset()</code> 方法移动此位移，最后调用 <code>release()</code> 方法松开鼠标即可</p><hr><h1 id="【13-15】效果实现动图"><a href="#【13-15】效果实现动图" class="headerlink" title="【13.15】效果实现动图"></a><font color="#ff0000">【13.15】效果实现动图</font></h1><p>最终实现效果图：（关键信息已经过打码处理）</p><fancybox><br><img src="https://cdn.jsdelivr.net/gh/TRHX/ImageHosting/ITRHX-PIC/A43/bilibili.gif" alt="03"><br></fancybox><hr><h1 id="【13-16】完整代码"><a href="#【13-16】完整代码" class="headerlink" title="【13.16】完整代码"></a><font color="#ff0000">【13.16】完整代码</font></h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.chrome.options <span class="keyword">import</span> Options</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.support.wait <span class="keyword">import</span> WebDriverWait</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.support <span class="keyword">import</span> expected_conditions <span class="keyword">as</span> EC</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.common.by <span class="keyword">import</span> By</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver <span class="keyword">import</span> ActionChains</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">init</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">global</span> url, browser, username, password, wait</span><br><span class="line">    url = <span class="string">'https://passport.bilibili.com/login'</span></span><br><span class="line">    path = <span class="string">r'F:\PycharmProjects\Python3爬虫\chromedriver.exe'</span></span><br><span class="line">    chrome_options = Options()</span><br><span class="line">    chrome_options.add_argument(<span class="string">'--start-maximized'</span>)</span><br><span class="line">    browser = webdriver.Chrome(executable_path=path, chrome_options=chrome_options)</span><br><span class="line">    username = <span class="string">'155********'</span></span><br><span class="line">    password = <span class="string">'***********'</span></span><br><span class="line">    wait = WebDriverWait(browser, <span class="number">20</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">login</span><span class="params">()</span>:</span></span><br><span class="line">    browser.get(url)</span><br><span class="line">    user = wait.until(EC.presence_of_element_located((By.ID, <span class="string">'login-username'</span>)))</span><br><span class="line">    passwd = wait.until(EC.presence_of_element_located((By.ID, <span class="string">'login-passwd'</span>)))</span><br><span class="line">    user.send_keys(username)</span><br><span class="line">    passwd.send_keys(password)</span><br><span class="line">    login_btn = wait.until(EC.presence_of_element_located((By.CSS_SELECTOR, <span class="string">'a.btn.btn-login'</span>)))</span><br><span class="line">    time.sleep(random.random() * <span class="number">3</span>)</span><br><span class="line">    login_btn.click()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">find_element</span><span class="params">()</span>:</span></span><br><span class="line">    c_background = wait.until(</span><br><span class="line">        EC.presence_of_element_located((By.CSS_SELECTOR, <span class="string">'canvas.geetest_canvas_bg.geetest_absolute'</span>)))</span><br><span class="line">    c_slice = wait.until(</span><br><span class="line">        EC.presence_of_element_located((By.CSS_SELECTOR, <span class="string">'canvas.geetest_canvas_slice.geetest_absolute'</span>)))</span><br><span class="line">    c_full_bg = wait.until(</span><br><span class="line">        EC.presence_of_element_located((By.CSS_SELECTOR, <span class="string">'canvas.geetest_canvas_fullbg.geetest_fade.geetest_absolute'</span>)))</span><br><span class="line">    hide_element(c_slice)</span><br><span class="line">    save_screenshot(c_background, <span class="string">'back'</span>)</span><br><span class="line">    show_element(c_slice)</span><br><span class="line">    save_screenshot(c_slice, <span class="string">'slice'</span>)</span><br><span class="line">    show_element(c_full_bg)</span><br><span class="line">    save_screenshot(c_full_bg, <span class="string">'full'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">hide_element</span><span class="params">(element)</span>:</span></span><br><span class="line">    browser.execute_script(<span class="string">"arguments[0].style=arguments[1]"</span>, element, <span class="string">"display: none;"</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">show_element</span><span class="params">(element)</span>:</span></span><br><span class="line">    browser.execute_script(<span class="string">"arguments[0].style=arguments[1]"</span>, element, <span class="string">"display: block;"</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">save_screenshot</span><span class="params">(obj, name)</span>:</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        pic_url = browser.save_screenshot(<span class="string">'.\\bilibili.png'</span>)</span><br><span class="line">        print(<span class="string">"%s:截图成功!"</span> % pic_url)</span><br><span class="line">        left = obj.location[<span class="string">'x'</span>]</span><br><span class="line">        top = obj.location[<span class="string">'y'</span>]</span><br><span class="line">        right = left + obj.size[<span class="string">'width'</span>]</span><br><span class="line">        bottom = top + obj.size[<span class="string">'height'</span>]</span><br><span class="line">        print(<span class="string">'图：'</span> + name)</span><br><span class="line">        print(<span class="string">'Left %s'</span> % left)</span><br><span class="line">        print(<span class="string">'Top %s'</span> % top)</span><br><span class="line">        print(<span class="string">'Right %s'</span> % right)</span><br><span class="line">        print(<span class="string">'Bottom %s'</span> % bottom)</span><br><span class="line">        print(<span class="string">''</span>)</span><br><span class="line">        im = Image.open(<span class="string">'.\\bilibili.png'</span>)</span><br><span class="line">        im = im.crop((left, top, right, bottom))</span><br><span class="line">        file_name = <span class="string">'bili_'</span> + name + <span class="string">'.png'</span></span><br><span class="line">        im.save(file_name)</span><br><span class="line">    <span class="keyword">except</span> BaseException <span class="keyword">as</span> msg:</span><br><span class="line">        print(<span class="string">"%s:截图失败!"</span> % msg)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">slide</span><span class="params">()</span>:</span></span><br><span class="line">    distance = get_distance(Image.open(<span class="string">'.\\bili_back.png'</span>), Image.open(<span class="string">'.\\bili_full.png'</span>))</span><br><span class="line">    print(<span class="string">'计算偏移量为：%s Px'</span> % distance)</span><br><span class="line">    trace = get_trace(distance - <span class="number">5</span>)</span><br><span class="line">    move_to_gap(trace)</span><br><span class="line">    time.sleep(<span class="number">3</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_distance</span><span class="params">(bg_image, fullbg_image)</span>:</span></span><br><span class="line">    distance = <span class="number">60</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(distance, fullbg_image.size[<span class="number">0</span>]):</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> range(fullbg_image.size[<span class="number">1</span>]):</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> is_pixel_equal(fullbg_image, bg_image, i, j):</span><br><span class="line">                <span class="keyword">return</span> i</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">is_pixel_equal</span><span class="params">(bg_image, fullbg_image, x, y)</span>:</span></span><br><span class="line">    bg_pixel = bg_image.load()[x, y]</span><br><span class="line">    fullbg_pixel = fullbg_image.load()[x, y]</span><br><span class="line">    threshold = <span class="number">60</span></span><br><span class="line">    <span class="keyword">if</span> (abs(bg_pixel[<span class="number">0</span>] - fullbg_pixel[<span class="number">0</span>] &lt; threshold) <span class="keyword">and</span> abs(bg_pixel[<span class="number">1</span>] - fullbg_pixel[<span class="number">1</span>] &lt; threshold) <span class="keyword">and</span> abs(</span><br><span class="line">            bg_pixel[<span class="number">2</span>] - fullbg_pixel[<span class="number">2</span>] &lt; threshold)):</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">True</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">False</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_trace</span><span class="params">(distance)</span>:</span></span><br><span class="line">    trace = []</span><br><span class="line">    faster_distance = distance * (<span class="number">4</span> / <span class="number">5</span>)</span><br><span class="line">    start, v0, t = <span class="number">0</span>, <span class="number">0</span>, <span class="number">0.1</span></span><br><span class="line">    <span class="keyword">while</span> start &lt; distance:</span><br><span class="line">        <span class="keyword">if</span> start &lt; faster_distance:</span><br><span class="line">            a = <span class="number">20</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            a = <span class="number">-20</span></span><br><span class="line">        move = v0 * t + <span class="number">1</span> / <span class="number">2</span> * a * t * t</span><br><span class="line">        v = v0 + a * t</span><br><span class="line">        v0 = v</span><br><span class="line">        start += move</span><br><span class="line">        trace.append(round(move))</span><br><span class="line">    <span class="keyword">return</span> trace</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">move_to_gap</span><span class="params">(trace)</span>:</span></span><br><span class="line">    slider = wait.until(EC.presence_of_element_located((By.CSS_SELECTOR, <span class="string">'div.geetest_slider_button'</span>)))</span><br><span class="line">    ActionChains(browser).click_and_hold(slider).perform()</span><br><span class="line">    <span class="keyword">for</span> x <span class="keyword">in</span> trace:</span><br><span class="line">        ActionChains(browser).move_by_offset(xoffset=x, yoffset=<span class="number">0</span>).perform()</span><br><span class="line">    time.sleep(<span class="number">0.5</span>)</span><br><span class="line">    ActionChains(browser).release().perform()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    init()</span><br><span class="line">    login()</span><br><span class="line">    find_element()</span><br><span class="line">    slide()</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;center&gt;&lt;font color=&quot;#1BC3FB&quot; size=&quot;4&quot;&gt;Python3 爬虫学习笔记第十三章 —— 【验证码对抗系列 — 滑动验证码】&lt;/font&gt;&lt;/center&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="Python3 学习笔记" scheme="https://www.itrhx.com/categories/Python3-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
      <category term="Python3 爬虫" scheme="https://www.itrhx.com/categories/Python3-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/Python3-%E7%88%AC%E8%99%AB/"/>
    
    
      <category term="爬虫" scheme="https://www.itrhx.com/tags/%E7%88%AC%E8%99%AB/"/>
    
      <category term="滑动验证码" scheme="https://www.itrhx.com/tags/%E6%BB%91%E5%8A%A8%E9%AA%8C%E8%AF%81%E7%A0%81/"/>
    
  </entry>
  
  <entry>
    <title>Python3 爬虫学习笔记 C12</title>
    <link href="https://www.itrhx.com/2019/09/05/A42-Python3-spider-C12/"/>
    <id>https://www.itrhx.com/2019/09/05/A42-Python3-spider-C12/</id>
    <published>2019-09-05T14:54:48.887Z</published>
    <updated>2019-09-13T17:19:23.738Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><blockquote><center><font color="#1BC3FB" size="4">Python3 爬虫学习笔记第十二章 —— 【验证码对抗系列 — 图形验证码】</font></center></blockquote><a id="more"></a><h1 id="【12-1】关于普通图形验证码"><a href="#【12-1】关于普通图形验证码" class="headerlink" title="【12.1】关于普通图形验证码"></a><font color="#ff0000">【12.1】关于普通图形验证码</font></h1><p>普通图形验证码一般由四位纯数字、纯字母或者字母数字组合构成，是最常见的验证码，也是最简单的验证码，利用 tesserocr 或者 pytesseract 库即可识别此类验证码，前提是已经安装好 Tesseract-OCR 软件</p><fancybox><br><img src="https://cdn.jsdelivr.net/gh/TRHX/ImageHosting/ITRHX-PIC/A42/01.png" alt="01"><br></fancybox><h1 id="【12-2】tesserocr-库识别验证码"><a href="#【12-2】tesserocr-库识别验证码" class="headerlink" title="【12.2】tesserocr 库识别验证码"></a><font color="#ff0000">【12.2】tesserocr 库识别验证码</font></h1><p>简单示例：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> tesserocr</span><br><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image</span><br><span class="line"></span><br><span class="line">image = Image.open(<span class="string">'code.png'</span>)</span><br><span class="line">result = tesserocr.image_to_text(image)</span><br><span class="line">print(result)</span><br></pre></td></tr></table></figure><p>新建一个 Image 对象，调用 tesserocr 的 <code>image_to_text()</code> 方法，传入 Image 对象即可完成识别，另一种方法：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> tesserocr</span><br><span class="line">print(tesserocr.file_to_text(<span class="string">'code.png'</span>))</span><br></pre></td></tr></table></figure><h1 id="【12-3】pytesseract-库识别验证码"><a href="#【12-3】pytesseract-库识别验证码" class="headerlink" title="【12.3】pytesseract 库识别验证码"></a><font color="#ff0000">【12.3】pytesseract 库识别验证码</font></h1><p>简单示例：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pytesseract</span><br><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image</span><br><span class="line"></span><br><span class="line">img = Image.open(<span class="string">'code.png'</span>)</span><br><span class="line">img = img.convert(<span class="string">'RGB'</span>)</span><br><span class="line">img.show()</span><br><span class="line">print(pytesseract.image_to_string(img))</span><br></pre></td></tr></table></figure><p>pytesseract 的各种方法：</p><ul><li>get_tesseract_version：返回 Tesseract 的版本信息；</li><li>image_to_string：将图像上的 Tesseract OCR 运行结果返回到字符串；</li><li>image_to_boxes：返回包含已识别字符及其框边界的结果；</li><li>image_to_data：返回包含框边界，置信度和其他信息的结果。需要 Tesseract 3.05+；</li><li>image_to_osd：返回包含有关方向和脚本检测的信息的结果。</li></ul><p>有关参数：</p><p><code>image_to_data(image, lang=&#39;&#39;, config=&#39;&#39;, nice=0, output_type=Output.STRING)</code></p><ul><li>image：图像对象；</li><li>lang：Tesseract 语言代码字符串；</li><li>config：任何其他配置为字符串，例如：config=’–psm 6’；</li><li>nice：修改 Tesseract 运行的处理器优先级。Windows不支持。尼斯调整了类似 unix 的流程的优点；</li><li>output_type：类属性，指定输出的类型，默认为string。</li></ul><p>lang 参数，常见语言代码如下：</p><ul><li>chi_sim：简体中文</li><li>chi_tra：繁体中文</li><li>eng：英文</li><li>rus：俄罗斯语</li><li>fra：法语</li><li>deu：德语</li><li>jpn：日语</li></ul><h1 id="【12-4】验证码处理"><a href="#【12-4】验证码处理" class="headerlink" title="【12.4】验证码处理"></a><font color="#ff0000">【12.4】验证码处理</font></h1><p>利用 Image 对象的 <code>convert()</code> 方法传入不同参数可以对验证码做一些额外的处理，如转灰度、二值化等操作，经过处理过后的验证码会更加容易被识别，识别准确度更高，各种参数及含义：</p><ul><li>1：1位像素，黑白，每字节一个像素存储；</li><li>L：8位像素，黑白；</li><li>P：8位像素，使用调色板映射到任何其他模式；</li><li>RGB：3x8位像素，真彩色；</li><li>RGBA：4x8位像素，带透明度掩模的真彩色；</li><li>CMYK：4x8位像素，分色；</li><li>YCbCr：3x8位像素，彩色视频格式；</li><li>I：32位有符号整数像素；</li><li>F：32位浮点像素。</li></ul><p>示例：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pytesseract</span><br><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image</span><br><span class="line"></span><br><span class="line">image = Image.open(<span class="string">'code.png'</span>)</span><br><span class="line">image = image.convert(<span class="string">'L'</span>)</span><br><span class="line">image.show()</span><br><span class="line">result = pytesseract.image_to_string(image)</span><br><span class="line">print(result)</span><br></pre></td></tr></table></figure><p>Image 对象的 <code>convert()</code> 方法参数传入 L，即可将图片转化为灰度图像，转换前后对比：</p><fancybox><br><img src="https://cdn.jsdelivr.net/gh/TRHX/ImageHosting/ITRHX-PIC/A42/02.png" alt="02"><br></fancybox><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pytesseract</span><br><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image</span><br><span class="line"></span><br><span class="line">image = Image.open(<span class="string">'code.png'</span>)</span><br><span class="line">image = image.convert(<span class="string">'1'</span>)</span><br><span class="line">image.show()</span><br><span class="line">result = pytesseract.image_to_string(image)</span><br><span class="line">print(result)</span><br></pre></td></tr></table></figure><p>Image 对象的 <code>convert()</code> 方法参数传入 1，即可将图片进行二值化处理，处理前后对比：</p><fancybox><br><img src="https://cdn.jsdelivr.net/gh/TRHX/ImageHosting/ITRHX-PIC/A42/03.png" alt="03"><br></fancybox><h1 id="【12-5】tesserocr-与-pytesserocr-相关资料"><a href="#【12-5】tesserocr-与-pytesserocr-相关资料" class="headerlink" title="【12.5】tesserocr 与 pytesserocr 相关资料"></a><font color="#ff0000">【12.5】tesserocr 与 pytesserocr 相关资料</font></h1><ul><li><p>tesserocr GitHub：<a href="https://github.com/sirfz/tesserocr" target="_blank" rel="noopener">https://github.com/sirfz/tesserocr</a></p></li><li><p>tesserocr PyPI：<a href="https://pypi.python.org/pypi/tesserocr" target="_blank" rel="noopener">https://pypi.python.org/pypi/tesserocr</a></p></li><li><p>pytesserocr GitHub：<a href="https://github.com/madmaze/pytesseract" target="_blank" rel="noopener">https://github.com/madmaze/pytesseract</a></p></li><li><p>pytesserocr PyPI：<a href="https://pypi.org/project/pytesseract/" target="_blank" rel="noopener">https://pypi.org/project/pytesseract/</a></p></li><li><p>Tesseract-OCR 下载地址：<a href="http://digi.bib.uni-mannheim.de/tesseract" target="_blank" rel="noopener">http://digi.bib.uni-mannheim.de/tesseract</a></p></li><li><p>tesseract GitHub：<a href="https://github.com/tesseract-ocr/tesseract" target="_blank" rel="noopener">https://github.com/tesseract-ocr/tesseract</a></p></li><li><p>tesseract 语言包：<a href="https://github.com/tesseract-ocr/tessdata" target="_blank" rel="noopener">https://github.com/tesseract-ocr/tessdata</a></p></li><li><p>tesseract 文档：<a href="https://github.com/tesseract-ocr/tesseract/wiki/Documentation" target="_blank" rel="noopener">https://github.com/tesseract-ocr/tesseract/wiki/Documentation</a></p></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;center&gt;&lt;font color=&quot;#1BC3FB&quot; size=&quot;4&quot;&gt;Python3 爬虫学习笔记第十二章 —— 【验证码对抗系列 — 图形验证码】&lt;/font&gt;&lt;/center&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="Python3 学习笔记" scheme="https://www.itrhx.com/categories/Python3-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
      <category term="Python3 爬虫" scheme="https://www.itrhx.com/categories/Python3-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/Python3-%E7%88%AC%E8%99%AB/"/>
    
    
      <category term="爬虫" scheme="https://www.itrhx.com/tags/%E7%88%AC%E8%99%AB/"/>
    
      <category term="图形验证码" scheme="https://www.itrhx.com/tags/%E5%9B%BE%E5%BD%A2%E9%AA%8C%E8%AF%81%E7%A0%81/"/>
    
  </entry>
  
  <entry>
    <title>Python3 爬虫学习笔记 C11</title>
    <link href="https://www.itrhx.com/2019/09/04/A41-Python3-spider-C11/"/>
    <id>https://www.itrhx.com/2019/09/04/A41-Python3-spider-C11/</id>
    <published>2019-09-04T14:06:03.110Z</published>
    <updated>2019-09-13T17:19:18.905Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><blockquote><center><font color="#1BC3FB" size="4">Python3 爬虫学习笔记第十一章 —— 【MongoDB数据储存】</font></center></blockquote><a id="more"></a><h1 id="【11-1】关于-MongoDB"><a href="#【11-1】关于-MongoDB" class="headerlink" title="【11.1】关于 MongoDB"></a><font color="#ff0000">【11.1】关于 MongoDB</font></h1><p>MongoDB 属于非关系型数据库，即 NoSQL（Not Only SQL），NoSQL 是基于键值对的，不需要经过 SQL 层的解析，数据之间没有耦合性，性能极高，非关系型数据库分为以下几种：</p><ul><li>键值存储数据库：Redis、Voldemort、Oracle BDB 等；</li><li>列存储数据库：Cassandra、HBase、Riak 等；</li><li>文档型数据库：CouchDB、MongoDB 等；</li><li>图形数据库：Neo4J、InfoGrid、Infinite Graph 等。</li></ul><h1 id="【11-2】MongoDB-基本操作语句"><a href="#【11-2】MongoDB-基本操作语句" class="headerlink" title="【11.2】MongoDB 基本操作语句"></a><font color="#ff0000">【11.2】MongoDB 基本操作语句</font></h1><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"># 创建数据库（如果数据库不存在就创建数据库, 存在就切换到指定的数据库）</span><br><span class="line"><span class="keyword">use</span> DATABASE_NAME</span><br><span class="line"></span><br><span class="line"># 查看所有数据库</span><br><span class="line"><span class="keyword">show</span> dbs</span><br><span class="line"></span><br><span class="line"># 查看当前所在数据库</span><br><span class="line">db</span><br><span class="line"></span><br><span class="line"># 删除当前数据库</span><br><span class="line">db.dropDatabase()</span><br><span class="line"></span><br><span class="line"># 删除集合</span><br><span class="line">db.COLLECTION_NAME.drop()</span><br><span class="line"></span><br><span class="line"># 创建集合</span><br><span class="line">db.createCollection(<span class="string">"COLLECTION_NAME"</span>)</span><br><span class="line"></span><br><span class="line"># 插入文档</span><br><span class="line">db.COLLECTION_NAME.insert(<span class="keyword">document</span>)</span><br><span class="line">db.COLLECTION_NAME.save(<span class="keyword">document</span>) </span><br><span class="line"></span><br><span class="line"># 更新文档</span><br><span class="line">db.COLLECTION_NAME.update()</span><br><span class="line"></span><br><span class="line"># 删除文档</span><br><span class="line">db.COLLECTION_NAME.remove()</span><br><span class="line"></span><br><span class="line"># 查询文档</span><br><span class="line">db.COLLECTION_NAME.find(<span class="keyword">query</span>, projection)</span><br></pre></td></tr></table></figure><h1 id="【11-3】连接-MongoDB"><a href="#【11-3】连接-MongoDB" class="headerlink" title="【11.3】连接 MongoDB"></a><font color="#ff0000">【11.3】连接 MongoDB</font></h1><p>连接 MongoDB 需要导入 pymongo 库，使用 <code>MongoClient()</code> 方法，向其传入地址参数 host 和 端口参数 port 即可 </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pymongo</span><br><span class="line"></span><br><span class="line">client = pymongo.MongoClient(host=<span class="string">'localhost'</span>, port=<span class="number">27017</span>)</span><br></pre></td></tr></table></figure><p>也可以直接传入 MongoDB 的连接字符串：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pymongo</span><br><span class="line"></span><br><span class="line">client = pymongo.MongoClient(<span class="string">'mongodb://localhost:27017/'</span>)</span><br></pre></td></tr></table></figure><h1 id="【11-4】指定数据库"><a href="#【11-4】指定数据库" class="headerlink" title="【11.4】指定数据库"></a><font color="#ff0000">【11.4】指定数据库</font></h1><p>使用以下语句皆可指定一个名为 spiders 的数据库：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db = client.spiders</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db = client[<span class="string">'spiders'</span>]</span><br></pre></td></tr></table></figure><h1 id="【11-5】指定集合"><a href="#【11-5】指定集合" class="headerlink" title="【11.5】指定集合"></a><font color="#ff0000">【11.5】指定集合</font></h1><p>MongoDB 的每个数据库包含多个集合（collection），类似于关系型数据库 MySQL 中的数据表，使用以下语句皆可指定一个名为 students 的集合：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">collection = db.students</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">collection = db[<span class="string">'students'</span>]</span><br></pre></td></tr></table></figure><h1 id="【11-6】插入数据"><a href="#【11-6】插入数据" class="headerlink" title="【11.6】插入数据"></a><font color="#ff0000">【11.6】插入数据</font></h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pymongo</span><br><span class="line"></span><br><span class="line">client = pymongo.MongoClient(host=<span class="string">'localhost'</span>, port=<span class="number">27017</span>)</span><br><span class="line">db = client.spiders</span><br><span class="line">collection = db.students</span><br><span class="line">students = &#123;</span><br><span class="line">    <span class="string">'id'</span>: <span class="string">'17110105'</span>,</span><br><span class="line">    <span class="string">'name'</span>: <span class="string">'TRHX'</span>,</span><br><span class="line">    <span class="string">'age'</span>: <span class="number">20</span>,</span><br><span class="line">    <span class="string">'gender'</span>: <span class="string">'male'</span></span><br><span class="line">&#125;</span><br><span class="line">result = collection.insert(students)</span><br><span class="line">print(result)</span><br></pre></td></tr></table></figure><p>在 spiders 数据库的 students 集合里，新建一条学生数据，该数据以字典形式表示，调用 collection 的 <code>insert()</code> 方法插入数据，在 MongoDB 中，每条数据都有一个_id 属性来唯一标识。如果没有显式指明该属性，MongoDB 会自动产生一个 ObjectId 类型的_id 属性。<code>insert()</code> 方法会在执行后返回 _id  值，在 MongoDB 数据库里面可以看到已经成功插入数据，输出结果：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">5</span>d6f1a4b57b65e1547bb3c24</span><br></pre></td></tr></table></figure><fancybox><br><img src="https://cdn.jsdelivr.net/gh/TRHX/ImageHosting/ITRHX-PIC/A41/01.png" alt="01"><br></fancybox><p>进阶操作：同时插入多条数据，以列表形式传递：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pymongo</span><br><span class="line"></span><br><span class="line">client = pymongo.MongoClient(host=<span class="string">'localhost'</span>, port=<span class="number">27017</span>)</span><br><span class="line">db = client.spiders</span><br><span class="line">collection = db.students</span><br><span class="line">students1 = &#123;</span><br><span class="line">    <span class="string">'id'</span>: <span class="string">'17110105'</span>,</span><br><span class="line">    <span class="string">'name'</span>: <span class="string">'TRHX'</span>,</span><br><span class="line">    <span class="string">'age'</span>: <span class="number">20</span>,</span><br><span class="line">    <span class="string">'gender'</span>: <span class="string">'male'</span></span><br><span class="line">&#125;</span><br><span class="line">students2 = &#123;</span><br><span class="line">    <span class="string">'id'</span>: <span class="string">'17110106'</span>,</span><br><span class="line">    <span class="string">'name'</span>: <span class="string">'AAAA'</span>,</span><br><span class="line">    <span class="string">'age'</span>: <span class="number">22</span>,</span><br><span class="line">    <span class="string">'gender'</span>: <span class="string">'male'</span></span><br><span class="line">&#125;</span><br><span class="line">result = collection.insert([students1, students2])</span><br><span class="line">print(result)</span><br></pre></td></tr></table></figure><p>输出结果：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[ObjectId(<span class="string">'5d6f2be3cd1721962218a709'</span>), ObjectId(<span class="string">'5d6f2be3cd1721962218a70a'</span>)]</span><br></pre></td></tr></table></figure><fancybox><br><img src="https://cdn.jsdelivr.net/gh/TRHX/ImageHosting/ITRHX-PIC/A41/02.png" alt="02"><br></fancybox><p>PyMongo 3.x 及以上版本中，推荐使用 <code>insert_one()</code> 和 <code>insert_many()</code> 方法来分别插入单条记录和多条记录，示例：</p><p>插入单条记录</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pymongo</span><br><span class="line"></span><br><span class="line">client = pymongo.MongoClient(host=<span class="string">'localhost'</span>, port=<span class="number">27017</span>)</span><br><span class="line">db = client.spiders</span><br><span class="line">collection = db.students</span><br><span class="line">students = &#123;</span><br><span class="line">    <span class="string">'id'</span>: <span class="string">'17110105'</span>,</span><br><span class="line">    <span class="string">'name'</span>: <span class="string">'TRHX'</span>,</span><br><span class="line">    <span class="string">'age'</span>: <span class="number">20</span>,</span><br><span class="line">    <span class="string">'gender'</span>: <span class="string">'male'</span></span><br><span class="line">&#125;</span><br><span class="line">result = collection.insert_one(students)</span><br><span class="line">print(result)</span><br><span class="line">print(result.inserted_id)</span><br></pre></td></tr></table></figure><p>返回的是 InsertOneResult 对象，调用其 <code>inserted_id</code> 属性获取_id：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;pymongo.results.InsertOneResult object at <span class="number">0x0000020ED91A5608</span>&gt;</span><br><span class="line"><span class="number">5</span>d6f73940fe700c5a7ac19f0</span><br></pre></td></tr></table></figure><p>插入多条记录</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pymongo</span><br><span class="line"></span><br><span class="line">client = pymongo.MongoClient(host=<span class="string">'localhost'</span>, port=<span class="number">27017</span>)</span><br><span class="line">db = client.spiders</span><br><span class="line">collection = db.students</span><br><span class="line">students1 = &#123;</span><br><span class="line">    <span class="string">'id'</span>: <span class="string">'17110105'</span>,</span><br><span class="line">    <span class="string">'name'</span>: <span class="string">'TRHX'</span>,</span><br><span class="line">    <span class="string">'age'</span>: <span class="number">20</span>,</span><br><span class="line">    <span class="string">'gender'</span>: <span class="string">'male'</span></span><br><span class="line">&#125;</span><br><span class="line">students2 = &#123;</span><br><span class="line">    <span class="string">'id'</span>: <span class="string">'17110106'</span>,</span><br><span class="line">    <span class="string">'name'</span>: <span class="string">'AAAA'</span>,</span><br><span class="line">    <span class="string">'age'</span>: <span class="number">22</span>,</span><br><span class="line">    <span class="string">'gender'</span>: <span class="string">'male'</span></span><br><span class="line">&#125;</span><br><span class="line">result = collection.insert_many([students1, students2])</span><br><span class="line">print(result)</span><br><span class="line">print(result.inserted_ids)</span><br></pre></td></tr></table></figure><p>返回的类型是 InsertManyResult，调用 <code>inserted_ids</code> 属性可以获取插入数据的_id 列表：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;pymongo.results.InsertManyResult object at <span class="number">0x0000021698DD36C8</span>&gt;</span><br><span class="line">[ObjectId(<span class="string">'5d6f68598fa881c69b2e0006'</span>), ObjectId(<span class="string">'5d6f68598fa881c69b2e0007'</span>)]</span><br></pre></td></tr></table></figure><h1 id="【11-6】数据查询"><a href="#【11-6】数据查询" class="headerlink" title="【11.6】数据查询"></a><font color="#ff0000">【11.6】数据查询</font></h1><p>事先已经创建好 spiders 数据库和 students 集合，包含以下数据：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">_id:ObjectId("5d6f95d40828142f1dc35fa5")</span><br><span class="line">id:"17110105"</span><br><span class="line">name:"TRHX"</span><br><span class="line">age:20</span><br><span class="line">gender:"male"</span><br><span class="line"></span><br><span class="line">_id:ObjectId("5d6f95d40828142f1dc35fa6")</span><br><span class="line">id:"17110106"</span><br><span class="line">name:"AAA"</span><br><span class="line">age:20</span><br><span class="line">gender:"male"</span><br><span class="line"></span><br><span class="line">_id:ObjectId("5d6f95d40828142f1dc35fa7")</span><br><span class="line">id:"17110107"</span><br><span class="line">name:"BBB"</span><br><span class="line">age:19</span><br><span class="line">gender:"female"</span><br><span class="line"></span><br><span class="line">_id:ObjectId("5d6f95d40828142f1dc35fa8")</span><br><span class="line">id:"17110108"</span><br><span class="line">name:"CCC"</span><br><span class="line">age:22</span><br><span class="line">gender:"male"</span><br></pre></td></tr></table></figure><p>查询方法一：利用 <code>find_one()</code> 或 <code>find()</code> 方法进行查询， <code>find_one()</code> 查询得到的是单个结果，<code>find()</code> 则返回一个生成器对象</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pymongo</span><br><span class="line"></span><br><span class="line">client = pymongo.MongoClient(host=<span class="string">'localhost'</span>, port=<span class="number">27017</span>)</span><br><span class="line">db = client.spiders</span><br><span class="line">collection = db.students</span><br><span class="line">result = collection.find_one(&#123;<span class="string">'name'</span>: <span class="string">'TRHX'</span>&#125;)</span><br><span class="line">print(result)</span><br></pre></td></tr></table></figure><p>查询 name 为 TRHX 的数据，返回一个字典类型：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;<span class="string">'_id'</span>: ObjectId(<span class="string">'5d6f95d40828142f1dc35fa5'</span>), <span class="string">'id'</span>: <span class="string">'17110105'</span>, <span class="string">'name'</span>: <span class="string">'TRHX'</span>, <span class="string">'age'</span>: <span class="number">20</span>, <span class="string">'gender'</span>: <span class="string">'male'</span>&#125;</span><br></pre></td></tr></table></figure><p>查询方法二：根据 ObjectId 查询，查询时需要使用 bson 库里面的 objectid：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pymongo</span><br><span class="line"><span class="keyword">from</span> bson.objectid <span class="keyword">import</span> ObjectId</span><br><span class="line"></span><br><span class="line">client = pymongo.MongoClient(host=<span class="string">'localhost'</span>, port=<span class="number">27017</span>)</span><br><span class="line">db = client.spiders</span><br><span class="line">collection = db.students</span><br><span class="line">result = collection.find_one(&#123;<span class="string">'_id'</span>: ObjectId(<span class="string">'5d6f95d40828142f1dc35fa7'</span>)&#125;)</span><br><span class="line">print(result)</span><br></pre></td></tr></table></figure><p>查询结果：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;<span class="string">'_id'</span>: ObjectId(<span class="string">'5d6f95d40828142f1dc35fa7'</span>), <span class="string">'id'</span>: <span class="string">'17110107'</span>, <span class="string">'name'</span>: <span class="string">'BBB'</span>, <span class="string">'age'</span>: <span class="number">19</span>, <span class="string">'gender'</span>: <span class="string">'female'</span>&#125;</span><br></pre></td></tr></table></figure><p>使用 <code>find()</code> 方法查询多条数据：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pymongo</span><br><span class="line"></span><br><span class="line">client = pymongo.MongoClient(host=<span class="string">'localhost'</span>, port=<span class="number">27017</span>)</span><br><span class="line">db = client.spiders</span><br><span class="line">collection = db.students</span><br><span class="line">results = collection.find(&#123;<span class="string">'gender'</span>: <span class="string">'male'</span>&#125;)</span><br><span class="line">print(results)</span><br><span class="line"><span class="keyword">for</span> result <span class="keyword">in</span> results:</span><br><span class="line">    print(result)</span><br></pre></td></tr></table></figure><p><code>find()</code> 方法返回一个生成器对象，遍历得到所有数据，每条数据都是字典类型：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;pymongo.cursor.Cursor object at <span class="number">0x00000191F69AAA90</span>&gt;</span><br><span class="line">&#123;<span class="string">'_id'</span>: ObjectId(<span class="string">'5d6f95d40828142f1dc35fa5'</span>), <span class="string">'id'</span>: <span class="string">'17110105'</span>, <span class="string">'name'</span>: <span class="string">'TRHX'</span>, <span class="string">'age'</span>: <span class="number">20</span>, <span class="string">'gender'</span>: <span class="string">'male'</span>&#125;</span><br><span class="line">&#123;<span class="string">'_id'</span>: ObjectId(<span class="string">'5d6f95d40828142f1dc35fa6'</span>), <span class="string">'id'</span>: <span class="string">'17110106'</span>, <span class="string">'name'</span>: <span class="string">'AAA'</span>, <span class="string">'age'</span>: <span class="number">20</span>, <span class="string">'gender'</span>: <span class="string">'male'</span>&#125;</span><br><span class="line">&#123;<span class="string">'_id'</span>: ObjectId(<span class="string">'5d6f95d40828142f1dc35fa8'</span>), <span class="string">'id'</span>: <span class="string">'17110108'</span>, <span class="string">'name'</span>: <span class="string">'CCC'</span>, <span class="string">'age'</span>: <span class="number">22</span>, <span class="string">'gender'</span>: <span class="string">'male'</span>&#125;</span><br></pre></td></tr></table></figure><p>在查询条件中加入比较符号进行查询，以下代码实现了年龄大于等于20的数据查询：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pymongo</span><br><span class="line"></span><br><span class="line">client = pymongo.MongoClient(host=<span class="string">'localhost'</span>, port=<span class="number">27017</span>)</span><br><span class="line">db = client.spiders</span><br><span class="line">collection = db.students</span><br><span class="line">results = collection.find(&#123;<span class="string">'age'</span>: &#123;<span class="string">'$gte'</span>: <span class="number">20</span>&#125;&#125;)</span><br><span class="line"><span class="keyword">for</span> result <span class="keyword">in</span> results:</span><br><span class="line">    print(result)</span><br></pre></td></tr></table></figure><p>符号 <code>$gte</code> 表示大于等于，查询结果如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;<span class="string">'_id'</span>: ObjectId(<span class="string">'5d6f95d40828142f1dc35fa5'</span>), <span class="string">'id'</span>: <span class="string">'17110105'</span>, <span class="string">'name'</span>: <span class="string">'TRHX'</span>, <span class="string">'age'</span>: <span class="number">20</span>, <span class="string">'gender'</span>: <span class="string">'male'</span>&#125;</span><br><span class="line">&#123;<span class="string">'_id'</span>: ObjectId(<span class="string">'5d6f95d40828142f1dc35fa6'</span>), <span class="string">'id'</span>: <span class="string">'17110106'</span>, <span class="string">'name'</span>: <span class="string">'AAA'</span>, <span class="string">'age'</span>: <span class="number">20</span>, <span class="string">'gender'</span>: <span class="string">'male'</span>&#125;</span><br><span class="line">&#123;<span class="string">'_id'</span>: ObjectId(<span class="string">'5d6f95d40828142f1dc35fa8'</span>), <span class="string">'id'</span>: <span class="string">'17110108'</span>, <span class="string">'name'</span>: <span class="string">'CCC'</span>, <span class="string">'age'</span>: <span class="number">22</span>, <span class="string">'gender'</span>: <span class="string">'male'</span>&#125;</span><br></pre></td></tr></table></figure><center>附表：各种比较符号</center><table><thead><tr><th>符号</th><th>含义</th><th>示例</th></tr></thead><tbody><tr><td>$lt</td><td>小于</td><td>{‘age’: {‘$lt’: 20}}</td></tr><tr><td>$gt</td><td>大于</td><td>{‘age’: {‘$gt’: 20}}</td></tr><tr><td>$lte</td><td>小于等于</td><td>{‘age’: {‘$lte’: 20}}</td></tr><tr><td>$gte</td><td>大于等于</td><td>{‘age’: {‘$gte’: 20}}</td></tr><tr><td>$ne</td><td>不等于</td><td>{‘age’: {‘$ne’: 20}}</td></tr><tr><td>$in</td><td>在范围内</td><td>{‘age’: {‘$in’: [20, 23]}}</td></tr><tr><td>$nin</td><td>不在范围内</td><td>{‘age’: {‘$nin’: [20, 23]}}</td></tr></tbody></table><p>在查询条件中加入功能符号进行查询，以下代码用正则匹配实现了对名字以 T 开头的学生数据的查询：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pymongo</span><br><span class="line"></span><br><span class="line">client = pymongo.MongoClient(host=<span class="string">'localhost'</span>, port=<span class="number">27017</span>)</span><br><span class="line">db = client.spiders</span><br><span class="line">collection = db.students</span><br><span class="line">results = collection.find(&#123;<span class="string">'name'</span>: &#123;<span class="string">'$regex'</span>: <span class="string">'^T.*'</span>&#125;&#125;)</span><br><span class="line"><span class="keyword">for</span> result <span class="keyword">in</span> results:</span><br><span class="line">    print(result)</span><br></pre></td></tr></table></figure><p>查询结果：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;<span class="string">'_id'</span>: ObjectId(<span class="string">'5d6f95d40828142f1dc35fa5'</span>), <span class="string">'id'</span>: <span class="string">'17110105'</span>, <span class="string">'name'</span>: <span class="string">'TRHX'</span>, <span class="string">'age'</span>: <span class="number">20</span>, <span class="string">'gender'</span>: <span class="string">'male'</span>&#125;</span><br></pre></td></tr></table></figure><center>附表：各种功能符号</center><table><thead><tr><th>符号</th><th>含义</th><th>示例</th><th>示例含义</th></tr></thead><tbody><tr><td>$regex</td><td>匹配正则表达式</td><td>{‘name’: {‘$regex’: ‘^T.*’}}</td><td>name 以 T 开头</td></tr><tr><td>$exists</td><td>属性是否存在</td><td>{‘name’: {‘$exists’: True}}</td><td>name 属性存在</td></tr><tr><td>$type</td><td>类型判断</td><td>{‘age’: {‘$type’: ‘int’}}</td><td>age 的类型为 int</td></tr><tr><td>$mod</td><td>数字模操作</td><td>{‘age’: {‘$mod’: [5, 0]}}</td><td>年龄模 5 余 0</td></tr><tr><td>$text</td><td>文本查询</td><td>{‘$text’: {‘$search’: ‘Mike’}}</td><td>text 类型的属性中包含 Mike 字符串</td></tr><tr><td>$where</td><td>高级条件查询</td><td>{‘$where’: ‘obj.fans_count == obj.follows_count’}</td><td>自身粉丝数等于关注数</td></tr></tbody></table><p>其他操作：<a href="https://docs.mongodb.com/manual/reference/operator/query/" target="_blank" rel="noopener">https://docs.mongodb.com/manual/reference/operator/query/</a></p><h1 id="【11-7】数据计数"><a href="#【11-7】数据计数" class="headerlink" title="【11.7】数据计数"></a><font color="#ff0000">【11.7】数据计数</font></h1><p>调用 <code>count()</code> 方法可以统计查询结果有多少条数据，输出结果为一个整数：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pymongo</span><br><span class="line"></span><br><span class="line">client = pymongo.MongoClient(host=<span class="string">'localhost'</span>, port=<span class="number">27017</span>)</span><br><span class="line">db = client.spiders</span><br><span class="line">collection = db.students</span><br><span class="line">result = collection.find(&#123;<span class="string">'name'</span>: &#123;<span class="string">'$regex'</span>: <span class="string">'^T.*'</span>&#125;&#125;).count()</span><br><span class="line">print(result)</span><br></pre></td></tr></table></figure><h1 id="【11-8】数据排序"><a href="#【11-8】数据排序" class="headerlink" title="【11.8】数据排序"></a><font color="#ff0000">【11.8】数据排序</font></h1><p>调用 <code>sort()</code> 方法，向其传入排序的字段及升降序标志即可完成排序：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pymongo</span><br><span class="line"></span><br><span class="line">client = pymongo.MongoClient(host=<span class="string">'localhost'</span>, port=<span class="number">27017</span>)</span><br><span class="line">db = client.spiders</span><br><span class="line">collection = db.students</span><br><span class="line">ascending = collection.find().sort(<span class="string">'name'</span>, pymongo.ASCENDING)</span><br><span class="line">descending = collection.find().sort(<span class="string">'name'</span>, pymongo.DESCENDING)</span><br><span class="line">print(<span class="string">'升序排列：'</span>, [result[<span class="string">'name'</span>] <span class="keyword">for</span> result <span class="keyword">in</span> ascending])</span><br><span class="line">print(<span class="string">'降序排列：'</span>, [result[<span class="string">'name'</span>] <span class="keyword">for</span> result <span class="keyword">in</span> descending])</span><br></pre></td></tr></table></figure><p>输出结果：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">升序排列： [<span class="string">'AAA'</span>, <span class="string">'BBB'</span>, <span class="string">'CCC'</span>, <span class="string">'TRHX'</span>]</span><br><span class="line">降序排列： [<span class="string">'TRHX'</span>, <span class="string">'CCC'</span>, <span class="string">'BBB'</span>, <span class="string">'AAA'</span>]</span><br></pre></td></tr></table></figure><h1 id="【11-9】数据偏移"><a href="#【11-9】数据偏移" class="headerlink" title="【11.9】数据偏移"></a><font color="#ff0000">【11.9】数据偏移</font></h1><p>利用 <code>skip()</code> 方法偏移几个位置，就可以跳过前几条数据，获取偏移量之后的几个数据；利用 <code>limit()</code> 方法指定获取前几条数据：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pymongo</span><br><span class="line"></span><br><span class="line">client = pymongo.MongoClient(host=<span class="string">'localhost'</span>, port=<span class="number">27017</span>)</span><br><span class="line">db = client.spiders</span><br><span class="line">collection = db.students</span><br><span class="line">ascending = collection.find().sort(<span class="string">'name'</span>, pymongo.ASCENDING).skip(<span class="number">1</span>)</span><br><span class="line">descending = collection.find().sort(<span class="string">'name'</span>, pymongo.DESCENDING).limit(<span class="number">2</span>)</span><br><span class="line">print(<span class="string">'升序排列（偏移量为1，获取后三条数据）：'</span>, [result[<span class="string">'name'</span>] <span class="keyword">for</span> result <span class="keyword">in</span> ascending])</span><br><span class="line">print(<span class="string">'降序排列（限制获取前两条数据）：'</span>, [result[<span class="string">'name'</span>] <span class="keyword">for</span> result <span class="keyword">in</span> descending])</span><br></pre></td></tr></table></figure><p>输出结果：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">升序排列（偏移量为<span class="number">1</span>，获取后三条数据）： [<span class="string">'BBB'</span>, <span class="string">'CCC'</span>, <span class="string">'TRHX'</span>]</span><br><span class="line">降序排列（限制获取前两条数据）： [<span class="string">'TRHX'</span>, <span class="string">'CCC'</span>]</span><br></pre></td></tr></table></figure><h1 id="【11-10】更新数据"><a href="#【11-10】更新数据" class="headerlink" title="【11.10】更新数据"></a><font color="#ff0000">【11.10】更新数据</font></h1><p>使用 <code>update()</code> 方法，指定更新的条件和更新后的数据即可：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pymongo</span><br><span class="line"></span><br><span class="line">client = pymongo.MongoClient(host=<span class="string">'localhost'</span>, port=<span class="number">27017</span>)</span><br><span class="line">db = client.spiders</span><br><span class="line">collection = db.students</span><br><span class="line">condition = &#123;<span class="string">'name'</span>: <span class="string">'TRHX'</span>&#125;</span><br><span class="line">student = collection.find_one(condition)</span><br><span class="line">student[<span class="string">'age'</span>] = <span class="number">18</span></span><br><span class="line">result = collection.update(condition, student)</span><br><span class="line">print(result)</span><br></pre></td></tr></table></figure><p>该代码将 name 为 TRHX 的 age 改为了 18，返回结果仍然是字典形式，ok 代表执行成功，nModified 代表影响的数据条数：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;<span class="string">'n'</span>: <span class="number">1</span>, <span class="string">'nModified'</span>: <span class="number">1</span>, <span class="string">'ok'</span>: <span class="number">1.0</span>, <span class="string">'updatedExisting'</span>: <span class="keyword">True</span>&#125;</span><br></pre></td></tr></table></figure><p>进阶操作：使用 <code>$set</code> 操作符对数据进行更新，指定更新的条件和更新后的数据即可，这样做的好处是：只更新指定的 student 字典内存在的字段，如果原先还有其他字段，则不会更新，也不会删除；如果不用 <code>$set</code> ，则会把之前的数据全部用 student 字典替换，如果原本存在其他字段，则会被删除</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pymongo</span><br><span class="line"></span><br><span class="line">client = pymongo.MongoClient(host=<span class="string">'localhost'</span>, port=<span class="number">27017</span>)</span><br><span class="line">db = client.spiders</span><br><span class="line">collection = db.students</span><br><span class="line">condition = &#123;<span class="string">'name'</span>: <span class="string">'TRHX'</span>&#125;</span><br><span class="line">student = collection.find_one(condition)</span><br><span class="line">student[<span class="string">'age'</span>] = <span class="number">18</span></span><br><span class="line">result = collection.update(condition, &#123;<span class="string">'$set'</span>: student&#125;)</span><br><span class="line">print(result)</span><br></pre></td></tr></table></figure><p>和插入数据的 <code>insert()</code> 方法一样，在 PyMongo 3.x 版本里，推荐使用 <code>update_one()</code> 和 <code>update_many()</code> 方法</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pymongo</span><br><span class="line"></span><br><span class="line">client = pymongo.MongoClient(host=<span class="string">'localhost'</span>, port=<span class="number">27017</span>)</span><br><span class="line">db = client.spiders</span><br><span class="line">collection = db.students</span><br><span class="line">condition = &#123;<span class="string">'name'</span>: <span class="string">'TRHX'</span>&#125;</span><br><span class="line">student = collection.find_one(condition)</span><br><span class="line">student[<span class="string">'age'</span>] = <span class="number">19</span></span><br><span class="line">result = collection.update_one(condition, &#123;<span class="string">'$set'</span>: student&#125;)</span><br><span class="line">print(result)</span><br><span class="line">print(result.matched_count, result.modified_count)</span><br></pre></td></tr></table></figure><p>注意：<code>update_one()</code> 方法不能直接传入修改后的字典，只能使用 <code>{&#39;$set&#39;: student}</code> 的形式传入，可以调用 <code>matched_count</code> 和 <code>modified_count</code> 属性，获取匹配的数据条数和影响的数据条数：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;pymongo.results.UpdateResult object at <span class="number">0x00000235A1684508</span>&gt;</span><br><span class="line"><span class="number">1</span> <span class="number">1</span></span><br></pre></td></tr></table></figure><p>使用<code>update_many()</code> 方法可以将所有符合条件的数据都更新：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pymongo</span><br><span class="line"></span><br><span class="line">client = pymongo.MongoClient(host=<span class="string">'localhost'</span>, port=<span class="number">27017</span>)</span><br><span class="line">db = client.spiders</span><br><span class="line">collection = db.students</span><br><span class="line">condition = &#123;<span class="string">'age'</span>: &#123;<span class="string">'$gt'</span>: <span class="number">18</span>&#125;&#125;</span><br><span class="line">result = collection.update_many(condition, &#123;<span class="string">'$set'</span>: &#123;<span class="string">'age'</span>: <span class="number">25</span>&#125;&#125;)</span><br><span class="line">print(result)</span><br><span class="line">print(result.matched_count, result.modified_count)</span><br></pre></td></tr></table></figure><p>匹配所有年龄大于 18 的数据，更新条件为将这些所有满足条件的年龄都设置成 25，输出结果如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;pymongo.results.UpdateResult object at <span class="number">0x00000285CECC45C8</span>&gt;</span><br><span class="line"><span class="number">4</span> <span class="number">4</span></span><br></pre></td></tr></table></figure><h1 id="【11-11】删除数据"><a href="#【11-11】删除数据" class="headerlink" title="【11.11】删除数据"></a><font color="#ff0000">【11.11】删除数据</font></h1><p>调用 <code>remove()</code> 方法并指定删除的条件，此时符合条件的所有数据均会被删除</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pymongo</span><br><span class="line"></span><br><span class="line">client = pymongo.MongoClient(host=<span class="string">'localhost'</span>, port=<span class="number">27017</span>)</span><br><span class="line">db = client.spiders</span><br><span class="line">collection = db.students</span><br><span class="line">result = collection.remove(&#123;<span class="string">'name'</span>: <span class="string">'CCC'</span>&#125;)</span><br><span class="line">print(result)</span><br></pre></td></tr></table></figure><p>输出结果：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;<span class="string">'n'</span>: <span class="number">1</span>, <span class="string">'ok'</span>: <span class="number">1.0</span>&#125;</span><br></pre></td></tr></table></figure><p>同样的，在 PyMongo 3.x 版本里，推荐使用 <code>delete_one()</code> 和 <code>delete_many()</code> 方法</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pymongo</span><br><span class="line"></span><br><span class="line">client = pymongo.MongoClient(host=<span class="string">'localhost'</span>, port=<span class="number">27017</span>)</span><br><span class="line">db = client.spiders</span><br><span class="line">collection = db.students</span><br><span class="line">result = collection.delete_one(&#123;<span class="string">'name'</span>: <span class="string">'AAA'</span>&#125;)</span><br><span class="line">print(result)</span><br><span class="line">print(result.deleted_count)</span><br><span class="line">result = collection.delete_many(&#123;<span class="string">'gender'</span>: <span class="string">'female'</span>&#125;)</span><br><span class="line">print(result.deleted_count)</span><br></pre></td></tr></table></figure><p>调用 <code>deleted_count</code> 属性可以获取删除的数据条数，输出结果：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;pymongo.results.DeleteResult object at <span class="number">0x0000024441B245C8</span>&gt;</span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="number">1</span></span><br></pre></td></tr></table></figure><p>PyMongo 官方文档：<a href="http://api.mongodb.com/python/current/api/pymongo/collection.html" target="_blank" rel="noopener">http://api.mongodb.com/python/current/api/pymongo/collection.html</a></p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;center&gt;&lt;font color=&quot;#1BC3FB&quot; size=&quot;4&quot;&gt;Python3 爬虫学习笔记第十一章 —— 【MongoDB数据储存】&lt;/font&gt;&lt;/center&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="Python3 学习笔记" scheme="https://www.itrhx.com/categories/Python3-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
      <category term="Python3 爬虫" scheme="https://www.itrhx.com/categories/Python3-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/Python3-%E7%88%AC%E8%99%AB/"/>
    
    
      <category term="爬虫" scheme="https://www.itrhx.com/tags/%E7%88%AC%E8%99%AB/"/>
    
      <category term="MongoDB" scheme="https://www.itrhx.com/tags/MongoDB/"/>
    
  </entry>
  
  <entry>
    <title>Python3 爬虫学习笔记 C10</title>
    <link href="https://www.itrhx.com/2019/09/03/A40-Python3-spider-C10/"/>
    <id>https://www.itrhx.com/2019/09/03/A40-Python3-spider-C10/</id>
    <published>2019-09-03T15:39:27.326Z</published>
    <updated>2019-09-13T17:19:14.650Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><blockquote><center><font color="#1BC3FB" size="4">Python3 爬虫学习笔记第十章 —— 【MySQL数据储存】</font></center></blockquote><a id="more"></a><h1 id="【10-1】MySQL-基本操作语句"><a href="#【10-1】MySQL-基本操作语句" class="headerlink" title="【10.1】MySQL 基本操作语句"></a><font color="#ff0000">【10.1】MySQL 基本操作语句</font></h1><p>安装完 MySQL 后，打开 MySQL x.x Command Line Client - Unicode，输入密码即可登录 MySQL，也可在 MySQL 安装目录下打开 cmd 使用命令登录数据库</p><h2 id="数据库操作"><a href="#数据库操作" class="headerlink" title="数据库操作"></a>数据库操作</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"># 连接数据库</span><br><span class="line">mysql -u root -p</span><br><span class="line"></span><br><span class="line"># 退出数据库</span><br><span class="line">exit</span><br><span class="line"></span><br><span class="line"># 查看所有的数据库</span><br><span class="line"><span class="keyword">SHOW</span> <span class="keyword">DATABASES</span>;</span><br><span class="line"></span><br><span class="line"># 创建一个数据库</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">DATABASE</span> X;</span><br><span class="line"></span><br><span class="line"># 删除一个数据库</span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">DATABASE</span> <span class="keyword">IF</span> <span class="keyword">EXISTS</span> X;</span><br><span class="line"></span><br><span class="line"># 使用这个数据库</span><br><span class="line"><span class="keyword">USE</span> X;</span><br></pre></td></tr></table></figure><h2 id="表操作"><a href="#表操作" class="headerlink" title="表操作"></a>表操作</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"># 查看所有的表</span><br><span class="line"><span class="keyword">SHOW</span> <span class="keyword">TABLES</span> ;</span><br><span class="line"></span><br><span class="line"># 创建一个表</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> n(<span class="keyword">id</span> <span class="built_in">INT</span>, <span class="keyword">name</span> <span class="built_in">VARCHAR</span>(<span class="number">10</span>));</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> m(<span class="keyword">id</span> <span class="built_in">INT</span>, <span class="keyword">name</span> <span class="built_in">VARCHAR</span>(<span class="number">10</span>), PRIMARY <span class="keyword">KEY</span> (<span class="keyword">id</span>), FOREIGN <span class="keyword">KEY</span> (<span class="keyword">id</span>) <span class="keyword">REFERENCES</span> n(<span class="keyword">id</span>), <span class="keyword">UNIQUE</span> (<span class="keyword">name</span>));</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> m(<span class="keyword">id</span> <span class="built_in">INT</span>, <span class="keyword">name</span> <span class="built_in">VARCHAR</span>(<span class="number">10</span>));</span><br><span class="line"></span><br><span class="line"># 直接将查询结果导入或复制到新创建的表</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> n <span class="keyword">SELECT</span> * <span class="keyword">FROM</span> m;</span><br><span class="line"></span><br><span class="line"># 新创建的表与一个存在的表的数据结构类似</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> m <span class="keyword">LIKE</span> n;</span><br><span class="line"></span><br><span class="line"># 创建一个临时表</span><br><span class="line"># 临时表将在你连接MySQL期间存在。当断开连接时，MySQL将自动删除表并释放所用的空间。也可手动删除。</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TEMPORARY</span> <span class="keyword">TABLE</span> l(<span class="keyword">id</span> <span class="built_in">INT</span>, <span class="keyword">name</span> <span class="built_in">VARCHAR</span>(<span class="number">10</span>));</span><br><span class="line"></span><br><span class="line"># 直接将查询结果导入或复制到新创建的临时表</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TEMPORARY</span> <span class="keyword">TABLE</span> tt <span class="keyword">SELECT</span> * <span class="keyword">FROM</span> n;</span><br><span class="line"></span><br><span class="line"># 删除一个存在表</span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> <span class="keyword">IF</span> <span class="keyword">EXISTS</span> m;</span><br><span class="line"></span><br><span class="line"># 更改存在表的名称</span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> n <span class="keyword">RENAME</span> m;</span><br><span class="line"><span class="keyword">RENAME</span> <span class="keyword">TABLE</span> n <span class="keyword">TO</span> m;</span><br><span class="line"></span><br><span class="line"># 查看表的结构(以下五条语句效果相同）</span><br><span class="line">DESC n;</span><br><span class="line"><span class="keyword">DESCRIBE</span> n;</span><br><span class="line"><span class="keyword">SHOW</span> <span class="keyword">COLUMNS</span> <span class="keyword">IN</span> n;</span><br><span class="line"><span class="keyword">SHOW</span> <span class="keyword">COLUMNS</span> <span class="keyword">FROM</span> n;</span><br><span class="line"><span class="keyword">EXPLAIN</span> n;</span><br><span class="line"></span><br><span class="line"># 查看表的创建语句</span><br><span class="line"><span class="keyword">SHOW</span> <span class="keyword">CREATE</span> <span class="keyword">TABLE</span> n;</span><br></pre></td></tr></table></figure><h2 id="表的结构"><a href="#表的结构" class="headerlink" title="表的结构"></a>表的结构</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"># 添加字段</span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> n <span class="keyword">ADD</span> age <span class="built_in">VARCHAR</span>(<span class="number">2</span>);</span><br><span class="line"></span><br><span class="line"># 添加字段时设定位置</span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> n <span class="keyword">ADD</span> age <span class="built_in">VARCHAR</span>(<span class="number">2</span>)  <span class="keyword">FIRST</span>;</span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> n <span class="keyword">ADD</span> age <span class="built_in">VARCHAR</span>(<span class="number">2</span>)  <span class="keyword">AFTER</span> <span class="keyword">name</span>;</span><br><span class="line"></span><br><span class="line"># 修改字段在表中的位置</span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> n <span class="keyword">MODIFY</span> age <span class="built_in">VARCHAR</span>(<span class="number">2</span>) <span class="keyword">AFTER</span> <span class="keyword">name</span>;</span><br><span class="line"></span><br><span class="line"># 删除字段</span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> n <span class="keyword">DROP</span> age;</span><br><span class="line"></span><br><span class="line"># 更改字段属性和属性</span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> n <span class="keyword">CHANGE</span> age a <span class="built_in">INT</span>;</span><br><span class="line"></span><br><span class="line"># 只更改字段属性</span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> n <span class="keyword">MODIFY</span> age <span class="built_in">VARCHAR</span>(<span class="number">7</span>) ;</span><br><span class="line"></span><br><span class="line"># 改变表的存储引擎</span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> t <span class="keyword">ENGINE</span> myisam;</span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> t <span class="keyword">ENGINE</span> <span class="keyword">innodb</span>;</span><br><span class="line"></span><br><span class="line"># 设定自增 初始为1，只能一个字段使用，该字段为主键的一部分</span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> t AUTO_INCREMENT = <span class="number">0</span>;</span><br></pre></td></tr></table></figure><h2 id="表的数据"><a href="#表的数据" class="headerlink" title="表的数据"></a>表的数据</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"># 增加数据</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> n <span class="keyword">VALUES</span> (<span class="number">1</span>, <span class="string">'tom'</span>, <span class="string">'23'</span>), (<span class="number">2</span>, <span class="string">'john'</span>, <span class="string">'22'</span>);</span><br><span class="line">INSERT INTO n SELECT * FROM n;  # 把数据复制一遍重新插入</span><br><span class="line"></span><br><span class="line"># 删除数据</span><br><span class="line"><span class="keyword">DELETE</span> <span class="keyword">FROM</span> n <span class="keyword">WHERE</span> <span class="keyword">id</span> = <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line"># 更改数据</span><br><span class="line"><span class="keyword">UPDATE</span> n <span class="keyword">SET</span> <span class="keyword">name</span> = <span class="string">'tom'</span> <span class="keyword">WHERE</span> <span class="keyword">id</span> = <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line"># 数据查找</span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> n <span class="keyword">WHERE</span> <span class="keyword">name</span> <span class="keyword">LIKE</span> <span class="string">'%h%'</span>;</span><br><span class="line"></span><br><span class="line"># 数据排序(反序)</span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> n <span class="keyword">ORDER</span> <span class="keyword">BY</span> <span class="keyword">name</span>, <span class="keyword">id</span> <span class="keyword">DESC</span> ;</span><br></pre></td></tr></table></figure><h1 id="【10-2】Python-连接-MySQL"><a href="#【10-2】Python-连接-MySQL" class="headerlink" title="【10.2】Python 连接 MySQL"></a><font color="#ff0000">【10.2】Python 连接 MySQL</font></h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pymysql</span><br><span class="line"></span><br><span class="line">db = pymysql.connect(host=<span class="string">'localhost'</span>, user=<span class="string">'root'</span>, password=<span class="string">'000000'</span>, port=<span class="number">3306</span>)</span><br><span class="line">cursor = db.cursor()</span><br><span class="line">cursor.execute(<span class="string">'SELECT VERSION()'</span>)</span><br><span class="line">data = cursor.fetchone()</span><br><span class="line">print(<span class="string">'Database version:'</span>, data)</span><br><span class="line">cursor.execute(<span class="string">"CREATE DATABASE spiders DEFAULT CHARACTER SET utf8mb4"</span>)</span><br><span class="line">db.close()</span><br></pre></td></tr></table></figure><p>通过 PyMySQL 的 connect 方法声明一个 MySQL 连接对象 db，当前 MySQL 数据库运行在本地，设定 <code>host=&#39;localhost&#39;</code>，用户名为 <code>root</code>，登录密码为 <code>000000</code>，运行在 <code>3306</code> 端口，调用 <code>cursor()</code> 方法获得 MySQL 的操作游标，该游标用来执行 SQL 语句，通过游标操作 <code>execute()</code> 方法写入 SQL 语句，第一条 SQL 语句获取 MySQL 的版本信息，调用 <code>fetchone()</code> 方法获得第一条数据，即 MySQL 的版本号。第二条 SQL 语句执行创建 spiders 数据库的操作，编码为 utf8mb4，运行该段代码将输出 MySQL 的版本号：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Database version: (<span class="string">'8.0.17'</span>,)</span><br></pre></td></tr></table></figure><h1 id="【10-3】创建表"><a href="#【10-3】创建表" class="headerlink" title="【10.3】创建表"></a><font color="#ff0000">【10.3】创建表</font></h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pymysql</span><br><span class="line"></span><br><span class="line">db = pymysql.connect(host=<span class="string">'localhost'</span>, user=<span class="string">'root'</span>, password=<span class="string">'000000'</span>, port=<span class="number">3306</span>, db=<span class="string">'spiders'</span>)</span><br><span class="line">cursor = db.cursor()</span><br><span class="line">sql = <span class="string">'CREATE TABLE IF NOT EXISTS students (id VARCHAR(255) NOT NULL, name VARCHAR(255) NOT NULL, age VARCHAR(255) NOT NULL, PRIMARY KEY (id))'</span></span><br><span class="line">cursor.execute(sql)</span><br><span class="line">db.close()</span><br></pre></td></tr></table></figure><p>该段代码实现了在 spiders 数据库里创建了一个名为 students 的表，包含 id、name、age 三个字段，类型依次为 varchar、varchar、int</p><h1 id="【10-4】插入数据"><a href="#【10-4】插入数据" class="headerlink" title="【10.4】插入数据"></a><font color="#ff0000">【10.4】插入数据</font></h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pymysql</span><br><span class="line"></span><br><span class="line">id = <span class="string">'17110105'</span></span><br><span class="line">user = <span class="string">'TRH'</span></span><br><span class="line">age = <span class="number">20</span></span><br><span class="line">db = pymysql.connect(host=<span class="string">'localhost'</span>, user=<span class="string">'root'</span>, password=<span class="string">'000000'</span>, port=<span class="number">3306</span>, db=<span class="string">'spiders'</span>)</span><br><span class="line">cursor = db.cursor()</span><br><span class="line">sql = <span class="string">'INSERT INTO students(id, name, age) values(%s, %s, %s)'</span></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    cursor.execute(sql, (id, user, age))</span><br><span class="line">    db.commit()</span><br><span class="line"><span class="keyword">except</span>:</span><br><span class="line">    db.rollback()</span><br><span class="line">db.close()</span><br></pre></td></tr></table></figure><p><code>commit()</code> 方法的作用是实现数据插入，是真正将语句提交到数据库执行的方法，使用 <code>try except</code> 语句实现异常处理，如果执行失败，则调用 <code>rollback()</code> 方法执行数据回滚，保证原数据不被破坏，使用查询语句可以看到已经插入的数据：</p><fancybox><br><img src="https://cdn.jsdelivr.net/gh/TRHX/ImageHosting/ITRHX-PIC/A40/01.png" alt="01"><br></fancybox><p>进阶操作：将需要插入的数据构造成一个字典，这样的做法可以让插入方法无需改动，只需要传入一个动态变化的字典就行了，改写原来的代码如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pymysql</span><br><span class="line"></span><br><span class="line">data = &#123;</span><br><span class="line">    <span class="string">'id'</span>: <span class="string">'17110105'</span>,</span><br><span class="line">    <span class="string">'name'</span>: <span class="string">'TRH'</span>,</span><br><span class="line">    <span class="string">'age'</span>: <span class="number">20</span></span><br><span class="line">&#125;</span><br><span class="line">table = <span class="string">'students'</span></span><br><span class="line">keys = <span class="string">', '</span>.join(data.keys())</span><br><span class="line">values = <span class="string">', '</span>.join([<span class="string">'%s'</span>]*len(data))</span><br><span class="line">db = pymysql.connect(host=<span class="string">'localhost'</span>, user=<span class="string">'root'</span>, password=<span class="string">'000000'</span>, port=<span class="number">3306</span>, db=<span class="string">'spiders'</span>)</span><br><span class="line">cursor = db.cursor()</span><br><span class="line">sql = <span class="string">'INSERT INTO &#123;table&#125;(&#123;keys&#125;) VALUES (&#123;values&#125;)'</span>.format(table=table, keys=keys, values=values)</span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    cursor.execute(sql, tuple(data.values()))</span><br><span class="line">    print(<span class="string">'数据插入成功！'</span>)</span><br><span class="line">    db.commit()</span><br><span class="line"><span class="keyword">except</span>:</span><br><span class="line">    print(<span class="string">'数据插入失败！'</span>)</span><br><span class="line">    db.rollback()</span><br><span class="line">db.close()</span><br></pre></td></tr></table></figure><p>传入的数是字典，将其定义为 data 变量，表名定义成变量 table，构造插入的字段 id、name 和 age。<code>&#39;, &#39;.join(data.keys())</code>  的结果就是 id, name, age，接着需要构造多个 <code>%s</code> 当作占位符，有三个字段，就需要构造 <code>%s, %s, %s</code>。首先定义长度为 1 的数组 <code>[&#39;%s&#39;]</code>，然后用乘法将其扩充为 <code>[&#39;%s&#39;, &#39;%s&#39;, &#39;%s&#39;]</code>，再调用 <code>join()</code> 方法，最终变成 <code>%s, %s, %s</code>。再利用字符串的 <code>format()</code> 方法将表名、字段名和占位符构造出来。最终的 SQL 语句就被动态构造成了如下语句：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">INSERT INTO students(id, name, age) VALUES (%s, %s, %s)</span><br></pre></td></tr></table></figure><h1 id="【10-5】更新数据"><a href="#【10-5】更新数据" class="headerlink" title="【10.5】更新数据"></a><font color="#ff0000">【10.5】更新数据</font></h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pymysql</span><br><span class="line"></span><br><span class="line">data = &#123;</span><br><span class="line">    <span class="string">'id'</span>: <span class="string">'17110105'</span>,</span><br><span class="line">    <span class="string">'name'</span>: <span class="string">'TRH'</span>,</span><br><span class="line">    <span class="string">'age'</span>: <span class="number">21</span></span><br><span class="line">&#125;</span><br><span class="line">table = <span class="string">'students'</span></span><br><span class="line">keys = <span class="string">', '</span>.join(data.keys())</span><br><span class="line">values = <span class="string">', '</span>.join([<span class="string">'%s'</span>]*len(data))</span><br><span class="line">db = pymysql.connect(host=<span class="string">'localhost'</span>, user=<span class="string">'root'</span>, password=<span class="string">'000000'</span>, port=<span class="number">3306</span>, db=<span class="string">'spiders'</span>)</span><br><span class="line">cursor = db.cursor()</span><br><span class="line">sql = <span class="string">'INSERT INTO &#123;table&#125;(&#123;keys&#125;) VALUES (&#123;values&#125;) ON DUPLICATE KEY UPDATE'</span>.format(table=table, keys=keys, values=values)</span><br><span class="line">update = <span class="string">','</span>.join([<span class="string">"&#123;key&#125; = % s"</span>.format(key=key) <span class="keyword">for</span> key <span class="keyword">in</span> data])</span><br><span class="line">sql += update</span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    <span class="keyword">if</span> cursor.execute(sql, tuple(data.values())*<span class="number">2</span>):</span><br><span class="line">        print(<span class="string">'数据插入成功！'</span>)</span><br><span class="line">        db.commit()</span><br><span class="line"><span class="keyword">except</span>:</span><br><span class="line">    print(<span class="string">'数据插入失败！'</span>)</span><br><span class="line">    db.rollback()</span><br><span class="line">db.close()</span><br></pre></td></tr></table></figure><p><code>ON DUPLICATE KEY UPDATE</code> 表示如果主键已经存在，就执行更新操作，最终被构造成如下语句：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">INSERT INTO students(id, name, age) VALUES (% s, % s, % s) ON DUPLICATE KEY UPDATE id = % s, name = % s, age = % s</span><br></pre></td></tr></table></figure><h1 id="【10-6】删除数据"><a href="#【10-6】删除数据" class="headerlink" title="【10.6】删除数据"></a><font color="#ff0000">【10.6】删除数据</font></h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pymysql</span><br><span class="line"></span><br><span class="line">table = <span class="string">'students'</span></span><br><span class="line">condition = <span class="string">'age = 20'</span></span><br><span class="line">db = pymysql.connect(host=<span class="string">'localhost'</span>, user=<span class="string">'root'</span>, password=<span class="string">'000000'</span>, port=<span class="number">3306</span>, db=<span class="string">'spiders'</span>)</span><br><span class="line">cursor = db.cursor()</span><br><span class="line">sql = <span class="string">'DELETE FROM  &#123;table&#125; WHERE &#123;condition&#125;'</span>.format(table=table, condition=condition)</span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    cursor.execute(sql)</span><br><span class="line">    print(<span class="string">'数据删除成功！'</span>)</span><br><span class="line">    db.commit()</span><br><span class="line"><span class="keyword">except</span>:</span><br><span class="line">    print(<span class="string">'数据删除失败！'</span>)</span><br><span class="line">    db.rollback()</span><br><span class="line">db.close()</span><br></pre></td></tr></table></figure><p>删除操作直接使用 <code>DELETE</code> 语句，指定要删除的目标表名和删除条件即可</p><h1 id="【10-7】查询数据"><a href="#【10-7】查询数据" class="headerlink" title="【10.7】查询数据"></a><font color="#ff0000">【10.7】查询数据</font></h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pymysql</span><br><span class="line"></span><br><span class="line">table = <span class="string">'students'</span></span><br><span class="line">db = pymysql.connect(host=<span class="string">'localhost'</span>, user=<span class="string">'root'</span>, password=<span class="string">'000000'</span>, port=<span class="number">3306</span>, db=<span class="string">'spiders'</span>)</span><br><span class="line">cursor = db.cursor()</span><br><span class="line">sql = <span class="string">'SELECT * FROM students WHERE age &gt;= 20'</span></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    cursor.execute(sql)</span><br><span class="line">    print(<span class="string">'Count:'</span>, cursor.rowcount)</span><br><span class="line">    one = cursor.fetchone()</span><br><span class="line">    print(<span class="string">'One:'</span>, one)</span><br><span class="line">    results = cursor.fetchall()</span><br><span class="line">    print(<span class="string">'Results:'</span>, results)</span><br><span class="line">    print(<span class="string">'Results Type:'</span>, type(results))</span><br><span class="line">    <span class="keyword">for</span> row <span class="keyword">in</span> results:</span><br><span class="line">        print(row)</span><br><span class="line"><span class="keyword">except</span>:</span><br><span class="line">    print(<span class="string">'查询失败！'</span>)</span><br></pre></td></tr></table></figure><p><code>sql = &#39;SELECT * FROM students WHERE age &gt;= 20&#39;</code>：构造一条 SQL 语句，将年龄 大于等于20 岁的学生查询出来</p><p><code>cursor.rowcount</code>：调用 cursor 的 rowcount 属性获取查询结果的条数</p><p><code>cursor.fetchone()</code>：调用 cursor 的 fetchone() 方法，获取结果的第一条数据，返回结果是元组形式，元组的元素顺序跟字段一一对应，即第一个元素就是第一个字段 id，第二个元素就是第二个字段 name，以此类推</p><p><code>cursor.fetchall()</code>：调用 cursor 的 fetchall() 方法，得到结果的所有数据，它是二重元组，每个元素都是一条记录，本例中显示的是 3 条数据而不是 4 条，这是因为它的内部实现有一个偏移指针用来指向查询结果，最开始偏移指针指向第一条数据，取一次之后，指针偏移到下一条数据，这样再取的话，就会取到下一条数据了。我们最初调用了一次 fetchone 方法，这样结果的偏移指针就指向下一条数据，fetchall 方法返回的是偏移指针指向的数据一直到结束的所有数据，所以该方法获取的结果就只剩 3 个了</p><h1 id="【10-8】实战训练-—-爬取CSDN博客标题和地址保存到-MySQL"><a href="#【10-8】实战训练-—-爬取CSDN博客标题和地址保存到-MySQL" class="headerlink" title="【10.8】实战训练 — 爬取CSDN博客标题和地址保存到 MySQL"></a><font color="#ff0000">【10.8】实战训练 — 爬取CSDN博客标题和地址保存到 MySQL</font></h1><p>利用 requests 库构建请求，BeautifulSoup 解析库解析网页，获取自己博客文章的标题和地址，将其储存到本地 MySQL 数据库中，事先已经创建好了一个 blog 数据库，并创建了一个名为 article 的数据表，数据表包含 id、title、url 三个字段，其中 id 的 <code>AUTO_INCREMENT</code> 属性可以使 id 自己增加，<code>PRIMARY KEY</code> 关键字用于将 id 定义为主键</p><p>创建 article 数据表：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pymysql</span><br><span class="line"></span><br><span class="line">db = pymysql.connect(host=<span class="string">'localhost'</span>, user=<span class="string">'root'</span>, password=<span class="string">'000000'</span>, port=<span class="number">3306</span>, db=<span class="string">'blog'</span>)</span><br><span class="line">cursor = db.cursor()</span><br><span class="line">sql = <span class="string">'CREATE TABLE IF NOT EXISTS article (id INT NOT NULL AUTO_INCREMENT, title VARCHAR(255) NOT NULL, url VARCHAR(255) NOT NULL, PRIMARY KEY (id))'</span></span><br><span class="line">cursor.execute(sql)</span><br><span class="line">db.close()</span><br></pre></td></tr></table></figure><p>获取文章标题和对应的 URL 并将其储存到 MySQL 中：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> pymysql</span><br><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line"></span><br><span class="line">db = pymysql.connect(host=<span class="string">'localhost'</span>, user=<span class="string">'root'</span>, password=<span class="string">'000000'</span>, port=<span class="number">3306</span>, db=<span class="string">'blog'</span>)</span><br><span class="line">cursor = db.cursor()</span><br><span class="line"></span><br><span class="line">headers = &#123;</span><br><span class="line">    <span class="string">'User-Agent'</span>: <span class="string">'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/73.0.3683.86 Safari/537.36'</span>,</span><br><span class="line">&#125;</span><br><span class="line">url = <span class="string">"https://blog.csdn.net/qq_36759224"</span></span><br><span class="line"></span><br><span class="line">request = requests.get(url, headers=headers)</span><br><span class="line">soup = BeautifulSoup(request.text, <span class="string">'lxml'</span>)</span><br><span class="line">title_list = soup.find_all(<span class="string">'h4'</span>)</span><br><span class="line"><span class="keyword">for</span> list <span class="keyword">in</span> title_list:</span><br><span class="line">    s = list.a.text.strip()</span><br><span class="line">    title = s.replace(<span class="string">'原'</span>, <span class="string">''</span>)</span><br><span class="line">    url = list.a[<span class="string">'href'</span>].strip()</span><br><span class="line">    <span class="comment"># print(title + url)</span></span><br><span class="line">    cursor.execute(<span class="string">'INSERT INTO article (title, url) VALUES (%s, %s)'</span>, (title, url))</span><br><span class="line">db.commit()</span><br><span class="line">print(<span class="string">'数据写入完毕！'</span>)</span><br><span class="line">db.close()</span><br></pre></td></tr></table></figure><p>在命令行中使用 <code>SELECT * FROM article;</code> 命令可以查看到数据已经成功获取并储存到了数据库中：</p><fancybox><br><img src="https://cdn.jsdelivr.net/gh/TRHX/ImageHosting/ITRHX-PIC/A40/02.png" alt="02"><br></fancybox>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;center&gt;&lt;font color=&quot;#1BC3FB&quot; size=&quot;4&quot;&gt;Python3 爬虫学习笔记第十章 —— 【MySQL数据储存】&lt;/font&gt;&lt;/center&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="Python3 学习笔记" scheme="https://www.itrhx.com/categories/Python3-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
      <category term="Python3 爬虫" scheme="https://www.itrhx.com/categories/Python3-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/Python3-%E7%88%AC%E8%99%AB/"/>
    
    
      <category term="爬虫" scheme="https://www.itrhx.com/tags/%E7%88%AC%E8%99%AB/"/>
    
      <category term="MySQL" scheme="https://www.itrhx.com/tags/MySQL/"/>
    
  </entry>
  
  <entry>
    <title>Python3 爬虫学习笔记 C09</title>
    <link href="https://www.itrhx.com/2019/08/27/A39-Python3-spider-C09/"/>
    <id>https://www.itrhx.com/2019/08/27/A39-Python3-spider-C09/</id>
    <published>2019-08-27T10:58:37.295Z</published>
    <updated>2019-09-13T17:19:10.209Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><blockquote><center><font color="#1BC3FB" size="4">Python3 爬虫学习笔记第九章 —— 【文件储存】</font></center></blockquote><a id="more"></a><p>用解析器解析出数据之后，还需要对数据进行保存。保存的形式多种多样，最简单的形式是直接保存为文本文件，如 TXT、JSON、CSV 等。</p><h1 id="【9-1】TXT-文本存储"><a href="#【9-1】TXT-文本存储" class="headerlink" title="【9.1】TXT 文本存储"></a><font color="#ff0000">【9.1】TXT 文本存储</font></h1><p>TXT 文本存储的优点：操作非常简单，TXT 文本几乎兼容任何平台；缺点：不利于检索。</p><h2 id="【9-1-1】基本示例"><a href="#【9-1-1】基本示例" class="headerlink" title="【9.1.1】基本示例"></a><font color="#ff0000">【9.1.1】基本示例</font></h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">from</span> lxml <span class="keyword">import</span> etree</span><br><span class="line"></span><br><span class="line">headers = &#123;</span><br><span class="line">    <span class="string">'User-Agent'</span>: <span class="string">'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/73.0.3683.86 Safari/537.36'</span>,</span><br><span class="line">&#125;</span><br><span class="line">url = <span class="string">"https://blog.csdn.net/qq_36759224"</span></span><br><span class="line"></span><br><span class="line">request = requests.get(url, headers=headers)</span><br><span class="line">tree = etree.HTML(request.text)</span><br><span class="line">title_list = tree.xpath(<span class="string">'//h4/a/text()'</span>)</span><br><span class="line"><span class="keyword">for</span> title <span class="keyword">in</span> title_list:</span><br><span class="line">    <span class="keyword">with</span> open(<span class="string">'blog.txt'</span>, <span class="string">'a'</span>, encoding=<span class="string">'utf8'</span>) <span class="keyword">as</span> fp:</span><br><span class="line">        fp.write(title)</span><br></pre></td></tr></table></figure><p>代码实现了我的 CSDN 博客首页所有博文标题的爬取，利用 requests 请求库发送请求，获取响应，用 XPath 获取每一篇博文的标题，然后写入 blog.txt 文件中：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">帝都的凛冬</span><br><span class="line">    最新屏蔽 CSDN 广告方法，专注阅读学习！      </span><br><span class="line">    使用Github Pages和Hexo搭建自己的独立博客【超级详细的小白教程】      </span><br><span class="line">    Python3 爬虫学习笔记 C08【解析库 Beautiful Soup】      </span><br><span class="line">    Python3 爬虫学习笔记 C07 【解析库 lxml】      </span><br><span class="line">    Python3 爬虫学习笔记 C06 【正则表达式】      </span><br><span class="line">    Python3 爬虫学习笔记 C05 【Selenium + 无界面浏览器】      </span><br><span class="line">    Python3 已经安装相关库，Pycharm 仍然报错 ModuleNotFoundError: No module named &apos;xxxxxx&apos; 的解决办法      </span><br><span class="line">    Windows/Android/iOS 等常见 User-Agent 大全      </span><br><span class="line">    Selenium 显式等待条件及其含义      </span><br><span class="line">    Python3 爬虫学习笔记 C04 【自动化测试工具 Selenium】      </span><br><span class="line">    Python3 爬虫学习笔记 C03 【Ajax 数据爬取】      </span><br><span class="line">    Python3 爬虫学习笔记 C02 【基本库 requests 的使用】      </span><br><span class="line">    Python3 爬虫学习笔记 C01 【基本库 urllib 的使用】      </span><br><span class="line">    利用官方支持为基于GitHub Pages的Hexo博客启用HTTPS      </span><br><span class="line">    光学字符识别 Tesseract-OCR 的下载、安装和基本用法      </span><br><span class="line">    Github+jsDelivr+PicGo 打造稳定快速、高效免费图床      </span><br><span class="line">    利用Cloudflare为基于GitHub Pages的Hexo博客添加HTTPS支持      </span><br><span class="line">    Python 中 if __name__ == &apos;__main__&apos;: 的理解      </span><br><span class="line">    Hexo 博客本地预览报错：Error: listen EADDRINUSE 0.0.0.0:4000      </span><br><span class="line">    谷歌浏览器检查更新时出错：无法启动更新检查（错误代码为 3: 0x80080005 -- system level）</span><br></pre></td></tr></table></figure><h2 id="【9-1-2】打开方式"><a href="#【9-1-2】打开方式" class="headerlink" title="【9.1.2】打开方式"></a><font color="#ff0000">【9.1.2】打开方式</font></h2><p>open() 方法的第二个参数为打开方式，不同的打开方式如下：</p><table><thead><tr><th>读写方式</th><th>可否读写</th><th>若文件不存在</th><th>写入方式</th></tr></thead><tbody><tr><td>r</td><td>读取</td><td>报错</td><td>不可写入</td></tr><tr><td>rb</td><td>以二进制方式读取</td><td>报错</td><td>不可写入</td></tr><tr><td>r+</td><td>读取 + 写入</td><td>报错</td><td>覆盖写入</td></tr><tr><td>rb+</td><td>以二进制方式读取+写入</td><td>报错</td><td>覆盖写入</td></tr><tr><td>w</td><td>写入</td><td>创建</td><td>覆盖写入</td></tr><tr><td>wb</td><td>以二进制方式写入</td><td>创建</td><td>覆盖写入</td></tr><tr><td>w+</td><td>读取 + 写入</td><td>创建</td><td>覆盖写入</td></tr><tr><td>wb+</td><td>以二进制方式读取+写入</td><td>创建</td><td>覆盖写入</td></tr><tr><td>a</td><td>写入</td><td>创建</td><td>附加写入</td></tr><tr><td>ab</td><td>以二进制方式写入</td><td>创建</td><td>附加写入</td></tr><tr><td>a+</td><td>读取 + 写入</td><td>创建</td><td>附加写入</td></tr><tr><td>ab+</td><td>以二进制方式读取+写入</td><td>创建</td><td>附加写入</td></tr></tbody></table><h1 id="【9-2】JSON-文件存储"><a href="#【9-2】JSON-文件存储" class="headerlink" title="【9.2】JSON 文件存储"></a><font color="#ff0000">【9.2】JSON 文件存储</font></h1><p>JSON，全称为 JavaScript Object Notation, 即 JavaScript 对象标记，它通过对象和数组的组合来表示数据，构造简洁但是结构化程度非常高，是一种轻量级的数据交换格式。</p><h2 id="【9-2-1】对象和数组"><a href="#【9-2-1】对象和数组" class="headerlink" title="【9.2.1】对象和数组"></a><font color="#ff0000">【9.2.1】对象和数组</font></h2><p>在 JavaScript 语言中，一切都是对象。因此，任何支持的类型都可以通过 JSON 来表示，例如字符串、数字、对象、数组等，但是对象和数组是比较特殊且常用的两种类型</p><ul><li><p>对象：它在 JavaScript 中是使用花括号 {} 包裹起来的内容，数据结构为 {key1：value1, key2：value2, …} 的键值对结构。在面向对象的语言中，key 为对象的属性，value 为对应的值。键名可以使用整数和字符串来表示。值的类型可以是任意类型。</p></li><li><p>数组：数组在 JavaScript 中是方括号 [] 包裹起来的内容，数据结构为 [“java”, “javascript”, “vb”, …] 的索引结构。在 JavaScript 中，数组是一种比较特殊的数据类型，它也可以像对象那样使用键值对，但还是索引用得多。同样，值的类型可以是任意类型。</p></li></ul><p>示例：一个 JSON 对象</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">[&#123;</span><br><span class="line">    <span class="attr">"name"</span>: <span class="string">"TRH"</span>,</span><br><span class="line">    <span class="attr">"gender"</span>: <span class="string">"male"</span>,</span><br><span class="line">    <span class="attr">"birthday"</span>: <span class="string">"1999-01-25"</span></span><br><span class="line">&#125;, &#123;</span><br><span class="line">     <span class="attr">"name"</span>: <span class="string">"XXX"</span>,</span><br><span class="line">    <span class="attr">"gender"</span>: <span class="string">"female"</span>,</span><br><span class="line">    <span class="attr">"birthday"</span>: <span class="string">"1999-10-18"</span></span><br><span class="line">&#125;]</span><br></pre></td></tr></table></figure><h2 id="【9-2-2】读取-JSON"><a href="#【9-2-2】读取-JSON" class="headerlink" title="【9.2.2】读取 JSON"></a><font color="#ff0000">【9.2.2】读取 JSON</font></h2><p>Python 里面的 JSON 库可以实现对 JSON 文件的读写操作，调用 JSON 库的 loads 方法将 JSON 文本字符串转为 JSON 对象、 dumps() 方法将 JSON 对象转为文本字符串</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> json</span><br><span class="line"></span><br><span class="line">str = <span class="string">'''</span></span><br><span class="line"><span class="string">[&#123;</span></span><br><span class="line"><span class="string">    "name": "TRH",</span></span><br><span class="line"><span class="string">    "gender": "male",</span></span><br><span class="line"><span class="string">    "birthday": "1999-01-25"</span></span><br><span class="line"><span class="string">&#125;, &#123;</span></span><br><span class="line"><span class="string">     "name": "XXX",</span></span><br><span class="line"><span class="string">    "gender": "female",</span></span><br><span class="line"><span class="string">    "birthday": "1999-10-18"</span></span><br><span class="line"><span class="string">&#125;]</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line">data = json.loads(str)</span><br><span class="line">print(data)</span><br><span class="line">print(data[<span class="number">0</span>][<span class="string">'name'</span>])</span><br><span class="line">print(data[<span class="number">0</span>].get(<span class="string">'name'</span>))</span><br><span class="line">print(data[<span class="number">0</span>].get(<span class="string">'age'</span>))</span><br><span class="line">print(data[<span class="number">0</span>].get(<span class="string">'age'</span>, <span class="number">25</span>))</span><br></pre></td></tr></table></figure><p>使用 loads 方法将字符串转为 JSON 对象，通过索引来获取对应的内容，获取键值时有两种方式，一种是中括号加键名，另一种是通过 get 方法传入键名。使用 get 方法，如果键名不存在，则不会报错，会返回 None，get 方法还可以传入第二个参数（即默认值），尝试获取一个原字典中不存在的键名，此时默认会返回 None。如果传入第二个参数（即默认值），那么在不存在的情况下返回该默认值。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[&#123;<span class="string">'name'</span>: <span class="string">'TRH'</span>, <span class="string">'gender'</span>: <span class="string">'male'</span>, <span class="string">'birthday'</span>: <span class="string">'1999-01-25'</span>&#125;, &#123;<span class="string">'name'</span>: <span class="string">'XXX'</span>, <span class="string">'gender'</span>: <span class="string">'female'</span>, <span class="string">'birthday'</span>: <span class="string">'1999-10-18'</span>&#125;]</span><br><span class="line">TRH</span><br><span class="line">TRH</span><br><span class="line"><span class="keyword">None</span></span><br><span class="line"><span class="number">25</span></span><br></pre></td></tr></table></figure><h2 id="【9-2-3】写入-JSON-文件"><a href="#【9-2-3】写入-JSON-文件" class="headerlink" title="【9.2.3】写入 JSON 文件"></a><font color="#ff0000">【9.2.3】写入 JSON 文件</font></h2><p>调用 dumps 方法可以将 JSON 对象转化为字符串，然后再调用文件的 write 方法即可写入文本</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> json</span><br><span class="line"></span><br><span class="line">data = [&#123;</span><br><span class="line">    <span class="string">'name'</span>: <span class="string">'TRH'</span>,</span><br><span class="line">    <span class="string">'gender'</span>: <span class="string">'male'</span>,</span><br><span class="line">    <span class="string">'birthday'</span>: <span class="string">'1999-01-25'</span></span><br><span class="line">&#125;]</span><br><span class="line"><span class="keyword">with</span> open(<span class="string">'data.json'</span>, <span class="string">'w'</span>) <span class="keyword">as</span> fp:</span><br><span class="line">    fp.write(json.dumps(data))</span><br></pre></td></tr></table></figure><p>data.json 文件：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[&#123;<span class="attr">"name"</span>: <span class="string">"TRH"</span>, <span class="attr">"gender"</span>: <span class="string">"male"</span>, <span class="attr">"birthday"</span>: <span class="string">"1999-01-25"</span>&#125;]</span><br></pre></td></tr></table></figure><p>添加参数 indent（代表缩进字符个数），将会格式化输出：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> json</span><br><span class="line"></span><br><span class="line">data = [&#123;</span><br><span class="line">    <span class="string">'name'</span>: <span class="string">'TRH'</span>,</span><br><span class="line">    <span class="string">'gender'</span>: <span class="string">'male'</span>,</span><br><span class="line">    <span class="string">'birthday'</span>: <span class="string">'1999-01-25'</span></span><br><span class="line">&#125;]</span><br><span class="line"><span class="keyword">with</span> open(<span class="string">'data.json'</span>, <span class="string">'w'</span>) <span class="keyword">as</span> file:</span><br><span class="line">    file.write(json.dumps(data, indent=<span class="number">2</span>))</span><br></pre></td></tr></table></figure></p><p>输出结果：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">"name"</span>: <span class="string">"TRH"</span>,</span><br><span class="line">    <span class="attr">"gender"</span>: <span class="string">"male"</span>,</span><br><span class="line">    <span class="attr">"birthday"</span>: <span class="string">"1999-01-25"</span></span><br><span class="line">  &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>如果 JSON 中包含中文字符，需要指定参数 ensure_ascii 为 False，另外还要规定文件输出的编码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> json</span><br><span class="line"></span><br><span class="line">data = [&#123;</span><br><span class="line">    <span class="string">'name'</span>: <span class="string">'小明'</span>,</span><br><span class="line">    <span class="string">'gender'</span>: <span class="string">'男'</span>,</span><br><span class="line">    <span class="string">'birthday'</span>: <span class="string">'1999年01月25日'</span></span><br><span class="line">&#125;]</span><br><span class="line"><span class="keyword">with</span> open(<span class="string">'data.json'</span>, <span class="string">'w'</span>, encoding=<span class="string">'utf-8'</span>) <span class="keyword">as</span> file:</span><br><span class="line">    file.write(json.dumps(data, indent=<span class="number">2</span>, ensure_ascii=<span class="keyword">False</span>))</span><br></pre></td></tr></table></figure><p>输出结果：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">"name"</span>: <span class="string">"小明"</span>,</span><br><span class="line">    <span class="attr">"gender"</span>: <span class="string">"男"</span>,</span><br><span class="line">    <span class="attr">"birthday"</span>: <span class="string">"1999年01月25日"</span></span><br><span class="line">  &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure><h1 id="【9-3】CSV-文本存储"><a href="#【9-3】CSV-文本存储" class="headerlink" title="【9.3】CSV 文本存储"></a><font color="#ff0000">【9.3】CSV 文本存储</font></h1><p>CSV（Comma-Separated Values）是逗号分隔值或字符分隔值的文件格式，其文件以纯文本的形式储存表格数据（数字和文本），CSV 文件的行与行之间用换行符分隔，列与列之间用逗号分隔</p><h2 id="【9-3-1】写入"><a href="#【9-3-1】写入" class="headerlink" title="【9.3.1】写入"></a><font color="#ff0000">【9.3.1】写入</font></h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> csv</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> open(<span class="string">'data.csv'</span>, <span class="string">'w'</span>) <span class="keyword">as</span> csvfile:</span><br><span class="line">    writer = csv.writer(csvfile)</span><br><span class="line">    writer.writerow([<span class="string">'id'</span>, <span class="string">'name'</span>, <span class="string">'age'</span>])</span><br><span class="line">    writer.writerow([<span class="string">'10001'</span>, <span class="string">'TRHX'</span>, <span class="number">20</span>])</span><br><span class="line">    writer.writerow([<span class="string">'10002'</span>, <span class="string">'Bob'</span>, <span class="number">22</span>])</span><br><span class="line">    writer.writerow([<span class="string">'10003'</span>, <span class="string">'Jordan'</span>, <span class="number">21</span>])</span><br></pre></td></tr></table></figure><p>打开 data.csv 文件，调用 CSV 库的 writer 方法初始化写入对象，然后调用 writerow 方法传入每行的数据即可完成写入，用 Excel 打开 data.csv 文件将是表格形式</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">id,name,age</span><br><span class="line"></span><br><span class="line"><span class="number">10001</span>,TRHX,<span class="number">20</span></span><br><span class="line"></span><br><span class="line"><span class="number">10002</span>,Bob,<span class="number">22</span></span><br><span class="line"></span><br><span class="line"><span class="number">10003</span>,Jordan,<span class="number">21</span></span><br></pre></td></tr></table></figure><p>列与列之间的分隔符是可以修改的，只需要传入 delimiter 参数即可：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> csv</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> open(<span class="string">'data.csv'</span>, <span class="string">'w'</span>) <span class="keyword">as</span> csvfile:</span><br><span class="line">    writer = csv.writer(csvfile, delimiter=<span class="string">' '</span>)</span><br><span class="line">    writer.writerow([<span class="string">'id'</span>, <span class="string">'name'</span>, <span class="string">'age'</span>])</span><br><span class="line">    writer.writerow([<span class="string">'10001'</span>, <span class="string">'TRHX'</span>, <span class="number">20</span>])</span><br><span class="line">    writer.writerow([<span class="string">'10002'</span>, <span class="string">'Bob'</span>, <span class="number">22</span>])</span><br><span class="line">    writer.writerow([<span class="string">'10003'</span>, <span class="string">'Jordan'</span>, <span class="number">21</span>])</span><br></pre></td></tr></table></figure><p>输出结果：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">id name age</span><br><span class="line"></span><br><span class="line"><span class="number">10001</span> TRHX <span class="number">20</span></span><br><span class="line"></span><br><span class="line"><span class="number">10002</span> Bob <span class="number">22</span></span><br><span class="line"></span><br><span class="line"><span class="number">10003</span> Jordan <span class="number">21</span></span><br></pre></td></tr></table></figure><p>调用 writerows 方法也可以同时写入多行，此时参数就需要为二维列表：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> csv</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> open(<span class="string">'data.csv'</span>, <span class="string">'w'</span>) <span class="keyword">as</span> csvfile:</span><br><span class="line">    writer = csv.writer(csvfile, delimiter=<span class="string">' '</span>)</span><br><span class="line">    writer.writerow([<span class="string">'id'</span>, <span class="string">'name'</span>, <span class="string">'age'</span>])</span><br><span class="line">    writer.writerows([[<span class="string">'10001'</span>, <span class="string">'TRHX'</span>, <span class="number">20</span>], [<span class="string">'10002'</span>, <span class="string">'Bob'</span>, <span class="number">22</span>], [<span class="string">'10003'</span>, <span class="string">'Jordan'</span>, <span class="number">21</span>]])</span><br></pre></td></tr></table></figure><p>输出结果仍与原来的一样</p><p>此外 CSV 库中也提供了字典的写入方式：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> csv</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> open(<span class="string">'data.csv'</span>, <span class="string">'w'</span>) <span class="keyword">as</span> csvfile:</span><br><span class="line">    fieldnames = [<span class="string">'id'</span>, <span class="string">'name'</span>, <span class="string">'age'</span>]</span><br><span class="line">    writer = csv.DictWriter(csvfile, fieldnames=fieldnames)</span><br><span class="line">    writer.writeheader()</span><br><span class="line">    writer.writerow(&#123;<span class="string">'id'</span>: <span class="string">'10001'</span>, <span class="string">'name'</span>: <span class="string">'TRHX'</span>, <span class="string">'age'</span>: <span class="number">20</span>&#125;)</span><br><span class="line">    writer.writerow(&#123;<span class="string">'id'</span>: <span class="string">'10002'</span>, <span class="string">'name'</span>: <span class="string">'Bob'</span>, <span class="string">'age'</span>: <span class="number">22</span>&#125;)</span><br><span class="line">    writer.writerow(&#123;<span class="string">'id'</span>: <span class="string">'10003'</span>, <span class="string">'name'</span>: <span class="string">'Jordan'</span>, <span class="string">'age'</span>: <span class="number">21</span>&#125;)</span><br></pre></td></tr></table></figure><p>首先定义 3 个字段，用 fieldnames 表示，然后将其传给 DictWriter 来初始化一个字典写入对象，接着可以调用 writeheader 方法先写入头信息，然后再调用 writerow 方法传入相应字典即可</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">id,name,age</span><br><span class="line"></span><br><span class="line"><span class="number">10001</span>,TRHX,<span class="number">20</span></span><br><span class="line"></span><br><span class="line"><span class="number">10002</span>,Bob,<span class="number">22</span></span><br><span class="line"></span><br><span class="line"><span class="number">10003</span>,Jordan,<span class="number">21</span></span><br></pre></td></tr></table></figure><h2 id="【9-3-2】读取"><a href="#【9-3-2】读取" class="headerlink" title="【9.3.2】读取"></a><font color="#ff0000">【9.3.2】读取</font></h2><p>有写入方法，同样也可以使用 csv 库来读取 CSV 文件：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> csv</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> open(<span class="string">'data.csv'</span>, <span class="string">'r'</span>, encoding=<span class="string">'utf-8'</span>) <span class="keyword">as</span> csvfile:</span><br><span class="line">    reader = csv.reader(csvfile)</span><br><span class="line">    <span class="keyword">for</span> row <span class="keyword">in</span> reader:</span><br><span class="line">        print(row)</span><br></pre></td></tr></table></figure><p>构造 Reader 对象，遍历输出每行的内容，每一行都是一个列表形式。（如果 CSV 文件中包含中文的话，还需要指定文件编码）读取结果：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[<span class="string">'id'</span>, <span class="string">'name'</span>, <span class="string">'age'</span>]</span><br><span class="line">[<span class="string">'10001'</span>, <span class="string">'TRHX'</span>, <span class="string">'20'</span>]</span><br><span class="line">[<span class="string">'10002'</span>, <span class="string">'Bob'</span>, <span class="string">'22'</span>]</span><br><span class="line">[<span class="string">'10003'</span>, <span class="string">'Jordan'</span>, <span class="string">'21'</span>]</span><br></pre></td></tr></table></figure><p>此外，还可以利用 pandas 的 read_csv 方法将数据从 CSV 中读取出来（pandas 是基于NumPy 的一种工具，该工具是为了解决数据分析任务而创建的。Pandas 纳入了大量库和一些标准的数据模型，提供了高效地操作大型数据集所需的工具）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"></span><br><span class="line">df = pd.read_csv(<span class="string">'data.csv'</span>)</span><br><span class="line">print(df)</span><br></pre></td></tr></table></figure><p>读取结果：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">      id    name  age</span><br><span class="line"><span class="number">0</span>  <span class="number">10001</span>    TRHX   <span class="number">20</span></span><br><span class="line"><span class="number">1</span>  <span class="number">10002</span>     Bob   <span class="number">22</span></span><br><span class="line"><span class="number">2</span>  <span class="number">10003</span>  Jordan   <span class="number">21</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;center&gt;&lt;font color=&quot;#1BC3FB&quot; size=&quot;4&quot;&gt;Python3 爬虫学习笔记第九章 —— 【文件储存】&lt;/font&gt;&lt;/center&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="Python3 学习笔记" scheme="https://www.itrhx.com/categories/Python3-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
      <category term="Python3 爬虫" scheme="https://www.itrhx.com/categories/Python3-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/Python3-%E7%88%AC%E8%99%AB/"/>
    
    
      <category term="爬虫" scheme="https://www.itrhx.com/tags/%E7%88%AC%E8%99%AB/"/>
    
      <category term="文件储存" scheme="https://www.itrhx.com/tags/%E6%96%87%E4%BB%B6%E5%82%A8%E5%AD%98/"/>
    
  </entry>
  
  <entry>
    <title>Python3 爬虫学习笔记 C08</title>
    <link href="https://www.itrhx.com/2019/08/26/A38-Python3-spider-C08/"/>
    <id>https://www.itrhx.com/2019/08/26/A38-Python3-spider-C08/</id>
    <published>2019-08-26T13:57:58.870Z</published>
    <updated>2019-09-13T17:19:05.787Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><blockquote><center><font color="#1BC3FB" size="4">Python3 爬虫学习笔记第八章 —— 【解析库 Beautiful Soup】</font></center></blockquote><a id="more"></a><h1 id="【8-1】关于-Beautiful-Soup"><a href="#【8-1】关于-Beautiful-Soup" class="headerlink" title="【8.1】关于 Beautiful Soup"></a><font color="#ff0000">【8.1】关于 Beautiful Soup</font></h1><p>Beautiful Soup 可以从 HTML 或者 XML 文件中提取数据，Beautiful Soup 可以提供一些简单的、Python 式的函数用来处理导航、搜索、修改分析树等，它借助网页的结构和属性等特性来解析网页，lxml 只会局部遍历，而 Beautiful Soup 是基于 HTML DOM 的，会载入整个文档，解析整个 DOM 树，因此时间和内存开销都会大很多，所以性能要低于lxml</p><table><thead><tr><th style="text-align:center">抓取工具</th><th style="text-align:center">速度</th><th style="text-align:center">使用难度</th><th style="text-align:center">安装难度</th></tr></thead><tbody><tr><td style="text-align:center">正则</td><td style="text-align:center">最快</td><td style="text-align:center">困难</td><td style="text-align:center">无（内置）</td></tr><tr><td style="text-align:center">lxml</td><td style="text-align:center">快</td><td style="text-align:center">简单</td><td style="text-align:center">一般</td></tr><tr><td style="text-align:center">BeautifulSoup</td><td style="text-align:center">慢</td><td style="text-align:center">最简单</td><td style="text-align:center">简单</td></tr></tbody></table><h1 id="【8-2】Beautiful-Soup-的基本使用"><a href="#【8-2】Beautiful-Soup-的基本使用" class="headerlink" title="【8.2】Beautiful Soup 的基本使用"></a><font color="#ff0000">【8.2】Beautiful Soup 的基本使用</font></h1><p>需要使用命令 <code>pip install bs4</code> 安装库，Beautiful Soup 在解析时依赖解析器，除了支持 Python 标准库中的 HTML 解析器外，还支持一些第三方解析器：</p><table><thead><tr><th>解析器</th><th>使用方法</th><th>优势</th><th>劣势</th></tr></thead><tbody><tr><td>Python 标准库</td><td>BeautifulSoup(markup, “html.parser”)</td><td>Python 的内置标准库、执行速度适中 、文档容错能力强</td><td>Python 2.7.3 or 3.2.2) 前的版本中文容错能力差</td></tr><tr><td>LXML HTML 解析器</td><td>BeautifulSoup(markup, “lxml”)</td><td>速度快、文档容错能力强</td><td>需要安装 C 语言库</td></tr><tr><td>LXML XML 解析器</td><td>BeautifulSoup(markup, “xml”)</td><td>速度快、唯一支持 XML 的解析器</td><td>需要安装 C 语言库</td></tr><tr><td>html5lib</td><td>BeautifulSoup(markup, “html5lib”)</td><td>最好的容错性、以浏览器的方式解析文档、生成 HTML5 格式的文档</td><td>速度慢、不依赖外部扩展</td></tr></tbody></table><p>基本使用：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line">soup = BeautifulSoup(<span class="string">'&lt;p&gt;Hello&lt;/p&gt;'</span>, <span class="string">'lxml'</span>)</span><br><span class="line"><span class="comment"># soup = BeautifulSoup(open('soup.html', encoding='utf8'), 'lxml')</span></span><br><span class="line">print(soup.p.string)</span><br></pre></td></tr></table></figure></p><p>输出结果：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Hello</span><br></pre></td></tr></table></figure></p><h1 id="【8-3】节点选择器"><a href="#【8-3】节点选择器" class="headerlink" title="【8.3】节点选择器"></a><font color="#ff0000">【8.3】节点选择器</font></h1><p>直接调用节点的名称就可以选择节点元素，再调用 string 属性就可以得到节点内的文本</p><h2 id="【8-3-1】元素选择"><a href="#【8-3-1】元素选择" class="headerlink" title="【8.3.1】元素选择"></a><font color="#ff0000">【8.3.1】元素选择</font></h2><p>新建 <code>soup.html</code> 文件：<br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=<span class="string">"en"</span>&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=<span class="string">"UTF-8"</span> /&gt;</span><br><span class="line">    &lt;title&gt;测试bs4&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;div&gt;</span><br><span class="line">    甄姬</span><br><span class="line">    &lt;p&gt;百里守约&lt;/p&gt;</span><br><span class="line">    &lt;p&gt;李白&lt;/p&gt;</span><br><span class="line">    太乙真人</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;div class="song"&gt;</span><br><span class="line">    &lt;p&gt;李清照&lt;/p&gt;</span><br><span class="line">    &lt;p&gt;王安石&lt;/p&gt;</span><br><span class="line">    &lt;p&gt;苏轼&lt;/p&gt;</span><br><span class="line">    &lt;p&gt;柳宗元&lt;/p&gt;</span><br><span class="line">    &lt;a href="http://www.song.com/" title="赵匡义" target="_self"&gt;宋朝是最强大的王朝，不是军队的强大，而是经济很强大，国民都很有钱。&lt;/a&gt;</span><br><span class="line">    &lt;img src=<span class="string">"http://www.baidu.com/meinv.jpg"</span> alt=<span class="string">""</span>&gt;</span><br><span class="line">    &lt;a href="" class="du"&gt;总为浮云能蔽日，长安不见使人愁&lt;/a&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;div class="tang"&gt;</span><br><span class="line">    &lt;ul&gt;</span><br><span class="line">        &lt;li&gt;&lt;a href="http://www.baidu.com" title="qing"&gt;清明时节雨纷纷，路上行人欲断魂，借问酒家何处有，牧童遥指杏花村。&lt;/a&gt; &lt;/li&gt;</span><br><span class="line">        &lt;li&gt;&lt;a href="http://www.163.com" title="qin"&gt;秦时明月汉时关，万里长征人未还，但使龙城飞将在，不教胡马度阴山。&lt;/a&gt; &lt;/li&gt;</span><br><span class="line">        &lt;li&gt;&lt;a href="http://www.126.com" alt="qi"&gt;岐王宅里寻常见，崔九堂前几度闻，正是江南好风景，落花时节又逢君。&lt;/a&gt; &lt;/li&gt;</span><br><span class="line">        &lt;li&gt;&lt;a href="http://www.sina.com" class="du"&gt;杜甫&lt;/a&gt; &lt;/li&gt;</span><br><span class="line">        &lt;li&gt;&lt;b&gt;唐朝&lt;/b&gt;&lt;/li&gt;</span><br><span class="line">        &lt;li&gt;&lt;i&gt;宋朝&lt;/i&gt;&lt;/li&gt;</span><br><span class="line">        &lt;li&gt;&lt;a href="http://www.haha.com" id="feng"&gt;凤凰台上凤凰游，凤去台空江自流，吴宫花草埋幽径，晋代衣冠成古丘。&lt;/a&gt; &lt;/li&gt;</span><br><span class="line">    &lt;/ul&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line">soup = BeautifulSoup(open(<span class="string">'soup.html'</span>, encoding=<span class="string">'utf8'</span>), <span class="string">'lxml'</span>)</span><br><span class="line">print(soup.title)</span><br><span class="line">print(type(soup.title))</span><br><span class="line">print(soup.title.string)</span><br><span class="line">print(soup.head)</span><br><span class="line">print(soup.p)</span><br></pre></td></tr></table></figure><p>依次查找 title、head、p 节点。输出结果：<br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;title&gt;测试bs4&lt;/title&gt;</span><br><span class="line">&lt;<span class="class"><span class="keyword">class</span> '<span class="title">bs4</span>.<span class="title">element</span>.<span class="title">Tag</span>'&gt;</span></span><br><span class="line"><span class="class">测试<span class="title">bs4</span></span></span><br><span class="line"><span class="class">&lt;<span class="title">head</span>&gt;</span></span><br><span class="line">&lt;meta charset="utf-8"/&gt;</span><br><span class="line">&lt;title&gt;测试bs4&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;p&gt;百里守约&lt;/p&gt;</span><br></pre></td></tr></table></figure></p><h2 id="【8-3-2】提取信息"><a href="#【8-3-2】提取信息" class="headerlink" title="【8.3.2】提取信息"></a><font color="#ff0000">【8.3.2】提取信息</font></h2><ul><li>string 属性：获取节点包含的文本值（如果标签里面还有标签，那么string获取到的结果为None）</li><li>text 属性：获取节点包含的文本值</li><li>get_text() 属性：获取节点包含的文本值</li><li>name 属性：获取节点的名称</li><li>attrs ：获取所有属性</li><li>attrs[‘属性名’] ：获取指定属性</li></ul><p>依然以 soup.html 为例：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line">soup = BeautifulSoup(open(<span class="string">'soup.html'</span>, encoding=<span class="string">'utf8'</span>), <span class="string">'lxml'</span>)</span><br><span class="line">print(soup.title)</span><br><span class="line">print(soup.title.text)</span><br><span class="line">print(soup.title.get_text())</span><br><span class="line">print(soup.title.string)</span><br><span class="line">print(soup.div.string)</span><br><span class="line">print(soup.div.text)</span><br><span class="line">print(soup.title.name)</span><br><span class="line">print(soup.a[<span class="string">'href'</span>])  <span class="comment"># 获取href属性</span></span><br><span class="line">print(soup.a[<span class="string">'title'</span>])  <span class="comment"># 获取title属性</span></span><br><span class="line">print(soup.a[<span class="string">'target'</span>])  <span class="comment"># 获取target属性</span></span><br><span class="line">print(soup.a.attrs)  <span class="comment"># 获取所有属性</span></span><br><span class="line">print(soup.a.attrs[<span class="string">'href'</span>])  <span class="comment"># 获取href属性</span></span><br></pre></td></tr></table></figure></p><p>输出结果：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&lt;title&gt;测试bs4&lt;/title&gt;</span><br><span class="line">测试bs4</span><br><span class="line">测试bs4</span><br><span class="line">测试bs4</span><br><span class="line"><span class="keyword">None</span></span><br><span class="line"></span><br><span class="line">    甄姬</span><br><span class="line">    百里守约</span><br><span class="line">李白</span><br><span class="line">    太乙真人</span><br><span class="line"></span><br><span class="line">title</span><br><span class="line">http://www.song.com/</span><br><span class="line">赵匡义</span><br><span class="line">_self</span><br><span class="line">&#123;<span class="string">'href'</span>: <span class="string">'http://www.song.com/'</span>, <span class="string">'title'</span>: <span class="string">'赵匡义'</span>, <span class="string">'target'</span>: <span class="string">'_self'</span>&#125;</span><br><span class="line">http://www.song.com/</span><br></pre></td></tr></table></figure></p><h1 id="【8-3-3】嵌套选择"><a href="#【8-3-3】嵌套选择" class="headerlink" title="【8.3.3】嵌套选择"></a><font color="#ff0000">【8.3.3】嵌套选择</font></h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line"></span><br><span class="line">html = <span class="string">"""</span></span><br><span class="line"><span class="string">&lt;html&gt;&lt;head&gt;&lt;title&gt;This is a demo&lt;/title&gt;&lt;/head&gt;</span></span><br><span class="line"><span class="string">&lt;body&gt;</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line">soup = BeautifulSoup(html, <span class="string">'lxml'</span>)</span><br><span class="line">print(soup.head.title)</span><br><span class="line">print(type(soup.head.title))</span><br><span class="line">print(soup.head.title.string)</span><br></pre></td></tr></table></figure><p>获取 head 节点里面的 title 节点，输出结果：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;title&gt;This is a demo&lt;/title&gt;</span><br><span class="line">&lt;<span class="class"><span class="keyword">class</span> '<span class="title">bs4</span>.<span class="title">element</span>.<span class="title">Tag</span>'&gt;</span></span><br><span class="line"><span class="class"><span class="title">This</span> <span class="title">is</span> <span class="title">a</span> <span class="title">demo</span></span></span><br></pre></td></tr></table></figure></p><h1 id="【8-3-4】关联选择"><a href="#【8-3-4】关联选择" class="headerlink" title="【8.3.4】关联选择"></a><font color="#ff0000">【8.3.4】关联选择</font></h1><ul><li>contents 属性：获取某个节点元素的直接子节点</li><li>children 属性：遍历某个节点元素的子节点</li><li>descendants 属性：获取某个节点元素所有的子孙节点</li><li>parent 属性：获取某个节点元素的父节点</li><li>parents 属性：获取某个节点元素所有的祖先节点</li><li>next_sibling 属性：获取节点的下一个兄弟元素</li><li>previous_sibling 属性：获取节点的上一个兄弟元素</li><li>next_siblings 属性：获取某个节点所有后面的兄弟元素</li><li>previous_siblings 属性：获取某个节点所有前面的兄弟元素</li></ul><font color="#ff0000">contents 属性应用示例</font><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line"></span><br><span class="line">html = <span class="string">"""</span></span><br><span class="line"><span class="string">&lt;html&gt;</span></span><br><span class="line"><span class="string">    &lt;head&gt;</span></span><br><span class="line"><span class="string">        &lt;title&gt;The Dormouse's story&lt;/title&gt;</span></span><br><span class="line"><span class="string">    &lt;/head&gt;</span></span><br><span class="line"><span class="string">    &lt;body&gt;</span></span><br><span class="line"><span class="string">        &lt;p class="story"&gt;</span></span><br><span class="line"><span class="string">            Once upon a time there were three little sisters; and their names were</span></span><br><span class="line"><span class="string">            &lt;a href="http://example.com/elsie" class="sister" id="link1"&gt;</span></span><br><span class="line"><span class="string">                &lt;span&gt;Elsie&lt;/span&gt;</span></span><br><span class="line"><span class="string">            &lt;/a&gt;</span></span><br><span class="line"><span class="string">            &lt;a href="http://example.com/lacie" class="sister" id="link2"&gt;Lacie&lt;/a&gt; </span></span><br><span class="line"><span class="string">            and</span></span><br><span class="line"><span class="string">            &lt;a href="http://example.com/tillie" class="sister" id="link3"&gt;Tillie&lt;/a&gt;</span></span><br><span class="line"><span class="string">            and they lived at the bottom of a well.</span></span><br><span class="line"><span class="string">        &lt;/p&gt;</span></span><br><span class="line"><span class="string">        &lt;p class="story"&gt;...&lt;/p&gt;</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line">soup = BeautifulSoup(html, <span class="string">'lxml'</span>)</span><br><span class="line">print(soup.p.contents)</span><br></pre></td></tr></table></figure><p>获取 p 节点元素的直接子节点，输出结果：<br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">['\n            Once upon a time there were three little sisters; and their names were\n            ', &lt;a class="sister" href="http://example.com/elsie" id="link1"&gt;</span><br><span class="line">&lt;span&gt;Elsie&lt;/span&gt;</span><br><span class="line">&lt;/a&gt;, '\n', &lt;a class="sister" href="http://example.com/lacie" id="link2"&gt;Lacie&lt;/a&gt;, ' \n            and\n            ', &lt;a class="sister" href="http://example.com/tillie" id="link3"&gt;Tillie&lt;/a&gt;, '\n            and they lived at the bottom of a well.\n        ']</span><br></pre></td></tr></table></figure></p><font color="#ff0000">children 属性应用示例：</font><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line"></span><br><span class="line">html = <span class="string">"""</span></span><br><span class="line"><span class="string">&lt;html&gt;</span></span><br><span class="line"><span class="string">    &lt;head&gt;</span></span><br><span class="line"><span class="string">        &lt;title&gt;The Dormouse's story&lt;/title&gt;</span></span><br><span class="line"><span class="string">    &lt;/head&gt;</span></span><br><span class="line"><span class="string">    &lt;body&gt;</span></span><br><span class="line"><span class="string">        &lt;p class="story"&gt;</span></span><br><span class="line"><span class="string">            Once upon a time there were three little sisters; and their names were</span></span><br><span class="line"><span class="string">            &lt;a href="http://example.com/elsie" class="sister" id="link1"&gt;</span></span><br><span class="line"><span class="string">                &lt;span&gt;Elsie&lt;/span&gt;</span></span><br><span class="line"><span class="string">            &lt;/a&gt;</span></span><br><span class="line"><span class="string">            &lt;a href="http://example.com/lacie" class="sister" id="link2"&gt;Lacie&lt;/a&gt; </span></span><br><span class="line"><span class="string">            and</span></span><br><span class="line"><span class="string">            &lt;a href="http://example.com/tillie" class="sister" id="link3"&gt;Tillie&lt;/a&gt;</span></span><br><span class="line"><span class="string">            and they lived at the bottom of a well.</span></span><br><span class="line"><span class="string">        &lt;/p&gt;</span></span><br><span class="line"><span class="string">        &lt;p class="story"&gt;...&lt;/p&gt;</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line">soup = BeautifulSoup(html, <span class="string">'lxml'</span>)</span><br><span class="line">print(soup.p.children)</span><br><span class="line"><span class="keyword">for</span> i, child <span class="keyword">in</span> enumerate(soup.p.children):</span><br><span class="line">    print(i, child)</span><br></pre></td></tr></table></figure><p>遍历 p 节点元素的子节点，输出结果：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&lt;list_iterator object at <span class="number">0x00000228E3C205F8</span>&gt;</span><br><span class="line"><span class="number">0</span> </span><br><span class="line">            Once upon a time there were three little sisters; <span class="keyword">and</span> their names were</span><br><span class="line">            </span><br><span class="line">1 &lt;a class="sister" href="http://example.com/elsie" id="link1"&gt;</span><br><span class="line">&lt;span&gt;Elsie&lt;/span&gt;</span><br><span class="line">&lt;/a&gt;</span><br><span class="line"><span class="number">2</span> </span><br><span class="line"></span><br><span class="line">3 &lt;a class="sister" href="http://example.com/lacie" id="link2"&gt;Lacie&lt;/a&gt;</span><br><span class="line"><span class="number">4</span>  </span><br><span class="line">            <span class="keyword">and</span></span><br><span class="line">            </span><br><span class="line">5 &lt;a class="sister" href="http://example.com/tillie" id="link3"&gt;Tillie&lt;/a&gt;</span><br><span class="line"><span class="number">6</span> </span><br><span class="line">            <span class="keyword">and</span> they lived at the bottom of a well.</span><br></pre></td></tr></table></figure></p><font color="#ff0000">descendants 属性应用示例：</font><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line"></span><br><span class="line">html = <span class="string">"""</span></span><br><span class="line"><span class="string">&lt;html&gt;</span></span><br><span class="line"><span class="string">    &lt;head&gt;</span></span><br><span class="line"><span class="string">        &lt;title&gt;The Dormouse's story&lt;/title&gt;</span></span><br><span class="line"><span class="string">    &lt;/head&gt;</span></span><br><span class="line"><span class="string">    &lt;body&gt;</span></span><br><span class="line"><span class="string">        &lt;p class="story"&gt;</span></span><br><span class="line"><span class="string">            Once upon a time there were three little sisters; and their names were</span></span><br><span class="line"><span class="string">            &lt;a href="http://example.com/elsie" class="sister" id="link1"&gt;</span></span><br><span class="line"><span class="string">                &lt;span&gt;Elsie&lt;/span&gt;</span></span><br><span class="line"><span class="string">            &lt;/a&gt;</span></span><br><span class="line"><span class="string">            &lt;a href="http://example.com/lacie" class="sister" id="link2"&gt;Lacie&lt;/a&gt; </span></span><br><span class="line"><span class="string">            and</span></span><br><span class="line"><span class="string">            &lt;a href="http://example.com/tillie" class="sister" id="link3"&gt;Tillie&lt;/a&gt;</span></span><br><span class="line"><span class="string">            and they lived at the bottom of a well.</span></span><br><span class="line"><span class="string">        &lt;/p&gt;</span></span><br><span class="line"><span class="string">        &lt;p class="story"&gt;...&lt;/p&gt;</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line">soup = BeautifulSoup(html, <span class="string">'lxml'</span>)</span><br><span class="line">print(soup.p.descendants)</span><br><span class="line"><span class="keyword">for</span> i, child <span class="keyword">in</span> enumerate(soup.p.descendants):</span><br><span class="line">    print(i, child)</span><br></pre></td></tr></table></figure><br><br>获取 p 节点元素所有的子孙节点，输出结果：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">&lt;generator object descendants at <span class="number">0x0000018404A4C3B8</span>&gt;</span><br><span class="line"><span class="number">0</span> </span><br><span class="line">            Once upon a time there were three little sisters; <span class="keyword">and</span> their names were</span><br><span class="line">            </span><br><span class="line">1 &lt;a class="sister" href="http://example.com/elsie" id="link1"&gt;</span><br><span class="line">&lt;span&gt;Elsie&lt;/span&gt;</span><br><span class="line">&lt;/a&gt;</span><br><span class="line"><span class="number">2</span> </span><br><span class="line"></span><br><span class="line">3 &lt;span&gt;Elsie&lt;/span&gt;</span><br><span class="line"><span class="number">4</span> Elsie</span><br><span class="line"><span class="number">5</span> </span><br><span class="line"></span><br><span class="line"><span class="number">6</span> </span><br><span class="line"></span><br><span class="line">7 &lt;a class="sister" href="http://example.com/lacie" id="link2"&gt;Lacie&lt;/a&gt;</span><br><span class="line"><span class="number">8</span> Lacie</span><br><span class="line"><span class="number">9</span>  </span><br><span class="line">            <span class="keyword">and</span></span><br><span class="line">            </span><br><span class="line">10 &lt;a class="sister" href="http://example.com/tillie" id="link3"&gt;Tillie&lt;/a&gt;</span><br><span class="line"><span class="number">11</span> Tillie</span><br><span class="line"><span class="number">12</span> </span><br><span class="line">            <span class="keyword">and</span> they lived at the bottom of a well.</span><br></pre></td></tr></table></figure><br><br><font color="#ff0000">parent 属性应用示例：</font><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line">html = <span class="string">"""</span></span><br><span class="line"><span class="string">&lt;html&gt;</span></span><br><span class="line"><span class="string">    &lt;head&gt;</span></span><br><span class="line"><span class="string">        &lt;title&gt;The Dormouse's story&lt;/title&gt;</span></span><br><span class="line"><span class="string">    &lt;/head&gt;</span></span><br><span class="line"><span class="string">    &lt;body&gt;</span></span><br><span class="line"><span class="string">        &lt;p class="story"&gt;</span></span><br><span class="line"><span class="string">            Once upon a time there were three little sisters; and their names were</span></span><br><span class="line"><span class="string">            &lt;a href="http://example.com/elsie" class="sister" id="link1"&gt;</span></span><br><span class="line"><span class="string">                &lt;span&gt;Elsie&lt;/span&gt;</span></span><br><span class="line"><span class="string">            &lt;/a&gt;</span></span><br><span class="line"><span class="string">        &lt;/p&gt;</span></span><br><span class="line"><span class="string">    &lt;/body&gt;</span></span><br><span class="line"><span class="string">&lt;/html&gt;</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line">soup = BeautifulSoup(html, <span class="string">'lxml'</span>)</span><br><span class="line">print(soup.a.parent)</span><br></pre></td></tr></table></figure><br><br>获取 a 节点元素的父节点，输出结果：<br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;p class="story"&gt;</span><br><span class="line">            Once upon a time there were three little sisters; <span class="keyword">and</span> their names were</span><br><span class="line">            &lt;a class="sister" href="http://example.com/elsie" id="link1"&gt;</span><br><span class="line">&lt;span&gt;Elsie&lt;/span&gt;</span><br><span class="line">&lt;/a&gt;</span><br><span class="line">&lt;/p&gt;</span><br></pre></td></tr></table></figure><br><br><font color="#ff0000">parents 属性应用示例：</font><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line"></span><br><span class="line">html = <span class="string">"""</span></span><br><span class="line"><span class="string">&lt;html&gt;</span></span><br><span class="line"><span class="string">    &lt;body&gt;</span></span><br><span class="line"><span class="string">        &lt;p class="story"&gt;</span></span><br><span class="line"><span class="string">            &lt;a href="http://example.com/elsie" class="sister" id="link1"&gt;</span></span><br><span class="line"><span class="string">                &lt;span&gt;Elsie&lt;/span&gt;</span></span><br><span class="line"><span class="string">            &lt;/a&gt;</span></span><br><span class="line"><span class="string">        &lt;/p&gt;</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line">soup = BeautifulSoup(html, <span class="string">'lxml'</span>)</span><br><span class="line">print(type(soup.a.parents))</span><br><span class="line">print(list(enumerate(soup.a.parents)))</span><br></pre></td></tr></table></figure><br><br>获取 a 节点元素所有的祖先节点，输出结果：<br><br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">&lt;<span class="class"><span class="keyword">class</span> '<span class="title">generator</span>'&gt;</span></span><br><span class="line"><span class="class">[<span class="params">(<span class="number">0</span>, &lt;p class=<span class="string">"story"</span>&gt;</span></span></span><br><span class="line"><span class="class"><span class="params">&lt;a class=<span class="string">"sister"</span> href=<span class="string">"http://example.com/elsie"</span> id=<span class="string">"link1"</span>&gt;</span></span></span><br><span class="line"><span class="class"><span class="params">&lt;span&gt;Elsie&lt;/span&gt;</span></span></span><br><span class="line"><span class="class"><span class="params">&lt;/a&gt;</span></span></span><br><span class="line">&lt;/p&gt;), (1, &lt;body&gt;</span><br><span class="line">&lt;p class="story"&gt;</span><br><span class="line">&lt;a class="sister" href="http://example.com/elsie" id="link1"&gt;</span><br><span class="line">&lt;span&gt;Elsie&lt;/span&gt;</span><br><span class="line">&lt;/a&gt;</span><br><span class="line">&lt;/p&gt;</span><br><span class="line">&lt;/body&gt;), (2, &lt;html&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;p class="story"&gt;</span><br><span class="line">&lt;a class="sister" href="http://example.com/elsie" id="link1"&gt;</span><br><span class="line">&lt;span&gt;Elsie&lt;/span&gt;</span><br><span class="line">&lt;/a&gt;</span><br><span class="line">&lt;/p&gt;</span><br><span class="line">&lt;/body&gt;&lt;/html&gt;), (3, &lt;html&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;p class="story"&gt;</span><br><span class="line">&lt;a class="sister" href="http://example.com/elsie" id="link1"&gt;</span><br><span class="line">&lt;span&gt;Elsie&lt;/span&gt;</span><br><span class="line">&lt;/a&gt;</span><br><span class="line">&lt;/p&gt;</span><br><span class="line">&lt;/body&gt;&lt;/html&gt;)]</span><br></pre></td></tr></table></figure><br><br><font color="#ff0000">next_sibling、previous_sibling、next_siblings、previous_siblings 属性应用示例：</font><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">html = <span class="string">"""</span></span><br><span class="line"><span class="string">&lt;html&gt;</span></span><br><span class="line"><span class="string">    &lt;body&gt;</span></span><br><span class="line"><span class="string">        &lt;p class="story"&gt;</span></span><br><span class="line"><span class="string">            Once upon a time there were three little sisters; and their names were</span></span><br><span class="line"><span class="string">            &lt;a href="http://example.com/elsie" class="sister" id="link1"&gt;</span></span><br><span class="line"><span class="string">                &lt;span&gt;Elsie&lt;/span&gt;</span></span><br><span class="line"><span class="string">            &lt;/a&gt;</span></span><br><span class="line"><span class="string">            Hello</span></span><br><span class="line"><span class="string">            &lt;a href="http://example.com/lacie" class="sister" id="link2"&gt;Lacie&lt;/a&gt; </span></span><br><span class="line"><span class="string">            and</span></span><br><span class="line"><span class="string">            &lt;a href="http://example.com/tillie" class="sister" id="link3"&gt;Tillie&lt;/a&gt;</span></span><br><span class="line"><span class="string">            and they lived at the bottom of a well.</span></span><br><span class="line"><span class="string">        &lt;/p&gt;</span></span><br><span class="line"><span class="string">    &lt;/body&gt;</span></span><br><span class="line"><span class="string">&lt;/html&gt;</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line">soup = BeautifulSoup(html, <span class="string">'lxml'</span>)</span><br><span class="line">print(<span class="string">'Next Sibling'</span>, soup.a.next_sibling)</span><br><span class="line">print(<span class="string">'Prev Sibling'</span>, soup.a.previous_sibling)</span><br><span class="line">print(<span class="string">'Next Siblings'</span>, list(enumerate(soup.a.next_siblings)))</span><br><span class="line">print(<span class="string">'Prev Siblings'</span>, list(enumerate(soup.a.previous_siblings)))</span><br></pre></td></tr></table></figure><p>next_sibling 和 previous_sibling 分别获取 a 节点的下一个和上一个兄弟元素，next_siblings 和 previous_siblings 则分别返回 a 节点后面和前面的兄弟节点，输出结果：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Next Sibling </span><br><span class="line">            Hello</span><br><span class="line">            </span><br><span class="line">Prev Sibling </span><br><span class="line">            Once upon a time there were three little sisters; <span class="keyword">and</span> their names were</span><br><span class="line">            </span><br><span class="line">Next Siblings [(0, '\n            Hello\n            '), (1, &lt;a class="sister" href="http://example.com/lacie" id="link2"&gt;Lacie&lt;/a&gt;), (2, ' \n            and\n            '), (3, &lt;a class="sister" href="http://example.com/tillie" id="link3"&gt;Tillie&lt;/a&gt;), (4, '\n            and they lived at the bottom of a well.\n        ')]</span><br><span class="line">Prev Siblings [(<span class="number">0</span>, <span class="string">'\n            Once upon a time there were three little sisters; and their names were\n            '</span>)]</span><br></pre></td></tr></table></figure><h1 id="【8-4】方法选择器"><a href="#【8-4】方法选择器" class="headerlink" title="【8.4】方法选择器"></a><font color="#ff0000">【8.4】方法选择器</font></h1><p>节点选择器直接调用节点的名称就可以选择节点元素，如果进行比较复杂的选择的话，方法选择器是一个不错的选择，它更灵活，常见的方法有 find_all、find 等，调用它们，直接传入相应的参数，就可以灵活查询了。</p><h2 id="【8-4-1】find-all-方法"><a href="#【8-4-1】find-all-方法" class="headerlink" title="【8.4.1】find_all() 方法"></a><font color="#ff0000">【8.4.1】find_all() 方法</font></h2><p>find_all 方法可以查询所有符合条件的元素，给它传入一些属性或文本来得到符合条件的元素。find_all 方法的 API：<code>find_all(name , attrs , recursive , text , **kwargs)</code><br>新建 soup.html：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>测试bs4<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    甄姬</span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>百里守约<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>李白<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    太乙真人</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"song"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>李清照<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>王安石<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>苏轼<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>柳宗元<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"http://www.song.com/"</span> <span class="attr">title</span>=<span class="string">"赵匡义"</span> <span class="attr">target</span>=<span class="string">"_self"</span>&gt;</span>宋朝是最强大的王朝，不是军队的强大，而是经济很强大，国民都很有钱。<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"http://www.baidu.com/meinv.jpg"</span> <span class="attr">alt</span>=<span class="string">""</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">""</span> <span class="attr">class</span>=<span class="string">"du"</span>&gt;</span>总为浮云能蔽日，长安不见使人愁<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"tang"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"http://www.baidu.com"</span> <span class="attr">title</span>=<span class="string">"qing"</span>&gt;</span>清明时节雨纷纷，路上行人欲断魂，借问酒家何处有，牧童遥指杏花村。<span class="tag">&lt;/<span class="name">a</span>&gt;</span> <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"http://www.163.com"</span> <span class="attr">title</span>=<span class="string">"qin"</span>&gt;</span>秦时明月汉时关，万里长征人未还，但使龙城飞将在，不教胡马度阴山。<span class="tag">&lt;/<span class="name">a</span>&gt;</span> <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"http://www.126.com"</span> <span class="attr">name</span>=<span class="string">"qi"</span>&gt;</span>岐王宅里寻常见，崔九堂前几度闻，正是江南好风景，落花时节又逢君。<span class="tag">&lt;/<span class="name">a</span>&gt;</span> <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"http://www.sina.com"</span> <span class="attr">class</span>=<span class="string">"du"</span>&gt;</span>杜甫<span class="tag">&lt;/<span class="name">a</span>&gt;</span> <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">b</span>&gt;</span>唐朝<span class="tag">&lt;/<span class="name">b</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">i</span>&gt;</span>宋朝<span class="tag">&lt;/<span class="name">i</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"http://www.haha.com"</span> <span class="attr">id</span>=<span class="string">"feng"</span>&gt;</span>凤凰台上凤凰游，凤去台空江自流，吴宫花草埋幽径，晋代衣冠成古丘。<span class="tag">&lt;/<span class="name">a</span>&gt;</span> <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>示例代码：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line"></span><br><span class="line">soup = BeautifulSoup(open(<span class="string">'soup.html'</span>, encoding=<span class="string">'utf8'</span>), <span class="string">'lxml'</span>)</span><br><span class="line">print(soup.find_all(<span class="string">'a'</span>), <span class="string">'\n'</span>)</span><br><span class="line">print(soup.find_all(<span class="string">'a'</span>)[<span class="number">1</span>], <span class="string">'\n'</span>)</span><br><span class="line">print(soup.find_all(<span class="string">'a'</span>)[<span class="number">1</span>].text, <span class="string">'\n'</span>)</span><br><span class="line">print(soup.find_all([<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'i'</span>]), <span class="string">'\n'</span>)</span><br><span class="line">print(soup.find_all(<span class="string">'a'</span>, limit=<span class="number">2</span>), <span class="string">'\n'</span>)</span><br><span class="line">print(soup.find_all(title=<span class="string">'qing'</span>), <span class="string">'\n'</span>)</span><br><span class="line">print(soup.find_all(attrs=&#123;<span class="string">'id'</span>: <span class="string">'feng'</span>&#125;), <span class="string">'\n'</span>)</span><br></pre></td></tr></table></figure></p><p>输出结果：<br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">[&lt;a href="http://www.song.com/" target="_self" title="赵匡义"&gt;宋朝是最强大的王朝，不是军队的强大，而是经济很强大，国民都很有钱。&lt;/a&gt;, &lt;a class="du" href=""&gt;总为浮云能蔽日，长安不见使人愁&lt;/a&gt;, &lt;a href="http://www.baidu.com" title="qing"&gt;清明时节雨纷纷，路上行人欲断魂，借问酒家何处有，牧童遥指杏花村。&lt;/a&gt;, &lt;a href="http://www.163.com" title="qin"&gt;秦时明月汉时关，万里长征人未还，但使龙城飞将在，不教胡马度阴山。&lt;/a&gt;, &lt;a href="http://www.126.com" name="qi"&gt;岐王宅里寻常见，崔九堂前几度闻，正是江南好风景，落花时节又逢君。&lt;/a&gt;, &lt;a class="du" href="http://www.sina.com"&gt;杜甫&lt;/a&gt;, &lt;a href="http://www.haha.com" id="feng"&gt;凤凰台上凤凰游，凤去台空江自流，吴宫花草埋幽径，晋代衣冠成古丘。&lt;/a&gt;] </span><br><span class="line"></span><br><span class="line">&lt;a class="du" href=""&gt;总为浮云能蔽日，长安不见使人愁&lt;/a&gt; </span><br><span class="line"></span><br><span class="line">总为浮云能蔽日，长安不见使人愁 </span><br><span class="line"></span><br><span class="line">[&lt;a href="http://www.song.com/" target="_self" title="赵匡义"&gt;宋朝是最强大的王朝，不是军队的强大，而是经济很强大，国民都很有钱。&lt;/a&gt;, &lt;a class="du" href=""&gt;总为浮云能蔽日，长安不见使人愁&lt;/a&gt;, &lt;a href="http://www.baidu.com" title="qing"&gt;清明时节雨纷纷，路上行人欲断魂，借问酒家何处有，牧童遥指杏花村。&lt;/a&gt;, &lt;a href="http://www.163.com" title="qin"&gt;秦时明月汉时关，万里长征人未还，但使龙城飞将在，不教胡马度阴山。&lt;/a&gt;, &lt;a href="http://www.126.com" name="qi"&gt;岐王宅里寻常见，崔九堂前几度闻，正是江南好风景，落花时节又逢君。&lt;/a&gt;, &lt;a class="du" href="http://www.sina.com"&gt;杜甫&lt;/a&gt;, &lt;b&gt;唐朝&lt;/b&gt;, &lt;i&gt;宋朝&lt;/i&gt;, &lt;a href="http://www.haha.com" id="feng"&gt;凤凰台上凤凰游，凤去台空江自流，吴宫花草埋幽径，晋代衣冠成古丘。&lt;/a&gt;] </span><br><span class="line"></span><br><span class="line">[&lt;a href="http://www.song.com/" target="_self" title="赵匡义"&gt;宋朝是最强大的王朝，不是军队的强大，而是经济很强大，国民都很有钱。&lt;/a&gt;, &lt;a class="du" href=""&gt;总为浮云能蔽日，长安不见使人愁&lt;/a&gt;] </span><br><span class="line"></span><br><span class="line">[&lt;a href="http://www.baidu.com" title="qing"&gt;清明时节雨纷纷，路上行人欲断魂，借问酒家何处有，牧童遥指杏花村。&lt;/a&gt;] </span><br><span class="line"></span><br><span class="line">[&lt;a href="http://www.haha.com" id="feng"&gt;凤凰台上凤凰游，凤去台空江自流，吴宫花草埋幽径，晋代衣冠成古丘。&lt;/a&gt;]</span><br></pre></td></tr></table></figure></p><h2 id="【8-4-2】find-方法"><a href="#【8-4-2】find-方法" class="headerlink" title="【8.4.2】find() 方法"></a><font color="#ff0000">【8.4.2】find() 方法</font></h2><p>find() 方法使用方法与 find_all() 方法相同，不同的是，find 方法返回的是单个元素，也就是第一个匹配的元素，而 find_all 返回的是所有匹配的元素组成的列表<br>特别的：</p><ul><li><p>find_parents 和 find_parent：前者返回所有祖先节点，后者返回直接父节点。</p></li><li><p>find_next_siblings 和 find_next_sibling：前者返回后面所有的兄弟节点，后者返回后面第一个兄弟节点。</p></li><li><p>find_previous_siblings 和 find_previous_sibling：前者返回前面所有的兄弟节点，后者返回前面第一个兄弟节点。</p></li><li><p>find_all_next 和 find_next：前者返回节点后所有符合条件的节点，后者返回第一个符合条件的节点。</p></li><li><p>find_all_previous 和 find_previous：前者返回节点前所有符合条件的节点，后者返回第一个符合条件的节点。</p></li></ul><h1 id="【8-5】CSS-选择器"><a href="#【8-5】CSS-选择器" class="headerlink" title="【8.5】CSS 选择器"></a><font color="#ff0000">【8.5】CSS 选择器</font></h1><p>使用 CSS 选择器，只需要调用 select 方法，传入相应的 CSS 选择器即可<br>新建 soup.html 文件：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"tang"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"http://www.baidu.com"</span> <span class="attr">title</span>=<span class="string">"qing"</span>&gt;</span>清明时节雨纷纷，路上行人欲断魂，借问酒家何处有，牧童遥指杏花村。<span class="tag">&lt;/<span class="name">a</span>&gt;</span> <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"http://www.163.com"</span> <span class="attr">title</span>=<span class="string">"qin"</span>&gt;</span>秦时明月汉时关，万里长征人未还，但使龙城飞将在，不教胡马度阴山。<span class="tag">&lt;/<span class="name">a</span>&gt;</span> <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"http://www.126.com"</span> <span class="attr">name</span>=<span class="string">"qi"</span>&gt;</span>岐王宅里寻常见，崔九堂前几度闻，正是江南好风景，落花时节又逢君。<span class="tag">&lt;/<span class="name">a</span>&gt;</span> <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"http://www.sina.com"</span> <span class="attr">class</span>=<span class="string">"du"</span>&gt;</span>杜甫<span class="tag">&lt;/<span class="name">a</span>&gt;</span> <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"http://www.haha.com"</span> <span class="attr">id</span>=<span class="string">"feng"</span>&gt;</span>凤凰台上凤凰游，凤去台空江自流，吴宫花草埋幽径，晋代衣冠成古丘。<span class="tag">&lt;/<span class="name">a</span>&gt;</span> <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>通过 CSS 选择器依次选择 class=”tang” 的 div 节点下的 a 节点、id 为 feng 的节点以及其 href 元素：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line"></span><br><span class="line">soup = BeautifulSoup(open(<span class="string">'soup.html'</span>, encoding=<span class="string">'utf8'</span>), <span class="string">'lxml'</span>)</span><br><span class="line">print(soup.select(<span class="string">'li'</span>), <span class="string">'\n'</span>)</span><br><span class="line">print(soup.select(<span class="string">'.tang &gt; ul &gt; li &gt; a'</span>)[<span class="number">2</span>], <span class="string">'\n'</span>)</span><br><span class="line">print(soup.select(<span class="string">'#feng'</span>)[<span class="number">0</span>].text, <span class="string">'\n'</span>)</span><br><span class="line">print(soup.select(<span class="string">'#feng'</span>)[<span class="number">0</span>][<span class="string">'href'</span>], <span class="string">'\n'</span>)</span><br></pre></td></tr></table></figure></p><p>输出结果：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[&lt;li&gt;&lt;a href="http://www.baidu.com" title="qing"&gt;清明时节雨纷纷，路上行人欲断魂，借问酒家何处有，牧童遥指杏花村。&lt;/a&gt; &lt;/li&gt;, &lt;li&gt;&lt;a href="http://www.163.com" title="qin"&gt;秦时明月汉时关，万里长征人未还，但使龙城飞将在，不教胡马度阴山。&lt;/a&gt; &lt;/li&gt;, &lt;li&gt;&lt;a href="http://www.126.com" name="qi"&gt;岐王宅里寻常见，崔九堂前几度闻，正是江南好风景，落花时节又逢君。&lt;/a&gt; &lt;/li&gt;, &lt;li&gt;&lt;a class="du" href="http://www.sina.com"&gt;杜甫&lt;/a&gt; &lt;/li&gt;, &lt;li&gt;&lt;a href="http://www.haha.com" id="feng"&gt;凤凰台上凤凰游，凤去台空江自流，吴宫花草埋幽径，晋代衣冠成古丘。&lt;/a&gt; &lt;/li&gt;] </span><br><span class="line"></span><br><span class="line">&lt;a href="http://www.126.com" name="qi"&gt;岐王宅里寻常见，崔九堂前几度闻，正是江南好风景，落花时节又逢君。&lt;/a&gt; </span><br><span class="line"></span><br><span class="line">凤凰台上凤凰游，凤去台空江自流，吴宫花草埋幽径，晋代衣冠成古丘。 </span><br><span class="line"></span><br><span class="line">http://www.haha.com</span><br></pre></td></tr></table></figure></p><p>附表：CSS 选择器，来源：<a href="https://www.w3school.com.cn/cssref/css_selectors.asp" target="_blank" rel="noopener">https://www.w3school.com.cn/cssref/css_selectors.asp</a></p><table><thead><tr><th>选择器</th><th>例子</th><th>例子描述</th><th>CSS</th></tr></thead><tbody><tr><td>.class</td><td>.intro</td><td>选择 class=”intro” 的所有元素</td><td>1</td></tr><tr><td>#id</td><td>#firstname</td><td>选择 id=”firstname” 的所有元素</td><td>1</td></tr><tr><td>*</td><td>*</td><td>选择所有元素</td><td>2</td></tr><tr><td>element</td><td>p</td><td>选择所有 <p> 元素</p></td><td>1</td></tr><tr><td>element,element</td><td>div,p</td><td>选择所有 <div> 元素和所有 <p> 元素</p></div></td><td>1</td></tr><tr><td>element element</td><td>div p</td><td>选择 <div> 元素内部的所有 <p> 元素</p></div></td><td>1</td></tr><tr><td>element&gt;element</td><td>div&gt;p</td><td>选择父元素为 <div> 元素的所有 <p> 元素</p></div></td><td>2</td></tr><tr><td>element+element</td><td>div+p</td><td>选择紧接在 <div> 元素之后的所有 <p> 元素</p></div></td><td>2</td></tr><tr><td>[attribute]</td><td>[target]</td><td>选择带有 target 属性所有元素</td><td>2</td></tr><tr><td>[attribute=value]</td><td>[target=_blank]</td><td>选择 target=”_blank” 的所有元素</td><td>2</td></tr><tr><td>[attribute~=value]</td><td>[title~=flower]</td><td>选择 title 属性包含单词 “flower” 的所有元素</td><td>2</td></tr><tr><td>[attribute</td><td>=value]</td><td>[lang</td><td>=en]</td><td>选择 lang 属性值以 “en” 开头的所有元素</td><td>2</td></tr><tr><td>:link</td><td>a:link</td><td>选择所有未被访问的链接</td><td>1</td></tr><tr><td>:visited</td><td>a:visited</td><td>选择所有已被访问的链接</td><td>1</td></tr><tr><td>:active</td><td>a:active</td><td>选择活动链接</td><td>1</td></tr><tr><td>:hover</td><td>a:hover</td><td>选择鼠标指针位于其上的链接</td><td>1</td></tr><tr><td>:focus</td><td>input:focus</td><td>选择获得焦点的 input 元素</td><td>2</td></tr><tr><td>:first-letter</td><td>p:first-letter</td><td>选择每个 <p> 元素的首字母</p></td><td>1</td></tr><tr><td>:first-line</td><td>p:first-line</td><td>选择每个 <p> 元素的首行</p></td><td>1</td></tr><tr><td>:first-child</td><td>p:first-child</td><td>选择属于父元素的第一个子元素的每个 <p> 元素</p></td><td>2</td></tr><tr><td>:before</td><td>p:before</td><td>在每个 <p> 元素的内容之前插入内容</p></td><td>2</td></tr><tr><td>:after</td><td>p:after</td><td>在每个 <p> 元素的内容之后插入内容</p></td><td>2</td></tr><tr><td>:lang(language)</td><td>p:lang(it)</td><td>选择带有以 “it” 开头的 lang 属性值的每个 <p> 元素</p></td><td>2</td></tr><tr><td>element1~element2</td><td>p~ul</td><td>选择前面有 <p> 元素的每个 <ul> 元素</ul></p></td><td>3</td></tr><tr><td>[attribute^=value]</td><td>a[src^=”https”]</td><td>选择其 src 属性值以 “https” 开头的每个 <a> 元素</a></td><td>3</td></tr><tr><td>[attribute$=value]</td><td>a[src$=”.pdf”]</td><td>选择其 src 属性以 “.pdf” 结尾的所有 <a> 元素</a></td><td>3</td></tr><tr><td>[attribute*=value]</td><td>a[src*=”abc”]</td><td>选择其 src 属性中包含 “abc” 子串的每个 <a> 元素</a></td><td>3</td></tr><tr><td>:first-of-type</td><td>p:first-of-type</td><td>选择属于其父元素的首个 <p> 元素的每个 </p><p> 元素</p></td><td>3</td></tr><tr><td>:last-of-type</td><td>p:last-of-type</td><td>选择属于其父元素的最后 <p> 元素的每个 </p><p> 元素</p></td><td>3</td></tr><tr><td>:only-of-type</td><td>p:only-of-type</td><td>选择属于其父元素唯一的 <p> 元素的每个 </p><p> 元素</p></td><td>3</td></tr><tr><td>:only-child</td><td>p:only-child</td><td>选择属于其父元素的唯一子元素的每个 <p> 元素</p></td><td>3</td></tr><tr><td>:nth-child(n)</td><td>p:nth-child(2)</td><td>选择属于其父元素的第二个子元素的每个 <p> 元素</p></td><td>3</td></tr><tr><td>:nth-last-child(n)</td><td>p:nth-last-child(2)</td><td>同上，从最后一个子元素开始计数</td><td>3</td></tr><tr><td>:nth-of-type(n)</td><td>p:nth-of-type(2)</td><td>选择属于其父元素第二个 <p> 元素的每个 </p><p> 元素</p></td><td>3</td></tr><tr><td>:nth-last-of-type(n)</td><td>p:nth-last-of-type(2)</td><td>同上，但是从最后一个子元素开始计数</td><td>3</td></tr><tr><td>:last-child</td><td>p:last-child</td><td>选择属于其父元素最后一个子元素每个 <p> 元素</p></td><td>3</td></tr><tr><td>:root</td><td>:root</td><td>选择文档的根元素</td><td>3</td></tr><tr><td>:empty</td><td>p:empty</td><td>选择没有子元素的每个 <p> 元素（包括文本节点）</p></td><td>3</td></tr><tr><td>:target</td><td>#news:target</td><td>选择当前活动的 #news 元素</td><td>3</td></tr><tr><td>:enabled</td><td>input:enabled</td><td>选择每个启用的 <input> 元素</td><td>3</td></tr><tr><td>:disabled</td><td>input:disabled</td><td>选择每个禁用的 <input> 元素</td><td>3</td></tr><tr><td>:checked</td><td>input:checked</td><td>选择每个被选中的 <input> 元素</td><td>3</td></tr><tr><td>:not(selector)</td><td>:not(p)</td><td>选择非 <p> 元素的每个元素</p></td><td>3</td></tr><tr><td>::selection</td><td>::selection</td><td>选择被用户选取的元素部分</td><td>3</td></tr></tbody></table><h1 id="【8-6】附表：Beautiful-Soup-库-soup-对象常用属性与方法"><a href="#【8-6】附表：Beautiful-Soup-库-soup-对象常用属性与方法" class="headerlink" title="【8.6】附表：Beautiful Soup 库 soup 对象常用属性与方法"></a><font color="#ff0000">【8.6】附表：Beautiful Soup 库 soup 对象常用属性与方法</font></h1><table><thead><tr><th>基本元素</th><th>说明</th><th>返回类型</th></tr></thead><tbody><tr><td>tag</td><td>soup.a</td><td>bs4.element.Tag</td></tr><tr><td>name</td><td>soup.a.name</td><td>str</td></tr><tr><td>attrs</td><td>soup.a.attrs</td><td>dict</td></tr><tr><td>contents</td><td>子节点</td><td>list</td></tr><tr><td>children</td><td>遍历子节点</td><td>list_iterator</td></tr><tr><td>descendants</td><td>遍历所有子孙节点</td><td>generator</td></tr><tr><td>parent</td><td>返回父亲标签</td><td>bs4.element.Tag</td></tr><tr><td>parents</td><td>上行遍历父辈标签</td><td>generator</td></tr><tr><td>prettify()</td><td>添加/n</td><td>str</td></tr><tr><td>find_all(name,attr)</td><td>soup.find_all(‘a’)/([‘a’,‘b’])/(True)/(‘p’,‘course’)/(id=‘link1’)/(string=‘python’)</td><td>bs4.element.ResultSet</td></tr><tr><td>find()</td><td>soup.find(‘a’)/返回第一个a标签</td><td>bs4.element.Tag</td></tr></tbody></table>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;center&gt;&lt;font color=&quot;#1BC3FB&quot; size=&quot;4&quot;&gt;Python3 爬虫学习笔记第八章 —— 【解析库 Beautiful Soup】&lt;/font&gt;&lt;/center&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="Python3 学习笔记" scheme="https://www.itrhx.com/categories/Python3-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
      <category term="Python3 爬虫" scheme="https://www.itrhx.com/categories/Python3-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/Python3-%E7%88%AC%E8%99%AB/"/>
    
    
      <category term="爬虫" scheme="https://www.itrhx.com/tags/%E7%88%AC%E8%99%AB/"/>
    
      <category term="Beautiful Soup" scheme="https://www.itrhx.com/tags/Beautiful-Soup/"/>
    
  </entry>
  
  <entry>
    <title>Python3 爬虫学习笔记 C07</title>
    <link href="https://www.itrhx.com/2019/08/25/A37-Python3-spider-C07/"/>
    <id>https://www.itrhx.com/2019/08/25/A37-Python3-spider-C07/</id>
    <published>2019-08-25T11:31:18.872Z</published>
    <updated>2019-09-13T17:19:00.937Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><blockquote><center><font color="#1BC3FB" size="4">Python3 爬虫学习笔记第七章 —— 【解析库 lxml】</font></center></blockquote><a id="more"></a><h1 id="【7-1】关于-lxml"><a href="#【7-1】关于-lxml" class="headerlink" title="【7.1】关于 lxml"></a><font color="#ff0000">【7.1】关于 lxml</font></h1><p> lxml 是 Python 的一个解析库，支持 HTML 和 XML 的解析，支持 XPath 解析方式，解析效率非常高，使用前需要用命令 <code>pip3 install lxml</code> 安装 lxml 库</p><h1 id="【7-2】使用-XPath"><a href="#【7-2】使用-XPath" class="headerlink" title="【7.2】使用  XPath"></a><font color="#ff0000">【7.2】使用  XPath</font></h1><p> XPath（XML Path Language）即 XML 路径语言， lxml 解析库使用的正是 XPath 语法，最初是用来搜寻 XML 文档的，是一门在 XML 文档中查找信息的语言，它同样适用于 HTML 文档的搜索</p><p>  XPath 常用规则</p><table><thead><tr><th style="text-align:center">表达式</th><th style="text-align:center">描述</th></tr></thead><tbody><tr><td style="text-align:center">nodename</td><td style="text-align:center">选取此节点的所有子节点</td></tr><tr><td style="text-align:center">/</td><td style="text-align:center">从当前节点选取直接子节点</td></tr><tr><td style="text-align:center">//</td><td style="text-align:center">从当前节点选取子孙节点</td></tr><tr><td style="text-align:center">.</td><td style="text-align:center">选取当前节点</td></tr><tr><td style="text-align:center">..</td><td style="text-align:center">选取当前节点的父节点</td></tr><tr><td style="text-align:center">@</td><td style="text-align:center">选取属性</td></tr><tr><td style="text-align:center">*</td><td style="text-align:center">通配符，选择所有元素节点与元素名</td></tr><tr><td style="text-align:center">@*</td><td style="text-align:center">选取所有属性</td></tr><tr><td style="text-align:center">[@attrib]</td><td style="text-align:center">选取具有给定属性的所有元素</td></tr><tr><td style="text-align:center">[@attrib=’value’]</td><td style="text-align:center">选取给定属性具有给定值的所有元素</td></tr><tr><td style="text-align:center">[tag]</td><td style="text-align:center">选取所有具有指定元素的直接子节点</td></tr><tr><td style="text-align:center">[tag=’text’]</td><td style="text-align:center">选取所有具有指定元素并且文本内容是text节点</td></tr></tbody></table><p> 浏览器插件 XPath Helper，在线验证 XPath，谷歌商店下载地址：<a href="https://chrome.google.com/webstore/detail/hgimnogjllphhhkhlmebbmlgjoejdpjl" target="_blank" rel="noopener">https://chrome.google.com/webstore/detail/hgimnogjllphhhkhlmebbmlgjoejdpjl</a></p><p> XPath 基本使用方法：首先使用代码 <code>from lxml import etree</code>导入库，然后将 HTML 文档变成一个对象，再调用对象的方法去查找指定的节点，方法有两种：<code>tree = etree.parse()</code> 为本地文件查找，<code>tree = etree.HTML()</code> 为网络文件查找，再使用语句 <code>tree.xpath()</code> 查找指定节点。</p><h1 id="【7-3】查找所有节点"><a href="#【7-3】查找所有节点" class="headerlink" title="【7.3】查找所有节点"></a><font color="#ff0000">【7.3】查找所有节点</font></h1><p> 新建一个 xpath.html 本地文件，内容如下：<br> <figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"> <span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>xpath测试<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"song"</span>&gt;</span></span><br><span class="line">    火药</span><br><span class="line">    <span class="tag">&lt;<span class="name">b</span>&gt;</span>指南针<span class="tag">&lt;/<span class="name">b</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">b</span>&gt;</span>印刷术<span class="tag">&lt;/<span class="name">b</span>&gt;</span></span><br><span class="line">    造纸术</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"tang"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"balove"</span>&gt;</span>停车坐爱枫林晚，霜叶红于二月花。<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span> <span class="attr">id</span>=<span class="string">"hua"</span>&gt;</span>商女不知亡国恨，隔江犹唱后庭花。<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"love"</span> <span class="attr">name</span>=<span class="string">"yang"</span>&gt;</span>一骑红尘妃子笑，无人知是荔枝来。<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span> <span class="attr">id</span>=<span class="string">"bei"</span>&gt;</span>葡萄美酒夜光杯，欲饮琵琶马上催。<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"http://www.baidu.com/"</span>&gt;</span>百度一下<span class="tag">&lt;/<span class="name">a</span>&gt;</span> <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ol</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"balucy"</span>&gt;</span>寻寻觅觅冷冷清清，凄凄惨惨戚戚。<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"lily"</span>&gt;</span>咋暖还寒时候，最难将息。<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"lilei"</span>&gt;</span>三杯两盏淡酒。<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>怎敌他晚来风急。<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>雁过也，正伤心，却是旧时相识。<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>爱情三十六计<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>什么是爱情<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ol</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>查找所有节点：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> lxml <span class="keyword">import</span> etree</span><br><span class="line"></span><br><span class="line">html = etree.parse(<span class="string">'./xpath.html'</span>)</span><br><span class="line">result = html.xpath(<span class="string">'//*'</span>)</span><br><span class="line">print(result)</span><br></pre></td></tr></table></figure></p><p>使用 <code>*</code> 代表匹配所有节点，整个 xpath.html 文件中的所有节点都会被获取到，返回形式是一个列表，每个元素是 Element 类型，其后跟了节点的名称，如 html、body、div、ul、li、a 等，所有节点都包含在列表中，输出结果如下：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[&lt;Element html at <span class="number">0x1a836a34508</span>&gt;, &lt;Element head at <span class="number">0x1a836a344c8</span>&gt;, &lt;Element meta at <span class="number">0x1a836a345c8</span>&gt;, &lt;Element title at <span class="number">0x1a836a34608</span>&gt;, &lt;Element body at <span class="number">0x1a836a34648</span>&gt;, &lt;Element div at <span class="number">0x1a836a346c8</span>&gt;, &lt;Element b at <span class="number">0x1a836a34708</span>&gt;, &lt;Element b at <span class="number">0x1a836a34748</span>&gt;, &lt;Element div at <span class="number">0x1a836a34788</span>&gt;, &lt;Element ul at <span class="number">0x1a836a34688</span>&gt;, &lt;Element li at <span class="number">0x1a836a347c8</span>&gt;, &lt;Element li at <span class="number">0x1a836a34808</span>&gt;, &lt;Element li at <span class="number">0x1a836a34848</span>&gt;, &lt;Element li at <span class="number">0x1a836a34888</span>&gt;, &lt;Element li at <span class="number">0x1a836a348c8</span>&gt;, &lt;Element a at <span class="number">0x1a836a34908</span>&gt;, &lt;Element ol at <span class="number">0x1a836a34948</span>&gt;, &lt;Element li at <span class="number">0x1a836a34988</span>&gt;, &lt;Element li at <span class="number">0x1a836a349c8</span>&gt;, &lt;Element li at <span class="number">0x1a836a34a08</span>&gt;, &lt;Element li at <span class="number">0x1a836a34a48</span>&gt;, &lt;Element li at <span class="number">0x1a836a34a88</span>&gt;, &lt;Element li at <span class="number">0x1a836a34ac8</span>&gt;, &lt;Element li at <span class="number">0x1a836a34b08</span>&gt;]</span><br></pre></td></tr></table></figure></p><h1 id="【7-4】查找子节点"><a href="#【7-4】查找子节点" class="headerlink" title="【7.4】查找子节点"></a><font color="#ff0000">【7.4】查找子节点</font></h1><p> 通过 <font color="#ff0000">/</font> 或 <font color="#ff0000">//</font> 即可查找元素的子节点或子孙节点：<br> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"> <span class="keyword">from</span> lxml <span class="keyword">import</span> etree</span><br><span class="line"></span><br><span class="line">html = etree.parse(<span class="string">'./xpath.html'</span>)</span><br><span class="line">result = html.xpath(<span class="string">'//ul/li'</span>)</span><br><span class="line">print(result)</span><br></pre></td></tr></table></figure></p><p>选择 ul 节点的所有<font color="#ff0000">直接</font> li 子节点：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[&lt;Element li at <span class="number">0x2a094d044c8</span>&gt;, &lt;Element li at <span class="number">0x2a094d045c8</span>&gt;, &lt;Element li at <span class="number">0x2a094d04608</span>&gt;, &lt;Element li at <span class="number">0x2a094d04648</span>&gt;, &lt;Element li at <span class="number">0x2a094d04688</span>&gt;]</span><br></pre></td></tr></table></figure></p><h1 id="【7-5】查找父节点"><a href="#【7-5】查找父节点" class="headerlink" title="【7.5】查找父节点"></a><font color="#ff0000">【7.5】查找父节点</font></h1><p> 知道了子节点，也可以用 <font color="#ff0000">..</font> 或者 <font color="#ff0000">parent::</font> 查找其父节点<br> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"> <span class="keyword">from</span> lxml <span class="keyword">import</span> etree</span><br><span class="line"></span><br><span class="line">html = etree.parse(<span class="string">'./xpath.html'</span>)</span><br><span class="line">result = html.xpath(<span class="string">'//ol/../@class'</span>)</span><br><span class="line">print(result)</span><br></pre></td></tr></table></figure></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> lxml <span class="keyword">import</span> etree</span><br><span class="line"></span><br><span class="line">html = etree.parse(<span class="string">'./xpath.html'</span>)</span><br><span class="line">result = html.xpath(<span class="string">'//ol/parent::*/@class'</span>)</span><br><span class="line">print(result)</span><br></pre></td></tr></table></figure><p>先查找到 ol 节点，随后获取其父节点以及其 class 属性：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[<span class="string">'tang'</span>]</span><br></pre></td></tr></table></figure></p><h1 id="【7-6】属性匹配"><a href="#【7-6】属性匹配" class="headerlink" title="【7.6】属性匹配"></a><font color="#ff0000">【7.6】属性匹配</font></h1><p> 有时候 HTML 包含多个相同名的节点，而节点的属性是不一样的，此时可以用 <font color="#ff0000">@</font> 符号进行属性过滤<br> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"> <span class="keyword">from</span> lxml <span class="keyword">import</span> etree</span><br><span class="line"></span><br><span class="line">html = etree.parse(<span class="string">'./xpath.html'</span>)</span><br><span class="line">result = html.xpath(<span class="string">'//li[@class="balucy"]'</span>)</span><br><span class="line">print(result)</span><br></pre></td></tr></table></figure></p><p>xpath.html 文件中，只有一个 class 为 balucy 的节点：<code>&lt;li class=&quot;balucy&quot;&gt;寻寻觅觅冷冷清清，凄凄惨惨戚戚。&lt;/li&gt;</code>，运行以上代码将返回一个该元素：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[&lt;Element li at <span class="number">0x16e53aa54c8</span>&gt;]</span><br></pre></td></tr></table></figure></p><h1 id="【7-7】文本获取"><a href="#【7-7】文本获取" class="headerlink" title="【7.7】文本获取"></a><font color="#ff0000">【7.7】文本获取</font></h1><p> 使用 text() 方法即可提取节点中的文本：<br> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"> <span class="keyword">from</span> lxml <span class="keyword">import</span> etree</span><br><span class="line"></span><br><span class="line">html = etree.parse(<span class="string">'./xpath.html'</span>)</span><br><span class="line">result = html.xpath(<span class="string">'//li[@class="balucy"]/text()'</span>)</span><br><span class="line">print(result)</span><br></pre></td></tr></table></figure></p><p>输出结果：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[<span class="string">'寻寻觅觅冷冷清清，凄凄惨惨戚戚。'</span>]</span><br></pre></td></tr></table></figure></p><p>再次观察 xpath.html 文件中的 <code>&lt;ol&gt;&lt;/ol&gt;</code>这一部分：<br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;ol&gt;</span><br><span class="line">    &lt;li class="balucy"&gt;寻寻觅觅冷冷清清，凄凄惨惨戚戚。&lt;/li&gt;</span><br><span class="line">    &lt;li class="lily"&gt;咋暖还寒时候，最难将息。&lt;/li&gt;</span><br><span class="line">    &lt;li class="lilei"&gt;三杯两盏淡酒。&lt;/li&gt;</span><br><span class="line">    &lt;li&gt;怎敌他晚来风急。&lt;/li&gt;</span><br><span class="line">    &lt;li&gt;雁过也，正伤心，却是旧时相识。&lt;/li&gt;</span><br><span class="line">    &lt;li&gt;爱情三十六计&lt;/li&gt;</span><br><span class="line">    &lt;li&gt;什么是爱情&lt;/li&gt;</span><br><span class="line">&lt;/ol&gt;</span><br></pre></td></tr></table></figure></p><p>如果我们想要提取 <code>&lt;li&gt;</code> 节点里面所有的文本，就可以使用 <code>html.xpath(&#39;//ol/li/text()&#39;)</code> 语句：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> lxml <span class="keyword">import</span> etree</span><br><span class="line"></span><br><span class="line">html = etree.parse(<span class="string">'./xpath.html'</span>)</span><br><span class="line">result = html.xpath(<span class="string">'//ol/li/text()'</span>)</span><br><span class="line">print(result)</span><br></pre></td></tr></table></figure></p><p>输出结果：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[<span class="string">'寻寻觅觅冷冷清清，凄凄惨惨戚戚。'</span>, <span class="string">'咋暖还寒时候，最难将息。'</span>, <span class="string">'三杯两盏淡酒。'</span>, <span class="string">'怎敌他晚来风急。'</span>, <span class="string">'雁过也，正伤心，却是旧时相识。'</span>, <span class="string">'爱情三十六计'</span>, <span class="string">'什么是爱情'</span>]</span><br></pre></td></tr></table></figure></p><p>同样还有另一种方法，使用 <code>html.xpath(&#39;//ol//text()&#39;)</code> 语句，<code>//</code> 将会选取所有子孙节点的文本，<code>&lt;ol&gt;</code> 和 <code>&lt;li&gt;</code> 节点下的换行符也将被提取出来：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> lxml <span class="keyword">import</span> etree</span><br><span class="line"></span><br><span class="line">html = etree.parse(<span class="string">'./xpath.html'</span>)</span><br><span class="line">result = html.xpath(<span class="string">'//ol//text()'</span>)</span><br><span class="line">print(result)</span><br></pre></td></tr></table></figure></p><p>输出结果：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[<span class="string">'\n        '</span>, <span class="string">'寻寻觅觅冷冷清清，凄凄惨惨戚戚。'</span>, <span class="string">'\n        '</span>, <span class="string">'咋暖还寒时候，最难将息。'</span>, <span class="string">'\n        '</span>, <span class="string">'三杯两盏淡酒。'</span>, <span class="string">'\n        '</span>, <span class="string">'怎敌他晚来风急。'</span>, <span class="string">'\n        '</span>, <span class="string">'雁过也，正伤心，却是旧时相识。'</span>, <span class="string">'\n        '</span>, <span class="string">'爱情三十六计'</span>, <span class="string">'\n        '</span>, <span class="string">'什么是爱情'</span>, <span class="string">'\n    '</span>]</span><br></pre></td></tr></table></figure></p><h1 id="【7-8】属性获取"><a href="#【7-8】属性获取" class="headerlink" title="【7.8】属性获取"></a><font color="#ff0000">【7.8】属性获取</font></h1><p> 与属性匹配一样，属性获取仍然使用 <font color="#ff0000">@</font>：<br> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"> <span class="keyword">from</span> lxml <span class="keyword">import</span> etree</span><br><span class="line"></span><br><span class="line">html = etree.parse(<span class="string">'./xpath.html'</span>)</span><br><span class="line">result = html.xpath(<span class="string">'//ul/li[5]/a/@href'</span>)</span><br><span class="line">print(result)</span><br></pre></td></tr></table></figure></p><p> 获取 href 属性：<br> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[<span class="string">'http://www.baidu.com/'</span>]</span><br></pre></td></tr></table></figure></p><h1 id="【7-9】一个属性包含多个值的匹配"><a href="#【7-9】一个属性包含多个值的匹配" class="headerlink" title="【7.9】一个属性包含多个值的匹配"></a><font color="#ff0000">【7.9】一个属性包含多个值的匹配</font></h1><p>某个节点的某个属性可能有多个值，例如：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"li li-first"</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"link.html"</span>&gt;</span>first item<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>li 节点的 class 属性有 li 和 li-first 两个值，如果使用 <code>html.xpath(&#39;//li[@class=&quot;li&quot;]</code> 语句，将无法成功匹配，这时就需要使用<font color="#ff0000"> contains</font> 方法了，第一个参数传入属性名称，第二个参数传入属性值，只要此属性包含所传入的属性值，就可以完成匹配了</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> lxml <span class="keyword">import</span> etree</span><br><span class="line">text = <span class="string">'''  </span></span><br><span class="line"><span class="string">&lt;li class="li li-first"&gt;&lt;a href="link.html"&gt;first item&lt;/a&gt;&lt;/li&gt;  </span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line">html = etree.HTML(text)</span><br><span class="line">result = html.xpath(<span class="string">'//li[contains(@class, "li")]/a/text()'</span>)</span><br><span class="line">print(result)</span><br></pre></td></tr></table></figure><p>输出结果：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[<span class="string">'first item'</span>]</span><br></pre></td></tr></table></figure></p><h1 id="【7-10】多个属性匹配一个节点"><a href="#【7-10】多个属性匹配一个节点" class="headerlink" title="【7.10】多个属性匹配一个节点"></a><font color="#ff0000">【7.10】多个属性匹配一个节点</font></h1><p>XPath 还可以根据多个属性来确定一个节点，这时就需要同时匹配多个属性。此时可以使用运算符 and 来连接：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> lxml <span class="keyword">import</span> etree</span><br><span class="line">text = <span class="string">'''  </span></span><br><span class="line"><span class="string">&lt;li class="li" name="item"&gt;&lt;a href="link.html"&gt;first item&lt;/a&gt;&lt;/li&gt;</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line">html = etree.HTML(text)</span><br><span class="line">result = html.xpath(<span class="string">'//li[@class="li" and @name="item"]/a/text()'</span>)</span><br><span class="line">print(result)</span><br></pre></td></tr></table></figure></p><p>输出结果：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[<span class="string">'first item'</span>]</span><br></pre></td></tr></table></figure></p><p>示例中运用了运算符 and 来连接，此外常见的运算符如下：</p><table><thead><tr><th>运算符</th><th>描述</th><th>实例</th><th>返回值</th></tr></thead><tbody><tr><td>or</td><td>或</td><td>age=19 or age=20</td><td>如果 age 是 19 或者 20，则返回 true。如果 age 是其他值，则返回 false</td></tr><tr><td>and</td><td>与</td><td>age&gt;19 and age&lt;21</td><td>如果 age 大于 19 且小于 21，则返回 true。如果 age 是其他值，则返回 false</td></tr><tr><td>mod</td><td>计算除法的余数</td><td>5 mod 2</td><td>1</td></tr><tr><td>&#124;</td><td>计算两个节点集</td><td>//book &#124; //cd</td><td>返回所有拥有 book 和 cd 元素的节点集</td></tr><tr><td>+</td><td>加法</td><td>10 + 5</td><td>15</td></tr><tr><td>-</td><td>减法</td><td>10 - 5</td><td>5</td></tr><tr><td>*</td><td>乘法</td><td>10 * 5</td><td>50</td></tr><tr><td>div</td><td>除法</td><td>10 div 5</td><td>2</td></tr><tr><td>=</td><td>等于</td><td>age=19</td><td>如果 age 是 19，则返回 true。如果 age 不是 19，则返回 false</td></tr><tr><td>!=</td><td>不等于</td><td>age!=19</td><td>如果 age 不是 19，则返回 true。如果 age 是 19，则返回 false</td></tr><tr><td>&lt;</td><td>小于</td><td>age&lt;19</td><td>如果 age 小于 19，则返回 true。如果 age 不小于 19，则返回 false</td></tr><tr><td>&lt;=</td><td>小于或等于</td><td>age&lt;=19</td><td>如果 age 小于等于 19，则返回 true。如果 age 大于 19，则返回 false</td></tr><tr><td>&gt;</td><td>大于</td><td>age&gt;19</td><td>如果 age 大于 19，则返回 true。如果 age 不大于 19，则返回 false</td></tr><tr><td>&gt;=</td><td>大于或等于</td><td>age&gt;=19</td><td>如果 age 大于等于 19，则返回 true。如果 age 小于 19，则返回 false</td></tr></tbody></table><h1 id="【7-11】按顺序选择节点"><a href="#【7-11】按顺序选择节点" class="headerlink" title="【7.11】按顺序选择节点"></a><font color="#ff0000">【7.11】按顺序选择节点</font></h1><p>某些属性可能同时匹配了多个节点，如果要选择其中几个节点，可以利用中括号传入索引的方法获取特定次序的节点<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> lxml <span class="keyword">import</span> etree</span><br><span class="line"></span><br><span class="line">text = <span class="string">'''</span></span><br><span class="line"><span class="string">&lt;div&gt;</span></span><br><span class="line"><span class="string">    &lt;ul&gt;</span></span><br><span class="line"><span class="string">         &lt;li class="item-0"&gt;&lt;a href="link1.html"&gt;first item&lt;/a&gt;&lt;/li&gt;</span></span><br><span class="line"><span class="string">         &lt;li class="item-1"&gt;&lt;a href="link2.html"&gt;second item&lt;/a&gt;&lt;/li&gt;</span></span><br><span class="line"><span class="string">         &lt;li class="item-inactive"&gt;&lt;a href="link3.html"&gt;third item&lt;/a&gt;&lt;/li&gt;</span></span><br><span class="line"><span class="string">         &lt;li class="item-1"&gt;&lt;a href="link4.html"&gt;fourth item&lt;/a&gt;&lt;/li&gt;</span></span><br><span class="line"><span class="string">         &lt;li class="item-0"&gt;&lt;a href="link5.html"&gt;fifth item&lt;/a&gt;</span></span><br><span class="line"><span class="string">    &lt;/ul&gt;</span></span><br><span class="line"><span class="string"> &lt;/div&gt;</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line">html = etree.HTML(text)</span><br><span class="line">result = html.xpath(<span class="string">'//li[1]/a/text()'</span>)</span><br><span class="line">print(result)</span><br><span class="line">result = html.xpath(<span class="string">'//li[last()]/a/text()'</span>)</span><br><span class="line">print(result)</span><br><span class="line">result = html.xpath(<span class="string">'//li[position()&lt;3]/a/text()'</span>)</span><br><span class="line">print(result)</span><br><span class="line">result = html.xpath(<span class="string">'//li[last()-2]/a/text()'</span>)</span><br><span class="line">print(result)</span><br></pre></td></tr></table></figure></p><ul><li>li[1]：选取第一个 li 节点；</li><li>li[last()]：选取最后一个 li 节点；</li><li>position()&lt;3：选取位置小于 3 的 li 节点；</li><li>li[last()-2]：选取倒数第三个 li 节点</li></ul><p>输出结果：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[<span class="string">'first item'</span>]</span><br><span class="line">[<span class="string">'fifth item'</span>]</span><br><span class="line">[<span class="string">'first item'</span>, <span class="string">'second item'</span>]</span><br><span class="line">[<span class="string">'third item'</span>]</span><br></pre></td></tr></table></figure></p><h1 id="【7-12】节点轴选择"><a href="#【7-12】节点轴选择" class="headerlink" title="【7.12】节点轴选择"></a><font color="#ff0000">【7.12】节点轴选择</font></h1><p>节点轴选择：获取子元素、兄弟元素、父元素、祖先元素等<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> lxml <span class="keyword">import</span> etree</span><br><span class="line"></span><br><span class="line">text = <span class="string">'''</span></span><br><span class="line"><span class="string">&lt;div&gt;</span></span><br><span class="line"><span class="string">    &lt;ul&gt;</span></span><br><span class="line"><span class="string">         &lt;li class="item-0"&gt;&lt;a href="link1.html"&gt;&lt;span&gt;first item&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;</span></span><br><span class="line"><span class="string">         &lt;li class="item-1"&gt;&lt;a href="link2.html"&gt;second item&lt;/a&gt;&lt;/li&gt;</span></span><br><span class="line"><span class="string">         &lt;li class="item-inactive"&gt;&lt;a href="link3.html"&gt;third item&lt;/a&gt;&lt;/li&gt;</span></span><br><span class="line"><span class="string">         &lt;li class="item-1"&gt;&lt;a href="link4.html"&gt;fourth item&lt;/a&gt;&lt;/li&gt;</span></span><br><span class="line"><span class="string">         &lt;li class="item-0"&gt;&lt;a href="link5.html"&gt;fifth item&lt;/a&gt;</span></span><br><span class="line"><span class="string">     &lt;/ul&gt;</span></span><br><span class="line"><span class="string"> &lt;/div&gt;</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line">html = etree.HTML(text)</span><br><span class="line">result = html.xpath(<span class="string">'//li[1]/ancestor::*'</span>)</span><br><span class="line">print(result)</span><br><span class="line">result = html.xpath(<span class="string">'//li[1]/ancestor::div'</span>)</span><br><span class="line">print(result)</span><br><span class="line">result = html.xpath(<span class="string">'//li[1]/attribute::*'</span>)</span><br><span class="line">print(result)</span><br><span class="line">result = html.xpath(<span class="string">'//li[1]/child::a[@href="link1.html"]'</span>)</span><br><span class="line">print(result)</span><br><span class="line">result = html.xpath(<span class="string">'//li[1]/descendant::span'</span>)</span><br><span class="line">print(result)</span><br><span class="line">result = html.xpath(<span class="string">'//li[1]/following::*[2]'</span>)</span><br><span class="line">print(result)</span><br><span class="line">result = html.xpath(<span class="string">'//li[1]/following-sibling::*'</span>)</span><br><span class="line">print(result)</span><br></pre></td></tr></table></figure></p><p>输出结果：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[&lt;Element html at <span class="number">0x1d3749e9548</span>&gt;, &lt;Element body at <span class="number">0x1d3749e94c8</span>&gt;, &lt;Element div at <span class="number">0x1d3749e9488</span>&gt;, &lt;Element ul at <span class="number">0x1d3749e9588</span>&gt;]</span><br><span class="line">[&lt;Element div at <span class="number">0x1d3749e9488</span>&gt;]</span><br><span class="line">[<span class="string">'item-0'</span>]</span><br><span class="line">[&lt;Element a at <span class="number">0x1d3749e9588</span>&gt;]</span><br><span class="line">[&lt;Element span at <span class="number">0x1d3749e9488</span>&gt;]</span><br><span class="line">[&lt;Element a at <span class="number">0x1d3749e9588</span>&gt;]</span><br><span class="line">[&lt;Element li at <span class="number">0x1d3749e94c8</span>&gt;, &lt;Element li at <span class="number">0x1d3749e95c8</span>&gt;, &lt;Element li at <span class="number">0x1d3749e9608</span>&gt;, &lt;Element li at <span class="number">0x1d3749e9648</span>&gt;]</span><br></pre></td></tr></table></figure></p><p>基本语法：轴名称::节点测试[谓语]</p><p>轴名称对应的结果：</p><table><thead><tr><th>轴名称</th><th>结果</th></tr></thead><tbody><tr><td>ancestor</td><td>选取当前节点的所有先辈（父、祖父等）</td></tr><tr><td>ancestor-or-self</td><td>选取当前节点的所有先辈（父、祖父等）以及当前节点本身</td></tr><tr><td>attribute</td><td>选取当前节点的所有属性</td></tr><tr><td>child</td><td>选取当前节点的所有子元素</td></tr><tr><td>descendant</td><td>选取当前节点的所有后代元素（子、孙等）</td></tr><tr><td>descendant-or-self</td><td>选取当前节点的所有后代元素（子、孙等）以及当前节点本身</td></tr><tr><td>following</td><td>选取文档中当前节点的结束标签之后的所有节点</td></tr><tr><td>namespace</td><td>选取当前节点的所有命名空间节点</td></tr><tr><td>parent</td><td>选取当前节点的父节点</td></tr><tr><td>preceding</td><td>选取文档中当前节点的开始标签之前的所有节点</td></tr><tr><td>preceding-sibling</td><td>选取当前节点之前的所有同级节点</td></tr><tr><td>self</td><td>选取当前节点</td></tr></tbody></table><p>实例：</p><table><thead><tr><th>例子</th><th>结果</th></tr></thead><tbody><tr><td>child::book</td><td>选取所有属于当前节点的子元素的 book 节点</td></tr><tr><td>attribute::lang</td><td>选取当前节点的 lang 属性</td></tr><tr><td>child::*</td><td>选取当前节点的所有子元素</td></tr><tr><td>attribute::*</td><td>选取当前节点的所有属性</td></tr><tr><td>child::text()</td><td>选取当前节点的所有文本子节点</td></tr><tr><td>child::node()</td><td>选取当前节点的所有子节点</td></tr><tr><td>descendant::book</td><td>选取当前节点的所有 book 后代</td></tr><tr><td>ancestor::book</td><td>选择当前节点的所有 book 先辈</td></tr><tr><td>ancestor-or-self::book</td><td>选取当前节点的所有 book 先辈以及当前节点（如果此节点是 book 节点）</td></tr><tr><td>child::*/child::price</td><td>选取当前节点的所有 price 孙节点</td></tr></tbody></table>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;center&gt;&lt;font color=&quot;#1BC3FB&quot; size=&quot;4&quot;&gt;Python3 爬虫学习笔记第七章 —— 【解析库 lxml】&lt;/font&gt;&lt;/center&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="Python3 学习笔记" scheme="https://www.itrhx.com/categories/Python3-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
      <category term="Python3 爬虫" scheme="https://www.itrhx.com/categories/Python3-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/Python3-%E7%88%AC%E8%99%AB/"/>
    
    
      <category term="爬虫" scheme="https://www.itrhx.com/tags/%E7%88%AC%E8%99%AB/"/>
    
      <category term="lxml" scheme="https://www.itrhx.com/tags/lxml/"/>
    
      <category term="XPath" scheme="https://www.itrhx.com/tags/XPath/"/>
    
  </entry>
  
  <entry>
    <title>Python3 爬虫学习笔记 C06</title>
    <link href="https://www.itrhx.com/2019/08/24/A36-Python3-spider-C06/"/>
    <id>https://www.itrhx.com/2019/08/24/A36-Python3-spider-C06/</id>
    <published>2019-08-24T10:37:05.278Z</published>
    <updated>2019-09-13T17:18:56.207Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><blockquote><center><font color="#1BC3FB" size="4">Python3 爬虫学习笔记第六章 —— 【正则表达式】</font></center></blockquote><a id="more"></a><h1 id="【6-1】关于正则表达式"><a href="#【6-1】关于正则表达式" class="headerlink" title="【6.1】关于正则表达式"></a><font color="#ff0000">【6.1】关于正则表达式</font></h1><p>正则表达式是对字符串操作的一种逻辑公式，用定义好的特定字符和这些特定字符的组合组成一个规则字符串，这个规则字符串原来表达对字符串的一种过滤逻辑，从而实现字符串的检索、替换、匹配验证等。Python 的 re 库提供了整个正则表达式的实现，包含五种方法：<font color="#ff0000">match、search、findall、sub、compile</font><br>常用的匹配规则：</p><table><thead><tr><th>模式</th><th>描述</th></tr></thead><tbody><tr><td>\w</td><td>匹配字母、数字及下划线</td></tr><tr><td>\W</td><td>匹配不是字母、数字及下划线的字符</td></tr><tr><td>\s</td><td>匹配任意空白字符，等价于 [\t\n\r\f]</td></tr><tr><td>\S</td><td>匹配任意非空字符</td></tr><tr><td>\d</td><td>匹配任意数字，等价于 [0-9]</td></tr><tr><td>\D</td><td>匹配任意非数字的字符</td></tr><tr><td>\A</td><td>匹配字符串开头</td></tr><tr><td>\z</td><td>匹配字符串结尾，如果存在换行，同时还会匹配换行符</td></tr><tr><td>\Z</td><td>匹配字符串结尾，如果存在换行，只匹配到换行前的结束字符串</td></tr><tr><td>\G</td><td>匹配最后匹配完成的位置</td></tr><tr><td>\n</td><td>匹配一个换行符</td></tr><tr><td>\t</td><td>匹配一个制表符</td></tr><tr><td>^</td><td>匹配一行字符串的开头</td></tr><tr><td>$</td><td>匹配一行字符串的结尾</td></tr><tr><td>.</td><td>匹配任意字符，除了换行符，当 re.DOTALL 标记被指定时，则可以匹配包括换行符的任意字符</td></tr><tr><td>[…]</td><td>用来表示一组字符，单独列出，比如 [amk] 匹配 a、m 或 k</td></tr><tr><td>[^…]</td><td>不在 [] 中的字符，比如  匹配除了 a、b、c 之外的字符</td></tr><tr><td>*</td><td>匹配 0 个或多个表达式</td></tr><tr><td>+</td><td>匹配 1 个或多个表达式</td></tr><tr><td>?</td><td>匹配 0 个或 1 个前面的正则表达式定义的片段，非贪婪方式</td></tr><tr><td>{n}</td><td>精确匹配 n 个前面的表达式</td></tr><tr><td>{n, m}</td><td>匹配 n 到 m 次由前面正则表达式定义的片段，贪婪方式</td></tr><tr><td>a\</td><td>b</td><td>匹配 a 或 b</td></tr><tr><td>( )</td><td>匹配括号内的表达式，也表示一个组</td></tr></tbody></table><h1 id="【6-2】re-match-方法"><a href="#【6-2】re-match-方法" class="headerlink" title="【6.2】re.match 方法"></a><font color="#ff0000">【6.2】re.match 方法</font></h1><p>match() 方法会尝试从字符串的起始位置匹配正则表达式，如果匹配，就返回匹配成功的结果；如果不匹配，就返回 None，在 match() 方法中，第一个参数传入正则表达式，第二个参数传入要匹配的字符串。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line">content = <span class="string">'This is a Demo_123 4567_I Love China'</span></span><br><span class="line">print(len(content))</span><br><span class="line">result = re.match(<span class="string">'^This\s\w\w\s\w\s\w&#123;5&#125;\d&#123;3&#125;\s\w&#123;6&#125;'</span>, content)</span><br><span class="line">print(result)</span><br><span class="line">print(result.group())</span><br><span class="line">print(result.span())</span><br></pre></td></tr></table></figure></p><p>输出结果：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">36</span></span><br><span class="line">&lt;_sre.SRE_Match object; span=(<span class="number">0</span>, <span class="number">25</span>), match=<span class="string">'This is a Demo_123 4567_I'</span>&gt;</span><br><span class="line">This <span class="keyword">is</span> a Demo_123 <span class="number">4567</span>_I</span><br><span class="line">(<span class="number">0</span>, <span class="number">25</span>)</span><br></pre></td></tr></table></figure></p><p>打印 result 结果是 SRE_Match 对象，表明匹配成功。SRE_Match 对象有两种方法：<font color="#ff0000">group()</font> 方法可以输出匹配到的内容；<font color="#ff0000">span()</font> 方法可以输出匹配的范围。</p><h2 id="【6-2-1】提取内容"><a href="#【6-2-1】提取内容" class="headerlink" title="【6.2.1】提取内容"></a><font color="#ff0000">【6.2.1】提取内容</font></h2><p>使用括号将想提取的子字符串括起来。括号实际上标记了一个子表达式的开始和结束位置，被标记的每个子表达式会依次对应每一个分组，调用 <font color="#ff0000">group()</font> 方法传入分组的索引即可获取提取的结果。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line">content = <span class="string">'This is a Demo_123 4567_I Love China'</span></span><br><span class="line">result = re.match(<span class="string">'^This\s\w\w\s\w\s(\w&#123;5&#125;)\d&#123;3&#125;\s\w&#123;6&#125;'</span>, content)</span><br><span class="line">print(result)</span><br><span class="line">print(result.group())</span><br><span class="line">print(result.group(<span class="number">1</span>))</span><br><span class="line">print(result.span())</span><br></pre></td></tr></table></figure></p><p>输出结果：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;_sre.SRE_Match object; span=(<span class="number">0</span>, <span class="number">25</span>), match=<span class="string">'This is a Demo_123 4567_I'</span>&gt;</span><br><span class="line">This <span class="keyword">is</span> a Demo_123 <span class="number">4567</span>_I</span><br><span class="line">Demo_</span><br><span class="line">(<span class="number">0</span>, <span class="number">25</span>)</span><br></pre></td></tr></table></figure></p><h2 id="【6-2-2】通用匹配"><a href="#【6-2-2】通用匹配" class="headerlink" title="【6.2.2】通用匹配"></a><font color="#ff0000">【6.2.2】通用匹配</font></h2><p>如果每个字符都用都用一个符号来匹配的话就显得比较麻烦，可以用 <code>.*</code>来匹配，<code>.</code> 可以匹配除换行符外的任意字符，<code>*</code> 代表匹配前面的字符无限次。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line">content = <span class="string">'This is a Demo_123 4567_I Love China'</span></span><br><span class="line">result = re.match(<span class="string">'^This.*China$'</span>, content)</span><br><span class="line">print(result)</span><br><span class="line">print(result.group())</span><br><span class="line">print(result.span())</span><br></pre></td></tr></table></figure></p><p>输出结果：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;_sre.SRE_Match object; span=(<span class="number">0</span>, <span class="number">36</span>), match=<span class="string">'This is a Demo_123 4567_I Love China'</span>&gt;</span><br><span class="line">This <span class="keyword">is</span> a Demo_123 <span class="number">4567</span>_I Love China</span><br><span class="line">(<span class="number">0</span>, <span class="number">36</span>)</span><br></pre></td></tr></table></figure></p><h2 id="【6-2-3】贪婪匹配"><a href="#【6-2-3】贪婪匹配" class="headerlink" title="【6.2.3】贪婪匹配"></a><font color="#ff0000">【6.2.3】贪婪匹配</font></h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line">content = <span class="string">'This is a Demo_1234567_I Love China'</span></span><br><span class="line">result = re.match(<span class="string">'^This.*(\d+).*China$'</span>, content)</span><br><span class="line">print(result)</span><br><span class="line">print(result.group())</span><br><span class="line">print(result.group(<span class="number">1</span>))</span><br><span class="line">print(result.span())</span><br></pre></td></tr></table></figure><p>输出结果：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;_sre.SRE_Match object; span=(<span class="number">0</span>, <span class="number">35</span>), match=<span class="string">'This is a Demo_1234567_I Love China'</span>&gt;</span><br><span class="line">This <span class="keyword">is</span> a Demo_1234567_I Love China</span><br><span class="line"><span class="number">7</span></span><br><span class="line">(<span class="number">0</span>, <span class="number">35</span>)</span><br></pre></td></tr></table></figure></p><font color="#ff0000"><code>.*</code> 为贪婪匹配，会匹配尽可能多的字符，所以 \d+ 只会匹配到最后一个数字，而不是所有的数字</font><h2 id="【6-2-4】非贪婪匹配"><a href="#【6-2-4】非贪婪匹配" class="headerlink" title="【6.2.4】非贪婪匹配"></a><font color="#ff0000">【6.2.4】非贪婪匹配</font></h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line">content = <span class="string">'This is a Demo_1234567_I Love China'</span></span><br><span class="line">result = re.match(<span class="string">'^This.*?(\d+).*China$'</span>, content)</span><br><span class="line">print(result)</span><br><span class="line">print(result.group())</span><br><span class="line">print(result.group(<span class="number">1</span>))</span><br><span class="line">print(result.span())</span><br></pre></td></tr></table></figure><p>输出结果：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;_sre.SRE_Match object; span=(<span class="number">0</span>, <span class="number">35</span>), match=<span class="string">'This is a Demo_1234567_I Love China'</span>&gt;</span><br><span class="line">This <span class="keyword">is</span> a Demo_1234567_I Love China</span><br><span class="line"><span class="number">1234567</span></span><br><span class="line">(<span class="number">0</span>, <span class="number">35</span>)</span><br></pre></td></tr></table></figure></p><font color="#ff0000"><code>.*?</code> 为非贪婪匹配，会匹配尽可能少的字符，所以 \d+ 会匹配到所有的数字</font><h2 id="【6-2-5】转义匹配"><a href="#【6-2-5】转义匹配" class="headerlink" title="【6.2.5】转义匹配"></a><font color="#ff0000">【6.2.5】转义匹配</font></h2><p>当遇到用于正则匹配模式的特殊字符时，在前面加反斜线转义一下即可。例如 <code>.</code> 可以用 <code>\.</code> 来匹配：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line">content = <span class="string">'(博客)www.itrhx.com'</span></span><br><span class="line">result = re.match(<span class="string">'\(博客\)www\.itrhx\.com'</span>, content)</span><br><span class="line">print(result)</span><br><span class="line">print(result.group())</span><br></pre></td></tr></table></figure></p><p>输出结果：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;_sre.SRE_Match object; span=(<span class="number">0</span>, <span class="number">17</span>), match=<span class="string">'(博客)www.itrhx.com'</span>&gt;</span><br><span class="line">(博客)www.itrhx.com</span><br></pre></td></tr></table></figure></p><h2 id="【6-2-6】修饰符"><a href="#【6-2-6】修饰符" class="headerlink" title="【6.2.6】修饰符"></a><font color="#ff0000">【6.2.6】修饰符</font></h2><p>修饰符用来解决换行、大小写等问题，较为常用的有 re.S 和 re.I。</p><table><thead><tr><th style="text-align:center">修饰符</th><th style="text-align:center">描述</th></tr></thead><tbody><tr><td style="text-align:center">re.S</td><td style="text-align:center">使 <code>.</code> 匹配包括换行在内的所有字符</td></tr><tr><td style="text-align:center">re.I</td><td style="text-align:center">使匹配对大小写不敏感</td></tr><tr><td style="text-align:center">re.L</td><td style="text-align:center">做本地化识别（locale-aware）匹配</td></tr><tr><td style="text-align:center">re.M</td><td style="text-align:center">多行匹配，影响 <code>^</code> 和 <code>$</code></td></tr><tr><td style="text-align:center">re.U</td><td style="text-align:center">根据 Unicode 字符集解析字符。这个标志影响 <code>\w</code>、<code>\W</code>、<code>\b</code> 和 <code>\B</code></td></tr><tr><td style="text-align:center">re.X</td><td style="text-align:center">该标志通过给予你更灵活的格式以便你将正则表达式写得更易于理解</td></tr></tbody></table><p>示例：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line">content = <span class="string">'''This is a Demo_1234567</span></span><br><span class="line"><span class="string">          _I Love China'''</span></span><br><span class="line">result = re.match(<span class="string">'^This.*?(\d+).*China$'</span>, content)</span><br><span class="line">print(result)</span><br><span class="line">print(result.group())</span><br><span class="line">print(result.group(<span class="number">1</span>))</span><br><span class="line">print(result.span())</span><br></pre></td></tr></table></figure></p><p>示例中 content 字段进行了换行处理，如果没有修饰符，就会报错：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Traceback (most recent call last):</span><br><span class="line"><span class="keyword">None</span></span><br><span class="line">  File <span class="string">"F:/PycharmProjects/Python3爬虫/test.py"</span>, line <span class="number">7</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">    print(result.group())</span><br><span class="line">AttributeError: <span class="string">'NoneType'</span> object has no attribute <span class="string">'group'</span></span><br></pre></td></tr></table></figure></p><p>添加 re.S 修饰符后即可匹配成功：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line">content = <span class="string">'''This is a Demo_1234567</span></span><br><span class="line"><span class="string">          _I Love China'''</span></span><br><span class="line">result = re.match(<span class="string">'^This.*?(\d+).*China$'</span>, content, re.S)</span><br><span class="line">print(result)</span><br><span class="line">print(result.group())</span><br><span class="line">print(result.group(<span class="number">1</span>))</span><br><span class="line">print(result.span())</span><br></pre></td></tr></table></figure></p><p>输出结果：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;_sre.SRE_Match object; span=(<span class="number">0</span>, <span class="number">46</span>), match=<span class="string">'This is a Demo_1234567\n          _I Love China'</span>&gt;</span><br><span class="line">This <span class="keyword">is</span> a Demo_1234567</span><br><span class="line">          _I Love China</span><br><span class="line"><span class="number">1234567</span></span><br><span class="line">(<span class="number">0</span>, <span class="number">46</span>)</span><br></pre></td></tr></table></figure></p><h1 id="【6-3】re-search-方法"><a href="#【6-3】re-search-方法" class="headerlink" title="【6.3】re.search 方法"></a><font color="#ff0000">【6.3】re.search 方法</font></h1><p>match() 方法只能从字符串的开头开始匹配，一旦开头不匹配，那么整个匹配就失败了，match() 方法更适合用来检测某个字符串是否符合某个正则表达式的规则，而 search() 方法则会扫描整个字符串并返回第一个成功的匹配<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line">content = <span class="string">'This is a Demo_1234567_I Love China'</span></span><br><span class="line">result = re.search(<span class="string">'a.*?(\d&#123;5&#125;)'</span>, content)</span><br><span class="line">print(result)</span><br><span class="line">print(result.group(<span class="number">1</span>))</span><br></pre></td></tr></table></figure></p><p>输出结果：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;_sre.SRE_Match object; span=(<span class="number">8</span>, <span class="number">20</span>), match=<span class="string">'a Demo_12345'</span>&gt;</span><br><span class="line"><span class="number">12345</span></span><br></pre></td></tr></table></figure></p><h1 id="【6-4】re-findall-方法"><a href="#【6-4】re-findall-方法" class="headerlink" title="【6.4】re.findall 方法"></a><font color="#ff0000">【6.4】re.findall 方法</font></h1><p>search() 方法则会扫描整个字符串，但是返回的是第一个成功的匹配，而 findall() 方法将会返回所有成功的匹配<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line">html = <span class="string">'''&lt;div id="songs-list"&gt;</span></span><br><span class="line"><span class="string">        &lt;h2 class="title"&gt; 民谣 &lt;/h2&gt;</span></span><br><span class="line"><span class="string">        &lt;p class="introduction"&gt;</span></span><br><span class="line"><span class="string">        民谣歌曲列表</span></span><br><span class="line"><span class="string">        &lt;/p&gt;</span></span><br><span class="line"><span class="string">        &lt;ul id="list" class="list-group"&gt;</span></span><br><span class="line"><span class="string">        &lt;li data-view="2"&gt; 七里香 &lt;/li&gt;</span></span><br><span class="line"><span class="string">        &lt;li data-view="7"&gt;</span></span><br><span class="line"><span class="string">        &lt;a href="/2.mp3" singer="赵雷"&gt; 理想 &lt;/a&gt;</span></span><br><span class="line"><span class="string">        &lt;/li&gt;</span></span><br><span class="line"><span class="string">        &lt;li data-view="4" class="active"&gt;</span></span><br><span class="line"><span class="string">        &lt;a href="/3.mp3" singer="许巍"&gt; 像风一样自由 &lt;/a&gt;</span></span><br><span class="line"><span class="string">        &lt;/li&gt;</span></span><br><span class="line"><span class="string">        &lt;li data-view="6"&gt;&lt;a href="/4.mp3" singer="安与骑兵"&gt; 红山果 &lt;/a&gt;&lt;/li&gt;</span></span><br><span class="line"><span class="string">        &lt;li data-view="5"&gt;&lt;a href="/5.mp3" singer="薛之谦"&gt; 意外 &lt;/a&gt;&lt;/li&gt;</span></span><br><span class="line"><span class="string">        &lt;li data-view="5"&gt;</span></span><br><span class="line"><span class="string">        &lt;a href="/6.mp3" singer="马頔"&gt; 但南山南 &lt;/a&gt;</span></span><br><span class="line"><span class="string">        &lt;/li&gt;</span></span><br><span class="line"><span class="string">        &lt;/ul&gt;</span></span><br><span class="line"><span class="string">        &lt;/div&gt;'''</span></span><br><span class="line">results = re.findall(<span class="string">'&lt;li.*?href="(.*?)".*?singer="(.*?)"&gt;(.*?)&lt;/a&gt;'</span>, html, re.S)</span><br><span class="line">print(results)</span><br><span class="line">print(type(results))</span><br><span class="line"><span class="keyword">for</span> result <span class="keyword">in</span> results:</span><br><span class="line">    print(result)</span><br><span class="line">    print(result[<span class="number">0</span>], result[<span class="number">1</span>], result[<span class="number">2</span>])</span><br></pre></td></tr></table></figure></p><p>输出结果：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">[(<span class="string">'/2.mp3'</span>, <span class="string">'赵雷'</span>, <span class="string">' 理想 '</span>), (<span class="string">'/3.mp3'</span>, <span class="string">'许巍'</span>, <span class="string">' 像风一样自由 '</span>), (<span class="string">'/4.mp3'</span>, <span class="string">'安与骑兵'</span>, <span class="string">' 红山果 '</span>), (<span class="string">'/5.mp3'</span>, <span class="string">'薛之谦'</span>, <span class="string">' 意外 '</span>), (<span class="string">'/6.mp3'</span>, <span class="string">'马頔'</span>, <span class="string">' 但南山南 '</span>)]</span><br><span class="line">&lt;<span class="class"><span class="keyword">class</span> '<span class="title">list</span>'&gt;</span></span><br><span class="line"><span class="class"><span class="params">(<span class="string">'/2.mp3'</span>, <span class="string">'赵雷'</span>, <span class="string">' 理想 '</span>)</span></span></span><br><span class="line"><span class="class">/2.<span class="title">mp3</span> 赵雷  理想 </span></span><br><span class="line"><span class="class"><span class="params">(<span class="string">'/3.mp3'</span>, <span class="string">'许巍'</span>, <span class="string">' 像风一样自由 '</span>)</span></span></span><br><span class="line"><span class="class">/3.<span class="title">mp3</span> 许巍  像风一样自由 </span></span><br><span class="line"><span class="class"><span class="params">(<span class="string">'/4.mp3'</span>, <span class="string">'安与骑兵'</span>, <span class="string">' 红山果 '</span>)</span></span></span><br><span class="line"><span class="class">/4.<span class="title">mp3</span> 安与骑兵  红山果 </span></span><br><span class="line"><span class="class"><span class="params">(<span class="string">'/5.mp3'</span>, <span class="string">'薛之谦'</span>, <span class="string">' 意外 '</span>)</span></span></span><br><span class="line"><span class="class">/5.<span class="title">mp3</span> 薛之谦  意外 </span></span><br><span class="line"><span class="class"><span class="params">(<span class="string">'/6.mp3'</span>, <span class="string">'马頔'</span>, <span class="string">' 但南山南 '</span>)</span></span></span><br><span class="line"><span class="class">/6.<span class="title">mp3</span> 马頔  但南山南</span></span><br></pre></td></tr></table></figure></p><h1 id="【6-5】re-sub-方法"><a href="#【6-5】re-sub-方法" class="headerlink" title="【6.5】re.sub 方法"></a><font color="#ff0000">【6.5】re.sub 方法</font></h1><p>与字符串的 replace() 方法类似，sub() 方法可以对文本进行修改，sub() 方法第一个参数为匹配对象，第二个参数为替换成的字符串，如果要去掉匹配对象的话，可以赋值为空，第三个参数为原来的字符串<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line">content = <span class="string">'87dsf4as2w4jh1k4kdl4'</span></span><br><span class="line">result = re.sub(<span class="string">'\d+'</span>, <span class="string">''</span>, content)</span><br><span class="line">print(result)</span><br></pre></td></tr></table></figure></p><p>输出结果：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dsfaswjhkkdl</span><br></pre></td></tr></table></figure></p><h1 id="【6-5】re-compile-方法"><a href="#【6-5】re-compile-方法" class="headerlink" title="【6.5】re.compile() 方法"></a><font color="#ff0000">【6.5】re.compile() 方法</font></h1><p>compile() 方法可以将正则字符串编译成正则表达式对象，以便在后面的匹配中复用<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line">content1 = <span class="string">'北京时间：2019-08-24 18:30'</span></span><br><span class="line">content2 = <span class="string">'伦敦时间：2019-08-24 11:30'</span></span><br><span class="line">content3 = <span class="string">'巴黎时间：2019-08-24 12:30'</span></span><br><span class="line">content4 = <span class="string">'外星时间：9019-99-66 50:30'</span></span><br><span class="line">pattern = re.compile(<span class="string">'\d&#123;2&#125;:\d&#123;2&#125;'</span>)</span><br><span class="line">result1 = re.sub(pattern, <span class="string">''</span>, content1)</span><br><span class="line">result2 = re.sub(pattern, <span class="string">''</span>, content2)</span><br><span class="line">result3 = re.sub(pattern, <span class="string">''</span>, content3)</span><br><span class="line">result4 = re.sub(pattern, <span class="string">''</span>, content4)</span><br><span class="line">print(result1, result2, result3, result4)</span><br></pre></td></tr></table></figure></p><p>利用 compile() 方法将正则表达式编译成一个正则表达式对象，以便复用，然后用 sub() 方法去掉具体时间<br>输出结果：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">北京时间：<span class="number">2019</span><span class="number">-08</span><span class="number">-24</span>  伦敦时间：<span class="number">2019</span><span class="number">-08</span><span class="number">-24</span>  巴黎时间：<span class="number">2019</span><span class="number">-08</span><span class="number">-24</span>  外星时间：<span class="number">9019</span><span class="number">-99</span><span class="number">-66</span></span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;center&gt;&lt;font color=&quot;#1BC3FB&quot; size=&quot;4&quot;&gt;Python3 爬虫学习笔记第六章 —— 【正则表达式】&lt;/font&gt;&lt;/center&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="Python3 学习笔记" scheme="https://www.itrhx.com/categories/Python3-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
      <category term="Python3 爬虫" scheme="https://www.itrhx.com/categories/Python3-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/Python3-%E7%88%AC%E8%99%AB/"/>
    
    
      <category term="爬虫" scheme="https://www.itrhx.com/tags/%E7%88%AC%E8%99%AB/"/>
    
      <category term="正则表达式" scheme="https://www.itrhx.com/tags/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>Python3 爬虫学习笔记 C05</title>
    <link href="https://www.itrhx.com/2019/08/23/A35-Python3-spider-C05/"/>
    <id>https://www.itrhx.com/2019/08/23/A35-Python3-spider-C05/</id>
    <published>2019-08-23T12:13:55.085Z</published>
    <updated>2019-09-13T17:18:51.289Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><blockquote><center><font color="#1BC3FB" size="4">Python3 爬虫学习笔记第五章 —— 【Selenium + 无界面浏览器】</font></center></blockquote><a id="more"></a><h1 id="【5-1】关于无界面浏览器"><a href="#【5-1】关于无界面浏览器" class="headerlink" title="【5.1】关于无界面浏览器"></a><font color="#ff0000">【5.1】关于无界面浏览器</font></h1><p>无界面（headless）浏览器，会把网站加载到内存并执行页面上的 JavaScript，因为不会展示图形界面，所以运行起来比完整的浏览器更高效。Selenium 搭配无界面浏览器使用，被称为爬虫利器，常用的无界面浏览器有：PhantomJS、Headless Chrome、Headless Firefox，其中，18年3月，PhantomJS 的作者在 GitHub 上宣布暂停开发 PhantomJS，现在使用 PhantomJS 会出现警告：<code>UserWarning: Selenium support for PhantomJS has been deprecated, please use headless versions of Chrome or Firefox instead</code>，所以推荐使用谷歌或者火狐的无界面浏览器</p><h1 id="【5-2】PhantomJS"><a href="#【5-2】PhantomJS" class="headerlink" title="【5.2】PhantomJS"></a><font color="#ff0000">【5.2】PhantomJS</font></h1><p>下载 PhantomJS：<a href="https://phantomjs.org/download.html" target="_blank" rel="noopener">https://phantomjs.org/download.html</a><br>path 为 PhantomJS 路径，如果系统配置了环境变量，就不用手动指定 executable_path 参数<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"></span><br><span class="line">path = <span class="string">r'F:\PycharmProjects\Python3爬虫\phantomjs-2.1.1\bin\phantomjs.exe'</span></span><br><span class="line">driver = webdriver.PhantomJS(executable_path=path)</span><br><span class="line">driver.get(<span class="string">"https://www.itrhx.com"</span>)</span><br><span class="line">print(driver.page_source)</span><br><span class="line">driver.close()</span><br></pre></td></tr></table></figure></p><h1 id="【5-3】Headless-Chrome"><a href="#【5-3】Headless-Chrome" class="headerlink" title="【5.3】Headless Chrome"></a><font color="#ff0000">【5.3】Headless Chrome</font></h1><p>下载 Chromedriver：<a href="http://chromedriver.storage.googleapis.com/index.html" target="_blank" rel="noopener">http://chromedriver.storage.googleapis.com/index.html</a><br>需要本地有 Chrome 浏览器，path 为 Headless Chrome 路径，如果系统配置了环境变量，就不用手动指定 executable_path 参数<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.chrome.options <span class="keyword">import</span> Options</span><br><span class="line"></span><br><span class="line">chrome_options = Options()</span><br><span class="line">chrome_options.add_argument(<span class="string">'--headless'</span>)</span><br><span class="line">chrome_options.add_argument(<span class="string">'--disable-gpu'</span>)</span><br><span class="line">path = <span class="string">'F:\PycharmProjects\Python3爬虫\chromedriver.exe'</span></span><br><span class="line">driver = webdriver.Chrome(executable_path=path, chrome_options=chrome_options)</span><br><span class="line">driver.get(<span class="string">"https://www.itrhx.com"</span>)</span><br><span class="line">print(driver.page_source)</span><br><span class="line">driver.close()</span><br></pre></td></tr></table></figure></p><h1 id="【5-4】Headless-Firefox"><a href="#【5-4】Headless-Firefox" class="headerlink" title="【5.4】Headless Firefox"></a><font color="#ff0000">【5.4】Headless Firefox</font></h1><p>下载 geckodriver：<a href="https://github.com/mozilla/geckodriver/releases/" target="_blank" rel="noopener">https://github.com/mozilla/geckodriver/releases/</a><br>需要本地有 Firefox 浏览器，path 为 Headless Firefox 路径，如果系统配置了环境变量，就不用手动指定 executable_path 参数<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium.webdriver <span class="keyword">import</span> Firefox</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.firefox.options <span class="keyword">import</span> Options</span><br><span class="line"></span><br><span class="line">options = Options()</span><br><span class="line">options.add_argument(<span class="string">'-headless'</span>)</span><br><span class="line">path = <span class="string">'F:\PycharmProjects\Python3爬虫\geckodriver.exe'</span></span><br><span class="line">driver = Firefox(executable_path=path, firefox_options=options)</span><br><span class="line">driver.get(<span class="string">"https://www.itrhx.com"</span>)</span><br><span class="line">print(driver.page_source)</span><br><span class="line">driver.close()</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;center&gt;&lt;font color=&quot;#1BC3FB&quot; size=&quot;4&quot;&gt;Python3 爬虫学习笔记第五章 —— 【Selenium + 无界面浏览器】&lt;/font&gt;&lt;/center&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="Python3 学习笔记" scheme="https://www.itrhx.com/categories/Python3-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
      <category term="Python3 爬虫" scheme="https://www.itrhx.com/categories/Python3-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/Python3-%E7%88%AC%E8%99%AB/"/>
    
    
      <category term="爬虫" scheme="https://www.itrhx.com/tags/%E7%88%AC%E8%99%AB/"/>
    
      <category term="Selenium" scheme="https://www.itrhx.com/tags/Selenium/"/>
    
      <category term="无界面浏览器" scheme="https://www.itrhx.com/tags/%E6%97%A0%E7%95%8C%E9%9D%A2%E6%B5%8F%E8%A7%88%E5%99%A8/"/>
    
  </entry>
  
  <entry>
    <title>常见 User-Agent 大全</title>
    <link href="https://www.itrhx.com/2019/08/23/A34-UserAgent/"/>
    <id>https://www.itrhx.com/2019/08/23/A34-UserAgent/</id>
    <published>2019-08-23T01:28:22.624Z</published>
    <updated>2019-09-09T13:57:34.302Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>User Agent 中文名为用户代理，简称 UA，是一个特殊字符串头，使得服务器能够识别客户使用的操作系统及版本、CPU 类型、浏览器及版本、浏览器渲染引擎、浏览器语言、浏览器插件等。Python 爬虫通过伪装 UA 可以绕过某些检测。</p><p>以下为搜集的常见的各浏览器的 User-Agent，其中：</p><ul><li>安卓操作系统：Android 7.1.1；OPPO R9sk Build/NMF26F</li><li>PC操作系统：Windows 10 64位 10.0.18362.10000</li><li>其他操作系统：iOS、Backerry、WebOS、Symbian、Windows Phone</li></ul><p>相关链接：</p><ul><li>手机User-Agent大全：<a href="http://www.fynas.com/ua" target="_blank" rel="noopener">http://www.fynas.com/ua</a></li><li>User-Agent在线检测：<a href="http://www.user-agent.cn/" target="_blank" rel="noopener">http://www.user-agent.cn/</a></li><li><p>常用User-Agent大全：<a href="http://www.jsons.cn/useragent/" target="_blank" rel="noopener">http://www.jsons.cn/useragent/</a></p><h1 id="Windows10"><a href="#Windows10" class="headerlink" title="Windows10"></a><font color="#ff0000">Windows10</font></h1></li><li><p><font color="#ff0000">Windows10 / Chrome 75.0.3770.142</font><br>Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/75.0.3770.142 Safari/537.36</p></li><li><p><font color="#ff0000">Windows10 / Firefox 69.0b15</font><br>Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:69.0) Gecko/20100101 Firefox/69.0</p></li><li><p><font color="#ff0000">Windows10 / Opera 63.0.3368.43</font><br>Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/76.0.3809.100 Safari/537.36 OPR/63.0.3368.43</p></li><li><p><font color="#ff0000">Windows10 / Edge 44.18362.1.0</font><br>User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/70.0.3538.102 Safari/537.36 Edge/18.18362</p></li><li><p><font color="#ff0000">Windows10 / IE 11.10000.18362.0</font><br>User-Agent: Mozilla/5.0 (Windows NT 10.0; WOW64; Trident/7.0; LCTE; rv:11.0) like Gecko</p></li><li><p><font color="#ff0000">Windows10 x64 / Safari 5.1.4（7534.54.16）</font><br>Mozilla/5.0 (Windows NT 6.2; WOW64) AppleWebKit/534.54.16 (KHTML, like Gecko) Version/5.1.4 Safari/534.54.16</p></li><li><p><font color="#ff0000">Windows10 / QQ浏览器 10.5（3739）</font><br>Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/70.0.3538.25 Safari/537.36 Core/1.70.3722.400 QQBrowser/10.5.3739.400</p></li><li><p><font color="#ff0000">Windows10 / 360安全浏览器 10.0.1977.0</font><br>Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/63.0.3239.132 Safari/537.36 QIHU 360SE</p></li><li><p><font color="#ff0000">Windows10 / 360极速浏览器 11.0.2179.0</font><br>Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/69.0.3497.100 Safari/537.36 QIHU 360EE</p></li><li><p><font color="#ff0000">Windows10 / UC浏览器 6.2.3964.2</font><br>Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/55.0.2883.87 UBrowser/6.2.3964.2 Safari/537.36</p></li><li><p><font color="#ff0000">Windows10 / 搜狗浏览器 8.5.10.31270</font><br>Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/58.0.3029.110 Safari/537.36 SE 2.X MetaSr 1.0</p></li><li><p><font color="#ff0000">Windows10 / 猎豹浏览器 6.5.115.19331.8001</font><br>Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/57.0.2987.98 Safari/537.36 LBBROWSER</p></li><li><p><font color="#ff0000">Windows10 / 傲游浏览器 5.2.7.5000</font><br>Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/61.0.3163.79 Safari/537.36</p></li><li><p><font color="#ff0000">Windows10 / 2345加速浏览器 10.1.0.19399</font><br>Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/69.0.3947.100 Safari/537.36</p></li></ul><h1 id="Android"><a href="#Android" class="headerlink" title="Android"></a><font color="#ff0000">Android</font></h1><ul><li><p><font color="#ff0000">Android / Chrome 76.0.3809.111</font><br>Mozilla/5.0 (Linux; Android 7.1.1; OPPO R9sk) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/76.0.3809.111 Mobile Safari/537.36</p></li><li><p><font color="#ff0000">Android / Firefox 68.0.2</font><br>Mozilla/5.0 (Android 7.1.1; Mobile; rv:68.0) Gecko/68.0 Firefox/68.0</p></li><li><p><font color="#ff0000">Android / Opera 53.0.2569.141117</font><br>Mozilla/5.0 (Linux; Android 7.1.1; OPPO R9sk Build/NMF26F) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/74.0.3729.157 Mobile Safari/537.36 OPR/53.0.2569.141117</p></li><li><p><font color="#ff0000">Android / Edge 42.0.2.3819</font><br>Mozilla/5.0 (Linux; Android 7.1.1; OPPO R9sk) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/73.0.3683.90 Mobile Safari/537.36 EdgA/42.0.2.3819</p></li><li><p><font color="#ff0000">Android / QQ浏览器 9.6.1.5190</font><br>Mozilla/5.0 (Linux; U; Android 7.1.1; zh-cn; OPPO R9sk Build/NMF26F) AppleWebKit/537.36 (KHTML, like Gecko) Version/4.0 Chrome/66.0.3359.126 MQQBrowser/9.6 Mobile Safari/537.36</p></li><li><p><font color="#ff0000">Android / OPPO浏览器 10.5.1.2_2c91537</font><br>Mozilla/5.0 (Linux; U; Android 7.1.1; zh-cn; OPPO R9sk Build/NMF26F) AppleWebKit/537.36 (KHTML, like Gecko) Version/4.0 Chrome/70.0.3538.80 Mobile Safari/537.36 OppoBrowser/10.5.1.2</p></li><li><p><font color="#ff0000">Android / 360浏览器 8.2.0.162</font><br>Mozilla/5.0 (Linux; Android 7.1.1; OPPO R9sk Build/NMF26F; wv) AppleWebKit/537.36 (KHTML, like Gecko) Version/4.0 Chrome/62.0.3202.97 Mobile Safari/537.36</p></li><li><p><font color="#ff0000">Android / 360极速浏览器 1.0.100.1078</font><br>Mozilla/5.0 (Linux; Android 7.1.1; OPPO R9sk Build/NMF26F) AppleWebKit/537.36 (KHTML, like Gecko) Version/4.0 Chrome/70.0.3538.80 Mobile Safari/537.36 360 Alitephone Browser (1.5.0.90/1.0.100.1078) mso_sdk(1.0.0)</p></li><li><p><font color="#ff0000">Android / UC浏览器 12.6.0.1040</font><br>Mozilla/5.0 (Linux; U; Android 7.1.1; zh-CN; OPPO R9sk Build/NMF26F) AppleWebKit/537.36 (KHTML, like Gecko) Version/4.0 Chrome/57.0.2987.108 UCBrowser/12.6.0.1040 Mobile Safari/537.36</p></li><li><p><font color="#ff0000">Android / 猎豹浏览器 5.12.3</font><br>Mozilla/5.0 (Linux; Android 7.1.1; OPPO R9sk Build/NMF26F; wv) AppleWebKit/537.36 (KHTML, like Gecko) Version/4.0 Chrome/70.0.3538.80 Mobile Safari/537.36 LieBaoFast/5.12.3</p></li><li><p><font color="#ff0000">Android / 百度浏览器 7.19</font><br>Mozilla/5.0 (Linux; Android 7.1.1; OPPO R9sk Build/NMF26F; wv) AppleWebKit/537.36 (KHTML, like Gecko) Version/4.0 Chrome/48.0.2564.116 Mobile Safari/537.36 T7/9.1 baidubrowser/7.19.13.0 (Baidu; P1 7.1.1)</p></li><li><p><font color="#ff0000">Android / 搜狗浏览器 5.22.8.71677</font><br>Mozilla/5.0 (Linux; Android 7.1.1; OPPO R9sk Build/NMF26F; wv) AppleWebKit/537.36 (KHTML, like Gecko) Version/4.0 Chrome/68.0.3440.106 Mobile Safari/537.36 AWP/2.0 SogouMSE,SogouMobileBrowser/5.22.8</p></li><li><p><font color="#ff0000">Android / 2345浏览器 11.0.1</font><br>Mozilla/5.0 (Linux; Android 7.1.1; OPPO R9sk Build/NMF26F; wv) AppleWebKit/537.36 (KHTML, like Gecko) Version/4.0 Chrome/70.0.3538.80 Mobile Safari/537.36 Mb2345Browser/11.0.1</p></li></ul><h1 id="其他"><a href="#其他" class="headerlink" title="其他"></a><font color="#ff0000">其他</font></h1><ul><li><p><font color="#ff0000">iPhone3</font><br>Mozilla/5.0 (iPhone; U; CPU iPhone OS 3_0 like Mac OS X; en-us) AppleWebKit/420.1 (KHTML, like Gecko) Version/3.0 Mobile/1A542a Safari/419.3</p></li><li><p><font color="#ff0000">iPhone4</font><br>Mozilla/5.0 (iPhone; U; CPU iPhone OS 4_0 like Mac OS X; en-us) AppleWebKit/532.9 (KHTML, like Gecko) Version/4.0.5 Mobile/8A293 Safari/6531.22.7</p></li><li><p><font color="#ff0000">iPhone6s</font><br>Mozilla/5.0 (iPhone 6s; CPU iPhone OS 11_4_1 like Mac OS X) AppleWebKit/604.3.5 (KHTML, like Gecko) Version/11.0 MQQBrowser/8.3.0 Mobile/15B87 Safari/604.1 MttCustomUA/2 QBWebViewType/1 WKType/1</p></li><li><p><font color="#ff0000">iPad</font><br>Mozilla/5.0 (iPad; U; CPU OS 3_2 like Mac OS X; en-us) AppleWebKit/531.21.10 (KHTML, like Gecko) Version/4.0.4 Mobile/7B334b Safari/531.21.10</p></li><li><p><font color="#ff0000">iPod</font><br>Mozilla/5.0 (iPod; U; CPU iPhone OS 4_3_3 like Mac OS X; en-us) AppleWebKit/533.17.9 (KHTML, like Gecko) Version/5.0.2 Mobile/8J2 Safari/6533.18.5</p></li><li><p><font color="#ff0000">BlackBerry</font><br>Mozilla/5.0 (BlackBerry; U; BlackBerry 9800; en) AppleWebKit/534.1+ (KHTML, like Gecko) Version/6.0.0.337 Mobile Safari/534.1+</p></li><li><p><font color="#ff0000">WebOS HP Touchpad</font><br>Mozilla/5.0 (hp-tablet; Linux; hpwOS/3.0.0; U; en-US) AppleWebKit/534.6 (KHTML, like Gecko) wOSBrowser/233.70 Safari/534.6 TouchPad/1.0</p></li><li><p><font color="#ff0000">Nokia N97</font><br>Mozilla/5.0 (SymbianOS/9.4; Series60/5.0 NokiaN97-1/20.0.019; Profile/MIDP-2.1 Configuration/CLDC-1.1) AppleWebKit/525 (KHTML, like Gecko) BrowserNG/7.1.18124</p></li><li><p><font color="#ff0000">Windows Phone Mango</font><br>Mozilla/5.0 (compatible; MSIE 9.0; Windows Phone OS 7.5; Trident/5.0; IEMobile/9.0; HTC; Titan)</p></li></ul>]]></content>
    
    <summary type="html">
    
      常见 User-Agent 大全收集
    
    </summary>
    
      <category term="Python3 学习笔记" scheme="https://www.itrhx.com/categories/Python3-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
      <category term="Python3 经验" scheme="https://www.itrhx.com/categories/Python3-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/Python3-%E7%BB%8F%E9%AA%8C/"/>
    
    
      <category term="爬虫" scheme="https://www.itrhx.com/tags/%E7%88%AC%E8%99%AB/"/>
    
      <category term="User-Agent" scheme="https://www.itrhx.com/tags/User-Agent/"/>
    
  </entry>
  
  <entry>
    <title>Selenium 显式等待条件及其含义</title>
    <link href="https://www.itrhx.com/2019/08/23/A33-selenium/"/>
    <id>https://www.itrhx.com/2019/08/23/A33-selenium/</id>
    <published>2019-08-23T01:28:22.478Z</published>
    <updated>2019-09-09T13:57:12.612Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><table><thead><tr><th>等待条件</th><th>含义</th></tr></thead><tbody><tr><td>title_is</td><td>标题是某内容</td></tr><tr><td>title_contains</td><td>标题包含某内容</td></tr><tr><td>presence_of_element_located</td><td>节点加载出，传入定位元组，如 (By.ID, ‘p’)</td></tr><tr><td>visibility_of_element_located</td><td>节点可见，传入定位元组</td></tr><tr><td>visibility_of</td><td>可见，传入节点对象</td></tr><tr><td>presence_of_all_elements_located</td><td>所有节点加载出</td></tr><tr><td>text_to_be_present_in_element</td><td>某个节点文本包含某文字</td></tr><tr><td>text_to_be_present_in_element_value</td><td>某个节点值包含某文字</td></tr><tr><td>frame_to_be_available_and_switch_to_it frame</td><td>加载并切换</td></tr><tr><td>invisibility_of_element_located</td><td>节点不可见</td></tr><tr><td>element_to_be_clickable</td><td>节点可点击</td></tr><tr><td>staleness_of</td><td>判断一个节点是否仍在 DOM，可判断页面是否已经刷新</td></tr><tr><td>element_to_be_selected</td><td>节点可选择，传节点对象</td></tr><tr><td>element_located_to_be_selected</td><td>节点可选择，传入定位元组</td></tr><tr><td>element_selection_state_to_be</td><td>传入节点对象以及状态，相等返回 True，否则返回 False</td></tr><tr><td>element_located_selection_state_to_be</td><td>传入定位元组以及状态，相等返回 True，否则返回 False</td></tr><tr><td>alert_is_present</td><td>是否出现 Alert</td></tr></tbody></table><p>更多等待条件极其用法介绍：<a href="https://selenium-python.readthedocs.io/api.html#module-selenium.webdriver.support.expected_conditions" target="_blank" rel="noopener">https://selenium-python.readthedocs.io/api.html#module-selenium.webdriver.support.expected_conditions</a></p><p>Selenium 的使用：<a href="https://www.itrhx.com/2019/08/22/A32-Python3-spider-C04/">https://www.itrhx.com/2019/08/22/A32-Python3-spider-C04/</a></p>]]></content>
    
    <summary type="html">
    
      Selenium 显式等待条件及其含义附表
    
    </summary>
    
      <category term="Python3 学习笔记" scheme="https://www.itrhx.com/categories/Python3-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
      <category term="Python3 经验" scheme="https://www.itrhx.com/categories/Python3-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/Python3-%E7%BB%8F%E9%AA%8C/"/>
    
    
      <category term="爬虫" scheme="https://www.itrhx.com/tags/%E7%88%AC%E8%99%AB/"/>
    
      <category term="Selenium" scheme="https://www.itrhx.com/tags/Selenium/"/>
    
  </entry>
  
  <entry>
    <title>Python3 爬虫学习笔记 C04</title>
    <link href="https://www.itrhx.com/2019/08/23/A32-Python3-spider-C04/"/>
    <id>https://www.itrhx.com/2019/08/23/A32-Python3-spider-C04/</id>
    <published>2019-08-23T01:28:22.327Z</published>
    <updated>2019-09-13T17:18:27.500Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><blockquote><center><font color="#1BC3FB" size="4">Python3 爬虫学习笔记第四章 —— 【自动化测试工具 Selenium】</font></center></blockquote><a id="more"></a><p>Selenium 是一个用于 Web 应用程序测试的工具。Selenium 测试直接运行在浏览器中，就像真正的用户在操作一样。支持的浏览器包括IE（7, 8, 9, 10, 11），Mozilla Firefox，Safari，Google Chrome，Opera等。利用它可以驱动浏览器执行特定的动作，如点击、下拉等操作，同时还可以获取浏览器当前呈现的页面的源代码，做到可见即可爬。对于一些 JavaScript 动态渲染的页面来说，此种抓取方式非常有效。<font color="#FF0000">本文重点以 Selenium 使用谷歌浏览器的 Webdriver 为例。</font></p><h1 id="【4-1】下载驱动"><a href="#【4-1】下载驱动" class="headerlink" title=" 【4.1】下载驱动"></a><font color="#FF0000"> 【4.1】下载驱动</font></h1><p>使用 Selenium 操作不同浏览器，需要不同浏览器相应的驱动支持：</p><table><thead><tr><th>浏览器</th><th>驱动名称</th><th>下载地址</th><th>备注</th></tr></thead><tbody><tr><td>谷歌浏览器</td><td>chromedriver</td><td><a href="http://chromedriver.storage.googleapis.com/index.html" target="_blank" rel="noopener">点击进入下载页面</a></td><td>需要根据自己浏览器的版本下载不同版本的驱动</td></tr><tr><td>火狐浏览器</td><td>geckodriver</td><td><a href="https://github.com/mozilla/geckodriver/releases/" target="_blank" rel="noopener">点击进入下载页面</a></td><td>需要根据自己的操作系统下载对应的驱动</td></tr><tr><td>IE</td><td>IEDriverServer</td><td><a href="http://selenium-release.storage.googleapis.com/index.html" target="_blank" rel="noopener">点击进入下载页面</a></td><td>根据自己 selenium 版本和系统版本下载对应版本的驱动， selenium 版本可以在cmd中输入<code>pip show selenium</code>查看</td></tr></tbody></table><h1 id="【4-2】声明浏览器对象"><a href="#【4-2】声明浏览器对象" class="headerlink" title=" 【4.2】声明浏览器对象"></a><font color="#FF0000"> 【4.2】声明浏览器对象</font></h1><p>不同浏览器的对象声明方法：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"></span><br><span class="line">browser = webdriver.Chrome()  <span class="comment"># 谷歌浏览器</span></span><br><span class="line">browser = webdriver.Firefox()  <span class="comment"># 火狐浏览器</span></span><br><span class="line">browser = webdriver.Edge()  <span class="comment"># Edge</span></span><br><span class="line">browser = webdriver.PhantomJS()  <span class="comment"># PhantomJS无界面浏览器</span></span><br><span class="line">browser = webdriver.Safari()  <span class="comment"># Safari浏览器</span></span><br></pre></td></tr></table></figure></p><h1 id="【4-3】访问页面"><a href="#【4-3】访问页面" class="headerlink" title=" 【4.3】访问页面"></a><font color="#FF0000"> 【4.3】访问页面</font></h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"></span><br><span class="line">path = <span class="string">r'F:\PycharmProjects\Python3爬虫\chromedriver.exe'</span></span><br><span class="line">browser = webdriver.Chrome(executable_path=path)</span><br><span class="line">browser.get(<span class="string">'https://www.itrhx.com'</span>)</span><br><span class="line">print(browser.page_source)</span><br><span class="line">browser.close()</span><br></pre></td></tr></table></figure><p>运行代码就会自动打开谷歌浏览器，实现了用 get() 方法访问 <a href="http://www.itrhx.com">www.itrhx.com</a> ，path 里面的内容是谷歌浏览器驱动的目录， r 表示不转义，使用真实字符。<code>print(browser.page_source)</code> 表示打印页面源代码</p><h1 id="【4-4】启动参数"><a href="#【4-4】启动参数" class="headerlink" title=" 【4.4】启动参数"></a><font color="#FF0000"> 【4.4】启动参数</font></h1><p>Chrome Options 是一个 Chrome 的参数对象，在此对象中使用 add_argument() 方法可以添加启动参数，添加完毕后可以在初始化 Webdriver 对象时将此 Options 对象传入，则可以实现以特定参数启动Chrome。<br>示例：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.chrome.options <span class="keyword">import</span> Options</span><br><span class="line"></span><br><span class="line">path = <span class="string">r'F:\PycharmProjects\Python3爬虫\chromedriver.exe'</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 实例化一个启动参数对象</span></span><br><span class="line">chrome_options = Options()</span><br><span class="line"><span class="comment"># 添加启动参数</span></span><br><span class="line">chrome_options.add_argument(<span class="string">'--window-size=1366,768'</span>)</span><br><span class="line"><span class="comment"># 将参数对象传入Chrome，则启动了一个设置了窗口大小的Chrome</span></span><br><span class="line">browser = webdriver.Chrome(executable_path=path, chrome_options=chrome_options)</span><br><span class="line">browser.get(<span class="string">'http://www.itrhx.com'</span>)</span><br></pre></td></tr></table></figure></p><p>这样就启动了一个1366x768分辨率的浏览器<br>常见的启动参数：</p><table><thead><tr><th style="text-align:center">启动参数</th><th style="text-align:center">作用</th></tr></thead><tbody><tr><td style="text-align:center">–user-agent=””</td><td style="text-align:center">设置请求头的 User-Agent</td></tr><tr><td style="text-align:center">–window-size=xxx, xxx</td><td style="text-align:center">设置浏览器分辨率</td></tr><tr><td style="text-align:center">–headless</td><td style="text-align:center">无界面运行</td></tr><tr><td style="text-align:center">–start-maximized</td><td style="text-align:center">最大化运行</td></tr><tr><td style="text-align:center">–incognito</td><td style="text-align:center">隐身模式</td></tr><tr><td style="text-align:center">–disable-javascript</td><td style="text-align:center">禁用javascript</td></tr><tr><td style="text-align:center">–disable-infobars</td><td style="text-align:center">禁用“浏览器正在被自动化程序控制”的提示</td></tr></tbody></table><p>所有的启动参数：<a href="https://peter.sh/experiments/chromium-command-line-switches/" target="_blank" rel="noopener">https://peter.sh/experiments/chromium-command-line-switches/</a></p><h1 id="【4-5】查找节点"><a href="#【4-5】查找节点" class="headerlink" title=" 【4.5】查找节点"></a><font color="#FF0000"> 【4.5】查找节点</font></h1><p>Selenium 可以驱动浏览器完成各种操作，比如填充表单、模拟点击等。要完成这些操作，实现要知道在哪里点击，哪里填充，这就是 Selenium 节点查找</p><h2 id="【4-5-1】查找单个节点"><a href="#【4-5-1】查找单个节点" class="headerlink" title=" 【4.5.1】查找单个节点"></a><font color="#FF0000"> 【4.5.1】查找单个节点</font></h2><p>所有获取单个节点的方法：</p><ul><li><p><font color="#FF0000">find_element_by_id  【通过元素的 id 来选择】</font><br>例：<code>&lt;div id=&#39;bdy-inner&#39;&gt;test&lt;/div&gt;</code>，查找：<code>driver.find_element_by_id(&#39;bdy-inner&#39;)</code></p></li><li><p><font color="#FF0000">find_element_by_name  【通过元素的 name 来选择】</font><br>例：<code>&lt;input name=&quot;username&quot; type=&quot;text&quot; /&gt;</code>，查找：<code>driver.find_element_by_name(&#39;password&#39;)</code></p></li><li><p><font color="#FF0000">find_element_by_xpath  【通过 xpath 选择】</font><br>例：<code>&lt;form id=&quot;loginForm&quot;&gt;</code>，查找：<code>driver.find_element_by_xpath(&quot;//form[@id=&#39;loginForm&#39;]&quot;)</code></p></li><li><p><font color="#FF0000">find_element_by_link_text  【通过链接地址选择】</font><br>例：<code>&lt;a href=&quot;continue.html&quot;&gt;continue&lt;/a&gt;</code>，查询：<code>driver.find_element_by_link_text(&#39;continue&#39;)</code></p></li><li><p><font color="#FF0000">find_element_by_partial_link_text  【通过链接的部分地址选择】</font><br>例：<code>&lt;a href=&quot;continue.html&quot;&gt;continue&lt;/a&gt;</code>，查询：<code>driver.find_element_by_link_text(&#39;cont&#39;)</code></p></li><li><p><font color="#FF0000">find_element_by_tag_name  【通过元素的名称选择】</font><br>例：<code>&lt;h1&gt;welcome&lt;h1&gt;</code>，查询：<code>driver.find_element_by_tag_name(&#39;h1&#39;)</code></p></li><li><p><font color="#FF0000">find_element_by_class_name  【通过元素的 class 选择】</font><br>例：<code>&lt;p class=&quot;content&quot;&gt;welcome to TRHX&#39;S BLOG!&lt;/p&gt;</code>，查询：<code>driver.find_element_by_class_name(&#39;content&#39;)</code></p></li><li><p><font color="#FF0000">find_element_by_css_selector  【通过元素的 class 选择】</font><br>例：<code>&lt;div class=&#39;bdy-inner&#39;&gt;test&lt;/div&gt;</code>，查询：<code>driver.find_element_by_css_selector(&#39;div.bdy-inner&#39;)</code></p></li><li><p><font color="#FF0000">find_element()  【通用方法，需要传递两个参数：查找方式 By 和值】</font><br>例：<code>driver.find_element_by_id(&#39;inner&#39;)</code> 等价于 <code>find_element(By.ID, inner)</code>，使用时需要<code>from selenium.webdriver.common.by import By</code></p></li></ul><p>示例：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"></span><br><span class="line">path = <span class="string">r'F:\PycharmProjects\Python3爬虫\chromedriver.exe'</span></span><br><span class="line">browser = webdriver.Chrome(executable_path=path)</span><br><span class="line">browser.get(<span class="string">'https://www.itrhx.com'</span>)</span><br><span class="line">blog_title = browser.find_elements_by_class_name((<span class="string">'title'</span>))</span><br><span class="line">print(blog_title[<span class="number">0</span>].text)</span><br><span class="line">browser.close()</span><br></pre></td></tr></table></figure></p><p>输出结果：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">TRHX<span class="string">'S BLOG</span></span><br></pre></td></tr></table></figure></p><h2 id="【4-5-2】查找多个节点"><a href="#【4-5-2】查找多个节点" class="headerlink" title=" 【4.5.2】查找多个节点"></a><font color="#FF0000"> 【4.5.2】查找多个节点</font></h2><p>所有获取多个节点的方法：（与查找单个节点的区别是 element 多加了个 s）</p><ul><li>find_elements_by_id</li><li>find_elements_by_name</li><li>find_elements_by_xpath</li><li>find_elements_by_link_text</li><li>find_elements_by_partial_link_text</li><li>find_elements_by_tag_name</li><li>find_elements_by_class_name</li><li>find_elements_by_css_selector</li><li>find_elements()</li></ul><p>示例：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.common.by <span class="keyword">import</span> By</span><br><span class="line"></span><br><span class="line">path = <span class="string">r'F:\PycharmProjects\Python3爬虫\chromedriver.exe'</span></span><br><span class="line">browser = webdriver.Chrome(executable_path=path)</span><br><span class="line">browser.get(<span class="string">'https://www.itrhx.com'</span>)</span><br><span class="line">article_title = browser.find_elements(By.XPATH, <span class="string">"//h2[@class='title']"</span>)</span><br><span class="line">print(article_title)</span><br><span class="line">browser.close()</span><br></pre></td></tr></table></figure></p><h1 id="【4-6】节点交互"><a href="#【4-6】节点交互" class="headerlink" title=" 【4.6】节点交互"></a><font color="#FF0000"> 【4.6】节点交互</font></h1><p>Selenium 可以驱动浏览器来执行一些操作，也就是说可以让浏览器模拟执行一些动作。称为节点交互，比较常见的用法有：</p><ul><li>send_keys：模拟按键输入</li><li>clear：清除元素的内容</li><li>click：单击元素</li><li>submit：提交表单</li></ul><p>示例：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.common.keys <span class="keyword">import</span> Keys</span><br><span class="line"></span><br><span class="line">path = <span class="string">r'F:\PycharmProjects\Python3爬虫\chromedriver.exe'</span></span><br><span class="line">browser = webdriver.Chrome(executable_path=path)</span><br><span class="line">browser.get(<span class="string">'https://www.itrhx.com'</span>)</span><br><span class="line">search = browser.find_element_by_xpath(<span class="string">'//div[@class="cover-wrapper"]/cover/div/form/input'</span>)</span><br><span class="line">search.send_keys(<span class="string">"Python"</span>)</span><br><span class="line">search.send_keys(Keys.ENTER)</span><br></pre></td></tr></table></figure></p><p>此处模拟了键盘，需要导入键盘类 Keys()，send_keys(Keys.ENTER)表示模拟回车键，程序首先打开 <a href="http://www.itrhx.com">www.itrhx.com</a> ，也就是我的博客，然后通过 xpath 找到搜索框，输入 Python 并回车，等待结果显示出来<br>更多节点交互动作：<a href="https://selenium-python.readthedocs.io/api.html#module-selenium.webdriver.remote.webelement" target="_blank" rel="noopener">https://selenium-python.readthedocs.io/api.html#module-selenium.webdriver.remote.webelement</a></p><h1 id="【4-7】动作链"><a href="#【4-7】动作链" class="headerlink" title=" 【4.7】动作链"></a><font color="#FF0000"> 【4.7】动作链</font></h1><p>Selenium 还有另外一些操作，它们没有特定的执行对象，比如鼠标拖曳、键盘按键等，这些动作用另一种方式来执行，那就是动作链。以一个拖曳实例为例：<a href="http://www.runoob.com/try/try.php?filename=jqueryui-api-droppable" target="_blank" rel="noopener">http://www.runoob.com/try/try.php?filename=jqueryui-api-droppable</a><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver <span class="keyword">import</span> ActionChains</span><br><span class="line"></span><br><span class="line">path = <span class="string">r'F:\PycharmProjects\Python3爬虫\chromedriver.exe'</span></span><br><span class="line">browser = webdriver.Chrome(executable_path=path)</span><br><span class="line">url = <span class="string">'http://www.runoob.com/try/try.php?filename=jqueryui-api-droppable'</span></span><br><span class="line">browser.get(url)</span><br><span class="line">browser.switch_to.frame(<span class="string">'iframeResult'</span>)</span><br><span class="line">source = browser.find_element_by_css_selector(<span class="string">'#draggable'</span>)</span><br><span class="line">target = browser.find_element_by_css_selector(<span class="string">'#droppable'</span>)</span><br><span class="line">actions = ActionChains(browser)</span><br><span class="line">actions.drag_and_drop(source, target)</span><br><span class="line">actions.perform()</span><br></pre></td></tr></table></figure></p><p>依次选中要拖曳的节点和拖曳到的目标节点，接着声明 ActionChains 对象并将其赋值为 actions 变量，然后通过调用 actions 变量的 drag_and_drop() 方法，再调用 perform() 方法执行动作，此时就完成了拖曳操作，更多动作链操作：<a href="https://selenium-python.readthedocs.io/api.html#module-selenium.webdriver.common.action_chains" target="_blank" rel="noopener">https://selenium-python.readthedocs.io/api.html#module-selenium.webdriver.common.action_chains</a></p><h1 id="【4-8】执行-JavaScript"><a href="#【4-8】执行-JavaScript" class="headerlink" title=" 【4.8】执行 JavaScript"></a><font color="#FF0000"> 【4.8】执行 JavaScript</font></h1><p>Selenium API 并没有提供执行 JavaScript 的方法，但是实际上是可以实现的。比如，下拉进度条，它可以直接模拟运行 JavaScript，此时使用 execute_script() 方法即可实现<br>示例：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"></span><br><span class="line">path = <span class="string">r'F:\PycharmProjects\Python3爬虫\chromedriver.exe'</span></span><br><span class="line">browser = webdriver.Chrome(executable_path=path)</span><br><span class="line">browser.get(<span class="string">'https://www.itrhx.com'</span>)</span><br><span class="line">browser.execute_script(<span class="string">'window.scrollTo(0, document.body.scrollHeight)'</span>)</span><br><span class="line">browser.execute_script(<span class="string">'alert("已到达最底端！")'</span>)</span><br></pre></td></tr></table></figure></p><p>以上代码实现了利用 execute_script() 方法将进度条下拉到最底部，然后弹出 alert 提示框。</p><h1 id="【4-9】禁用加载"><a href="#【4-9】禁用加载" class="headerlink" title=" 【4.9】禁用加载"></a><font color="#FF0000"> 【4.9】禁用加载</font></h1><p>使用Selenium 时，限制图片和 Javascript 执行，从而提高网页加载速度。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"></span><br><span class="line">path = <span class="string">r'F:\PycharmProjects\Python3爬虫\chromedriver.exe'</span></span><br><span class="line"></span><br><span class="line">options = webdriver.ChromeOptions()</span><br><span class="line">prefs = &#123;</span><br><span class="line">    <span class="string">'profile.default_content_setting_values'</span>: &#123;</span><br><span class="line">        <span class="string">'images'</span>: <span class="number">2</span>,</span><br><span class="line">        <span class="string">'notifications'</span> : <span class="number">2</span>,  <span class="comment"># 禁用弹窗</span></span><br><span class="line">        <span class="string">'javascript'</span>: <span class="number">2</span>  <span class="comment"># 2即为禁用的意思</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">options.add_experimental_option(<span class="string">'prefs'</span>, prefs)</span><br><span class="line">browser = webdriver.Chrome(executable_path=path, chrome_options=options)</span><br><span class="line">browser.get(<span class="string">'http://www.itrhx.com'</span>)</span><br></pre></td></tr></table></figure></p><h1 id="【4-10】获取节点信息"><a href="#【4-10】获取节点信息" class="headerlink" title=" 【4.10】获取节点信息"></a><font color="#FF0000"> 【4.10】获取节点信息</font></h1><p>通过 page_source 属性可以获取网页的源代码，然后可以使用解析库（如正则表达式、Beautiful Soup等）来提取相关信息，Selenium 已经提供了选择节点的方法，返回的是 WebElement 类型，它也有相关的方法和属性来直接提取节点信息，如属性、文本等。就不需要再次使用解析库来提取信息了</p><h1 id="【4-10-1】获取属性"><a href="#【4-10-1】获取属性" class="headerlink" title=" 【4.10.1】获取属性"></a><font color="#FF0000"> 【4.10.1】获取属性</font></h1><p>使用 get_attribute() 方法来获取节点的属性：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"></span><br><span class="line">path = <span class="string">r'F:\PycharmProjects\Python3爬虫\chromedriver.exe'</span></span><br><span class="line">browser = webdriver.Chrome(executable_path=path)</span><br><span class="line">url = <span class="string">'http://www.itrhx.com'</span></span><br><span class="line">browser.get(url)</span><br><span class="line">meta = browser.find_element_by_id(<span class="string">'header-meta'</span>)</span><br><span class="line">print(meta)</span><br><span class="line">print(meta.get_attribute(<span class="string">'class'</span>))</span><br></pre></td></tr></table></figure></p><p>输出结果：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;selenium.webdriver.remote.webelement.WebElement (session=<span class="string">"d03cdaa497441d2e2a5161139b4a7ea5"</span>, element=<span class="string">"83f8fff9-60d7-4e9a-ade3-a8e97c9f0844"</span>)&gt;</span><br><span class="line">meta</span><br></pre></td></tr></table></figure></p><h1 id="【4-10-2】获取文本值"><a href="#【4-10-2】获取文本值" class="headerlink" title=" 【4.10.2】获取文本值"></a><font color="#FF0000"> 【4.10.2】获取文本值</font></h1><p>每个 WebElement 节点都有 text 属性，直接调用这个属性就可以得到节点内部的文本信息，相当于 Beautiful Soup 的 get_text() 方法、pyquery 的 text() 方法<br>示例：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"></span><br><span class="line">path = <span class="string">r'F:\PycharmProjects\Python3爬虫\chromedriver.exe'</span></span><br><span class="line">browser = webdriver.Chrome(executable_path=path)</span><br><span class="line">url = <span class="string">'http://www.itrhx.com'</span></span><br><span class="line">browser.get(url)</span><br><span class="line">footer_info = browser.find_element_by_id(<span class="string">'footer'</span>)</span><br><span class="line">print(footer_info.text)</span><br></pre></td></tr></table></figure></p><p>输出结果：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Copyright <span class="number">2018</span><span class="number">-2019</span> TRHX<span class="string">'BLOG   |   鄂ICP备19003281号-4  |   本站已勉强存活了 376 天 20 小时 57 分 52 秒   |   站点地图  |   站长统计</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">PoweredHexo HostedGitHub DNRAliyun CDNjsDelivr ThemeMaterial X BY-NC-SA 4.0 Link996.ICU UV4898 PV22066 WordCount54.9k</span></span><br></pre></td></tr></table></figure></p><h1 id="【4-10-3】获取-ID、位置、标签名、大小"><a href="#【4-10-3】获取-ID、位置、标签名、大小" class="headerlink" title=" 【4.10.3】获取 ID、位置、标签名、大小"></a><font color="#FF0000"> 【4.10.3】获取 ID、位置、标签名、大小</font></h1><p>其他属性，比如 id 属性可以获取节点 id，location 属性可以获取该节点在页面中的相对位置，tag_name 属性可以获取标签名称，size 属性可以获取节点的大小等<br>示例：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"></span><br><span class="line">path = <span class="string">r'F:\PycharmProjects\Python3爬虫\chromedriver.exe'</span></span><br><span class="line">browser = webdriver.Chrome(executable_path=path)</span><br><span class="line">url = <span class="string">'http://www.itrhx.com'</span></span><br><span class="line">browser.get(url)</span><br><span class="line">readmore = browser.find_element_by_class_name(<span class="string">'readmore'</span>)</span><br><span class="line">print(readmore.id)</span><br><span class="line">print(readmore.location)</span><br><span class="line">print(readmore.tag_name)</span><br><span class="line">print(readmore.size)</span><br></pre></td></tr></table></figure></p><p>输出结果：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">7</span>df561d3<span class="number">-7</span>ea4<span class="number">-4</span>b90<span class="number">-96</span>aa<span class="number">-64044060</span>bb47</span><br><span class="line">&#123;<span class="string">'x'</span>: <span class="number">50</span>, <span class="string">'y'</span>: <span class="number">1063</span>&#125;</span><br><span class="line">div</span><br><span class="line">&#123;<span class="string">'height'</span>: <span class="number">39</span>, <span class="string">'width'</span>: <span class="number">465</span>&#125;</span><br></pre></td></tr></table></figure></p><h1 id="【4-11】延时等待"><a href="#【4-11】延时等待" class="headerlink" title=" 【4.11】延时等待"></a><font color="#FF0000"> 【4.11】延时等待</font></h1><p>在 Selenium 中，get() 方法会在网页框架加载结束后结束执行，某些页面有额外的 Ajax 请求，若此时立即获取 page_source，可能并不是浏览器完全加载完成的页面，这里需要延时等待一定时间，确保节点已经加载出来</p><h2 id="【4-11-1】隐式等待"><a href="#【4-11-1】隐式等待" class="headerlink" title=" 【4.11.1】隐式等待"></a><font color="#FF0000"> 【4.11.1】隐式等待</font></h2><p>当查找节点的时候，节点并没有立即出现，隐式等待将等待一段时间再查找该节点，使用 <code>implicitly_wait()</code> 方法可以实现隐式等待<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"></span><br><span class="line">path = <span class="string">r'F:\PycharmProjects\Python3爬虫\chromedriver.exe'</span></span><br><span class="line">browser = webdriver.Chrome(executable_path=path)</span><br><span class="line">browser.implicitly_wait(<span class="number">10</span>)</span><br><span class="line">browser.get(<span class="string">'https://www.itrhx.com'</span>)</span><br><span class="line">readmore = browser.find_element_by_class_name(<span class="string">'readmore'</span>)</span><br><span class="line">print(readmore)</span><br></pre></td></tr></table></figure></p><h2 id="【4-11-2】显式等待"><a href="#【4-11-2】显式等待" class="headerlink" title=" 【4.11.2】显式等待"></a><font color="#FF0000"> 【4.11.2】显式等待</font></h2><p>指定要查找的节点，然后指定一个最长等待时间。如果在规定时间内加载出来了这个节点，就立即返回查找的节点，果到了规定时间依然没有加载出该节点，则抛出超时异常<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.common.by <span class="keyword">import</span> By</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.support.ui <span class="keyword">import</span> WebDriverWait</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.support <span class="keyword">import</span> expected_conditions <span class="keyword">as</span> EC</span><br><span class="line"></span><br><span class="line">path = <span class="string">r'F:\PycharmProjects\Python3爬虫\chromedriver.exe'</span></span><br><span class="line">browser = webdriver.Chrome(executable_path=path)</span><br><span class="line">browser.implicitly_wait(<span class="number">10</span>)</span><br><span class="line">browser.get(<span class="string">'https://www.itrhx.com'</span>)</span><br><span class="line">wait = WebDriverWait(browser, <span class="number">10</span>)</span><br><span class="line">footer_info = wait.until(EC.presence_of_element_located((By.ID, <span class="string">'footer'</span>)))</span><br><span class="line">print(footer_info)</span><br></pre></td></tr></table></figure></p><p>引入 WebDriverWait 对象，指定最长等待时间，调用它的 until() 方法，传入要等待条件 expected_conditions。比如，这里传入了 presence_of_element_located 这个条件，代表节点出现的意思，其参数是节点的定位元组，也就是 ID 为 footer 的节点。</p><p>这样可以做到的效果就是，在 10 秒内如果 ID 为 footer 的节点成功加载出来，就返回该节点；如果超过 10 秒还没有加载出来，就抛出异常。</p><p>加载成功时输出结果：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;selenium.webdriver.remote.webelement.WebElement (session=<span class="string">"4ca7015891fded627ab680d9462e9361"</span>, element=<span class="string">"3a80235c-9824-420b-b827-662638422765"</span>)&gt;</span><br></pre></td></tr></table></figure></p><p>加载失败时输出结果：<br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">TimeoutException Traceback (most recent call last)</span><br><span class="line">&lt;ipython-input<span class="number">-4</span>-f3d73973b223&gt; <span class="keyword">in</span> &lt;module&gt;()</span><br><span class="line">      <span class="number">7</span> browser.get(<span class="string">'https://www.itrhx.com'</span>)</span><br><span class="line">      <span class="number">8</span> wait = WebDriverWait(browser, <span class="number">10</span>)</span><br><span class="line">----&gt; 9 input = wait.until(EC.presence_of_element_located((By.ID, 'footer')))</span><br></pre></td></tr></table></figure></p><h1 id="【4-12】Cookies"><a href="#【4-12】Cookies" class="headerlink" title=" 【4.12】Cookies"></a><font color="#FF0000"> 【4.12】Cookies</font></h1><p>使用 Selenium，可以方便地对 Cookies 进行获取、添加、删除等操作：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"></span><br><span class="line">path = <span class="string">r'F:\PycharmProjects\Python3爬虫\chromedriver.exe'</span></span><br><span class="line">browser = webdriver.Chrome(executable_path=path)</span><br><span class="line">browser.get(<span class="string">'https://www.zhihu.com/explore'</span>)</span><br><span class="line">print(browser.get_cookies())</span><br><span class="line">browser.add_cookie(&#123;<span class="string">'name'</span>: <span class="string">'TRHX'</span>, <span class="string">'domain'</span>: <span class="string">'www.zhihu.com'</span>, <span class="string">'value'</span>: <span class="string">'germey'</span>&#125;)</span><br><span class="line">print(browser.get_cookies())</span><br><span class="line">browser.delete_all_cookies()</span><br><span class="line">print(browser.get_cookies())</span><br></pre></td></tr></table></figure></p><p>访问知乎，加载完成后，浏览器已经生成了 Cookies。调用 get_cookies() 方法获取所有的 Cookies。然后再添加一个 Cookie，传入一个字典，有 name、domain 和 value 等内容。接下来，再次获取所有的 Cookies。可以发现，结果就多了这一项新加的 Cookie。最后，调用 delete_all_cookies() 方法删除所有的 Cookies。再重新获取，发现结果就为空了<br>输出结果：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[&#123;<span class="string">'domain'</span>: <span class="string">'zhihu.com'</span>, <span class="string">'expiry'</span>: <span class="number">1661065738.754333</span>, <span class="string">'httpOnly'</span>: <span class="keyword">False</span>, <span class="string">'name'</span>: <span class="string">'d_c0'</span>, <span class="string">'path'</span>: <span class="string">'/'</span>, <span class="string">'secure'</span>: <span class="keyword">False</span>, <span class="string">'value'</span>: <span class="string">'"AODi_Lod7g-PTrrXUgXb1N4MkbStCrbNlD4=|1566457741"'</span>&#125;, &#123;<span class="string">'domain'</span>: <span class="string">'zhihu.com'</span>, <span class="string">'httpOnly'</span>: <span class="keyword">False</span>, <span class="string">'name'</span>: <span class="string">'_xsrf'</span>, <span class="string">'path'</span>: <span class="string">'/'</span>, <span class="string">'secure'</span>: <span class="keyword">False</span>, <span class="string">'value'</span>: <span class="string">'aba68431-9daf-4b62-a67a-023c1a24f0e8'</span>&#125;, &#123;<span class="string">'domain'</span>: <span class="string">'zhihu.com'</span>, <span class="string">'expiry'</span>: <span class="number">1629529738.75427</span>, <span class="string">'httpOnly'</span>: <span class="keyword">False</span>, <span class="string">'name'</span>: <span class="string">'_zap'</span>, <span class="string">'path'</span>: <span class="string">'/'</span>, <span class="string">'secure'</span>: <span class="keyword">False</span>, <span class="string">'value'</span>: <span class="string">'b6f63cfc-a525-4ae6-a7bf-6384bd1e0548'</span>&#125;, &#123;<span class="string">'domain'</span>: <span class="string">'www.zhihu.com'</span>, <span class="string">'expiry'</span>: <span class="number">1566458637.754178</span>, <span class="string">'httpOnly'</span>: <span class="keyword">False</span>, <span class="string">'name'</span>: <span class="string">'tgw_l7_route'</span>, <span class="string">'path'</span>: <span class="string">'/'</span>, <span class="string">'secure'</span>: <span class="keyword">False</span>, <span class="string">'value'</span>: <span class="string">'116a747939468d99065d12a386ab1c5f'</span>&#125;]</span><br><span class="line">[&#123;<span class="string">'domain'</span>: <span class="string">'www.zhihu.com'</span>, <span class="string">'httpOnly'</span>: <span class="keyword">False</span>, <span class="string">'name'</span>: <span class="string">'TRHX'</span>, <span class="string">'path'</span>: <span class="string">'/'</span>, <span class="string">'secure'</span>: <span class="keyword">True</span>, <span class="string">'value'</span>: <span class="string">'germey'</span>&#125;, &#123;<span class="string">'domain'</span>: <span class="string">'zhihu.com'</span>, <span class="string">'expiry'</span>: <span class="number">1661065738.754333</span>, <span class="string">'httpOnly'</span>: <span class="keyword">False</span>, <span class="string">'name'</span>: <span class="string">'d_c0'</span>, <span class="string">'path'</span>: <span class="string">'/'</span>, <span class="string">'secure'</span>: <span class="keyword">False</span>, <span class="string">'value'</span>: <span class="string">'"AODi_Lod7g-PTrrXUgXb1N4MkbStCrbNlD4=|1566457741"'</span>&#125;, &#123;<span class="string">'domain'</span>: <span class="string">'zhihu.com'</span>, <span class="string">'httpOnly'</span>: <span class="keyword">False</span>, <span class="string">'name'</span>: <span class="string">'_xsrf'</span>, <span class="string">'path'</span>: <span class="string">'/'</span>, <span class="string">'secure'</span>: <span class="keyword">False</span>, <span class="string">'value'</span>: <span class="string">'aba68431-9daf-4b62-a67a-023c1a24f0e8'</span>&#125;, &#123;<span class="string">'domain'</span>: <span class="string">'zhihu.com'</span>, <span class="string">'expiry'</span>: <span class="number">1629529738.75427</span>, <span class="string">'httpOnly'</span>: <span class="keyword">False</span>, <span class="string">'name'</span>: <span class="string">'_zap'</span>, <span class="string">'path'</span>: <span class="string">'/'</span>, <span class="string">'secure'</span>: <span class="keyword">False</span>, <span class="string">'value'</span>: <span class="string">'b6f63cfc-a525-4ae6-a7bf-6384bd1e0548'</span>&#125;, &#123;<span class="string">'domain'</span>: <span class="string">'www.zhihu.com'</span>, <span class="string">'expiry'</span>: <span class="number">1566458637.754178</span>, <span class="string">'httpOnly'</span>: <span class="keyword">False</span>, <span class="string">'name'</span>: <span class="string">'tgw_l7_route'</span>, <span class="string">'path'</span>: <span class="string">'/'</span>, <span class="string">'secure'</span>: <span class="keyword">False</span>, <span class="string">'value'</span>: <span class="string">'116a747939468d99065d12a386ab1c5f'</span>&#125;]</span><br><span class="line">[&#123;<span class="string">'domain'</span>: <span class="string">'zhihu.com'</span>, <span class="string">'expiry'</span>: <span class="number">1644217741.489889</span>, <span class="string">'httpOnly'</span>: <span class="keyword">False</span>, <span class="string">'name'</span>: <span class="string">'_xsrf'</span>, <span class="string">'path'</span>: <span class="string">'/'</span>, <span class="string">'secure'</span>: <span class="keyword">False</span>, <span class="string">'value'</span>: <span class="string">'WNOjpDbNmz36B4nG1lzSAuPdTyORMX6J'</span>&#125;]</span><br></pre></td></tr></table></figure></p><h1 id="【4-13】前进与后退"><a href="#【4-13】前进与后退" class="headerlink" title=" 【4.13】前进与后退"></a><font color="#FF0000"> 【4.13】前进与后退</font></h1><p>使用 back() 方法后退，使用 forward() 方法前进，与浏览器的前进后退一样<br>示例：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line">path = <span class="string">r'F:\PycharmProjects\Python3爬虫\chromedriver.exe'</span></span><br><span class="line">browser = webdriver.Chrome(executable_path=path)</span><br><span class="line">browser.get(<span class="string">'https://www.itrhx.com/'</span>)</span><br><span class="line">browser.get(<span class="string">'https://www.baidu.com/'</span>)</span><br><span class="line">browser.get(<span class="string">'https://www.zhihu.com/'</span>)</span><br><span class="line">browser.back()</span><br><span class="line">time.sleep(<span class="number">1</span>)</span><br><span class="line">browser.forward()</span><br><span class="line">browser.close()</span><br></pre></td></tr></table></figure></p><h1 id="【4-14】选项卡"><a href="#【4-14】选项卡" class="headerlink" title=" 【4.14】选项卡"></a><font color="#FF0000"> 【4.14】选项卡</font></h1><p>和浏览器一样，在 Selenium 中也可以新建一个选项卡<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line">path = <span class="string">r'F:\PycharmProjects\Python3爬虫\chromedriver.exe'</span></span><br><span class="line">browser = webdriver.Chrome(executable_path=path)</span><br><span class="line">browser.get(<span class="string">'https://www.itrhx.com'</span>)</span><br><span class="line">browser.execute_script(<span class="string">'window.open()'</span>)</span><br><span class="line">print(browser.window_handles)</span><br><span class="line">browser.switch_to.window(browser.window_handles[<span class="number">1</span>])</span><br><span class="line">browser.get(<span class="string">'https://www.baidu.com'</span>)</span><br><span class="line">time.sleep(<span class="number">1</span>)</span><br><span class="line">browser.switch_to.window(browser.window_handles[<span class="number">0</span>])</span><br><span class="line">browser.get(<span class="string">'https://www.zhihu.com'</span>)</span><br></pre></td></tr></table></figure></p><p>首先访问我的博客，然后调用了 <code>execute_script()</code> 方法，传入 <code>window.open()</code> 这个 JavaScript 语句开启一个新的选项卡。再调用 <code>window_handles</code> 属性获取当前开启的所有选项卡，返回的是选项卡的代号列表。调用 <code>switch_to_window()</code> 方法来切换选项卡，其中参数是选项卡的代号。<br>输出的选项卡代号列表：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[<span class="string">'CDwindow-C9CADF1ED28CE44970655238552A8DCF'</span>, <span class="string">'CDwindow-538D7F81E467746B7BB2D9D82E2D036E'</span>]</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;center&gt;&lt;font color=&quot;#1BC3FB&quot; size=&quot;4&quot;&gt;Python3 爬虫学习笔记第四章 —— 【自动化测试工具 Selenium】&lt;/font&gt;&lt;/center&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="Python3 学习笔记" scheme="https://www.itrhx.com/categories/Python3-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
      <category term="Python3 爬虫" scheme="https://www.itrhx.com/categories/Python3-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/Python3-%E7%88%AC%E8%99%AB/"/>
    
    
      <category term="爬虫" scheme="https://www.itrhx.com/tags/%E7%88%AC%E8%99%AB/"/>
    
      <category term="Selenium" scheme="https://www.itrhx.com/tags/Selenium/"/>
    
  </entry>
  
  <entry>
    <title>Python3 爬虫学习笔记 C03</title>
    <link href="https://www.itrhx.com/2019/08/23/A31-Python3-spider-C03/"/>
    <id>https://www.itrhx.com/2019/08/23/A31-Python3-spider-C03/</id>
    <published>2019-08-23T01:28:22.178Z</published>
    <updated>2019-09-13T17:18:22.123Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><blockquote><center><font color="#1BC3FB" size="4">Python3 爬虫学习笔记第三章 ——【Ajax 数据爬取】</font></center></blockquote><a id="more"></a><h1 id="【3-1】Ajax-简介"><a href="#【3-1】Ajax-简介" class="headerlink" title=" 【3.1】Ajax 简介"></a><font color="#FF0000"> 【3.1】Ajax 简介</font></h1><p>Ajax — Asynchronous Javascript And XML（异步 JavaScript 和 XML），是指一种创建交互式网页应用的网页开发技术。可以在不重新加载整个网页的情况下，对网页的某部分进行更新。</p><h1 id="【3-2】解析真实地址提取"><a href="#【3-2】解析真实地址提取" class="headerlink" title=" 【3.2】解析真实地址提取"></a><font color="#FF0000"> 【3.2】解析真实地址提取</font></h1><p>以豆瓣电影动作片排行榜为例，地址为：<a href="https://movie.douban.com/typerank?type_name=%E5%8A%A8%E4%BD%9C&amp;type=5&amp;interval_id=100:90&amp;action=" target="_blank" rel="noopener">https://movie.douban.com/typerank?type_name=%E5%8A%A8%E4%BD%9C&amp;type=5&amp;interval_id=100:90&amp;action=</a> ，首先使用常用方法来爬取电影信息：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">url = <span class="string">'https://movie.douban.com/typerank?type_name=%E5%8A%A8%E4%BD%9C&amp;type=5&amp;interval_id=100:90&amp;action='</span></span><br><span class="line"></span><br><span class="line">headers = &#123;<span class="string">"User-Agent"</span>: <span class="string">"Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/58.0.3029.110 Safari/537.36 SE 2.X MetaSr 1.0"</span>&#125;</span><br><span class="line">response = requests.get(url, headers=headers)</span><br><span class="line"></span><br><span class="line">print(response.text)</span><br></pre></td></tr></table></figure></p><p>得到的数据里面我们并没有找到电影相关信息：<br><img src="https://cdn.jsdelivr.net/gh/TRHX/ImageHosting/ITRHX-PIC/A31/1.png" alt="1"><br>再次分析页面，发现鼠标下滑的时候，页面不刷新，URL 也不变，但是会加载新数据，那么此处就运用了 Ajax，可以使用抓包工具或者浏览器控制台来捕获 Ajax 接口，获取其真实地址，XHR 是 Ajax 特殊的请求类型，返回的是 json 数据，利用浏览器控制台过滤 XHR，随便点击一条请求，可以看到其 Request URL，也就是真实地址，点击 Preview 就可以看到返回的 json 数据。<br><img src="https://cdn.jsdelivr.net/gh/TRHX/ImageHosting/ITRHX-PIC/A31/2.png" alt="2"><br><img src="https://cdn.jsdelivr.net/gh/TRHX/ImageHosting/ITRHX-PIC/A31/3.png" alt="3"><br>同样，我们可以使用 Fiddler 抓包软件抓取 Ajax 接口：<br><img src="https://cdn.jsdelivr.net/gh/TRHX/ImageHosting/ITRHX-PIC/A31/4.png" alt="4"><br>分析其真实地址为：<a href="https://movie.douban.com/j/chart/top_list?type=5&amp;interval_id=100%3A90&amp;action=&amp;start=20&amp;limit=20" target="_blank" rel="noopener">https://movie.douban.com/j/chart/top_list?type=5&amp;interval_id=100%3A90&amp;action=&amp;start=20&amp;limit=20</a> ，多下滑几次，只有 start 参数发生了改变，观察变化可知：每一次页面将多出20个电影信息，start 为从第几个电影开始，由此就不难进行数据抓取了</p><p>代码：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">url = <span class="string">'https://movie.douban.com/j/chart/top_list?type=5&amp;interval_id=100%3A90&amp;action=&amp;'</span></span><br><span class="line"></span><br><span class="line">page = int(input(<span class="string">'请输入想要第几页的数据：'</span>))</span><br><span class="line">data = &#123;</span><br><span class="line"><span class="string">'start'</span>: (page - <span class="number">1</span>)*<span class="number">20</span>,</span><br><span class="line"><span class="string">'limit'</span>: <span class="string">'20'</span>,</span><br><span class="line">&#125;</span><br><span class="line">headers = &#123;</span><br><span class="line"><span class="string">'User-Agent'</span>: <span class="string">'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/73.0.3683.86 Safari/537.36'</span>,</span><br><span class="line">&#125;</span><br><span class="line">response = requests.get(url, params=data, headers=headers)</span><br><span class="line">print(response.text)</span><br></pre></td></tr></table></figure></p><p>运行代码即可得到电影排行信息：<br><img src="https://cdn.jsdelivr.net/gh/TRHX/ImageHosting/ITRHX-PIC/A31/5.png" alt="5"></p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;center&gt;&lt;font color=&quot;#1BC3FB&quot; size=&quot;4&quot;&gt;Python3 爬虫学习笔记第三章 ——【Ajax 数据爬取】&lt;/font&gt;&lt;/center&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="Python3 学习笔记" scheme="https://www.itrhx.com/categories/Python3-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
      <category term="Python3 爬虫" scheme="https://www.itrhx.com/categories/Python3-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/Python3-%E7%88%AC%E8%99%AB/"/>
    
    
      <category term="爬虫" scheme="https://www.itrhx.com/tags/%E7%88%AC%E8%99%AB/"/>
    
      <category term="Ajax" scheme="https://www.itrhx.com/tags/Ajax/"/>
    
  </entry>
  
  <entry>
    <title>Python3 爬虫学习笔记 C02</title>
    <link href="https://www.itrhx.com/2019/08/23/A30-Python3-spider-C02/"/>
    <id>https://www.itrhx.com/2019/08/23/A30-Python3-spider-C02/</id>
    <published>2019-08-23T01:28:22.053Z</published>
    <updated>2019-09-13T17:18:17.338Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><blockquote><center><font color="#1BC3FB" size="4">Python3 爬虫学习笔记第二章 ——【基本库 requests 的使用】</font></center></blockquote><a id="more"></a><h1 id="【2-1】-requests-简介"><a href="#【2-1】-requests-简介" class="headerlink" title=" 【2.1】 requests 简介"></a><font color="#FF0000"> 【2.1】 requests 简介</font></h1><p>在 Python 中有两种方式可以发送 HTTP 请求，分别是自带的 urllib 库和第三方的 requests 库</p><blockquote><p>requests 模块需要使用 pip install 命令安装安装，相比 urllib，它的 API 更加人性化，使用 requests 可以让 Cookies、登录验证、代理设置等操作更加简便，官网介绍：<a href="http://cn.python-requests.org" target="_blank" rel="noopener">http://cn.python-requests.org</a></p></blockquote><h1 id="【2-2】-requests-基本用法"><a href="#【2-2】-requests-基本用法" class="headerlink" title=" 【2.2】 requests 基本用法"></a><font color="#FF0000"> 【2.2】 requests 基本用法</font></h1><p>示例：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line">r = requests.get(<span class="string">'https://www.itrhx.com/'</span>)</span><br><span class="line">print(type(r))</span><br><span class="line">print(r.encoding)</span><br><span class="line">print(r.status_code)</span><br><span class="line">print(r.cookies)</span><br><span class="line">print(r.json)</span><br><span class="line">print(r.text)</span><br><span class="line">print(r.content)</span><br></pre></td></tr></table></figure></p><p>输出结果：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;<span class="class"><span class="keyword">class</span> '<span class="title">requests</span>.<span class="title">models</span>.<span class="title">Response</span>'&gt;</span></span><br><span class="line"><span class="class"><span class="title">utf</span>-8</span></span><br><span class="line"><span class="class">200</span></span><br><span class="line"><span class="class">&lt;<span class="title">RequestsCookieJar</span>[]&gt;</span></span><br><span class="line"><span class="class">&lt;<span class="title">bound</span> <span class="title">method</span> <span class="title">Response</span>.<span class="title">json</span> <span class="title">of</span> &lt;<span class="title">Response</span> [200]&gt;&gt;</span></span><br><span class="line"><span class="class">&lt;!<span class="title">DOCTYPE</span> <span class="title">html</span>&gt;</span></span><br><span class="line"><span class="class">&lt;<span class="title">html</span>&gt;</span></span><br><span class="line"><span class="class">&lt;<span class="title">head</span>&gt;</span></span><br><span class="line">  &lt;meta charset="utf-8"&gt;</span><br><span class="line">  ......</span><br></pre></td></tr></table></figure></p><ul><li>r.encoding：服务器内容使用的文本编码；</li><li>r.status_code：响应状态码，200 代表成功，4xx 代表客户端错误，5xx 服务器响应错误；</li><li>r.cookies：返回 Cookies；</li><li>r.json：Requests 内置 JSON 解码器；</li><li>r.text：服务器响应内容，根据响应头部的字符编码自动解码；</li><li>r.content：字节方式的响应体，自动解码 gzip 和 deflate 编码的响应。</li></ul><h1 id="【2-3】-requests-构建-GET-请求"><a href="#【2-3】-requests-构建-GET-请求" class="headerlink" title=" 【2.3】 requests 构建 GET 请求"></a><font color="#FF0000"> 【2.3】 requests 构建 GET 请求</font></h1><h2 id="【2-3-1】-基本用法"><a href="#【2-3-1】-基本用法" class="headerlink" title=" 【2.3.1】 基本用法"></a><font color="#FF0000"> 【2.3.1】 基本用法</font></h2><p>示例：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">data = &#123;</span><br><span class="line">    <span class="string">'name'</span>: <span class="string">'TRHX'</span>,</span><br><span class="line">    <span class="string">'age'</span>: <span class="string">'20'</span></span><br><span class="line">&#125;</span><br><span class="line">r = requests.get(<span class="string">"http://httpbin.org/get"</span>, params=data)</span><br><span class="line">print(<span class="string">'编码后的URL：'</span>, r.url)</span><br><span class="line">print(<span class="string">'字符串方式的响应体：'</span>, r.text)</span><br></pre></td></tr></table></figure></p><p>输出结果：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">编码后的URL： http://httpbin.org/get?name=TRHX&amp;age=20</span><br><span class="line">字符串方式的响应体： &#123;</span><br><span class="line">  <span class="string">"args"</span>: &#123;</span><br><span class="line">    <span class="string">"age"</span>: <span class="string">"20"</span>, </span><br><span class="line">    <span class="string">"name"</span>: <span class="string">"TRHX"</span></span><br><span class="line">  &#125;, </span><br><span class="line">  <span class="string">"headers"</span>: &#123;</span><br><span class="line">    <span class="string">"Accept"</span>: <span class="string">"*/*"</span>, </span><br><span class="line">    <span class="string">"Accept-Encoding"</span>: <span class="string">"gzip, deflate"</span>, </span><br><span class="line">    <span class="string">"Host"</span>: <span class="string">"httpbin.org"</span>, </span><br><span class="line">    <span class="string">"User-Agent"</span>: <span class="string">"python-requests/2.22.0"</span></span><br><span class="line">  &#125;, </span><br><span class="line">  <span class="string">"origin"</span>: <span class="string">"171.115.102.230, 171.115.102.230"</span>, </span><br><span class="line">  <span class="string">"url"</span>: <span class="string">"https://httpbin.org/get?name=TRHX&amp;age=20"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="【2-3-2】-二进制数据抓取"><a href="#【2-3-2】-二进制数据抓取" class="headerlink" title=" 【2.3.2】 二进制数据抓取"></a><font color="#FF0000"> 【2.3.2】 二进制数据抓取</font></h2><p>以抓取 GitHub 站点图标为例：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">r = requests.get(<span class="string">"https://github.com/favicon.ico"</span>)</span><br><span class="line"><span class="keyword">with</span> open(<span class="string">'favicon.ico'</span>, <span class="string">'wb'</span>) <span class="keyword">as</span> f:</span><br><span class="line">    f.write(r.content)</span><br></pre></td></tr></table></figure></p><p>该代码将会保存站点图标到本地，其他的，比如音频，视频文件都是由二进制码组成的，皆可使用该方法</p><h2 id="【2-3-3】-添加-headers"><a href="#【2-3-3】-添加-headers" class="headerlink" title=" 【2.3.3】 添加 headers"></a><font color="#FF0000"> 【2.3.3】 添加 headers</font></h2><p>headers 的作用：部分页面禁止 Python 爬虫对其进行爬取，而添加 headers 就可以模拟成浏览器取访问网站，实现数据的爬取，headers 可以在任意网页 F12 检查控制台里面找到，headers 最重要的是 “User-Agent” 字段</p><p><fancybox><br><img src="https://cdn.jsdelivr.net/gh/TRHX/ImageHosting/ITRHX-PIC/A30/Snipaste_2019-08-19_17-10-11.png" alt="01"><br></fancybox><br>以为例知乎，只有加了 headers 才能正常爬取，否则会返回 400 Bad Request 没有任何数据<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">headers = &#123;<span class="string">'User-Agent'</span>: <span class="string">'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/75.0.3770.142 Safari/537.36'</span></span><br><span class="line">&#125;</span><br><span class="line">r = requests.get(<span class="string">"https://www.zhihu.com/explore"</span>, headers=headers)</span><br><span class="line">print(r.text)</span><br></pre></td></tr></table></figure></p><h1 id="【2-4】-requests-构建-POST-请求"><a href="#【2-4】-requests-构建-POST-请求" class="headerlink" title=" 【2.4】 requests 构建 POST 请求"></a><font color="#FF0000"> 【2.4】 requests 构建 POST 请求</font></h1><p>示例：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">data = &#123;<span class="string">'name'</span>: <span class="string">'TRHX'</span>, <span class="string">'age'</span>: <span class="string">'20'</span>&#125;</span><br><span class="line">r = requests.post(<span class="string">"http://httpbin.org/post"</span>, data=data)</span><br><span class="line">print(r.text)</span><br></pre></td></tr></table></figure></p><p>输出结果：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="string">"args"</span>: &#123;&#125;, </span><br><span class="line">  <span class="string">"data"</span>: <span class="string">""</span>, </span><br><span class="line">  <span class="string">"files"</span>: &#123;&#125;, </span><br><span class="line">  <span class="string">"form"</span>: &#123;</span><br><span class="line">    <span class="string">"age"</span>: <span class="string">"22"</span>, </span><br><span class="line">    <span class="string">"name"</span>: <span class="string">"germey"</span></span><br><span class="line">  &#125;, </span><br><span class="line">  <span class="string">"headers"</span>: &#123;</span><br><span class="line">    <span class="string">"Accept"</span>: <span class="string">"*/*"</span>, </span><br><span class="line">    <span class="string">"Accept-Encoding"</span>: <span class="string">"gzip, deflate"</span>, </span><br><span class="line">    <span class="string">"Content-Length"</span>: <span class="string">"18"</span>, </span><br><span class="line">    <span class="string">"Content-Type"</span>: <span class="string">"application/x-www-form-urlencoded"</span>, </span><br><span class="line">    <span class="string">"Host"</span>: <span class="string">"httpbin.org"</span>, </span><br><span class="line">    <span class="string">"User-Agent"</span>: <span class="string">"python-requests/2.22.0"</span></span><br><span class="line">  &#125;, </span><br><span class="line">  <span class="string">"json"</span>: null, </span><br><span class="line">  <span class="string">"origin"</span>: <span class="string">"171.115.102.230, 171.115.102.230"</span>, </span><br><span class="line">  <span class="string">"url"</span>: <span class="string">"https://httpbin.org/post"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>有关 POST 和 GET 两种请求的一些区别：</p><ul><li>POST 更加安全，不会作为 URL 的一部分，不会被缓存，保存在服务器日志、以及浏览器浏览记录中；</li><li>POST 发送的数据更大，GET 有 URL 长度限制；</li><li>POST 可以发送更多的数据类型，GET 只能发送 ASCII 字符；</li><li>POST 比 GET 慢；</li><li>POST 查询参数在 WebForms 保存，GET 查询参数在 QueryString 保存；</li><li>POST 用数据的修改和写入，GET 一般用于搜索排序和筛选之类的操作。</li></ul><h1 id="【2-5】-requests-高级用法"><a href="#【2-5】-requests-高级用法" class="headerlink" title=" 【2.5】 requests 高级用法"></a><font color="#FF0000"> 【2.5】 requests 高级用法</font></h1><h2 id="【2-5-1】-上传文件"><a href="#【2-5-1】-上传文件" class="headerlink" title=" 【2.5.1】 上传文件"></a><font color="#FF0000"> 【2.5.1】 上传文件</font></h2><p>示例：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">files = &#123;<span class="string">'file'</span>: open(<span class="string">'test.png'</span>, <span class="string">'rb'</span>)&#125;</span><br><span class="line">r = requests.post(<span class="string">'http://httpbin.org/post'</span>, files=files)</span><br><span class="line">print(r.text)</span><br></pre></td></tr></table></figure></p><p>输出结果：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="string">"args"</span>: &#123;&#125;, </span><br><span class="line">  <span class="string">"data"</span>: <span class="string">""</span>, </span><br><span class="line">  <span class="string">"files"</span>: &#123;</span><br><span class="line">    <span class="string">"file"</span>: <span class="string">"data:application/octet-stream;base64,iVBOR......"</span></span><br><span class="line">  &#125;, </span><br><span class="line">  <span class="string">"form"</span>: &#123;&#125;, </span><br><span class="line">  <span class="string">"headers"</span>: &#123;</span><br><span class="line">    <span class="string">"Accept"</span>: <span class="string">"*/*"</span>, </span><br><span class="line">    <span class="string">"Accept-Encoding"</span>: <span class="string">"gzip, deflate"</span>, </span><br><span class="line">    <span class="string">"Content-Length"</span>: <span class="string">"81383"</span>, </span><br><span class="line">    <span class="string">"Content-Type"</span>: <span class="string">"multipart/form-data; boundary=e36a8686cd77c79dc02bfe9d1b010f08"</span>, </span><br><span class="line">    <span class="string">"Host"</span>: <span class="string">"httpbin.org"</span>, </span><br><span class="line">    <span class="string">"User-Agent"</span>: <span class="string">"python-requests/2.22.0"</span></span><br><span class="line">  &#125;, </span><br><span class="line">  <span class="string">"json"</span>: null, </span><br><span class="line">  <span class="string">"origin"</span>: <span class="string">"171.115.102.230, 171.115.102.230"</span>, </span><br><span class="line">  <span class="string">"url"</span>: <span class="string">"https://httpbin.org/post"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="【2-5-2】-使用-Cookies"><a href="#【2-5-2】-使用-Cookies" class="headerlink" title=" 【2.5.2】 使用 Cookies"></a><font color="#FF0000"> 【2.5.2】 使用 Cookies</font></h2><p>对于需要登录后才能获取数据的网页，可以将账号登录的 Cookies 添加到 headers 来实现网页登录爬取，Cookies 可以抓包获取，代码示例：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">headers = &#123;</span><br><span class="line">    <span class="string">'Cookie'</span>: <span class="string">'xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx'</span>,</span><br><span class="line">    <span class="string">'Host'</span>: <span class="string">'www.zhihu.com'</span>,</span><br><span class="line">    <span class="string">'User-Agent'</span>: <span class="string">'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/75.0.3770.142 Safari/537.36'</span>,</span><br><span class="line">&#125;</span><br><span class="line">r = requests.get(<span class="string">'https://www.zhihu.com'</span>, headers=headers)</span><br><span class="line">print(r.text)</span><br></pre></td></tr></table></figure></p><h2 id="【2-5-3】-会话维持"><a href="#【2-5-3】-会话维持" class="headerlink" title=" 【2.5.3】 会话维持"></a><font color="#FF0000"> 【2.5.3】 会话维持</font></h2><ul><li><p>背景介绍：利用 get() 或者 post() 方法来模拟网页请求，相当于是不同的会话，可以理解为用两个浏览器打开了不同的网页；</p></li><li><p>运用场景：首先使用 post() 方法登录网页，然后再使用 get() 方法请求某个页面信息，如果不利用会话维持，将无法获取页面数据</p></li><li><p>维持方法：①两次请求设置一样的 cookies，缺点：繁琐；②使用 Session 对象。</p><p>Session 对象使用示例：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"> <span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">s = requests.Session()</span><br><span class="line">s.get(<span class="string">'http://httpbin.org/cookies/set/number/123456789'</span>)</span><br><span class="line">r = s.get(<span class="string">'http://httpbin.org/cookies'</span>)</span><br><span class="line">print(r.text)</span><br></pre></td></tr></table></figure></li></ul><p>输出结果成功获取到设置的 cookies：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="string">"cookies"</span>: &#123;</span><br><span class="line">    <span class="string">"number"</span>: <span class="string">"123456789"</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="【2-5-4】-SSL-证书验证"><a href="#【2-5-4】-SSL-证书验证" class="headerlink" title=" 【2.5.4】 SSL 证书验证"></a><font color="#FF0000"> 【2.5.4】 SSL 证书验证</font></h2><blockquote><p>SSL 证书是数字证书的一种，由受信任的数字证书颁发机构 CA 在验证服务器身份后颁发，具有服务器身份验证和数据传输加密功能，网站带有 HTTPS 就表明有 SSL 证书</p></blockquote><p>requests 提供了证书验证的功能。当发送 HTTP 请求的时候，它会检查 SSL 证书，verify 参数可以控制是否检查此证书。如果不加 verify 参数，默认为 True，会自动验证。当一个页面的 SSL 证书没有被官方机构认证时，打开页面就会提示“您的连接不是私密连接”，如果没有设置 verify 参数，将会报以下错误：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">requests.exceptions.SSLError: (<span class="string">"bad handshake: Error([('SSL routines', 'tls_process_server_certificate', 'certificate verify failed')],)"</span>,)</span><br></pre></td></tr></table></figure></p><p>设置 verify 参数代码示例：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">response = requests.get(<span class="string">'https://www.itrhx.com'</span>, verify=<span class="keyword">False</span>)</span><br><span class="line">print(response.text)</span><br></pre></td></tr></table></figure></p><h2 id="【2-5-5】-设置代理"><a href="#【2-5-5】-设置代理" class="headerlink" title=" 【2.5.5】 设置代理"></a><font color="#FF0000"> 【2.5.5】 设置代理</font></h2><p>为什么要设置代理：某些网页有反爬虫机制，频繁请求网页就会出现验证码等，还有可能直接封掉 IP，导致爬取失败；这种情况下就可以设置 proxies 参数。<br>示例：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">proxies = &#123;</span><br><span class="line">  <span class="string">'http'</span>: <span class="string">'http://10.10.1.10:1010'</span>,</span><br><span class="line">  <span class="string">'https'</span>: <span class="string">'http://10.10.1.10:1020'</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">requests.get(<span class="string">'https://www.itrhx.com'</span>, proxies=proxies)</span><br></pre></td></tr></table></figure></p><p>免费代理可在<a href="https://www.xicidaili.com/" target="_blank" rel="noopener">西刺代理</a>找到</p><h2 id="【2-5-6】-超时设置"><a href="#【2-5-6】-超时设置" class="headerlink" title=" 【2.5.6】 超时设置"></a><font color="#FF0000"> 【2.5.6】 超时设置</font></h2><p>与 urllib.request.urlopen() 类似，requests 也可以设置 timeout 参数，请求分为两个阶段：连接和读取</p><p>设置连接和读取时间总和：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">r = requests.get(<span class="string">'https://www.itrhx.com'</span>, timeout=<span class="number">1</span>)</span><br><span class="line">print(r.status_code)</span><br></pre></td></tr></table></figure><p>分别设置连接和读取时间：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">r = requests.get(<span class="string">'https://www.itrhx.com'</span>, timeout=(<span class="number">5</span>, <span class="number">10</span>))</span><br><span class="line">print(r.status_code)</span><br></pre></td></tr></table></figure></p><p>永久等待：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line"><span class="comment"># 两种方法实现</span></span><br><span class="line"><span class="comment"># r = requests.get('https://www.itrhx.com')</span></span><br><span class="line">r = requests.get(<span class="string">'https://www.itrhx.com'</span>, timeout=<span class="keyword">None</span>)</span><br><span class="line">print(r.status_code)</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;center&gt;&lt;font color=&quot;#1BC3FB&quot; size=&quot;4&quot;&gt;Python3 爬虫学习笔记第二章 ——【基本库 requests 的使用】&lt;/font&gt;&lt;/center&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="Python3 学习笔记" scheme="https://www.itrhx.com/categories/Python3-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
      <category term="Python3 爬虫" scheme="https://www.itrhx.com/categories/Python3-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/Python3-%E7%88%AC%E8%99%AB/"/>
    
    
      <category term="爬虫" scheme="https://www.itrhx.com/tags/%E7%88%AC%E8%99%AB/"/>
    
      <category term="requests" scheme="https://www.itrhx.com/tags/requests/"/>
    
  </entry>
  
  <entry>
    <title>Python3 爬虫学习笔记 C01</title>
    <link href="https://www.itrhx.com/2019/08/23/A29-Python3-spider-C01/"/>
    <id>https://www.itrhx.com/2019/08/23/A29-Python3-spider-C01/</id>
    <published>2019-08-23T01:28:21.841Z</published>
    <updated>2019-09-13T17:18:08.683Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><blockquote><center><font color="#1BC3FB" size="4">Python3 爬虫学习笔记第一章 ——【基本库 urllib 的使用】</font></center></blockquote><a id="more"></a><h1 id="【1-1】-urllib-简介"><a href="#【1-1】-urllib-简介" class="headerlink" title=" 【1.1】 urllib 简介"></a><font color="#FF0000"> 【1.1】 urllib 简介</font></h1><p>在 Python 中有两种方式可以发送 HTTP 请求，分别是自带的 urllib 库和第三方的 requests 库</p><blockquote><p>urllib 库：Python 内置的 HTTP 请求库，无需额外安装即可使用；Python 2 中有 urllib 和 urllib2 两个库来实现请求的发送，Python 3 中统一为 urllib。官方文档：<a href="https://docs.python.org/3/library/urllib.html" target="_blank" rel="noopener">https://docs.python.org/3/library/urllib.html</a></p></blockquote><font color="#FF0000">urllib 所包含的常用模块：</font><ul><li>urllib.request：模拟发送请求；</li><li>urllib.error：异常处理模块，用于捕获异常；</li><li>urllib.parse：解析、拆分、合并URL；</li><li>urllib.robotparser：读取网站的 robots.txt 文件，判断哪些内容可以爬取。</li></ul><font color="#FF0000">urllib.request 所包含的常用方法：</font><ul><li>urllib.request.urlopen()：打开网址URL，这可以是一个字符串或一个 Request对象；</li><li>urllib.request.Request()：在请求的时候传入一些 headers 等信息；</li><li>urllib.request.urlretrieve()：将获取的URL的内容写到文件目录中去。</li></ul><font color="#FF0000">urllib.error 所包含的两个异常：</font><ul><li>URLError：继承自 OSError 类，是 error 异常模块的基类，由 request 模块产生的异常都可以通过捕获这个类来处理。</li><li>HTTPError：是 URLError 的子类，专门用来处理 HTTP 请求错误，比如认证请求失败等。</li></ul><font color="#FF0000">urllib.parse 所包含的常用方法：</font><ul><li>urllib.parse.urlencode()：将字典参数序列化为 GET 请求参数；</li><li>urllib.parse.parse_qs()：将 GET 请求参数反序列化转回字典；</li><li>urllib.parse.parse_qsl()：将参数转化为元组组成的列表；</li><li>urllib.parse.urlparse()：对 URL 进行分段（返回6个结果）；</li><li>urllib.parse.urlunparse()：对 URL 进行组合（长度必须为6）；</li><li>urllib.parse.urlsplit()：对 URL 进行分段（不单独解析params部分，返回5个结果）；</li><li>urllib.parse.urlunsplit()：对 URL 进行组合（长度必须为5）；</li><li>urllib.parse.urljoin()：对 URL 进行组合（没有长度限制，给定两个参数，自动分析 scheme、netloc 和 path 这 3 个内容并对新链接缺失的部分进行补充，最后返回结果）；</li><li>urllib.parse.quote()：将内容转化为 URL 编码格式；</li><li>urllib.parse.unquote()：对 URL 进行解码。</li></ul><font color="#FF0000">urllib.robotparser 所包含的类：</font><ul><li>RobotFileParser：根据网站的 robots.txt 文件来判断一个爬取爬虫是否有权限来爬取这个网页</li></ul><h1 id="【1-2】-urllib-request-发送请求"><a href="#【1-2】-urllib-request-发送请求" class="headerlink" title=" 【1.2】 urllib.request 发送请求"></a><font color="#FF0000"> 【1.2】 urllib.request 发送请求</font></h1><h2 id="【1-2-1】-urllib-request-urlopen"><a href="#【1-2-1】-urllib-request-urlopen" class="headerlink" title="【1.2.1】 urllib.request.urlopen()"></a><font color="#FF0000">【1.2.1】 urllib.request.urlopen()</font></h2><h3 id="【1-2-1-1】-基本使用方法"><a href="#【1-2-1-1】-基本使用方法" class="headerlink" title="【1.2.1.1】 基本使用方法"></a><font color="#FF0000">【1.2.1.1】 基本使用方法</font></h3><p>urlopen() 函数的 API：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">urllib.request.urlopen(url, data=<span class="keyword">None</span>, [timeout,]*, cafile=<span class="keyword">None</span>, capath=<span class="keyword">None</span>, cadefault=<span class="keyword">False</span>, context=<span class="keyword">None</span>)</span><br></pre></td></tr></table></figure></p><p>基本使用：运行以下代码可得到 <a href="https://www.itrhx.com/">https://www.itrhx.com/</a> 的网页源代码：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> urllib.request</span><br><span class="line"></span><br><span class="line">response = urllib.request.urlopen(<span class="string">'https://www.itrhx.com/'</span>)</span><br><span class="line">print(response.read().decode(<span class="string">'utf-8'</span>))</span><br></pre></td></tr></table></figure></p><p>输出响应对象的类型和属性：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> urllib.request</span><br><span class="line"></span><br><span class="line">response = urllib.request.urlopen(<span class="string">'https://www.itrhx.com/'</span>)</span><br><span class="line">print(type(response))            <span class="comment"># 响应类型</span></span><br><span class="line">print(response.status)           <span class="comment"># 返回结果的状态码，200代表请求成功</span></span><br><span class="line">print(response.getheaders())       <span class="comment"># 响应的头信息</span></span><br><span class="line">print(response.getheader(<span class="string">'Server'</span>))  <span class="comment"># 获取响应头的 server 值</span></span><br></pre></td></tr></table></figure></p><p>运行结果：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;<span class="class"><span class="keyword">class</span> '<span class="title">http</span>.<span class="title">client</span>.<span class="title">HTTPResponse</span>'&gt;</span></span><br><span class="line"><span class="class">200</span></span><br><span class="line">[('Content-Type', 'text/html; charset=utf-8'), ('Server', 'GitHub.com'), ('Last-Modified', 'Sat, 17 Aug 2019 12:16:48 GMT'), ('ETag', '"5d57f030-10863"'), ('Access-Control-Allow-Origin', '*'), ('Expires', 'Sat, 17 Aug 2019 19:41:25 GMT'), ('Cache-Control', 'max-age=600'), ('X-Proxy-Cache', 'MISS'), ('X-GitHub-Request-Id', 'C748:735D:5B7461:619B95:5D58560B'), ('Content-Length', '67683'), ('Accept-Ranges', 'bytes'), ('Date', 'Sun, 18 Aug 2019 13:28:44 GMT'), ('Via', '1.1 varnish'), ('Age', '228'), ('Connection', 'close'), ('X-Served-By', 'cache-tyo19931-TYO'), ('X-Cache', 'HIT'), ('X-Cache-Hits', '1'), ('X-Timer', 'S1566134924.190474,VS0,VE0'), ('Vary', 'Accept-Encoding'), ('X-Fastly-Request-ID', '25a69f8130fc9cae412d28990a724543d7d05e8b')]</span><br><span class="line">GitHub.com</span><br></pre></td></tr></table></figure></p><h3 id="【1-2-1-2】-添加参数"><a href="#【1-2-1-2】-添加参数" class="headerlink" title="【1.2.1.2】 添加参数"></a><font color="#FF0000">【1.2.1.2】 添加参数</font></h3><p>根据 urlopen() 函数的 API 可知，除了最基本的 URL 参数以外，我们还可以传递其他内容，比如 data（附加数据）、timeout（超时时间）等，以下用 data 和 timeout 参数举例说明。</p><h4 id="●-data-参数"><a href="#●-data-参数" class="headerlink" title="● data 参数"></a><font color="#FF0000">● data 参数</font></h4><p>如果要添加 data 参数，需要使用 bytes 方法将参数转化为字节流编码格式的内容，即 bytes 类型。另外，如果传递了这个参数，则它的请求方式就不再是 GET 方式，而是 POST 方式。代码示例：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> urllib.parse</span><br><span class="line"><span class="keyword">import</span> urllib.request</span><br><span class="line"></span><br><span class="line">data = bytes(urllib.parse.urlencode(&#123;<span class="string">'word'</span>: <span class="string">'hello'</span>&#125;), encoding=<span class="string">'utf8'</span>)</span><br><span class="line">response = urllib.request.urlopen(<span class="string">'http://httpbin.org/post'</span>, data=data)</span><br><span class="line">print(response.read())</span><br></pre></td></tr></table></figure></p><p>httpbin.org 站点提供 HTTP 请求测试，<a href="http://httpbin.org/post" target="_blank" rel="noopener">http://httpbin.org/post</a> 用于测试 POST 请求，示例中传递一个值为 hello 的 word 参数。使用 bytes 方法，将其转码成 bytes（字节流）类型。该方法的第一个参数需要是 str（字符串）类型，需要用 urllib.parse 模块里的 urlencode 方法来将参数字典转化为字符串；第二个参数指定编码格式为 utf8，运行结果：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">b'&#123;</span></span><br><span class="line"><span class="string">"args": &#123;&#125;,</span></span><br><span class="line"><span class="string">"data": "", </span></span><br><span class="line"><span class="string">"files": &#123;&#125;,</span></span><br><span class="line"><span class="string">"form": &#123;</span></span><br><span class="line"><span class="string">"word": "hello"</span></span><br><span class="line"><span class="string">&#125;,</span></span><br><span class="line"><span class="string">"headers": &#123;</span></span><br><span class="line"><span class="string">"Accept-Encoding": "identity", </span></span><br><span class="line"><span class="string">"Content-Length": "10",</span></span><br><span class="line"><span class="string">"Content-Type": "application/x-www-form-urlencoded",</span></span><br><span class="line"><span class="string">"Host": "httpbin.org",</span></span><br><span class="line"><span class="string">"User-Agent": "Python-urllib/3.6"</span></span><br><span class="line"><span class="string">&#125;, </span></span><br><span class="line"><span class="string">"json": null, </span></span><br><span class="line"><span class="string">"origin": "171.115.101.10, 171.115.101.10", </span></span><br><span class="line"><span class="string">"url": "https://httpbin.org/post"</span></span><br><span class="line"><span class="string">&#125;'</span></span><br></pre></td></tr></table></figure></p><h4 id="●-timeout-参数"><a href="#●-timeout-参数" class="headerlink" title="● timeout 参数"></a><font color="#FF0000">● timeout 参数</font></h4><p>举例：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> urllib.request</span><br><span class="line"></span><br><span class="line">response = urllib.request.urlopen(<span class="string">'http://httpbin.org/get'</span>, timeout=<span class="number">0.1</span>)  </span><br><span class="line">print(response.read())</span><br></pre></td></tr></table></figure></p><p>运行结果：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line">During handling of the above exception, another exception occurred:</span><br><span class="line"></span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">"C:/Users/Lenovo/Desktop/1.py"</span>, line <span class="number">2</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">    response = urllib.request.urlopen(<span class="string">'http://httpbin.org/get'</span>, timeout=<span class="number">0.1</span>)</span><br><span class="line"> ...</span><br><span class="line">urllib.error.URLError: &lt;urlopen error timed out&gt;</span><br></pre></td></tr></table></figure></p><p>timeout 设置为0.1，0.1秒过后服务器没有响应，便会抛出 URLError 异常<br>进阶：使用 try except 语句抛出异常</p><h2 id="【1-2-2】-urllib-request-Request"><a href="#【1-2-2】-urllib-request-Request" class="headerlink" title="【1.2.2】 urllib.request.Request()"></a><font color="#FF0000">【1.2.2】 urllib.request.Request()</font></h2><p>Request() 方法可以在请求的时候传入一些 data、headers 等信息<br>Request() 的构造方法：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">urllib</span>.<span class="title">request</span>.<span class="title">Request</span><span class="params">(url, data=None, headers=&#123;&#125;, origin_req_host=None, unverifiable=False, method=None)</span></span></span><br></pre></td></tr></table></figure></p><p>构造方法各个参数的解释：</p><ul><li><p>url：用于请求 URL，这是必传参数，其他都是可选参数。</p></li><li><p>data：如果要传，必须传 bytes（字节流）类型的。如果它是字典，可以先用 urllib.parse 模块里的 urlencode() 编码。</p></li><li><p>headers：是一个字典，它就是请求头，可以在构造请求时通过 headers 参数直接构造，也可以通过调用请求实例的 add_header() 方法添加。添加请求头最常用的用法就是通过修改 User-Agent 来伪装浏览器，默认的 User-Agent 是 Python-urllib，我们可以通过修改它来伪装浏览器。</p></li><li><p>origin_req_host：指的是请求方的 host 名称或者 IP 地址。</p></li><li><p>unverifiable：表示这个请求是否是无法验证的，默认是 False，意思就是说用户没有足够权限来选择接收这个请求的结果。例如，我们请求一个 HTML 文档中的图片，但是我们没有自动抓取图像的权限，这时 unverifiable 的值就是 True。</p></li><li><p>method：是一个字符串，用来指示请求使用的方法，比如 GET、POST 和 PUT 等。</p></li></ul><p>简单举例：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> urllib.request</span><br><span class="line"><span class="keyword">import</span> urllib.parse</span><br><span class="line"></span><br><span class="line">url = <span class="string">'http://www.baidu.com/'</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 定制要伪装的头部</span></span><br><span class="line">headers = &#123;</span><br><span class="line">    <span class="string">'User-Agent'</span>: <span class="string">'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/73.0.3683.86 Safari/537.36'</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment"># 构建请求对象</span></span><br><span class="line">request = urllib.request.Request(url=url, headers=headers)</span><br><span class="line"><span class="comment"># 发送请求</span></span><br><span class="line">response = urllib.request.urlopen(request)</span><br><span class="line">print(response.read().decode())</span><br></pre></td></tr></table></figure></p><h2 id="【1-2-3】-urllib-request-urlretrieve"><a href="#【1-2-3】-urllib-request-urlretrieve" class="headerlink" title="【1.2.3】 urllib.request.urlretrieve()"></a><font color="#FF0000">【1.2.3】 urllib.request.urlretrieve()</font></h2><p>将获取到的 URL 内容保存到当前文件夹，简单举例：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> urllib.request</span><br><span class="line"></span><br><span class="line">url = <span class="string">'https://www.itrhx.com/images/trhx.png'</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># response = urllib.request.urlopen(image_url)</span></span><br><span class="line"><span class="comment"># with open('trhx.png', 'wb') as fp:</span></span><br><span class="line"><span class="comment">#    fp.write(response.read())</span></span><br><span class="line"></span><br><span class="line">urllib.request.urlretrieve(url, <span class="string">'trhx.png'</span>)</span><br></pre></td></tr></table></figure></p><h1 id="【1-3】-urllib-error-异常处理"><a href="#【1-3】-urllib-error-异常处理" class="headerlink" title=" 【1.3】 urllib.error 异常处理"></a><font color="#FF0000"> 【1.3】 urllib.error 异常处理</font></h1><h2 id="【1-3-1】-URLError"><a href="#【1-3-1】-URLError" class="headerlink" title="【1.3.1】 URLError"></a><font color="#FF0000">【1.3.1】 URLError</font></h2><p>如果打开一个不存在的页面，就会出现 URLError 错误，该错误有一个 reason 属性，用于返回错误的原因。简单举例：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> urllib <span class="keyword">import</span> request, error  </span><br><span class="line"><span class="keyword">try</span>:  </span><br><span class="line">    response = request.urlopen(<span class="string">'https://www.itrhx.com/index/'</span>)  </span><br><span class="line"><span class="keyword">except</span> error.URLError <span class="keyword">as</span> e:  </span><br><span class="line">    print(e.reason)</span><br></pre></td></tr></table></figure></p><p>输出结果：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Not Found</span><br></pre></td></tr></table></figure></p><h2 id="【1-3-2】-HTTPError"><a href="#【1-3-2】-HTTPError" class="headerlink" title="【1.3.2】 HTTPError"></a><font color="#FF0000">【1.3.2】 HTTPError</font></h2><p>URLError 的子类，专门用来处理 HTTP 请求错误，比如认证请求失败等。它有如下3个属性：</p><ul><li>code：返回 HTTP 状态码，比如 404 表示网页不存在，500 表示服务器内部错误等。</li><li>reason：同父类一样，用于返回错误的原因。</li><li>headers：返回请求头。</li></ul><p>简单举例：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> urllib <span class="keyword">import</span> request, error  </span><br><span class="line"><span class="keyword">try</span>:  </span><br><span class="line">    response = request.urlopen(<span class="string">'https://www.itrhx.com/index/'</span>)  </span><br><span class="line"><span class="keyword">except</span> error.HTTPError <span class="keyword">as</span> e:  </span><br><span class="line">    print(e.code, e.reason, e.headers)</span><br></pre></td></tr></table></figure></p><p>输出结果：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">404</span> Not Found Content-Type: text/html; charset=utf<span class="number">-8</span></span><br><span class="line">Server: GitHub.com</span><br><span class="line">ETag: <span class="string">"5d57f030-7f2"</span></span><br><span class="line">Access-Control-Allow-Origin: *</span><br><span class="line">X-Proxy-Cache: MISS</span><br><span class="line">X-GitHub-Request-Id: <span class="number">4</span>B46:<span class="number">2</span>F5D:<span class="number">6</span>DE0F1:<span class="number">755</span>BB2:<span class="number">5</span>D5964C5</span><br><span class="line">Content-Length: <span class="number">2034</span></span><br><span class="line">Accept-Ranges: bytes</span><br><span class="line">Date: Sun, <span class="number">18</span> Aug <span class="number">2019</span> <span class="number">14</span>:<span class="number">50</span>:<span class="number">41</span> GMT</span><br><span class="line">Via: <span class="number">1.1</span> varnish</span><br><span class="line">Age: <span class="number">252</span></span><br><span class="line">Connection: close</span><br><span class="line">X-Served-By: cache-tyo19951-TYO</span><br><span class="line">X-Cache: HIT</span><br><span class="line">X-Cache-Hits: <span class="number">1</span></span><br><span class="line">X-Timer: S1566139842<span class="number">.563134</span>,VS0,VE0</span><br><span class="line">Vary: Accept-Encoding</span><br><span class="line">X-Fastly-Request-ID: e9eb0a507be66a866bfaa7c5cc2e1c53b1f7ccab</span><br></pre></td></tr></table></figure></p><h2 id="【1-3-3】-进阶用法"><a href="#【1-3-3】-进阶用法" class="headerlink" title="【1.3.3】 进阶用法"></a><font color="#FF0000">【1.3.3】 进阶用法</font></h2><p>因为 URLError 是 HTTPError 的父类，所以可以先选择捕获子类的错误，再去捕获父类的错误，前面的代码改进：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> urllib <span class="keyword">import</span> request, error  </span><br><span class="line">​</span><br><span class="line"><span class="keyword">try</span>:  </span><br><span class="line">    response = request.urlopen(<span class="string">'https://www.itrhx.com/index/'</span>)  </span><br><span class="line"><span class="keyword">except</span> error.HTTPError <span class="keyword">as</span> e:  </span><br><span class="line">    print(e.reason, e.code, e.headers)  </span><br><span class="line"><span class="keyword">except</span> error.URLError <span class="keyword">as</span> e:  </span><br><span class="line">    print(e.reason)  </span><br><span class="line"><span class="keyword">else</span>:  </span><br><span class="line">    print(<span class="string">'Request Successfully'</span>)</span><br></pre></td></tr></table></figure></p><h1 id="【1-4】-urllib-parse-解析-URL"><a href="#【1-4】-urllib-parse-解析-URL" class="headerlink" title=" 【1.4】 urllib.parse 解析 URL"></a><font color="#FF0000"> 【1.4】 urllib.parse 解析 URL</font></h1><h2 id="【1-4-1】-urllib-parse-urlencode"><a href="#【1-4-1】-urllib-parse-urlencode" class="headerlink" title="【1.4.1】 urllib.parse.urlencode()"></a><font color="#FF0000">【1.4.1】 urllib.parse.urlencode()</font></h2><p>将字典参数序列化为 GET 请求参数，示例：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> urllib.parse <span class="keyword">import</span> urlencode</span><br><span class="line">data = &#123;</span><br><span class="line">    <span class="string">'ie'</span>: <span class="string">'utf-8'</span>,</span><br><span class="line">    <span class="string">'wd'</span>: <span class="string">'TRHX'</span>,</span><br><span class="line">&#125;</span><br><span class="line">base_url = <span class="string">'http://www.baidu.com?'</span></span><br><span class="line">url = base_url + urlencode(data)</span><br><span class="line">print(url)</span><br></pre></td></tr></table></figure></p><p>输出结果：<br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://www.baidu.com?ie=utf-8&amp;wd=TRHX</span><br></pre></td></tr></table></figure></p><h2 id="【1-4-2】-urllib-parse-parse-qs"><a href="#【1-4-2】-urllib-parse-parse-qs" class="headerlink" title="【1.4.2】 urllib.parse.parse_qs()"></a><font color="#FF0000">【1.4.2】 urllib.parse.parse_qs()</font></h2><p>与 urlencode() 相反，将 GET 请求参数反序列化转回字典，示例：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> urllib.parse <span class="keyword">import</span> parse_qs</span><br><span class="line">query = <span class="string">'name=TRHX&amp;age=20'</span></span><br><span class="line">print(parse_qs(query))</span><br></pre></td></tr></table></figure></p><p>输出结果：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;<span class="string">'name'</span>: [<span class="string">'TRHX'</span>], <span class="string">'age'</span>: [<span class="string">'20'</span>]&#125;</span><br></pre></td></tr></table></figure></p><h2 id="【1-4-3】-urllib-parse-parse-qsl"><a href="#【1-4-3】-urllib-parse-parse-qsl" class="headerlink" title="【1.4.3】 urllib.parse.parse_qsl()"></a><font color="#FF0000">【1.4.3】 urllib.parse.parse_qsl()</font></h2><p>将参数转化为元组组成的列表，示例：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> urllib.parse <span class="keyword">import</span> parse_qsl</span><br><span class="line">query = <span class="string">'name=TRHX&amp;age=20'</span></span><br><span class="line">print(parse_qsl(query))</span><br></pre></td></tr></table></figure></p><p>输出 结果：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[(<span class="string">'name'</span>, <span class="string">'TRHX'</span>), (<span class="string">'age'</span>, <span class="string">'20'</span>)]</span><br></pre></td></tr></table></figure></p><h2 id="【1-4-4】-urllib-parse-urlparse"><a href="#【1-4-4】-urllib-parse-urlparse" class="headerlink" title="【1.4.4】 urllib.parse.urlparse()"></a><font color="#FF0000">【1.4.4】 urllib.parse.urlparse()</font></h2><p>对 URL 进行分段，返回 6 个结果，示例：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> urllib.parse <span class="keyword">import</span> urlparse</span><br><span class="line">result = urlparse(<span class="string">'http://www.baidu.com/index.html;user?id=5#comment'</span>)</span><br><span class="line">print(type(result), result)</span><br></pre></td></tr></table></figure></p><p>输出结果：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;<span class="class"><span class="keyword">class</span> '<span class="title">urllib</span>.<span class="title">parse</span>.<span class="title">ParseResult</span>'&gt; <span class="title">ParseResult</span><span class="params">(scheme=<span class="string">'http'</span>, netloc=<span class="string">'www.baidu.com'</span>, path=<span class="string">'/index.html'</span>, params=<span class="string">'user'</span>, query=<span class="string">'id=5'</span>, fragment=<span class="string">'comment'</span>)</span></span></span><br></pre></td></tr></table></figure></p><p>返回结果为 ParseResult 类型的对象，含 scheme、netloc、path、params、query 和 fragment 6 个部分，依次代表协议、域名、路径、参数、查询条件、锚点</p><h2 id="【1-4-5】-urllib-parse-urlunparse"><a href="#【1-4-5】-urllib-parse-urlunparse" class="headerlink" title="【1.4.5】 urllib.parse.urlunparse()"></a><font color="#FF0000">【1.4.5】 urllib.parse.urlunparse()</font></h2><p>与 urlparse() 相反，对 URL 进行组合，传入的参数是一个可迭代对象，长度必须是 6，否则会抛出参数数量不足或者过多的问题，示例：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> urllib.parse <span class="keyword">import</span> urlunparse  </span><br><span class="line">data = [<span class="string">'http'</span>, <span class="string">'www.baidu.com'</span>, <span class="string">'index.html'</span>, <span class="string">'user'</span>, <span class="string">'a=6'</span>, <span class="string">'comment'</span>]  </span><br><span class="line">print(urlunparse(data))</span><br></pre></td></tr></table></figure></p><p>输出结果：<br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://www.baidu.com/index.html;user?a=6#comment</span><br></pre></td></tr></table></figure></p><h2 id="【1-4-6】-urllib-parse-urlsplit"><a href="#【1-4-6】-urllib-parse-urlsplit" class="headerlink" title="【1.4.6】 urllib.parse.urlsplit()"></a><font color="#FF0000">【1.4.6】 urllib.parse.urlsplit()</font></h2><p>与 urlparse() 方法相似，但是它不再单独解析 params 部分，只返回 5 个结果。params 会合并到 path 中，示例：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> urllib.parse <span class="keyword">import</span> urlsplit  </span><br><span class="line">result = urlsplit(<span class="string">'http://www.baidu.com/index.html;user?id=5#comment'</span>)  </span><br><span class="line">print(result)</span><br></pre></td></tr></table></figure></p><p>输出结果：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SplitResult(scheme=<span class="string">'http'</span>, netloc=<span class="string">'www.baidu.com'</span>, path=<span class="string">'/index.html;user'</span>, query=<span class="string">'id=5'</span>, fragment=<span class="string">'comment'</span>)</span><br></pre></td></tr></table></figure></p><h2 id="【1-4-7】-urllib-parse-urlunsplit"><a href="#【1-4-7】-urllib-parse-urlunsplit" class="headerlink" title="【1.4.7】 urllib.parse.urlunsplit()"></a><font color="#FF0000">【1.4.7】 urllib.parse.urlunsplit()</font></h2><p>与 urlunparse() 方法类似，对 URL 进行组合，传入的参数也是一个可迭代对象，长度必须为 5，示例：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> urllib.parse <span class="keyword">import</span> urlunsplit  </span><br><span class="line">data = [<span class="string">'http'</span>, <span class="string">'www.baidu.com'</span>, <span class="string">'index.html'</span>, <span class="string">'a=6'</span>, <span class="string">'comment'</span>]  </span><br><span class="line">print(urlunsplit(data))</span><br></pre></td></tr></table></figure></p><p>输出结果：<br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://www.baidu.com/index.html?a=6#comment</span><br></pre></td></tr></table></figure></p><h2 id="【1-4-8】-urllib-parse-urljoin"><a href="#【1-4-8】-urllib-parse-urljoin" class="headerlink" title="【1.4.8】 urllib.parse.urljoin()"></a><font color="#FF0000">【1.4.8】 urllib.parse.urljoin()</font></h2><p>对 URL 进行组合，提供两个 URL 作为两个参数，将会自动分析 URL 的 scheme、netloc 和 path 这 3 个内容并对新链接缺失的部分进行补充，最后返回结果，示例：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> urllib.parse <span class="keyword">import</span> urljoin  </span><br><span class="line">print(urljoin(<span class="string">'http://www.baidu.com'</span>, <span class="string">'friends.html'</span>))  </span><br><span class="line">print(urljoin(<span class="string">'http://www.baidu.com'</span>, <span class="string">'https://www.itrhx.com/friends.html'</span>))  </span><br><span class="line">print(urljoin(<span class="string">'http://www.baidu.com/friends.html'</span>, <span class="string">'https://www.itrhx.com/friends.html'</span>))  </span><br><span class="line">print(urljoin(<span class="string">'http://www.baidu.com/friends.html'</span>, <span class="string">'https://www.itrhx.com/friends.html?id=2'</span>))  </span><br><span class="line">print(urljoin(<span class="string">'http://www.baidu.com?wd=trhx'</span>, <span class="string">'https://www.itrhx.com/index.html'</span>))  </span><br><span class="line">print(urljoin(<span class="string">'http://www.baidu.com'</span>, <span class="string">'?category=2#comment'</span>))  </span><br><span class="line">print(urljoin(<span class="string">'www.baidu.com'</span>, <span class="string">'?category=2#comment'</span>))  </span><br><span class="line">print(urljoin(<span class="string">'www.baidu.com#comment'</span>, <span class="string">'?category=2'</span>))</span><br></pre></td></tr></table></figure></p><p>输出结果：<br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">http://www.baidu.com/friends.html</span><br><span class="line">https://www.itrhx.com/friends.html</span><br><span class="line">https://www.itrhx.com/friends.html</span><br><span class="line">https://www.itrhx.com/friends.html?id=2</span><br><span class="line">https://www.itrhx.com/index.html</span><br><span class="line">http://www.baidu.com?category=2#comment</span><br><span class="line">www.baidu.com?category=2#comment</span><br><span class="line">www.baidu.com?category=2</span><br></pre></td></tr></table></figure></p><h2 id="【1-4-9】-urllib-parse-quote"><a href="#【1-4-9】-urllib-parse-quote" class="headerlink" title="【1.4.9】 urllib.parse.quote()"></a><font color="#FF0000">【1.4.9】 urllib.parse.quote()</font></h2><p>将内容转化为 URL 编码的格式。当 URL 中带有中文参数时，可以将中文字符转化为 URL 编码，示例：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> urllib.parse <span class="keyword">import</span> quote</span><br><span class="line">keyword = <span class="string">'中国'</span>  </span><br><span class="line">url = <span class="string">'https://www.baidu.com/s?wd='</span> + quote(keyword)  </span><br><span class="line">print(url)</span><br></pre></td></tr></table></figure></p><p>输出结果：<br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://www.baidu.com/s?wd=%E4%B8%AD%E5%9B%BD</span><br></pre></td></tr></table></figure></p><h2 id="【1-4-10】-urllib-parse-unquote"><a href="#【1-4-10】-urllib-parse-unquote" class="headerlink" title="【1.4.10】 urllib.parse.unquote()"></a><font color="#FF0000">【1.4.10】 urllib.parse.unquote()</font></h2><p>与 quote() 方法相反，对 URL 进行解码，示例：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> urllib.parse <span class="keyword">import</span> unquote  </span><br><span class="line">url = <span class="string">'https://www.baidu.com/s?wd=%E4%B8%AD%E5%9B%BD'</span>  </span><br><span class="line">print(unquote(url))</span><br></pre></td></tr></table></figure></p><p>输出结果：<br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://www.baidu.com/s?wd=中国</span><br></pre></td></tr></table></figure></p><h1 id="【1-5】-urllib-robotparser-爬取权限判断"><a href="#【1-5】-urllib-robotparser-爬取权限判断" class="headerlink" title=" 【1.5】 urllib.robotparser 爬取权限判断"></a><font color="#FF0000"> 【1.5】 urllib.robotparser 爬取权限判断</font></h1><h2 id="【1-5-1】-Robots-协议简介"><a href="#【1-5-1】-Robots-协议简介" class="headerlink" title="【1.5.1】 Robots 协议简介"></a><font color="#FF0000">【1.5.1】 Robots 协议简介</font></h2><blockquote><p>Robots 协议即爬虫协议，用来告诉爬虫和搜索引擎哪些页面可以抓取，哪些不可以抓取。它通常是一个叫作 robots.txt 的文本文件，一般放在网站的根目录下。</p></blockquote><p>robots.txt 基本格式：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">User-agent:</span><br><span class="line">Disallow:</span><br><span class="line">Allow:</span><br></pre></td></tr></table></figure></p><ul><li>User-agent 为搜索爬虫的名称，设置为 * 则表示对任何爬虫皆有效；</li><li>Disallow 指定了不允许抓取的目录，设置为 / 则代表不允许抓取所有页面；</li><li>Allow 指定了允许抓取的目录，一般和 Disallow 一起使用，一般不会单独使用，用来排除某些限制。</li></ul><p>一些常见的搜索爬虫名称及其对应的网站：</p><table><thead><tr><th>爬虫名称</th><th>网站名称</th><th>网站地址</th></tr></thead><tbody><tr><td>BaiduSpider</td><td>百度</td><td><a href="http://www.baidu.com" target="_blank" rel="noopener">www.baidu.com</a></td></tr><tr><td>Googlebot</td><td>谷歌</td><td><a href="http://www.google.com" target="_blank" rel="noopener">www.google.com</a></td></tr><tr><td>360Spider</td><td>360</td><td><a href="http://www.so.com" target="_blank" rel="noopener">www.so.com</a></td></tr><tr><td>Sogouspider</td><td>搜狗</td><td><a href="http://www.sogou.com" target="_blank" rel="noopener">www.sogou.com</a></td></tr><tr><td>YodaoBot</td><td>有道</td><td><a href="http://www.youdao.com" target="_blank" rel="noopener">www.youdao.com</a></td></tr><tr><td>Bingbot</td><td>必应</td><td><a href="http://www.bing.com" target="_blank" rel="noopener">www.bing.com</a></td></tr><tr><td>Yahoo!  Slurp</td><td>雅虎</td><td><a href="http://www.yahoo.com" target="_blank" rel="noopener">www.yahoo.com</a></td></tr><tr><td>ia_archiver</td><td>Alexa</td><td><a href="http://www.alexa.cn" target="_blank" rel="noopener">www.alexa.cn</a></td></tr><tr><td>Scooter</td><td>altavista</td><td><a href="http://www.altavista.com" target="_blank" rel="noopener">www.altavista.com</a></td></tr></tbody></table><h2 id="【1-5-2】-RobotFileParser-类常用方法"><a href="#【1-5-2】-RobotFileParser-类常用方法" class="headerlink" title="【1.5.2】 RobotFileParser 类常用方法"></a><font color="#FF0000">【1.5.2】 RobotFileParser 类常用方法</font></h2><p>RobotFileParser 类的声明：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">urllib.robotparser.RobotFileParser(url=<span class="string">''</span>)</span><br></pre></td></tr></table></figure></p><p>常用方法及其解释：</p><ul><li><p>set_url：用来设置 robots.txt 文件的链接。如果在创建 RobotFileParser<br>对象时传入了链接，那么就不需要再用这种方法了。</p></li><li><p>read：读取 robots.txt 文件并进行分析。此方法执行一个读取和分析操作，若不调用此方法，接下来的判断都会为 False，这个方法不会返回任何内容，但是执行了读取操作。</p></li><li><p>parse：解析 robots.txt 文件，传入的参数是 robots.txt 某些行的内容，它会按照 robots.txt 的语法规则来分析这些内容。</p></li><li><p>can_fetch：该方法传入两个参数，第一个是 User-agent，第二个是要抓取的 URL。返回的内容是该搜索引擎是否可以抓取这个 URL，返回结果是 True 或 False。</p></li><li><p>mtime：返回的是上次抓取和分析 robots.txt 的时间，此方法可以定期检查来抓取最新的 robots.txt。</p></li><li><p>modified：将当前时间设置为上次抓取和分析 robots.txt 的时间。</p></li></ul><p>以简书为例：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> urllib.robotparser <span class="keyword">import</span> RobotFileParser</span><br><span class="line">rp = RobotFileParser()</span><br><span class="line">rp.set_url(<span class="string">'http://www.jianshu.com/robots.txt'</span>)</span><br><span class="line">rp.read()</span><br><span class="line">print(rp.can_fetch(<span class="string">'*'</span>, <span class="string">'https://www.jianshu.com/p/6d9527300b4c'</span>))</span><br><span class="line">print(rp.can_fetch(<span class="string">'*'</span>, <span class="string">"http://www.jianshu.com/search?q=python&amp;page=1&amp;type=collections"</span>))</span><br></pre></td></tr></table></figure></p><p>输出结果：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">False</span></span><br><span class="line"><span class="keyword">False</span></span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;center&gt;&lt;font color=&quot;#1BC3FB&quot; size=&quot;4&quot;&gt;Python3 爬虫学习笔记第一章 ——【基本库 urllib 的使用】&lt;/font&gt;&lt;/center&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="Python3 学习笔记" scheme="https://www.itrhx.com/categories/Python3-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
      <category term="Python3 爬虫" scheme="https://www.itrhx.com/categories/Python3-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/Python3-%E7%88%AC%E8%99%AB/"/>
    
    
      <category term="爬虫" scheme="https://www.itrhx.com/tags/%E7%88%AC%E8%99%AB/"/>
    
      <category term="urllib" scheme="https://www.itrhx.com/tags/urllib/"/>
    
  </entry>
  
  <entry>
    <title>一个 JS 脚本实现网站预加载，提升页面加载速度</title>
    <link href="https://www.itrhx.com/2019/08/23/A24-instant.page/"/>
    <id>https://www.itrhx.com/2019/08/23/A24-instant.page/</id>
    <published>2019-08-23T01:27:49.948Z</published>
    <updated>2019-09-09T13:44:52.383Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p><a href="https://instant.page/" target="_blank" rel="noopener">instant.page</a> 使用即时预加载技术，在用户点击之前预先加载页面。当用户的鼠标悬停在一个链接上超过 65 毫秒时，浏览器会对此页面进行预加载，当用户点击链接后，就从预加载的缓存中直接读取页面内容，从而达到缩短页面加载时间的目的。</p><a id="more"></a><fancybox><br><img src="https://cdn.jsdelivr.net/gh/TRHX/ImageHosting/ITRHX-PIC/A24/01.gif" alt="演示"><br></fancybox><p>以我博客为例，使用了这项技术后，当鼠标在一个链接停留超过 65 毫秒时，Network 里可以看见相关文章已经预加载出来了，而停留时间过短就不会预加载（红色部分，状态为 <font color="#FF0000">canceled</font>）</p><p>使用方法：<br>将以下HTML代码放在&lt;/ body&gt; 之前即可：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"//instant.page/1.2.2"</span> <span class="attr">type</span>=<span class="string">"module"</span> <span class="attr">integrity</span>=<span class="string">"sha384-2xV8M5griQmzyiY3CDqh1dn4z3llDVqZDqzjzcY+jCBCk/a5fXJmuZ/40JJAPeoU"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>但是此脚本是官方的，储存在国外服务器，对国内访问不太友好，可以将该JS脚本储存到自己的服务器上，<a href="https://cdn.jsdelivr.net/gh/TRHX/CDN-for-itrhx.com@2.0.2/js/instantclick-1.2.2.js" target="_blank" rel="noopener">点此获取</a>该JS脚本，然后再根据以下格式在&lt;/ body&gt; 之前引用：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"`存放路径`/instantclick-1.2.2.js"</span> <span class="attr">type</span>=<span class="string">"module"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>也可以直接使用我的，使用 jsDeliver CDN 加速，速度还可以：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://cdn.jsdelivr.net/gh/TRHX/CDN-for-itrhx.com@2.0.2/js/instantclick-1.2.2.js"</span> <span class="attr">type</span>=<span class="string">"module"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>参考资料：<a href="https://www.zrahh.com/archives/399.html" target="_blank" rel="noopener">《网站预加载 JS 脚本 instant.page》</a>——by 左岸  ；<a href="https://instant.page/" target="_blank" rel="noopener">instant.page官网</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;https://instant.page/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;instant.page&lt;/a&gt; 使用即时预加载技术，在用户点击之前预先加载页面。当用户的鼠标悬停在一个链接上超过 65 毫秒时，浏览器会对此页面进行预加载，当用户点击链接后，就从预加载的缓存中直接读取页面内容，从而达到缩短页面加载时间的目的。&lt;/p&gt;
    
    </summary>
    
      <category term="WEB前端" scheme="https://www.itrhx.com/categories/WEB%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="instant.page" scheme="https://www.itrhx.com/tags/instant-page/"/>
    
      <category term="JS 预加载" scheme="https://www.itrhx.com/tags/JS-%E9%A2%84%E5%8A%A0%E8%BD%BD/"/>
    
  </entry>
  
  <entry>
    <title>网站ICP备案和公安备案流程</title>
    <link href="https://www.itrhx.com/2019/08/23/A23-beian/"/>
    <id>https://www.itrhx.com/2019/08/23/A23-beian/</id>
    <published>2019-08-23T01:27:49.803Z</published>
    <updated>2019-09-09T13:47:39.790Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p><img src="https://cdn.jsdelivr.net/gh/TRHX/ImageHosting/ITRHX-PIC/A23/Website-Approve.png" alt="Website-Approve.png"></p><p>网站备案分为ICP备案和公安备案</p><ul><li><p>ICP备案：ICP备案的目的就是为了防止在网上从事非法的网站经营活动，打击不良互联网信息的传播，如果网站不备案的话，很有可能被查处以后关停。根据中华人民共和国信息产业部第十二次部务会议审议通过的《非经营性互联网信息服务备案管理办法》条例，在中华人民共和国境内提供非经营性互联网信息服务，应当办理备案。未经备案，不得在中华人民共和国境内从事非经营性互联网信息服务。而对于没有备案的网站将予以罚款或关闭。</p></li><li><p>公安备案：网站备案是根据国家法律法规需要网站的所有者向国家有关部门申请的备案，公安局备案是其中一种。公安局备案一般按照各地公安机关指定的地点和方式进行，操作流程会比ICP备案流程简单，主要是已登记为主。</p></li></ul><p>以百度官网为例，其中<code>京公安网备11000002000001</code>就是公安备案，<code>京ICP证030173号</code>就是ICP备案<br><img src="https://cdn.jsdelivr.net/gh/TRHX/ImageHosting/ITRHX-PIC/A23/01.png" alt="01.png"></p><h1 id="–-ICP备案"><a href="#–-ICP备案" class="headerlink" title=" – ICP备案 "></a><font color="#FF0000"> – ICP备案 </font></h1><p>一般在域名服务商那里都会有代备案系统，下面以阿里云为例，进入备案系统：<br><img src="https://cdn.jsdelivr.net/gh/TRHX/ImageHosting/ITRHX-PIC/A23/02.png" alt="02.png"></p><h3 id="1、填写信息验证备案类型"><a href="#1、填写信息验证备案类型" class="headerlink" title="1、填写信息验证备案类型"></a><font color="#FF0000">1、填写信息验证备案类型</font></h3><p>备案主办单位填写，个人就选个人，企业就选企业，按照实际信息填写：<br><img src="https://cdn.jsdelivr.net/gh/TRHX/ImageHosting/ITRHX-PIC/A23/03.png" alt="03.png"></p><h3 id="2、产品验证"><a href="#2、产品验证" class="headerlink" title="2、产品验证"></a><font color="#FF0000">2、产品验证</font></h3><p>对搭建备案网站的云服务器进行验证，如果你在阿里云购买了相关产品，就选择相应的产品类型和实例进行验证，也可以勾选<code>已有备案服务号</code>，填写服务号进行验证，备案服务号可以通过备案控制台进行申请，具体操作可以参考官方文档<a href="https://help.aliyun.com/knowledge_detail/36938.html" target="_blank" rel="noopener">《申请备案服务号》</a>，也有的小伙伴没有在任何地方购买过服务器等相关产品，比如单纯搭建一个 <a href="https://blog.csdn.net/qq_36759224/article/details/82121420" target="_blank" rel="noopener">Github Pages + Hexo</a> 轻量级的个人博客，这种博客没有后端，不需要服务器，但是要备案怎么办？这种情况也好解决，去某宝买一个服务号就行了。<br><img src="https://cdn.jsdelivr.net/gh/TRHX/ImageHosting/ITRHX-PIC/A23/04.png" alt="04.png"><br><img src="https://cdn.jsdelivr.net/gh/TRHX/ImageHosting/ITRHX-PIC/A23/05.png" alt="05.png"></p><h3 id="3、填写网站信息"><a href="#3、填写网站信息" class="headerlink" title="3、填写网站信息"></a><font color="#FF0000">3、填写网站信息</font></h3><p>填写网站信息以及办理备案的个人或者单位的真实信息，在填写网站名称的时候要<font color="#FF0000">特别注意！特别注意！特别注意！不满足要求的话是会被打回的！</font>不能使用姓名、地名、成语、不能包含公司、组织等企业性质的词语……具体要求可以参考官方文档<a href="https://help.aliyun.com/knowledge_detail/36948.html?spm=a2c4g.11186623.6.573.6e1369a5ZNlC0v" target="_blank" rel="noopener">《填写主体信息和网站信息》</a>。<br><img src="https://cdn.jsdelivr.net/gh/TRHX/ImageHosting/ITRHX-PIC/A23/06.png" alt="06.png"><br><img src="https://cdn.jsdelivr.net/gh/TRHX/ImageHosting/ITRHX-PIC/A23/07.png" alt="07.png"></p><h3 id="4、上传资料"><a href="#4、上传资料" class="headerlink" title="4、上传资料"></a><font color="#FF0000">4、上传资料</font></h3><p>根据要求，上传证件照片或证件彩色扫描件。身份证好说，拍好了上传就行了，注意《网站备案信息真实性核验单》需要你<font color="#FF0000">下载并打印在一张A4纸上，使用黑色签字笔填写，不能涂改</font>，具体可参照所给的示例进行填写，填写完成后再拍照上传。企业网站类似，提交备案后会在一个工作日内进行初审。<br><img src="https://cdn.jsdelivr.net/gh/TRHX/ImageHosting/ITRHX-PIC/A23/08.png" alt="08.png"><br><img src="https://cdn.jsdelivr.net/gh/TRHX/ImageHosting/ITRHX-PIC/A23/09.jpg" alt="09.jpg"><br><img src="https://cdn.jsdelivr.net/gh/TRHX/ImageHosting/ITRHX-PIC/A23/10.png" alt="10.png"></p><h3 id="5、人脸核验或幕布拍照核验"><a href="#5、人脸核验或幕布拍照核验" class="headerlink" title="5、人脸核验或幕布拍照核验"></a><font color="#FF0000">5、人脸核验或幕布拍照核验</font></h3><p>根据不同地域管局要求及核验平台的支持情况，使用人脸识别进行核验，或者申请专用幕布进行幕布拍照核验</p><table><thead><tr><th style="text-align:center">地区</th><th style="text-align:left">核验要求</th></tr></thead><tbody><tr><td style="text-align:center">上海、福建地区用户</td><td style="text-align:left">需使用阿里云APP进行人脸核验。如果使用PC端发起的备案申请，请根据界面提示下载阿里云APP进行人脸核验。</td></tr><tr><td style="text-align:center">广东、辽宁、安徽、重庆地区用户</td><td style="text-align:left">首次备案、新增网站：支持使用阿里云APP进行人脸核验或通过阿里云备案平台（PC端）进行幕布拍照核验。<br>其他备案类型：需通过阿里云备案平台（PC端）进行幕布拍照核验。</td></tr><tr><td style="text-align:center">其他地区用户</td><td style="text-align:left">通过阿里云备案平台（PC端）进行幕布拍照核验。</td></tr></tbody></table><p>以幕布拍照核验为例，如果你没有阿里云的幕布，就需要申请幕布（免费的），邮寄很快，大约两三天就到了，等收到幕布后，按照要求进行拍照，<font color="#FF0000">一定要仔细阅读拍照说明！一定要仔细阅读拍照说明！一定要仔细阅读拍照说明！不合格依旧会被打回！</font>拍照完成后上传即可。<br><img src="https://cdn.jsdelivr.net/gh/TRHX/ImageHosting/ITRHX-PIC/A23/11.png" alt="11.png"><br><img src="https://cdn.jsdelivr.net/gh/TRHX/ImageHosting/ITRHX-PIC/A23/12.png" alt="12.png"><br><img src="https://cdn.jsdelivr.net/gh/TRHX/ImageHosting/ITRHX-PIC/A23/13.png" alt="13.png"></p><h3 id="6、提交管局、短信核验"><a href="#6、提交管局、短信核验" class="headerlink" title="6、提交管局、短信核验"></a><font color="#FF0000">6、提交管局、短信核验</font></h3><p>当照片审核通过后，就会提交到管局，工信部要求部分省市成为手机号码短信核验试点省市，相应省市的用户在阿里云备案平台提交备案申请且初审完成后，会收到工信部发送的核验短信，短信包含验证码和验证地址，需要在收到短信的24小时内完成短信核验，备案申请才能进入管局审核。<br>需短信核验省份：</p><ul><li>2017年12月18日起：天津、甘肃、西藏、宁夏、海南、新疆、青海被列为试点省份。</li><li>2018年9月10日起：浙江、四川、福建、陕西、重庆、广西、云南被列为试点省份。</li><li>2018年9月24日起：山东、河南、安徽、湖南、山西、黑龙江、内蒙古、湖北被列为试点省份。</li></ul><p><img src="https://cdn.jsdelivr.net/gh/TRHX/ImageHosting/ITRHX-PIC/A23/14.png" alt="14.png"></p><h3 id="7、ICP备案完成"><a href="#7、ICP备案完成" class="headerlink" title="7、ICP备案完成"></a><font color="#FF0000">7、ICP备案完成</font></h3><p>整个备案过程中会有阿里云的客服打电话给你，进行信息确认，备案申请信息成功提交管局系统后，管局审核一般为 3 - 20 个工作日（亲测很快，不到一个周就通过了），审核通过后会收到阿里云的邮件通知。<br><img src="https://cdn.jsdelivr.net/gh/TRHX/ImageHosting/ITRHX-PIC/A23/15.png" alt="15.png"></p><h1 id="–-公安备案"><a href="#–-公安备案" class="headerlink" title=" – 公安备案 "></a><font color="#FF0000"> – 公安备案 </font></h1><p>公安备案个人觉得比ICP备案还要麻烦，自己在公安备案的时候，最开始申请了一个月也没给我处理（大概是地方原因，所在的市比较小，估计都没几个人办过网站，网警也不太负责），与ICP备案最大的不同，如果你是交互式网站的话，公安备案是需要你去公安机关当面审核的，这也是比较麻烦的一点。</p><h3 id="1、用户注册、登录"><a href="#1、用户注册、登录" class="headerlink" title="1、用户注册、登录"></a><font color="#FF0000">1、用户注册、登录</font></h3><p>登录<a href="http://www.beian.gov.cn" target="_blank" rel="noopener">全国互联网安全管理服务平台</a>，选择联网备案登录，注册账号并登录<br><img src="https://cdn.jsdelivr.net/gh/TRHX/ImageHosting/ITRHX-PIC/A23/16.png" alt="16.png"></p><h3 id="2、新办网站备案申请"><a href="#2、新办网站备案申请" class="headerlink" title="2、新办网站备案申请"></a><font color="#FF0000">2、新办网站备案申请</font></h3><p>点击新办网站申请，按实填写网站开办主体，上传身份证正反照和手持身份证件照。<br><img src="https://cdn.jsdelivr.net/gh/TRHX/ImageHosting/ITRHX-PIC/A23/17.png" alt="17.png"><br><img src="https://cdn.jsdelivr.net/gh/TRHX/ImageHosting/ITRHX-PIC/A23/18.png" alt="18.png"></p><h3 id="3、填写网站基本信息"><a href="#3、填写网站基本信息" class="headerlink" title="3、填写网站基本信息"></a><font color="#FF0000">3、填写网站基本信息</font></h3><p>按实填写网站基本信息，需要注意的地方：</p><p><font color="#FF0000">IP：</font>IP地址为阿里云/腾讯云的公网IP地址，请不要填写内网IP。</p><p><font color="#FF0000">域名证书：</font>以阿里云为例，进入【域名控制台】，点击域名后面的【管理】，选择【域名证书下载】即可，其它服务商类似。</p><p><font color="#FF0000">网络接入/域名注册服务商：</font>若办理公安备案的域名是通过<a href="https://www.aliyun.com/" target="_blank" rel="noopener">阿里云</a>完成的工信部备案，则按照以下填写：<br>网络接入服务商：</p><ul><li>接入商所属地区管辖：境内</li><li>接入商所属区域 ：浙江省 杭州市 滨江区</li><li>名称：阿里云计算有限公司</li><li>网站接入方式：租赁虚拟空间</li></ul><p>域名注册服务商：</p><ul><li>域名商所属地区管辖：境内</li><li>域名服务商所属区域：浙江省 杭州市 余杭区 </li><li>名称：阿里云计算有限公司（原万网）</li></ul><p>也可以通过点击后面的<code>查询网络接入\域名注册服务商</code>直接选择相应服务商，其他服务商类似</p><p><font color="#FF0000">服务类型：</font>交互式服务指：为互联网用户提供信息发布、交流互动等服务，包括但不限于论坛、博客、微博、网络购物、网上支付等服务类型，此项选择是否提供互联网交互服务将会直接影响到后面是否需要去公安局当面核验，若选择<code>是</code>，当地网警会打电话叫你去公安局当面核验，还需要填写《交互式服务安全检查表》等各种文件，总之是比较麻烦的，个人小网站，博客什么的建议选择<code>否</code>，选择<code>www服务</code>，这样的话不用去当面核验，审核下来也比较快，企业单位用户建议选择交互式。</p><p>其他信息如实填写即可！<br><img src="https://cdn.jsdelivr.net/gh/TRHX/ImageHosting/ITRHX-PIC/A23/19.png" alt="19.png"></p><h3 id="4、填写网站负责人信息"><a href="#4、填写网站负责人信息" class="headerlink" title="4、填写网站负责人信息"></a><font color="#FF0000">4、填写网站负责人信息</font></h3><p>填写网站安全负责人和网站应急联络人相关信息，网站应急联络人直接勾选同主体负责人后会自动填入。<br><img src="https://cdn.jsdelivr.net/gh/TRHX/ImageHosting/ITRHX-PIC/A23/20.png" alt="20.png"></p><h3 id="5、同意责任书并提交审核"><a href="#5、同意责任书并提交审核" class="headerlink" title="5、同意责任书并提交审核"></a><font color="#FF0000">5、同意责任书并提交审核</font></h3><p>《互联网信息服务单位网络安全责任告知书》有30秒的强制阅读时间，建议认真阅读一下告知书的内容。然后勾选我已阅读，点击提交即可。随后可以看到审核状态，不同地区政策有所不同，会有当地的网警联系网站负责人的，审核通过后记得在网站首页底部张贴公安机关核发的备案图标！<br><img src="https://cdn.jsdelivr.net/gh/TRHX/ImageHosting/ITRHX-PIC/A23/21.png" alt="21.png"><br><img src="https://cdn.jsdelivr.net/gh/TRHX/ImageHosting/ITRHX-PIC/A23/22.png" alt="22.png"></p>]]></content>
    
    <summary type="html">
    
      为了规范互联网信息服务活动，促进互联网信息服务健康有序发展，国家相关部门要求在国内的所有网站都必须备案(使用海外服务器则不需要备案)，未备案的域名不能使用国内服务器。部分推广平台也需要备案才可以开通。
    
    </summary>
    
      <category term="WEB前端" scheme="https://www.itrhx.com/categories/WEB%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="ICP备案" scheme="https://www.itrhx.com/tags/ICP%E5%A4%87%E6%A1%88/"/>
    
      <category term="公安备案" scheme="https://www.itrhx.com/tags/%E5%85%AC%E5%AE%89%E5%A4%87%E6%A1%88/"/>
    
  </entry>
  
</feed>
